	org 100h
	; Initialize Stack Pointer
x256:	mov bp, $StackTop	; 3: 189 249 228
	; Initialize Heap Pointer
x259:	mov word [65534], 65534	; 6: 199 6 254 255 254 255
	; Initialize FPU Control Word, truncate mode => set bit 10 and 11.
x265:	fstcw [bp]	; 4: 155 217 126 0
x269:	or word [bp], 3072	; 5: 129 78 0 0 12
x274:	fldcw [bp]	; 3: 217 110 0
x277:	mov word [$StackTop], 0	; 6: 199 6 249 228 0 0

main:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$1:	; Call 6 math_test 0
x283:	mov word [bp + 6], main$2	; 5: 199 70 6 41 1
x288:	mov [bp + 8], bp	; 3: 137 110 8
x291:	add bp, 6	; 3: 131 197 6
x294:	jmp math_test	; 3: 233 247 0

main$2:	; PostCall 6

main$3:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$4:	; Call 6 file_test 0
x297:	mov word [bp + 6], main$5	; 5: 199 70 6 55 1
x302:	mov [bp + 8], bp	; 3: 137 110 8
x305:	add bp, 6	; 3: 131 197 6
x308:	jmp file_test	; 3: 233 19 55

main$5:	; PostCall 6

main$6:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$7:	; Call 6 time_test 0
x311:	mov word [bp + 6], main$8	; 5: 199 70 6 69 1
x316:	mov [bp + 8], bp	; 3: 137 110 8
x319:	add bp, 6	; 3: 131 197 6
x322:	jmp time_test	; 3: 233 83 117

main$8:	; PostCall 6

main$9:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$10:	; Call 6 assert_test 0
x325:	mov word [bp + 6], main$11	; 5: 199 70 6 83 1
x330:	mov [bp + 8], bp	; 3: 137 110 8
x333:	add bp, 6	; 3: 131 197 6
x336:	jmp assert_test	; 3: 233 43 140

main$11:	; PostCall 6

main$12:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$13:	; Call 6 malloc_test 0
x339:	mov word [bp + 6], main$14	; 5: 199 70 6 97 1
x344:	mov [bp + 8], bp	; 3: 137 110 8
x347:	add bp, 6	; 3: 131 197 6
x350:	jmp malloc_test	; 3: 233 229 140

main$14:	; PostCall 6

main$15:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$16:	; Call 6 print_test 0
x353:	mov word [bp + 6], main$17	; 5: 199 70 6 111 1
x358:	mov [bp + 8], bp	; 3: 137 110 8
x361:	add bp, 6	; 3: 131 197 6
x364:	jmp print_test	; 3: 233 112 145

main$17:	; PostCall 6

main$18:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$19:	; Call 6 limits_test 0
x367:	mov word [bp + 6], main$20	; 5: 199 70 6 125 1
x372:	mov [bp + 8], bp	; 3: 137 110 8
x375:	add bp, 6	; 3: 131 197 6
x378:	jmp limits_test	; 3: 233 197 149

main$20:	; PostCall 6

main$21:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$22:	; Call 6 float_test 0
x381:	mov word [bp + 6], main$23	; 5: 199 70 6 139 1
x386:	mov [bp + 8], bp	; 3: 137 110 8
x389:	add bp, 6	; 3: 131 197 6
x392:	jmp float_test	; 3: 233 113 152

main$23:	; PostCall 6

main$24:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$25:	; Call 6 setjmp_test 0
x395:	mov word [bp + 6], main$26	; 5: 199 70 6 153 1
x400:	mov [bp + 8], bp	; 3: 137 110 8
x403:	add bp, 6	; 3: 131 197 6
x406:	jmp setjmp_test	; 3: 233 110 152

main$26:	; PostCall 6

main$27:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$28:	; Call 6 stdio_test 0
x409:	mov word [bp + 6], main$29	; 5: 199 70 6 167 1
x414:	mov [bp + 8], bp	; 3: 137 110 8
x417:	add bp, 6	; 3: 131 197 6
x420:	jmp stdio_test	; 3: 233 28 154

main$29:	; PostCall 6

main$30:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$31:	; Call 6 string_test 0
x423:	mov word [bp + 6], main$32	; 5: 199 70 6 181 1
x428:	mov [bp + 8], bp	; 3: 137 110 8
x431:	add bp, 6	; 3: 131 197 6
x434:	jmp string_test	; 3: 233 140 169

main$32:	; PostCall 6

main$33:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$34:	; Call 6 stdio_test 0
x437:	mov word [bp + 6], main$35	; 5: 199 70 6 195 1
x442:	mov [bp + 8], bp	; 3: 137 110 8
x445:	add bp, 6	; 3: 131 197 6
x448:	jmp stdio_test	; 3: 233 0 154

main$35:	; PostCall 6

main$36:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$37:	; Call 6 stdlib_test 0
x451:	mov word [bp + 6], main$38	; 5: 199 70 6 209 1
x456:	mov [bp + 8], bp	; 3: 137 110 8
x459:	add bp, 6	; 3: 131 197 6
x462:	jmp stdlib_test	; 3: 233 44 183

main$38:	; PostCall 6

main$39:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$40:	; Call 6 strtol_test 0
x465:	mov word [bp + 6], main$41	; 5: 199 70 6 223 1
x470:	mov [bp + 8], bp	; 3: 137 110 8
x473:	add bp, 6	; 3: 131 197 6
x476:	jmp strtol_test	; 3: 233 150 194

main$41:	; PostCall 6

main$42:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$43:	; Call 6 strtoul_test 0
x479:	mov word [bp + 6], main$44	; 5: 199 70 6 237 1
x484:	mov [bp + 8], bp	; 3: 137 110 8
x487:	add bp, 6	; 3: 131 197 6
x490:	jmp strtoul_test	; 3: 233 88 206

main$44:	; PostCall 6

main$45:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$46:	; Call 6 character_test 0
x493:	mov word [bp + 6], main$47	; 5: 199 70 6 251 1
x498:	mov [bp + 8], bp	; 3: 137 110 8
x501:	add bp, 6	; 3: 131 197 6
x504:	jmp character_test	; 3: 233 26 218

main$47:	; PostCall 6

main$48:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$49:	; Call 6 locale_test 0
x507:	mov word [bp + 6], main$50	; 5: 199 70 6 9 2
x512:	mov [bp + 8], bp	; 3: 137 110 8
x515:	add bp, 6	; 3: 131 197 6
x518:	jmp locale_test	; 3: 233 229 226

main$50:	; PostCall 6

main$51:	; Return 0
x521:	cmp word [bp], 0	; 4: 131 126 0 0
x525:	je return_label$0	; 2: 116 11
x527:	mov ax, [bp]	; 3: 139 70 0
x530:	mov di, [bp + 4]	; 3: 139 126 4
x533:	mov bp, [bp + 2]	; 3: 139 110 2
x536:	jmp ax	; 2: 255 224

return_label$0:
x538:	mov al, 0	; 2: 176 0
x540:	mov ah, 76	; 2: 180 76
x542:	int 33	; 2: 205 33

main$52:	; FunctionEnd main

math_test:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$1:	; PushFloat 0.333333333
x544:	fld qword [@10215$float8$0.333333333#]	; 4: 221 6 174 4

math_test$2:	; Parameter 6 0.333333333 6
x548:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$3:	; Call 6 math_test_1 0
x551:	mov word [bp + 6], math_test$4	; 5: 199 70 6 53 2
x556:	mov [bp + 8], bp	; 3: 137 110 8
x559:	add bp, 6	; 3: 131 197 6
x562:	jmp math_test_1	; 3: 233 89 3

math_test$4:	; PostCall 6

math_test$5:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$6:	; PushFloat 0.75
x565:	fld qword [@10219$float8$0.75#]	; 4: 221 6 182 4

math_test$7:	; Parameter 6 0.75 6
x569:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$8:	; Call 6 math_test_1 0
x572:	mov word [bp + 6], math_test$9	; 5: 199 70 6 74 2
x577:	mov [bp + 8], bp	; 3: 137 110 8
x580:	add bp, 6	; 3: 131 197 6
x583:	jmp math_test_1	; 3: 233 68 3

math_test$9:	; PostCall 6

math_test$10:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$11:	; PushFloat 1.000010
x586:	fld qword [@10223$float8$1.000010#]	; 4: 221 6 190 4

math_test$12:	; Parameter 6 1.000010 6
x590:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$13:	; Call 6 math_test_1 0
x593:	mov word [bp + 6], math_test$14	; 5: 199 70 6 95 2
x598:	mov [bp + 8], bp	; 3: 137 110 8
x601:	add bp, 6	; 3: 131 197 6
x604:	jmp math_test_1	; 3: 233 47 3

math_test$14:	; PostCall 6

math_test$15:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$16:	; PushFloat 1.0
x607:	fld1	; 2: 217 232

math_test$17:	; Parameter 6 1.0 6
x609:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$18:	; Call 6 math_test_1 0
x612:	mov word [bp + 6], math_test$19	; 5: 199 70 6 114 2
x617:	mov [bp + 8], bp	; 3: 137 110 8
x620:	add bp, 6	; 3: 131 197 6
x623:	jmp math_test_1	; 3: 233 28 3

math_test$19:	; PostCall 6

math_test$20:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$21:	; PushFloat 0.999999
x626:	fld qword [@10231$float8$0.999999#]	; 4: 221 6 198 4

math_test$22:	; Parameter 6 0.999999 6
x630:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$23:	; Call 6 math_test_1 0
x633:	mov word [bp + 6], math_test$24	; 5: 199 70 6 135 2
x638:	mov [bp + 8], bp	; 3: 137 110 8
x641:	add bp, 6	; 3: 131 197 6
x644:	jmp math_test_1	; 3: 233 7 3

math_test$24:	; PostCall 6

math_test$25:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$26:	; PushFloat 0.000010
x647:	fld qword [@10235$float8$0.000010#]	; 4: 221 6 206 4

math_test$27:	; Parameter 6 0.000010 6
x651:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$28:	; Call 6 math_test_1 0
x654:	mov word [bp + 6], math_test$29	; 5: 199 70 6 156 2
x659:	mov [bp + 8], bp	; 3: 137 110 8
x662:	add bp, 6	; 3: 131 197 6
x665:	jmp math_test_1	; 3: 233 242 2

math_test$29:	; PostCall 6

math_test$30:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$31:	; PushZero
x668:	fldz	; 2: 217 238

math_test$32:	; Parameter 6 0 6
x670:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$33:	; Call 6 math_test_1 0
x673:	mov word [bp + 6], math_test$34	; 5: 199 70 6 175 2
x678:	mov [bp + 8], bp	; 3: 137 110 8
x681:	add bp, 6	; 3: 131 197 6
x684:	jmp math_test_1	; 3: 233 223 2

math_test$34:	; PostCall 6

math_test$35:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$36:	; PushFloat -0.000010
x687:	fld qword [@10243$float8$minus0.000010#]	; 4: 221 6 214 4

math_test$37:	; Parameter 6 -0.000010 6
x691:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$38:	; Call 6 math_test_1 0
x694:	mov word [bp + 6], math_test$39	; 5: 199 70 6 196 2
x699:	mov [bp + 8], bp	; 3: 137 110 8
x702:	add bp, 6	; 3: 131 197 6
x705:	jmp math_test_1	; 3: 233 202 2

math_test$39:	; PostCall 6

math_test$40:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$41:	; PushFloat -0.999999
x708:	fld qword [@10247$float8$minus0.999999#]	; 4: 221 6 222 4

math_test$42:	; Parameter 6 -0.999999 6
x712:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$43:	; Call 6 math_test_1 0
x715:	mov word [bp + 6], math_test$44	; 5: 199 70 6 217 2
x720:	mov [bp + 8], bp	; 3: 137 110 8
x723:	add bp, 6	; 3: 131 197 6
x726:	jmp math_test_1	; 3: 233 181 2

math_test$44:	; PostCall 6

math_test$45:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$46:	; PushFloat -1.0
x729:	fld qword [@10251$float8$minus1.0#]	; 4: 221 6 230 4

math_test$47:	; Parameter 6 -1.0 6
x733:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$48:	; Call 6 math_test_1 0
x736:	mov word [bp + 6], math_test$49	; 5: 199 70 6 238 2
x741:	mov [bp + 8], bp	; 3: 137 110 8
x744:	add bp, 6	; 3: 131 197 6
x747:	jmp math_test_1	; 3: 233 160 2

math_test$49:	; PostCall 6

math_test$50:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$51:	; PushFloat -1.000010
x750:	fld qword [@10255$float8$minus1.000010#]	; 4: 221 6 238 4

math_test$52:	; Parameter 6 -1.000010 6
x754:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$53:	; Call 6 math_test_1 0
x757:	mov word [bp + 6], math_test$54	; 5: 199 70 6 3 3
x762:	mov [bp + 8], bp	; 3: 137 110 8
x765:	add bp, 6	; 3: 131 197 6
x768:	jmp math_test_1	; 3: 233 139 2

math_test$54:	; PostCall 6

math_test$55:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$56:	; PushFloat 6.28
x771:	fld qword [@10261$float8$6.28#]	; 4: 221 6 246 4

math_test$57:	; Parameter 6 6.28 6
x775:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$58:	; Call 6 math_test_1 0
x778:	mov word [bp + 6], math_test$59	; 5: 199 70 6 24 3
x783:	mov [bp + 8], bp	; 3: 137 110 8
x786:	add bp, 6	; 3: 131 197 6
x789:	jmp math_test_1	; 3: 233 118 2

math_test$59:	; PostCall 6

math_test$60:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$61:	; PushFloat 3.14
x792:	fld qword [@10265$float8$3.14#]	; 4: 221 6 254 4

math_test$62:	; Parameter 6 3.14 6
x796:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$63:	; Call 6 math_test_1 0
x799:	mov word [bp + 6], math_test$64	; 5: 199 70 6 45 3
x804:	mov [bp + 8], bp	; 3: 137 110 8
x807:	add bp, 6	; 3: 131 197 6
x810:	jmp math_test_1	; 3: 233 97 2

math_test$64:	; PostCall 6

math_test$65:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$66:	; PushFloat 1.57
x813:	fld qword [@10271$float8$1.57#]	; 4: 221 6 6 5

math_test$67:	; Parameter 6 1.57 6
x817:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$68:	; Call 6 math_test_1 0
x820:	mov word [bp + 6], math_test$69	; 5: 199 70 6 66 3
x825:	mov [bp + 8], bp	; 3: 137 110 8
x828:	add bp, 6	; 3: 131 197 6
x831:	jmp math_test_1	; 3: 233 76 2

math_test$69:	; PostCall 6

math_test$70:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$71:	; PushFloat -1.57
x834:	fld qword [@10278$float8$minus1.57#]	; 4: 221 6 14 5

math_test$72:	; Parameter 6 -1.57 6
x838:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$73:	; Call 6 math_test_1 0
x841:	mov word [bp + 6], math_test$74	; 5: 199 70 6 87 3
x846:	mov [bp + 8], bp	; 3: 137 110 8
x849:	add bp, 6	; 3: 131 197 6
x852:	jmp math_test_1	; 3: 233 55 2

math_test$74:	; PostCall 6

math_test$75:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$76:	; PushFloat -3.14
x855:	fld qword [@10283$float8$minus3.14#]	; 4: 221 6 22 5

math_test$77:	; Parameter 6 -3.14 6
x859:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$78:	; Call 6 math_test_1 0
x862:	mov word [bp + 6], math_test$79	; 5: 199 70 6 108 3
x867:	mov [bp + 8], bp	; 3: 137 110 8
x870:	add bp, 6	; 3: 131 197 6
x873:	jmp math_test_1	; 3: 233 34 2

math_test$79:	; PostCall 6

math_test$80:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$81:	; PushFloat -6.28
x876:	fld qword [@10289$float8$minus6.28#]	; 4: 221 6 30 5

math_test$82:	; Parameter 6 -6.28 6
x880:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$83:	; Call 6 math_test_1 0
x883:	mov word [bp + 6], math_test$84	; 5: 199 70 6 129 3
x888:	mov [bp + 8], bp	; 3: 137 110 8
x891:	add bp, 6	; 3: 131 197 6
x894:	jmp math_test_1	; 3: 233 13 2

math_test$84:	; PostCall 6

math_test$85:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$86:	; PushFloat 1.0
x897:	fld1	; 2: 217 232

math_test$87:	; Parameter 6 1.0 6
x899:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$88:	; PushFloat 2.0
x902:	fld qword [@10295$float8$2.0#]	; 4: 221 6 38 5

math_test$89:	; Parameter 6 2.0 14
x906:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$90:	; Call 6 math_test_2 0
x909:	mov word [bp + 6], math_test$91	; 5: 199 70 6 155 3
x914:	mov [bp + 8], bp	; 3: 137 110 8
x917:	add bp, 6	; 3: 131 197 6
x920:	jmp math_test_2	; 3: 233 80 49

math_test$91:	; PostCall 6

math_test$92:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$93:	; PushFloat 3.0
x923:	fld qword [@10300$float8$3.0#]	; 4: 221 6 46 5

math_test$94:	; Parameter 6 3.0 6
x927:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$95:	; PushFloat 4.0
x930:	fld qword [@10302$float8$4.0#]	; 4: 221 6 54 5

math_test$96:	; Parameter 6 4.0 14
x934:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$97:	; Call 6 math_test_2 0
x937:	mov word [bp + 6], math_test$98	; 5: 199 70 6 183 3
x942:	mov [bp + 8], bp	; 3: 137 110 8
x945:	add bp, 6	; 3: 131 197 6
x948:	jmp math_test_2	; 3: 233 52 49

math_test$98:	; PostCall 6

math_test$99:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$100:	; PushZero
x951:	fldz	; 2: 217 238

math_test$101:	; Parameter 6 0 6
x953:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$102:	; PushFloat 2.0
x956:	fld qword [@10309$float8$2.0#]	; 4: 221 6 62 5

math_test$103:	; Parameter 6 2.0 14
x960:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$104:	; Call 6 math_test_2 0
x963:	mov word [bp + 6], math_test$105	; 5: 199 70 6 209 3
x968:	mov [bp + 8], bp	; 3: 137 110 8
x971:	add bp, 6	; 3: 131 197 6
x974:	jmp math_test_2	; 3: 233 26 49

math_test$105:	; PostCall 6

math_test$106:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$107:	; PushZero
x977:	fldz	; 2: 217 238

math_test$108:	; Parameter 6 0 6
x979:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$109:	; PushFloat -2.0
x982:	fld qword [@10316$float8$minus2.0#]	; 4: 221 6 70 5

math_test$110:	; Parameter 6 -2.0 14
x986:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$111:	; Call 6 math_test_2 0
x989:	mov word [bp + 6], math_test$112	; 5: 199 70 6 235 3
x994:	mov [bp + 8], bp	; 3: 137 110 8
x997:	add bp, 6	; 3: 131 197 6
x1000:	jmp math_test_2	; 3: 233 0 49

math_test$112:	; PostCall 6

math_test$113:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$114:	; PushOne
x1003:	fld1	; 2: 217 232

math_test$115:	; Parameter 6 1 6
x1005:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$116:	; PushFloat 2.0
x1008:	fld qword [@10323$float8$2.0#]	; 4: 221 6 78 5

math_test$117:	; Parameter 6 2.0 14
x1012:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$118:	; Call 6 math_test_2 0
x1015:	mov word [bp + 6], math_test$119	; 5: 199 70 6 5 4
x1020:	mov [bp + 8], bp	; 3: 137 110 8
x1023:	add bp, 6	; 3: 131 197 6
x1026:	jmp math_test_2	; 3: 233 230 48

math_test$119:	; PostCall 6

math_test$120:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$121:	; PushOne
x1029:	fld1	; 2: 217 232

math_test$122:	; Parameter 6 1 6
x1031:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$123:	; PushFloat -2.0
x1034:	fld qword [@10330$float8$minus2.0#]	; 4: 221 6 86 5

math_test$124:	; Parameter 6 -2.0 14
x1038:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$125:	; Call 6 math_test_2 0
x1041:	mov word [bp + 6], math_test$126	; 5: 199 70 6 31 4
x1046:	mov [bp + 8], bp	; 3: 137 110 8
x1049:	add bp, 6	; 3: 131 197 6
x1052:	jmp math_test_2	; 3: 233 204 48

math_test$126:	; PostCall 6

math_test$127:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$128:	; PushZero
x1055:	fldz	; 2: 217 238

math_test$129:	; Parameter 6 0 6
x1057:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$130:	; PushZero
x1060:	fldz	; 2: 217 238

math_test$131:	; Parameter 6 0 14
x1062:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$132:	; Call 6 math_test_2 0
x1065:	mov word [bp + 6], math_test$133	; 5: 199 70 6 55 4
x1070:	mov [bp + 8], bp	; 3: 137 110 8
x1073:	add bp, 6	; 3: 131 197 6
x1076:	jmp math_test_2	; 3: 233 180 48

math_test$133:	; PostCall 6

math_test$134:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$135:	; PushFloat 2
x1079:	fld qword [@10343$float8$2#]	; 4: 221 6 94 5

math_test$136:	; Parameter 6 2 6
x1083:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$137:	; PushZero
x1086:	fldz	; 2: 217 238

math_test$138:	; Parameter 6 0 14
x1088:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$139:	; Call 6 math_test_2 0
x1091:	mov word [bp + 6], math_test$140	; 5: 199 70 6 81 4
x1096:	mov [bp + 8], bp	; 3: 137 110 8
x1099:	add bp, 6	; 3: 131 197 6
x1102:	jmp math_test_2	; 3: 233 154 48

math_test$140:	; PostCall 6

math_test$141:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$142:	; PushFloat -2
x1105:	fld qword [@10350$float8$minus2#]	; 4: 221 6 102 5

math_test$143:	; Parameter 6 -2 6
x1109:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$144:	; PushZero
x1112:	fldz	; 2: 217 238

math_test$145:	; Parameter 6 0 14
x1114:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$146:	; Call 6 math_test_2 0
x1117:	mov word [bp + 6], math_test$147	; 5: 199 70 6 107 4
x1122:	mov [bp + 8], bp	; 3: 137 110 8
x1125:	add bp, 6	; 3: 131 197 6
x1128:	jmp math_test_2	; 3: 233 128 48

math_test$147:	; PostCall 6

math_test$148:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$149:	; PushFloat -1.0
x1131:	fld qword [@10356$float8$minus1.0#]	; 4: 221 6 110 5

math_test$150:	; Parameter 6 -1.0 6
x1135:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$151:	; PushFloat -1.0
x1138:	fld qword [@10358$float8$minus1.0#]	; 4: 221 6 118 5

math_test$152:	; Parameter 6 -1.0 14
x1142:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$153:	; Call 6 math_test_2 0
x1145:	mov word [bp + 6], math_test$154	; 5: 199 70 6 135 4
x1150:	mov [bp + 8], bp	; 3: 137 110 8
x1153:	add bp, 6	; 3: 131 197 6
x1156:	jmp math_test_2	; 3: 233 100 48

math_test$154:	; PostCall 6

math_test$155:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$156:	; PushFloat -2.0
x1159:	fld qword [@10363$float8$minus2.0#]	; 4: 221 6 126 5

math_test$157:	; Parameter 6 -2.0 6
x1163:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$158:	; PushFloat -4.0
x1166:	fld qword [@10365$float8$minus4.0#]	; 4: 221 6 134 5

math_test$159:	; Parameter 6 -4.0 14
x1170:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$160:	; Call 6 math_test_2 0
x1173:	mov word [bp + 6], math_test$161	; 5: 199 70 6 163 4
x1178:	mov [bp + 8], bp	; 3: 137 110 8
x1181:	add bp, 6	; 3: 131 197 6
x1184:	jmp math_test_2	; 3: 233 72 48

math_test$161:	; PostCall 6

math_test$162:	; Return 0
x1187:	mov ax, [bp]	; 3: 139 70 0
x1190:	mov di, [bp + 4]	; 3: 139 126 4
x1193:	mov bp, [bp + 2]	; 3: 139 110 2
x1196:	jmp ax	; 2: 255 224

math_test$163:	; FunctionEnd math_test

@10215$float8$0.333333333#:
x1198:	dq 0.333333333	; 8: 22 181 249 84 85 85 213 63

@10219$float8$0.75#:
x1206:	dq 0.75	; 8: 0 0 0 0 0 0 232 63

@10223$float8$1.000010#:
x1214:	dq 1.000010	; 8: 114 196 90 124 10 0 240 63

@10231$float8$0.999999#:
x1222:	dq 0.999999	; 8: 233 11 33 231 253 255 239 63

@10235$float8$0.000010#:
x1230:	dq 0.000010	; 8: 241 104 227 136 181 248 228 62

@10243$float8$minus0.000010#:
x1238:	dq -0.000010	; 8: 241 104 227 136 181 248 228 190

@10247$float8$minus0.999999#:
x1246:	dq -0.999999	; 8: 233 11 33 231 253 255 239 191

@10251$float8$minus1.0#:
x1254:	dq -1.0	; 8: 0 0 0 0 0 0 240 191

@10255$float8$minus1.000010#:
x1262:	dq -1.000010	; 8: 114 196 90 124 10 0 240 191

@10261$float8$6.28#:
x1270:	dq 6.28	; 8: 31 133 235 81 184 30 25 64

@10265$float8$3.14#:
x1278:	dq 3.14	; 8: 31 133 235 81 184 30 9 64

@10271$float8$1.57#:
x1286:	dq 1.57	; 8: 31 133 235 81 184 30 249 63

@10278$float8$minus1.57#:
x1294:	dq -1.57	; 8: 31 133 235 81 184 30 249 191

@10283$float8$minus3.14#:
x1302:	dq -3.14	; 8: 31 133 235 81 184 30 9 192

@10289$float8$minus6.28#:
x1310:	dq -6.28	; 8: 31 133 235 81 184 30 25 192

@10295$float8$2.0#:
x1318:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

@10300$float8$3.0#:
x1326:	dq 3.0	; 8: 0 0 0 0 0 0 8 64

@10302$float8$4.0#:
x1334:	dq 4.0	; 8: 0 0 0 0 0 0 16 64

@10309$float8$2.0#:
x1342:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

@10316$float8$minus2.0#:
x1350:	dq -2.0	; 8: 0 0 0 0 0 0 0 192

@10323$float8$2.0#:
x1358:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

@10330$float8$minus2.0#:
x1366:	dq -2.0	; 8: 0 0 0 0 0 0 0 192

@10343$float8$2#:
x1374:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

@10350$float8$minus2#:
x1382:	dq -2.0	; 8: 0 0 0 0 0 0 0 192

@10356$float8$minus1.0#:
x1390:	dq -1.0	; 8: 0 0 0 0 0 0 240 191

@10358$float8$minus1.0#:
x1398:	dq -1.0	; 8: 0 0 0 0 0 0 240 191

@10363$float8$minus2.0#:
x1406:	dq -2.0	; 8: 0 0 0 0 0 0 0 192

@10365$float8$minus4.0#:
x1414:	dq -4.0	; 8: 0 0 0 0 0 0 16 192

math_test_1:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$1:	; Parameter 14 string_3C25f3E0A# 6
x1422:	mov word [bp + 20], @10410$string_3C25f3E0A#	; 5: 199 70 20 196 10

math_test_1$2:	; PushFloat x
x1427:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$3:	; Parameter 14 x 8
x1430:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$4:	; Call 14 printf 0
x1433:	mov word [bp + 14], math_test_1$5	; 5: 199 70 14 172 5
x1438:	mov [bp + 16], bp	; 3: 137 110 16
x1441:	add bp, 14	; 3: 131 197 14
x1444:	mov di, bp	; 2: 137 239
x1446:	add di, 8	; 3: 131 199 8
x1449:	jmp printf	; 3: 233 88 7

math_test_1$5:	; PostCall 14

math_test_1$6:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$7:	; Parameter 14 string_2020sin2825f29203D2025f2C20errno203D2025i0A# 6
x1452:	mov word [bp + 20], @10412$string_2020sin2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 202 10

math_test_1$8:	; PushFloat x
x1457:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$9:	; Parameter 14 x 8
x1460:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$10:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$11:	; PushFloat x
x1463:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$12:	; Parameter 14 x 22
x1466:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$13:	; Call 14 sin 16
x1469:	mov word [bp + 30], math_test_1$14	; 5: 199 70 30 203 5
x1474:	mov [bp + 32], bp	; 3: 137 110 32
x1477:	add bp, 30	; 3: 131 197 30
x1480:	jmp sin	; 3: 233 192 37

math_test_1$14:	; PostCall 14

math_test_1$15:	; GetReturnValue £temporary4632

math_test_1$16:	; Parameter 14 £temporary4632 16
x1483:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$17:	; Parameter 14 errno 24
x1486:	mov ax, [errno]	; 3: 161 230 10
x1489:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$18:	; Call 14 printf 0
x1492:	mov word [bp + 14], math_test_1$19	; 5: 199 70 14 231 5
x1497:	mov [bp + 16], bp	; 3: 137 110 16
x1500:	add bp, 14	; 3: 131 197 14
x1503:	mov di, bp	; 2: 137 239
x1505:	add di, 18	; 3: 131 199 18
x1508:	jmp printf	; 3: 233 29 7

math_test_1$19:	; PostCall 14

math_test_1$20:	; Assign errno 0
x1511:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$21:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$22:	; Parameter 14 string_2020cos2825f29203D2025f2C20errno203D2025i0A# 6
x1517:	mov word [bp + 20], @10417$string_2020cos2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 232 10

math_test_1$23:	; PushFloat x
x1522:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$24:	; Parameter 14 x 8
x1525:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$25:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$26:	; PushFloat x
x1528:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$27:	; Parameter 14 x 22
x1531:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$28:	; Call 14 cos 16
x1534:	mov word [bp + 30], math_test_1$29	; 5: 199 70 30 12 6
x1539:	mov [bp + 32], bp	; 3: 137 110 32
x1542:	add bp, 30	; 3: 131 197 30
x1545:	jmp cos	; 3: 233 240 38

math_test_1$29:	; PostCall 14

math_test_1$30:	; GetReturnValue £temporary4634

math_test_1$31:	; Parameter 14 £temporary4634 16
x1548:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$32:	; Parameter 14 errno 24
x1551:	mov ax, [errno]	; 3: 161 230 10
x1554:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$33:	; Call 14 printf 0
x1557:	mov word [bp + 14], math_test_1$34	; 5: 199 70 14 40 6
x1562:	mov [bp + 16], bp	; 3: 137 110 16
x1565:	add bp, 14	; 3: 131 197 14
x1568:	mov di, bp	; 2: 137 239
x1570:	add di, 18	; 3: 131 199 18
x1573:	jmp printf	; 3: 233 220 6

math_test_1$34:	; PostCall 14

math_test_1$35:	; Assign errno 0
x1576:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$36:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$37:	; Parameter 14 string_2020tan2825f29203D2025f2C20errno203D2025i0A# 6
x1582:	mov word [bp + 20], @10422$string_2020tan2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 4 11

math_test_1$38:	; PushFloat x
x1587:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$39:	; Parameter 14 x 8
x1590:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$40:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$41:	; PushFloat x
x1593:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$42:	; Parameter 14 x 22
x1596:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$43:	; Call 14 tan 16
x1599:	mov word [bp + 30], math_test_1$44	; 5: 199 70 30 77 6
x1604:	mov [bp + 32], bp	; 3: 137 110 32
x1607:	add bp, 30	; 3: 131 197 30
x1610:	jmp tan	; 3: 233 169 39

math_test_1$44:	; PostCall 14

math_test_1$45:	; GetReturnValue £temporary4636

math_test_1$46:	; Parameter 14 £temporary4636 16
x1613:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$47:	; Parameter 14 errno 24
x1616:	mov ax, [errno]	; 3: 161 230 10
x1619:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$48:	; Call 14 printf 0
x1622:	mov word [bp + 14], math_test_1$49	; 5: 199 70 14 105 6
x1627:	mov [bp + 16], bp	; 3: 137 110 16
x1630:	add bp, 14	; 3: 131 197 14
x1633:	mov di, bp	; 2: 137 239
x1635:	add di, 18	; 3: 131 199 18
x1638:	jmp printf	; 3: 233 155 6

math_test_1$49:	; PostCall 14

math_test_1$50:	; Assign errno 0
x1641:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$51:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$52:	; Parameter 14 string_2020asin2825f29203D2025f2C20errno203D2025i0A# 6
x1647:	mov word [bp + 20], @10427$string_2020asin2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 32 11

math_test_1$53:	; PushFloat x
x1652:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$54:	; Parameter 14 x 8
x1655:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$55:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$56:	; PushFloat x
x1658:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$57:	; Parameter 14 x 22
x1661:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$58:	; Call 14 asin 16
x1664:	mov word [bp + 30], math_test_1$59	; 5: 199 70 30 142 6
x1669:	mov [bp + 32], bp	; 3: 137 110 32
x1672:	add bp, 30	; 3: 131 197 30
x1675:	jmp asin	; 3: 233 195 39

math_test_1$59:	; PostCall 14

math_test_1$60:	; GetReturnValue £temporary4638

math_test_1$61:	; Parameter 14 £temporary4638 16
x1678:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$62:	; Parameter 14 errno 24
x1681:	mov ax, [errno]	; 3: 161 230 10
x1684:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$63:	; Call 14 printf 0
x1687:	mov word [bp + 14], math_test_1$64	; 5: 199 70 14 170 6
x1692:	mov [bp + 16], bp	; 3: 137 110 16
x1695:	add bp, 14	; 3: 131 197 14
x1698:	mov di, bp	; 2: 137 239
x1700:	add di, 18	; 3: 131 199 18
x1703:	jmp printf	; 3: 233 90 6

math_test_1$64:	; PostCall 14

math_test_1$65:	; Assign errno 0
x1706:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$66:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$67:	; Parameter 14 string_2020acos2825f29203D2025f2C20errno203D2025i0A# 6
x1712:	mov word [bp + 20], @10432$string_2020acos2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 61 11

math_test_1$68:	; PushFloat x
x1717:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$69:	; Parameter 14 x 8
x1720:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$70:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$71:	; PushFloat x
x1723:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$72:	; Parameter 14 x 22
x1726:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$73:	; Call 14 acos 16
x1729:	mov word [bp + 30], math_test_1$74	; 5: 199 70 30 207 6
x1734:	mov [bp + 32], bp	; 3: 137 110 32
x1737:	add bp, 30	; 3: 131 197 30
x1740:	jmp acos	; 3: 233 85 42

math_test_1$74:	; PostCall 14

math_test_1$75:	; GetReturnValue £temporary4640

math_test_1$76:	; Parameter 14 £temporary4640 16
x1743:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$77:	; Parameter 14 errno 24
x1746:	mov ax, [errno]	; 3: 161 230 10
x1749:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$78:	; Call 14 printf 0
x1752:	mov word [bp + 14], math_test_1$79	; 5: 199 70 14 235 6
x1757:	mov [bp + 16], bp	; 3: 137 110 16
x1760:	add bp, 14	; 3: 131 197 14
x1763:	mov di, bp	; 2: 137 239
x1765:	add di, 18	; 3: 131 199 18
x1768:	jmp printf	; 3: 233 25 6

math_test_1$79:	; PostCall 14

math_test_1$80:	; Assign errno 0
x1771:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$81:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$82:	; Parameter 14 string_2020atan2825f29203D2025f2C20errno203D2025i0A# 6
x1777:	mov word [bp + 20], @10437$string_2020atan2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 90 11

math_test_1$83:	; PushFloat x
x1782:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$84:	; Parameter 14 x 8
x1785:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$85:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$86:	; PushFloat x
x1788:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$87:	; Parameter 14 x 22
x1791:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$88:	; Call 14 atan 16
x1794:	mov word [bp + 30], math_test_1$89	; 5: 199 70 30 16 7
x1799:	mov [bp + 32], bp	; 3: 137 110 32
x1802:	add bp, 30	; 3: 131 197 30
x1805:	jmp atan	; 3: 233 131 40

math_test_1$89:	; PostCall 14

math_test_1$90:	; GetReturnValue £temporary4642

math_test_1$91:	; Parameter 14 £temporary4642 16
x1808:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$92:	; Parameter 14 errno 24
x1811:	mov ax, [errno]	; 3: 161 230 10
x1814:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$93:	; Call 14 printf 0
x1817:	mov word [bp + 14], math_test_1$94	; 5: 199 70 14 44 7
x1822:	mov [bp + 16], bp	; 3: 137 110 16
x1825:	add bp, 14	; 3: 131 197 14
x1828:	mov di, bp	; 2: 137 239
x1830:	add di, 18	; 3: 131 199 18
x1833:	jmp printf	; 3: 233 216 5

math_test_1$94:	; PostCall 14

math_test_1$95:	; Assign errno 0
x1836:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$96:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$97:	; Parameter 14 string_2020exp2825f29203D2025f2C20errno203D2025i0A# 6
x1842:	mov word [bp + 20], @10442$string_2020exp2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 119 11

math_test_1$98:	; PushFloat x
x1847:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$99:	; Parameter 14 x 8
x1850:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$100:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$101:	; PushFloat x
x1853:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$102:	; Parameter 14 x 22
x1856:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$103:	; Call 14 exp 16
x1859:	mov word [bp + 30], math_test_1$104	; 5: 199 70 30 81 7
x1864:	mov [bp + 32], bp	; 3: 137 110 32
x1867:	add bp, 30	; 3: 131 197 30
x1870:	jmp exp	; 3: 233 243 34

math_test_1$104:	; PostCall 14

math_test_1$105:	; GetReturnValue £temporary4644

math_test_1$106:	; Parameter 14 £temporary4644 16
x1873:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$107:	; Parameter 14 errno 24
x1876:	mov ax, [errno]	; 3: 161 230 10
x1879:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$108:	; Call 14 printf 0
x1882:	mov word [bp + 14], math_test_1$109	; 5: 199 70 14 109 7
x1887:	mov [bp + 16], bp	; 3: 137 110 16
x1890:	add bp, 14	; 3: 131 197 14
x1893:	mov di, bp	; 2: 137 239
x1895:	add di, 18	; 3: 131 199 18
x1898:	jmp printf	; 3: 233 151 5

math_test_1$109:	; PostCall 14

math_test_1$110:	; Assign errno 0
x1901:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$111:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$112:	; Parameter 14 string_2020log2825f29203D2025f2C20errno203D2025i0A# 6
x1907:	mov word [bp + 20], @10447$string_2020log2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 147 11

math_test_1$113:	; PushFloat x
x1912:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$114:	; Parameter 14 x 8
x1915:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$115:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$116:	; PushFloat x
x1918:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$117:	; Parameter 14 x 22
x1921:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$118:	; Call 14 log 16
x1924:	mov word [bp + 30], math_test_1$119	; 5: 199 70 30 146 7
x1929:	mov [bp + 32], bp	; 3: 137 110 32
x1932:	add bp, 30	; 3: 131 197 30
x1935:	jmp log	; 3: 233 202 31

math_test_1$119:	; PostCall 14

math_test_1$120:	; GetReturnValue £temporary4646

math_test_1$121:	; Parameter 14 £temporary4646 16
x1938:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$122:	; Parameter 14 errno 24
x1941:	mov ax, [errno]	; 3: 161 230 10
x1944:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$123:	; Call 14 printf 0
x1947:	mov word [bp + 14], math_test_1$124	; 5: 199 70 14 174 7
x1952:	mov [bp + 16], bp	; 3: 137 110 16
x1955:	add bp, 14	; 3: 131 197 14
x1958:	mov di, bp	; 2: 137 239
x1960:	add di, 18	; 3: 131 199 18
x1963:	jmp printf	; 3: 233 86 5

math_test_1$124:	; PostCall 14

math_test_1$125:	; Assign errno 0
x1966:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$126:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$127:	; Parameter 14 string_2020log102825f29203D2025f2C20errno203D2025i0A# 6
x1972:	mov word [bp + 20], @10452$string_2020log102825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 175 11

math_test_1$128:	; PushFloat x
x1977:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$129:	; Parameter 14 x 8
x1980:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$130:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$131:	; PushFloat x
x1983:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$132:	; Parameter 14 x 22
x1986:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$133:	; Call 14 log10 16
x1989:	mov word [bp + 30], math_test_1$134	; 5: 199 70 30 211 7
x1994:	mov [bp + 32], bp	; 3: 137 110 32
x1997:	add bp, 30	; 3: 131 197 30
x2000:	jmp log10	; 3: 233 92 31

math_test_1$134:	; PostCall 14

math_test_1$135:	; GetReturnValue £temporary4648

math_test_1$136:	; Parameter 14 £temporary4648 16
x2003:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$137:	; Parameter 14 errno 24
x2006:	mov ax, [errno]	; 3: 161 230 10
x2009:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$138:	; Call 14 printf 0
x2012:	mov word [bp + 14], math_test_1$139	; 5: 199 70 14 239 7
x2017:	mov [bp + 16], bp	; 3: 137 110 16
x2020:	add bp, 14	; 3: 131 197 14
x2023:	mov di, bp	; 2: 137 239
x2025:	add di, 18	; 3: 131 199 18
x2028:	jmp printf	; 3: 233 21 5

math_test_1$139:	; PostCall 14

math_test_1$140:	; Assign errno 0
x2031:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$141:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$142:	; Parameter 14 string_2020sinh2825f29203D2025f2C20errno203D2025i0A# 6
x2037:	mov word [bp + 20], @10457$string_2020sinh2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 205 11

math_test_1$143:	; PushFloat x
x2042:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$144:	; Parameter 14 x 8
x2045:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$145:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$146:	; PushFloat x
x2048:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$147:	; Parameter 14 x 22
x2051:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$148:	; Call 14 sinh 16
x2054:	mov word [bp + 30], math_test_1$149	; 5: 199 70 30 20 8
x2059:	mov [bp + 32], bp	; 3: 137 110 32
x2062:	add bp, 30	; 3: 131 197 30
x2065:	jmp sinh	; 3: 233 218 41

math_test_1$149:	; PostCall 14

math_test_1$150:	; GetReturnValue £temporary4650

math_test_1$151:	; Parameter 14 £temporary4650 16
x2068:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$152:	; Parameter 14 errno 24
x2071:	mov ax, [errno]	; 3: 161 230 10
x2074:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$153:	; Call 14 printf 0
x2077:	mov word [bp + 14], math_test_1$154	; 5: 199 70 14 48 8
x2082:	mov [bp + 16], bp	; 3: 137 110 16
x2085:	add bp, 14	; 3: 131 197 14
x2088:	mov di, bp	; 2: 137 239
x2090:	add di, 18	; 3: 131 199 18
x2093:	jmp printf	; 3: 233 212 4

math_test_1$154:	; PostCall 14

math_test_1$155:	; Assign errno 0
x2096:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$156:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$157:	; Parameter 14 string_2020cosh2825f29203D2025f2C20errno203D2025i0A# 6
x2102:	mov word [bp + 20], @10462$string_2020cosh2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 234 11

math_test_1$158:	; PushFloat x
x2107:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$159:	; Parameter 14 x 8
x2110:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$160:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$161:	; PushFloat x
x2113:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$162:	; Parameter 14 x 22
x2116:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$163:	; Call 14 cosh 16
x2119:	mov word [bp + 30], math_test_1$164	; 5: 199 70 30 85 8
x2124:	mov [bp + 32], bp	; 3: 137 110 32
x2127:	add bp, 30	; 3: 131 197 30
x2130:	jmp cosh	; 3: 233 234 41

math_test_1$164:	; PostCall 14

math_test_1$165:	; GetReturnValue £temporary4652

math_test_1$166:	; Parameter 14 £temporary4652 16
x2133:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$167:	; Parameter 14 errno 24
x2136:	mov ax, [errno]	; 3: 161 230 10
x2139:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$168:	; Call 14 printf 0
x2142:	mov word [bp + 14], math_test_1$169	; 5: 199 70 14 113 8
x2147:	mov [bp + 16], bp	; 3: 137 110 16
x2150:	add bp, 14	; 3: 131 197 14
x2153:	mov di, bp	; 2: 137 239
x2155:	add di, 18	; 3: 131 199 18
x2158:	jmp printf	; 3: 233 147 4

math_test_1$169:	; PostCall 14

math_test_1$170:	; Assign errno 0
x2161:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$171:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$172:	; Parameter 14 string_2020tanh2825f29203D2025f2C20errno203D2025i0A# 6
x2167:	mov word [bp + 20], @10467$string_2020tanh2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 7 12

math_test_1$173:	; PushFloat x
x2172:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$174:	; Parameter 14 x 8
x2175:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$175:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$176:	; PushFloat x
x2178:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$177:	; Parameter 14 x 22
x2181:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$178:	; Call 14 tanh 16
x2184:	mov word [bp + 30], math_test_1$179	; 5: 199 70 30 150 8
x2189:	mov [bp + 32], bp	; 3: 137 110 32
x2192:	add bp, 30	; 3: 131 197 30
x2195:	jmp tanh	; 3: 233 250 41

math_test_1$179:	; PostCall 14

math_test_1$180:	; GetReturnValue £temporary4654

math_test_1$181:	; Parameter 14 £temporary4654 16
x2198:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$182:	; Parameter 14 errno 24
x2201:	mov ax, [errno]	; 3: 161 230 10
x2204:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$183:	; Call 14 printf 0
x2207:	mov word [bp + 14], math_test_1$184	; 5: 199 70 14 178 8
x2212:	mov [bp + 16], bp	; 3: 137 110 16
x2215:	add bp, 14	; 3: 131 197 14
x2218:	mov di, bp	; 2: 137 239
x2220:	add di, 18	; 3: 131 199 18
x2223:	jmp printf	; 3: 233 82 4

math_test_1$184:	; PostCall 14

math_test_1$185:	; Assign errno 0
x2226:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$186:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$187:	; Parameter 14 string_2020sqrt2825f29203D2025f2C20errno203D2025i0A# 6
x2232:	mov word [bp + 20], @10472$string_2020sqrt2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 36 12

math_test_1$188:	; PushFloat x
x2237:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$189:	; Parameter 14 x 8
x2240:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$190:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$191:	; PushFloat x
x2243:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$192:	; Parameter 14 x 22
x2246:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$193:	; Call 14 sqrt 16
x2249:	mov word [bp + 30], math_test_1$194	; 5: 199 70 30 215 8
x2254:	mov [bp + 32], bp	; 3: 137 110 32
x2257:	add bp, 30	; 3: 131 197 30
x2260:	jmp sqrt	; 3: 233 56 38

math_test_1$194:	; PostCall 14

math_test_1$195:	; GetReturnValue £temporary4656

math_test_1$196:	; Parameter 14 £temporary4656 16
x2263:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$197:	; Parameter 14 errno 24
x2266:	mov ax, [errno]	; 3: 161 230 10
x2269:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$198:	; Call 14 printf 0
x2272:	mov word [bp + 14], math_test_1$199	; 5: 199 70 14 243 8
x2277:	mov [bp + 16], bp	; 3: 137 110 16
x2280:	add bp, 14	; 3: 131 197 14
x2283:	mov di, bp	; 2: 137 239
x2285:	add di, 18	; 3: 131 199 18
x2288:	jmp printf	; 3: 233 17 4

math_test_1$199:	; PostCall 14

math_test_1$200:	; Assign errno 0
x2291:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$201:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$202:	; Parameter 14 string_2020floor2825f29203D2025f2C20errno203D2025i0A# 6
x2297:	mov word [bp + 20], @10477$string_2020floor2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 65 12

math_test_1$203:	; PushFloat x
x2302:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$204:	; Parameter 14 x 8
x2305:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$205:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$206:	; PushFloat x
x2308:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$207:	; Parameter 14 x 22
x2311:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$208:	; Call 14 floor 16
x2314:	mov word [bp + 30], math_test_1$209	; 5: 199 70 30 24 9
x2319:	mov [bp + 32], bp	; 3: 137 110 32
x2322:	add bp, 30	; 3: 131 197 30
x2325:	jmp floor	; 3: 233 170 33

math_test_1$209:	; PostCall 14

math_test_1$210:	; GetReturnValue £temporary4658

math_test_1$211:	; Parameter 14 £temporary4658 16
x2328:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$212:	; Parameter 14 errno 24
x2331:	mov ax, [errno]	; 3: 161 230 10
x2334:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$213:	; Call 14 printf 0
x2337:	mov word [bp + 14], math_test_1$214	; 5: 199 70 14 52 9
x2342:	mov [bp + 16], bp	; 3: 137 110 16
x2345:	add bp, 14	; 3: 131 197 14
x2348:	mov di, bp	; 2: 137 239
x2350:	add di, 18	; 3: 131 199 18
x2353:	jmp printf	; 3: 233 208 3

math_test_1$214:	; PostCall 14

math_test_1$215:	; Assign errno 0
x2356:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$216:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$217:	; Parameter 14 string_2020ceil2825f29203D2025f2C20errno203D2025i0A# 6
x2362:	mov word [bp + 20], @10482$string_2020ceil2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 95 12

math_test_1$218:	; PushFloat x
x2367:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$219:	; Parameter 14 x 8
x2370:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$220:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$221:	; PushFloat x
x2373:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$222:	; Parameter 14 x 22
x2376:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$223:	; Call 14 ceil 16
x2379:	mov word [bp + 30], math_test_1$224	; 5: 199 70 30 89 9
x2384:	mov [bp + 32], bp	; 3: 137 110 32
x2387:	add bp, 30	; 3: 131 197 30
x2390:	jmp ceil	; 3: 233 183 33

math_test_1$224:	; PostCall 14

math_test_1$225:	; GetReturnValue £temporary4660

math_test_1$226:	; Parameter 14 £temporary4660 16
x2393:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$227:	; Parameter 14 errno 24
x2396:	mov ax, [errno]	; 3: 161 230 10
x2399:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$228:	; Call 14 printf 0
x2402:	mov word [bp + 14], math_test_1$229	; 5: 199 70 14 117 9
x2407:	mov [bp + 16], bp	; 3: 137 110 16
x2410:	add bp, 14	; 3: 131 197 14
x2413:	mov di, bp	; 2: 137 239
x2415:	add di, 18	; 3: 131 199 18
x2418:	jmp printf	; 3: 233 143 3

math_test_1$229:	; PostCall 14

math_test_1$230:	; Assign errno 0
x2421:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$231:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$232:	; Parameter 14 string_2020fabs2825f29203D2025f2C20errno203D2025i0A# 6
x2427:	mov word [bp + 20], @10487$string_2020fabs2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 124 12

math_test_1$233:	; PushFloat x
x2432:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$234:	; Parameter 14 x 8
x2435:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$235:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$236:	; PushFloat x
x2438:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$237:	; Parameter 14 x 22
x2441:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$238:	; Call 14 fabs 16
x2444:	mov word [bp + 30], math_test_1$239	; 5: 199 70 30 154 9
x2449:	mov [bp + 32], bp	; 3: 137 110 32
x2452:	add bp, 30	; 3: 131 197 30
x2455:	jmp fabs	; 3: 233 99 27

math_test_1$239:	; PostCall 14

math_test_1$240:	; GetReturnValue £temporary4662

math_test_1$241:	; Parameter 14 £temporary4662 16
x2458:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$242:	; Parameter 14 errno 24
x2461:	mov ax, [errno]	; 3: 161 230 10
x2464:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$243:	; Call 14 printf 0
x2467:	mov word [bp + 14], math_test_1$244	; 5: 199 70 14 182 9
x2472:	mov [bp + 16], bp	; 3: 137 110 16
x2475:	add bp, 14	; 3: 131 197 14
x2478:	mov di, bp	; 2: 137 239
x2480:	add di, 18	; 3: 131 199 18
x2483:	jmp printf	; 3: 233 78 3

math_test_1$244:	; PostCall 14

math_test_1$245:	; Assign errno 0
x2486:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$246:	; Assign j 0
x2492:	mov word [bp + 14], 0	; 5: 199 70 14 0 0

math_test_1$247:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$248:	; PushFloat x
x2497:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$249:	; Parameter 16 x 6
x2500:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$250:	; address £temporary4664 j
x2503:	mov si, bp	; 2: 137 238
x2505:	add si, 14	; 3: 131 198 14

math_test_1$251:	; Parameter 16 £temporary4664 14
x2508:	mov [bp + 30], si	; 3: 137 118 30

math_test_1$252:	; Call 16 frexp 0
x2511:	mov word [bp + 16], math_test_1$253	; 5: 199 70 16 221 9
x2516:	mov [bp + 18], bp	; 3: 137 110 18
x2519:	add bp, 16	; 3: 131 197 16
x2522:	jmp frexp	; 3: 233 244 40

math_test_1$253:	; PostCall 16

math_test_1$254:	; GetReturnValue £temporary4665

math_test_1$255:	; PopFloat z
x2525:	fstp qword [bp + 16]	; 3: 221 94 16

math_test_1$256:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$257:	; Parameter 24 string_frexp202825f2C20p29203D202825f2C2025i292C20errno203D2025i0A# 6
x2528:	mov word [bp + 30], @10498$string_frexp202825f2C20p29203D202825f2C2025i292C20errno203D2025i0A#	; 5: 199 70 30 153 12

math_test_1$258:	; PushFloat x
x2533:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$259:	; Parameter 24 x 8
x2536:	fstp qword [bp + 32]	; 3: 221 94 32

math_test_1$260:	; PushFloat z
x2539:	fld qword [bp + 16]	; 3: 221 70 16

math_test_1$261:	; Parameter 24 z 16
x2542:	fstp qword [bp + 40]	; 3: 221 94 40

math_test_1$262:	; Parameter 24 j 24
x2545:	mov ax, [bp + 14]	; 3: 139 70 14
x2548:	mov [bp + 48], ax	; 3: 137 70 48

math_test_1$263:	; Parameter 24 errno 26
x2551:	mov ax, [errno]	; 3: 161 230 10
x2554:	mov [bp + 50], ax	; 3: 137 70 50

math_test_1$264:	; Call 24 printf 0
x2557:	mov word [bp + 24], math_test_1$265	; 5: 199 70 24 16 10
x2562:	mov [bp + 26], bp	; 3: 137 110 26
x2565:	add bp, 24	; 3: 131 197 24
x2568:	mov di, bp	; 2: 137 239
x2570:	add di, 20	; 3: 131 199 20
x2573:	jmp printf	; 3: 233 244 2

math_test_1$265:	; PostCall 24

math_test_1$266:	; Equal 272 errno 0
x2576:	cmp word [errno], 0	; 5: 131 62 230 10 0
x2581:	je math_test_1$272	; 2: 116 25

math_test_1$267:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$268:	; Parameter 24 string_Error20message3A# 6
x2583:	mov word [bp + 30], @10503$string_Error20message3A#	; 5: 199 70 30 191 12

math_test_1$269:	; Call 24 perror 0
x2588:	mov word [bp + 24], math_test_1$270	; 5: 199 70 24 42 10
x2593:	mov [bp + 26], bp	; 3: 137 110 26
x2596:	add bp, 24	; 3: 131 197 24
x2599:	jmp perror	; 3: 233 171 41

math_test_1$270:	; PostCall 24

math_test_1$271:	; Assign errno 0
x2602:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$272:	; PushZero
x2608:	fldz	; 2: 217 238

math_test_1$273:	; PopFloat w
x2610:	fstp qword [bp + 14]	; 3: 221 94 14

math_test_1$274:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$275:	; PushFloat x
x2613:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$276:	; Parameter 22 x 6
x2616:	fstp qword [bp + 28]	; 3: 221 94 28

math_test_1$277:	; address £temporary4669 w
x2619:	mov si, bp	; 2: 137 238
x2621:	add si, 14	; 3: 131 198 14

math_test_1$278:	; Parameter 22 £temporary4669 14
x2624:	mov [bp + 36], si	; 3: 137 118 36

math_test_1$279:	; Call 22 modf 0
x2627:	mov word [bp + 22], math_test_1$280	; 5: 199 70 22 81 10
x2632:	mov [bp + 24], bp	; 3: 137 110 24
x2635:	add bp, 22	; 3: 131 197 22
x2638:	jmp modf	; 3: 233 30 42

math_test_1$280:	; PostCall 22

math_test_1$281:	; GetReturnValue £temporary4670

math_test_1$282:	; PopFloat z
x2641:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$283:	; CallHeader 30 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$284:	; Parameter 30 string_modf202825f2C20p29203D202825f2C2025f292C20errno203D2025i0A# 6
x2644:	mov word [bp + 36], @10513$string_modf202825f2C20p29203D202825f2C2025f292C20errno203D2025i0A#	; 5: 199 70 36 206 12

math_test_1$285:	; PushFloat x
x2649:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$286:	; Parameter 30 x 8
x2652:	fstp qword [bp + 38]	; 3: 221 94 38

math_test_1$287:	; PushFloat z
x2655:	fld qword [bp + 22]	; 3: 221 70 22

math_test_1$288:	; Parameter 30 z 16
x2658:	fstp qword [bp + 46]	; 3: 221 94 46

math_test_1$289:	; PushFloat w
x2661:	fld qword [bp + 14]	; 3: 221 70 14

math_test_1$290:	; Parameter 30 w 24
x2664:	fstp qword [bp + 54]	; 3: 221 94 54

math_test_1$291:	; Parameter 30 errno 32
x2667:	mov ax, [errno]	; 3: 161 230 10
x2670:	mov [bp + 62], ax	; 3: 137 70 62

math_test_1$292:	; Call 30 printf 0
x2673:	mov word [bp + 30], math_test_1$293	; 5: 199 70 30 132 10
x2678:	mov [bp + 32], bp	; 3: 137 110 32
x2681:	add bp, 30	; 3: 131 197 30
x2684:	mov di, bp	; 2: 137 239
x2686:	add di, 26	; 3: 131 199 26
x2689:	jmp printf	; 3: 233 128 2

math_test_1$293:	; PostCall 30

math_test_1$294:	; Equal 300 errno 0
x2692:	cmp word [errno], 0	; 5: 131 62 230 10 0
x2697:	je math_test_1$300	; 2: 116 25

math_test_1$295:	; CallHeader 30 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$296:	; Parameter 30 string_Error20message3A# 6
x2699:	mov word [bp + 36], @10518$string_Error20message3A#	; 5: 199 70 36 243 12

math_test_1$297:	; Call 30 perror 0
x2704:	mov word [bp + 30], math_test_1$298	; 5: 199 70 30 158 10
x2709:	mov [bp + 32], bp	; 3: 137 110 32
x2712:	add bp, 30	; 3: 131 197 30
x2715:	jmp perror	; 3: 233 55 41

math_test_1$298:	; PostCall 30

math_test_1$299:	; Assign errno 0
x2718:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$300:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$301:	; Parameter 14 string_0A# 6
x2724:	mov word [bp + 20], @10522$string_0A#	; 5: 199 70 20 2 13

math_test_1$302:	; Call 14 printf 0
x2729:	mov word [bp + 14], math_test_1$303	; 5: 199 70 14 185 10
x2734:	mov [bp + 16], bp	; 3: 137 110 16
x2737:	add bp, 14	; 3: 131 197 14
x2740:	mov di, bp	; 2: 137 239
x2742:	jmp printf	; 3: 233 75 2

math_test_1$303:	; PostCall 14

math_test_1$304:	; Return 0
x2745:	mov ax, [bp]	; 3: 139 70 0
x2748:	mov di, [bp + 4]	; 3: 139 126 4
x2751:	mov bp, [bp + 2]	; 3: 139 110 2
x2754:	jmp ax	; 2: 255 224

math_test_1$305:	; FunctionEnd math_test_1

@10410$string_3C25f3E0A#:
x2756:	db "<%f>", 10, 0	; 6: 60 37 102 62 10 0

@10412$string_2020sin2825f29203D2025f2C20errno203D2025i0A#:
x2762:	db "  sin(%f) = %f, errno = %i", 10, 0	; 28: 32 32 115 105 110 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

errno:
x2790:	dw 0	; 2: 0 0

@10417$string_2020cos2825f29203D2025f2C20errno203D2025i0A#:
x2792:	db "  cos(%f) = %f, errno = %i", 10, 0	; 28: 32 32 99 111 115 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10422$string_2020tan2825f29203D2025f2C20errno203D2025i0A#:
x2820:	db "  tan(%f) = %f, errno = %i", 10, 0	; 28: 32 32 116 97 110 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10427$string_2020asin2825f29203D2025f2C20errno203D2025i0A#:
x2848:	db "  asin(%f) = %f, errno = %i", 10, 0	; 29: 32 32 97 115 105 110 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10432$string_2020acos2825f29203D2025f2C20errno203D2025i0A#:
x2877:	db "  acos(%f) = %f, errno = %i", 10, 0	; 29: 32 32 97 99 111 115 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10437$string_2020atan2825f29203D2025f2C20errno203D2025i0A#:
x2906:	db "  atan(%f) = %f, errno = %i", 10, 0	; 29: 32 32 97 116 97 110 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10442$string_2020exp2825f29203D2025f2C20errno203D2025i0A#:
x2935:	db "  exp(%f) = %f, errno = %i", 10, 0	; 28: 32 32 101 120 112 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10447$string_2020log2825f29203D2025f2C20errno203D2025i0A#:
x2963:	db "  log(%f) = %f, errno = %i", 10, 0	; 28: 32 32 108 111 103 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10452$string_2020log102825f29203D2025f2C20errno203D2025i0A#:
x2991:	db "  log10(%f) = %f, errno = %i", 10, 0	; 30: 32 32 108 111 103 49 48 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10457$string_2020sinh2825f29203D2025f2C20errno203D2025i0A#:
x3021:	db "  sinh(%f) = %f, errno = %i", 10, 0	; 29: 32 32 115 105 110 104 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10462$string_2020cosh2825f29203D2025f2C20errno203D2025i0A#:
x3050:	db "  cosh(%f) = %f, errno = %i", 10, 0	; 29: 32 32 99 111 115 104 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10467$string_2020tanh2825f29203D2025f2C20errno203D2025i0A#:
x3079:	db "  tanh(%f) = %f, errno = %i", 10, 0	; 29: 32 32 116 97 110 104 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10472$string_2020sqrt2825f29203D2025f2C20errno203D2025i0A#:
x3108:	db "  sqrt(%f) = %f, errno = %i", 10, 0	; 29: 32 32 115 113 114 116 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10477$string_2020floor2825f29203D2025f2C20errno203D2025i0A#:
x3137:	db "  floor(%f) = %f, errno = %i", 10, 0	; 30: 32 32 102 108 111 111 114 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10482$string_2020ceil2825f29203D2025f2C20errno203D2025i0A#:
x3167:	db "  ceil(%f) = %f, errno = %i", 10, 0	; 29: 32 32 99 101 105 108 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10487$string_2020fabs2825f29203D2025f2C20errno203D2025i0A#:
x3196:	db "  fabs(%f) = %f, errno = %i", 10, 0	; 29: 32 32 102 97 98 115 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10498$string_frexp202825f2C20p29203D202825f2C2025i292C20errno203D2025i0A#:
x3225:	db "frexp (%f, p) = (%f, %i), errno = %i", 10, 0	; 38: 102 114 101 120 112 32 40 37 102 44 32 112 41 32 61 32 40 37 102 44 32 37 105 41 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10503$string_Error20message3A#:
x3263:	db "Error message:", 0	; 15: 69 114 114 111 114 32 109 101 115 115 97 103 101 58 0

@10513$string_modf202825f2C20p29203D202825f2C2025f292C20errno203D2025i0A#:
x3278:	db "modf (%f, p) = (%f, %f), errno = %i", 10, 0	; 37: 109 111 100 102 32 40 37 102 44 32 112 41 32 61 32 40 37 102 44 32 37 102 41 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10518$string_Error20message3A#:
x3315:	db "Error message:", 0	; 15: 69 114 114 111 114 32 109 101 115 115 97 103 101 58 0

@10522$string_0A#:
x3330:	db 10, 0	; 2: 10 0

printf:	; address £temporary2202 format
x3332:	mov si, bp	; 2: 137 238
x3334:	add si, 6	; 3: 131 198 6

printf$1:	; IntegralToIntegral £temporary2203 £temporary2202

printf$2:	; BinaryAdd arg_list £temporary2203 2
x3337:	add si, 2	; 3: 131 198 2
x3340:	mov [di + 8], si	; 3: 137 117 8

printf$3:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printf$4:	; Parameter 10 format 6
x3343:	mov ax, [bp + 6]	; 3: 139 70 6
x3346:	mov [di + 16], ax	; 3: 137 69 16

printf$5:	; Parameter 10 arg_list 8
x3349:	mov ax, [di + 8]	; 3: 139 69 8
x3352:	mov [di + 18], ax	; 3: 137 69 18

printf$6:	; Call 10 vprintf 0
x3355:	mov word [di + 10], printf$7	; 5: 199 69 10 46 13
x3360:	mov [di + 12], bp	; 3: 137 109 12
x3363:	mov [di + 14], di	; 3: 137 125 14
x3366:	add di, 10	; 3: 131 199 10
x3369:	mov bp, di	; 2: 137 253
x3371:	nop	; 1: 144
x3372:	jmp vprintf	; 2: 235 11

printf$7:	; PostCall 10

printf$8:	; GetReturnValue £temporary2205

printf$9:	; SetReturnValue £temporary2205

printf$10:	; Return £temporary2205
x3374:	mov ax, [bp]	; 3: 139 70 0
x3377:	mov di, [bp + 4]	; 3: 139 126 4
x3380:	mov bp, [bp + 2]	; 3: 139 110 2
x3383:	jmp ax	; 2: 255 224

printf$11:	; FunctionEnd printf

vprintf:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

vprintf$1:	; Parameter 10 stdout 6
x3385:	mov ax, [stdout]	; 3: 161 100 13
x3388:	mov [bp + 16], ax	; 3: 137 70 16

vprintf$2:	; Parameter 10 format 8
x3391:	mov ax, [bp + 6]	; 3: 139 70 6
x3394:	mov [bp + 18], ax	; 3: 137 70 18

vprintf$3:	; Parameter 10 arg_list 10
x3397:	mov ax, [bp + 8]	; 3: 139 70 8
x3400:	mov [bp + 20], ax	; 3: 137 70 20

vprintf$4:	; Call 10 vfprintf 0
x3403:	mov word [bp + 10], vprintf$5	; 5: 199 70 10 89 13
x3408:	mov [bp + 12], bp	; 3: 137 110 12
x3411:	add bp, 10	; 3: 131 197 10
x3414:	jmp vfprintf	; 3: 233 81 2

vprintf$5:	; PostCall 10

vprintf$6:	; GetReturnValue £temporary2209

vprintf$7:	; SetReturnValue £temporary2209

vprintf$8:	; Return £temporary2209
x3417:	mov ax, [bp]	; 3: 139 70 0
x3420:	mov di, [bp + 4]	; 3: 139 126 4
x3423:	mov bp, [bp + 2]	; 3: 139 110 2
x3426:	jmp ax	; 2: 255 224

vprintf$9:	; FunctionEnd vprintf

stdout:
x3428:	dw g_fileArray + 29	; 2: 131 13

g_fileArray:
x3430:	dw 1	; 2: 1 0
x3432:	dw 0	; 2: 0 0
x3434:	db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0	; 25: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
x3459:	dw 1	; 2: 1 0
x3461:	dw 1	; 2: 1 0
x3463:	db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0	; 25: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
x3488:	dw 1	; 2: 1 0
x3490:	dw 2	; 2: 2 0
x3492:	db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0	; 25: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
x3517:	db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0	; 493: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

vfprintf:	; Assign g_outStatus 0
x4010:	mov word [g_outStatus], 0	; 6: 199 6 219 15 0 0

vfprintf$1:	; IntegralToIntegral £temporary2221 outStream
x4016:	mov ax, [bp + 6]	; 3: 139 70 6

vfprintf$2:	; Assign g_outDevice £temporary2221
x4019:	mov [g_outDevice], ax	; 3: 163 221 15

vfprintf$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

vfprintf$4:	; Parameter 12 format 6
x4022:	mov ax, [bp + 8]	; 3: 139 70 8
x4025:	mov [bp + 18], ax	; 3: 137 70 18

vfprintf$5:	; Parameter 12 arg_list 8
x4028:	mov ax, [bp + 10]	; 3: 139 70 10
x4031:	mov [bp + 20], ax	; 3: 137 70 20

vfprintf$6:	; Call 12 printFormat 0
x4034:	mov word [bp + 12], vfprintf$7	; 5: 199 70 12 208 15
x4039:	mov [bp + 14], bp	; 3: 137 110 14
x4042:	add bp, 12	; 3: 131 197 12
x4045:	nop	; 1: 144
x4046:	jmp printFormat	; 2: 235 15

vfprintf$7:	; PostCall 12

vfprintf$8:	; GetReturnValue £temporary2222

vfprintf$9:	; SetReturnValue £temporary2222

vfprintf$10:	; Return £temporary2222
x4048:	mov ax, [bp]	; 3: 139 70 0
x4051:	mov di, [bp + 4]	; 3: 139 126 4
x4054:	mov bp, [bp + 2]	; 3: 139 110 2
x4057:	jmp ax	; 2: 255 224

vfprintf$11:	; FunctionEnd vfprintf

g_outStatus:
x4059:	db 0, 0	; 2: 0 0

g_outDevice:
x4061:	db 0, 0	; 2: 0 0

printFormat:	; Assign width 0
x4063:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

printFormat$1:	; Assign precision 0
x4068:	mov word [bp + 14], 0	; 5: 199 70 14 0 0

printFormat$2:	; Assign percent 0
x4073:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

printFormat$3:	; Assign plus 0
x4078:	mov word [bp + 18], 0	; 5: 199 70 18 0 0

printFormat$4:	; Assign minus 0
x4083:	mov word [bp + 20], 0	; 5: 199 70 20 0 0

printFormat$5:	; Assign space 0
x4088:	mov word [bp + 22], 0	; 5: 199 70 22 0 0

printFormat$6:	; Assign zero 0
x4093:	mov word [bp + 24], 0	; 5: 199 70 24 0 0

printFormat$7:	; Assign grid 0
x4098:	mov word [bp + 26], 0	; 5: 199 70 26 0 0

printFormat$8:	; Assign widthStar 0
x4103:	mov word [bp + 28], 0	; 5: 199 70 28 0 0

printFormat$9:	; Assign period 0
x4108:	mov word [bp + 30], 0	; 5: 199 70 30 0 0

printFormat$10:	; Assign precisionStar 0
x4113:	mov word [bp + 32], 0	; 5: 199 70 32 0 0

printFormat$11:	; Assign shortInt 0
x4118:	mov word [bp + 34], 0	; 5: 199 70 34 0 0

printFormat$12:	; Assign longInt 0
x4123:	mov word [bp + 36], 0	; 5: 199 70 36 0 0

printFormat$13:	; Assign longDouble 0
x4128:	mov word [bp + 38], 0	; 5: 199 70 38 0 0

printFormat$14:	; Assign g_outChars 0
x4133:	mov word [g_outChars], 0	; 6: 199 6 55 21 0 0

printFormat$15:	; Assign index 0
x4139:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

printFormat$16:	; BinaryAdd £temporary2053 format index
x4144:	mov si, [bp + 6]	; 3: 139 118 6
x4147:	add si, [bp + 10]	; 3: 3 118 10

printFormat$17:	; Deref £temporary2052 -> £temporary2053 £temporary2053 0

printFormat$18:	; Equal 284 £temporary2052 -> £temporary2053 0
x4150:	cmp byte [si], 0	; 3: 128 60 0
x4153:	je printFormat$284	; 4: 15 132 212 4

printFormat$19:	; BinaryAdd £temporary2057 format index
x4157:	mov si, [bp + 6]	; 3: 139 118 6
x4160:	add si, [bp + 10]	; 3: 3 118 10

printFormat$20:	; Deref £temporary2056 -> £temporary2057 £temporary2057 0

printFormat$21:	; Assign c £temporary2056 -> £temporary2057
x4163:	mov al, [si]	; 2: 138 4
x4165:	mov [bp + 40], al	; 3: 136 70 40

printFormat$22:	; Equal 262 percent 0
x4168:	cmp word [bp + 16], 0	; 4: 131 126 16 0
x4172:	je printFormat$262	; 4: 15 132 89 4

printFormat$23:	; Case 52 c 43
x4176:	mov al, [bp + 40]	; 3: 138 70 40
x4179:	cmp al, 43	; 2: 60 43
x4181:	je printFormat$52	; 4: 15 132 143 0

printFormat$24:	; Case 54 c 45
x4185:	cmp al, 45	; 2: 60 45
x4187:	je printFormat$54	; 4: 15 132 145 0

printFormat$25:	; Case 56 c 32
x4191:	cmp al, 32	; 2: 60 32
x4193:	je printFormat$56	; 4: 15 132 147 0

printFormat$26:	; Case 58 c 48
x4197:	cmp al, 48	; 2: 60 48
x4199:	je printFormat$58	; 4: 15 132 149 0

printFormat$27:	; Case 60 c 35
x4203:	cmp al, 35	; 2: 60 35
x4205:	je printFormat$60	; 4: 15 132 151 0

printFormat$28:	; Case 62 c 46
x4209:	cmp al, 46	; 2: 60 46
x4211:	je printFormat$62	; 4: 15 132 153 0

printFormat$29:	; Case 64 c 42
x4215:	cmp al, 42	; 2: 60 42
x4217:	je printFormat$64	; 4: 15 132 155 0

printFormat$30:	; Case 69 c 104
x4221:	cmp al, 104	; 2: 60 104
x4223:	je printFormat$69	; 4: 15 132 171 0

printFormat$31:	; Case 71 c 108
x4227:	cmp al, 108	; 2: 60 108
x4229:	je printFormat$71	; 4: 15 132 173 0

printFormat$32:	; Case 73 c 76
x4233:	cmp al, 76	; 2: 60 76
x4235:	je printFormat$73	; 4: 15 132 175 0

printFormat$33:	; Case 75 c 37
x4239:	cmp al, 37	; 2: 60 37
x4241:	je printFormat$75	; 4: 15 132 177 0

printFormat$34:	; Case 75 c 110
x4245:	cmp al, 110	; 2: 60 110
x4247:	je printFormat$75	; 4: 15 132 171 0

printFormat$35:	; Case 75 c 112
x4251:	cmp al, 112	; 2: 60 112
x4253:	je printFormat$75	; 4: 15 132 165 0

printFormat$36:	; Case 75 c 71
x4257:	cmp al, 71	; 2: 60 71
x4259:	je printFormat$75	; 4: 15 132 159 0

printFormat$37:	; Case 75 c 103
x4263:	cmp al, 103	; 2: 60 103
x4265:	je printFormat$75	; 4: 15 132 153 0

printFormat$38:	; Case 75 c 69
x4269:	cmp al, 69	; 2: 60 69
x4271:	je printFormat$75	; 4: 15 132 147 0

printFormat$39:	; Case 75 c 101
x4275:	cmp al, 101	; 2: 60 101
x4277:	je printFormat$75	; 4: 15 132 141 0

printFormat$40:	; Case 75 c 102
x4281:	cmp al, 102	; 2: 60 102
x4283:	je printFormat$75	; 4: 15 132 135 0

printFormat$41:	; Case 75 c 115
x4287:	cmp al, 115	; 2: 60 115
x4289:	je printFormat$75	; 4: 15 132 129 0

printFormat$42:	; Case 75 c 99
x4293:	cmp al, 99	; 2: 60 99
x4295:	je printFormat$75	; 2: 116 125

printFormat$43:	; Case 75 c 88
x4297:	cmp al, 88	; 2: 60 88
x4299:	je printFormat$75	; 2: 116 121

printFormat$44:	; Case 75 c 120
x4301:	cmp al, 120	; 2: 60 120
x4303:	je printFormat$75	; 2: 116 117

printFormat$45:	; Case 75 c 111
x4305:	cmp al, 111	; 2: 60 111
x4307:	je printFormat$75	; 2: 116 113

printFormat$46:	; Case 75 c 98
x4309:	cmp al, 98	; 2: 60 98
x4311:	je printFormat$75	; 2: 116 109

printFormat$47:	; Case 75 c 117
x4313:	cmp al, 117	; 2: 60 117
x4315:	je printFormat$75	; 2: 116 105

printFormat$48:	; Case 75 c 100
x4317:	cmp al, 100	; 2: 60 100
x4319:	je printFormat$75	; 2: 116 101

printFormat$49:	; Case 75 c 105
x4321:	cmp al, 105	; 2: 60 105
x4323:	je printFormat$75	; 2: 116 97

printFormat$50:	; CaseEnd c

printFormat$51:	; Goto 239
x4325:	jmp printFormat$239	; 3: 233 78 3

printFormat$52:	; Assign plus 1
x4328:	mov word [bp + 18], 1	; 5: 199 70 18 1 0

printFormat$53:	; Goto 282
x4333:	jmp printFormat$282	; 3: 233 27 4

printFormat$54:	; Assign minus 1
x4336:	mov word [bp + 20], 1	; 5: 199 70 20 1 0

printFormat$55:	; Goto 282
x4341:	jmp printFormat$282	; 3: 233 19 4

printFormat$56:	; Assign space 1
x4344:	mov word [bp + 22], 1	; 5: 199 70 22 1 0

printFormat$57:	; Goto 282
x4349:	jmp printFormat$282	; 3: 233 11 4

printFormat$58:	; Assign zero 1
x4352:	mov word [bp + 24], 1	; 5: 199 70 24 1 0

printFormat$59:	; Goto 282
x4357:	jmp printFormat$282	; 3: 233 3 4

printFormat$60:	; Assign grid 1
x4360:	mov word [bp + 26], 1	; 5: 199 70 26 1 0

printFormat$61:	; Goto 282
x4365:	jmp printFormat$282	; 3: 233 251 3

printFormat$62:	; Assign period 1
x4368:	mov word [bp + 30], 1	; 5: 199 70 30 1 0

printFormat$63:	; Goto 282
x4373:	jmp printFormat$282	; 3: 233 243 3

printFormat$64:	; NotEqual 67 period 0
x4376:	cmp word [bp + 30], 0	; 4: 131 126 30 0
x4380:	jne printFormat$67	; 2: 117 8

printFormat$65:	; Assign width -1
x4382:	mov word [bp + 12], -1	; 5: 199 70 12 255 255

printFormat$66:	; Goto 282
x4387:	jmp printFormat$282	; 3: 233 229 3

printFormat$67:	; Assign precision -1
x4390:	mov word [bp + 14], -1	; 5: 199 70 14 255 255

printFormat$68:	; Goto 282
x4395:	jmp printFormat$282	; 3: 233 221 3

printFormat$69:	; Assign shortInt 1
x4398:	mov word [bp + 34], 1	; 5: 199 70 34 1 0

printFormat$70:	; Goto 282
x4403:	jmp printFormat$282	; 3: 233 213 3

printFormat$71:	; Assign longInt 1
x4406:	mov word [bp + 36], 1	; 5: 199 70 36 1 0

printFormat$72:	; Goto 282
x4411:	jmp printFormat$282	; 3: 233 205 3

printFormat$73:	; Assign longDouble 1
x4414:	mov word [bp + 38], 1	; 5: 199 70 38 1 0

printFormat$74:	; Goto 282
x4419:	jmp printFormat$282	; 3: 233 197 3

printFormat$75:	; Equal 107 minus 0
x4422:	cmp word [bp + 20], 0	; 4: 131 126 20 0
x4426:	je printFormat$107	; 4: 15 132 140 0

printFormat$76:	; Assign startChars g_outChars
x4430:	mov ax, [g_outChars]	; 3: 161 55 21
x4433:	mov [bp + 41], ax	; 3: 137 70 41

printFormat$77:	; CallHeader 43 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$78:	; BinaryAdd £temporary2061 format index
x4436:	mov si, [bp + 6]	; 3: 139 118 6
x4439:	add si, [bp + 10]	; 3: 3 118 10

printFormat$79:	; Deref £temporary2060 -> £temporary2061 £temporary2061 0

printFormat$80:	; address £temporary2062 £temporary2060 -> £temporary2061

printFormat$81:	; Parameter 43 £temporary2062 6
x4442:	mov [bp + 49], si	; 3: 137 118 49

printFormat$82:	; Parameter 43 arg_list 8
x4445:	mov ax, [bp + 8]	; 3: 139 70 8
x4448:	mov [bp + 51], ax	; 3: 137 70 51

printFormat$83:	; Parameter 43 plus 10
x4451:	mov ax, [bp + 18]	; 3: 139 70 18
x4454:	mov [bp + 53], ax	; 3: 137 70 53

printFormat$84:	; Parameter 43 space 12
x4457:	mov ax, [bp + 22]	; 3: 139 70 22
x4460:	mov [bp + 55], ax	; 3: 137 70 55

printFormat$85:	; Parameter 43 grid 14
x4463:	mov ax, [bp + 26]	; 3: 139 70 26
x4466:	mov [bp + 57], ax	; 3: 137 70 57

printFormat$86:	; address £temporary2063 width
x4469:	mov si, bp	; 2: 137 238
x4471:	add si, 12	; 3: 131 198 12

printFormat$87:	; Parameter 43 £temporary2063 16
x4474:	mov [bp + 59], si	; 3: 137 118 59

printFormat$88:	; Parameter 43 precision 18
x4477:	mov ax, [bp + 14]	; 3: 139 70 14
x4480:	mov [bp + 61], ax	; 3: 137 70 61

printFormat$89:	; Parameter 43 shortInt 20
x4483:	mov ax, [bp + 34]	; 3: 139 70 34
x4486:	mov [bp + 63], ax	; 3: 137 70 63

printFormat$90:	; Parameter 43 longInt 22
x4489:	mov ax, [bp + 36]	; 3: 139 70 36
x4492:	mov [bp + 65], ax	; 3: 137 70 65

printFormat$91:	; Parameter 43 longDouble 24
x4495:	mov ax, [bp + 38]	; 3: 139 70 38
x4498:	mov [bp + 67], ax	; 3: 137 70 67

printFormat$92:	; Parameter 43 1 26
x4501:	mov word [bp + 69], 1	; 5: 199 70 69 1 0

printFormat$93:	; Parameter 43 0 28
x4506:	mov word [bp + 71], 0	; 5: 199 70 71 0 0

printFormat$94:	; Call 43 printArgument 0
x4511:	mov word [bp + 43], printFormat$95	; 5: 199 70 43 173 17
x4516:	mov [bp + 45], bp	; 3: 137 110 45
x4519:	add bp, 43	; 3: 131 197 43
x4522:	jmp printArgument	; 3: 233 142 3

printFormat$95:	; PostCall 43

printFormat$96:	; GetReturnValue £temporary2064

printFormat$97:	; Assign arg_list £temporary2064
x4525:	mov [bp + 8], bx	; 3: 137 94 8

printFormat$98:	; BinarySubtract field g_outChars startChars
x4528:	mov ax, [g_outChars]	; 3: 161 55 21
x4531:	sub ax, [bp + 41]	; 3: 43 70 41
x4534:	mov [bp + 43], ax	; 3: 137 70 43

printFormat$99:	; Assign £temporary2066 field
x4537:	mov ax, [bp + 43]	; 3: 139 70 43

printFormat$100:	; Increment field
x4540:	inc word [bp + 43]	; 3: 255 70 43

printFormat$101:	; SignedGreaterThanEqual 237 £temporary2066 width
x4543:	cmp ax, [bp + 12]	; 3: 59 70 12
x4546:	jge printFormat$237	; 4: 15 141 104 2

printFormat$102:	; CallHeader 45 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$103:	; Parameter 45 32 6
x4550:	mov byte [bp + 51], 32	; 4: 198 70 51 32

printFormat$104:	; Call 45 printChar 0
x4554:	mov word [bp + 45], printFormat$105	; 5: 199 70 45 216 17
x4559:	mov [bp + 47], bp	; 3: 137 110 47
x4562:	add bp, 45	; 3: 131 197 45
x4565:	jmp printChar	; 3: 233 118 10

printFormat$105:	; PostCall 45

printFormat$106:	; Goto 99
x4568:	jmp printFormat$99	; 2: 235 223

printFormat$107:	; Equal 184 zero 0
x4570:	cmp word [bp + 24], 0	; 4: 131 126 24 0
x4574:	je printFormat$184	; 4: 15 132 84 1

printFormat$108:	; Assign startChars g_outChars
x4578:	mov ax, [g_outChars]	; 3: 161 55 21
x4581:	mov [bp + 41], ax	; 3: 137 70 41

printFormat$109:	; Assign oldOutStatus g_outStatus
x4584:	mov ax, [g_outStatus]	; 3: 161 219 15
x4587:	mov [bp + 43], ax	; 3: 137 70 43

printFormat$110:	; Assign negative 0
x4590:	mov word [bp + 45], 0	; 5: 199 70 45 0 0

printFormat$111:	; Assign g_outStatus 2
x4595:	mov word [g_outStatus], 2	; 6: 199 6 219 15 2 0

printFormat$112:	; CallHeader 47 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$113:	; BinaryAdd £temporary2071 format index
x4601:	mov si, [bp + 6]	; 3: 139 118 6
x4604:	add si, [bp + 10]	; 3: 3 118 10

printFormat$114:	; Deref £temporary2070 -> £temporary2071 £temporary2071 0

printFormat$115:	; address £temporary2072 £temporary2070 -> £temporary2071

printFormat$116:	; Parameter 47 £temporary2072 6
x4607:	mov [bp + 53], si	; 3: 137 118 53

printFormat$117:	; Parameter 47 arg_list 8
x4610:	mov ax, [bp + 8]	; 3: 139 70 8
x4613:	mov [bp + 55], ax	; 3: 137 70 55

printFormat$118:	; Parameter 47 0 10
x4616:	mov word [bp + 57], 0	; 5: 199 70 57 0 0

printFormat$119:	; Parameter 47 0 12
x4621:	mov word [bp + 59], 0	; 5: 199 70 59 0 0

printFormat$120:	; Parameter 47 grid 14
x4626:	mov ax, [bp + 26]	; 3: 139 70 26
x4629:	mov [bp + 61], ax	; 3: 137 70 61

printFormat$121:	; address £temporary2073 width
x4632:	mov si, bp	; 2: 137 238
x4634:	add si, 12	; 3: 131 198 12

printFormat$122:	; Parameter 47 £temporary2073 16
x4637:	mov [bp + 63], si	; 3: 137 118 63

printFormat$123:	; Parameter 47 precision 18
x4640:	mov ax, [bp + 14]	; 3: 139 70 14
x4643:	mov [bp + 65], ax	; 3: 137 70 65

printFormat$124:	; Parameter 47 shortInt 20
x4646:	mov ax, [bp + 34]	; 3: 139 70 34
x4649:	mov [bp + 67], ax	; 3: 137 70 67

printFormat$125:	; Parameter 47 longInt 22
x4652:	mov ax, [bp + 36]	; 3: 139 70 36
x4655:	mov [bp + 69], ax	; 3: 137 70 69

printFormat$126:	; Parameter 47 longDouble 24
x4658:	mov ax, [bp + 38]	; 3: 139 70 38
x4661:	mov [bp + 71], ax	; 3: 137 70 71

printFormat$127:	; Parameter 47 0 26
x4664:	mov word [bp + 73], 0	; 5: 199 70 73 0 0

printFormat$128:	; address £temporary2074 negative
x4669:	mov si, bp	; 2: 137 238
x4671:	add si, 45	; 3: 131 198 45

printFormat$129:	; Parameter 47 £temporary2074 28
x4674:	mov [bp + 75], si	; 3: 137 118 75

printFormat$130:	; Call 47 printArgument 0
x4677:	mov word [bp + 47], printFormat$131	; 5: 199 70 47 83 18
x4682:	mov [bp + 49], bp	; 3: 137 110 49
x4685:	add bp, 47	; 3: 131 197 47
x4688:	jmp printArgument	; 3: 233 232 2

printFormat$131:	; PostCall 47

printFormat$132:	; Assign g_outStatus oldOutStatus
x4691:	mov ax, [bp + 43]	; 3: 139 70 43
x4694:	mov [g_outStatus], ax	; 3: 163 219 15

printFormat$133:	; BinarySubtract field g_outChars startChars
x4697:	mov ax, [g_outChars]	; 3: 161 55 21
x4700:	sub ax, [bp + 41]	; 3: 43 70 41
x4703:	mov [bp + 47], ax	; 3: 137 70 47

printFormat$134:	; Assign g_outChars startChars
x4706:	mov ax, [bp + 41]	; 3: 139 70 41
x4709:	mov [g_outChars], ax	; 3: 163 55 21

printFormat$135:	; Equal 142 negative 0
x4712:	cmp word [bp + 45], 0	; 4: 131 126 45 0
x4716:	je printFormat$142	; 2: 116 23

printFormat$136:	; CallHeader 49 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$137:	; Parameter 49 45 6
x4718:	mov byte [bp + 55], 45	; 4: 198 70 55 45

printFormat$138:	; Call 49 printChar 0
x4722:	mov word [bp + 49], printFormat$139	; 5: 199 70 49 128 18
x4727:	mov [bp + 51], bp	; 3: 137 110 51
x4730:	add bp, 49	; 3: 131 197 49
x4733:	jmp printChar	; 3: 233 206 9

printFormat$139:	; PostCall 49

printFormat$140:	; Increment field
x4736:	inc word [bp + 47]	; 3: 255 70 47

printFormat$141:	; Goto 155
x4739:	jmp printFormat$155	; 2: 235 56

printFormat$142:	; Equal 149 plus 0
x4741:	cmp word [bp + 18], 0	; 4: 131 126 18 0
x4745:	je printFormat$149	; 2: 116 23

printFormat$143:	; CallHeader 49 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$144:	; Parameter 49 43 6
x4747:	mov byte [bp + 55], 43	; 4: 198 70 55 43

printFormat$145:	; Call 49 printChar 0
x4751:	mov word [bp + 49], printFormat$146	; 5: 199 70 49 157 18
x4756:	mov [bp + 51], bp	; 3: 137 110 51
x4759:	add bp, 49	; 3: 131 197 49
x4762:	jmp printChar	; 3: 233 177 9

printFormat$146:	; PostCall 49

printFormat$147:	; Increment field
x4765:	inc word [bp + 47]	; 3: 255 70 47

printFormat$148:	; Goto 155
x4768:	jmp printFormat$155	; 2: 235 27

printFormat$149:	; Equal 155 space 0
x4770:	cmp word [bp + 22], 0	; 4: 131 126 22 0
x4774:	je printFormat$155	; 2: 116 21

printFormat$150:	; CallHeader 49 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$151:	; Parameter 49 32 6
x4776:	mov byte [bp + 55], 32	; 4: 198 70 55 32

printFormat$152:	; Call 49 printChar 0
x4780:	mov word [bp + 49], printFormat$153	; 5: 199 70 49 186 18
x4785:	mov [bp + 51], bp	; 3: 137 110 51
x4788:	add bp, 49	; 3: 131 197 49
x4791:	jmp printChar	; 3: 233 148 9

printFormat$153:	; PostCall 49

printFormat$154:	; Increment field
x4794:	inc word [bp + 47]	; 3: 255 70 47

printFormat$155:	; Assign £temporary2086 field
x4797:	mov ax, [bp + 47]	; 3: 139 70 47

printFormat$156:	; Increment field
x4800:	inc word [bp + 47]	; 3: 255 70 47

printFormat$157:	; SignedGreaterThanEqual 163 £temporary2086 width
x4803:	cmp ax, [bp + 12]	; 3: 59 70 12
x4806:	jge printFormat$163	; 2: 125 20

printFormat$158:	; CallHeader 49 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$159:	; Parameter 49 48 6
x4808:	mov byte [bp + 55], 48	; 4: 198 70 55 48

printFormat$160:	; Call 49 printChar 0
x4812:	mov word [bp + 49], printFormat$161	; 5: 199 70 49 218 18
x4817:	mov [bp + 51], bp	; 3: 137 110 51
x4820:	add bp, 49	; 3: 131 197 49
x4823:	jmp printChar	; 3: 233 116 9

printFormat$161:	; PostCall 49

printFormat$162:	; Goto 155
x4826:	jmp printFormat$155	; 2: 235 225

printFormat$163:	; CallHeader 49 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$164:	; BinaryAdd £temporary2091 format index
x4828:	mov si, [bp + 6]	; 3: 139 118 6
x4831:	add si, [bp + 10]	; 3: 3 118 10

printFormat$165:	; Deref £temporary2090 -> £temporary2091 £temporary2091 0

printFormat$166:	; address £temporary2092 £temporary2090 -> £temporary2091

printFormat$167:	; Parameter 49 £temporary2092 6
x4834:	mov [bp + 55], si	; 3: 137 118 55

printFormat$168:	; Parameter 49 arg_list 8
x4837:	mov ax, [bp + 8]	; 3: 139 70 8
x4840:	mov [bp + 57], ax	; 3: 137 70 57

printFormat$169:	; Parameter 49 0 10
x4843:	mov word [bp + 59], 0	; 5: 199 70 59 0 0

printFormat$170:	; Parameter 49 0 12
x4848:	mov word [bp + 61], 0	; 5: 199 70 61 0 0

printFormat$171:	; Parameter 49 grid 14
x4853:	mov ax, [bp + 26]	; 3: 139 70 26
x4856:	mov [bp + 63], ax	; 3: 137 70 63

printFormat$172:	; Parameter 49 0 16
x4859:	mov word [bp + 65], 0	; 5: 199 70 65 0 0

printFormat$173:	; Parameter 49 precision 18
x4864:	mov ax, [bp + 14]	; 3: 139 70 14
x4867:	mov [bp + 67], ax	; 3: 137 70 67

printFormat$174:	; Parameter 49 shortInt 20
x4870:	mov ax, [bp + 34]	; 3: 139 70 34
x4873:	mov [bp + 69], ax	; 3: 137 70 69

printFormat$175:	; Parameter 49 longInt 22
x4876:	mov ax, [bp + 36]	; 3: 139 70 36
x4879:	mov [bp + 71], ax	; 3: 137 70 71

printFormat$176:	; Parameter 49 longDouble 24
x4882:	mov ax, [bp + 38]	; 3: 139 70 38
x4885:	mov [bp + 73], ax	; 3: 137 70 73

printFormat$177:	; Parameter 49 0 26
x4888:	mov word [bp + 75], 0	; 5: 199 70 75 0 0

printFormat$178:	; Parameter 49 0 28
x4893:	mov word [bp + 77], 0	; 5: 199 70 77 0 0

printFormat$179:	; Call 49 printArgument 0
x4898:	mov word [bp + 49], printFormat$180	; 5: 199 70 49 48 19
x4903:	mov [bp + 51], bp	; 3: 137 110 51
x4906:	add bp, 49	; 3: 131 197 49
x4909:	jmp printArgument	; 3: 233 11 2

printFormat$180:	; PostCall 49

printFormat$181:	; GetReturnValue £temporary2093

printFormat$182:	; Assign arg_list £temporary2093
x4912:	mov [bp + 8], bx	; 3: 137 94 8

printFormat$183:	; Goto 237
x4915:	jmp printFormat$237	; 3: 233 248 0

printFormat$184:	; Assign startChars g_outChars
x4918:	mov ax, [g_outChars]	; 3: 161 55 21
x4921:	mov [bp + 41], ax	; 3: 137 70 41

printFormat$185:	; Assign oldOutStatus g_outStatus
x4924:	mov ax, [g_outStatus]	; 3: 161 219 15
x4927:	mov [bp + 43], ax	; 3: 137 70 43

printFormat$186:	; Assign g_outStatus 2
x4930:	mov word [g_outStatus], 2	; 6: 199 6 219 15 2 0

printFormat$187:	; CallHeader 45 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$188:	; BinaryAdd £temporary2095 format index
x4936:	mov si, [bp + 6]	; 3: 139 118 6
x4939:	add si, [bp + 10]	; 3: 3 118 10

printFormat$189:	; Deref £temporary2094 -> £temporary2095 £temporary2095 0

printFormat$190:	; address £temporary2096 £temporary2094 -> £temporary2095

printFormat$191:	; Parameter 45 £temporary2096 6
x4942:	mov [bp + 51], si	; 3: 137 118 51

printFormat$192:	; Parameter 45 arg_list 8
x4945:	mov ax, [bp + 8]	; 3: 139 70 8
x4948:	mov [bp + 53], ax	; 3: 137 70 53

printFormat$193:	; Parameter 45 plus 10
x4951:	mov ax, [bp + 18]	; 3: 139 70 18
x4954:	mov [bp + 55], ax	; 3: 137 70 55

printFormat$194:	; Parameter 45 space 12
x4957:	mov ax, [bp + 22]	; 3: 139 70 22
x4960:	mov [bp + 57], ax	; 3: 137 70 57

printFormat$195:	; Parameter 45 grid 14
x4963:	mov ax, [bp + 26]	; 3: 139 70 26
x4966:	mov [bp + 59], ax	; 3: 137 70 59

printFormat$196:	; address £temporary2097 width
x4969:	mov si, bp	; 2: 137 238
x4971:	add si, 12	; 3: 131 198 12

printFormat$197:	; Parameter 45 £temporary2097 16
x4974:	mov [bp + 61], si	; 3: 137 118 61

printFormat$198:	; Parameter 45 precision 18
x4977:	mov ax, [bp + 14]	; 3: 139 70 14
x4980:	mov [bp + 63], ax	; 3: 137 70 63

printFormat$199:	; Parameter 45 shortInt 20
x4983:	mov ax, [bp + 34]	; 3: 139 70 34
x4986:	mov [bp + 65], ax	; 3: 137 70 65

printFormat$200:	; Parameter 45 longInt 22
x4989:	mov ax, [bp + 36]	; 3: 139 70 36
x4992:	mov [bp + 67], ax	; 3: 137 70 67

printFormat$201:	; Parameter 45 longDouble 24
x4995:	mov ax, [bp + 38]	; 3: 139 70 38
x4998:	mov [bp + 69], ax	; 3: 137 70 69

printFormat$202:	; Parameter 45 1 26
x5001:	mov word [bp + 71], 1	; 5: 199 70 71 1 0

printFormat$203:	; Parameter 45 0 28
x5006:	mov word [bp + 73], 0	; 5: 199 70 73 0 0

printFormat$204:	; Call 45 printArgument 0
x5011:	mov word [bp + 45], printFormat$205	; 5: 199 70 45 161 19
x5016:	mov [bp + 47], bp	; 3: 137 110 47
x5019:	add bp, 45	; 3: 131 197 45
x5022:	jmp printArgument	; 3: 233 154 1

printFormat$205:	; PostCall 45

printFormat$206:	; Assign g_outStatus oldOutStatus
x5025:	mov ax, [bp + 43]	; 3: 139 70 43
x5028:	mov [g_outStatus], ax	; 3: 163 219 15

printFormat$207:	; BinarySubtract field g_outChars startChars
x5031:	mov ax, [g_outChars]	; 3: 161 55 21
x5034:	sub ax, [bp + 41]	; 3: 43 70 41
x5037:	mov [bp + 45], ax	; 3: 137 70 45

printFormat$208:	; Assign g_outChars startChars
x5040:	mov ax, [bp + 41]	; 3: 139 70 41
x5043:	mov [g_outChars], ax	; 3: 163 55 21

printFormat$209:	; Assign £temporary2100 field
x5046:	mov ax, [bp + 45]	; 3: 139 70 45

printFormat$210:	; Increment field
x5049:	inc word [bp + 45]	; 3: 255 70 45

printFormat$211:	; SignedGreaterThanEqual 217 £temporary2100 width
x5052:	cmp ax, [bp + 12]	; 3: 59 70 12
x5055:	jge printFormat$217	; 2: 125 20

printFormat$212:	; CallHeader 47 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$213:	; Parameter 47 32 6
x5057:	mov byte [bp + 53], 32	; 4: 198 70 53 32

printFormat$214:	; Call 47 printChar 0
x5061:	mov word [bp + 47], printFormat$215	; 5: 199 70 47 211 19
x5066:	mov [bp + 49], bp	; 3: 137 110 49
x5069:	add bp, 47	; 3: 131 197 47
x5072:	jmp printChar	; 3: 233 123 8

printFormat$215:	; PostCall 47

printFormat$216:	; Goto 209
x5075:	jmp printFormat$209	; 2: 235 225

printFormat$217:	; CallHeader 47 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$218:	; BinaryAdd £temporary2105 format index
x5077:	mov si, [bp + 6]	; 3: 139 118 6
x5080:	add si, [bp + 10]	; 3: 3 118 10

printFormat$219:	; Deref £temporary2104 -> £temporary2105 £temporary2105 0

printFormat$220:	; address £temporary2106 £temporary2104 -> £temporary2105

printFormat$221:	; Parameter 47 £temporary2106 6
x5083:	mov [bp + 53], si	; 3: 137 118 53

printFormat$222:	; Parameter 47 arg_list 8
x5086:	mov ax, [bp + 8]	; 3: 139 70 8
x5089:	mov [bp + 55], ax	; 3: 137 70 55

printFormat$223:	; Parameter 47 plus 10
x5092:	mov ax, [bp + 18]	; 3: 139 70 18
x5095:	mov [bp + 57], ax	; 3: 137 70 57

printFormat$224:	; Parameter 47 space 12
x5098:	mov ax, [bp + 22]	; 3: 139 70 22
x5101:	mov [bp + 59], ax	; 3: 137 70 59

printFormat$225:	; Parameter 47 grid 14
x5104:	mov ax, [bp + 26]	; 3: 139 70 26
x5107:	mov [bp + 61], ax	; 3: 137 70 61

printFormat$226:	; Parameter 47 0 16
x5110:	mov word [bp + 63], 0	; 5: 199 70 63 0 0

printFormat$227:	; Parameter 47 precision 18
x5115:	mov ax, [bp + 14]	; 3: 139 70 14
x5118:	mov [bp + 65], ax	; 3: 137 70 65

printFormat$228:	; Parameter 47 shortInt 20
x5121:	mov ax, [bp + 34]	; 3: 139 70 34
x5124:	mov [bp + 67], ax	; 3: 137 70 67

printFormat$229:	; Parameter 47 longInt 22
x5127:	mov ax, [bp + 36]	; 3: 139 70 36
x5130:	mov [bp + 69], ax	; 3: 137 70 69

printFormat$230:	; Parameter 47 longDouble 24
x5133:	mov ax, [bp + 38]	; 3: 139 70 38
x5136:	mov [bp + 71], ax	; 3: 137 70 71

printFormat$231:	; Parameter 47 1 26
x5139:	mov word [bp + 73], 1	; 5: 199 70 73 1 0

printFormat$232:	; Parameter 47 0 28
x5144:	mov word [bp + 75], 0	; 5: 199 70 75 0 0

printFormat$233:	; Call 47 printArgument 0
x5149:	mov word [bp + 47], printFormat$234	; 5: 199 70 47 43 20
x5154:	mov [bp + 49], bp	; 3: 137 110 49
x5157:	add bp, 47	; 3: 131 197 47
x5160:	jmp printArgument	; 3: 233 16 1

printFormat$234:	; PostCall 47

printFormat$235:	; GetReturnValue £temporary2107

printFormat$236:	; Assign arg_list £temporary2107
x5163:	mov [bp + 8], bx	; 3: 137 94 8

printFormat$237:	; Assign percent 0
x5166:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

printFormat$238:	; Goto 282
x5171:	jmp printFormat$282	; 3: 233 213 0

printFormat$239:	; Assign value 0
x5174:	mov word [bp + 41], 0	; 5: 199 70 41 0 0

printFormat$240:	; CallHeader 43 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$241:	; IntegralToIntegral £temporary2110 c
x5179:	mov al, [bp + 40]	; 3: 138 70 40
x5182:	and ax, 255	; 3: 37 255 0
x5185:	cmp al, 0	; 2: 60 0
x5187:	jge printFormat$242	; 2: 125 4
x5189:	neg al	; 2: 246 216
x5191:	neg ax	; 2: 247 216

printFormat$242:	; Parameter 43 £temporary2110 6
x5193:	mov [bp + 49], ax	; 3: 137 70 49

printFormat$243:	; Call 43 isdigit 0
x5196:	mov word [bp + 43], printFormat$244	; 5: 199 70 43 90 20
x5201:	mov [bp + 45], bp	; 3: 137 110 45
x5204:	add bp, 43	; 3: 131 197 43
x5207:	jmp isdigit	; 3: 233 18 23

printFormat$244:	; PostCall 43

printFormat$245:	; GetReturnValue £temporary2111

printFormat$246:	; Equal 256 £temporary2111 0
x5210:	cmp bx, 0	; 3: 131 251 0
x5213:	je printFormat$256	; 2: 116 49

printFormat$247:	; SignedMultiply £temporary2112 value 10
x5215:	mov ax, [bp + 41]	; 3: 139 70 41
x5218:	xor dx, dx	; 2: 49 210
x5220:	imul word [@4839$int2$10#]	; 4: 247 46 57 21

printFormat$248:	; BinarySubtract £temporary2113 c 48
x5224:	mov bl, [bp + 40]	; 3: 138 94 40
x5227:	sub bl, 48	; 3: 128 235 48

printFormat$249:	; IntegralToIntegral £temporary2114 £temporary2113
x5230:	and bx, 255	; 4: 129 227 255 0
x5234:	cmp bl, 0	; 3: 128 251 0
x5237:	jge printFormat$250	; 2: 125 4
x5239:	neg bl	; 2: 246 219
x5241:	neg bx	; 2: 247 219

printFormat$250:	; BinaryAdd value £temporary2112 £temporary2114
x5243:	add ax, bx	; 2: 1 216
x5245:	mov [bp + 41], ax	; 3: 137 70 41

printFormat$251:	; Increment index
x5248:	inc word [bp + 10]	; 3: 255 70 10

printFormat$252:	; BinaryAdd £temporary2118 format index
x5251:	mov si, [bp + 6]	; 3: 139 118 6
x5254:	add si, [bp + 10]	; 3: 3 118 10

printFormat$253:	; Deref £temporary2117 -> £temporary2118 £temporary2118 0

printFormat$254:	; Assign c £temporary2117 -> £temporary2118
x5257:	mov al, [si]	; 2: 138 4
x5259:	mov [bp + 40], al	; 3: 136 70 40

printFormat$255:	; Goto 240
x5262:	jmp printFormat$240	; 2: 235 171

printFormat$256:	; Decrement index
x5264:	dec word [bp + 10]	; 3: 255 78 10

printFormat$257:	; NotEqual 260 period 0
x5267:	cmp word [bp + 30], 0	; 4: 131 126 30 0
x5271:	jne printFormat$260	; 2: 117 8

printFormat$258:	; Assign width value
x5273:	mov ax, [bp + 41]	; 3: 139 70 41
x5276:	mov [bp + 12], ax	; 3: 137 70 12

printFormat$259:	; Goto 282
x5279:	jmp printFormat$282	; 2: 235 106

printFormat$260:	; Assign precision value
x5281:	mov ax, [bp + 41]	; 3: 139 70 41
x5284:	mov [bp + 14], ax	; 3: 137 70 14

printFormat$261:	; Goto 282
x5287:	jmp printFormat$282	; 2: 235 98

printFormat$262:	; NotEqual 278 c 37
x5289:	cmp byte [bp + 40], 37	; 4: 128 126 40 37
x5293:	jne printFormat$278	; 2: 117 72

printFormat$263:	; Assign percent 1
x5295:	mov word [bp + 16], 1	; 5: 199 70 16 1 0

printFormat$264:	; Assign plus 0
x5300:	mov word [bp + 18], 0	; 5: 199 70 18 0 0

printFormat$265:	; Assign minus 0
x5305:	mov word [bp + 20], 0	; 5: 199 70 20 0 0

printFormat$266:	; Assign space 0
x5310:	mov word [bp + 22], 0	; 5: 199 70 22 0 0

printFormat$267:	; Assign zero 0
x5315:	mov word [bp + 24], 0	; 5: 199 70 24 0 0

printFormat$268:	; Assign grid 0
x5320:	mov word [bp + 26], 0	; 5: 199 70 26 0 0

printFormat$269:	; Assign widthStar 0
x5325:	mov word [bp + 28], 0	; 5: 199 70 28 0 0

printFormat$270:	; Assign period 0
x5330:	mov word [bp + 30], 0	; 5: 199 70 30 0 0

printFormat$271:	; Assign precisionStar 0
x5335:	mov word [bp + 32], 0	; 5: 199 70 32 0 0

printFormat$272:	; Assign shortInt 0
x5340:	mov word [bp + 34], 0	; 5: 199 70 34 0 0

printFormat$273:	; Assign longInt 0
x5345:	mov word [bp + 36], 0	; 5: 199 70 36 0 0

printFormat$274:	; Assign longDouble 0
x5350:	mov word [bp + 38], 0	; 5: 199 70 38 0 0

printFormat$275:	; Assign width 0
x5355:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

printFormat$276:	; Assign precision 0
x5360:	mov word [bp + 14], 0	; 5: 199 70 14 0 0

printFormat$277:	; Goto 282
x5365:	jmp printFormat$282	; 2: 235 20

printFormat$278:	; CallHeader 41 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$279:	; Parameter 41 c 6
x5367:	mov al, [bp + 40]	; 3: 138 70 40
x5370:	mov [bp + 47], al	; 3: 136 70 47

printFormat$280:	; Call 41 printChar 0
x5373:	mov word [bp + 41], printFormat$281	; 5: 199 70 41 11 21
x5378:	mov [bp + 43], bp	; 3: 137 110 43
x5381:	add bp, 41	; 3: 131 197 41
x5384:	jmp printChar	; 3: 233 67 7

printFormat$281:	; PostCall 41

printFormat$282:	; Increment index
x5387:	inc word [bp + 10]	; 3: 255 70 10

printFormat$283:	; Goto 16
x5390:	jmp printFormat$16	; 3: 233 31 251

printFormat$284:	; NotEqual 290 g_outStatus 1
x5393:	cmp word [g_outStatus], 1	; 5: 131 62 219 15 1
x5398:	jne printFormat$290	; 2: 117 16

printFormat$285:	; IntegralToIntegral £temporary2127 g_outDevice
x5400:	mov ax, [g_outDevice]	; 3: 161 221 15

printFormat$286:	; Assign outString £temporary2127
x5403:	mov [bp + 40], ax	; 3: 137 70 40

printFormat$287:	; BinaryAdd £temporary2129 outString g_outChars
x5406:	mov si, [bp + 40]	; 3: 139 118 40
x5409:	add si, [g_outChars]	; 4: 3 54 55 21

printFormat$288:	; Deref £temporary2128 -> £temporary2129 £temporary2129 0

printFormat$289:	; Assign £temporary2128 -> £temporary2129 0
x5413:	mov byte [si], 0	; 3: 198 4 0

printFormat$290:	; SetReturnValue g_outChars
x5416:	mov bx, [g_outChars]	; 4: 139 30 55 21

printFormat$291:	; Return g_outChars
x5420:	mov ax, [bp]	; 3: 139 70 0
x5423:	mov di, [bp + 4]	; 3: 139 126 4
x5426:	mov bp, [bp + 2]	; 3: 139 110 2
x5429:	jmp ax	; 2: 255 224

printFormat$292:	; FunctionEnd printFormat

g_outChars:
x5431:	db 0, 0	; 2: 0 0

@4839$int2$10#:
x5433:	dw 10	; 2: 10 0

printArgument:	; Deref £temporary1825 -> format format 0
x5435:	mov si, [bp + 6]	; 3: 139 118 6

printArgument$1:	; Assign c £temporary1825 -> format
x5438:	mov al, [si]	; 2: 138 4
x5440:	mov [bp + 30], al	; 3: 136 70 30

printArgument$2:	; Case 21 c 100
x5443:	mov al, [bp + 30]	; 3: 138 70 30
x5446:	cmp al, 100	; 2: 60 100
x5448:	je printArgument$21	; 2: 116 97

printArgument$3:	; Case 21 c 105
x5450:	cmp al, 105	; 2: 60 105
x5452:	je printArgument$21	; 2: 116 93

printArgument$4:	; Case 73 c 99
x5454:	cmp al, 99	; 2: 60 99
x5456:	je printArgument$73	; 4: 15 132 68 1

printArgument$5:	; Case 93 c 115
x5460:	cmp al, 115	; 2: 60 115
x5462:	je printArgument$93	; 4: 15 132 146 1

printArgument$6:	; Case 113 c 88
x5466:	cmp al, 88	; 2: 60 88
x5468:	je printArgument$113	; 4: 15 132 221 1

printArgument$7:	; Case 113 c 120
x5472:	cmp al, 120	; 2: 60 120
x5474:	je printArgument$113	; 4: 15 132 215 1

printArgument$8:	; Case 113 c 98
x5478:	cmp al, 98	; 2: 60 98
x5480:	je printArgument$113	; 4: 15 132 209 1

printArgument$9:	; Case 113 c 111
x5484:	cmp al, 111	; 2: 60 111
x5486:	je printArgument$113	; 4: 15 132 203 1

printArgument$10:	; Case 113 c 117
x5490:	cmp al, 117	; 2: 60 117
x5492:	je printArgument$113	; 4: 15 132 197 1

printArgument$11:	; Case 173 c 71
x5496:	cmp al, 71	; 2: 60 71
x5498:	je printArgument$173	; 4: 15 132 186 2

printArgument$12:	; Case 173 c 103
x5502:	cmp al, 103	; 2: 60 103
x5504:	je printArgument$173	; 4: 15 132 180 2

printArgument$13:	; Case 173 c 69
x5508:	cmp al, 69	; 2: 60 69
x5510:	je printArgument$173	; 4: 15 132 174 2

printArgument$14:	; Case 173 c 101
x5514:	cmp al, 101	; 2: 60 101
x5516:	je printArgument$173	; 4: 15 132 168 2

printArgument$15:	; Case 173 c 102
x5520:	cmp al, 102	; 2: 60 102
x5522:	je printArgument$173	; 4: 15 132 162 2

printArgument$16:	; Case 299 c 112
x5526:	cmp al, 112	; 2: 60 112
x5528:	je printArgument$299	; 4: 15 132 177 4

printArgument$17:	; Case 325 c 110
x5532:	cmp al, 110	; 2: 60 110
x5534:	je printArgument$325	; 4: 15 132 25 5

printArgument$18:	; Case 347 c 37
x5538:	cmp al, 37	; 2: 60 37
x5540:	je printArgument$347	; 4: 15 132 96 5

printArgument$19:	; CaseEnd c

printArgument$20:	; Goto 360
x5544:	jmp printArgument$360	; 3: 233 148 5

printArgument$21:	; Equal 30 shortInt 0
x5547:	cmp word [bp + 20], 0	; 4: 131 126 20 0
x5551:	je printArgument$30	; 2: 116 42

printArgument$22:	; BinaryAdd arg_list arg_list 2
x5553:	add word [bp + 8], 2	; 4: 131 70 8 2

printArgument$23:	; BinarySubtract £temporary1827 arg_list 2
x5557:	mov si, [bp + 8]	; 3: 139 118 8
x5560:	sub si, 2	; 3: 131 238 2

printArgument$24:	; IntegralToIntegral £temporary1828 £temporary1827

printArgument$25:	; Deref £temporary1829 -> £temporary1828 £temporary1828 0

printArgument$26:	; IntegralToIntegral £temporary1830 £temporary1829 -> £temporary1828
x5563:	mov ax, [si]	; 2: 139 4
x5565:	cmp ax, 0	; 3: 131 248 0
x5568:	jge printArgument$27	; 2: 125 4
x5570:	neg ax	; 2: 247 216
x5572:	neg al	; 2: 246 216

printArgument$27:	; IntegralToIntegral £temporary1831 £temporary1830
x5574:	and eax, 255	; 6: 102 37 255 0 0 0
x5580:	cmp al, 0	; 2: 60 0
x5582:	jge printArgument$28	; 2: 125 5
x5584:	neg al	; 2: 246 216
x5586:	neg eax	; 3: 102 247 216

printArgument$28:	; Assign longValue £temporary1831
x5589:	mov [bp + 44], eax	; 4: 102 137 70 44

printArgument$29:	; Goto 43
x5593:	jmp printArgument$43	; 2: 235 57

printArgument$30:	; Equal 37 longInt 0
x5595:	cmp word [bp + 22], 0	; 4: 131 126 22 0
x5599:	je printArgument$37	; 2: 116 19

printArgument$31:	; BinaryAdd arg_list arg_list 4
x5601:	add word [bp + 8], 4	; 4: 131 70 8 4

printArgument$32:	; BinarySubtract £temporary1833 arg_list 4
x5605:	mov si, [bp + 8]	; 3: 139 118 8
x5608:	sub si, 4	; 3: 131 238 4

printArgument$33:	; IntegralToIntegral £temporary1834 £temporary1833

printArgument$34:	; Deref £temporary1835 -> £temporary1834 £temporary1834 0

printArgument$35:	; Assign longValue £temporary1835 -> £temporary1834
x5611:	mov eax, [si]	; 3: 102 139 4
x5614:	mov [bp + 44], eax	; 4: 102 137 70 44

printArgument$36:	; Goto 43
x5618:	jmp printArgument$43	; 2: 235 32

printArgument$37:	; BinaryAdd arg_list arg_list 2
x5620:	add word [bp + 8], 2	; 4: 131 70 8 2

printArgument$38:	; BinarySubtract £temporary1837 arg_list 2
x5624:	mov si, [bp + 8]	; 3: 139 118 8
x5627:	sub si, 2	; 3: 131 238 2

printArgument$39:	; IntegralToIntegral £temporary1838 £temporary1837

printArgument$40:	; Deref £temporary1839 -> £temporary1838 £temporary1838 0

printArgument$41:	; IntegralToIntegral £temporary1840 £temporary1839 -> £temporary1838
x5630:	mov ax, [si]	; 2: 139 4
x5632:	and eax, 65535	; 6: 102 37 255 255 0 0
x5638:	cmp ax, 0	; 3: 131 248 0
x5641:	jge printArgument$42	; 2: 125 5
x5643:	neg ax	; 2: 247 216
x5645:	neg eax	; 3: 102 247 216

printArgument$42:	; Assign longValue £temporary1840
x5648:	mov [bp + 44], eax	; 4: 102 137 70 44

printArgument$43:	; Equal 50 negativePtr 0
x5652:	cmp word [bp + 28], 0	; 4: 131 126 28 0
x5656:	je printArgument$50	; 2: 116 20

printArgument$44:	; Deref £temporary1844 -> negativePtr negativePtr 0
x5658:	mov si, [bp + 28]	; 3: 139 118 28

printArgument$45:	; SignedGreaterThanEqual 48 longValue 0
x5661:	cmp dword [bp + 44], 0	; 5: 102 131 126 44 0
x5666:	jge printArgument$48	; 2: 125 5

printArgument$46:	; Assign £temporary1846 1
x5668:	mov ax, 1	; 3: 184 1 0

printArgument$47:	; Goto 49
x5671:	jmp printArgument$49	; 2: 235 3

printArgument$48:	; Assign £temporary1846 0
x5673:	mov ax, 0	; 3: 184 0 0

printArgument$49:	; Assign £temporary1844 -> negativePtr £temporary1846
x5676:	mov [si], ax	; 2: 137 4

printArgument$50:	; NotEqual 57 sign 0
x5678:	cmp word [bp + 26], 0	; 4: 131 126 26 0
x5682:	jne printArgument$57	; 2: 117 26

printArgument$51:	; CallHeader 48 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$52:	; Parameter 48 longValue 6
x5684:	mov eax, [bp + 44]	; 4: 102 139 70 44
x5688:	mov [bp + 54], eax	; 4: 102 137 70 54

printArgument$53:	; Call 48 labs 0
x5692:	mov word [bp + 48], printArgument$54	; 5: 199 70 48 74 22
x5697:	mov [bp + 50], bp	; 3: 137 110 50
x5700:	add bp, 48	; 3: 131 197 48
x5703:	jmp labs	; 3: 233 5 5

printArgument$54:	; PostCall 48

printArgument$55:	; GetReturnValue £temporary1849

printArgument$56:	; Assign longValue £temporary1849
x5706:	mov [bp + 44], ebx	; 4: 102 137 94 44

printArgument$57:	; CallHeader 48 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$58:	; Parameter 48 arg_list 6
x5710:	mov ax, [bp + 8]	; 3: 139 70 8
x5713:	mov [bp + 54], ax	; 3: 137 70 54

printArgument$59:	; Parameter 48 widthPtr 8
x5716:	mov ax, [bp + 16]	; 3: 139 70 16
x5719:	mov [bp + 56], ax	; 3: 137 70 56

printArgument$60:	; address £temporary1850 precision
x5722:	mov si, bp	; 2: 137 238
x5724:	add si, 18	; 3: 131 198 18

printArgument$61:	; Parameter 48 £temporary1850 10
x5727:	mov [bp + 58], si	; 3: 137 118 58

printArgument$62:	; Call 48 checkWidthAndPrecision 0
x5730:	mov word [bp + 48], printArgument$63	; 5: 199 70 48 112 22
x5735:	mov [bp + 50], bp	; 3: 137 110 50
x5738:	add bp, 48	; 3: 131 197 48
x5741:	jmp checkWidthAndPrecision	; 3: 233 254 4

printArgument$63:	; PostCall 48

printArgument$64:	; GetReturnValue £temporary1851

printArgument$65:	; Assign arg_list £temporary1851
x5744:	mov [bp + 8], bx	; 3: 137 94 8

printArgument$66:	; CallHeader 48 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$67:	; Parameter 48 longValue 6
x5747:	mov eax, [bp + 44]	; 4: 102 139 70 44
x5751:	mov [bp + 54], eax	; 4: 102 137 70 54

printArgument$68:	; Parameter 48 plus 10
x5755:	mov ax, [bp + 10]	; 3: 139 70 10
x5758:	mov [bp + 58], ax	; 3: 137 70 58

printArgument$69:	; Parameter 48 space 12
x5761:	mov ax, [bp + 12]	; 3: 139 70 12
x5764:	mov [bp + 60], ax	; 3: 137 70 60

printArgument$70:	; Call 48 printLongInt 0
x5767:	mov word [bp + 48], printArgument$71	; 5: 199 70 48 149 22
x5772:	mov [bp + 50], bp	; 3: 137 110 50
x5775:	add bp, 48	; 3: 131 197 48
x5778:	jmp printLongInt	; 3: 233 37 5

printArgument$71:	; PostCall 48

printArgument$72:	; Goto 360
x5781:	jmp printArgument$360	; 3: 233 167 4

printArgument$73:	; BinaryAdd arg_list arg_list 2
x5784:	add word [bp + 8], 2	; 4: 131 70 8 2

printArgument$74:	; BinarySubtract £temporary1854 arg_list 2
x5788:	mov si, [bp + 8]	; 3: 139 118 8
x5791:	sub si, 2	; 3: 131 238 2

printArgument$75:	; IntegralToIntegral £temporary1855 £temporary1854

printArgument$76:	; Deref £temporary1856 -> £temporary1855 £temporary1855 0

printArgument$77:	; IntegralToIntegral £temporary1857 £temporary1856 -> £temporary1855
x5794:	mov ax, [si]	; 2: 139 4
x5796:	cmp ax, 0	; 3: 131 248 0
x5799:	jge printArgument$78	; 2: 125 4
x5801:	neg ax	; 2: 247 216
x5803:	neg al	; 2: 246 216

printArgument$78:	; Assign charValue £temporary1857
x5805:	mov [bp + 31], al	; 3: 136 70 31

printArgument$79:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$80:	; Parameter 44 arg_list 6
x5808:	mov ax, [bp + 8]	; 3: 139 70 8
x5811:	mov [bp + 50], ax	; 3: 137 70 50

printArgument$81:	; Parameter 44 widthPtr 8
x5814:	mov ax, [bp + 16]	; 3: 139 70 16
x5817:	mov [bp + 52], ax	; 3: 137 70 52

printArgument$82:	; address £temporary1858 precision
x5820:	mov si, bp	; 2: 137 238
x5822:	add si, 18	; 3: 131 198 18

printArgument$83:	; Parameter 44 £temporary1858 10
x5825:	mov [bp + 54], si	; 3: 137 118 54

printArgument$84:	; Call 44 checkWidthAndPrecision 0
x5828:	mov word [bp + 44], printArgument$85	; 5: 199 70 44 210 22
x5833:	mov [bp + 46], bp	; 3: 137 110 46
x5836:	add bp, 44	; 3: 131 197 44
x5839:	jmp checkWidthAndPrecision	; 3: 233 156 4

printArgument$85:	; PostCall 44

printArgument$86:	; GetReturnValue £temporary1859

printArgument$87:	; Assign arg_list £temporary1859
x5842:	mov [bp + 8], bx	; 3: 137 94 8

printArgument$88:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$89:	; Parameter 44 charValue 6
x5845:	mov al, [bp + 31]	; 3: 138 70 31
x5848:	mov [bp + 50], al	; 3: 136 70 50

printArgument$90:	; Call 44 printChar 0
x5851:	mov word [bp + 44], printArgument$91	; 5: 199 70 44 233 22
x5856:	mov [bp + 46], bp	; 3: 137 110 46
x5859:	add bp, 44	; 3: 131 197 44
x5862:	jmp printChar	; 3: 233 101 5

printArgument$91:	; PostCall 44

printArgument$92:	; Goto 360
x5865:	jmp printArgument$360	; 3: 233 83 4

printArgument$93:	; BinaryAdd arg_list arg_list 2
x5868:	add word [bp + 8], 2	; 4: 131 70 8 2

printArgument$94:	; BinarySubtract £temporary1862 arg_list 2
x5872:	mov si, [bp + 8]	; 3: 139 118 8
x5875:	sub si, 2	; 3: 131 238 2

printArgument$95:	; IntegralToIntegral £temporary1863 £temporary1862

printArgument$96:	; Deref £temporary1864 -> £temporary1863 £temporary1863 0

printArgument$97:	; Assign stringValue £temporary1864 -> £temporary1863
x5878:	mov ax, [si]	; 2: 139 4
x5880:	mov [bp + 44], ax	; 3: 137 70 44

printArgument$98:	; CallHeader 46 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$99:	; Parameter 46 arg_list 6
x5883:	mov ax, [bp + 8]	; 3: 139 70 8
x5886:	mov [bp + 52], ax	; 3: 137 70 52

printArgument$100:	; Parameter 46 widthPtr 8
x5889:	mov ax, [bp + 16]	; 3: 139 70 16
x5892:	mov [bp + 54], ax	; 3: 137 70 54

printArgument$101:	; address £temporary1865 precision
x5895:	mov si, bp	; 2: 137 238
x5897:	add si, 18	; 3: 131 198 18

printArgument$102:	; Parameter 46 £temporary1865 10
x5900:	mov [bp + 56], si	; 3: 137 118 56

printArgument$103:	; Call 46 checkWidthAndPrecision 0
x5903:	mov word [bp + 46], printArgument$104	; 5: 199 70 46 29 23
x5908:	mov [bp + 48], bp	; 3: 137 110 48
x5911:	add bp, 46	; 3: 131 197 46
x5914:	jmp checkWidthAndPrecision	; 3: 233 81 4

printArgument$104:	; PostCall 46

printArgument$105:	; GetReturnValue £temporary1866

printArgument$106:	; Assign arg_list £temporary1866
x5917:	mov [bp + 8], bx	; 3: 137 94 8

printArgument$107:	; CallHeader 46 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$108:	; Parameter 46 stringValue 6
x5920:	mov ax, [bp + 44]	; 3: 139 70 44
x5923:	mov [bp + 52], ax	; 3: 137 70 52

printArgument$109:	; Parameter 46 precision 8
x5926:	mov ax, [bp + 18]	; 3: 139 70 18
x5929:	mov [bp + 54], ax	; 3: 137 70 54

printArgument$110:	; Call 46 printString 0
x5932:	mov word [bp + 46], printArgument$111	; 5: 199 70 46 58 23
x5937:	mov [bp + 48], bp	; 3: 137 110 48
x5940:	add bp, 46	; 3: 131 197 46
x5943:	jmp printString	; 3: 233 227 5

printArgument$111:	; PostCall 46

printArgument$112:	; Goto 360
x5946:	jmp printArgument$360	; 3: 233 2 4

printArgument$113:	; NotEqual 116 c 117
x5949:	cmp byte [bp + 30], 117	; 4: 128 126 30 117
x5953:	jne printArgument$116	; 2: 117 8

printArgument$114:	; Assign £temporary1882 10
x5955:	mov eax, 10	; 6: 102 184 10 0 0 0

printArgument$115:	; Goto 125
x5961:	jmp printArgument$125	; 2: 235 34

printArgument$116:	; NotEqual 119 c 111
x5963:	cmp byte [bp + 30], 111	; 4: 128 126 30 111
x5967:	jne printArgument$119	; 2: 117 8

printArgument$117:	; Assign £temporary1878 8
x5969:	mov eax, 8	; 6: 102 184 8 0 0 0

printArgument$118:	; Goto 124
x5975:	jmp printArgument$124	; 2: 235 20

printArgument$119:	; NotEqual 122 c 98
x5977:	cmp byte [bp + 30], 98	; 4: 128 126 30 98
x5981:	jne printArgument$122	; 2: 117 8

printArgument$120:	; Assign £temporary1874 2
x5983:	mov eax, 2	; 6: 102 184 2 0 0 0

printArgument$121:	; Goto 123
x5989:	jmp printArgument$123	; 2: 235 6

printArgument$122:	; Assign £temporary1874 16
x5991:	mov eax, 16	; 6: 102 184 16 0 0 0

printArgument$123:	; Assign £temporary1878 £temporary1874

printArgument$124:	; Assign £temporary1882 £temporary1878

printArgument$125:	; Assign base £temporary1882
x5997:	mov [bp + 44], eax	; 4: 102 137 70 44

printArgument$126:	; Equal 135 shortInt 0
x6001:	cmp word [bp + 20], 0	; 4: 131 126 20 0
x6005:	je printArgument$135	; 2: 116 24

printArgument$127:	; BinaryAdd arg_list arg_list 2
x6007:	add word [bp + 8], 2	; 4: 131 70 8 2

printArgument$128:	; BinarySubtract £temporary1884 arg_list 2
x6011:	mov si, [bp + 8]	; 3: 139 118 8
x6014:	sub si, 2	; 3: 131 238 2

printArgument$129:	; IntegralToIntegral £temporary1885 £temporary1884

printArgument$130:	; Deref £temporary1886 -> £temporary1885 £temporary1885 0

printArgument$131:	; IntegralToIntegral £temporary1887 £temporary1886 -> £temporary1885
x6017:	mov ax, [si]	; 2: 139 4

printArgument$132:	; IntegralToIntegral £temporary1888 £temporary1887
x6019:	and eax, 255	; 6: 102 37 255 0 0 0

printArgument$133:	; Assign value £temporary1888
x6025:	mov [bp + 48], eax	; 4: 102 137 70 48

printArgument$134:	; Goto 148
x6029:	jmp printArgument$148	; 2: 235 47

printArgument$135:	; Equal 142 longInt 0
x6031:	cmp word [bp + 22], 0	; 4: 131 126 22 0
x6035:	je printArgument$142	; 2: 116 19

printArgument$136:	; BinaryAdd arg_list arg_list 4
x6037:	add word [bp + 8], 4	; 4: 131 70 8 4

printArgument$137:	; BinarySubtract £temporary1890 arg_list 4
x6041:	mov si, [bp + 8]	; 3: 139 118 8
x6044:	sub si, 4	; 3: 131 238 4

printArgument$138:	; IntegralToIntegral £temporary1891 £temporary1890

printArgument$139:	; Deref £temporary1892 -> £temporary1891 £temporary1891 0

printArgument$140:	; Assign value £temporary1892 -> £temporary1891
x6047:	mov eax, [si]	; 3: 102 139 4
x6050:	mov [bp + 48], eax	; 4: 102 137 70 48

printArgument$141:	; Goto 148
x6054:	jmp printArgument$148	; 2: 235 22

printArgument$142:	; BinaryAdd arg_list arg_list 2
x6056:	add word [bp + 8], 2	; 4: 131 70 8 2

printArgument$143:	; BinarySubtract £temporary1894 arg_list 2
x6060:	mov si, [bp + 8]	; 3: 139 118 8
x6063:	sub si, 2	; 3: 131 238 2

printArgument$144:	; IntegralToIntegral £temporary1895 £temporary1894

printArgument$145:	; Deref £temporary1896 -> £temporary1895 £temporary1895 0

printArgument$146:	; IntegralToIntegral £temporary1897 £temporary1896 -> £temporary1895
x6066:	mov ax, [si]	; 2: 139 4
x6068:	and eax, 65535	; 6: 102 37 255 255 0 0

printArgument$147:	; Assign value £temporary1897
x6074:	mov [bp + 48], eax	; 4: 102 137 70 48

printArgument$148:	; CallHeader 52 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$149:	; Parameter 52 arg_list 6
x6078:	mov ax, [bp + 8]	; 3: 139 70 8
x6081:	mov [bp + 58], ax	; 3: 137 70 58

printArgument$150:	; Parameter 52 widthPtr 8
x6084:	mov ax, [bp + 16]	; 3: 139 70 16
x6087:	mov [bp + 60], ax	; 3: 137 70 60

printArgument$151:	; address £temporary1900 precision
x6090:	mov si, bp	; 2: 137 238
x6092:	add si, 18	; 3: 131 198 18

printArgument$152:	; Parameter 52 £temporary1900 10
x6095:	mov [bp + 62], si	; 3: 137 118 62

printArgument$153:	; Call 52 checkWidthAndPrecision 0
x6098:	mov word [bp + 52], printArgument$154	; 5: 199 70 52 224 23
x6103:	mov [bp + 54], bp	; 3: 137 110 54
x6106:	add bp, 52	; 3: 131 197 52
x6109:	jmp checkWidthAndPrecision	; 3: 233 142 3

printArgument$154:	; PostCall 52

printArgument$155:	; GetReturnValue £temporary1901

printArgument$156:	; Assign arg_list £temporary1901
x6112:	mov [bp + 8], bx	; 3: 137 94 8

printArgument$157:	; CallHeader 52 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$158:	; Parameter 52 value 6
x6115:	mov eax, [bp + 48]	; 4: 102 139 70 48
x6119:	mov [bp + 58], eax	; 4: 102 137 70 58

printArgument$159:	; Parameter 52 plus 10
x6123:	mov ax, [bp + 10]	; 3: 139 70 10
x6126:	mov [bp + 62], ax	; 3: 137 70 62

printArgument$160:	; Parameter 52 space 12
x6129:	mov ax, [bp + 12]	; 3: 139 70 12
x6132:	mov [bp + 64], ax	; 3: 137 70 64

printArgument$161:	; Parameter 52 grid 14
x6135:	mov ax, [bp + 14]	; 3: 139 70 14
x6138:	mov [bp + 66], ax	; 3: 137 70 66

printArgument$162:	; Parameter 52 base 16
x6141:	mov eax, [bp + 44]	; 4: 102 139 70 44
x6145:	mov [bp + 68], eax	; 4: 102 137 70 68

printArgument$163:	; CallHeader 52 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$164:	; IntegralToIntegral £temporary1902 c
x6149:	mov al, [bp + 30]	; 3: 138 70 30
x6152:	and ax, 255	; 3: 37 255 0
x6155:	cmp al, 0	; 2: 60 0
x6157:	jge printArgument$165	; 2: 125 4
x6159:	neg al	; 2: 246 216
x6161:	neg ax	; 2: 247 216

printArgument$165:	; Parameter 52 £temporary1902 26
x6163:	mov [bp + 78], ax	; 3: 137 70 78

printArgument$166:	; Call 52 isupper 20
x6166:	mov word [bp + 72], printArgument$167	; 5: 199 70 72 36 24
x6171:	mov [bp + 74], bp	; 3: 137 110 74
x6174:	add bp, 72	; 3: 131 197 72
x6177:	jmp isupper	; 3: 233 233 5

printArgument$167:	; PostCall 52

printArgument$168:	; GetReturnValue £temporary1903

printArgument$169:	; Parameter 52 £temporary1903 20
x6180:	mov [bp + 72], bx	; 3: 137 94 72

printArgument$170:	; Call 52 printUnsignedLong 0
x6183:	mov word [bp + 52], printArgument$171	; 5: 199 70 52 53 24
x6188:	mov [bp + 54], bp	; 3: 137 110 54
x6191:	add bp, 52	; 3: 131 197 52
x6194:	jmp printUnsignedLong	; 3: 233 217 9

printArgument$171:	; PostCall 52

printArgument$172:	; Goto 360
x6197:	jmp printArgument$360	; 3: 233 7 3

printArgument$173:	; Equal 190 longDouble 0
x6200:	cmp word [bp + 24], 0	; 4: 131 126 24 0
x6204:	je printArgument$190	; 2: 116 57

printArgument$174:	; BinaryAdd arg_list arg_list 8
x6206:	add word [bp + 8], 8	; 4: 131 70 8 8

printArgument$175:	; BinarySubtract £temporary1906 arg_list 8
x6210:	mov si, [bp + 8]	; 3: 139 118 8
x6213:	sub si, 8	; 3: 131 238 8

printArgument$176:	; IntegralToIntegral £temporary1907 £temporary1906

printArgument$177:	; Deref £temporary1908 -> £temporary1907 £temporary1907 0

printArgument$178:	; PushFloat £temporary1908 -> £temporary1907
x6216:	fld qword [si]	; 2: 221 4

printArgument$179:	; PopFloat longDoubleValue
x6218:	fstp qword [bp + 34]	; 3: 221 94 34

printArgument$180:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$181:	; PushFloat longDoubleValue
x6221:	fld qword [bp + 34]	; 3: 221 70 34

printArgument$182:	; Parameter 44 longDoubleValue 6
x6224:	fstp qword [bp + 50]	; 3: 221 94 50

printArgument$183:	; Parameter 44 0 14
x6227:	mov word [bp + 58], 0	; 5: 199 70 58 0 0

printArgument$184:	; Parameter 44 0 16
x6232:	mov word [bp + 60], 0	; 5: 199 70 60 0 0

printArgument$185:	; Parameter 44 0 18
x6237:	mov word [bp + 62], 0	; 5: 199 70 62 0 0

printArgument$186:	; Parameter 44 3 20
x6242:	mov word [bp + 64], 3	; 5: 199 70 64 3 0

printArgument$187:	; Call 44 printLongDoublePlain 0
x6247:	mov word [bp + 44], printArgument$188	; 5: 199 70 44 117 24
x6252:	mov [bp + 46], bp	; 3: 137 110 46
x6255:	add bp, 44	; 3: 131 197 44
x6258:	jmp printLongDoublePlain	; 3: 233 68 11

printArgument$188:	; PostCall 44

printArgument$189:	; Goto 196
x6261:	jmp printArgument$196	; 2: 235 15

printArgument$190:	; BinaryAdd arg_list arg_list 8
x6263:	add word [bp + 8], 8	; 4: 131 70 8 8

printArgument$191:	; BinarySubtract £temporary1911 arg_list 8
x6267:	mov si, [bp + 8]	; 3: 139 118 8
x6270:	sub si, 8	; 3: 131 238 8

printArgument$192:	; IntegralToIntegral £temporary1912 £temporary1911

printArgument$193:	; Deref £temporary1913 -> £temporary1912 £temporary1912 0

printArgument$194:	; PushFloat £temporary1913 -> £temporary1912
x6273:	fld qword [si]	; 2: 221 4

printArgument$195:	; PopFloat longDoubleValue
x6275:	fstp qword [bp + 34]	; 3: 221 94 34

printArgument$196:	; Equal 205 negativePtr 0
x6278:	cmp word [bp + 28], 0	; 4: 131 126 28 0
x6282:	je printArgument$205	; 2: 116 26

printArgument$197:	; Deref £temporary1917 -> negativePtr negativePtr 0
x6284:	mov si, [bp + 28]	; 3: 139 118 28

printArgument$198:	; PushFloat longDoubleValue
x6287:	fld qword [bp + 34]	; 3: 221 70 34

printArgument$199:	; PushZero
x6290:	fldz	; 2: 217 238

printArgument$200:	; SignedGreaterThanEqual 203 longDoubleValue 0
x6292:	fcompp	; 2: 222 217
x6294:	fstsw ax	; 3: 155 223 224
x6297:	sahf	; 1: 158
x6298:	jbe printArgument$203	; 2: 118 5

printArgument$201:	; Assign £temporary1919 1
x6300:	mov ax, 1	; 3: 184 1 0

printArgument$202:	; Goto 204
x6303:	jmp printArgument$204	; 2: 235 3

printArgument$203:	; Assign £temporary1919 0
x6305:	mov ax, 0	; 3: 184 0 0

printArgument$204:	; Assign £temporary1917 -> negativePtr £temporary1919
x6308:	mov [si], ax	; 2: 137 4

printArgument$205:	; NotEqual 213 sign 0
x6310:	cmp word [bp + 26], 0	; 4: 131 126 26 0
x6314:	jne printArgument$213	; 2: 117 23

printArgument$206:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$207:	; PushFloat longDoubleValue
x6316:	fld qword [bp + 34]	; 3: 221 70 34

printArgument$208:	; Parameter 44 longDoubleValue 6
x6319:	fstp qword [bp + 50]	; 3: 221 94 50

printArgument$209:	; Call 44 fabs 0
x6322:	mov word [bp + 44], printArgument$210	; 5: 199 70 44 192 24
x6327:	mov [bp + 46], bp	; 3: 137 110 46
x6330:	add bp, 44	; 3: 131 197 44
x6333:	jmp fabs	; 3: 233 61 12

printArgument$210:	; PostCall 44

printArgument$211:	; GetReturnValue £temporary1922

printArgument$212:	; PopFloat longDoubleValue
x6336:	fstp qword [bp + 34]	; 3: 221 94 34

printArgument$213:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$214:	; Parameter 44 arg_list 6
x6339:	mov ax, [bp + 8]	; 3: 139 70 8
x6342:	mov [bp + 50], ax	; 3: 137 70 50

printArgument$215:	; Parameter 44 widthPtr 8
x6345:	mov ax, [bp + 16]	; 3: 139 70 16
x6348:	mov [bp + 52], ax	; 3: 137 70 52

printArgument$216:	; address £temporary1923 precision
x6351:	mov si, bp	; 2: 137 238
x6353:	add si, 18	; 3: 131 198 18

printArgument$217:	; Parameter 44 £temporary1923 10
x6356:	mov [bp + 54], si	; 3: 137 118 54

printArgument$218:	; Call 44 checkWidthAndPrecision 0
x6359:	mov word [bp + 44], printArgument$219	; 5: 199 70 44 229 24
x6364:	mov [bp + 46], bp	; 3: 137 110 46
x6367:	add bp, 44	; 3: 131 197 44
x6370:	jmp checkWidthAndPrecision	; 3: 233 137 2

printArgument$219:	; PostCall 44

printArgument$220:	; GetReturnValue £temporary1924

printArgument$221:	; Assign arg_list £temporary1924
x6373:	mov [bp + 8], bx	; 3: 137 94 8

printArgument$222:	; NotEqual 233 c 102
x6376:	cmp byte [bp + 30], 102	; 4: 128 126 30 102
x6380:	jne printArgument$233	; 2: 117 47

printArgument$223:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$224:	; PushFloat longDoubleValue
x6382:	fld qword [bp + 34]	; 3: 221 70 34

printArgument$225:	; Parameter 44 longDoubleValue 6
x6385:	fstp qword [bp + 50]	; 3: 221 94 50

printArgument$226:	; Parameter 44 plus 14
x6388:	mov ax, [bp + 10]	; 3: 139 70 10
x6391:	mov [bp + 58], ax	; 3: 137 70 58

printArgument$227:	; Parameter 44 space 16
x6394:	mov ax, [bp + 12]	; 3: 139 70 12
x6397:	mov [bp + 60], ax	; 3: 137 70 60

printArgument$228:	; Parameter 44 grid 18
x6400:	mov ax, [bp + 14]	; 3: 139 70 14
x6403:	mov [bp + 62], ax	; 3: 137 70 62

printArgument$229:	; Parameter 44 precision 20
x6406:	mov ax, [bp + 18]	; 3: 139 70 18
x6409:	mov [bp + 64], ax	; 3: 137 70 64

printArgument$230:	; Call 44 printLongDoublePlain 0
x6412:	mov word [bp + 44], printArgument$231	; 5: 199 70 44 26 25
x6417:	mov [bp + 46], bp	; 3: 137 110 46
x6420:	add bp, 44	; 3: 131 197 44
x6423:	jmp printLongDoublePlain	; 3: 233 159 10

printArgument$231:	; PostCall 44

printArgument$232:	; Goto 360
x6426:	jmp printArgument$360	; 3: 233 34 2

printArgument$233:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$234:	; IntegralToIntegral £temporary1927 c
x6429:	mov al, [bp + 30]	; 3: 138 70 30
x6432:	and ax, 255	; 3: 37 255 0
x6435:	cmp al, 0	; 2: 60 0
x6437:	jge printArgument$235	; 2: 125 4
x6439:	neg al	; 2: 246 216
x6441:	neg ax	; 2: 247 216

printArgument$235:	; Parameter 44 £temporary1927 6
x6443:	mov [bp + 50], ax	; 3: 137 70 50

printArgument$236:	; Call 44 tolower 0
x6446:	mov word [bp + 44], printArgument$237	; 5: 199 70 44 60 25
x6451:	mov [bp + 46], bp	; 3: 137 110 46
x6454:	add bp, 44	; 3: 131 197 44
x6457:	jmp tolower	; 3: 233 227 11

printArgument$237:	; PostCall 44

printArgument$238:	; GetReturnValue £temporary1928

printArgument$239:	; NotEqual 257 £temporary1928 101
x6460:	cmp bx, 101	; 3: 131 251 101
x6463:	jne printArgument$257	; 2: 117 81

printArgument$240:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$241:	; PushFloat longDoubleValue
x6465:	fld qword [bp + 34]	; 3: 221 70 34

printArgument$242:	; Parameter 44 longDoubleValue 6
x6468:	fstp qword [bp + 50]	; 3: 221 94 50

printArgument$243:	; Parameter 44 plus 14
x6471:	mov ax, [bp + 10]	; 3: 139 70 10
x6474:	mov [bp + 58], ax	; 3: 137 70 58

printArgument$244:	; Parameter 44 space 16
x6477:	mov ax, [bp + 12]	; 3: 139 70 12
x6480:	mov [bp + 60], ax	; 3: 137 70 60

printArgument$245:	; Parameter 44 grid 18
x6483:	mov ax, [bp + 14]	; 3: 139 70 14
x6486:	mov [bp + 62], ax	; 3: 137 70 62

printArgument$246:	; Parameter 44 precision 20
x6489:	mov ax, [bp + 18]	; 3: 139 70 18
x6492:	mov [bp + 64], ax	; 3: 137 70 64

printArgument$247:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$248:	; IntegralToIntegral £temporary1930 c
x6495:	mov al, [bp + 30]	; 3: 138 70 30
x6498:	and ax, 255	; 3: 37 255 0
x6501:	cmp al, 0	; 2: 60 0
x6503:	jge printArgument$249	; 2: 125 4
x6505:	neg al	; 2: 246 216
x6507:	neg ax	; 2: 247 216

printArgument$249:	; Parameter 44 £temporary1930 28
x6509:	mov [bp + 72], ax	; 3: 137 70 72

printArgument$250:	; Call 44 isupper 22
x6512:	mov word [bp + 66], printArgument$251	; 5: 199 70 66 126 25
x6517:	mov [bp + 68], bp	; 3: 137 110 68
x6520:	add bp, 66	; 3: 131 197 66
x6523:	jmp isupper	; 3: 233 143 4

printArgument$251:	; PostCall 44

printArgument$252:	; GetReturnValue £temporary1931

printArgument$253:	; Parameter 44 £temporary1931 22
x6526:	mov [bp + 66], bx	; 3: 137 94 66

printArgument$254:	; Call 44 printLongDoubleExpo 0
x6529:	mov word [bp + 44], printArgument$255	; 5: 199 70 44 143 25
x6534:	mov [bp + 46], bp	; 3: 137 110 46
x6537:	add bp, 44	; 3: 131 197 44
x6540:	jmp printLongDoubleExpo	; 3: 233 49 12

printArgument$255:	; PostCall 44

printArgument$256:	; Goto 360
x6543:	jmp printArgument$360	; 3: 233 173 1

printArgument$257:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$258:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$259:	; PushFloat longDoubleValue
x6546:	fld qword [bp + 34]	; 3: 221 70 34

printArgument$260:	; Parameter 44 longDoubleValue 6
x6549:	fstp qword [bp + 50]	; 3: 221 94 50

printArgument$261:	; Call 44 fabs 0
x6552:	mov word [bp + 44], printArgument$262	; 5: 199 70 44 166 25
x6557:	mov [bp + 46], bp	; 3: 137 110 46
x6560:	add bp, 44	; 3: 131 197 44
x6563:	jmp fabs	; 3: 233 87 11

printArgument$262:	; PostCall 44

printArgument$263:	; GetReturnValue £temporary1933

printArgument$264:	; Parameter 44 £temporary1933 6
x6566:	fstp qword [bp + 50]	; 3: 221 94 50

printArgument$265:	; Call 44 log10 0
x6569:	mov word [bp + 44], printArgument$266	; 5: 199 70 44 183 25
x6574:	mov [bp + 46], bp	; 3: 137 110 46
x6577:	add bp, 44	; 3: 131 197 44
x6580:	jmp log10	; 3: 233 120 13

printArgument$266:	; PostCall 44

printArgument$267:	; GetReturnValue £temporary1934

printArgument$268:	; FloatingToIntegral £temporary1935 £temporary1934
x6583:	fistp word [container2bytes#]	; 4: 223 30 77 27
x6587:	mov ax, [container2bytes#]	; 3: 161 77 27

printArgument$269:	; Assign expo £temporary1935
x6590:	mov [bp + 44], ax	; 3: 137 70 44

printArgument$270:	; SignedLessThan 282 expo -3
x6593:	cmp word [bp + 44], -3	; 4: 131 126 44 253
x6597:	jl printArgument$282	; 2: 124 53

printArgument$271:	; SignedGreaterThan 282 expo 2
x6599:	cmp word [bp + 44], 2	; 4: 131 126 44 2
x6603:	jg printArgument$282	; 2: 127 47

printArgument$272:	; CallHeader 46 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$273:	; PushFloat longDoubleValue
x6605:	fld qword [bp + 34]	; 3: 221 70 34

printArgument$274:	; Parameter 46 longDoubleValue 6
x6608:	fstp qword [bp + 52]	; 3: 221 94 52

printArgument$275:	; Parameter 46 plus 14
x6611:	mov ax, [bp + 10]	; 3: 139 70 10
x6614:	mov [bp + 60], ax	; 3: 137 70 60

printArgument$276:	; Parameter 46 space 16
x6617:	mov ax, [bp + 12]	; 3: 139 70 12
x6620:	mov [bp + 62], ax	; 3: 137 70 62

printArgument$277:	; Parameter 46 grid 18
x6623:	mov ax, [bp + 14]	; 3: 139 70 14
x6626:	mov [bp + 64], ax	; 3: 137 70 64

printArgument$278:	; Parameter 46 precision 20
x6629:	mov ax, [bp + 18]	; 3: 139 70 18
x6632:	mov [bp + 66], ax	; 3: 137 70 66

printArgument$279:	; Call 46 printLongDoublePlain 0
x6635:	mov word [bp + 46], printArgument$280	; 5: 199 70 46 249 25
x6640:	mov [bp + 48], bp	; 3: 137 110 48
x6643:	add bp, 46	; 3: 131 197 46
x6646:	jmp printLongDoublePlain	; 3: 233 192 9

printArgument$280:	; PostCall 46

printArgument$281:	; Goto 360
x6649:	jmp printArgument$360	; 3: 233 67 1

printArgument$282:	; CallHeader 46 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$283:	; PushFloat longDoubleValue
x6652:	fld qword [bp + 34]	; 3: 221 70 34

printArgument$284:	; Parameter 46 longDoubleValue 6
x6655:	fstp qword [bp + 52]	; 3: 221 94 52

printArgument$285:	; Parameter 46 plus 14
x6658:	mov ax, [bp + 10]	; 3: 139 70 10
x6661:	mov [bp + 60], ax	; 3: 137 70 60

printArgument$286:	; Parameter 46 space 16
x6664:	mov ax, [bp + 12]	; 3: 139 70 12
x6667:	mov [bp + 62], ax	; 3: 137 70 62

printArgument$287:	; Parameter 46 grid 18
x6670:	mov ax, [bp + 14]	; 3: 139 70 14
x6673:	mov [bp + 64], ax	; 3: 137 70 64

printArgument$288:	; Parameter 46 precision 20
x6676:	mov ax, [bp + 18]	; 3: 139 70 18
x6679:	mov [bp + 66], ax	; 3: 137 70 66

printArgument$289:	; CallHeader 46 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$290:	; IntegralToIntegral £temporary1940 c
x6682:	mov al, [bp + 30]	; 3: 138 70 30
x6685:	and ax, 255	; 3: 37 255 0
x6688:	cmp al, 0	; 2: 60 0
x6690:	jge printArgument$291	; 2: 125 4
x6692:	neg al	; 2: 246 216
x6694:	neg ax	; 2: 247 216

printArgument$291:	; Parameter 46 £temporary1940 28
x6696:	mov [bp + 74], ax	; 3: 137 70 74

printArgument$292:	; Call 46 isupper 22
x6699:	mov word [bp + 68], printArgument$293	; 5: 199 70 68 57 26
x6704:	mov [bp + 70], bp	; 3: 137 110 70
x6707:	add bp, 68	; 3: 131 197 68
x6710:	jmp isupper	; 3: 233 212 3

printArgument$293:	; PostCall 46

printArgument$294:	; GetReturnValue £temporary1941

printArgument$295:	; Parameter 46 £temporary1941 22
x6713:	mov [bp + 68], bx	; 3: 137 94 68

printArgument$296:	; Call 46 printLongDoubleExpo 0
x6716:	mov word [bp + 46], printArgument$297	; 5: 199 70 46 74 26
x6721:	mov [bp + 48], bp	; 3: 137 110 48
x6724:	add bp, 46	; 3: 131 197 46
x6727:	jmp printLongDoubleExpo	; 3: 233 118 11

printArgument$297:	; PostCall 46

printArgument$298:	; Goto 360
x6730:	jmp printArgument$360	; 3: 233 242 0

printArgument$299:	; BinaryAdd arg_list arg_list 2
x6733:	add word [bp + 8], 2	; 4: 131 70 8 2

printArgument$300:	; BinarySubtract £temporary1944 arg_list 2
x6737:	mov si, [bp + 8]	; 3: 139 118 8
x6740:	sub si, 2	; 3: 131 238 2

printArgument$301:	; IntegralToIntegral £temporary1945 £temporary1944

printArgument$302:	; Deref £temporary1946 -> £temporary1945 £temporary1945 0

printArgument$303:	; Assign ptrValue £temporary1946 -> £temporary1945
x6743:	mov ax, [si]	; 2: 139 4
x6745:	mov [bp + 42], ax	; 3: 137 70 42

printArgument$304:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$305:	; Parameter 44 arg_list 6
x6748:	mov ax, [bp + 8]	; 3: 139 70 8
x6751:	mov [bp + 50], ax	; 3: 137 70 50

printArgument$306:	; Parameter 44 widthPtr 8
x6754:	mov ax, [bp + 16]	; 3: 139 70 16
x6757:	mov [bp + 52], ax	; 3: 137 70 52

printArgument$307:	; address £temporary1947 precision
x6760:	mov si, bp	; 2: 137 238
x6762:	add si, 18	; 3: 131 198 18

printArgument$308:	; Parameter 44 £temporary1947 10
x6765:	mov [bp + 54], si	; 3: 137 118 54

printArgument$309:	; Call 44 checkWidthAndPrecision 0
x6768:	mov word [bp + 44], printArgument$310	; 5: 199 70 44 126 26
x6773:	mov [bp + 46], bp	; 3: 137 110 46
x6776:	add bp, 44	; 3: 131 197 44
x6779:	jmp checkWidthAndPrecision	; 3: 233 240 0

printArgument$310:	; PostCall 44

printArgument$311:	; GetReturnValue £temporary1948

printArgument$312:	; Assign arg_list £temporary1948
x6782:	mov [bp + 8], bx	; 3: 137 94 8

printArgument$313:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$314:	; IntegralToIntegral £temporary1949 ptrValue
x6785:	mov ax, [bp + 42]	; 3: 139 70 42

printArgument$315:	; IntegralToIntegral £temporary1950 £temporary1949
x6788:	and eax, 65535	; 6: 102 37 255 255 0 0

printArgument$316:	; Parameter 44 £temporary1950 6
x6794:	mov [bp + 50], eax	; 4: 102 137 70 50

printArgument$317:	; Parameter 44 0 10
x6798:	mov word [bp + 54], 0	; 5: 199 70 54 0 0

printArgument$318:	; Parameter 44 0 12
x6803:	mov word [bp + 56], 0	; 5: 199 70 56 0 0

printArgument$319:	; Parameter 44 0 14
x6808:	mov word [bp + 58], 0	; 5: 199 70 58 0 0

printArgument$320:	; Parameter 44 10 16
x6813:	mov dword [bp + 60], 10	; 8: 102 199 70 60 10 0 0 0

printArgument$321:	; Parameter 44 0 20
x6821:	mov word [bp + 64], 0	; 5: 199 70 64 0 0

printArgument$322:	; Call 44 printUnsignedLong 0
x6826:	mov word [bp + 44], printArgument$323	; 5: 199 70 44 184 26
x6831:	mov [bp + 46], bp	; 3: 137 110 46
x6834:	add bp, 44	; 3: 131 197 44
x6837:	jmp printUnsignedLong	; 3: 233 86 7

printArgument$323:	; PostCall 44

printArgument$324:	; Goto 360
x6840:	jmp printArgument$360	; 3: 233 132 0

printArgument$325:	; BinaryAdd arg_list arg_list 2
x6843:	add word [bp + 8], 2	; 4: 131 70 8 2

printArgument$326:	; BinarySubtract £temporary1953 arg_list 2
x6847:	mov si, [bp + 8]	; 3: 139 118 8
x6850:	sub si, 2	; 3: 131 238 2

printArgument$327:	; IntegralToIntegral £temporary1954 £temporary1953

printArgument$328:	; Deref £temporary1955 -> £temporary1954 £temporary1954 0

printArgument$329:	; Assign ptrValue £temporary1955 -> £temporary1954
x6853:	mov ax, [si]	; 2: 139 4
x6855:	mov [bp + 42], ax	; 3: 137 70 42

printArgument$330:	; BinaryAdd arg_list arg_list 2
x6858:	add word [bp + 8], 2	; 4: 131 70 8 2

printArgument$331:	; BinarySubtract £temporary1957 arg_list 2
x6862:	mov si, [bp + 8]	; 3: 139 118 8
x6865:	sub si, 2	; 3: 131 238 2

printArgument$332:	; IntegralToIntegral £temporary1958 £temporary1957

printArgument$333:	; Deref £temporary1959 -> £temporary1958 £temporary1958 0

printArgument$334:	; Assign intPtr £temporary1959 -> £temporary1958
x6868:	mov ax, [si]	; 2: 139 4
x6870:	mov [bp + 32], ax	; 3: 137 70 32

printArgument$335:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$336:	; Parameter 44 arg_list 6
x6873:	mov ax, [bp + 8]	; 3: 139 70 8
x6876:	mov [bp + 50], ax	; 3: 137 70 50

printArgument$337:	; Parameter 44 widthPtr 8
x6879:	mov ax, [bp + 16]	; 3: 139 70 16
x6882:	mov [bp + 52], ax	; 3: 137 70 52

printArgument$338:	; address £temporary1960 precision
x6885:	mov si, bp	; 2: 137 238
x6887:	add si, 18	; 3: 131 198 18

printArgument$339:	; Parameter 44 £temporary1960 10
x6890:	mov [bp + 54], si	; 3: 137 118 54

printArgument$340:	; Call 44 checkWidthAndPrecision 0
x6893:	mov word [bp + 44], printArgument$341	; 5: 199 70 44 251 26
x6898:	mov [bp + 46], bp	; 3: 137 110 46
x6901:	add bp, 44	; 3: 131 197 44
x6904:	nop	; 1: 144
x6905:	jmp checkWidthAndPrecision	; 2: 235 115

printArgument$341:	; PostCall 44

printArgument$342:	; GetReturnValue £temporary1961

printArgument$343:	; Assign arg_list £temporary1961
x6907:	mov [bp + 8], bx	; 3: 137 94 8

printArgument$344:	; Deref £temporary1962 -> intPtr intPtr 0
x6910:	mov si, [bp + 32]	; 3: 139 118 32

printArgument$345:	; Assign £temporary1962 -> intPtr g_outChars
x6913:	mov ax, [g_outChars]	; 3: 161 55 21
x6916:	mov [si], ax	; 2: 137 4

printArgument$346:	; Goto 360
x6918:	jmp printArgument$360	; 2: 235 55

printArgument$347:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$348:	; Parameter 44 arg_list 6
x6920:	mov ax, [bp + 8]	; 3: 139 70 8
x6923:	mov [bp + 50], ax	; 3: 137 70 50

printArgument$349:	; Parameter 44 widthPtr 8
x6926:	mov ax, [bp + 16]	; 3: 139 70 16
x6929:	mov [bp + 52], ax	; 3: 137 70 52

printArgument$350:	; address £temporary1963 precision
x6932:	mov si, bp	; 2: 137 238
x6934:	add si, 18	; 3: 131 198 18

printArgument$351:	; Parameter 44 £temporary1963 10
x6937:	mov [bp + 54], si	; 3: 137 118 54

printArgument$352:	; Call 44 checkWidthAndPrecision 0
x6940:	mov word [bp + 44], printArgument$353	; 5: 199 70 44 42 27
x6945:	mov [bp + 46], bp	; 3: 137 110 46
x6948:	add bp, 44	; 3: 131 197 44
x6951:	nop	; 1: 144
x6952:	jmp checkWidthAndPrecision	; 2: 235 68

printArgument$353:	; PostCall 44

printArgument$354:	; GetReturnValue £temporary1964

printArgument$355:	; Assign arg_list £temporary1964
x6954:	mov [bp + 8], bx	; 3: 137 94 8

printArgument$356:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$357:	; Parameter 44 37 6
x6957:	mov byte [bp + 50], 37	; 4: 198 70 50 37

printArgument$358:	; Call 44 printChar 0
x6961:	mov word [bp + 44], printArgument$359	; 5: 199 70 44 63 27
x6966:	mov [bp + 46], bp	; 3: 137 110 46
x6969:	add bp, 44	; 3: 131 197 44
x6972:	jmp printChar	; 3: 233 15 1

printArgument$359:	; PostCall 44

printArgument$360:	; SetReturnValue arg_list
x6975:	mov bx, [bp + 8]	; 3: 139 94 8

printArgument$361:	; Return arg_list
x6978:	mov ax, [bp]	; 3: 139 70 0
x6981:	mov di, [bp + 4]	; 3: 139 126 4
x6984:	mov bp, [bp + 2]	; 3: 139 110 2
x6987:	jmp ax	; 2: 255 224

printArgument$362:	; FunctionEnd printArgument

container2bytes#:
x6989:	db 0, 0	; 2: 0 0

labs:	; SignedGreaterThanEqual 4 value 0
x6991:	cmp dword [bp + 6], 0	; 5: 102 131 126 6 0
x6996:	jge labs$4	; 2: 125 9

labs$1:	; UnarySubtract £temporary3215 value
x6998:	mov ebx, [bp + 6]	; 4: 102 139 94 6
x7002:	neg ebx	; 3: 102 247 219

labs$2:	; Assign £temporary3219 £temporary3215

labs$3:	; Goto 5
x7005:	jmp labs$5	; 2: 235 4

labs$4:	; Assign £temporary3219 value
x7007:	mov ebx, [bp + 6]	; 4: 102 139 94 6

labs$5:	; SetReturnValue £temporary3219

labs$6:	; Return £temporary3219
x7011:	mov ax, [bp]	; 3: 139 70 0
x7014:	mov di, [bp + 4]	; 3: 139 126 4
x7017:	mov bp, [bp + 2]	; 3: 139 110 2
x7020:	jmp ax	; 2: 255 224

labs$7:	; FunctionEnd labs

checkWidthAndPrecision:	; Equal 9 widthPtr 0
x7022:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x7026:	je checkWidthAndPrecision$9	; 2: 116 25

checkWidthAndPrecision$1:	; Deref £temporary1808 -> widthPtr widthPtr 0
x7028:	mov si, [bp + 8]	; 3: 139 118 8

checkWidthAndPrecision$2:	; NotEqual 9 £temporary1808 -> widthPtr -1
x7031:	cmp word [si], -1	; 3: 131 60 255
x7034:	jne checkWidthAndPrecision$9	; 2: 117 17

checkWidthAndPrecision$3:	; Deref £temporary1811 -> widthPtr widthPtr 0
x7036:	mov si, [bp + 8]	; 3: 139 118 8

checkWidthAndPrecision$4:	; BinaryAdd arg_list arg_list 2
x7039:	add word [bp + 6], 2	; 4: 131 70 6 2

checkWidthAndPrecision$5:	; BinarySubtract £temporary1813 arg_list 2
x7043:	mov di, [bp + 6]	; 3: 139 126 6
x7046:	sub di, 2	; 3: 131 239 2

checkWidthAndPrecision$6:	; IntegralToIntegral £temporary1814 £temporary1813

checkWidthAndPrecision$7:	; Deref £temporary1815 -> £temporary1814 £temporary1814 0

checkWidthAndPrecision$8:	; Assign £temporary1811 -> widthPtr £temporary1815 -> £temporary1814
x7049:	mov ax, [di]	; 2: 139 5
x7051:	mov [si], ax	; 2: 137 4

checkWidthAndPrecision$9:	; Equal 18 precisionPtr 0
x7053:	cmp word [bp + 10], 0	; 4: 131 126 10 0
x7057:	je checkWidthAndPrecision$18	; 2: 116 25

checkWidthAndPrecision$10:	; Deref £temporary1817 -> precisionPtr precisionPtr 0
x7059:	mov si, [bp + 10]	; 3: 139 118 10

checkWidthAndPrecision$11:	; NotEqual 18 £temporary1817 -> precisionPtr -1
x7062:	cmp word [si], -1	; 3: 131 60 255
x7065:	jne checkWidthAndPrecision$18	; 2: 117 17

checkWidthAndPrecision$12:	; Deref £temporary1820 -> precisionPtr precisionPtr 0
x7067:	mov si, [bp + 10]	; 3: 139 118 10

checkWidthAndPrecision$13:	; BinaryAdd arg_list arg_list 2
x7070:	add word [bp + 6], 2	; 4: 131 70 6 2

checkWidthAndPrecision$14:	; BinarySubtract £temporary1822 arg_list 2
x7074:	mov di, [bp + 6]	; 3: 139 126 6
x7077:	sub di, 2	; 3: 131 239 2

checkWidthAndPrecision$15:	; IntegralToIntegral £temporary1823 £temporary1822

checkWidthAndPrecision$16:	; Deref £temporary1824 -> £temporary1823 £temporary1823 0

checkWidthAndPrecision$17:	; Assign £temporary1820 -> precisionPtr £temporary1824 -> £temporary1823
x7080:	mov ax, [di]	; 2: 139 5
x7082:	mov [si], ax	; 2: 137 4

checkWidthAndPrecision$18:	; SetReturnValue arg_list
x7084:	mov bx, [bp + 6]	; 3: 139 94 6

checkWidthAndPrecision$19:	; Return arg_list
x7087:	mov ax, [bp]	; 3: 139 70 0
x7090:	mov di, [bp + 4]	; 3: 139 126 4
x7093:	mov bp, [bp + 2]	; 3: 139 110 2
x7096:	jmp ax	; 2: 255 224

checkWidthAndPrecision$20:	; FunctionEnd checkWidthAndPrecision

printLongInt:	; SignedGreaterThanEqual 8 longValue 0
x7098:	cmp dword [bp + 6], 0	; 5: 102 131 126 6 0
x7103:	jge printLongInt$8	; 2: 125 31

printLongInt$1:	; UnarySubtract £temporary1662 longValue
x7105:	mov eax, [bp + 6]	; 4: 102 139 70 6
x7109:	neg eax	; 3: 102 247 216

printLongInt$2:	; Assign longValue £temporary1662
x7112:	mov [bp + 6], eax	; 4: 102 137 70 6

printLongInt$3:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongInt$4:	; Parameter 14 45 6
x7116:	mov byte [bp + 20], 45	; 4: 198 70 20 45

printLongInt$5:	; Call 14 printChar 0
x7120:	mov word [bp + 14], printLongInt$6	; 5: 199 70 14 222 27
x7125:	mov [bp + 16], bp	; 3: 137 110 16
x7128:	add bp, 14	; 3: 131 197 14
x7131:	nop	; 1: 144
x7132:	jmp printChar	; 2: 235 112

printLongInt$6:	; PostCall 14

printLongInt$7:	; Goto 19
x7134:	jmp printLongInt$19	; 2: 235 50

printLongInt$8:	; Equal 14 space 0
x7136:	cmp word [bp + 12], 0	; 4: 131 126 12 0
x7140:	je printLongInt$14	; 2: 116 20

printLongInt$9:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongInt$10:	; Parameter 14 32 6
x7142:	mov byte [bp + 20], 32	; 4: 198 70 20 32

printLongInt$11:	; Call 14 printChar 0
x7146:	mov word [bp + 14], printLongInt$12	; 5: 199 70 14 248 27
x7151:	mov [bp + 16], bp	; 3: 137 110 16
x7154:	add bp, 14	; 3: 131 197 14
x7157:	nop	; 1: 144
x7158:	jmp printChar	; 2: 235 86

printLongInt$12:	; PostCall 14

printLongInt$13:	; Goto 19
x7160:	jmp printLongInt$19	; 2: 235 24

printLongInt$14:	; Equal 19 plus 0
x7162:	cmp word [bp + 10], 0	; 4: 131 126 10 0
x7166:	je printLongInt$19	; 2: 116 18

printLongInt$15:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongInt$16:	; Parameter 14 43 6
x7168:	mov byte [bp + 20], 43	; 4: 198 70 20 43

printLongInt$17:	; Call 14 printChar 0
x7172:	mov word [bp + 14], printLongInt$18	; 5: 199 70 14 18 28
x7177:	mov [bp + 16], bp	; 3: 137 110 16
x7180:	add bp, 14	; 3: 131 197 14
x7183:	nop	; 1: 144
x7184:	jmp printChar	; 2: 235 60

printLongInt$18:	; PostCall 14

printLongInt$19:	; NotEqual 25 longValue 0
x7186:	cmp dword [bp + 6], 0	; 5: 102 131 126 6 0
x7191:	jne printLongInt$25	; 2: 117 20

printLongInt$20:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongInt$21:	; Parameter 14 48 6
x7193:	mov byte [bp + 20], 48	; 4: 198 70 20 48

printLongInt$22:	; Call 14 printChar 0
x7197:	mov word [bp + 14], printLongInt$23	; 5: 199 70 14 43 28
x7202:	mov [bp + 16], bp	; 3: 137 110 16
x7205:	add bp, 14	; 3: 131 197 14
x7208:	nop	; 1: 144
x7209:	jmp printChar	; 2: 235 35

printLongInt$23:	; PostCall 14

printLongInt$24:	; Goto 29
x7211:	jmp printLongInt$29	; 2: 235 22

printLongInt$25:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongInt$26:	; Parameter 14 longValue 6
x7213:	mov eax, [bp + 6]	; 4: 102 139 70 6
x7217:	mov [bp + 20], eax	; 4: 102 137 70 20

printLongInt$27:	; Call 14 printLongIntRec 0
x7221:	mov word [bp + 14], printLongInt$28	; 5: 199 70 14 67 28
x7226:	mov [bp + 16], bp	; 3: 137 110 16
x7229:	add bp, 14	; 3: 131 197 14
x7232:	nop	; 1: 144
x7233:	jmp printLongIntRec	; 2: 235 104

printLongInt$28:	; PostCall 14

printLongInt$29:	; Return 0
x7235:	mov ax, [bp]	; 3: 139 70 0
x7238:	mov di, [bp + 4]	; 3: 139 126 4
x7241:	mov bp, [bp + 2]	; 3: 139 110 2
x7244:	jmp ax	; 2: 255 224

printLongInt$30:	; FunctionEnd printLongInt

printChar:	; Case 5 g_outStatus 0
x7246:	mov ax, [g_outStatus]	; 3: 161 219 15
x7249:	cmp ax, 0	; 3: 131 248 0
x7252:	je printChar$5	; 2: 116 12

printChar$1:	; Case 16 g_outStatus 1
x7254:	cmp ax, 1	; 3: 131 248 1
x7257:	je printChar$16	; 2: 116 37

printChar$2:	; Case 24 g_outStatus 2
x7259:	cmp ax, 2	; 3: 131 248 2
x7262:	je printChar$24	; 2: 116 57

printChar$3:	; CaseEnd g_outStatus

printChar$4:	; Goto 26
x7264:	jmp printChar$26	; 2: 235 62

printChar$5:	; IntegralToIntegral £temporary1601 g_outDevice
x7266:	mov ax, [g_outDevice]	; 3: 161 221 15

printChar$6:	; Assign stream £temporary1601
x7269:	mov [bp + 11], ax	; 3: 137 70 11

printChar$7:	; AssignRegister ah 64
x7272:	mov ah, 64	; 2: 180 64

printChar$8:	; Deref £temporary1604 -> stream stream 2
x7274:	mov si, [bp + 11]	; 3: 139 118 11

printChar$9:	; AssignRegister bx £temporary1604 -> stream
x7277:	mov bx, [si + 2]	; 3: 139 92 2

printChar$10:	; AssignRegister cx 1
x7280:	mov cx, 1	; 3: 185 1 0

printChar$11:	; address £temporary1607 c
x7283:	mov dx, bp	; 2: 137 234
x7285:	add dx, 6	; 3: 131 194 6

printChar$12:	; AssignRegister dx £temporary1607

printChar$13:	; Interrupt 33
x7288:	int 33	; 2: 205 33

printChar$14:	; Increment g_outChars
x7290:	inc word [g_outChars]	; 4: 255 6 55 21

printChar$15:	; Goto 26
x7294:	jmp printChar$26	; 2: 235 32

printChar$16:	; IntegralToIntegral £temporary1609 g_outDevice
x7296:	mov ax, [g_outDevice]	; 3: 161 221 15

printChar$17:	; Assign outString £temporary1609
x7299:	mov [bp + 9], ax	; 3: 137 70 9

printChar$18:	; Assign £temporary1610 g_outChars
x7302:	mov ax, [g_outChars]	; 3: 161 55 21

printChar$19:	; Increment g_outChars
x7305:	inc word [g_outChars]	; 4: 255 6 55 21

printChar$20:	; BinaryAdd £temporary1613 outString £temporary1610
x7309:	mov si, [bp + 9]	; 3: 139 118 9
x7312:	add si, ax	; 2: 1 198

printChar$21:	; Deref £temporary1612 -> £temporary1613 £temporary1613 0

printChar$22:	; Assign £temporary1612 -> £temporary1613 c
x7314:	mov al, [bp + 6]	; 3: 138 70 6
x7317:	mov [si], al	; 2: 136 4

printChar$23:	; Goto 26
x7319:	jmp printChar$26	; 2: 235 7

printChar$24:	; Assign £temporary1614 g_outChars
x7321:	mov ax, [g_outChars]	; 3: 161 55 21

printChar$25:	; Increment g_outChars
x7324:	inc word [g_outChars]	; 4: 255 6 55 21

printChar$26:	; Return 0
x7328:	mov ax, [bp]	; 3: 139 70 0
x7331:	mov di, [bp + 4]	; 3: 139 126 4
x7334:	mov bp, [bp + 2]	; 3: 139 110 2
x7337:	jmp ax	; 2: 255 224

printChar$27:	; FunctionEnd printChar

printLongIntRec:	; Equal 15 longValue 0
x7339:	cmp dword [bp + 6], 0	; 5: 102 131 126 6 0
x7344:	je printLongIntRec$15	; 2: 116 88

printLongIntRec$1:	; SignedModulo £temporary1652 longValue 10
x7346:	mov eax, [bp + 6]	; 4: 102 139 70 6
x7350:	xor edx, edx	; 3: 102 49 210
x7353:	idiv dword [@3780$int4$10#]	; 5: 102 247 62 21 29

printLongIntRec$2:	; IntegralToIntegral £temporary1653 £temporary1652
x7358:	cmp edx, 0	; 4: 102 131 250 0
x7362:	jge printLongIntRec$3	; 2: 125 5
x7364:	neg edx	; 3: 102 247 218
x7367:	neg dx	; 2: 247 218

printLongIntRec$3:	; Assign digit £temporary1653
x7369:	mov [bp + 10], dx	; 3: 137 86 10

printLongIntRec$4:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongIntRec$5:	; SignedDivide £temporary1654 longValue 10
x7372:	mov eax, [bp + 6]	; 4: 102 139 70 6
x7376:	xor edx, edx	; 3: 102 49 210
x7379:	idiv dword [@3785$int4$10#]	; 5: 102 247 62 25 29

printLongIntRec$6:	; Parameter 12 £temporary1654 6
x7384:	mov [bp + 18], eax	; 4: 102 137 70 18

printLongIntRec$7:	; Call 12 printLongIntRec 0
x7388:	mov word [bp + 12], printLongIntRec$8	; 5: 199 70 12 234 28
x7393:	mov [bp + 14], bp	; 3: 137 110 14
x7396:	add bp, 12	; 3: 131 197 12
x7399:	nop	; 1: 144
x7400:	jmp printLongIntRec	; 2: 235 193

printLongIntRec$8:	; PostCall 12

printLongIntRec$9:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongIntRec$10:	; BinaryAdd £temporary1656 digit 48
x7402:	mov ax, [bp + 10]	; 3: 139 70 10
x7405:	add ax, 48	; 3: 131 192 48

printLongIntRec$11:	; IntegralToIntegral £temporary1657 £temporary1656
x7408:	cmp ax, 0	; 3: 131 248 0
x7411:	jge printLongIntRec$12	; 2: 125 4
x7413:	neg ax	; 2: 247 216
x7415:	neg al	; 2: 246 216

printLongIntRec$12:	; Parameter 12 £temporary1657 6
x7417:	mov [bp + 18], al	; 3: 136 70 18

printLongIntRec$13:	; Call 12 printChar 0
x7420:	mov word [bp + 12], printLongIntRec$14	; 5: 199 70 12 10 29
x7425:	mov [bp + 14], bp	; 3: 137 110 14
x7428:	add bp, 12	; 3: 131 197 12
x7431:	jmp printChar	; 3: 233 68 255

printLongIntRec$14:	; PostCall 12

printLongIntRec$15:	; Return 0
x7434:	mov ax, [bp]	; 3: 139 70 0
x7437:	mov di, [bp + 4]	; 3: 139 126 4
x7440:	mov bp, [bp + 2]	; 3: 139 110 2
x7443:	jmp ax	; 2: 255 224

printLongIntRec$16:	; FunctionEnd printLongIntRec

@3780$int4$10#:
x7445:	dd 10	; 4: 10 0 0 0

@3785$int4$10#:
x7449:	dd 10	; 4: 10 0 0 0

printString:	; Equal 29 s 0
x7453:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x7457:	je printString$29	; 2: 116 115

printString$1:	; NotEqual 14 precision 0
x7459:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x7463:	jne printString$14	; 2: 117 48

printString$2:	; Assign index 0
x7465:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

printString$3:	; BinaryAdd £temporary1620 s index
x7470:	mov si, [bp + 6]	; 3: 139 118 6
x7473:	add si, [bp + 10]	; 3: 3 118 10

printString$4:	; Deref £temporary1619 -> £temporary1620 £temporary1620 0

printString$5:	; Equal 53 £temporary1619 -> £temporary1620 0
x7476:	cmp byte [si], 0	; 3: 128 60 0
x7479:	je printString$53	; 4: 15 132 199 0

printString$6:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printString$7:	; BinaryAdd £temporary1624 s index
x7483:	mov si, [bp + 6]	; 3: 139 118 6
x7486:	add si, [bp + 10]	; 3: 3 118 10

printString$8:	; Deref £temporary1623 -> £temporary1624 £temporary1624 0

printString$9:	; Parameter 12 £temporary1623 -> £temporary1624 6
x7489:	mov al, [si]	; 2: 138 4
x7491:	mov [bp + 18], al	; 3: 136 70 18

printString$10:	; Call 12 printChar 0
x7494:	mov word [bp + 12], printString$11	; 5: 199 70 12 84 29
x7499:	mov [bp + 14], bp	; 3: 137 110 14
x7502:	add bp, 12	; 3: 131 197 12
x7505:	jmp printChar	; 3: 233 250 254

printString$11:	; PostCall 12

printString$12:	; Increment index
x7508:	inc word [bp + 10]	; 3: 255 70 10

printString$13:	; Goto 3
x7511:	jmp printString$3	; 2: 235 213

printString$14:	; Assign index 0
x7513:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

printString$15:	; Assign £temporary1626 precision
x7518:	mov ax, [bp + 8]	; 3: 139 70 8

printString$16:	; Decrement precision
x7521:	dec word [bp + 8]	; 3: 255 78 8

printString$17:	; SignedLessThanEqual 53 £temporary1626 0
x7524:	cmp ax, 0	; 3: 131 248 0
x7527:	jle printString$53	; 4: 15 142 151 0

printString$18:	; BinaryAdd £temporary1630 s index
x7531:	mov si, [bp + 6]	; 3: 139 118 6
x7534:	add si, [bp + 10]	; 3: 3 118 10

printString$19:	; Deref £temporary1629 -> £temporary1630 £temporary1630 0

printString$20:	; Equal 53 £temporary1629 -> £temporary1630 0
x7537:	cmp byte [si], 0	; 3: 128 60 0
x7540:	je printString$53	; 4: 15 132 138 0

printString$21:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printString$22:	; BinaryAdd £temporary1635 s index
x7544:	mov si, [bp + 6]	; 3: 139 118 6
x7547:	add si, [bp + 10]	; 3: 3 118 10

printString$23:	; Deref £temporary1634 -> £temporary1635 £temporary1635 0

printString$24:	; Parameter 12 £temporary1634 -> £temporary1635 6
x7550:	mov al, [si]	; 2: 138 4
x7552:	mov [bp + 18], al	; 3: 136 70 18

printString$25:	; Call 12 printChar 0
x7555:	mov word [bp + 12], printString$26	; 5: 199 70 12 145 29
x7560:	mov [bp + 14], bp	; 3: 137 110 14
x7563:	add bp, 12	; 3: 131 197 12
x7566:	jmp printChar	; 3: 233 189 254

printString$26:	; PostCall 12

printString$27:	; Increment index
x7569:	inc word [bp + 10]	; 3: 255 70 10

printString$28:	; Goto 15
x7572:	jmp printString$15	; 2: 235 200

printString$29:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printString$30:	; Parameter 10 60 6
x7574:	mov byte [bp + 16], 60	; 4: 198 70 16 60

printString$31:	; Call 10 printChar 0
x7578:	mov word [bp + 10], printString$32	; 5: 199 70 10 168 29
x7583:	mov [bp + 12], bp	; 3: 137 110 12
x7586:	add bp, 10	; 3: 131 197 10
x7589:	jmp printChar	; 3: 233 166 254

printString$32:	; PostCall 10

printString$33:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printString$34:	; Parameter 10 78 6
x7592:	mov byte [bp + 16], 78	; 4: 198 70 16 78

printString$35:	; Call 10 printChar 0
x7596:	mov word [bp + 10], printString$36	; 5: 199 70 10 186 29
x7601:	mov [bp + 12], bp	; 3: 137 110 12
x7604:	add bp, 10	; 3: 131 197 10
x7607:	jmp printChar	; 3: 233 148 254

printString$36:	; PostCall 10

printString$37:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printString$38:	; Parameter 10 85 6
x7610:	mov byte [bp + 16], 85	; 4: 198 70 16 85

printString$39:	; Call 10 printChar 0
x7614:	mov word [bp + 10], printString$40	; 5: 199 70 10 204 29
x7619:	mov [bp + 12], bp	; 3: 137 110 12
x7622:	add bp, 10	; 3: 131 197 10
x7625:	jmp printChar	; 3: 233 130 254

printString$40:	; PostCall 10

printString$41:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printString$42:	; Parameter 10 76 6
x7628:	mov byte [bp + 16], 76	; 4: 198 70 16 76

printString$43:	; Call 10 printChar 0
x7632:	mov word [bp + 10], printString$44	; 5: 199 70 10 222 29
x7637:	mov [bp + 12], bp	; 3: 137 110 12
x7640:	add bp, 10	; 3: 131 197 10
x7643:	jmp printChar	; 3: 233 112 254

printString$44:	; PostCall 10

printString$45:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printString$46:	; Parameter 10 76 6
x7646:	mov byte [bp + 16], 76	; 4: 198 70 16 76

printString$47:	; Call 10 printChar 0
x7650:	mov word [bp + 10], printString$48	; 5: 199 70 10 240 29
x7655:	mov [bp + 12], bp	; 3: 137 110 12
x7658:	add bp, 10	; 3: 131 197 10
x7661:	jmp printChar	; 3: 233 94 254

printString$48:	; PostCall 10

printString$49:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printString$50:	; Parameter 10 62 6
x7664:	mov byte [bp + 16], 62	; 4: 198 70 16 62

printString$51:	; Call 10 printChar 0
x7668:	mov word [bp + 10], printString$52	; 5: 199 70 10 2 30
x7673:	mov [bp + 12], bp	; 3: 137 110 12
x7676:	add bp, 10	; 3: 131 197 10
x7679:	jmp printChar	; 3: 233 76 254

printString$52:	; PostCall 10

printString$53:	; Return 0
x7682:	mov ax, [bp]	; 3: 139 70 0
x7685:	mov di, [bp + 4]	; 3: 139 126 4
x7688:	mov bp, [bp + 2]	; 3: 139 110 2
x7691:	jmp ax	; 2: 255 224

printString$54:	; FunctionEnd printString

isupper:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

isupper$1:	; Call 8 localeconv 0
x7693:	mov word [bp + 8], isupper$2	; 5: 199 70 8 27 30
x7698:	mov [bp + 10], bp	; 3: 137 110 10
x7701:	add bp, 8	; 3: 131 197 8
x7704:	nop	; 1: 144
x7705:	jmp localeconv	; 2: 235 93

isupper$2:	; PostCall 8

isupper$3:	; GetReturnValue £temporary172

isupper$4:	; Assign localeConvPtr £temporary172
x7707:	mov [bp + 8], bx	; 3: 137 94 8

isupper$5:	; Equal 19 localeConvPtr 0
x7710:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x7714:	je isupper$19	; 2: 116 53

isupper$6:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

isupper$7:	; Deref £temporary174 -> localeConvPtr localeConvPtr 14
x7716:	mov si, [bp + 8]	; 3: 139 118 8

isupper$8:	; Parameter 10 £temporary174 -> localeConvPtr 6
x7719:	mov ax, [si + 14]	; 3: 139 68 14
x7722:	mov [bp + 16], ax	; 3: 137 70 16

isupper$9:	; Parameter 10 c 8
x7725:	mov ax, [bp + 6]	; 3: 139 70 6
x7728:	mov [bp + 18], ax	; 3: 137 70 18

isupper$10:	; Call 10 strchr 0
x7731:	mov word [bp + 10], isupper$11	; 5: 199 70 10 65 30
x7736:	mov [bp + 12], bp	; 3: 137 110 12
x7739:	add bp, 10	; 3: 131 197 10
x7742:	jmp strchr	; 3: 233 125 3

isupper$11:	; PostCall 10

isupper$12:	; GetReturnValue £temporary175

isupper$13:	; Equal 16 £temporary175 0
x7745:	cmp bx, 0	; 3: 131 251 0
x7748:	je isupper$16	; 2: 116 5

isupper$14:	; Assign £temporary177 1
x7750:	mov bx, 1	; 3: 187 1 0

isupper$15:	; Goto 17
x7753:	jmp isupper$17	; 2: 235 3

isupper$16:	; Assign £temporary177 0
x7755:	mov bx, 0	; 3: 187 0 0

isupper$17:	; SetReturnValue £temporary177

isupper$18:	; Return £temporary177
x7758:	mov ax, [bp]	; 3: 139 70 0
x7761:	mov di, [bp + 4]	; 3: 139 126 4
x7764:	mov bp, [bp + 2]	; 3: 139 110 2
x7767:	jmp ax	; 2: 255 224

isupper$19:	; SignedLessThan 23 c 65
x7769:	cmp word [bp + 6], 65	; 4: 131 126 6 65
x7773:	jl isupper$23	; 2: 124 11

isupper$20:	; SignedGreaterThan 23 c 90
x7775:	cmp word [bp + 6], 90	; 4: 131 126 6 90
x7779:	jg isupper$23	; 2: 127 5

isupper$21:	; Assign £temporary181 1
x7781:	mov bx, 1	; 3: 187 1 0

isupper$22:	; Goto 24
x7784:	jmp isupper$24	; 2: 235 3

isupper$23:	; Assign £temporary181 0
x7786:	mov bx, 0	; 3: 187 0 0

isupper$24:	; SetReturnValue £temporary181

isupper$25:	; Return £temporary181
x7789:	mov ax, [bp]	; 3: 139 70 0
x7792:	mov di, [bp + 4]	; 3: 139 126 4
x7795:	mov bp, [bp + 2]	; 3: 139 110 2
x7798:	jmp ax	; 2: 255 224

isupper$26:	; FunctionEnd isupper

localeconv:	; Equal 4 g_currStructPtr 0
x7800:	cmp word [@771$g_currStructPtr], 0	; 5: 131 62 150 30 0
x7805:	je localeconv$4	; 2: 116 9

localeconv$1:	; Deref £temporary305 -> g_currStructPtr g_currStructPtr 2
x7807:	mov si, [@771$g_currStructPtr]	; 4: 139 54 150 30

localeconv$2:	; Assign £temporary309 £temporary305 -> g_currStructPtr
x7811:	mov bx, [si + 2]	; 3: 139 92 2

localeconv$3:	; Goto 5
x7814:	jmp localeconv$5	; 2: 235 3

localeconv$4:	; Assign £temporary309 0
x7816:	mov bx, 0	; 3: 187 0 0

localeconv$5:	; SetReturnValue £temporary309

localeconv$6:	; Return £temporary309
x7819:	mov ax, [bp]	; 3: 139 70 0
x7822:	mov di, [bp + 4]	; 3: 139 126 4
x7825:	mov bp, [bp + 2]	; 3: 139 110 2
x7828:	jmp ax	; 2: 255 224

localeconv$7:	; FunctionEnd localeconv

@771$g_currStructPtr:
x7830:	dw @762$g_sArray	; 2: 152 30

@762$g_sArray:
x7832:	dw @756$string_# ; 2: 164 30
x7834:	dw @751$en_US_utf8	; 2: 165 30
x7836:	dw @758$string_C# ; 2: 185 33
x7838:	dw @751$en_US_utf8	; 2: 165 30
x7840:	dw @760$string_US# ; 2: 187 33
x7842:	dw @751$en_US_utf8	; 2: 165 30

@756$string_#:
x7844:	db 0	; 1: 0

@751$en_US_utf8:
x7845:	dw 1	; 2: 1 0
x7847:	dw 1	; 2: 1 0
x7849:	dw @692$enShortDayList ; 2: 183 30
x7851:	dw @700$enLongDayList ; 2: 225 30
x7853:	dw @713$enShortMonthList ; 2: 40 31
x7855:	dw @726$enLongMonthList ; 2: 112 31
x7857:	dw @749$string_abcdefghijklmnopqrstuvwxyz# ; 2: 222 31
x7859:	dw @750$string_ABCDEFGHIJKLMNOPQRSTUVWXYZ# ; 2: 249 31
x7861:	dw enMessageList ; 2: 20 32

@692$enShortDayList:
x7863:	dw @685$string_Sun# ; 2: 197 30
x7865:	dw @686$string_Mon# ; 2: 201 30
x7867:	dw @687$string_Tue# ; 2: 205 30
x7869:	dw @688$string_Wed# ; 2: 209 30
x7871:	dw @689$string_Thu# ; 2: 213 30
x7873:	dw @690$string_Fri# ; 2: 217 30
x7875:	dw @691$string_Sat# ; 2: 221 30

@685$string_Sun#:
x7877:	db "Sun", 0	; 4: 83 117 110 0

@686$string_Mon#:
x7881:	db "Mon", 0	; 4: 77 111 110 0

@687$string_Tue#:
x7885:	db "Tue", 0	; 4: 84 117 101 0

@688$string_Wed#:
x7889:	db "Wed", 0	; 4: 87 101 100 0

@689$string_Thu#:
x7893:	db "Thu", 0	; 4: 84 104 117 0

@690$string_Fri#:
x7897:	db "Fri", 0	; 4: 70 114 105 0

@691$string_Sat#:
x7901:	db "Sat", 0	; 4: 83 97 116 0

@700$enLongDayList:
x7905:	dw @693$string_Sunday# ; 2: 239 30
x7907:	dw @694$string_Monday# ; 2: 246 30
x7909:	dw @695$string_Tuesday# ; 2: 253 30
x7911:	dw @696$string_Wednesday# ; 2: 5 31
x7913:	dw @697$string_Thursday# ; 2: 15 31
x7915:	dw @698$string_Friday# ; 2: 24 31
x7917:	dw @699$string_Saturday# ; 2: 31 31

@693$string_Sunday#:
x7919:	db "Sunday", 0	; 7: 83 117 110 100 97 121 0

@694$string_Monday#:
x7926:	db "Monday", 0	; 7: 77 111 110 100 97 121 0

@695$string_Tuesday#:
x7933:	db "Tuesday", 0	; 8: 84 117 101 115 100 97 121 0

@696$string_Wednesday#:
x7941:	db "Wednesday", 0	; 10: 87 101 100 110 101 115 100 97 121 0

@697$string_Thursday#:
x7951:	db "Thursday", 0	; 9: 84 104 117 114 115 100 97 121 0

@698$string_Friday#:
x7960:	db "Friday", 0	; 7: 70 114 105 100 97 121 0

@699$string_Saturday#:
x7967:	db "Saturday", 0	; 9: 83 97 116 117 114 100 97 121 0

@713$enShortMonthList:
x7976:	dw @701$string_Jan# ; 2: 64 31
x7978:	dw @702$string_Feb# ; 2: 68 31
x7980:	dw @703$string_Mar# ; 2: 72 31
x7982:	dw @704$string_Apr# ; 2: 76 31
x7984:	dw @705$string_May# ; 2: 80 31
x7986:	dw @706$string_Jun# ; 2: 84 31
x7988:	dw @707$string_Jul# ; 2: 88 31
x7990:	dw @708$string_Aug# ; 2: 92 31
x7992:	dw @709$string_Sep# ; 2: 96 31
x7994:	dw @710$string_Oct# ; 2: 100 31
x7996:	dw @711$string_Nov# ; 2: 104 31
x7998:	dw @712$string_Dec# ; 2: 108 31

@701$string_Jan#:
x8000:	db "Jan", 0	; 4: 74 97 110 0

@702$string_Feb#:
x8004:	db "Feb", 0	; 4: 70 101 98 0

@703$string_Mar#:
x8008:	db "Mar", 0	; 4: 77 97 114 0

@704$string_Apr#:
x8012:	db "Apr", 0	; 4: 65 112 114 0

@705$string_May#:
x8016:	db "May", 0	; 4: 77 97 121 0

@706$string_Jun#:
x8020:	db "Jun", 0	; 4: 74 117 110 0

@707$string_Jul#:
x8024:	db "Jul", 0	; 4: 74 117 108 0

@708$string_Aug#:
x8028:	db "Aug", 0	; 4: 65 117 103 0

@709$string_Sep#:
x8032:	db "Sep", 0	; 4: 83 101 112 0

@710$string_Oct#:
x8036:	db "Oct", 0	; 4: 79 99 116 0

@711$string_Nov#:
x8040:	db "Nov", 0	; 4: 78 111 118 0

@712$string_Dec#:
x8044:	db "Dec", 0	; 4: 68 101 99 0

@726$enLongMonthList:
x8048:	dw @714$string_January# ; 2: 136 31
x8050:	dw @715$string_February# ; 2: 144 31
x8052:	dw @716$string_March# ; 2: 153 31
x8054:	dw @717$string_April# ; 2: 159 31
x8056:	dw @718$string_May# ; 2: 165 31
x8058:	dw @719$string_June# ; 2: 169 31
x8060:	dw @720$string_July# ; 2: 174 31
x8062:	dw @721$string_August# ; 2: 179 31
x8064:	dw @722$string_September# ; 2: 186 31
x8066:	dw @723$string_October# ; 2: 196 31
x8068:	dw @724$string_November# ; 2: 204 31
x8070:	dw @725$string_December# ; 2: 213 31

@714$string_January#:
x8072:	db "January", 0	; 8: 74 97 110 117 97 114 121 0

@715$string_February#:
x8080:	db "February", 0	; 9: 70 101 98 114 117 97 114 121 0

@716$string_March#:
x8089:	db "March", 0	; 6: 77 97 114 99 104 0

@717$string_April#:
x8095:	db "April", 0	; 6: 65 112 114 105 108 0

@718$string_May#:
x8101:	db "May", 0	; 4: 77 97 121 0

@719$string_June#:
x8105:	db "June", 0	; 5: 74 117 110 101 0

@720$string_July#:
x8110:	db "July", 0	; 5: 74 117 108 121 0

@721$string_August#:
x8115:	db "August", 0	; 7: 65 117 103 117 115 116 0

@722$string_September#:
x8122:	db "September", 0	; 10: 83 101 112 116 101 109 98 101 114 0

@723$string_October#:
x8132:	db "October", 0	; 8: 79 99 116 111 98 101 114 0

@724$string_November#:
x8140:	db "November", 0	; 9: 78 111 118 101 109 98 101 114 0

@725$string_December#:
x8149:	db "December", 0	; 9: 68 101 99 101 109 98 101 114 0

@749$string_abcdefghijklmnopqrstuvwxyz#:
x8158:	db "abcdefghijklmnopqrstuvwxyz", 0	; 27: 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 0

@750$string_ABCDEFGHIJKLMNOPQRSTUVWXYZ#:
x8185:	db "ABCDEFGHIJKLMNOPQRSTUVWXYZ", 0	; 27: 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 0

enMessageList:
x8212:	dw @727$string_no20error# ; 2: 60 32
x8214:	dw @728$string_function20number20invalid# ; 2: 69 32
x8216:	dw @729$string_file20not20found# ; 2: 93 32
x8218:	dw @730$string_path20not20found# ; 2: 108 32
x8220:	dw @731$string_no20handle20available# ; 2: 123 32
x8222:	dw @732$string_access20denied# ; 2: 143 32
x8224:	dw @733$string_out20of20domain# ; 2: 157 32
x8226:	dw @734$string_out20of20range# ; 2: 171 32
x8228:	dw @735$string_invalid20multibyte20sequence# ; 2: 184 32
x8230:	dw @736$string_error20while20opening# ; 2: 211 32
x8232:	dw @737$string_error20while20flushing# ; 2: 231 32
x8234:	dw @738$string_error20while20closing# ; 2: 252 32
x8236:	dw @739$string_open20mode20invalid# ; 2: 16 33
x8238:	dw @740$string_error20while20writing# ; 2: 34 33
x8240:	dw @741$string_error20while20reading# ; 2: 54 33
x8242:	dw @742$string_error20while20seeking# ; 2: 74 33
x8244:	dw @743$string_error20while20telling# ; 2: 94 33
x8246:	dw @744$string_error20while20sizing# ; 2: 114 33
x8248:	dw @745$string_error20while20removing20file# ; 2: 133 33
x8250:	dw @746$string_error20while20renaming20file# ; 2: 159 33

@727$string_no20error#:
x8252:	db "no error", 0	; 9: 110 111 32 101 114 114 111 114 0

@728$string_function20number20invalid#:
x8261:	db "function number invalid", 0	; 24: 102 117 110 99 116 105 111 110 32 110 117 109 98 101 114 32 105 110 118 97 108 105 100 0

@729$string_file20not20found#:
x8285:	db "file not found", 0	; 15: 102 105 108 101 32 110 111 116 32 102 111 117 110 100 0

@730$string_path20not20found#:
x8300:	db "path not found", 0	; 15: 112 97 116 104 32 110 111 116 32 102 111 117 110 100 0

@731$string_no20handle20available#:
x8315:	db "no handle available", 0	; 20: 110 111 32 104 97 110 100 108 101 32 97 118 97 105 108 97 98 108 101 0

@732$string_access20denied#:
x8335:	db "access denied", 0	; 14: 97 99 99 101 115 115 32 100 101 110 105 101 100 0

@733$string_out20of20domain#:
x8349:	db "out of domain", 0	; 14: 111 117 116 32 111 102 32 100 111 109 97 105 110 0

@734$string_out20of20range#:
x8363:	db "out of range", 0	; 13: 111 117 116 32 111 102 32 114 97 110 103 101 0

@735$string_invalid20multibyte20sequence#:
x8376:	db "invalid multibyte sequence", 0	; 27: 105 110 118 97 108 105 100 32 109 117 108 116 105 98 121 116 101 32 115 101 113 117 101 110 99 101 0

@736$string_error20while20opening#:
x8403:	db "error while opening", 0	; 20: 101 114 114 111 114 32 119 104 105 108 101 32 111 112 101 110 105 110 103 0

@737$string_error20while20flushing#:
x8423:	db "error while flushing", 0	; 21: 101 114 114 111 114 32 119 104 105 108 101 32 102 108 117 115 104 105 110 103 0

@738$string_error20while20closing#:
x8444:	db "error while closing", 0	; 20: 101 114 114 111 114 32 119 104 105 108 101 32 99 108 111 115 105 110 103 0

@739$string_open20mode20invalid#:
x8464:	db "open mode invalid", 0	; 18: 111 112 101 110 32 109 111 100 101 32 105 110 118 97 108 105 100 0

@740$string_error20while20writing#:
x8482:	db "error while writing", 0	; 20: 101 114 114 111 114 32 119 104 105 108 101 32 119 114 105 116 105 110 103 0

@741$string_error20while20reading#:
x8502:	db "error while reading", 0	; 20: 101 114 114 111 114 32 119 104 105 108 101 32 114 101 97 100 105 110 103 0

@742$string_error20while20seeking#:
x8522:	db "error while seeking", 0	; 20: 101 114 114 111 114 32 119 104 105 108 101 32 115 101 101 107 105 110 103 0

@743$string_error20while20telling#:
x8542:	db "error while telling", 0	; 20: 101 114 114 111 114 32 119 104 105 108 101 32 116 101 108 108 105 110 103 0

@744$string_error20while20sizing#:
x8562:	db "error while sizing", 0	; 19: 101 114 114 111 114 32 119 104 105 108 101 32 115 105 122 105 110 103 0

@745$string_error20while20removing20file#:
x8581:	db "error while removing file", 0	; 26: 101 114 114 111 114 32 119 104 105 108 101 32 114 101 109 111 118 105 110 103 32 102 105 108 101 0

@746$string_error20while20renaming20file#:
x8607:	db "error while renaming file", 0	; 26: 101 114 114 111 114 32 119 104 105 108 101 32 114 101 110 97 109 105 110 103 32 102 105 108 101 0

@758$string_C#:
x8633:	db "C", 0	; 2: 67 0

@760$string_US#:
x8635:	db "US", 0	; 3: 85 83 0

strchr:	; IntegralToIntegral £temporary3791 i
x8638:	mov ax, [bp + 8]	; 3: 139 70 8
x8641:	cmp ax, 0	; 3: 131 248 0
x8644:	jge strchr$1	; 2: 125 4
x8646:	neg ax	; 2: 247 216
x8648:	neg al	; 2: 246 216

strchr$1:	; Assign c £temporary3791
x8650:	mov [bp + 12], al	; 3: 136 70 12

strchr$2:	; Assign index 0
x8653:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strchr$3:	; BinaryAdd £temporary3793 text index
x8658:	mov si, [bp + 6]	; 3: 139 118 6
x8661:	add si, [bp + 10]	; 3: 3 118 10

strchr$4:	; Deref £temporary3792 -> £temporary3793 £temporary3793 0

strchr$5:	; Equal 16 £temporary3792 -> £temporary3793 0
x8664:	cmp byte [si], 0	; 3: 128 60 0
x8667:	je strchr$16	; 2: 116 35

strchr$6:	; BinaryAdd £temporary3797 text index
x8669:	mov si, [bp + 6]	; 3: 139 118 6
x8672:	add si, [bp + 10]	; 3: 3 118 10

strchr$7:	; Deref £temporary3796 -> £temporary3797 £temporary3797 0

strchr$8:	; NotEqual 14 £temporary3796 -> £temporary3797 c
x8675:	mov al, [bp + 12]	; 3: 138 70 12
x8678:	cmp [si], al	; 2: 56 4
x8680:	jne strchr$14	; 2: 117 17

strchr$9:	; BinaryAdd £temporary3800 text index
x8682:	mov bx, [bp + 6]	; 3: 139 94 6
x8685:	add bx, [bp + 10]	; 3: 3 94 10

strchr$10:	; Deref £temporary3799 -> £temporary3800 £temporary3800 0

strchr$11:	; address £temporary3801 £temporary3799 -> £temporary3800

strchr$12:	; SetReturnValue £temporary3801

strchr$13:	; Return £temporary3801
x8688:	mov ax, [bp]	; 3: 139 70 0
x8691:	mov di, [bp + 4]	; 3: 139 126 4
x8694:	mov bp, [bp + 2]	; 3: 139 110 2
x8697:	jmp ax	; 2: 255 224

strchr$14:	; Increment index
x8699:	inc word [bp + 10]	; 3: 255 70 10

strchr$15:	; Goto 3
x8702:	jmp strchr$3	; 2: 235 210

strchr$16:	; SetReturnValue 0
x8704:	mov bx, 0	; 3: 187 0 0

strchr$17:	; Return 0
x8707:	mov ax, [bp]	; 3: 139 70 0
x8710:	mov di, [bp + 4]	; 3: 139 126 4
x8713:	mov bp, [bp + 2]	; 3: 139 110 2
x8716:	jmp ax	; 2: 255 224

strchr$18:	; FunctionEnd strchr

printUnsignedLong:	; Equal 5 plus 0
x8718:	cmp word [bp + 10], 0	; 4: 131 126 10 0
x8722:	je printUnsignedLong$5	; 2: 116 18

printUnsignedLong$1:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLong$2:	; Parameter 22 43 6
x8724:	mov byte [bp + 28], 43	; 4: 198 70 28 43

printUnsignedLong$3:	; Call 22 printChar 0
x8728:	mov word [bp + 22], printUnsignedLong$4	; 5: 199 70 22 38 34
x8733:	mov [bp + 24], bp	; 3: 137 110 24
x8736:	add bp, 22	; 3: 131 197 22
x8739:	jmp printChar	; 3: 233 40 250

printUnsignedLong$4:	; PostCall 22

printUnsignedLong$5:	; Equal 10 space 0
x8742:	cmp word [bp + 12], 0	; 4: 131 126 12 0
x8746:	je printUnsignedLong$10	; 2: 116 18

printUnsignedLong$6:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLong$7:	; Parameter 22 32 6
x8748:	mov byte [bp + 28], 32	; 4: 198 70 28 32

printUnsignedLong$8:	; Call 22 printChar 0
x8752:	mov word [bp + 22], printUnsignedLong$9	; 5: 199 70 22 62 34
x8757:	mov [bp + 24], bp	; 3: 137 110 24
x8760:	add bp, 22	; 3: 131 197 22
x8763:	jmp printChar	; 3: 233 16 250

printUnsignedLong$9:	; PostCall 22

printUnsignedLong$10:	; Equal 29 grid 0
x8766:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x8770:	je printUnsignedLong$29	; 2: 116 79

printUnsignedLong$11:	; NotEqual 16 base 8
x8772:	cmp dword [bp + 16], 8	; 5: 102 131 126 16 8
x8777:	jne printUnsignedLong$16	; 2: 117 18

printUnsignedLong$12:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLong$13:	; Parameter 22 48 6
x8779:	mov byte [bp + 28], 48	; 4: 198 70 28 48

printUnsignedLong$14:	; Call 22 printChar 0
x8783:	mov word [bp + 22], printUnsignedLong$15	; 5: 199 70 22 93 34
x8788:	mov [bp + 24], bp	; 3: 137 110 24
x8791:	add bp, 22	; 3: 131 197 22
x8794:	jmp printChar	; 3: 233 241 249

printUnsignedLong$15:	; PostCall 22

printUnsignedLong$16:	; NotEqual 29 base 16
x8797:	cmp dword [bp + 16], 16	; 5: 102 131 126 16 16
x8802:	jne printUnsignedLong$29	; 2: 117 47

printUnsignedLong$17:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLong$18:	; Parameter 22 48 6
x8804:	mov byte [bp + 28], 48	; 4: 198 70 28 48

printUnsignedLong$19:	; Call 22 printChar 0
x8808:	mov word [bp + 22], printUnsignedLong$20	; 5: 199 70 22 118 34
x8813:	mov [bp + 24], bp	; 3: 137 110 24
x8816:	add bp, 22	; 3: 131 197 22
x8819:	jmp printChar	; 3: 233 216 249

printUnsignedLong$20:	; PostCall 22

printUnsignedLong$21:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLong$22:	; Equal 25 capital 0
x8822:	cmp word [bp + 20], 0	; 4: 131 126 20 0
x8826:	je printUnsignedLong$25	; 2: 116 4

printUnsignedLong$23:	; Assign £temporary1711 88
x8828:	mov al, 88	; 2: 176 88

printUnsignedLong$24:	; Goto 26
x8830:	jmp printUnsignedLong$26	; 2: 235 2

printUnsignedLong$25:	; Assign £temporary1711 120
x8832:	mov al, 120	; 2: 176 120

printUnsignedLong$26:	; Parameter 22 £temporary1711 6
x8834:	mov [bp + 28], al	; 3: 136 70 28

printUnsignedLong$27:	; Call 22 printChar 0
x8837:	mov word [bp + 22], printUnsignedLong$28	; 5: 199 70 22 147 34
x8842:	mov [bp + 24], bp	; 3: 137 110 24
x8845:	add bp, 22	; 3: 131 197 22
x8848:	jmp printChar	; 3: 233 187 249

printUnsignedLong$28:	; PostCall 22

printUnsignedLong$29:	; NotEqual 35 unsignedValue 0
x8851:	cmp dword [bp + 6], 0	; 5: 102 131 126 6 0
x8856:	jne printUnsignedLong$35	; 2: 117 20

printUnsignedLong$30:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLong$31:	; Parameter 22 48 6
x8858:	mov byte [bp + 28], 48	; 4: 198 70 28 48

printUnsignedLong$32:	; Call 22 printChar 0
x8862:	mov word [bp + 22], printUnsignedLong$33	; 5: 199 70 22 172 34
x8867:	mov [bp + 24], bp	; 3: 137 110 24
x8870:	add bp, 22	; 3: 131 197 22
x8873:	jmp printChar	; 3: 233 162 249

printUnsignedLong$33:	; PostCall 22

printUnsignedLong$34:	; Goto 41
x8876:	jmp printUnsignedLong$41	; 2: 235 36

printUnsignedLong$35:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLong$36:	; Parameter 22 unsignedValue 6
x8878:	mov eax, [bp + 6]	; 4: 102 139 70 6
x8882:	mov [bp + 28], eax	; 4: 102 137 70 28

printUnsignedLong$37:	; Parameter 22 base 10
x8886:	mov eax, [bp + 16]	; 4: 102 139 70 16
x8890:	mov [bp + 32], eax	; 4: 102 137 70 32

printUnsignedLong$38:	; Parameter 22 capital 14
x8894:	mov ax, [bp + 20]	; 3: 139 70 20
x8897:	mov [bp + 36], ax	; 3: 137 70 36

printUnsignedLong$39:	; Call 22 printUnsignedLongRec 0
x8900:	mov word [bp + 22], printUnsignedLong$40	; 5: 199 70 22 210 34
x8905:	mov [bp + 24], bp	; 3: 137 110 24
x8908:	add bp, 22	; 3: 131 197 22
x8911:	nop	; 1: 144
x8912:	jmp printUnsignedLongRec	; 2: 235 11

printUnsignedLong$40:	; PostCall 22

printUnsignedLong$41:	; Return 0
x8914:	mov ax, [bp]	; 3: 139 70 0
x8917:	mov di, [bp + 4]	; 3: 139 126 4
x8920:	mov bp, [bp + 2]	; 3: 139 110 2
x8923:	jmp ax	; 2: 255 224

printUnsignedLong$42:	; FunctionEnd printUnsignedLong

printUnsignedLongRec:	; UnsignedLessThanEqual 22 unsignedValue 0
x8925:	cmp dword [bp + 6], 0	; 5: 102 131 126 6 0
x8930:	jbe printUnsignedLongRec$22	; 2: 118 106

printUnsignedLongRec$1:	; UnsignedModulo £temporary1687 unsignedValue base
x8932:	mov eax, [bp + 6]	; 4: 102 139 70 6
x8936:	xor edx, edx	; 3: 102 49 210
x8939:	div dword [bp + 10]	; 4: 102 247 118 10

printUnsignedLongRec$2:	; IntegralToIntegral £temporary1688 £temporary1687

printUnsignedLongRec$3:	; Assign digit £temporary1688
x8943:	mov [bp + 16], dx	; 3: 137 86 16

printUnsignedLongRec$4:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLongRec$5:	; UnsignedDivide £temporary1689 unsignedValue base
x8946:	mov eax, [bp + 6]	; 4: 102 139 70 6
x8950:	xor edx, edx	; 3: 102 49 210
x8953:	div dword [bp + 10]	; 4: 102 247 118 10

printUnsignedLongRec$6:	; Parameter 18 £temporary1689 6
x8957:	mov [bp + 24], eax	; 4: 102 137 70 24

printUnsignedLongRec$7:	; Parameter 18 base 10
x8961:	mov eax, [bp + 10]	; 4: 102 139 70 10
x8965:	mov [bp + 28], eax	; 4: 102 137 70 28

printUnsignedLongRec$8:	; Parameter 18 capital 14
x8969:	mov ax, [bp + 14]	; 3: 139 70 14
x8972:	mov [bp + 32], ax	; 3: 137 70 32

printUnsignedLongRec$9:	; Call 18 printUnsignedLongRec 0
x8975:	mov word [bp + 18], printUnsignedLongRec$10	; 5: 199 70 18 29 35
x8980:	mov [bp + 20], bp	; 3: 137 110 20
x8983:	add bp, 18	; 3: 131 197 18
x8986:	nop	; 1: 144
x8987:	jmp printUnsignedLongRec	; 2: 235 192

printUnsignedLongRec$10:	; PostCall 18

printUnsignedLongRec$11:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLongRec$12:	; Parameter 18 digit 6
x8989:	mov ax, [bp + 16]	; 3: 139 70 16
x8992:	mov [bp + 24], ax	; 3: 137 70 24

printUnsignedLongRec$13:	; Parameter 18 capital 8
x8995:	mov ax, [bp + 14]	; 3: 139 70 14
x8998:	mov [bp + 26], ax	; 3: 137 70 26

printUnsignedLongRec$14:	; Call 18 digitToChar 0
x9001:	mov word [bp + 18], printUnsignedLongRec$15	; 5: 199 70 18 55 35
x9006:	mov [bp + 20], bp	; 3: 137 110 20
x9009:	add bp, 18	; 3: 131 197 18
x9012:	nop	; 1: 144
x9013:	jmp digitToChar	; 2: 235 34

printUnsignedLongRec$15:	; PostCall 18

printUnsignedLongRec$16:	; GetReturnValue £temporary1691

printUnsignedLongRec$17:	; Assign c £temporary1691
x9015:	mov [bp + 18], bl	; 3: 136 94 18

printUnsignedLongRec$18:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLongRec$19:	; Parameter 19 c 6
x9018:	mov al, [bp + 18]	; 3: 138 70 18
x9021:	mov [bp + 25], al	; 3: 136 70 25

printUnsignedLongRec$20:	; Call 19 printChar 0
x9024:	mov word [bp + 19], printUnsignedLongRec$21	; 5: 199 70 19 78 35
x9029:	mov [bp + 21], bp	; 3: 137 110 21
x9032:	add bp, 19	; 3: 131 197 19
x9035:	jmp printChar	; 3: 233 0 249

printUnsignedLongRec$21:	; PostCall 19

printUnsignedLongRec$22:	; Return 0
x9038:	mov ax, [bp]	; 3: 139 70 0
x9041:	mov di, [bp + 4]	; 3: 139 126 4
x9044:	mov bp, [bp + 2]	; 3: 139 110 2
x9047:	jmp ax	; 2: 255 224

printUnsignedLongRec$23:	; FunctionEnd printUnsignedLongRec

digitToChar:	; SignedGreaterThanEqual 5 digit 10
x9049:	cmp word [bp + 6], 10	; 4: 131 126 6 10
x9053:	jge digitToChar$5	; 2: 125 26

digitToChar$1:	; BinaryAdd £temporary1677 digit 48
x9055:	mov bx, [bp + 6]	; 3: 139 94 6
x9058:	add bx, 48	; 3: 131 195 48

digitToChar$2:	; IntegralToIntegral £temporary1678 £temporary1677
x9061:	cmp bx, 0	; 3: 131 251 0
x9064:	jge digitToChar$3	; 2: 125 4
x9066:	neg bx	; 2: 247 219
x9068:	neg bl	; 2: 246 219

digitToChar$3:	; SetReturnValue £temporary1678

digitToChar$4:	; Return £temporary1678
x9070:	mov ax, [bp]	; 3: 139 70 0
x9073:	mov di, [bp + 4]	; 3: 139 126 4
x9076:	mov bp, [bp + 2]	; 3: 139 110 2
x9079:	jmp ax	; 2: 255 224

digitToChar$5:	; Equal 11 capital 0
x9081:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x9085:	je digitToChar$11	; 2: 116 29

digitToChar$6:	; BinarySubtract £temporary1679 digit 10
x9087:	mov bx, [bp + 6]	; 3: 139 94 6
x9090:	sub bx, 10	; 3: 131 235 10

digitToChar$7:	; BinaryAdd £temporary1680 £temporary1679 65
x9093:	add bx, 65	; 3: 131 195 65

digitToChar$8:	; IntegralToIntegral £temporary1681 £temporary1680
x9096:	cmp bx, 0	; 3: 131 251 0
x9099:	jge digitToChar$9	; 2: 125 4
x9101:	neg bx	; 2: 247 219
x9103:	neg bl	; 2: 246 219

digitToChar$9:	; SetReturnValue £temporary1681

digitToChar$10:	; Return £temporary1681
x9105:	mov ax, [bp]	; 3: 139 70 0
x9108:	mov di, [bp + 4]	; 3: 139 126 4
x9111:	mov bp, [bp + 2]	; 3: 139 110 2
x9114:	jmp ax	; 2: 255 224

digitToChar$11:	; BinarySubtract £temporary1682 digit 10
x9116:	mov bx, [bp + 6]	; 3: 139 94 6
x9119:	sub bx, 10	; 3: 131 235 10

digitToChar$12:	; BinaryAdd £temporary1683 £temporary1682 97
x9122:	add bx, 97	; 3: 131 195 97

digitToChar$13:	; IntegralToIntegral £temporary1684 £temporary1683
x9125:	cmp bx, 0	; 3: 131 251 0
x9128:	jge digitToChar$14	; 2: 125 4
x9130:	neg bx	; 2: 247 219
x9132:	neg bl	; 2: 246 219

digitToChar$14:	; SetReturnValue £temporary1684

digitToChar$15:	; Return £temporary1684
x9134:	mov ax, [bp]	; 3: 139 70 0
x9137:	mov di, [bp + 4]	; 3: 139 126 4
x9140:	mov bp, [bp + 2]	; 3: 139 110 2
x9143:	jmp ax	; 2: 255 224

digitToChar$16:	; FunctionEnd digitToChar

printLongDoublePlain:	; PushFloat longDoubleValue
x9145:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoublePlain$1:	; PushFloat 0.0
x9148:	fldz	; 2: 217 238

printLongDoublePlain$2:	; SignedGreaterThanEqual 12 longDoubleValue 0.0
x9150:	fcompp	; 2: 222 217
x9152:	fstsw ax	; 3: 155 223 224
x9155:	sahf	; 1: 158
x9156:	jbe printLongDoublePlain$12	; 2: 118 36

printLongDoublePlain$3:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoublePlain$4:	; Parameter 22 45 6
x9158:	mov byte [bp + 28], 45	; 4: 198 70 28 45

printLongDoublePlain$5:	; Call 22 printChar 0
x9162:	mov word [bp + 22], printLongDoublePlain$6	; 5: 199 70 22 216 35
x9167:	mov [bp + 24], bp	; 3: 137 110 24
x9170:	add bp, 22	; 3: 131 197 22
x9173:	jmp printChar	; 3: 233 118 248

printLongDoublePlain$6:	; PostCall 22

printLongDoublePlain$7:	; PushFloat longDoubleValue
x9176:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoublePlain$8:	; UnarySubtract £temporary1748 longDoubleValue
x9179:	fchs	; 2: 217 224

printLongDoublePlain$9:	; PopFloat longDoubleValue
x9181:	fstp qword [bp + 6]	; 3: 221 94 6

printLongDoublePlain$10:	; Assign plus 0
x9184:	mov word [bp + 14], 0	; 5: 199 70 14 0 0

printLongDoublePlain$11:	; Assign space 0
x9189:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

printLongDoublePlain$12:	; PushFloat longDoubleValue
x9194:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoublePlain$13:	; FloatingToIntegral £temporary1749 longDoubleValue
x9197:	fistp dword [container4bytes#]	; 4: 219 30 81 36
x9201:	mov eax, [container4bytes#]	; 4: 102 161 81 36

printLongDoublePlain$14:	; Assign longValue £temporary1749
x9205:	mov [bp + 22], eax	; 4: 102 137 70 22

printLongDoublePlain$15:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoublePlain$16:	; Parameter 26 longValue 6
x9209:	mov eax, [bp + 22]	; 4: 102 139 70 22
x9213:	mov [bp + 32], eax	; 4: 102 137 70 32

printLongDoublePlain$17:	; Parameter 26 plus 10
x9217:	mov ax, [bp + 14]	; 3: 139 70 14
x9220:	mov [bp + 36], ax	; 3: 137 70 36

printLongDoublePlain$18:	; Parameter 26 space 12
x9223:	mov ax, [bp + 16]	; 3: 139 70 16
x9226:	mov [bp + 38], ax	; 3: 137 70 38

printLongDoublePlain$19:	; Call 26 printLongInt 0
x9229:	mov word [bp + 26], printLongDoublePlain$20	; 5: 199 70 26 27 36
x9234:	mov [bp + 28], bp	; 3: 137 110 28
x9237:	add bp, 26	; 3: 131 197 26
x9240:	jmp printLongInt	; 3: 233 159 247

printLongDoublePlain$20:	; PostCall 26

printLongDoublePlain$21:	; PushFloat longDoubleValue
x9243:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoublePlain$22:	; IntegralToFloating £temporary1751 longValue
x9246:	fild dword [bp + 22]	; 3: 219 70 22

printLongDoublePlain$23:	; BinarySubtract £temporary1752 longDoubleValue £temporary1751
x9249:	fsub	; 2: 222 233

printLongDoublePlain$24:	; PopFloat longDoubleValue
x9251:	fstp qword [bp + 6]	; 3: 221 94 6

printLongDoublePlain$25:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoublePlain$26:	; PushFloat longDoubleValue
x9254:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoublePlain$27:	; Parameter 26 longDoubleValue 6
x9257:	fstp qword [bp + 32]	; 3: 221 94 32

printLongDoublePlain$28:	; Parameter 26 grid 14
x9260:	mov ax, [bp + 18]	; 3: 139 70 18
x9263:	mov [bp + 40], ax	; 3: 137 70 40

printLongDoublePlain$29:	; Parameter 26 precision 16
x9266:	mov ax, [bp + 20]	; 3: 139 70 20
x9269:	mov [bp + 42], ax	; 3: 137 70 42

printLongDoublePlain$30:	; Call 26 printLongDoubleFraction 0
x9272:	mov word [bp + 26], printLongDoublePlain$31	; 5: 199 70 26 70 36
x9277:	mov [bp + 28], bp	; 3: 137 110 28
x9280:	add bp, 26	; 3: 131 197 26
x9283:	nop	; 1: 144
x9284:	jmp printLongDoubleFraction	; 2: 235 15

printLongDoublePlain$31:	; PostCall 26

printLongDoublePlain$32:	; Return 0
x9286:	mov ax, [bp]	; 3: 139 70 0
x9289:	mov di, [bp + 4]	; 3: 139 126 4
x9292:	mov bp, [bp + 2]	; 3: 139 110 2
x9295:	jmp ax	; 2: 255 224

printLongDoublePlain$33:	; FunctionEnd printLongDoublePlain

container4bytes#:
x9297:	db 0, 0, 0, 0	; 4: 0 0 0 0

printLongDoubleFraction:	; PushFloat longDoubleValue
x9301:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoubleFraction$1:	; PushFloat longDoubleValue
x9304:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoubleFraction$2:	; FloatingToIntegral £temporary1726 longDoubleValue
x9307:	fistp dword [container4bytes#]	; 4: 219 30 81 36
x9311:	mov eax, [container4bytes#]	; 4: 102 161 81 36

printLongDoubleFraction$3:	; IntegralToFloating £temporary1727 £temporary1726
x9315:	mov [container4bytes#], eax	; 4: 102 163 81 36
x9319:	fild dword [container4bytes#]	; 4: 219 6 81 36

printLongDoubleFraction$4:	; BinarySubtract £temporary1728 longDoubleValue £temporary1727
x9323:	fsub	; 2: 222 233

printLongDoubleFraction$5:	; PopFloat longDoubleValue
x9325:	fstp qword [bp + 6]	; 3: 221 94 6

printLongDoubleFraction$6:	; NotEqual 8 precision 0
x9328:	cmp word [bp + 16], 0	; 4: 131 126 16 0
x9332:	jne printLongDoubleFraction$8	; 2: 117 5

printLongDoubleFraction$7:	; Assign precision 6
x9334:	mov word [bp + 16], 6	; 5: 199 70 16 6 0

printLongDoubleFraction$8:	; NotEqual 10 grid 0
x9339:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x9343:	jne printLongDoubleFraction$10	; 2: 117 6

printLongDoubleFraction$9:	; SignedLessThanEqual 14 precision 0
x9345:	cmp word [bp + 16], 0	; 4: 131 126 16 0
x9349:	jle printLongDoubleFraction$14	; 2: 126 18

printLongDoubleFraction$10:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleFraction$11:	; Parameter 18 46 6
x9351:	mov byte [bp + 24], 46	; 4: 198 70 24 46

printLongDoubleFraction$12:	; Call 18 printChar 0
x9355:	mov word [bp + 18], printLongDoubleFraction$13	; 5: 199 70 18 153 36
x9360:	mov [bp + 20], bp	; 3: 137 110 20
x9363:	add bp, 18	; 3: 131 197 18
x9366:	jmp printChar	; 3: 233 181 247

printLongDoubleFraction$13:	; PostCall 18

printLongDoubleFraction$14:	; Assign £temporary1734 precision
x9369:	mov ax, [bp + 16]	; 3: 139 70 16

printLongDoubleFraction$15:	; Decrement precision
x9372:	dec word [bp + 16]	; 3: 255 78 16

printLongDoubleFraction$16:	; SignedLessThanEqual 35 £temporary1734 0
x9375:	cmp ax, 0	; 3: 131 248 0
x9378:	jle printLongDoubleFraction$35	; 2: 126 70

printLongDoubleFraction$17:	; PushFloat 10.0
x9380:	fld qword [@3956$float8$10.0#]	; 4: 221 6 245 36

printLongDoubleFraction$18:	; PushFloat longDoubleValue
x9384:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoubleFraction$19:	; SignedMultiply £temporary1737 10.0 longDoubleValue
x9387:	fmul	; 2: 222 201

printLongDoubleFraction$20:	; PopFloat longDoubleValue10
x9389:	fstp qword [bp + 18]	; 3: 221 94 18

printLongDoubleFraction$21:	; PushFloat longDoubleValue10
x9392:	fld qword [bp + 18]	; 3: 221 70 18

printLongDoubleFraction$22:	; FloatingToIntegral £temporary1738 longDoubleValue10
x9395:	fistp word [container2bytes#]	; 4: 223 30 77 27
x9399:	mov ax, [container2bytes#]	; 3: 161 77 27

printLongDoubleFraction$23:	; Assign digitValue £temporary1738
x9402:	mov [bp + 26], ax	; 3: 137 70 26

printLongDoubleFraction$24:	; CallHeader 28 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleFraction$25:	; BinaryAdd £temporary1739 digitValue 48
x9405:	mov ax, [bp + 26]	; 3: 139 70 26
x9408:	add ax, 48	; 3: 131 192 48

printLongDoubleFraction$26:	; IntegralToIntegral £temporary1740 £temporary1739
x9411:	cmp ax, 0	; 3: 131 248 0
x9414:	jge printLongDoubleFraction$27	; 2: 125 4
x9416:	neg ax	; 2: 247 216
x9418:	neg al	; 2: 246 216

printLongDoubleFraction$27:	; Parameter 28 £temporary1740 6
x9420:	mov [bp + 34], al	; 3: 136 70 34

printLongDoubleFraction$28:	; Call 28 printChar 0
x9423:	mov word [bp + 28], printLongDoubleFraction$29	; 5: 199 70 28 221 36
x9428:	mov [bp + 30], bp	; 3: 137 110 30
x9431:	add bp, 28	; 3: 131 197 28
x9434:	jmp printChar	; 3: 233 113 247

printLongDoubleFraction$29:	; PostCall 28

printLongDoubleFraction$30:	; PushFloat longDoubleValue10
x9437:	fld qword [bp + 18]	; 3: 221 70 18

printLongDoubleFraction$31:	; IntegralToFloating £temporary1742 digitValue
x9440:	fild word [bp + 26]	; 3: 223 70 26

printLongDoubleFraction$32:	; BinarySubtract £temporary1743 longDoubleValue10 £temporary1742
x9443:	fsub	; 2: 222 233

printLongDoubleFraction$33:	; PopFloat longDoubleValue
x9445:	fstp qword [bp + 6]	; 3: 221 94 6

printLongDoubleFraction$34:	; Goto 14
x9448:	jmp printLongDoubleFraction$14	; 2: 235 175

printLongDoubleFraction$35:	; Return 0
x9450:	mov ax, [bp]	; 3: 139 70 0
x9453:	mov di, [bp + 4]	; 3: 139 126 4
x9456:	mov bp, [bp + 2]	; 3: 139 110 2
x9459:	jmp ax	; 2: 255 224

printLongDoubleFraction$36:	; FunctionEnd printLongDoubleFraction

@3956$float8$10.0#:
x9461:	dq 10.0	; 8: 0 0 0 0 0 0 36 64

fabs:	; PushFloat x
x9469:	fld qword [bp + 6]	; 3: 221 70 6

fabs$1:	; PushZero
x9472:	fldz	; 2: 217 238

fabs$2:	; SignedGreaterThanEqual 7 x 0
x9474:	fcompp	; 2: 222 217
x9476:	fstsw ax	; 3: 155 223 224
x9479:	sahf	; 1: 158
x9480:	jbe fabs$7	; 2: 118 7

fabs$3:	; PushFloat x
x9482:	fld qword [bp + 6]	; 3: 221 70 6

fabs$4:	; UnarySubtract £temporary623 x
x9485:	fchs	; 2: 217 224

fabs$5:	; DecreaseStack

fabs$6:	; Goto 8
x9487:	jmp fabs$8	; 2: 235 3

fabs$7:	; PushFloat x
x9489:	fld qword [bp + 6]	; 3: 221 70 6

fabs$8:	; SetReturnValue £temporary627

fabs$9:	; Return £temporary627
x9492:	mov ax, [bp]	; 3: 139 70 0
x9495:	mov di, [bp + 4]	; 3: 139 126 4
x9498:	mov bp, [bp + 2]	; 3: 139 110 2
x9501:	jmp ax	; 2: 255 224

fabs$10:	; FunctionEnd fabs

tolower:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

tolower$1:	; Parameter 8 c 6
x9503:	mov ax, [bp + 6]	; 3: 139 70 6
x9506:	mov [bp + 14], ax	; 3: 137 70 14

tolower$2:	; Call 8 isupper 0
x9509:	mov word [bp + 8], tolower$3	; 5: 199 70 8 51 37
x9514:	mov [bp + 10], bp	; 3: 137 110 10
x9517:	add bp, 8	; 3: 131 197 8
x9520:	jmp isupper	; 3: 233 218 248

tolower$3:	; PostCall 8

tolower$4:	; GetReturnValue £temporary252

tolower$5:	; Equal 31 £temporary252 0
x9523:	cmp bx, 0	; 3: 131 251 0
x9526:	je tolower$31	; 2: 116 122

tolower$6:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

tolower$7:	; Call 8 localeconv 0
x9528:	mov word [bp + 8], tolower$8	; 5: 199 70 8 70 37
x9533:	mov [bp + 10], bp	; 3: 137 110 10
x9536:	add bp, 8	; 3: 131 197 8
x9539:	jmp localeconv	; 3: 233 50 249

tolower$8:	; PostCall 8

tolower$9:	; GetReturnValue £temporary253

tolower$10:	; Assign localeConvPtr £temporary253
x9542:	mov [bp + 8], bx	; 3: 137 94 8

tolower$11:	; Equal 28 localeConvPtr 0
x9545:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x9549:	je tolower$28	; 2: 116 82

tolower$12:	; Deref £temporary255 -> localeConvPtr localeConvPtr 12
x9551:	mov si, [bp + 8]	; 3: 139 118 8

tolower$13:	; Assign lowerCase £temporary255 -> localeConvPtr
x9554:	mov ax, [si + 12]	; 3: 139 68 12
x9557:	mov [bp + 10], ax	; 3: 137 70 10

tolower$14:	; Deref £temporary256 -> localeConvPtr localeConvPtr 14
x9560:	mov si, [bp + 8]	; 3: 139 118 8

tolower$15:	; Assign upperCase £temporary256 -> localeConvPtr
x9563:	mov ax, [si + 14]	; 3: 139 68 14
x9566:	mov [bp + 12], ax	; 3: 137 70 12

tolower$16:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

tolower$17:	; Parameter 14 upperCase 6
x9569:	mov ax, [bp + 12]	; 3: 139 70 12
x9572:	mov [bp + 20], ax	; 3: 137 70 20

tolower$18:	; Parameter 14 c 8
x9575:	mov ax, [bp + 6]	; 3: 139 70 6
x9578:	mov [bp + 22], ax	; 3: 137 70 22

tolower$19:	; Call 14 strchr 0
x9581:	mov word [bp + 14], tolower$20	; 5: 199 70 14 123 37
x9586:	mov [bp + 16], bp	; 3: 137 110 16
x9589:	add bp, 14	; 3: 131 197 14
x9592:	jmp strchr	; 3: 233 67 252

tolower$20:	; PostCall 14

tolower$21:	; GetReturnValue £temporary257

tolower$22:	; BinarySubtract index £temporary257 upperCase
x9595:	sub bx, [bp + 12]	; 3: 43 94 12
x9598:	mov [bp + 14], bx	; 3: 137 94 14

tolower$23:	; BinaryAdd £temporary260 lowerCase index
x9601:	mov si, [bp + 10]	; 3: 139 118 10
x9604:	add si, [bp + 14]	; 3: 3 118 14

tolower$24:	; Deref £temporary259 -> £temporary260 £temporary260 0

tolower$25:	; IntegralToIntegral £temporary261 £temporary259 -> £temporary260
x9607:	mov bl, [si]	; 2: 138 28
x9609:	and bx, 255	; 4: 129 227 255 0
x9613:	cmp bl, 0	; 3: 128 251 0
x9616:	jge tolower$26	; 2: 125 4
x9618:	neg bl	; 2: 246 219
x9620:	neg bx	; 2: 247 219

tolower$26:	; SetReturnValue £temporary261

tolower$27:	; Return £temporary261
x9622:	mov ax, [bp]	; 3: 139 70 0
x9625:	mov di, [bp + 4]	; 3: 139 126 4
x9628:	mov bp, [bp + 2]	; 3: 139 110 2
x9631:	jmp ax	; 2: 255 224

tolower$28:	; BinaryAdd £temporary262 c 32
x9633:	mov bx, [bp + 6]	; 3: 139 94 6
x9636:	add bx, 32	; 3: 131 195 32

tolower$29:	; SetReturnValue £temporary262

tolower$30:	; Return £temporary262
x9639:	mov ax, [bp]	; 3: 139 70 0
x9642:	mov di, [bp + 4]	; 3: 139 126 4
x9645:	mov bp, [bp + 2]	; 3: 139 110 2
x9648:	jmp ax	; 2: 255 224

tolower$31:	; SetReturnValue c
x9650:	mov bx, [bp + 6]	; 3: 139 94 6

tolower$32:	; Return c
x9653:	mov ax, [bp]	; 3: 139 70 0
x9656:	mov di, [bp + 4]	; 3: 139 126 4
x9659:	mov bp, [bp + 2]	; 3: 139 110 2
x9662:	jmp ax	; 2: 255 224

tolower$33:	; FunctionEnd tolower

printLongDoubleExpo:	; PushFloat value
x9664:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoubleExpo$1:	; PushFloat 0.0
x9667:	fldz	; 2: 217 238

printLongDoubleExpo$2:	; NotEqual 27 value 0.0
x9669:	fcompp	; 2: 222 217
x9671:	fstsw ax	; 3: 155 223 224
x9674:	sahf	; 1: 158
x9675:	jne printLongDoubleExpo$27	; 2: 117 99

printLongDoubleExpo$3:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleExpo$4:	; Parameter 24 48 6
x9677:	mov byte [bp + 30], 48	; 4: 198 70 30 48

printLongDoubleExpo$5:	; Call 24 printChar 0
x9681:	mov word [bp + 24], printLongDoubleExpo$6	; 5: 199 70 24 223 37
x9686:	mov [bp + 26], bp	; 3: 137 110 26
x9689:	add bp, 24	; 3: 131 197 24
x9692:	jmp printChar	; 3: 233 111 246

printLongDoubleExpo$6:	; PostCall 24

printLongDoubleExpo$7:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleExpo$8:	; PushFloat 0.0
x9695:	fldz	; 2: 217 238

printLongDoubleExpo$9:	; Parameter 24 0.0 6
x9697:	fstp qword [bp + 30]	; 3: 221 94 30

printLongDoubleExpo$10:	; Parameter 24 precision 14
x9700:	mov ax, [bp + 20]	; 3: 139 70 20
x9703:	mov [bp + 38], ax	; 3: 137 70 38

printLongDoubleExpo$11:	; Parameter 24 grid 16
x9706:	mov ax, [bp + 18]	; 3: 139 70 18
x9709:	mov [bp + 40], ax	; 3: 137 70 40

printLongDoubleExpo$12:	; Call 24 printLongDoubleFraction 0
x9712:	mov word [bp + 24], printLongDoubleExpo$13	; 5: 199 70 24 254 37
x9717:	mov [bp + 26], bp	; 3: 137 110 26
x9720:	add bp, 24	; 3: 131 197 24
x9723:	jmp printLongDoubleFraction	; 3: 233 87 254

printLongDoubleExpo$13:	; PostCall 24

printLongDoubleExpo$14:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleExpo$15:	; Equal 18 capital 0
x9726:	cmp word [bp + 22], 0	; 4: 131 126 22 0
x9730:	je printLongDoubleExpo$18	; 2: 116 4

printLongDoubleExpo$16:	; Assign £temporary1768 69
x9732:	mov al, 69	; 2: 176 69

printLongDoubleExpo$17:	; Goto 19
x9734:	jmp printLongDoubleExpo$19	; 2: 235 2

printLongDoubleExpo$18:	; Assign £temporary1768 101
x9736:	mov al, 101	; 2: 176 101

printLongDoubleExpo$19:	; Parameter 24 £temporary1768 6
x9738:	mov [bp + 30], al	; 3: 136 70 30

printLongDoubleExpo$20:	; Call 24 printChar 0
x9741:	mov word [bp + 24], printLongDoubleExpo$21	; 5: 199 70 24 27 38
x9746:	mov [bp + 26], bp	; 3: 137 110 26
x9749:	add bp, 24	; 3: 131 197 24
x9752:	jmp printChar	; 3: 233 51 246

printLongDoubleExpo$21:	; PostCall 24

printLongDoubleExpo$22:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleExpo$23:	; Parameter 24 48 6
x9755:	mov byte [bp + 30], 48	; 4: 198 70 30 48

printLongDoubleExpo$24:	; Call 24 printChar 0
x9759:	mov word [bp + 24], printLongDoubleExpo$25	; 5: 199 70 24 45 38
x9764:	mov [bp + 26], bp	; 3: 137 110 26
x9767:	add bp, 24	; 3: 131 197 24
x9770:	jmp printChar	; 3: 233 33 246

printLongDoubleExpo$25:	; PostCall 24

printLongDoubleExpo$26:	; Goto 80
x9773:	jmp printLongDoubleExpo$80	; 3: 233 236 0

printLongDoubleExpo$27:	; PushFloat value
x9776:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoubleExpo$28:	; PushFloat 0.0
x9779:	fldz	; 2: 217 238

printLongDoubleExpo$29:	; SignedGreaterThanEqual 37 value 0.0
x9781:	fcompp	; 2: 222 217
x9783:	fstsw ax	; 3: 155 223 224
x9786:	sahf	; 1: 158
x9787:	jbe printLongDoubleExpo$37	; 2: 118 26

printLongDoubleExpo$30:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleExpo$31:	; Parameter 24 45 6
x9789:	mov byte [bp + 30], 45	; 4: 198 70 30 45

printLongDoubleExpo$32:	; Call 24 printChar 0
x9793:	mov word [bp + 24], printLongDoubleExpo$33	; 5: 199 70 24 79 38
x9798:	mov [bp + 26], bp	; 3: 137 110 26
x9801:	add bp, 24	; 3: 131 197 24
x9804:	jmp printChar	; 3: 233 255 245

printLongDoubleExpo$33:	; PostCall 24

printLongDoubleExpo$34:	; PushFloat value
x9807:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoubleExpo$35:	; UnarySubtract £temporary1773 value
x9810:	fchs	; 2: 217 224

printLongDoubleExpo$36:	; PopFloat value
x9812:	fstp qword [bp + 6]	; 3: 221 94 6

printLongDoubleExpo$37:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleExpo$38:	; PushFloat value
x9815:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoubleExpo$39:	; Parameter 24 value 6
x9818:	fstp qword [bp + 30]	; 3: 221 94 30

printLongDoubleExpo$40:	; Call 24 log10 0
x9821:	mov word [bp + 24], printLongDoubleExpo$41	; 5: 199 70 24 107 38
x9826:	mov [bp + 26], bp	; 3: 137 110 26
x9829:	add bp, 24	; 3: 131 197 24
x9832:	jmp log10	; 3: 233 196 0

printLongDoubleExpo$41:	; PostCall 24

printLongDoubleExpo$42:	; GetReturnValue £temporary1774

printLongDoubleExpo$43:	; FloatingToIntegral £temporary1775 £temporary1774
x9835:	fistp word [container2bytes#]	; 4: 223 30 77 27
x9839:	mov ax, [container2bytes#]	; 3: 161 77 27

printLongDoubleExpo$44:	; Assign expo £temporary1775
x9842:	mov [bp + 24], ax	; 3: 137 70 24

printLongDoubleExpo$45:	; PushFloat value
x9845:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoubleExpo$46:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x9848:	fstp qword [bp + 26]	; 3: 221 94 26

printLongDoubleExpo$47:	; PushFloat 10.0
x9851:	fld qword [@4037$float8$10.0#]	; 4: 221 6 39 39

printLongDoubleExpo$48:	; Parameter 26 10.0 6
x9855:	fstp qword [bp + 40]	; 3: 221 94 40

printLongDoubleExpo$49:	; IntegralToFloating £temporary1776 expo
x9858:	fild word [bp + 24]	; 3: 223 70 24

printLongDoubleExpo$50:	; Parameter 26 £temporary1776 14
x9861:	fstp qword [bp + 48]	; 3: 221 94 48

printLongDoubleExpo$51:	; Call 26 pow 0
x9864:	mov word [bp + 34], printLongDoubleExpo$52	; 5: 199 70 34 150 38
x9869:	mov [bp + 36], bp	; 3: 137 110 36
x9872:	add bp, 34	; 3: 131 197 34
x9875:	jmp pow	; 3: 233 5 2

printLongDoubleExpo$52:	; PostCall 26
x9878:	fstp qword [bp + 34]	; 3: 221 94 34
x9881:	fld qword [bp + 26]	; 3: 221 70 26
x9884:	fld qword [bp + 34]	; 3: 221 70 34

printLongDoubleExpo$53:	; GetReturnValue £temporary1777

printLongDoubleExpo$54:	; SignedDivide £temporary1778 value £temporary1777
x9887:	fdiv	; 2: 222 249

printLongDoubleExpo$55:	; PopFloat value
x9889:	fstp qword [bp + 6]	; 3: 221 94 6

printLongDoubleExpo$56:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleExpo$57:	; PushFloat value
x9892:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoubleExpo$58:	; Parameter 26 value 6
x9895:	fstp qword [bp + 32]	; 3: 221 94 32

printLongDoubleExpo$59:	; Parameter 26 plus 14
x9898:	mov ax, [bp + 14]	; 3: 139 70 14
x9901:	mov [bp + 40], ax	; 3: 137 70 40

printLongDoubleExpo$60:	; Parameter 26 space 16
x9904:	mov ax, [bp + 16]	; 3: 139 70 16
x9907:	mov [bp + 42], ax	; 3: 137 70 42

printLongDoubleExpo$61:	; Parameter 26 grid 18
x9910:	mov ax, [bp + 18]	; 3: 139 70 18
x9913:	mov [bp + 44], ax	; 3: 137 70 44

printLongDoubleExpo$62:	; Parameter 26 precision 20
x9916:	mov ax, [bp + 20]	; 3: 139 70 20
x9919:	mov [bp + 46], ax	; 3: 137 70 46

printLongDoubleExpo$63:	; Call 26 printLongDoublePlain 0
x9922:	mov word [bp + 26], printLongDoubleExpo$64	; 5: 199 70 26 208 38
x9927:	mov [bp + 28], bp	; 3: 137 110 28
x9930:	add bp, 26	; 3: 131 197 26
x9933:	jmp printLongDoublePlain	; 3: 233 233 252

printLongDoubleExpo$64:	; PostCall 26

printLongDoubleExpo$65:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleExpo$66:	; Equal 69 capital 0
x9936:	cmp word [bp + 22], 0	; 4: 131 126 22 0
x9940:	je printLongDoubleExpo$69	; 2: 116 4

printLongDoubleExpo$67:	; Assign £temporary1784 69
x9942:	mov al, 69	; 2: 176 69

printLongDoubleExpo$68:	; Goto 70
x9944:	jmp printLongDoubleExpo$70	; 2: 235 2

printLongDoubleExpo$69:	; Assign £temporary1784 101
x9946:	mov al, 101	; 2: 176 101

printLongDoubleExpo$70:	; Parameter 26 £temporary1784 6
x9948:	mov [bp + 32], al	; 3: 136 70 32

printLongDoubleExpo$71:	; Call 26 printChar 0
x9951:	mov word [bp + 26], printLongDoubleExpo$72	; 5: 199 70 26 237 38
x9956:	mov [bp + 28], bp	; 3: 137 110 28
x9959:	add bp, 26	; 3: 131 197 26
x9962:	jmp printChar	; 3: 233 97 245

printLongDoubleExpo$72:	; PostCall 26

printLongDoubleExpo$73:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleExpo$74:	; IntegralToIntegral £temporary1786 expo
x9965:	mov ax, [bp + 24]	; 3: 139 70 24
x9968:	and eax, 65535	; 6: 102 37 255 255 0 0
x9974:	cmp ax, 0	; 3: 131 248 0
x9977:	jge printLongDoubleExpo$75	; 2: 125 5
x9979:	neg ax	; 2: 247 216
x9981:	neg eax	; 3: 102 247 216

printLongDoubleExpo$75:	; Parameter 26 £temporary1786 6
x9984:	mov [bp + 32], eax	; 4: 102 137 70 32

printLongDoubleExpo$76:	; Parameter 26 1 10
x9988:	mov word [bp + 36], 1	; 5: 199 70 36 1 0

printLongDoubleExpo$77:	; Parameter 26 0 12
x9993:	mov word [bp + 38], 0	; 5: 199 70 38 0 0

printLongDoubleExpo$78:	; Call 26 printLongInt 0
x9998:	mov word [bp + 26], printLongDoubleExpo$79	; 5: 199 70 26 28 39
x10003:	mov [bp + 28], bp	; 3: 137 110 28
x10006:	add bp, 26	; 3: 131 197 26
x10009:	jmp printLongInt	; 3: 233 158 244

printLongDoubleExpo$79:	; PostCall 26

printLongDoubleExpo$80:	; Return 0
x10012:	mov ax, [bp]	; 3: 139 70 0
x10015:	mov di, [bp + 4]	; 3: 139 126 4
x10018:	mov bp, [bp + 2]	; 3: 139 110 2
x10021:	jmp ax	; 2: 255 224

printLongDoubleExpo$81:	; FunctionEnd printLongDoubleExpo

@4037$float8$10.0#:
x10023:	dq 10.0	; 8: 0 0 0 0 0 0 36 64

log10:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

log10$1:	; PushFloat x
x10031:	fld qword [bp + 6]	; 3: 221 70 6

log10$2:	; Parameter 14 x 6
x10034:	fstp qword [bp + 20]	; 3: 221 94 20

log10$3:	; Call 14 log 0
x10037:	mov word [bp + 14], log10$4	; 5: 199 70 14 67 39
x10042:	mov [bp + 16], bp	; 3: 137 110 16
x10045:	add bp, 14	; 3: 131 197 14
x10048:	nop	; 1: 144
x10049:	jmp log	; 2: 235 25

log10$4:	; PostCall 14

log10$5:	; GetReturnValue £temporary340

log10$6:	; PushFloat 2.30
x10051:	fld qword [@926$float8$2.30#]	; 4: 221 6 84 39

log10$7:	; SignedDivide £temporary341 £temporary340 2.30
x10055:	fdiv	; 2: 222 249

log10$8:	; SetReturnValue £temporary341

log10$9:	; Return £temporary341
x10057:	mov ax, [bp]	; 3: 139 70 0
x10060:	mov di, [bp + 4]	; 3: 139 126 4
x10063:	mov bp, [bp + 2]	; 3: 139 110 2
x10066:	jmp ax	; 2: 255 224

log10$10:	; FunctionEnd log10

@926$float8$2.30#:
x10068:	dq 2.30	; 8: 102 102 102 102 102 102 2 64

log:	; PushFloat x
x10076:	fld qword [bp + 6]	; 3: 221 70 6

log$1:	; PushZero
x10079:	fldz	; 2: 217 238

log$2:	; SignedLessThanEqual 75 x 0
x10081:	fcompp	; 2: 222 217
x10083:	fstsw ax	; 3: 155 223 224
x10086:	sahf	; 1: 158
x10087:	jae log$75	; 4: 15 131 237 0

log$3:	; Assign n 0
x10091:	mov word [bp + 14], 0	; 5: 199 70 14 0 0

log$4:	; PushFloat x
x10096:	fld qword [bp + 6]	; 3: 221 70 6

log$5:	; PushOne
x10099:	fld1	; 2: 217 232

log$6:	; SignedLessThanEqual 16 x 1
x10101:	fcompp	; 2: 222 217
x10103:	fstsw ax	; 3: 155 223 224
x10106:	sahf	; 1: 158
x10107:	jae log$16	; 2: 115 30

log$7:	; PushFloat x
x10109:	fld qword [bp + 6]	; 3: 221 70 6

log$8:	; PushOne
x10112:	fld1	; 2: 217 232

log$9:	; SignedLessThanEqual 28 x 1
x10114:	fcompp	; 2: 222 217
x10116:	fstsw ax	; 3: 155 223 224
x10119:	sahf	; 1: 158
x10120:	jae log$28	; 2: 115 64

log$10:	; PushFloat x
x10122:	fld qword [bp + 6]	; 3: 221 70 6

log$11:	; PushFloat 2.71
x10125:	fld qword [@872$float8$2.71#]	; 4: 221 6 107 40

log$12:	; SignedDivide £temporary322 x 2.71
x10129:	fdiv	; 2: 222 249

log$13:	; PopFloat x
x10131:	fstp qword [bp + 6]	; 3: 221 94 6

log$14:	; Increment n
x10134:	inc word [bp + 14]	; 3: 255 70 14

log$15:	; Goto 7
x10137:	jmp log$7	; 2: 235 226

log$16:	; PushFloat x
x10139:	fld qword [bp + 6]	; 3: 221 70 6

log$17:	; PushFloat 0.368
x10142:	fld qword [@878$float8$0.368#]	; 4: 221 6 115 40

log$18:	; SignedGreaterThanEqual 28 x 0.368
x10146:	fcompp	; 2: 222 217
x10148:	fstsw ax	; 3: 155 223 224
x10151:	sahf	; 1: 158
x10152:	jbe log$28	; 2: 118 32

log$19:	; PushFloat x
x10154:	fld qword [bp + 6]	; 3: 221 70 6

log$20:	; PushFloat 0.368
x10157:	fld qword [@881$float8$0.368#]	; 4: 221 6 123 40

log$21:	; SignedGreaterThanEqual 28 x 0.368
x10161:	fcompp	; 2: 222 217
x10163:	fstsw ax	; 3: 155 223 224
x10166:	sahf	; 1: 158
x10167:	jbe log$28	; 2: 118 17

log$22:	; PushFloat x
x10169:	fld qword [bp + 6]	; 3: 221 70 6

log$23:	; PushFloat 2.71
x10172:	fld qword [@884$float8$2.71#]	; 4: 221 6 131 40

log$24:	; SignedMultiply £temporary326 x 2.71
x10176:	fmul	; 2: 222 201

log$25:	; PopFloat x
x10178:	fstp qword [bp + 6]	; 3: 221 94 6

log$26:	; Decrement n
x10181:	dec word [bp + 14]	; 3: 255 78 14

log$27:	; Goto 19
x10184:	jmp log$19	; 2: 235 224

log$28:	; PushOne
x10186:	fld1	; 2: 217 232

log$29:	; PopFloat index
x10188:	fstp qword [bp + 16]	; 3: 221 94 16

log$30:	; PushZero
x10191:	fldz	; 2: 217 238

log$31:	; PopFloat sum
x10193:	fstp qword [bp + 32]	; 3: 221 94 32

log$32:	; PushOne
x10196:	fld1	; 2: 217 232

log$33:	; PopFloat sign
x10198:	fstp qword [bp + 40]	; 3: 221 94 40

log$34:	; PushFloat x
x10201:	fld qword [bp + 6]	; 3: 221 70 6

log$35:	; PushOne
x10204:	fld1	; 2: 217 232

log$36:	; BinarySubtract £temporary328 x 1
x10206:	fsub	; 2: 222 233

log$37:	; PopFloat x_minus_1
x10208:	fstp qword [bp + 48]	; 3: 221 94 48

log$38:	; PushFloat x_minus_1
x10211:	fld qword [bp + 48]	; 3: 221 70 48

log$39:	; PopFloat power
x10214:	fstp qword [bp + 56]	; 3: 221 94 56

log$40:	; PushFloat sign
x10217:	fld qword [bp + 40]	; 3: 221 70 40

log$41:	; PushFloat power
x10220:	fld qword [bp + 56]	; 3: 221 70 56

log$42:	; SignedMultiply £temporary329 sign power
x10223:	fmul	; 2: 222 201

log$43:	; PushFloat index
x10225:	fld qword [bp + 16]	; 3: 221 70 16

log$44:	; PushFloat index
x10228:	fld qword [bp + 16]	; 3: 221 70 16

log$45:	; PushOne
x10231:	fld1	; 2: 217 232

log$46:	; BinaryAdd index index 1
x10233:	fadd	; 2: 222 193

log$47:	; PopFloat index
x10235:	fstp qword [bp + 16]	; 3: 221 94 16

log$48:	; SignedDivide £temporary331 £temporary329 £temporary330
x10238:	fdiv	; 2: 222 249

log$49:	; PopFloat term
x10240:	fstp qword [bp + 24]	; 3: 221 94 24

log$50:	; PushFloat sum
x10243:	fld qword [bp + 32]	; 3: 221 70 32

log$51:	; PushFloat term
x10246:	fld qword [bp + 24]	; 3: 221 70 24

log$52:	; BinaryAdd £temporary332 sum term
x10249:	fadd	; 2: 222 193

log$53:	; PopFloat sum
x10251:	fstp qword [bp + 32]	; 3: 221 94 32

log$54:	; PushFloat power
x10254:	fld qword [bp + 56]	; 3: 221 70 56

log$55:	; PushFloat x_minus_1
x10257:	fld qword [bp + 48]	; 3: 221 70 48

log$56:	; SignedMultiply £temporary333 power x_minus_1
x10260:	fmul	; 2: 222 201

log$57:	; PopFloat power
x10262:	fstp qword [bp + 56]	; 3: 221 94 56

log$58:	; PushFloat sign
x10265:	fld qword [bp + 40]	; 3: 221 70 40

log$59:	; PushFloat -1.0
x10268:	fld qword [@911$float8$minus1.0#]	; 4: 221 6 139 40

log$60:	; SignedMultiply £temporary334 sign -1.0
x10272:	fmul	; 2: 222 201

log$61:	; PopFloat sign
x10274:	fstp qword [bp + 40]	; 3: 221 94 40

log$62:	; CallHeader 64 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

log$63:	; PushFloat term
x10277:	fld qword [bp + 24]	; 3: 221 70 24

log$64:	; Parameter 64 term 6
x10280:	fstp qword [bp + 70]	; 3: 221 94 70

log$65:	; Call 64 fabs 0
x10283:	mov word [bp + 64], log$66	; 5: 199 70 64 57 40
x10288:	mov [bp + 66], bp	; 3: 137 110 66
x10291:	add bp, 64	; 3: 131 197 64
x10294:	jmp fabs	; 3: 233 196 252

log$66:	; PostCall 64

log$67:	; GetReturnValue £temporary335

log$68:	; PushFloat 0.000000001
x10297:	fld qword [@915$float8$0.000000001#]	; 4: 221 6 147 40

log$69:	; SignedGreaterThanEqual 40 £temporary335 0.000000001
x10301:	fcompp	; 2: 222 217
x10303:	fstsw ax	; 3: 155 223 224
x10306:	sahf	; 1: 158
x10307:	jbe log$40	; 2: 118 164

log$70:	; PushFloat sum
x10309:	fld qword [bp + 32]	; 3: 221 70 32

log$71:	; IntegralToFloating £temporary337 n
x10312:	fild word [bp + 14]	; 3: 223 70 14

log$72:	; BinaryAdd £temporary338 sum £temporary337
x10315:	fadd	; 2: 222 193

log$73:	; SetReturnValue £temporary338

log$74:	; Return £temporary338
x10317:	mov ax, [bp]	; 3: 139 70 0
x10320:	mov di, [bp + 4]	; 3: 139 126 4
x10323:	mov bp, [bp + 2]	; 3: 139 110 2
x10326:	jmp ax	; 2: 255 224

log$75:	; Assign errno 6
x10328:	mov word [errno], 6	; 6: 199 6 230 10 6 0

log$76:	; PushZero
x10334:	fldz	; 2: 217 238

log$77:	; SetReturnValue 0

log$78:	; Return 0
x10336:	mov ax, [bp]	; 3: 139 70 0
x10339:	mov di, [bp + 4]	; 3: 139 126 4
x10342:	mov bp, [bp + 2]	; 3: 139 110 2
x10345:	jmp ax	; 2: 255 224

log$79:	; FunctionEnd log

@872$float8$2.71#:
x10347:	dq 2.71	; 8: 174 71 225 122 20 174 5 64

@878$float8$0.368#:
x10355:	dq 0.368	; 8: 90 100 59 223 79 141 215 63

@881$float8$0.368#:
x10363:	dq 0.368	; 8: 90 100 59 223 79 141 215 63

@884$float8$2.71#:
x10371:	dq 2.71	; 8: 174 71 225 122 20 174 5 64

@911$float8$minus1.0#:
x10379:	dq -1.0	; 8: 0 0 0 0 0 0 240 191

@915$float8$0.000000001#:
x10387:	dq 0.000000001	; 8: 149 214 38 232 11 46 17 62

pow:	; PushFloat x
x10395:	fld qword [bp + 6]	; 3: 221 70 6

pow$1:	; PushZero
x10398:	fldz	; 2: 217 238

pow$2:	; SignedLessThanEqual 18 x 0
x10400:	fcompp	; 2: 222 217
x10402:	fstsw ax	; 3: 155 223 224
x10405:	sahf	; 1: 158
x10406:	jae pow$18	; 2: 115 65

pow$3:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

pow$4:	; PushFloat y
x10408:	fld qword [bp + 14]	; 3: 221 70 14

pow$5:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x10411:	fstp qword [bp + 22]	; 3: 221 94 22

pow$6:	; PushFloat x
x10414:	fld qword [bp + 6]	; 3: 221 70 6

pow$7:	; Parameter 22 x 6
x10417:	fstp qword [bp + 36]	; 3: 221 94 36

pow$8:	; Call 22 log 0
x10420:	mov word [bp + 30], pow$9	; 5: 199 70 30 194 40
x10425:	mov [bp + 32], bp	; 3: 137 110 32
x10428:	add bp, 30	; 3: 131 197 30
x10431:	jmp log	; 3: 233 154 254

pow$9:	; PostCall 22
x10434:	fstp qword [bp + 30]	; 3: 221 94 30
x10437:	fld qword [bp + 22]	; 3: 221 70 22
x10440:	fld qword [bp + 30]	; 3: 221 70 30

pow$10:	; GetReturnValue £temporary344

pow$11:	; SignedMultiply £temporary345 y £temporary344
x10443:	fmul	; 2: 222 201

pow$12:	; Parameter 22 £temporary345 6
x10445:	fstp qword [bp + 28]	; 3: 221 94 28

pow$13:	; Call 22 exp 0
x10448:	mov word [bp + 22], pow$14	; 5: 199 70 22 222 40
x10453:	mov [bp + 24], bp	; 3: 137 110 24
x10456:	add bp, 22	; 3: 131 197 22
x10459:	jmp exp	; 3: 233 102 1

pow$14:	; PostCall 22

pow$15:	; GetReturnValue £temporary346

pow$16:	; SetReturnValue £temporary346

pow$17:	; Return £temporary346
x10462:	mov ax, [bp]	; 3: 139 70 0
x10465:	mov di, [bp + 4]	; 3: 139 126 4
x10468:	mov bp, [bp + 2]	; 3: 139 110 2
x10471:	jmp ax	; 2: 255 224

pow$18:	; PushFloat x
x10473:	fld qword [bp + 6]	; 3: 221 70 6

pow$19:	; PushZero
x10476:	fldz	; 2: 217 238

pow$20:	; NotEqual 27 x 0
x10478:	fcompp	; 2: 222 217
x10480:	fstsw ax	; 3: 155 223 224
x10483:	sahf	; 1: 158
x10484:	jne pow$27	; 2: 117 26

pow$21:	; PushFloat y
x10486:	fld qword [bp + 14]	; 3: 221 70 14

pow$22:	; PushZero
x10489:	fldz	; 2: 217 238

pow$23:	; NotEqual 27 y 0
x10491:	fcompp	; 2: 222 217
x10493:	fstsw ax	; 3: 155 223 224
x10496:	sahf	; 1: 158
x10497:	jne pow$27	; 2: 117 13

pow$24:	; PushOne
x10499:	fld1	; 2: 217 232

pow$25:	; SetReturnValue 1

pow$26:	; Return 1
x10501:	mov ax, [bp]	; 3: 139 70 0
x10504:	mov di, [bp + 4]	; 3: 139 126 4
x10507:	mov bp, [bp + 2]	; 3: 139 110 2
x10510:	jmp ax	; 2: 255 224

pow$27:	; PushFloat x
x10512:	fld qword [bp + 6]	; 3: 221 70 6

pow$28:	; PushZero
x10515:	fldz	; 2: 217 238

pow$29:	; NotEqual 36 x 0
x10517:	fcompp	; 2: 222 217
x10519:	fstsw ax	; 3: 155 223 224
x10522:	sahf	; 1: 158
x10523:	jne pow$36	; 2: 117 26

pow$30:	; PushFloat y
x10525:	fld qword [bp + 14]	; 3: 221 70 14

pow$31:	; PushZero
x10528:	fldz	; 2: 217 238

pow$32:	; SignedLessThanEqual 36 y 0
x10530:	fcompp	; 2: 222 217
x10532:	fstsw ax	; 3: 155 223 224
x10535:	sahf	; 1: 158
x10536:	jae pow$36	; 2: 115 13

pow$33:	; PushZero
x10538:	fldz	; 2: 217 238

pow$34:	; SetReturnValue 0

pow$35:	; Return 0
x10540:	mov ax, [bp]	; 3: 139 70 0
x10543:	mov di, [bp + 4]	; 3: 139 126 4
x10546:	mov bp, [bp + 2]	; 3: 139 110 2
x10549:	jmp ax	; 2: 255 224

pow$36:	; PushFloat x
x10551:	fld qword [bp + 6]	; 3: 221 70 6

pow$37:	; PushZero
x10554:	fldz	; 2: 217 238

pow$38:	; SignedGreaterThanEqual 90 x 0
x10556:	fcompp	; 2: 222 217
x10558:	fstsw ax	; 3: 155 223 224
x10561:	sahf	; 1: 158
x10562:	jbe pow$90	; 4: 15 134 231 0

pow$39:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

pow$40:	; PushFloat y
x10566:	fld qword [bp + 14]	; 3: 221 70 14

pow$41:	; Parameter 22 y 6
x10569:	fstp qword [bp + 28]	; 3: 221 94 28

pow$42:	; Call 22 floor 0
x10572:	mov word [bp + 22], pow$43	; 5: 199 70 22 90 41
x10577:	mov [bp + 24], bp	; 3: 137 110 24
x10580:	add bp, 22	; 3: 131 197 22
x10583:	jmp floor	; 3: 233 104 1

pow$43:	; PostCall 22

pow$44:	; GetReturnValue £temporary354

pow$45:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x10586:	fstp qword [bp + 22]	; 3: 221 94 22

pow$46:	; PushFloat y
x10589:	fld qword [bp + 14]	; 3: 221 70 14

pow$47:	; Parameter 22 y 6
x10592:	fstp qword [bp + 36]	; 3: 221 94 36

pow$48:	; Call 22 ceil 0
x10595:	mov word [bp + 30], pow$49	; 5: 199 70 30 113 41
x10600:	mov [bp + 32], bp	; 3: 137 110 32
x10603:	add bp, 30	; 3: 131 197 30
x10606:	jmp ceil	; 3: 233 159 1

pow$49:	; PostCall 22
x10609:	fstp qword [bp + 30]	; 3: 221 94 30
x10612:	fld qword [bp + 22]	; 3: 221 70 22
x10615:	fld qword [bp + 30]	; 3: 221 70 30

pow$50:	; GetReturnValue £temporary355

pow$51:	; NotEqual 90 £temporary354 £temporary355
x10618:	fcompp	; 2: 222 217
x10620:	fstsw ax	; 3: 155 223 224
x10623:	sahf	; 1: 158
x10624:	jne pow$90	; 4: 15 133 169 0

pow$52:	; PushFloat y
x10628:	fld qword [bp + 14]	; 3: 221 70 14

pow$53:	; FloatingToIntegral £temporary358 y
x10631:	fistp dword [container4bytes#]	; 4: 219 30 81 36
x10635:	mov eax, [container4bytes#]	; 4: 102 161 81 36

pow$54:	; Assign long_y £temporary358
x10639:	mov [bp + 22], eax	; 4: 102 137 70 22

pow$55:	; SignedModulo £temporary359 long_y 2
x10643:	mov eax, [bp + 22]	; 4: 102 139 70 22
x10647:	xor edx, edx	; 3: 102 49 210
x10650:	idiv dword [@965$int4$2#]	; 5: 102 247 62 64 42

pow$56:	; NotEqual 73 £temporary359 0
x10655:	cmp edx, 0	; 4: 102 131 250 0
x10659:	jne pow$73	; 2: 117 67

pow$57:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

pow$58:	; PushFloat y
x10661:	fld qword [bp + 14]	; 3: 221 70 14

pow$59:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x10664:	fstp qword [bp + 26]	; 3: 221 94 26

pow$60:	; PushFloat x
x10667:	fld qword [bp + 6]	; 3: 221 70 6

pow$61:	; UnarySubtract £temporary361 x
x10670:	fchs	; 2: 217 224

pow$62:	; Parameter 26 £temporary361 6
x10672:	fstp qword [bp + 40]	; 3: 221 94 40

pow$63:	; Call 26 log 0
x10675:	mov word [bp + 34], pow$64	; 5: 199 70 34 193 41
x10680:	mov [bp + 36], bp	; 3: 137 110 36
x10683:	add bp, 34	; 3: 131 197 34
x10686:	jmp log	; 3: 233 155 253

pow$64:	; PostCall 26
x10689:	fstp qword [bp + 34]	; 3: 221 94 34
x10692:	fld qword [bp + 26]	; 3: 221 70 26
x10695:	fld qword [bp + 34]	; 3: 221 70 34

pow$65:	; GetReturnValue £temporary362

pow$66:	; SignedMultiply £temporary363 y £temporary362
x10698:	fmul	; 2: 222 201

pow$67:	; Parameter 26 £temporary363 6
x10700:	fstp qword [bp + 32]	; 3: 221 94 32

pow$68:	; Call 26 exp 0
x10703:	mov word [bp + 26], pow$69	; 5: 199 70 26 221 41
x10708:	mov [bp + 28], bp	; 3: 137 110 28
x10711:	add bp, 26	; 3: 131 197 26
x10714:	nop	; 1: 144
x10715:	jmp exp	; 2: 235 103

pow$69:	; PostCall 26

pow$70:	; GetReturnValue £temporary364

pow$71:	; SetReturnValue £temporary364

pow$72:	; Return £temporary364
x10717:	mov ax, [bp]	; 3: 139 70 0
x10720:	mov di, [bp + 4]	; 3: 139 126 4
x10723:	mov bp, [bp + 2]	; 3: 139 110 2
x10726:	jmp ax	; 2: 255 224

pow$73:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

pow$74:	; PushFloat y
x10728:	fld qword [bp + 14]	; 3: 221 70 14

pow$75:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x10731:	fstp qword [bp + 26]	; 3: 221 94 26

pow$76:	; PushFloat x
x10734:	fld qword [bp + 6]	; 3: 221 70 6

pow$77:	; UnarySubtract £temporary365 x
x10737:	fchs	; 2: 217 224

pow$78:	; Parameter 26 £temporary365 6
x10739:	fstp qword [bp + 40]	; 3: 221 94 40

pow$79:	; Call 26 log 0
x10742:	mov word [bp + 34], pow$80	; 5: 199 70 34 4 42
x10747:	mov [bp + 36], bp	; 3: 137 110 36
x10750:	add bp, 34	; 3: 131 197 34
x10753:	jmp log	; 3: 233 88 253

pow$80:	; PostCall 26
x10756:	fstp qword [bp + 34]	; 3: 221 94 34
x10759:	fld qword [bp + 26]	; 3: 221 70 26
x10762:	fld qword [bp + 34]	; 3: 221 70 34

pow$81:	; GetReturnValue £temporary366

pow$82:	; SignedMultiply £temporary367 y £temporary366
x10765:	fmul	; 2: 222 201

pow$83:	; Parameter 26 £temporary367 6
x10767:	fstp qword [bp + 32]	; 3: 221 94 32

pow$84:	; Call 26 exp 0
x10770:	mov word [bp + 26], pow$85	; 5: 199 70 26 32 42
x10775:	mov [bp + 28], bp	; 3: 137 110 28
x10778:	add bp, 26	; 3: 131 197 26
x10781:	nop	; 1: 144
x10782:	jmp exp	; 2: 235 36

pow$85:	; PostCall 26

pow$86:	; GetReturnValue £temporary368

pow$87:	; UnarySubtract £temporary369 £temporary368
x10784:	fchs	; 2: 217 224

pow$88:	; SetReturnValue £temporary369

pow$89:	; Return £temporary369
x10786:	mov ax, [bp]	; 3: 139 70 0
x10789:	mov di, [bp + 4]	; 3: 139 126 4
x10792:	mov bp, [bp + 2]	; 3: 139 110 2
x10795:	jmp ax	; 2: 255 224

pow$90:	; Assign errno 6
x10797:	mov word [errno], 6	; 6: 199 6 230 10 6 0

pow$91:	; PushZero
x10803:	fldz	; 2: 217 238

pow$92:	; SetReturnValue 0

pow$93:	; Return 0
x10805:	mov ax, [bp]	; 3: 139 70 0
x10808:	mov di, [bp + 4]	; 3: 139 126 4
x10811:	mov bp, [bp + 2]	; 3: 139 110 2
x10814:	jmp ax	; 2: 255 224

pow$94:	; FunctionEnd pow

@965$int4$2#:
x10816:	dd 2	; 4: 2 0 0 0

exp:	; PushOne
x10820:	fld1	; 2: 217 232

exp$1:	; PopFloat index
x10822:	fstp qword [bp + 14]	; 3: 221 94 14

exp$2:	; PushOne
x10825:	fld1	; 2: 217 232

exp$3:	; PopFloat sum
x10827:	fstp qword [bp + 30]	; 3: 221 94 30

exp$4:	; PushOne
x10830:	fld1	; 2: 217 232

exp$5:	; PopFloat faculty
x10832:	fstp qword [bp + 38]	; 3: 221 94 38

exp$6:	; PushFloat x
x10835:	fld qword [bp + 6]	; 3: 221 70 6

exp$7:	; PopFloat power
x10838:	fstp qword [bp + 46]	; 3: 221 94 46

exp$8:	; PushFloat power
x10841:	fld qword [bp + 46]	; 3: 221 70 46

exp$9:	; PushFloat faculty
x10844:	fld qword [bp + 38]	; 3: 221 70 38

exp$10:	; SignedDivide £temporary310 power faculty
x10847:	fdiv	; 2: 222 249

exp$11:	; PopFloat term
x10849:	fstp qword [bp + 22]	; 3: 221 94 22

exp$12:	; PushFloat sum
x10852:	fld qword [bp + 30]	; 3: 221 70 30

exp$13:	; PushFloat term
x10855:	fld qword [bp + 22]	; 3: 221 70 22

exp$14:	; BinaryAdd £temporary311 sum term
x10858:	fadd	; 2: 222 193

exp$15:	; PopFloat sum
x10860:	fstp qword [bp + 30]	; 3: 221 94 30

exp$16:	; PushFloat power
x10863:	fld qword [bp + 46]	; 3: 221 70 46

exp$17:	; PushFloat x
x10866:	fld qword [bp + 6]	; 3: 221 70 6

exp$18:	; SignedMultiply £temporary312 power x
x10869:	fmul	; 2: 222 201

exp$19:	; PopFloat power
x10871:	fstp qword [bp + 46]	; 3: 221 94 46

exp$20:	; PushFloat faculty
x10874:	fld qword [bp + 38]	; 3: 221 70 38

exp$21:	; PushFloat index
x10877:	fld qword [bp + 14]	; 3: 221 70 14

exp$22:	; PushOne
x10880:	fld1	; 2: 217 232

exp$23:	; BinaryAdd £temporary314 index £temporary313
x10882:	fadd	; 2: 222 193

exp$24:	; TopFloat index
x10884:	fst qword [bp + 14]	; 3: 221 86 14

exp$25:	; SignedMultiply £temporary315 faculty index
x10887:	fmul	; 2: 222 201

exp$26:	; PopFloat faculty
x10889:	fstp qword [bp + 38]	; 3: 221 94 38

exp$27:	; CallHeader 54 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

exp$28:	; PushFloat term
x10892:	fld qword [bp + 22]	; 3: 221 70 22

exp$29:	; Parameter 54 term 6
x10895:	fstp qword [bp + 60]	; 3: 221 94 60

exp$30:	; Call 54 fabs 0
x10898:	mov word [bp + 54], exp$31	; 5: 199 70 54 160 42
x10903:	mov [bp + 56], bp	; 3: 137 110 56
x10906:	add bp, 54	; 3: 131 197 54
x10909:	jmp fabs	; 3: 233 93 250

exp$31:	; PostCall 54

exp$32:	; GetReturnValue £temporary316

exp$33:	; PushFloat 0.000000001
x10912:	fld qword [@855$float8$0.000000001#]	; 4: 221 6 186 42

exp$34:	; SignedGreaterThanEqual 8 £temporary316 0.000000001
x10916:	fcompp	; 2: 222 217
x10918:	fstsw ax	; 3: 155 223 224
x10921:	sahf	; 1: 158
x10922:	jbe exp$8	; 2: 118 173

exp$35:	; PushFloat sum
x10924:	fld qword [bp + 30]	; 3: 221 70 30

exp$36:	; SetReturnValue sum

exp$37:	; Return sum
x10927:	mov ax, [bp]	; 3: 139 70 0
x10930:	mov di, [bp + 4]	; 3: 139 126 4
x10933:	mov bp, [bp + 2]	; 3: 139 110 2
x10936:	jmp ax	; 2: 255 224

exp$38:	; FunctionEnd exp

@855$float8$0.000000001#:
x10938:	dq 0.000000001	; 8: 149 214 38 232 11 46 17 62

floor:	; PushFloat x
x10946:	fld qword [bp + 6]	; 3: 221 70 6

floor$1:	; PushZero
x10949:	fldz	; 2: 217 238

floor$2:	; SignedGreaterThanEqual 13 x 0
x10951:	fcompp	; 2: 222 217
x10953:	fstsw ax	; 3: 155 223 224
x10956:	sahf	; 1: 158
x10957:	jbe floor$13	; 2: 118 35

floor$3:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

floor$4:	; PushFloat x
x10959:	fld qword [bp + 6]	; 3: 221 70 6

floor$5:	; UnarySubtract £temporary599 x
x10962:	fchs	; 2: 217 224

floor$6:	; Parameter 14 £temporary599 6
x10964:	fstp qword [bp + 20]	; 3: 221 94 20

floor$7:	; Call 14 ceil 0
x10967:	mov word [bp + 14], floor$8	; 5: 199 70 14 229 42
x10972:	mov [bp + 16], bp	; 3: 137 110 16
x10975:	add bp, 14	; 3: 131 197 14
x10978:	nop	; 1: 144
x10979:	jmp ceil	; 2: 235 43

floor$8:	; PostCall 14

floor$9:	; GetReturnValue £temporary600

floor$10:	; UnarySubtract £temporary601 £temporary600
x10981:	fchs	; 2: 217 224

floor$11:	; SetReturnValue £temporary601

floor$12:	; Return £temporary601
x10983:	mov ax, [bp]	; 3: 139 70 0
x10986:	mov di, [bp + 4]	; 3: 139 126 4
x10989:	mov bp, [bp + 2]	; 3: 139 110 2
x10992:	jmp ax	; 2: 255 224

floor$13:	; PushFloat x
x10994:	fld qword [bp + 6]	; 3: 221 70 6

floor$14:	; FloatingToIntegral £temporary602 x
x10997:	fistp dword [container4bytes#]	; 4: 219 30 81 36
x11001:	mov eax, [container4bytes#]	; 4: 102 161 81 36

floor$15:	; IntegralToFloating £temporary603 £temporary602
x11005:	mov [container4bytes#], eax	; 4: 102 163 81 36
x11009:	fild dword [container4bytes#]	; 4: 219 6 81 36

floor$16:	; SetReturnValue £temporary603

floor$17:	; Return £temporary603
x11013:	mov ax, [bp]	; 3: 139 70 0
x11016:	mov di, [bp + 4]	; 3: 139 126 4
x11019:	mov bp, [bp + 2]	; 3: 139 110 2
x11022:	jmp ax	; 2: 255 224

floor$18:	; FunctionEnd floor

ceil:	; PushFloat x
x11024:	fld qword [bp + 6]	; 3: 221 70 6

ceil$1:	; PushZero
x11027:	fldz	; 2: 217 238

ceil$2:	; SignedGreaterThanEqual 13 x 0
x11029:	fcompp	; 2: 222 217
x11031:	fstsw ax	; 3: 155 223 224
x11034:	sahf	; 1: 158
x11035:	jbe ceil$13	; 2: 118 35

ceil$3:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

ceil$4:	; PushFloat x
x11037:	fld qword [bp + 6]	; 3: 221 70 6

ceil$5:	; UnarySubtract £temporary606 x
x11040:	fchs	; 2: 217 224

ceil$6:	; Parameter 14 £temporary606 6
x11042:	fstp qword [bp + 20]	; 3: 221 94 20

ceil$7:	; Call 14 floor 0
x11045:	mov word [bp + 14], ceil$8	; 5: 199 70 14 51 43
x11050:	mov [bp + 16], bp	; 3: 137 110 16
x11053:	add bp, 14	; 3: 131 197 14
x11056:	nop	; 1: 144
x11057:	jmp floor	; 2: 235 143

ceil$8:	; PostCall 14

ceil$9:	; GetReturnValue £temporary607

ceil$10:	; UnarySubtract £temporary608 £temporary607
x11059:	fchs	; 2: 217 224

ceil$11:	; SetReturnValue £temporary608

ceil$12:	; Return £temporary608
x11061:	mov ax, [bp]	; 3: 139 70 0
x11064:	mov di, [bp + 4]	; 3: 139 126 4
x11067:	mov bp, [bp + 2]	; 3: 139 110 2
x11070:	jmp ax	; 2: 255 224

ceil$13:	; PushFloat x
x11072:	fld qword [bp + 6]	; 3: 221 70 6

ceil$14:	; PushFloat 0.999999999999
x11075:	fld qword [@1467$float8$0.999999999999#]	; 4: 221 6 100 43

ceil$15:	; BinaryAdd £temporary609 x 0.999999999999
x11079:	fadd	; 2: 222 193

ceil$16:	; FloatingToIntegral £temporary610 £temporary609
x11081:	fistp dword [container4bytes#]	; 4: 219 30 81 36
x11085:	mov eax, [container4bytes#]	; 4: 102 161 81 36

ceil$17:	; IntegralToFloating £temporary611 £temporary610
x11089:	mov [container4bytes#], eax	; 4: 102 163 81 36
x11093:	fild dword [container4bytes#]	; 4: 219 6 81 36

ceil$18:	; SetReturnValue £temporary611

ceil$19:	; Return £temporary611
x11097:	mov ax, [bp]	; 3: 139 70 0
x11100:	mov di, [bp + 4]	; 3: 139 126 4
x11103:	mov bp, [bp + 2]	; 3: 139 110 2
x11106:	jmp ax	; 2: 255 224

ceil$20:	; FunctionEnd ceil

@1467$float8$0.999999999999#:
x11108:	dq 0.999999999999	; 8: 209 220 255 255 255 255 239 63

isdigit:	; SignedLessThan 4 c 48
x11116:	cmp word [bp + 6], 48	; 4: 131 126 6 48
x11120:	jl isdigit$4	; 2: 124 11

isdigit$1:	; SignedGreaterThan 4 c 57
x11122:	cmp word [bp + 6], 57	; 4: 131 126 6 57
x11126:	jg isdigit$4	; 2: 127 5

isdigit$2:	; Assign £temporary195 1
x11128:	mov bx, 1	; 3: 187 1 0

isdigit$3:	; Goto 5
x11131:	jmp isdigit$5	; 2: 235 3

isdigit$4:	; Assign £temporary195 0
x11133:	mov bx, 0	; 3: 187 0 0

isdigit$5:	; SetReturnValue £temporary195

isdigit$6:	; Return £temporary195
x11136:	mov ax, [bp]	; 3: 139 70 0
x11139:	mov di, [bp + 4]	; 3: 139 126 4
x11142:	mov bp, [bp + 2]	; 3: 139 110 2
x11145:	jmp ax	; 2: 255 224

isdigit$7:	; FunctionEnd isdigit

sin:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

sin$1:	; PushFloat x
x11147:	fld qword [bp + 6]	; 3: 221 70 6

sin$2:	; Parameter 14 x 6
x11150:	fstp qword [bp + 20]	; 3: 221 94 20

sin$3:	; Call 14 fabs 0
x11153:	mov word [bp + 14], sin$4	; 5: 199 70 14 159 43
x11158:	mov [bp + 16], bp	; 3: 137 110 16
x11161:	add bp, 14	; 3: 131 197 14
x11164:	jmp fabs	; 3: 233 94 249

sin$4:	; PostCall 14

sin$5:	; GetReturnValue £temporary449

sin$6:	; PushFloat 6.28
x11167:	fld qword [@1129$float8$6.28#]	; 4: 221 6 102 44

sin$7:	; SignedLessThanEqual 17 £temporary449 6.28
x11171:	fcompp	; 2: 222 217
x11173:	fstsw ax	; 3: 155 223 224
x11176:	sahf	; 1: 158
x11177:	jae sin$17	; 2: 115 30

sin$8:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

sin$9:	; PushFloat x
x11179:	fld qword [bp + 6]	; 3: 221 70 6

sin$10:	; Parameter 14 x 6
x11182:	fstp qword [bp + 20]	; 3: 221 94 20

sin$11:	; PushFloat 6.28
x11185:	fld qword [@1134$float8$6.28#]	; 4: 221 6 110 44

sin$12:	; Parameter 14 6.28 14
x11189:	fstp qword [bp + 28]	; 3: 221 94 28

sin$13:	; Call 14 fmod 0
x11192:	mov word [bp + 14], sin$14	; 5: 199 70 14 198 43
x11197:	mov [bp + 16], bp	; 3: 137 110 16
x11200:	add bp, 14	; 3: 131 197 14
x11203:	jmp fmod	; 3: 233 192 0

sin$14:	; PostCall 14

sin$15:	; GetReturnValue £temporary451

sin$16:	; PopFloat x
x11206:	fstp qword [bp + 6]	; 3: 221 94 6

sin$17:	; PushOne
x11209:	fld1	; 2: 217 232

sin$18:	; PopFloat index
x11211:	fstp qword [bp + 14]	; 3: 221 94 14

sin$19:	; PushZero
x11214:	fldz	; 2: 217 238

sin$20:	; PopFloat sum
x11216:	fstp qword [bp + 30]	; 3: 221 94 30

sin$21:	; PushOne
x11219:	fld1	; 2: 217 232

sin$22:	; PopFloat sign
x11221:	fstp qword [bp + 38]	; 3: 221 94 38

sin$23:	; PushFloat x
x11224:	fld qword [bp + 6]	; 3: 221 70 6

sin$24:	; PopFloat power
x11227:	fstp qword [bp + 46]	; 3: 221 94 46

sin$25:	; PushOne
x11230:	fld1	; 2: 217 232

sin$26:	; PopFloat faculty
x11232:	fstp qword [bp + 54]	; 3: 221 94 54

sin$27:	; PushFloat sign
x11235:	fld qword [bp + 38]	; 3: 221 70 38

sin$28:	; PushFloat power
x11238:	fld qword [bp + 46]	; 3: 221 70 46

sin$29:	; SignedMultiply £temporary452 sign power
x11241:	fmul	; 2: 222 201

sin$30:	; PushFloat faculty
x11243:	fld qword [bp + 54]	; 3: 221 70 54

sin$31:	; SignedDivide £temporary453 £temporary452 faculty
x11246:	fdiv	; 2: 222 249

sin$32:	; PopFloat term
x11248:	fstp qword [bp + 22]	; 3: 221 94 22

sin$33:	; PushFloat sum
x11251:	fld qword [bp + 30]	; 3: 221 70 30

sin$34:	; PushFloat term
x11254:	fld qword [bp + 22]	; 3: 221 70 22

sin$35:	; BinaryAdd £temporary454 sum term
x11257:	fadd	; 2: 222 193

sin$36:	; PopFloat sum
x11259:	fstp qword [bp + 30]	; 3: 221 94 30

sin$37:	; PushFloat sign
x11262:	fld qword [bp + 38]	; 3: 221 70 38

sin$38:	; PushFloat -1
x11265:	fld qword [@1156$float8$minus1#]	; 4: 221 6 118 44

sin$39:	; SignedMultiply £temporary455 sign -1
x11269:	fmul	; 2: 222 201

sin$40:	; PopFloat sign
x11271:	fstp qword [bp + 38]	; 3: 221 94 38

sin$41:	; PushFloat power
x11274:	fld qword [bp + 46]	; 3: 221 70 46

sin$42:	; PushFloat x
x11277:	fld qword [bp + 6]	; 3: 221 70 6

sin$43:	; PushFloat x
x11280:	fld qword [bp + 6]	; 3: 221 70 6

sin$44:	; SignedMultiply £temporary456 x x
x11283:	fmul	; 2: 222 201

sin$45:	; SignedMultiply £temporary457 power £temporary456
x11285:	fmul	; 2: 222 201

sin$46:	; PopFloat power
x11287:	fstp qword [bp + 46]	; 3: 221 94 46

sin$47:	; PushFloat faculty
x11290:	fld qword [bp + 54]	; 3: 221 70 54

sin$48:	; PushFloat index
x11293:	fld qword [bp + 14]	; 3: 221 70 14

sin$49:	; PushOne
x11296:	fld1	; 2: 217 232

sin$50:	; BinaryAdd £temporary459 index £temporary458
x11298:	fadd	; 2: 222 193

sin$51:	; TopFloat index
x11300:	fst qword [bp + 14]	; 3: 221 86 14

sin$52:	; PushFloat index
x11303:	fld qword [bp + 14]	; 3: 221 70 14

sin$53:	; PushOne
x11306:	fld1	; 2: 217 232

sin$54:	; BinaryAdd £temporary461 index £temporary460
x11308:	fadd	; 2: 222 193

sin$55:	; TopFloat index
x11310:	fst qword [bp + 14]	; 3: 221 86 14

sin$56:	; SignedMultiply £temporary462 index index
x11313:	fmul	; 2: 222 201

sin$57:	; SignedMultiply £temporary463 faculty £temporary462
x11315:	fmul	; 2: 222 201

sin$58:	; PopFloat faculty
x11317:	fstp qword [bp + 54]	; 3: 221 94 54

sin$59:	; CallHeader 62 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

sin$60:	; PushFloat term
x11320:	fld qword [bp + 22]	; 3: 221 70 22

sin$61:	; Parameter 62 term 6
x11323:	fstp qword [bp + 68]	; 3: 221 94 68

sin$62:	; Call 62 fabs 0
x11326:	mov word [bp + 62], sin$63	; 5: 199 70 62 76 44
x11331:	mov [bp + 64], bp	; 3: 137 110 64
x11334:	add bp, 62	; 3: 131 197 62
x11337:	jmp fabs	; 3: 233 177 248

sin$63:	; PostCall 62

sin$64:	; GetReturnValue £temporary464

sin$65:	; PushFloat 0.000000001
x11340:	fld qword [@1167$float8$0.000000001#]	; 4: 221 6 126 44

sin$66:	; SignedGreaterThanEqual 27 £temporary464 0.000000001
x11344:	fcompp	; 2: 222 217
x11346:	fstsw ax	; 3: 155 223 224
x11349:	sahf	; 1: 158
x11350:	jbe sin$27	; 2: 118 139

sin$67:	; PushFloat sum
x11352:	fld qword [bp + 30]	; 3: 221 70 30

sin$68:	; SetReturnValue sum

sin$69:	; Return sum
x11355:	mov ax, [bp]	; 3: 139 70 0
x11358:	mov di, [bp + 4]	; 3: 139 126 4
x11361:	mov bp, [bp + 2]	; 3: 139 110 2
x11364:	jmp ax	; 2: 255 224

sin$70:	; FunctionEnd sin

@1129$float8$6.28#:
x11366:	dq 6.28	; 8: 31 133 235 81 184 30 25 64

@1134$float8$6.28#:
x11374:	dq 6.28	; 8: 31 133 235 81 184 30 25 64

@1156$float8$minus1#:
x11382:	dq -1.0	; 8: 0 0 0 0 0 0 240 191

@1167$float8$0.000000001#:
x11390:	dq 0.000000001	; 8: 149 214 38 232 11 46 17 62

fmod:	; PushFloat y
x11398:	fld qword [bp + 14]	; 3: 221 70 14

fmod$1:	; PushZero
x11401:	fldz	; 2: 217 238

fmod$2:	; Equal 28 y 0
x11403:	fcompp	; 2: 222 217
x11405:	fstsw ax	; 3: 155 223 224
x11408:	sahf	; 1: 158
x11409:	je fmod$28	; 2: 116 86

fmod$3:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

fmod$4:	; PushFloat x
x11411:	fld qword [bp + 6]	; 3: 221 70 6

fmod$5:	; PushFloat y
x11414:	fld qword [bp + 14]	; 3: 221 70 14

fmod$6:	; PushFloat x
x11417:	fld qword [bp + 6]	; 3: 221 70 6

fmod$7:	; PushFloat y
x11420:	fld qword [bp + 14]	; 3: 221 70 14

fmod$8:	; SignedDivide £temporary436 x y
x11423:	fdiv	; 2: 222 249

fmod$9:	; FloatingToIntegral £temporary437 £temporary436
x11425:	fistp word [container2bytes#]	; 4: 223 30 77 27
x11429:	mov ax, [container2bytes#]	; 3: 161 77 27

fmod$10:	; IntegralToFloating £temporary438 £temporary437
x11432:	mov [container2bytes#], ax	; 3: 163 77 27
x11435:	fild word [container2bytes#]	; 4: 223 6 77 27

fmod$11:	; SignedMultiply £temporary439 y £temporary438
x11439:	fmul	; 2: 222 201

fmod$12:	; BinarySubtract £temporary440 x £temporary439
x11441:	fsub	; 2: 222 233

fmod$13:	; Parameter 22 £temporary440 6
x11443:	fstp qword [bp + 28]	; 3: 221 94 28

fmod$14:	; Call 22 fabs 0
x11446:	mov word [bp + 22], fmod$15	; 5: 199 70 22 196 44
x11451:	mov [bp + 24], bp	; 3: 137 110 24
x11454:	add bp, 22	; 3: 131 197 22
x11457:	jmp fabs	; 3: 233 57 248

fmod$15:	; PostCall 22

fmod$16:	; GetReturnValue £temporary441

fmod$17:	; PopFloat remainder
x11460:	fstp qword [bp + 22]	; 3: 221 94 22

fmod$18:	; PushFloat x
x11463:	fld qword [bp + 6]	; 3: 221 70 6

fmod$19:	; PushZero
x11466:	fldz	; 2: 217 238

fmod$20:	; SignedLessThanEqual 24 x 0
x11468:	fcompp	; 2: 222 217
x11470:	fstsw ax	; 3: 155 223 224
x11473:	sahf	; 1: 158
x11474:	jae fmod$24	; 2: 115 5

fmod$21:	; PushFloat remainder
x11476:	fld qword [bp + 22]	; 3: 221 70 22

fmod$22:	; DecreaseStack

fmod$23:	; Goto 26
x11479:	jmp fmod$26	; 2: 235 5

fmod$24:	; PushFloat remainder
x11481:	fld qword [bp + 22]	; 3: 221 70 22

fmod$25:	; UnarySubtract £temporary443 remainder
x11484:	fchs	; 2: 217 224

fmod$26:	; SetReturnValue £temporary447

fmod$27:	; Return £temporary447
x11486:	mov ax, [bp]	; 3: 139 70 0
x11489:	mov di, [bp + 4]	; 3: 139 126 4
x11492:	mov bp, [bp + 2]	; 3: 139 110 2
x11495:	jmp ax	; 2: 255 224

fmod$28:	; Assign errno 6
x11497:	mov word [errno], 6	; 6: 199 6 230 10 6 0

fmod$29:	; PushZero
x11503:	fldz	; 2: 217 238

fmod$30:	; SetReturnValue 0

fmod$31:	; Return 0
x11505:	mov ax, [bp]	; 3: 139 70 0
x11508:	mov di, [bp + 4]	; 3: 139 126 4
x11511:	mov bp, [bp + 2]	; 3: 139 110 2
x11514:	jmp ax	; 2: 255 224

fmod$32:	; FunctionEnd fmod

cos:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

cos$1:	; PushFloat x
x11516:	fld qword [bp + 6]	; 3: 221 70 6

cos$2:	; Parameter 14 x 6
x11519:	fstp qword [bp + 20]	; 3: 221 94 20

cos$3:	; Call 14 fabs 0
x11522:	mov word [bp + 14], cos$4	; 5: 199 70 14 16 45
x11527:	mov [bp + 16], bp	; 3: 137 110 16
x11530:	add bp, 14	; 3: 131 197 14
x11533:	jmp fabs	; 3: 233 237 247

cos$4:	; PostCall 14

cos$5:	; GetReturnValue £temporary470

cos$6:	; PushFloat 6.28
x11536:	fld qword [@1178$float8$6.28#]	; 4: 221 6 214 45

cos$7:	; SignedLessThanEqual 17 £temporary470 6.28
x11540:	fcompp	; 2: 222 217
x11542:	fstsw ax	; 3: 155 223 224
x11545:	sahf	; 1: 158
x11546:	jae cos$17	; 2: 115 30

cos$8:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

cos$9:	; PushFloat x
x11548:	fld qword [bp + 6]	; 3: 221 70 6

cos$10:	; Parameter 14 x 6
x11551:	fstp qword [bp + 20]	; 3: 221 94 20

cos$11:	; PushFloat 6.28
x11554:	fld qword [@1183$float8$6.28#]	; 4: 221 6 222 45

cos$12:	; Parameter 14 6.28 14
x11558:	fstp qword [bp + 28]	; 3: 221 94 28

cos$13:	; Call 14 fmod 0
x11561:	mov word [bp + 14], cos$14	; 5: 199 70 14 55 45
x11566:	mov [bp + 16], bp	; 3: 137 110 16
x11569:	add bp, 14	; 3: 131 197 14
x11572:	jmp fmod	; 3: 233 79 255

cos$14:	; PostCall 14

cos$15:	; GetReturnValue £temporary472

cos$16:	; PopFloat x
x11575:	fstp qword [bp + 6]	; 3: 221 94 6

cos$17:	; PushZero
x11578:	fldz	; 2: 217 238

cos$18:	; PopFloat index
x11580:	fstp qword [bp + 14]	; 3: 221 94 14

cos$19:	; PushZero
x11583:	fldz	; 2: 217 238

cos$20:	; PopFloat sum
x11585:	fstp qword [bp + 30]	; 3: 221 94 30

cos$21:	; PushOne
x11588:	fld1	; 2: 217 232

cos$22:	; PopFloat sign
x11590:	fstp qword [bp + 38]	; 3: 221 94 38

cos$23:	; PushOne
x11593:	fld1	; 2: 217 232

cos$24:	; PopFloat power
x11595:	fstp qword [bp + 46]	; 3: 221 94 46

cos$25:	; PushOne
x11598:	fld1	; 2: 217 232

cos$26:	; PopFloat faculty
x11600:	fstp qword [bp + 54]	; 3: 221 94 54

cos$27:	; PushFloat sign
x11603:	fld qword [bp + 38]	; 3: 221 70 38

cos$28:	; PushFloat power
x11606:	fld qword [bp + 46]	; 3: 221 70 46

cos$29:	; SignedMultiply £temporary473 sign power
x11609:	fmul	; 2: 222 201

cos$30:	; PushFloat faculty
x11611:	fld qword [bp + 54]	; 3: 221 70 54

cos$31:	; SignedDivide £temporary474 £temporary473 faculty
x11614:	fdiv	; 2: 222 249

cos$32:	; PopFloat term
x11616:	fstp qword [bp + 22]	; 3: 221 94 22

cos$33:	; PushFloat sum
x11619:	fld qword [bp + 30]	; 3: 221 70 30

cos$34:	; PushFloat term
x11622:	fld qword [bp + 22]	; 3: 221 70 22

cos$35:	; BinaryAdd £temporary475 sum term
x11625:	fadd	; 2: 222 193

cos$36:	; PopFloat sum
x11627:	fstp qword [bp + 30]	; 3: 221 94 30

cos$37:	; PushFloat sign
x11630:	fld qword [bp + 38]	; 3: 221 70 38

cos$38:	; PushFloat -1
x11633:	fld qword [@1207$float8$minus1#]	; 4: 221 6 230 45

cos$39:	; SignedMultiply £temporary476 sign -1
x11637:	fmul	; 2: 222 201

cos$40:	; PopFloat sign
x11639:	fstp qword [bp + 38]	; 3: 221 94 38

cos$41:	; PushFloat power
x11642:	fld qword [bp + 46]	; 3: 221 70 46

cos$42:	; PushFloat x
x11645:	fld qword [bp + 6]	; 3: 221 70 6

cos$43:	; PushFloat x
x11648:	fld qword [bp + 6]	; 3: 221 70 6

cos$44:	; SignedMultiply £temporary477 x x
x11651:	fmul	; 2: 222 201

cos$45:	; SignedMultiply £temporary478 power £temporary477
x11653:	fmul	; 2: 222 201

cos$46:	; PopFloat power
x11655:	fstp qword [bp + 46]	; 3: 221 94 46

cos$47:	; PushFloat faculty
x11658:	fld qword [bp + 54]	; 3: 221 70 54

cos$48:	; PushFloat index
x11661:	fld qword [bp + 14]	; 3: 221 70 14

cos$49:	; PushOne
x11664:	fld1	; 2: 217 232

cos$50:	; BinaryAdd £temporary480 index £temporary479
x11666:	fadd	; 2: 222 193

cos$51:	; TopFloat index
x11668:	fst qword [bp + 14]	; 3: 221 86 14

cos$52:	; PushFloat index
x11671:	fld qword [bp + 14]	; 3: 221 70 14

cos$53:	; PushOne
x11674:	fld1	; 2: 217 232

cos$54:	; BinaryAdd £temporary482 index £temporary481
x11676:	fadd	; 2: 222 193

cos$55:	; TopFloat index
x11678:	fst qword [bp + 14]	; 3: 221 86 14

cos$56:	; SignedMultiply £temporary483 index index
x11681:	fmul	; 2: 222 201

cos$57:	; SignedMultiply £temporary484 faculty £temporary483
x11683:	fmul	; 2: 222 201

cos$58:	; PopFloat faculty
x11685:	fstp qword [bp + 54]	; 3: 221 94 54

cos$59:	; CallHeader 62 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

cos$60:	; PushFloat term
x11688:	fld qword [bp + 22]	; 3: 221 70 22

cos$61:	; Parameter 62 term 6
x11691:	fstp qword [bp + 68]	; 3: 221 94 68

cos$62:	; Call 62 fabs 0
x11694:	mov word [bp + 62], cos$63	; 5: 199 70 62 188 45
x11699:	mov [bp + 64], bp	; 3: 137 110 64
x11702:	add bp, 62	; 3: 131 197 62
x11705:	jmp fabs	; 3: 233 65 247

cos$63:	; PostCall 62

cos$64:	; GetReturnValue £temporary485

cos$65:	; PushFloat 0.000000001
x11708:	fld qword [@1218$float8$0.000000001#]	; 4: 221 6 238 45

cos$66:	; SignedGreaterThanEqual 27 £temporary485 0.000000001
x11712:	fcompp	; 2: 222 217
x11714:	fstsw ax	; 3: 155 223 224
x11717:	sahf	; 1: 158
x11718:	jbe cos$27	; 2: 118 139

cos$67:	; PushFloat sum
x11720:	fld qword [bp + 30]	; 3: 221 70 30

cos$68:	; SetReturnValue sum

cos$69:	; Return sum
x11723:	mov ax, [bp]	; 3: 139 70 0
x11726:	mov di, [bp + 4]	; 3: 139 126 4
x11729:	mov bp, [bp + 2]	; 3: 139 110 2
x11732:	jmp ax	; 2: 255 224

cos$70:	; FunctionEnd cos

@1178$float8$6.28#:
x11734:	dq 6.28	; 8: 31 133 235 81 184 30 25 64

@1183$float8$6.28#:
x11742:	dq 6.28	; 8: 31 133 235 81 184 30 25 64

@1207$float8$minus1#:
x11750:	dq -1.0	; 8: 0 0 0 0 0 0 240 191

@1218$float8$0.000000001#:
x11758:	dq 0.000000001	; 8: 149 214 38 232 11 46 17 62

tan:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

tan$1:	; PushFloat x
x11766:	fld qword [bp + 6]	; 3: 221 70 6

tan$2:	; Parameter 14 x 6
x11769:	fstp qword [bp + 20]	; 3: 221 94 20

tan$3:	; Call 14 cos 0
x11772:	mov word [bp + 14], tan$4	; 5: 199 70 14 10 46
x11777:	mov [bp + 16], bp	; 3: 137 110 16
x11780:	add bp, 14	; 3: 131 197 14
x11783:	jmp cos	; 3: 233 242 254

tan$4:	; PostCall 14

tan$5:	; GetReturnValue £temporary491

tan$6:	; PopFloat cos_of_x
x11786:	fstp qword [bp + 14]	; 3: 221 94 14

tan$7:	; PushFloat cos_of_x
x11789:	fld qword [bp + 14]	; 3: 221 70 14

tan$8:	; PushZero
x11792:	fldz	; 2: 217 238

tan$9:	; Equal 20 cos_of_x 0
x11794:	fcompp	; 2: 222 217
x11796:	fstsw ax	; 3: 155 223 224
x11799:	sahf	; 1: 158
x11800:	je tan$20	; 2: 116 36

tan$10:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

tan$11:	; PushFloat x
x11802:	fld qword [bp + 6]	; 3: 221 70 6

tan$12:	; Parameter 22 x 6
x11805:	fstp qword [bp + 28]	; 3: 221 94 28

tan$13:	; Call 22 sin 0
x11808:	mov word [bp + 22], tan$14	; 5: 199 70 22 46 46
x11813:	mov [bp + 24], bp	; 3: 137 110 24
x11816:	add bp, 22	; 3: 131 197 22
x11819:	jmp sin	; 3: 233 93 253

tan$14:	; PostCall 22

tan$15:	; GetReturnValue £temporary493

tan$16:	; PushFloat cos_of_x
x11822:	fld qword [bp + 14]	; 3: 221 70 14

tan$17:	; SignedDivide £temporary494 £temporary493 cos_of_x
x11825:	fdiv	; 2: 222 249

tan$18:	; SetReturnValue £temporary494

tan$19:	; Return £temporary494
x11827:	mov ax, [bp]	; 3: 139 70 0
x11830:	mov di, [bp + 4]	; 3: 139 126 4
x11833:	mov bp, [bp + 2]	; 3: 139 110 2
x11836:	jmp ax	; 2: 255 224

tan$20:	; Assign errno 6
x11838:	mov word [errno], 6	; 6: 199 6 230 10 6 0

tan$21:	; PushZero
x11844:	fldz	; 2: 217 238

tan$22:	; SetReturnValue 0

tan$23:	; Return 0
x11846:	mov ax, [bp]	; 3: 139 70 0
x11849:	mov di, [bp + 4]	; 3: 139 126 4
x11852:	mov bp, [bp + 2]	; 3: 139 110 2
x11855:	jmp ax	; 2: 255 224

tan$24:	; FunctionEnd tan

asin:	; PushFloat x
x11857:	fld qword [bp + 6]	; 3: 221 70 6

asin$1:	; PushOne
x11860:	fld1	; 2: 217 232

asin$2:	; NotEqual 6 x 1
x11862:	fcompp	; 2: 222 217
x11864:	fstsw ax	; 3: 155 223 224
x11867:	sahf	; 1: 158
x11868:	jne asin$6	; 2: 117 15

asin$3:	; PushFloat 1.57
x11870:	fld qword [@1244$float8$1.57#]	; 4: 221 6 7 47

asin$4:	; SetReturnValue 1.57

asin$5:	; Return 1.57
x11874:	mov ax, [bp]	; 3: 139 70 0
x11877:	mov di, [bp + 4]	; 3: 139 126 4
x11880:	mov bp, [bp + 2]	; 3: 139 110 2
x11883:	jmp ax	; 2: 255 224

asin$6:	; PushFloat x
x11885:	fld qword [bp + 6]	; 3: 221 70 6

asin$7:	; PushZero
x11888:	fldz	; 2: 217 238

asin$8:	; SignedGreaterThanEqual 19 x 0
x11890:	fcompp	; 2: 222 217
x11892:	fstsw ax	; 3: 155 223 224
x11895:	sahf	; 1: 158
x11896:	jbe asin$19	; 2: 118 35

asin$9:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

asin$10:	; PushFloat x
x11898:	fld qword [bp + 6]	; 3: 221 70 6

asin$11:	; UnarySubtract £temporary499 x
x11901:	fchs	; 2: 217 224

asin$12:	; Parameter 14 £temporary499 6
x11903:	fstp qword [bp + 20]	; 3: 221 94 20

asin$13:	; Call 14 asin 0
x11906:	mov word [bp + 14], asin$14	; 5: 199 70 14 144 46
x11911:	mov [bp + 16], bp	; 3: 137 110 16
x11914:	add bp, 14	; 3: 131 197 14
x11917:	nop	; 1: 144
x11918:	jmp asin	; 2: 235 193

asin$14:	; PostCall 14

asin$15:	; GetReturnValue £temporary500

asin$16:	; UnarySubtract £temporary501 £temporary500
x11920:	fchs	; 2: 217 224

asin$17:	; SetReturnValue £temporary501

asin$18:	; Return £temporary501
x11922:	mov ax, [bp]	; 3: 139 70 0
x11925:	mov di, [bp + 4]	; 3: 139 126 4
x11928:	mov bp, [bp + 2]	; 3: 139 110 2
x11931:	jmp ax	; 2: 255 224

asin$19:	; PushFloat x
x11933:	fld qword [bp + 6]	; 3: 221 70 6

asin$20:	; PushOne
x11936:	fld1	; 2: 217 232

asin$21:	; SignedGreaterThanEqual 41 x 1
x11938:	fcompp	; 2: 222 217
x11940:	fstsw ax	; 3: 155 223 224
x11943:	sahf	; 1: 158
x11944:	jbe asin$41	; 2: 118 74

asin$22:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

asin$23:	; PushFloat x
x11946:	fld qword [bp + 6]	; 3: 221 70 6

asin$24:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x11949:	fstp qword [bp + 14]	; 3: 221 94 14

asin$25:	; PushOne
x11952:	fld1	; 2: 217 232

asin$26:	; PushFloat x
x11954:	fld qword [bp + 6]	; 3: 221 70 6

asin$27:	; PushFloat x
x11957:	fld qword [bp + 6]	; 3: 221 70 6

asin$28:	; SignedMultiply £temporary503 x x
x11960:	fmul	; 2: 222 201

asin$29:	; BinarySubtract £temporary504 1 £temporary503
x11962:	fsub	; 2: 222 233

asin$30:	; Parameter 14 £temporary504 6
x11964:	fstp qword [bp + 28]	; 3: 221 94 28

asin$31:	; Call 14 sqrt 0
x11967:	mov word [bp + 22], asin$32	; 5: 199 70 22 205 46
x11972:	mov [bp + 24], bp	; 3: 137 110 24
x11975:	add bp, 22	; 3: 131 197 22
x11978:	nop	; 1: 144
x11979:	jmp sqrt	; 2: 235 66

asin$32:	; PostCall 14
x11981:	fstp qword [bp + 22]	; 3: 221 94 22
x11984:	fld qword [bp + 14]	; 3: 221 70 14
x11987:	fld qword [bp + 22]	; 3: 221 70 22

asin$33:	; GetReturnValue £temporary505

asin$34:	; SignedDivide £temporary506 x £temporary505
x11990:	fdiv	; 2: 222 249

asin$35:	; Parameter 14 £temporary506 6
x11992:	fstp qword [bp + 20]	; 3: 221 94 20

asin$36:	; Call 14 atan 0
x11995:	mov word [bp + 14], asin$37	; 5: 199 70 14 233 46
x12000:	mov [bp + 16], bp	; 3: 137 110 16
x12003:	add bp, 14	; 3: 131 197 14
x12006:	jmp atan	; 3: 233 170 0

asin$37:	; PostCall 14

asin$38:	; GetReturnValue £temporary507

asin$39:	; SetReturnValue £temporary507

asin$40:	; Return £temporary507
x12009:	mov ax, [bp]	; 3: 139 70 0
x12012:	mov di, [bp + 4]	; 3: 139 126 4
x12015:	mov bp, [bp + 2]	; 3: 139 110 2
x12018:	jmp ax	; 2: 255 224

asin$41:	; Assign errno 6
x12020:	mov word [errno], 6	; 6: 199 6 230 10 6 0

asin$42:	; PushZero
x12026:	fldz	; 2: 217 238

asin$43:	; SetReturnValue 0

asin$44:	; Return 0
x12028:	mov ax, [bp]	; 3: 139 70 0
x12031:	mov di, [bp + 4]	; 3: 139 126 4
x12034:	mov bp, [bp + 2]	; 3: 139 110 2
x12037:	jmp ax	; 2: 255 224

asin$45:	; FunctionEnd asin

@1244$float8$1.57#:
x12039:	dq 1.57	; 8: 31 133 235 81 184 30 249 63

sqrt:	; PushFloat x
x12047:	fld qword [bp + 6]	; 3: 221 70 6

sqrt$1:	; PushZero
x12050:	fldz	; 2: 217 238

sqrt$2:	; SignedLessThan 28 x 0
x12052:	fcompp	; 2: 222 217
x12054:	fstsw ax	; 3: 155 223 224
x12057:	sahf	; 1: 158
x12058:	ja sqrt$28	; 2: 119 84

sqrt$3:	; PushOne
x12060:	fld1	; 2: 217 232

sqrt$4:	; PopFloat root_i_plus_1
x12062:	fstp qword [bp + 22]	; 3: 221 94 22

sqrt$5:	; PushFloat root_i_plus_1
x12065:	fld qword [bp + 22]	; 3: 221 70 22

sqrt$6:	; PopFloat root_i
x12068:	fstp qword [bp + 14]	; 3: 221 94 14

sqrt$7:	; PushFloat root_i
x12071:	fld qword [bp + 14]	; 3: 221 70 14

sqrt$8:	; PushFloat x
x12074:	fld qword [bp + 6]	; 3: 221 70 6

sqrt$9:	; PushFloat root_i
x12077:	fld qword [bp + 14]	; 3: 221 70 14

sqrt$10:	; SignedDivide £temporary409 x root_i
x12080:	fdiv	; 2: 222 249

sqrt$11:	; BinaryAdd £temporary410 root_i £temporary409
x12082:	fadd	; 2: 222 193

sqrt$12:	; PushFloat 2
x12084:	fld qword [@1061$float8$2#]	; 4: 221 6 131 47

sqrt$13:	; SignedDivide £temporary411 £temporary410 2
x12088:	fdiv	; 2: 222 249

sqrt$14:	; PopFloat root_i_plus_1
x12090:	fstp qword [bp + 22]	; 3: 221 94 22

sqrt$15:	; CallHeader 30 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

sqrt$16:	; PushFloat root_i_plus_1
x12093:	fld qword [bp + 22]	; 3: 221 70 22

sqrt$17:	; PushFloat root_i
x12096:	fld qword [bp + 14]	; 3: 221 70 14

sqrt$18:	; BinarySubtract £temporary412 root_i_plus_1 root_i
x12099:	fsub	; 2: 222 233

sqrt$19:	; Parameter 30 £temporary412 6
x12101:	fstp qword [bp + 36]	; 3: 221 94 36

sqrt$20:	; Call 30 fabs 0
x12104:	mov word [bp + 30], sqrt$21	; 5: 199 70 30 86 47
x12109:	mov [bp + 32], bp	; 3: 137 110 32
x12112:	add bp, 30	; 3: 131 197 30
x12115:	jmp fabs	; 3: 233 167 245

sqrt$21:	; PostCall 30

sqrt$22:	; GetReturnValue £temporary413

sqrt$23:	; PushFloat 0.000000001
x12118:	fld qword [@1065$float8$0.000000001#]	; 4: 221 6 139 47

sqrt$24:	; SignedGreaterThanEqual 5 £temporary413 0.000000001
x12122:	fcompp	; 2: 222 217
x12124:	fstsw ax	; 3: 155 223 224
x12127:	sahf	; 1: 158
x12128:	jbe sqrt$5	; 2: 118 191

sqrt$25:	; PushFloat root_i_plus_1
x12130:	fld qword [bp + 22]	; 3: 221 70 22

sqrt$26:	; SetReturnValue root_i_plus_1

sqrt$27:	; Return root_i_plus_1
x12133:	mov ax, [bp]	; 3: 139 70 0
x12136:	mov di, [bp + 4]	; 3: 139 126 4
x12139:	mov bp, [bp + 2]	; 3: 139 110 2
x12142:	jmp ax	; 2: 255 224

sqrt$28:	; Assign errno 6
x12144:	mov word [errno], 6	; 6: 199 6 230 10 6 0

sqrt$29:	; PushZero
x12150:	fldz	; 2: 217 238

sqrt$30:	; SetReturnValue 0

sqrt$31:	; Return 0
x12152:	mov ax, [bp]	; 3: 139 70 0
x12155:	mov di, [bp + 4]	; 3: 139 126 4
x12158:	mov bp, [bp + 2]	; 3: 139 110 2
x12161:	jmp ax	; 2: 255 224

sqrt$32:	; FunctionEnd sqrt

@1061$float8$2#:
x12163:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

@1065$float8$0.000000001#:
x12171:	dq 0.000000001	; 8: 149 214 38 232 11 46 17 62

atan:	; PushFloat x
x12179:	fld qword [bp + 6]	; 3: 221 70 6

atan$1:	; PushZero
x12182:	fldz	; 2: 217 238

atan$2:	; SignedGreaterThanEqual 13 x 0
x12184:	fcompp	; 2: 222 217
x12186:	fstsw ax	; 3: 155 223 224
x12189:	sahf	; 1: 158
x12190:	jbe atan$13	; 2: 118 35

atan$3:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

atan$4:	; PushFloat x
x12192:	fld qword [bp + 6]	; 3: 221 70 6

atan$5:	; UnarySubtract £temporary526 x
x12195:	fchs	; 2: 217 224

atan$6:	; Parameter 14 £temporary526 6
x12197:	fstp qword [bp + 20]	; 3: 221 94 20

atan$7:	; Call 14 atan 0
x12200:	mov word [bp + 14], atan$8	; 5: 199 70 14 182 47
x12205:	mov [bp + 16], bp	; 3: 137 110 16
x12208:	add bp, 14	; 3: 131 197 14
x12211:	nop	; 1: 144
x12212:	jmp atan	; 2: 235 221

atan$8:	; PostCall 14

atan$9:	; GetReturnValue £temporary527

atan$10:	; UnarySubtract £temporary528 £temporary527
x12214:	fchs	; 2: 217 224

atan$11:	; SetReturnValue £temporary528

atan$12:	; Return £temporary528
x12216:	mov ax, [bp]	; 3: 139 70 0
x12219:	mov di, [bp + 4]	; 3: 139 126 4
x12222:	mov bp, [bp + 2]	; 3: 139 110 2
x12225:	jmp ax	; 2: 255 224

atan$13:	; PushFloat x
x12227:	fld qword [bp + 6]	; 3: 221 70 6

atan$14:	; PushOne
x12230:	fld1	; 2: 217 232

atan$15:	; SignedLessThanEqual 28 x 1
x12232:	fcompp	; 2: 222 217
x12234:	fstsw ax	; 3: 155 223 224
x12237:	sahf	; 1: 158
x12238:	jae atan$28	; 2: 115 53

atan$16:	; PushFloat 1.57
x12240:	fld qword [@1312$float8$1.57#]	; 4: 221 6 252 48

atan$17:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x12244:	fstp qword [bp + 14]	; 3: 221 94 14

atan$18:	; PushOne
x12247:	fld1	; 2: 217 232

atan$19:	; PushFloat x
x12249:	fld qword [bp + 6]	; 3: 221 70 6

atan$20:	; SignedDivide £temporary530 1 x
x12252:	fdiv	; 2: 222 249

atan$21:	; Parameter 14 £temporary530 6
x12254:	fstp qword [bp + 28]	; 3: 221 94 28

atan$22:	; Call 14 atan 0
x12257:	mov word [bp + 22], atan$23	; 5: 199 70 22 239 47
x12262:	mov [bp + 24], bp	; 3: 137 110 24
x12265:	add bp, 22	; 3: 131 197 22
x12268:	nop	; 1: 144
x12269:	jmp atan	; 2: 235 164

atan$23:	; PostCall 14
x12271:	fstp qword [bp + 22]	; 3: 221 94 22
x12274:	fld qword [bp + 14]	; 3: 221 70 14
x12277:	fld qword [bp + 22]	; 3: 221 70 22

atan$24:	; GetReturnValue £temporary531

atan$25:	; BinarySubtract £temporary532 1.57 £temporary531
x12280:	fsub	; 2: 222 233

atan$26:	; SetReturnValue £temporary532

atan$27:	; Return £temporary532
x12282:	mov ax, [bp]	; 3: 139 70 0
x12285:	mov di, [bp + 4]	; 3: 139 126 4
x12288:	mov bp, [bp + 2]	; 3: 139 110 2
x12291:	jmp ax	; 2: 255 224

atan$28:	; PushFloat x
x12293:	fld qword [bp + 6]	; 3: 221 70 6

atan$29:	; PushFloat 0.5
x12296:	fld qword [@1319$float8$0.5#]	; 4: 221 6 4 49

atan$30:	; SignedLessThanEqual 54 x 0.5
x12300:	fcompp	; 2: 222 217
x12302:	fstsw ax	; 3: 155 223 224
x12305:	sahf	; 1: 158
x12306:	jae atan$54	; 2: 115 102

atan$31:	; PushFloat 2
x12308:	fld qword [@1333$float8$2#]	; 4: 221 6 12 49

atan$32:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x12312:	fstp qword [bp + 14]	; 3: 221 94 14

atan$33:	; PushFloat x
x12315:	fld qword [bp + 6]	; 3: 221 70 6

atan$34:	; PushOne
x12318:	fld1	; 2: 217 232

atan$35:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 3
x12320:	fstp qword [bp + 22]	; 3: 221 94 22
x12323:	fstp qword [bp + 30]	; 3: 221 94 30

atan$36:	; PushOne
x12326:	fld1	; 2: 217 232

atan$37:	; PushFloat x
x12328:	fld qword [bp + 6]	; 3: 221 70 6

atan$38:	; PushFloat x
x12331:	fld qword [bp + 6]	; 3: 221 70 6

atan$39:	; SignedMultiply £temporary534 x x
x12334:	fmul	; 2: 222 201

atan$40:	; BinaryAdd £temporary535 1 £temporary534
x12336:	fadd	; 2: 222 193

atan$41:	; Parameter 14 £temporary535 14
x12338:	fstp qword [bp + 52]	; 3: 221 94 52

atan$42:	; Call 14 sqrt 0
x12341:	mov word [bp + 46], atan$43	; 5: 199 70 46 67 48
x12346:	mov [bp + 48], bp	; 3: 137 110 48
x12349:	add bp, 46	; 3: 131 197 46
x12352:	jmp sqrt	; 3: 233 204 254

atan$43:	; PostCall 14
x12355:	fstp qword [bp + 38]	; 3: 221 94 38
x12358:	fld qword [bp + 30]	; 3: 221 70 30
x12361:	fld qword [bp + 22]	; 3: 221 70 22
x12364:	fld qword [bp + 38]	; 3: 221 70 38

atan$44:	; GetReturnValue £temporary536

atan$45:	; BinaryAdd £temporary537 1 £temporary536
x12367:	fadd	; 2: 222 193

atan$46:	; SignedDivide £temporary538 x £temporary537
x12369:	fdiv	; 2: 222 249

atan$47:	; Parameter 14 £temporary538 6
x12371:	fstp qword [bp + 28]	; 3: 221 94 28

atan$48:	; Call 14 atan 0
x12374:	mov word [bp + 22], atan$49	; 5: 199 70 22 100 48
x12379:	mov [bp + 24], bp	; 3: 137 110 24
x12382:	add bp, 22	; 3: 131 197 22
x12385:	jmp atan	; 3: 233 47 255

atan$49:	; PostCall 14
x12388:	fstp qword [bp + 22]	; 3: 221 94 22
x12391:	fld qword [bp + 14]	; 3: 221 70 14
x12394:	fld qword [bp + 22]	; 3: 221 70 22

atan$50:	; GetReturnValue £temporary539

atan$51:	; SignedMultiply £temporary540 2 £temporary539
x12397:	fmul	; 2: 222 201

atan$52:	; SetReturnValue £temporary540

atan$53:	; Return £temporary540
x12399:	mov ax, [bp]	; 3: 139 70 0
x12402:	mov di, [bp + 4]	; 3: 139 126 4
x12405:	mov bp, [bp + 2]	; 3: 139 110 2
x12408:	jmp ax	; 2: 255 224

atan$54:	; PushZero
x12410:	fldz	; 2: 217 238

atan$55:	; PopFloat sum
x12412:	fstp qword [bp + 22]	; 3: 221 94 22

atan$56:	; PushOne
x12415:	fld1	; 2: 217 232

atan$57:	; PopFloat sign
x12417:	fstp qword [bp + 30]	; 3: 221 94 30

atan$58:	; PushOne
x12420:	fld1	; 2: 217 232

atan$59:	; PopFloat denominator
x12422:	fstp qword [bp + 38]	; 3: 221 94 38

atan$60:	; PushFloat x
x12425:	fld qword [bp + 6]	; 3: 221 70 6

atan$61:	; PopFloat product
x12428:	fstp qword [bp + 46]	; 3: 221 94 46

atan$62:	; PushFloat sign
x12431:	fld qword [bp + 30]	; 3: 221 70 30

atan$63:	; PushFloat product
x12434:	fld qword [bp + 46]	; 3: 221 70 46

atan$64:	; SignedMultiply £temporary541 sign product
x12437:	fmul	; 2: 222 201

atan$65:	; PushFloat denominator
x12439:	fld qword [bp + 38]	; 3: 221 70 38

atan$66:	; SignedDivide £temporary542 £temporary541 denominator
x12442:	fdiv	; 2: 222 249

atan$67:	; PopFloat term
x12444:	fstp qword [bp + 14]	; 3: 221 94 14

atan$68:	; PushFloat sum
x12447:	fld qword [bp + 22]	; 3: 221 70 22

atan$69:	; PushFloat term
x12450:	fld qword [bp + 14]	; 3: 221 70 14

atan$70:	; BinaryAdd £temporary543 sum term
x12453:	fadd	; 2: 222 193

atan$71:	; PopFloat sum
x12455:	fstp qword [bp + 22]	; 3: 221 94 22

atan$72:	; PushFloat sign
x12458:	fld qword [bp + 30]	; 3: 221 70 30

atan$73:	; UnarySubtract £temporary544 sign
x12461:	fchs	; 2: 217 224

atan$74:	; PopFloat sign
x12463:	fstp qword [bp + 30]	; 3: 221 94 30

atan$75:	; PushFloat product
x12466:	fld qword [bp + 46]	; 3: 221 70 46

atan$76:	; PushFloat x
x12469:	fld qword [bp + 6]	; 3: 221 70 6

atan$77:	; PushFloat x
x12472:	fld qword [bp + 6]	; 3: 221 70 6

atan$78:	; SignedMultiply £temporary545 x x
x12475:	fmul	; 2: 222 201

atan$79:	; SignedMultiply £temporary546 product £temporary545
x12477:	fmul	; 2: 222 201

atan$80:	; PopFloat product
x12479:	fstp qword [bp + 46]	; 3: 221 94 46

atan$81:	; PushFloat denominator
x12482:	fld qword [bp + 38]	; 3: 221 70 38

atan$82:	; PushFloat 2
x12485:	fld qword [@1353$float8$2#]	; 4: 221 6 20 49

atan$83:	; BinaryAdd £temporary547 denominator 2
x12489:	fadd	; 2: 222 193

atan$84:	; PopFloat denominator
x12491:	fstp qword [bp + 38]	; 3: 221 94 38

atan$85:	; CallHeader 54 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

atan$86:	; PushFloat term
x12494:	fld qword [bp + 14]	; 3: 221 70 14

atan$87:	; Parameter 54 term 6
x12497:	fstp qword [bp + 60]	; 3: 221 94 60

atan$88:	; Call 54 fabs 0
x12500:	mov word [bp + 54], atan$89	; 5: 199 70 54 226 48
x12505:	mov [bp + 56], bp	; 3: 137 110 56
x12508:	add bp, 54	; 3: 131 197 54
x12511:	jmp fabs	; 3: 233 27 244

atan$89:	; PostCall 54

atan$90:	; GetReturnValue £temporary548

atan$91:	; PushFloat 0.000000001
x12514:	fld qword [@1356$float8$0.000000001#]	; 4: 221 6 28 49

atan$92:	; SignedGreaterThanEqual 62 £temporary548 0.000000001
x12518:	fcompp	; 2: 222 217
x12520:	fstsw ax	; 3: 155 223 224
x12523:	sahf	; 1: 158
x12524:	jbe atan$62	; 2: 118 161

atan$93:	; PushFloat sum
x12526:	fld qword [bp + 22]	; 3: 221 70 22

atan$94:	; SetReturnValue sum

atan$95:	; Return sum
x12529:	mov ax, [bp]	; 3: 139 70 0
x12532:	mov di, [bp + 4]	; 3: 139 126 4
x12535:	mov bp, [bp + 2]	; 3: 139 110 2
x12538:	jmp ax	; 2: 255 224

atan$96:	; FunctionEnd atan

@1312$float8$1.57#:
x12540:	dq 1.57	; 8: 31 133 235 81 184 30 249 63

@1319$float8$0.5#:
x12548:	dq 0.5	; 8: 0 0 0 0 0 0 224 63

@1333$float8$2#:
x12556:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

@1353$float8$2#:
x12564:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

@1356$float8$0.000000001#:
x12572:	dq 0.000000001	; 8: 149 214 38 232 11 46 17 62

acos:	; PushFloat x
x12580:	fld qword [bp + 6]	; 3: 221 70 6

acos$1:	; PushZero
x12583:	fldz	; 2: 217 238

acos$2:	; NotEqual 6 x 0
x12585:	fcompp	; 2: 222 217
x12587:	fstsw ax	; 3: 155 223 224
x12590:	sahf	; 1: 158
x12591:	jne acos$6	; 2: 117 15

acos$3:	; PushFloat 1.57
x12593:	fld qword [@1274$float8$1.57#]	; 4: 221 6 222 49

acos$4:	; SetReturnValue 1.57

acos$5:	; Return 1.57
x12597:	mov ax, [bp]	; 3: 139 70 0
x12600:	mov di, [bp + 4]	; 3: 139 126 4
x12603:	mov bp, [bp + 2]	; 3: 139 110 2
x12606:	jmp ax	; 2: 255 224

acos$6:	; PushFloat x
x12608:	fld qword [bp + 6]	; 3: 221 70 6

acos$7:	; PushZero
x12611:	fldz	; 2: 217 238

acos$8:	; SignedGreaterThanEqual 20 x 0
x12613:	fcompp	; 2: 222 217
x12615:	fstsw ax	; 3: 155 223 224
x12618:	sahf	; 1: 158
x12619:	jbe acos$20	; 2: 118 51

acos$9:	; PushFloat 3.14
x12621:	fld qword [@1279$float8$3.14#]	; 4: 221 6 230 49

acos$10:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x12625:	fstp qword [bp + 14]	; 3: 221 94 14

acos$11:	; PushFloat x
x12628:	fld qword [bp + 6]	; 3: 221 70 6

acos$12:	; UnarySubtract £temporary513 x
x12631:	fchs	; 2: 217 224

acos$13:	; Parameter 14 £temporary513 6
x12633:	fstp qword [bp + 28]	; 3: 221 94 28

acos$14:	; Call 14 acos 0
x12636:	mov word [bp + 22], acos$15	; 5: 199 70 22 106 49
x12641:	mov [bp + 24], bp	; 3: 137 110 24
x12644:	add bp, 22	; 3: 131 197 22
x12647:	nop	; 1: 144
x12648:	jmp acos	; 2: 235 186

acos$15:	; PostCall 14
x12650:	fstp qword [bp + 22]	; 3: 221 94 22
x12653:	fld qword [bp + 14]	; 3: 221 70 14
x12656:	fld qword [bp + 22]	; 3: 221 70 22

acos$16:	; GetReturnValue £temporary514

acos$17:	; BinarySubtract £temporary515 3.14 £temporary514
x12659:	fsub	; 2: 222 233

acos$18:	; SetReturnValue £temporary515

acos$19:	; Return £temporary515
x12661:	mov ax, [bp]	; 3: 139 70 0
x12664:	mov di, [bp + 4]	; 3: 139 126 4
x12667:	mov bp, [bp + 2]	; 3: 139 110 2
x12670:	jmp ax	; 2: 255 224

acos$20:	; PushFloat x
x12672:	fld qword [bp + 6]	; 3: 221 70 6

acos$21:	; PushOne
x12675:	fld1	; 2: 217 232

acos$22:	; SignedGreaterThan 42 x 1
x12677:	fcompp	; 2: 222 217
x12679:	fstsw ax	; 3: 155 223 224
x12682:	sahf	; 1: 158
x12683:	jb acos$42	; 2: 114 62

acos$23:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

acos$24:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

acos$25:	; PushOne
x12685:	fld1	; 2: 217 232

acos$26:	; PushFloat x
x12687:	fld qword [bp + 6]	; 3: 221 70 6

acos$27:	; PushFloat x
x12690:	fld qword [bp + 6]	; 3: 221 70 6

acos$28:	; SignedMultiply £temporary517 x x
x12693:	fmul	; 2: 222 201

acos$29:	; BinarySubtract £temporary518 1 £temporary517
x12695:	fsub	; 2: 222 233

acos$30:	; Parameter 14 £temporary518 6
x12697:	fstp qword [bp + 20]	; 3: 221 94 20

acos$31:	; Call 14 sqrt 0
x12700:	mov word [bp + 14], acos$32	; 5: 199 70 14 170 49
x12705:	mov [bp + 16], bp	; 3: 137 110 16
x12708:	add bp, 14	; 3: 131 197 14
x12711:	jmp sqrt	; 3: 233 101 253

acos$32:	; PostCall 14

acos$33:	; GetReturnValue £temporary519

acos$34:	; PushFloat x
x12714:	fld qword [bp + 6]	; 3: 221 70 6

acos$35:	; SignedDivide £temporary520 £temporary519 x
x12717:	fdiv	; 2: 222 249

acos$36:	; Parameter 14 £temporary520 6
x12719:	fstp qword [bp + 20]	; 3: 221 94 20

acos$37:	; Call 14 atan 0
x12722:	mov word [bp + 14], acos$38	; 5: 199 70 14 192 49
x12727:	mov [bp + 16], bp	; 3: 137 110 16
x12730:	add bp, 14	; 3: 131 197 14
x12733:	jmp atan	; 3: 233 211 253

acos$38:	; PostCall 14

acos$39:	; GetReturnValue £temporary521

acos$40:	; SetReturnValue £temporary521

acos$41:	; Return £temporary521
x12736:	mov ax, [bp]	; 3: 139 70 0
x12739:	mov di, [bp + 4]	; 3: 139 126 4
x12742:	mov bp, [bp + 2]	; 3: 139 110 2
x12745:	jmp ax	; 2: 255 224

acos$42:	; Assign errno 6
x12747:	mov word [errno], 6	; 6: 199 6 230 10 6 0

acos$43:	; PushZero
x12753:	fldz	; 2: 217 238

acos$44:	; SetReturnValue 0

acos$45:	; Return 0
x12755:	mov ax, [bp]	; 3: 139 70 0
x12758:	mov di, [bp + 4]	; 3: 139 126 4
x12761:	mov bp, [bp + 2]	; 3: 139 110 2
x12764:	jmp ax	; 2: 255 224

acos$46:	; FunctionEnd acos

@1274$float8$1.57#:
x12766:	dq 1.57	; 8: 31 133 235 81 184 30 249 63

@1279$float8$3.14#:
x12774:	dq 3.14	; 8: 31 133 235 81 184 30 9 64

sinh:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

sinh$1:	; PushFloat x
x12782:	fld qword [bp + 6]	; 3: 221 70 6

sinh$2:	; Parameter 14 x 6
x12785:	fstp qword [bp + 20]	; 3: 221 94 20

sinh$3:	; Call 14 exp 0
x12788:	mov word [bp + 14], sinh$4	; 5: 199 70 14 2 50
x12793:	mov [bp + 16], bp	; 3: 137 110 16
x12796:	add bp, 14	; 3: 131 197 14
x12799:	jmp exp	; 3: 233 66 248

sinh$4:	; PostCall 14

sinh$5:	; GetReturnValue £temporary579

sinh$6:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x12802:	fstp qword [bp + 14]	; 3: 221 94 14

sinh$7:	; PushFloat x
x12805:	fld qword [bp + 6]	; 3: 221 70 6

sinh$8:	; UnarySubtract £temporary580 x
x12808:	fchs	; 2: 217 224

sinh$9:	; Parameter 14 £temporary580 6
x12810:	fstp qword [bp + 28]	; 3: 221 94 28

sinh$10:	; Call 14 exp 0
x12813:	mov word [bp + 22], sinh$11	; 5: 199 70 22 27 50
x12818:	mov [bp + 24], bp	; 3: 137 110 24
x12821:	add bp, 22	; 3: 131 197 22
x12824:	jmp exp	; 3: 233 41 248

sinh$11:	; PostCall 14
x12827:	fstp qword [bp + 22]	; 3: 221 94 22
x12830:	fld qword [bp + 14]	; 3: 221 70 14
x12833:	fld qword [bp + 22]	; 3: 221 70 22

sinh$12:	; GetReturnValue £temporary581

sinh$13:	; BinarySubtract £temporary582 £temporary579 £temporary581
x12836:	fsub	; 2: 222 233

sinh$14:	; PushFloat 2
x12838:	fld qword [@1430$float8$2#]	; 4: 221 6 55 50

sinh$15:	; SignedDivide £temporary583 £temporary582 2
x12842:	fdiv	; 2: 222 249

sinh$16:	; SetReturnValue £temporary583

sinh$17:	; Return £temporary583
x12844:	mov ax, [bp]	; 3: 139 70 0
x12847:	mov di, [bp + 4]	; 3: 139 126 4
x12850:	mov bp, [bp + 2]	; 3: 139 110 2
x12853:	jmp ax	; 2: 255 224

sinh$18:	; FunctionEnd sinh

@1430$float8$2#:
x12855:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

cosh:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

cosh$1:	; PushFloat x
x12863:	fld qword [bp + 6]	; 3: 221 70 6

cosh$2:	; Parameter 14 x 6
x12866:	fstp qword [bp + 20]	; 3: 221 94 20

cosh$3:	; Call 14 exp 0
x12869:	mov word [bp + 14], cosh$4	; 5: 199 70 14 83 50
x12874:	mov [bp + 16], bp	; 3: 137 110 16
x12877:	add bp, 14	; 3: 131 197 14
x12880:	jmp exp	; 3: 233 241 247

cosh$4:	; PostCall 14

cosh$5:	; GetReturnValue £temporary586

cosh$6:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x12883:	fstp qword [bp + 14]	; 3: 221 94 14

cosh$7:	; PushFloat x
x12886:	fld qword [bp + 6]	; 3: 221 70 6

cosh$8:	; UnarySubtract £temporary587 x
x12889:	fchs	; 2: 217 224

cosh$9:	; Parameter 14 £temporary587 6
x12891:	fstp qword [bp + 28]	; 3: 221 94 28

cosh$10:	; Call 14 exp 0
x12894:	mov word [bp + 22], cosh$11	; 5: 199 70 22 108 50
x12899:	mov [bp + 24], bp	; 3: 137 110 24
x12902:	add bp, 22	; 3: 131 197 22
x12905:	jmp exp	; 3: 233 216 247

cosh$11:	; PostCall 14
x12908:	fstp qword [bp + 22]	; 3: 221 94 22
x12911:	fld qword [bp + 14]	; 3: 221 70 14
x12914:	fld qword [bp + 22]	; 3: 221 70 22

cosh$12:	; GetReturnValue £temporary588

cosh$13:	; BinaryAdd £temporary589 £temporary586 £temporary588
x12917:	fadd	; 2: 222 193

cosh$14:	; PushFloat 2
x12919:	fld qword [@1440$float8$2#]	; 4: 221 6 136 50

cosh$15:	; SignedDivide £temporary590 £temporary589 2
x12923:	fdiv	; 2: 222 249

cosh$16:	; SetReturnValue £temporary590

cosh$17:	; Return £temporary590
x12925:	mov ax, [bp]	; 3: 139 70 0
x12928:	mov di, [bp + 4]	; 3: 139 126 4
x12931:	mov bp, [bp + 2]	; 3: 139 110 2
x12934:	jmp ax	; 2: 255 224

cosh$18:	; FunctionEnd cosh

@1440$float8$2#:
x12936:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

tanh:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

tanh$1:	; PushFloat x
x12944:	fld qword [bp + 6]	; 3: 221 70 6

tanh$2:	; Parameter 14 x 6
x12947:	fstp qword [bp + 20]	; 3: 221 94 20

tanh$3:	; Call 14 sinh 0
x12950:	mov word [bp + 14], tanh$4	; 5: 199 70 14 164 50
x12955:	mov [bp + 16], bp	; 3: 137 110 16
x12958:	add bp, 14	; 3: 131 197 14
x12961:	jmp sinh	; 3: 233 74 255

tanh$4:	; PostCall 14

tanh$5:	; GetReturnValue £temporary593

tanh$6:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x12964:	fstp qword [bp + 14]	; 3: 221 94 14

tanh$7:	; PushFloat x
x12967:	fld qword [bp + 6]	; 3: 221 70 6

tanh$8:	; Parameter 14 x 6
x12970:	fstp qword [bp + 28]	; 3: 221 94 28

tanh$9:	; Call 14 cosh 0
x12973:	mov word [bp + 22], tanh$10	; 5: 199 70 22 187 50
x12978:	mov [bp + 24], bp	; 3: 137 110 24
x12981:	add bp, 22	; 3: 131 197 22
x12984:	nop	; 1: 144
x12985:	jmp cosh	; 2: 235 132

tanh$10:	; PostCall 14
x12987:	fstp qword [bp + 22]	; 3: 221 94 22
x12990:	fld qword [bp + 14]	; 3: 221 70 14
x12993:	fld qword [bp + 22]	; 3: 221 70 22

tanh$11:	; GetReturnValue £temporary594

tanh$12:	; SignedDivide £temporary595 £temporary593 £temporary594
x12996:	fdiv	; 2: 222 249

tanh$13:	; SetReturnValue £temporary595

tanh$14:	; Return £temporary595
x12998:	mov ax, [bp]	; 3: 139 70 0
x13001:	mov di, [bp + 4]	; 3: 139 126 4
x13004:	mov bp, [bp + 2]	; 3: 139 110 2
x13007:	jmp ax	; 2: 255 224

tanh$15:	; FunctionEnd tanh

frexp:	; PushFloat x
x13009:	fld qword [bp + 6]	; 3: 221 70 6

frexp$1:	; PushZero
x13012:	fldz	; 2: 217 238

frexp$2:	; Equal 42 x 0
x13014:	fcompp	; 2: 222 217
x13016:	fstsw ax	; 3: 155 223 224
x13019:	sahf	; 1: 158
x13020:	je frexp$42	; 4: 15 132 150 0

frexp$3:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

frexp$4:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

frexp$5:	; PushFloat x
x13024:	fld qword [bp + 6]	; 3: 221 70 6

frexp$6:	; Parameter 16 x 6
x13027:	fstp qword [bp + 22]	; 3: 221 94 22

frexp$7:	; Call 16 fabs 0
x13030:	mov word [bp + 16], frexp$8	; 5: 199 70 16 244 50
x13035:	mov [bp + 18], bp	; 3: 137 110 18
x13038:	add bp, 16	; 3: 131 197 16
x13041:	jmp fabs	; 3: 233 9 242

frexp$8:	; PostCall 16

frexp$9:	; GetReturnValue £temporary388

frexp$10:	; Parameter 16 £temporary388 6
x13044:	fstp qword [bp + 22]	; 3: 221 94 22

frexp$11:	; Call 16 log2 0
x13047:	mov word [bp + 16], frexp$12	; 5: 199 70 16 5 51
x13052:	mov [bp + 18], bp	; 3: 137 110 18
x13055:	add bp, 16	; 3: 131 197 16
x13058:	jmp @1000$log2	; 3: 233 155 0

frexp$12:	; PostCall 16

frexp$13:	; GetReturnValue £temporary389

frexp$14:	; IntegralToIntegral £temporary390 £temporary389

frexp$15:	; Assign exponent £temporary390
x13061:	mov [bp + 16], bx	; 3: 137 94 16

frexp$16:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

frexp$17:	; PushFloat 2
x13064:	fld qword [@1016$float8$2#]	; 4: 221 6 144 51

frexp$18:	; Parameter 18 2 6
x13068:	fstp qword [bp + 24]	; 3: 221 94 24

frexp$19:	; IntegralToFloating £temporary391 exponent
x13071:	fild word [bp + 16]	; 3: 223 70 16

frexp$20:	; Parameter 18 £temporary391 14
x13074:	fstp qword [bp + 32]	; 3: 221 94 32

frexp$21:	; Call 18 pow 0
x13077:	mov word [bp + 18], frexp$22	; 5: 199 70 18 35 51
x13082:	mov [bp + 20], bp	; 3: 137 110 20
x13085:	add bp, 18	; 3: 131 197 18
x13088:	jmp pow	; 3: 233 120 245

frexp$22:	; PostCall 18

frexp$23:	; GetReturnValue £temporary392

frexp$24:	; PushFloat x
x13091:	fld qword [bp + 6]	; 3: 221 70 6

frexp$25:	; SignedGreaterThanEqual 27 £temporary392 x
x13094:	fcompp	; 2: 222 217
x13096:	fstsw ax	; 3: 155 223 224
x13099:	sahf	; 1: 158
x13100:	jbe frexp$27	; 2: 118 3

frexp$26:	; Increment exponent
x13102:	inc word [bp + 16]	; 3: 255 70 16

frexp$27:	; Equal 30 p 0
x13105:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x13109:	je frexp$30	; 2: 116 8

frexp$28:	; Deref £temporary396 -> p p 0
x13111:	mov si, [bp + 14]	; 3: 139 118 14

frexp$29:	; Assign £temporary396 -> p exponent
x13114:	mov ax, [bp + 16]	; 3: 139 70 16
x13117:	mov [si], ax	; 2: 137 4

frexp$30:	; PushFloat x
x13119:	fld qword [bp + 6]	; 3: 221 70 6

frexp$31:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x13122:	fstp qword [bp + 18]	; 3: 221 94 18

frexp$32:	; PushFloat 2
x13125:	fld qword [@1030$float8$2#]	; 4: 221 6 152 51

frexp$33:	; Parameter 18 2 6
x13129:	fstp qword [bp + 32]	; 3: 221 94 32

frexp$34:	; IntegralToFloating £temporary397 exponent
x13132:	fild word [bp + 16]	; 3: 223 70 16

frexp$35:	; Parameter 18 £temporary397 14
x13135:	fstp qword [bp + 40]	; 3: 221 94 40

frexp$36:	; Call 18 pow 0
x13138:	mov word [bp + 26], frexp$37	; 5: 199 70 26 96 51
x13143:	mov [bp + 28], bp	; 3: 137 110 28
x13146:	add bp, 26	; 3: 131 197 26
x13149:	jmp pow	; 3: 233 59 245

frexp$37:	; PostCall 18
x13152:	fstp qword [bp + 26]	; 3: 221 94 26
x13155:	fld qword [bp + 18]	; 3: 221 70 18
x13158:	fld qword [bp + 26]	; 3: 221 70 26

frexp$38:	; GetReturnValue £temporary398

frexp$39:	; SignedDivide £temporary399 x £temporary398
x13161:	fdiv	; 2: 222 249

frexp$40:	; SetReturnValue £temporary399

frexp$41:	; Return £temporary399
x13163:	mov ax, [bp]	; 3: 139 70 0
x13166:	mov di, [bp + 4]	; 3: 139 126 4
x13169:	mov bp, [bp + 2]	; 3: 139 110 2
x13172:	jmp ax	; 2: 255 224

frexp$42:	; Equal 45 p 0
x13174:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x13178:	je frexp$45	; 2: 116 7

frexp$43:	; Deref £temporary401 -> p p 0
x13180:	mov si, [bp + 14]	; 3: 139 118 14

frexp$44:	; Assign £temporary401 -> p 0
x13183:	mov word [si], 0	; 4: 199 4 0 0

frexp$45:	; PushZero
x13187:	fldz	; 2: 217 238

frexp$46:	; SetReturnValue 0

frexp$47:	; Return 0
x13189:	mov ax, [bp]	; 3: 139 70 0
x13192:	mov di, [bp + 4]	; 3: 139 126 4
x13195:	mov bp, [bp + 2]	; 3: 139 110 2
x13198:	jmp ax	; 2: 255 224

frexp$48:	; FunctionEnd frexp

@1016$float8$2#:
x13200:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

@1030$float8$2#:
x13208:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

@1000$log2:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

@1000$log2$1:	; PushFloat x
x13216:	fld qword [bp + 6]	; 3: 221 70 6

@1000$log2$2:	; Parameter 14 x 6
x13219:	fstp qword [bp + 20]	; 3: 221 94 20

@1000$log2$3:	; Call 14 log 0
x13222:	mov word [bp + 14], @1000$log2$4	; 5: 199 70 14 180 51
x13227:	mov [bp + 16], bp	; 3: 137 110 16
x13230:	add bp, 14	; 3: 131 197 14
x13233:	jmp log	; 3: 233 168 243

@1000$log2$4:	; PostCall 14

@1000$log2$5:	; GetReturnValue £temporary383

@1000$log2$6:	; PushFloat 0.693
x13236:	fld qword [@1002$float8$0.693#]	; 4: 221 6 205 51

@1000$log2$7:	; SignedDivide £temporary384 £temporary383 0.693
x13240:	fdiv	; 2: 222 249

@1000$log2$8:	; FloatingToIntegral £temporary385 £temporary384
x13242:	fistp word [container2bytes#]	; 4: 223 30 77 27
x13246:	mov bx, [container2bytes#]	; 4: 139 30 77 27

@1000$log2$9:	; SetReturnValue £temporary385

@1000$log2$10:	; Return £temporary385
x13250:	mov ax, [bp]	; 3: 139 70 0
x13253:	mov di, [bp + 4]	; 3: 139 126 4
x13256:	mov bp, [bp + 2]	; 3: 139 110 2
x13259:	jmp ax	; 2: 255 224

@1000$log2$11:	; FunctionEnd log2

@1002$float8$0.693#:
x13261:	dq 0.693	; 8: 147 24 4 86 14 45 230 63

perror:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

perror$1:	; Parameter 8 string_25s3A2025s2E0A# 6
x13269:	mov word [bp + 14], @2309$string_25s3A2025s2E0A#	; 5: 199 70 14 21 52

perror$2:	; Parameter 8 s 8
x13274:	mov ax, [bp + 6]	; 3: 139 70 6
x13277:	mov [bp + 16], ax	; 3: 137 70 16

perror$3:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

perror$4:	; Parameter 8 errno 16
x13280:	mov ax, [errno]	; 3: 161 230 10
x13283:	mov [bp + 24], ax	; 3: 137 70 24

perror$5:	; Call 8 strerror 10
x13286:	mov word [bp + 18], perror$6	; 5: 199 70 18 244 51
x13291:	mov [bp + 20], bp	; 3: 137 110 20
x13294:	add bp, 18	; 3: 131 197 18
x13297:	nop	; 1: 144
x13298:	jmp strerror	; 2: 235 42

perror$6:	; PostCall 8

perror$7:	; GetReturnValue £temporary983

perror$8:	; Parameter 8 £temporary983 10
x13300:	mov [bp + 18], bx	; 3: 137 94 18

perror$9:	; Call 8 printf 0
x13303:	mov word [bp + 8], perror$10	; 5: 199 70 8 10 52
x13308:	mov [bp + 10], bp	; 3: 137 110 10
x13311:	add bp, 8	; 3: 131 197 8
x13314:	mov di, bp	; 2: 137 239
x13316:	add di, 4	; 3: 131 199 4
x13319:	jmp printf	; 3: 233 250 216

perror$10:	; PostCall 8

perror$11:	; Return 0
x13322:	mov ax, [bp]	; 3: 139 70 0
x13325:	mov di, [bp + 4]	; 3: 139 126 4
x13328:	mov bp, [bp + 2]	; 3: 139 110 2
x13331:	jmp ax	; 2: 255 224

perror$12:	; FunctionEnd perror

@2309$string_25s3A2025s2E0A#:
x13333:	db "%s: %s.", 10, 0	; 9: 37 115 58 32 37 115 46 10 0

strerror:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strerror$1:	; Call 8 localeconv 0
x13342:	mov word [bp + 8], strerror$2	; 5: 199 70 8 44 52
x13347:	mov [bp + 10], bp	; 3: 137 110 10
x13350:	add bp, 8	; 3: 131 197 8
x13353:	jmp localeconv	; 3: 233 76 234

strerror$2:	; PostCall 8

strerror$3:	; GetReturnValue £temporary3868

strerror$4:	; Assign localeConvPtr £temporary3868
x13356:	mov [bp + 8], bx	; 3: 137 94 8

strerror$5:	; Equal 14 localeConvPtr 0
x13359:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x13363:	je strerror$14	; 2: 116 42

strerror$6:	; Deref £temporary3870 -> localeConvPtr localeConvPtr 16
x13365:	mov si, [bp + 8]	; 3: 139 118 8

strerror$7:	; Assign messageList £temporary3870 -> localeConvPtr
x13368:	mov ax, [si + 16]	; 3: 139 68 16
x13371:	mov [bp + 10], ax	; 3: 137 70 10

strerror$8:	; Equal 14 messageList 0
x13374:	cmp word [bp + 10], 0	; 4: 131 126 10 0
x13378:	je strerror$14	; 2: 116 27

strerror$9:	; SignedMultiply £temporary3873 errno 2
x13380:	mov ax, [bp + 6]	; 3: 139 70 6
x13383:	xor dx, dx	; 2: 49 210
x13385:	imul word [@8772$int2$2#]	; 4: 247 46 109 52

strerror$10:	; BinaryAdd £temporary3874 messageList £temporary3873
x13389:	mov si, [bp + 10]	; 3: 139 118 10
x13392:	add si, ax	; 2: 1 198

strerror$11:	; Deref £temporary3872 -> £temporary3874 £temporary3874 0

strerror$12:	; SetReturnValue £temporary3872 -> £temporary3874
x13394:	mov bx, [si]	; 2: 139 28

strerror$13:	; Return £temporary3872 -> £temporary3874
x13396:	mov ax, [bp]	; 3: 139 70 0
x13399:	mov di, [bp + 4]	; 3: 139 126 4
x13402:	mov bp, [bp + 2]	; 3: 139 110 2
x13405:	jmp ax	; 2: 255 224

strerror$14:	; SetReturnValue 0
x13407:	mov bx, 0	; 3: 187 0 0

strerror$15:	; Return 0
x13410:	mov ax, [bp]	; 3: 139 70 0
x13413:	mov di, [bp + 4]	; 3: 139 126 4
x13416:	mov bp, [bp + 2]	; 3: 139 110 2
x13419:	jmp ax	; 2: 255 224

strerror$16:	; FunctionEnd strerror

@8772$int2$2#:
x13421:	dw 2	; 2: 2 0

modf:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

modf$1:	; PushFloat x
x13423:	fld qword [bp + 6]	; 3: 221 70 6

modf$2:	; Parameter 16 x 6
x13426:	fstp qword [bp + 22]	; 3: 221 94 22

modf$3:	; Call 16 fabs 0
x13429:	mov word [bp + 16], modf$4	; 5: 199 70 16 131 52
x13434:	mov [bp + 18], bp	; 3: 137 110 18
x13437:	add bp, 16	; 3: 131 197 16
x13440:	jmp fabs	; 3: 233 122 240

modf$4:	; PostCall 16

modf$5:	; GetReturnValue £temporary416

modf$6:	; PopFloat abs_x
x13443:	fstp qword [bp + 16]	; 3: 221 94 16

modf$7:	; PushFloat abs_x
x13446:	fld qword [bp + 16]	; 3: 221 70 16

modf$8:	; FloatingToIntegral £temporary417 abs_x
x13449:	fistp dword [container4bytes#]	; 4: 219 30 81 36
x13453:	mov eax, [container4bytes#]	; 4: 102 161 81 36

modf$9:	; IntegralToFloating £temporary418 £temporary417
x13457:	mov [container4bytes#], eax	; 4: 102 163 81 36
x13461:	fild dword [container4bytes#]	; 4: 219 6 81 36

modf$10:	; PopFloat integral
x13465:	fstp qword [bp + 24]	; 3: 221 94 24

modf$11:	; PushFloat abs_x
x13468:	fld qword [bp + 16]	; 3: 221 70 16

modf$12:	; PushFloat integral
x13471:	fld qword [bp + 24]	; 3: 221 70 24

modf$13:	; BinarySubtract £temporary419 abs_x integral
x13474:	fsub	; 2: 222 233

modf$14:	; PopFloat fractional
x13476:	fstp qword [bp + 32]	; 3: 221 94 32

modf$15:	; Equal 26 p 0
x13479:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x13483:	je modf$26	; 2: 116 28

modf$16:	; Deref £temporary421 -> p p 0
x13485:	mov si, [bp + 14]	; 3: 139 118 14

modf$17:	; PushFloat x
x13488:	fld qword [bp + 6]	; 3: 221 70 6

modf$18:	; PushZero
x13491:	fldz	; 2: 217 238

modf$19:	; SignedLessThanEqual 23 x 0
x13493:	fcompp	; 2: 222 217
x13495:	fstsw ax	; 3: 155 223 224
x13498:	sahf	; 1: 158
x13499:	jae modf$23	; 2: 115 5

modf$20:	; PushFloat integral
x13501:	fld qword [bp + 24]	; 3: 221 70 24

modf$21:	; DecreaseStack

modf$22:	; Goto 25
x13504:	jmp modf$25	; 2: 235 5

modf$23:	; PushFloat integral
x13506:	fld qword [bp + 24]	; 3: 221 70 24

modf$24:	; UnarySubtract £temporary423 integral
x13509:	fchs	; 2: 217 224

modf$25:	; PopFloat £temporary421 -> p
x13511:	fstp qword [si]	; 2: 221 28

modf$26:	; PushFloat x
x13513:	fld qword [bp + 6]	; 3: 221 70 6

modf$27:	; PushZero
x13516:	fldz	; 2: 217 238

modf$28:	; SignedLessThanEqual 32 x 0
x13518:	fcompp	; 2: 222 217
x13520:	fstsw ax	; 3: 155 223 224
x13523:	sahf	; 1: 158
x13524:	jae modf$32	; 2: 115 5

modf$29:	; PushFloat fractional
x13526:	fld qword [bp + 32]	; 3: 221 70 32

modf$30:	; DecreaseStack

modf$31:	; Goto 34
x13529:	jmp modf$34	; 2: 235 5

modf$32:	; PushFloat fractional
x13531:	fld qword [bp + 32]	; 3: 221 70 32

modf$33:	; UnarySubtract £temporary429 fractional
x13534:	fchs	; 2: 217 224

modf$34:	; SetReturnValue £temporary433

modf$35:	; Return £temporary433
x13536:	mov ax, [bp]	; 3: 139 70 0
x13539:	mov di, [bp + 4]	; 3: 139 126 4
x13542:	mov bp, [bp + 2]	; 3: 139 110 2
x13545:	jmp ax	; 2: 255 224

modf$36:	; FunctionEnd modf

math_test_2:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_2$1:	; Parameter 22 string_fmod2825f2C2025f29203D2025f2C20errno203D2025i0A# 6
x13547:	mov word [bp + 28], @10626$string_fmod2825f2C2025f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 28 65 54

math_test_2$2:	; PushFloat x
x13552:	fld qword [bp + 6]	; 3: 221 70 6

math_test_2$3:	; Parameter 22 x 8
x13555:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_2$4:	; PushFloat y
x13558:	fld qword [bp + 14]	; 3: 221 70 14

math_test_2$5:	; Parameter 22 y 16
x13561:	fstp qword [bp + 38]	; 3: 221 94 38

math_test_2$6:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_2$7:	; PushFloat x
x13564:	fld qword [bp + 6]	; 3: 221 70 6

math_test_2$8:	; Parameter 22 x 30
x13567:	fstp qword [bp + 52]	; 3: 221 94 52

math_test_2$9:	; PushFloat y
x13570:	fld qword [bp + 14]	; 3: 221 70 14

math_test_2$10:	; Parameter 22 y 38
x13573:	fstp qword [bp + 60]	; 3: 221 94 60

math_test_2$11:	; Call 22 fmod 24
x13576:	mov word [bp + 46], math_test_2$12	; 5: 199 70 46 22 53
x13581:	mov [bp + 48], bp	; 3: 137 110 48
x13584:	add bp, 46	; 3: 131 197 46
x13587:	jmp fmod	; 3: 233 112 247

math_test_2$12:	; PostCall 22

math_test_2$13:	; GetReturnValue £temporary4776

math_test_2$14:	; Parameter 22 £temporary4776 24
x13590:	fstp qword [bp + 46]	; 3: 221 94 46

math_test_2$15:	; Parameter 22 errno 32
x13593:	mov ax, [errno]	; 3: 161 230 10
x13596:	mov [bp + 54], ax	; 3: 137 70 54

math_test_2$16:	; Call 22 printf 0
x13599:	mov word [bp + 22], math_test_2$17	; 5: 199 70 22 50 53
x13604:	mov [bp + 24], bp	; 3: 137 110 24
x13607:	add bp, 22	; 3: 131 197 22
x13610:	mov di, bp	; 2: 137 239
x13612:	add di, 26	; 3: 131 199 26
x13615:	jmp printf	; 3: 233 210 215

math_test_2$17:	; PostCall 22

math_test_2$18:	; Assign errno 0
x13618:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_2$19:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_2$20:	; Parameter 22 string_atan22825f2C2025f29203D2025f2C20errno203D2025i0A# 6
x13624:	mov word [bp + 28], @10631$string_atan22825f2C2025f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 28 96 54

math_test_2$21:	; PushFloat x
x13629:	fld qword [bp + 6]	; 3: 221 70 6

math_test_2$22:	; Parameter 22 x 8
x13632:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_2$23:	; PushFloat y
x13635:	fld qword [bp + 14]	; 3: 221 70 14

math_test_2$24:	; Parameter 22 y 16
x13638:	fstp qword [bp + 38]	; 3: 221 94 38

math_test_2$25:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_2$26:	; PushFloat x
x13641:	fld qword [bp + 6]	; 3: 221 70 6

math_test_2$27:	; Parameter 22 x 30
x13644:	fstp qword [bp + 52]	; 3: 221 94 52

math_test_2$28:	; PushFloat y
x13647:	fld qword [bp + 14]	; 3: 221 70 14

math_test_2$29:	; Parameter 22 y 38
x13650:	fstp qword [bp + 60]	; 3: 221 94 60

math_test_2$30:	; Call 22 atan2 24
x13653:	mov word [bp + 46], math_test_2$31	; 5: 199 70 46 99 53
x13658:	mov [bp + 48], bp	; 3: 137 110 48
x13661:	add bp, 46	; 3: 131 197 46
x13664:	jmp atan2	; 3: 233 82 1

math_test_2$31:	; PostCall 22

math_test_2$32:	; GetReturnValue £temporary4778

math_test_2$33:	; Parameter 22 £temporary4778 24
x13667:	fstp qword [bp + 46]	; 3: 221 94 46

math_test_2$34:	; Parameter 22 errno 32
x13670:	mov ax, [errno]	; 3: 161 230 10
x13673:	mov [bp + 54], ax	; 3: 137 70 54

math_test_2$35:	; Call 22 printf 0
x13676:	mov word [bp + 22], math_test_2$36	; 5: 199 70 22 127 53
x13681:	mov [bp + 24], bp	; 3: 137 110 24
x13684:	add bp, 22	; 3: 131 197 22
x13687:	mov di, bp	; 2: 137 239
x13689:	add di, 26	; 3: 131 199 26
x13692:	jmp printf	; 3: 233 133 215

math_test_2$36:	; PostCall 22

math_test_2$37:	; Assign errno 0
x13695:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_2$38:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_2$39:	; Parameter 22 string_pow2825f2C2025f29203D2025f2C20errno203D2025i0A# 6
x13701:	mov word [bp + 28], @10636$string_pow2825f2C2025f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 28 128 54

math_test_2$40:	; PushFloat x
x13706:	fld qword [bp + 6]	; 3: 221 70 6

math_test_2$41:	; Parameter 22 x 8
x13709:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_2$42:	; PushFloat y
x13712:	fld qword [bp + 14]	; 3: 221 70 14

math_test_2$43:	; Parameter 22 y 16
x13715:	fstp qword [bp + 38]	; 3: 221 94 38

math_test_2$44:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_2$45:	; PushFloat x
x13718:	fld qword [bp + 6]	; 3: 221 70 6

math_test_2$46:	; Parameter 22 x 30
x13721:	fstp qword [bp + 52]	; 3: 221 94 52

math_test_2$47:	; PushFloat y
x13724:	fld qword [bp + 14]	; 3: 221 70 14

math_test_2$48:	; Parameter 22 y 38
x13727:	fstp qword [bp + 60]	; 3: 221 94 60

math_test_2$49:	; Call 22 pow 24
x13730:	mov word [bp + 46], math_test_2$50	; 5: 199 70 46 176 53
x13735:	mov [bp + 48], bp	; 3: 137 110 48
x13738:	add bp, 46	; 3: 131 197 46
x13741:	jmp pow	; 3: 233 235 242

math_test_2$50:	; PostCall 22

math_test_2$51:	; GetReturnValue £temporary4780

math_test_2$52:	; Parameter 22 £temporary4780 24
x13744:	fstp qword [bp + 46]	; 3: 221 94 46

math_test_2$53:	; Parameter 22 errno 32
x13747:	mov ax, [errno]	; 3: 161 230 10
x13750:	mov [bp + 54], ax	; 3: 137 70 54

math_test_2$54:	; Call 22 printf 0
x13753:	mov word [bp + 22], math_test_2$55	; 5: 199 70 22 204 53
x13758:	mov [bp + 24], bp	; 3: 137 110 24
x13761:	add bp, 22	; 3: 131 197 22
x13764:	mov di, bp	; 2: 137 239
x13766:	add di, 26	; 3: 131 199 26
x13769:	jmp printf	; 3: 233 56 215

math_test_2$55:	; PostCall 22

math_test_2$56:	; Assign errno 0
x13772:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_2$57:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_2$58:	; Parameter 22 string_0A# 6
x13778:	mov word [bp + 28], @10641$string_0A#	; 5: 199 70 28 158 54

math_test_2$59:	; Call 22 printf 0
x13783:	mov word [bp + 22], math_test_2$60	; 5: 199 70 22 231 53
x13788:	mov [bp + 24], bp	; 3: 137 110 24
x13791:	add bp, 22	; 3: 131 197 22
x13794:	mov di, bp	; 2: 137 239
x13796:	jmp printf	; 3: 233 29 215

math_test_2$60:	; PostCall 22

math_test_2$61:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_2$62:	; Parameter 22 string_ldexp2825f2C2025i29203D2025f0A0A# 6
x13799:	mov word [bp + 28], @10643$string_ldexp2825f2C2025i29203D2025f0A0A#	; 5: 199 70 28 160 54

math_test_2$63:	; PushFloat x
x13804:	fld qword [bp + 6]	; 3: 221 70 6

math_test_2$64:	; Parameter 22 x 8
x13807:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_2$65:	; PushFloat y
x13810:	fld qword [bp + 14]	; 3: 221 70 14

math_test_2$66:	; FloatingToIntegral £temporary4783 y
x13813:	fistp word [container2bytes#]	; 4: 223 30 77 27
x13817:	mov ax, [container2bytes#]	; 3: 161 77 27

math_test_2$67:	; Parameter 22 £temporary4783 16
x13820:	mov [bp + 38], ax	; 3: 137 70 38

math_test_2$68:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_2$69:	; PushFloat x
x13823:	fld qword [bp + 6]	; 3: 221 70 6

math_test_2$70:	; Parameter 22 x 24
x13826:	fstp qword [bp + 46]	; 3: 221 94 46

math_test_2$71:	; PushFloat y
x13829:	fld qword [bp + 14]	; 3: 221 70 14

math_test_2$72:	; FloatingToIntegral £temporary4784 y
x13832:	fistp word [container2bytes#]	; 4: 223 30 77 27
x13836:	mov ax, [container2bytes#]	; 3: 161 77 27

math_test_2$73:	; Parameter 22 £temporary4784 32
x13839:	mov [bp + 54], ax	; 3: 137 70 54

math_test_2$74:	; Call 22 ldexp 18
x13842:	mov word [bp + 40], math_test_2$75	; 5: 199 70 40 32 54
x13847:	mov [bp + 42], bp	; 3: 137 110 42
x13850:	add bp, 40	; 3: 131 197 40
x13853:	jmp ldexp	; 3: 233 235 1

math_test_2$75:	; PostCall 22

math_test_2$76:	; GetReturnValue £temporary4785

math_test_2$77:	; Parameter 22 £temporary4785 18
x13856:	fstp qword [bp + 40]	; 3: 221 94 40

math_test_2$78:	; Call 22 printf 0
x13859:	mov word [bp + 22], math_test_2$79	; 5: 199 70 22 54 54
x13864:	mov [bp + 24], bp	; 3: 137 110 24
x13867:	add bp, 22	; 3: 131 197 22
x13870:	mov di, bp	; 2: 137 239
x13872:	add di, 18	; 3: 131 199 18
x13875:	jmp printf	; 3: 233 206 214

math_test_2$79:	; PostCall 22

math_test_2$80:	; Return 0
x13878:	mov ax, [bp]	; 3: 139 70 0
x13881:	mov di, [bp + 4]	; 3: 139 126 4
x13884:	mov bp, [bp + 2]	; 3: 139 110 2
x13887:	jmp ax	; 2: 255 224

math_test_2$81:	; FunctionEnd math_test_2

@10626$string_fmod2825f2C2025f29203D2025f2C20errno203D2025i0A#:
x13889:	db "fmod(%f, %f) = %f, errno = %i", 10, 0	; 31: 102 109 111 100 40 37 102 44 32 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10631$string_atan22825f2C2025f29203D2025f2C20errno203D2025i0A#:
x13920:	db "atan2(%f, %f) = %f, errno = %i", 10, 0	; 32: 97 116 97 110 50 40 37 102 44 32 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10636$string_pow2825f2C2025f29203D2025f2C20errno203D2025i0A#:
x13952:	db "pow(%f, %f) = %f, errno = %i", 10, 0	; 30: 112 111 119 40 37 102 44 32 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10641$string_0A#:
x13982:	db 10, 0	; 2: 10 0

@10643$string_ldexp2825f2C2025i29203D2025f0A0A#:
x13984:	db "ldexp(%f, %i) = %f", 10, 10, 0	; 21: 108 100 101 120 112 40 37 102 44 32 37 105 41 32 61 32 37 102 10 10 0

atan2:	; PushFloat y
x14005:	fld qword [bp + 14]	; 3: 221 70 14

atan2$1:	; PushZero
x14008:	fldz	; 2: 217 238

atan2$2:	; SignedLessThanEqual 13 y 0
x14010:	fcompp	; 2: 222 217
x14012:	fstsw ax	; 3: 155 223 224
x14015:	sahf	; 1: 158
x14016:	jae atan2$13	; 2: 115 36

atan2$3:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

atan2$4:	; PushFloat x
x14018:	fld qword [bp + 6]	; 3: 221 70 6

atan2$5:	; PushFloat y
x14021:	fld qword [bp + 14]	; 3: 221 70 14

atan2$6:	; SignedDivide £temporary556 x y
x14024:	fdiv	; 2: 222 249

atan2$7:	; Parameter 22 £temporary556 6
x14026:	fstp qword [bp + 28]	; 3: 221 94 28

atan2$8:	; Call 22 atan 0
x14029:	mov word [bp + 22], atan2$9	; 5: 199 70 22 219 54
x14034:	mov [bp + 24], bp	; 3: 137 110 24
x14037:	add bp, 22	; 3: 131 197 22
x14040:	jmp atan	; 3: 233 184 248

atan2$9:	; PostCall 22

atan2$10:	; GetReturnValue £temporary557

atan2$11:	; SetReturnValue £temporary557

atan2$12:	; Return £temporary557
x14043:	mov ax, [bp]	; 3: 139 70 0
x14046:	mov di, [bp + 4]	; 3: 139 126 4
x14049:	mov bp, [bp + 2]	; 3: 139 110 2
x14052:	jmp ax	; 2: 255 224

atan2$13:	; PushFloat x
x14054:	fld qword [bp + 6]	; 3: 221 70 6

atan2$14:	; PushZero
x14057:	fldz	; 2: 217 238

atan2$15:	; SignedLessThan 31 x 0
x14059:	fcompp	; 2: 222 217
x14061:	fstsw ax	; 3: 155 223 224
x14064:	sahf	; 1: 158
x14065:	ja atan2$31	; 2: 119 67

atan2$16:	; PushFloat y
x14067:	fld qword [bp + 14]	; 3: 221 70 14

atan2$17:	; PushZero
x14070:	fldz	; 2: 217 238

atan2$18:	; SignedGreaterThanEqual 31 y 0
x14072:	fcompp	; 2: 222 217
x14074:	fstsw ax	; 3: 155 223 224
x14077:	sahf	; 1: 158
x14078:	jbe atan2$31	; 2: 118 54

atan2$19:	; PushFloat 3.14
x14080:	fld qword [@1377$float8$3.14#]	; 4: 221 6 235 55

atan2$20:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x14084:	fstp qword [bp + 22]	; 3: 221 94 22

atan2$21:	; PushFloat x
x14087:	fld qword [bp + 6]	; 3: 221 70 6

atan2$22:	; PushFloat y
x14090:	fld qword [bp + 14]	; 3: 221 70 14

atan2$23:	; SignedDivide £temporary561 x y
x14093:	fdiv	; 2: 222 249

atan2$24:	; Parameter 22 £temporary561 6
x14095:	fstp qword [bp + 36]	; 3: 221 94 36

atan2$25:	; Call 22 atan 0
x14098:	mov word [bp + 30], atan2$26	; 5: 199 70 30 32 55
x14103:	mov [bp + 32], bp	; 3: 137 110 32
x14106:	add bp, 30	; 3: 131 197 30
x14109:	jmp atan	; 3: 233 115 248

atan2$26:	; PostCall 22
x14112:	fstp qword [bp + 30]	; 3: 221 94 30
x14115:	fld qword [bp + 22]	; 3: 221 70 22
x14118:	fld qword [bp + 30]	; 3: 221 70 30

atan2$27:	; GetReturnValue £temporary562

atan2$28:	; BinaryAdd £temporary563 3.14 £temporary562
x14121:	fadd	; 2: 222 193

atan2$29:	; SetReturnValue £temporary563

atan2$30:	; Return £temporary563
x14123:	mov ax, [bp]	; 3: 139 70 0
x14126:	mov di, [bp + 4]	; 3: 139 126 4
x14129:	mov bp, [bp + 2]	; 3: 139 110 2
x14132:	jmp ax	; 2: 255 224

atan2$31:	; PushFloat x
x14134:	fld qword [bp + 6]	; 3: 221 70 6

atan2$32:	; PushZero
x14137:	fldz	; 2: 217 238

atan2$33:	; SignedGreaterThanEqual 49 x 0
x14139:	fcompp	; 2: 222 217
x14141:	fstsw ax	; 3: 155 223 224
x14144:	sahf	; 1: 158
x14145:	jbe atan2$49	; 2: 118 67

atan2$34:	; PushFloat y
x14147:	fld qword [bp + 14]	; 3: 221 70 14

atan2$35:	; PushZero
x14150:	fldz	; 2: 217 238

atan2$36:	; SignedGreaterThanEqual 49 y 0
x14152:	fcompp	; 2: 222 217
x14154:	fstsw ax	; 3: 155 223 224
x14157:	sahf	; 1: 158
x14158:	jbe atan2$49	; 2: 118 54

atan2$37:	; PushFloat -3.14
x14160:	fld qword [@1390$float8$minus3.14#]	; 4: 221 6 243 55

atan2$38:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x14164:	fstp qword [bp + 22]	; 3: 221 94 22

atan2$39:	; PushFloat x
x14167:	fld qword [bp + 6]	; 3: 221 70 6

atan2$40:	; PushFloat y
x14170:	fld qword [bp + 14]	; 3: 221 70 14

atan2$41:	; SignedDivide £temporary567 x y
x14173:	fdiv	; 2: 222 249

atan2$42:	; Parameter 22 £temporary567 6
x14175:	fstp qword [bp + 36]	; 3: 221 94 36

atan2$43:	; Call 22 atan 0
x14178:	mov word [bp + 30], atan2$44	; 5: 199 70 30 112 55
x14183:	mov [bp + 32], bp	; 3: 137 110 32
x14186:	add bp, 30	; 3: 131 197 30
x14189:	jmp atan	; 3: 233 35 248

atan2$44:	; PostCall 22
x14192:	fstp qword [bp + 30]	; 3: 221 94 30
x14195:	fld qword [bp + 22]	; 3: 221 70 22
x14198:	fld qword [bp + 30]	; 3: 221 70 30

atan2$45:	; GetReturnValue £temporary568

atan2$46:	; BinaryAdd £temporary569 -3.14 £temporary568
x14201:	fadd	; 2: 222 193

atan2$47:	; SetReturnValue £temporary569

atan2$48:	; Return £temporary569
x14203:	mov ax, [bp]	; 3: 139 70 0
x14206:	mov di, [bp + 4]	; 3: 139 126 4
x14209:	mov bp, [bp + 2]	; 3: 139 110 2
x14212:	jmp ax	; 2: 255 224

atan2$49:	; PushFloat x
x14214:	fld qword [bp + 6]	; 3: 221 70 6

atan2$50:	; PushZero
x14217:	fldz	; 2: 217 238

atan2$51:	; SignedLessThanEqual 58 x 0
x14219:	fcompp	; 2: 222 217
x14221:	fstsw ax	; 3: 155 223 224
x14224:	sahf	; 1: 158
x14225:	jae atan2$58	; 2: 115 28

atan2$52:	; PushFloat y
x14227:	fld qword [bp + 14]	; 3: 221 70 14

atan2$53:	; PushZero
x14230:	fldz	; 2: 217 238

atan2$54:	; NotEqual 58 y 0
x14232:	fcompp	; 2: 222 217
x14234:	fstsw ax	; 3: 155 223 224
x14237:	sahf	; 1: 158
x14238:	jne atan2$58	; 2: 117 15

atan2$55:	; PushFloat 1.57
x14240:	fld qword [@1404$float8$1.57#]	; 4: 221 6 251 55

atan2$56:	; SetReturnValue 1.57

atan2$57:	; Return 1.57
x14244:	mov ax, [bp]	; 3: 139 70 0
x14247:	mov di, [bp + 4]	; 3: 139 126 4
x14250:	mov bp, [bp + 2]	; 3: 139 110 2
x14253:	jmp ax	; 2: 255 224

atan2$58:	; PushFloat x
x14255:	fld qword [bp + 6]	; 3: 221 70 6

atan2$59:	; PushZero
x14258:	fldz	; 2: 217 238

atan2$60:	; SignedGreaterThanEqual 67 x 0
x14260:	fcompp	; 2: 222 217
x14262:	fstsw ax	; 3: 155 223 224
x14265:	sahf	; 1: 158
x14266:	jbe atan2$67	; 2: 118 28

atan2$61:	; PushFloat y
x14268:	fld qword [bp + 14]	; 3: 221 70 14

atan2$62:	; PushZero
x14271:	fldz	; 2: 217 238

atan2$63:	; NotEqual 67 y 0
x14273:	fcompp	; 2: 222 217
x14275:	fstsw ax	; 3: 155 223 224
x14278:	sahf	; 1: 158
x14279:	jne atan2$67	; 2: 117 15

atan2$64:	; PushFloat -1.57
x14281:	fld qword [@1416$float8$minus1.57#]	; 4: 221 6 3 56

atan2$65:	; SetReturnValue -1.57

atan2$66:	; Return -1.57
x14285:	mov ax, [bp]	; 3: 139 70 0
x14288:	mov di, [bp + 4]	; 3: 139 126 4
x14291:	mov bp, [bp + 2]	; 3: 139 110 2
x14294:	jmp ax	; 2: 255 224

atan2$67:	; Assign errno 6
x14296:	mov word [errno], 6	; 6: 199 6 230 10 6 0

atan2$68:	; PushZero
x14302:	fldz	; 2: 217 238

atan2$69:	; SetReturnValue 0

atan2$70:	; Return 0
x14304:	mov ax, [bp]	; 3: 139 70 0
x14307:	mov di, [bp + 4]	; 3: 139 126 4
x14310:	mov bp, [bp + 2]	; 3: 139 110 2
x14313:	jmp ax	; 2: 255 224

atan2$71:	; FunctionEnd atan2

@1377$float8$3.14#:
x14315:	dq 3.14	; 8: 31 133 235 81 184 30 9 64

@1390$float8$minus3.14#:
x14323:	dq -3.14	; 8: 31 133 235 81 184 30 9 192

@1404$float8$1.57#:
x14331:	dq 1.57	; 8: 31 133 235 81 184 30 249 63

@1416$float8$minus1.57#:
x14339:	dq -1.57	; 8: 31 133 235 81 184 30 249 191

ldexp:	; PushFloat x
x14347:	fld qword [bp + 6]	; 3: 221 70 6

ldexp$1:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x14350:	fstp qword [bp + 16]	; 3: 221 94 16

ldexp$2:	; PushFloat 2
x14353:	fld qword [@992$float8$2#]	; 4: 221 6 66 56

ldexp$3:	; Parameter 16 2 6
x14357:	fstp qword [bp + 30]	; 3: 221 94 30

ldexp$4:	; IntegralToFloating £temporary378 n
x14360:	fild word [bp + 14]	; 3: 223 70 14

ldexp$5:	; Parameter 16 £temporary378 14
x14363:	fstp qword [bp + 38]	; 3: 221 94 38

ldexp$6:	; Call 16 pow 0
x14366:	mov word [bp + 24], ldexp$7	; 5: 199 70 24 44 56
x14371:	mov [bp + 26], bp	; 3: 137 110 26
x14374:	add bp, 24	; 3: 131 197 24
x14377:	jmp pow	; 3: 233 111 240

ldexp$7:	; PostCall 16
x14380:	fstp qword [bp + 24]	; 3: 221 94 24
x14383:	fld qword [bp + 16]	; 3: 221 70 16
x14386:	fld qword [bp + 24]	; 3: 221 70 24

ldexp$8:	; GetReturnValue £temporary379

ldexp$9:	; SignedMultiply £temporary380 x £temporary379
x14389:	fmul	; 2: 222 201

ldexp$10:	; SetReturnValue £temporary380

ldexp$11:	; Return £temporary380
x14391:	mov ax, [bp]	; 3: 139 70 0
x14394:	mov di, [bp + 4]	; 3: 139 126 4
x14397:	mov bp, [bp + 2]	; 3: 139 110 2
x14400:	jmp ax	; 2: 255 224

ldexp$12:	; FunctionEnd ldexp

@992$float8$2#:
x14402:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

file_test:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1:	; Parameter 6 string_in2Etxt# 6
x14410:	mov word [bp + 12], @10693$string_in2Etxt#	; 5: 199 70 12 119 77

file_test$2:	; Parameter 6 string_r# 8
x14415:	mov word [bp + 14], @10694$string_r#	; 5: 199 70 14 126 77

file_test$3:	; Call 6 fopen 0
x14420:	mov word [bp + 6], file_test$4	; 5: 199 70 6 98 56
x14425:	mov [bp + 8], bp	; 3: 137 110 8
x14428:	add bp, 6	; 3: 131 197 6
x14431:	jmp fopen	; 3: 233 130 33

file_test$4:	; PostCall 6

file_test$5:	; GetReturnValue £temporary4815

file_test$6:	; Assign inFilePtr £temporary4815
x14434:	mov [bp + 6], bx	; 3: 137 94 6

file_test$7:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$8:	; Parameter 8 string_outX2Etxt# 6
x14437:	mov word [bp + 14], @10697$string_outX2Etxt#	; 5: 199 70 14 128 77

file_test$9:	; Parameter 8 string_w# 8
x14442:	mov word [bp + 16], @10698$string_w#	; 5: 199 70 16 137 77

file_test$10:	; Call 8 fopen 0
x14447:	mov word [bp + 8], file_test$11	; 5: 199 70 8 125 56
x14452:	mov [bp + 10], bp	; 3: 137 110 10
x14455:	add bp, 8	; 3: 131 197 8
x14458:	jmp fopen	; 3: 233 103 33

file_test$11:	; PostCall 8

file_test$12:	; GetReturnValue £temporary4816

file_test$13:	; Assign outFilePtr £temporary4816
x14461:	mov [bp + 8], bx	; 3: 137 94 8

file_test$14:	; NotEqual 26 inFilePtr 0
x14464:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x14468:	jne file_test$26	; 2: 117 59

file_test$15:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$16:	; Parameter 10 stderr 6
x14470:	mov ax, [stderr]	; 3: 161 139 77
x14473:	mov [bp + 16], ax	; 3: 137 70 16

file_test$17:	; Parameter 10 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x14476:	mov word [bp + 18], @10706$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 18 141 77

file_test$18:	; Parameter 10 string_inFilePtr20213D20NULL# 10
x14481:	mov word [bp + 20], @10707$string_inFilePtr20213D20NULL#	; 5: 199 70 20 187 77

file_test$19:	; Parameter 10 string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x14486:	mov word [bp + 22], @10708$string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 22 205 77

file_test$20:	; Parameter 10 14 14
x14491:	mov word [bp + 24], 14	; 5: 199 70 24 14 0

file_test$21:	; Call 10 fprintf 0
x14496:	mov word [bp + 10], file_test$22	; 5: 199 70 10 179 56
x14501:	mov [bp + 12], bp	; 3: 137 110 12
x14504:	add bp, 10	; 3: 131 197 10
x14507:	mov di, bp	; 2: 137 239
x14509:	add di, 6	; 3: 131 199 6
x14512:	jmp fprintf	; 3: 233 202 37

file_test$22:	; PostCall 10

file_test$23:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$24:	; Call 10 abort 0
x14515:	mov word [bp + 10], file_test$25	; 5: 199 70 10 193 56
x14520:	mov [bp + 12], bp	; 3: 137 110 12
x14523:	add bp, 10	; 3: 131 197 10
x14526:	jmp abort	; 3: 233 247 37

file_test$25:	; PostCall 10

file_test$26:	; NotEqual 38 outFilePtr 0
x14529:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x14533:	jne file_test$38	; 2: 117 59

file_test$27:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$28:	; Parameter 10 stderr 6
x14535:	mov ax, [stderr]	; 3: 161 139 77
x14538:	mov [bp + 16], ax	; 3: 137 70 16

file_test$29:	; Parameter 10 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x14541:	mov word [bp + 18], @10718$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 18 13 78

file_test$30:	; Parameter 10 string_outFilePtr20213D20NULL# 10
x14546:	mov word [bp + 20], @10719$string_outFilePtr20213D20NULL#	; 5: 199 70 20 59 78

file_test$31:	; Parameter 10 string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x14551:	mov word [bp + 22], @10720$string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 22 78 78

file_test$32:	; Parameter 10 15 14
x14556:	mov word [bp + 24], 15	; 5: 199 70 24 15 0

file_test$33:	; Call 10 fprintf 0
x14561:	mov word [bp + 10], file_test$34	; 5: 199 70 10 244 56
x14566:	mov [bp + 12], bp	; 3: 137 110 12
x14569:	add bp, 10	; 3: 131 197 10
x14572:	mov di, bp	; 2: 137 239
x14574:	add di, 6	; 3: 131 199 6
x14577:	jmp fprintf	; 3: 233 137 37

file_test$34:	; PostCall 10

file_test$35:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$36:	; Call 10 abort 0
x14580:	mov word [bp + 10], file_test$37	; 5: 199 70 10 2 57
x14585:	mov [bp + 12], bp	; 3: 137 110 12
x14588:	add bp, 10	; 3: 131 197 10
x14591:	jmp abort	; 3: 233 182 37

file_test$37:	; PostCall 10

file_test$38:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$39:	; Parameter 10 inFilePtr 6
x14594:	mov ax, [bp + 6]	; 3: 139 70 6
x14597:	mov [bp + 16], ax	; 3: 137 70 16

file_test$40:	; Call 10 feof 0
x14600:	mov word [bp + 10], file_test$41	; 5: 199 70 10 22 57
x14605:	mov [bp + 12], bp	; 3: 137 110 12
x14608:	add bp, 10	; 3: 131 197 10
x14611:	jmp feof	; 3: 233 179 37

file_test$41:	; PostCall 10

file_test$42:	; GetReturnValue £temporary4825

file_test$43:	; NotEqual 75 £temporary4825 0
x14614:	cmp bx, 0	; 3: 131 251 0
x14617:	jne file_test$75	; 4: 15 133 141 0

file_test$44:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$45:	; Parameter 18 inFilePtr 6
x14621:	mov ax, [bp + 6]	; 3: 139 70 6
x14624:	mov [bp + 24], ax	; 3: 137 70 24

file_test$46:	; Parameter 18 string_25lf# 8
x14627:	mov word [bp + 26], @10730$string_25lf#	; 5: 199 70 26 142 78

file_test$47:	; address £temporary4828 value
x14632:	mov si, bp	; 2: 137 238
x14634:	add si, 10	; 3: 131 198 10

file_test$48:	; Parameter 18 £temporary4828 10
x14637:	mov [bp + 28], si	; 3: 137 118 28

file_test$49:	; Call 18 fscanf 0
x14640:	mov word [bp + 18], file_test$50	; 5: 199 70 18 67 57
x14645:	mov [bp + 20], bp	; 3: 137 110 20
x14648:	add bp, 18	; 3: 131 197 18
x14651:	mov di, bp	; 2: 137 239
x14653:	add di, 2	; 3: 131 199 2
x14656:	jmp fscanf	; 3: 233 27 38

file_test$50:	; PostCall 18

file_test$51:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$52:	; Parameter 18 string_X12025f0A# 6
x14659:	mov word [bp + 24], @10733$string_X12025f0A#	; 5: 199 70 24 146 78

file_test$53:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$54:	; PushFloat value
x14664:	fld qword [bp + 10]	; 3: 221 70 10

file_test$55:	; Parameter 18 value 14
x14667:	fstp qword [bp + 32]	; 3: 221 94 32

file_test$56:	; Call 18 sqrt 8
x14670:	mov word [bp + 26], file_test$57	; 5: 199 70 26 92 57
x14675:	mov [bp + 28], bp	; 3: 137 110 28
x14678:	add bp, 26	; 3: 131 197 26
x14681:	jmp sqrt	; 3: 233 179 245

file_test$57:	; PostCall 18

file_test$58:	; GetReturnValue £temporary4830

file_test$59:	; Parameter 18 £temporary4830 8
x14684:	fstp qword [bp + 26]	; 3: 221 94 26

file_test$60:	; Call 18 printf 0
x14687:	mov word [bp + 18], file_test$61	; 5: 199 70 18 114 57
x14692:	mov [bp + 20], bp	; 3: 137 110 20
x14695:	add bp, 18	; 3: 131 197 18
x14698:	mov di, bp	; 2: 137 239
x14700:	add di, 8	; 3: 131 199 8
x14703:	jmp printf	; 3: 233 146 211

file_test$61:	; PostCall 18

file_test$62:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$63:	; Parameter 18 outFilePtr 6
x14706:	mov ax, [bp + 8]	; 3: 139 70 8
x14709:	mov [bp + 24], ax	; 3: 137 70 24

file_test$64:	; Parameter 18 string_X22025f0A# 8
x14712:	mov word [bp + 26], @10736$string_X22025f0A#	; 5: 199 70 26 153 78

file_test$65:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$66:	; PushFloat value
x14717:	fld qword [bp + 10]	; 3: 221 70 10

file_test$67:	; Parameter 18 value 16
x14720:	fstp qword [bp + 34]	; 3: 221 94 34

file_test$68:	; Call 18 sqrt 10
x14723:	mov word [bp + 28], file_test$69	; 5: 199 70 28 145 57
x14728:	mov [bp + 30], bp	; 3: 137 110 30
x14731:	add bp, 28	; 3: 131 197 28
x14734:	jmp sqrt	; 3: 233 126 245

file_test$69:	; PostCall 18

file_test$70:	; GetReturnValue £temporary4832

file_test$71:	; Parameter 18 £temporary4832 10
x14737:	fstp qword [bp + 28]	; 3: 221 94 28

file_test$72:	; Call 18 fprintf 0
x14740:	mov word [bp + 18], file_test$73	; 5: 199 70 18 167 57
x14745:	mov [bp + 20], bp	; 3: 137 110 20
x14748:	add bp, 18	; 3: 131 197 18
x14751:	mov di, bp	; 2: 137 239
x14753:	add di, 8	; 3: 131 199 8
x14756:	jmp fprintf	; 3: 233 214 36

file_test$73:	; PostCall 18

file_test$74:	; Goto 38
x14759:	jmp file_test$38	; 3: 233 88 255

file_test$75:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$76:	; Parameter 10 string_0A# 6
x14762:	mov word [bp + 16], @10739$string_0A#	; 5: 199 70 16 160 78

file_test$77:	; Call 10 printf 0
x14767:	mov word [bp + 10], file_test$78	; 5: 199 70 10 191 57
x14772:	mov [bp + 12], bp	; 3: 137 110 12
x14775:	add bp, 10	; 3: 131 197 10
x14778:	mov di, bp	; 2: 137 239
x14780:	jmp printf	; 3: 233 69 211

file_test$78:	; PostCall 10

file_test$79:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$80:	; Parameter 10 inFilePtr 6
x14783:	mov ax, [bp + 6]	; 3: 139 70 6
x14786:	mov [bp + 16], ax	; 3: 137 70 16

file_test$81:	; Call 10 fclose 0
x14789:	mov word [bp + 10], file_test$82	; 5: 199 70 10 211 57
x14794:	mov [bp + 12], bp	; 3: 137 110 12
x14797:	add bp, 10	; 3: 131 197 10
x14800:	jmp fclose	; 3: 233 186 55

file_test$82:	; PostCall 10

file_test$83:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$84:	; Parameter 10 outFilePtr 6
x14803:	mov ax, [bp + 8]	; 3: 139 70 8
x14806:	mov [bp + 16], ax	; 3: 137 70 16

file_test$85:	; Call 10 fclose 0
x14809:	mov word [bp + 10], file_test$86	; 5: 199 70 10 231 57
x14814:	mov [bp + 12], bp	; 3: 137 110 12
x14817:	add bp, 10	; 3: 131 197 10
x14820:	jmp fclose	; 3: 233 166 55

file_test$86:	; PostCall 10

file_test$87:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$88:	; Parameter 6 string_in2Etxt# 6
x14823:	mov word [bp + 12], @10743$string_in2Etxt#	; 5: 199 70 12 162 78

file_test$89:	; Parameter 6 string_r# 8
x14828:	mov word [bp + 14], @10744$string_r#	; 5: 199 70 14 169 78

file_test$90:	; Call 6 fopen 0
x14833:	mov word [bp + 6], file_test$91	; 5: 199 70 6 255 57
x14838:	mov [bp + 8], bp	; 3: 137 110 8
x14841:	add bp, 6	; 3: 131 197 6
x14844:	jmp fopen	; 3: 233 229 31

file_test$91:	; PostCall 6

file_test$92:	; GetReturnValue £temporary4837

file_test$93:	; Assign inFilePtr £temporary4837
x14847:	mov [bp + 6], bx	; 3: 137 94 6

file_test$94:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$95:	; Parameter 8 string_outY2Etxt# 6
x14850:	mov word [bp + 14], @10747$string_outY2Etxt#	; 5: 199 70 14 171 78

file_test$96:	; Parameter 8 string_w# 8
x14855:	mov word [bp + 16], @10748$string_w#	; 5: 199 70 16 180 78

file_test$97:	; Call 8 fopen 0
x14860:	mov word [bp + 8], file_test$98	; 5: 199 70 8 26 58
x14865:	mov [bp + 10], bp	; 3: 137 110 10
x14868:	add bp, 8	; 3: 131 197 8
x14871:	jmp fopen	; 3: 233 202 31

file_test$98:	; PostCall 8

file_test$99:	; GetReturnValue £temporary4838

file_test$100:	; Assign outFilePtr £temporary4838
x14874:	mov [bp + 8], bx	; 3: 137 94 8

file_test$101:	; NotEqual 113 inFilePtr 0
x14877:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x14881:	jne file_test$113	; 2: 117 59

file_test$102:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$103:	; Parameter 10 stderr 6
x14883:	mov ax, [stderr]	; 3: 161 139 77
x14886:	mov [bp + 16], ax	; 3: 137 70 16

file_test$104:	; Parameter 10 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x14889:	mov word [bp + 18], @10756$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 18 182 78

file_test$105:	; Parameter 10 string_inFilePtr20213D20NULL# 10
x14894:	mov word [bp + 20], @10757$string_inFilePtr20213D20NULL#	; 5: 199 70 20 228 78

file_test$106:	; Parameter 10 string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x14899:	mov word [bp + 22], @10758$string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 22 246 78

file_test$107:	; Parameter 10 34 14
x14904:	mov word [bp + 24], 34	; 5: 199 70 24 34 0

file_test$108:	; Call 10 fprintf 0
x14909:	mov word [bp + 10], file_test$109	; 5: 199 70 10 80 58
x14914:	mov [bp + 12], bp	; 3: 137 110 12
x14917:	add bp, 10	; 3: 131 197 10
x14920:	mov di, bp	; 2: 137 239
x14922:	add di, 6	; 3: 131 199 6
x14925:	jmp fprintf	; 3: 233 45 36

file_test$109:	; PostCall 10

file_test$110:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$111:	; Call 10 abort 0
x14928:	mov word [bp + 10], file_test$112	; 5: 199 70 10 94 58
x14933:	mov [bp + 12], bp	; 3: 137 110 12
x14936:	add bp, 10	; 3: 131 197 10
x14939:	jmp abort	; 3: 233 90 36

file_test$112:	; PostCall 10

file_test$113:	; NotEqual 125 outFilePtr 0
x14942:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x14946:	jne file_test$125	; 2: 117 59

file_test$114:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$115:	; Parameter 10 stderr 6
x14948:	mov ax, [stderr]	; 3: 161 139 77
x14951:	mov [bp + 16], ax	; 3: 137 70 16

file_test$116:	; Parameter 10 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x14954:	mov word [bp + 18], @10768$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 18 54 79

file_test$117:	; Parameter 10 string_outFilePtr20213D20NULL# 10
x14959:	mov word [bp + 20], @10769$string_outFilePtr20213D20NULL#	; 5: 199 70 20 100 79

file_test$118:	; Parameter 10 string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x14964:	mov word [bp + 22], @10770$string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 22 119 79

file_test$119:	; Parameter 10 35 14
x14969:	mov word [bp + 24], 35	; 5: 199 70 24 35 0

file_test$120:	; Call 10 fprintf 0
x14974:	mov word [bp + 10], file_test$121	; 5: 199 70 10 145 58
x14979:	mov [bp + 12], bp	; 3: 137 110 12
x14982:	add bp, 10	; 3: 131 197 10
x14985:	mov di, bp	; 2: 137 239
x14987:	add di, 6	; 3: 131 199 6
x14990:	jmp fprintf	; 3: 233 236 35

file_test$121:	; PostCall 10

file_test$122:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$123:	; Call 10 abort 0
x14993:	mov word [bp + 10], file_test$124	; 5: 199 70 10 159 58
x14998:	mov [bp + 12], bp	; 3: 137 110 12
x15001:	add bp, 10	; 3: 131 197 10
x15004:	jmp abort	; 3: 233 25 36

file_test$124:	; PostCall 10

file_test$125:	; Assign size 0
x15007:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

file_test$126:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$127:	; Parameter 14 inFilePtr 6
x15012:	mov ax, [bp + 6]	; 3: 139 70 6
x15015:	mov [bp + 20], ax	; 3: 137 70 20

file_test$128:	; Parameter 14 string_25i# 8
x15018:	mov word [bp + 22], @10779$string_25i#	; 5: 199 70 22 183 79

file_test$129:	; address £temporary4847 size
x15023:	mov si, bp	; 2: 137 238
x15025:	add si, 10	; 3: 131 198 10

file_test$130:	; Parameter 14 £temporary4847 10
x15028:	mov [bp + 24], si	; 3: 137 118 24

file_test$131:	; Call 14 fscanf 0
x15031:	mov word [bp + 14], file_test$132	; 5: 199 70 14 202 58
x15036:	mov [bp + 16], bp	; 3: 137 110 16
x15039:	add bp, 14	; 3: 131 197 14
x15042:	mov di, bp	; 2: 137 239
x15044:	add di, 2	; 3: 131 199 2
x15047:	jmp fscanf	; 3: 233 148 36

file_test$132:	; PostCall 14

file_test$133:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$134:	; Parameter 14 string_size2025i0A# 6
x15050:	mov word [bp + 20], @10782$string_size2025i0A#	; 5: 199 70 20 186 79

file_test$135:	; Parameter 14 size 8
x15055:	mov ax, [bp + 10]	; 3: 139 70 10
x15058:	mov [bp + 22], ax	; 3: 137 70 22

file_test$136:	; Call 14 printf 0
x15061:	mov word [bp + 14], file_test$137	; 5: 199 70 14 232 58
x15066:	mov [bp + 16], bp	; 3: 137 110 16
x15069:	add bp, 14	; 3: 131 197 14
x15072:	mov di, bp	; 2: 137 239
x15074:	add di, 2	; 3: 131 199 2
x15077:	jmp printf	; 3: 233 28 210

file_test$137:	; PostCall 14

file_test$138:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$139:	; Parameter 14 outFilePtr 6
x15080:	mov ax, [bp + 8]	; 3: 139 70 8
x15083:	mov [bp + 20], ax	; 3: 137 70 20

file_test$140:	; Parameter 14 string_Y20size2025i0A# 8
x15086:	mov word [bp + 22], @10784$string_Y20size2025i0A#	; 5: 199 70 22 195 79

file_test$141:	; Parameter 14 size 10
x15091:	mov ax, [bp + 10]	; 3: 139 70 10
x15094:	mov [bp + 24], ax	; 3: 137 70 24

file_test$142:	; Call 14 fprintf 0
x15097:	mov word [bp + 14], file_test$143	; 5: 199 70 14 12 59
x15102:	mov [bp + 16], bp	; 3: 137 110 16
x15105:	add bp, 14	; 3: 131 197 14
x15108:	mov di, bp	; 2: 137 239
x15110:	add di, 2	; 3: 131 199 2
x15113:	jmp fprintf	; 3: 233 113 35

file_test$143:	; PostCall 14

file_test$144:	; Assign index 0
x15116:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

file_test$145:	; SignedGreaterThanEqual 178 index size
x15121:	mov ax, [bp + 10]	; 3: 139 70 10
x15124:	cmp [bp + 12], ax	; 3: 57 70 12
x15127:	jge file_test$178	; 4: 15 141 144 0

file_test$146:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$147:	; Parameter 22 inFilePtr 6
x15131:	mov ax, [bp + 6]	; 3: 139 70 6
x15134:	mov [bp + 28], ax	; 3: 137 70 28

file_test$148:	; Parameter 22 string_25lf# 8
x15137:	mov word [bp + 30], @10793$string_25lf#	; 5: 199 70 30 206 79

file_test$149:	; address £temporary4853 value
x15142:	mov si, bp	; 2: 137 238
x15144:	add si, 14	; 3: 131 198 14

file_test$150:	; Parameter 22 £temporary4853 10
x15147:	mov [bp + 32], si	; 3: 137 118 32

file_test$151:	; Call 22 fscanf 0
x15150:	mov word [bp + 22], file_test$152	; 5: 199 70 22 65 59
x15155:	mov [bp + 24], bp	; 3: 137 110 24
x15158:	add bp, 22	; 3: 131 197 22
x15161:	mov di, bp	; 2: 137 239
x15163:	add di, 2	; 3: 131 199 2
x15166:	jmp fscanf	; 3: 233 29 36

file_test$152:	; PostCall 22

file_test$153:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$154:	; Parameter 22 string_Y12025f0A# 6
x15169:	mov word [bp + 28], @10796$string_Y12025f0A#	; 5: 199 70 28 210 79

file_test$155:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$156:	; PushFloat value
x15174:	fld qword [bp + 14]	; 3: 221 70 14

file_test$157:	; Parameter 22 value 14
x15177:	fstp qword [bp + 36]	; 3: 221 94 36

file_test$158:	; Call 22 sqrt 8
x15180:	mov word [bp + 30], file_test$159	; 5: 199 70 30 90 59
x15185:	mov [bp + 32], bp	; 3: 137 110 32
x15188:	add bp, 30	; 3: 131 197 30
x15191:	jmp sqrt	; 3: 233 181 243

file_test$159:	; PostCall 22

file_test$160:	; GetReturnValue £temporary4855

file_test$161:	; Parameter 22 £temporary4855 8
x15194:	fstp qword [bp + 30]	; 3: 221 94 30

file_test$162:	; Call 22 printf 0
x15197:	mov word [bp + 22], file_test$163	; 5: 199 70 22 112 59
x15202:	mov [bp + 24], bp	; 3: 137 110 24
x15205:	add bp, 22	; 3: 131 197 22
x15208:	mov di, bp	; 2: 137 239
x15210:	add di, 8	; 3: 131 199 8
x15213:	jmp printf	; 3: 233 148 209

file_test$163:	; PostCall 22

file_test$164:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$165:	; Parameter 22 outFilePtr 6
x15216:	mov ax, [bp + 8]	; 3: 139 70 8
x15219:	mov [bp + 28], ax	; 3: 137 70 28

file_test$166:	; Parameter 22 string_Y22025f0A# 8
x15222:	mov word [bp + 30], @10799$string_Y22025f0A#	; 5: 199 70 30 217 79

file_test$167:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$168:	; PushFloat value
x15227:	fld qword [bp + 14]	; 3: 221 70 14

file_test$169:	; Parameter 22 value 16
x15230:	fstp qword [bp + 38]	; 3: 221 94 38

file_test$170:	; Call 22 sqrt 10
x15233:	mov word [bp + 32], file_test$171	; 5: 199 70 32 143 59
x15238:	mov [bp + 34], bp	; 3: 137 110 34
x15241:	add bp, 32	; 3: 131 197 32
x15244:	jmp sqrt	; 3: 233 128 243

file_test$171:	; PostCall 22

file_test$172:	; GetReturnValue £temporary4857

file_test$173:	; Parameter 22 £temporary4857 10
x15247:	fstp qword [bp + 32]	; 3: 221 94 32

file_test$174:	; Call 22 fprintf 0
x15250:	mov word [bp + 22], file_test$175	; 5: 199 70 22 165 59
x15255:	mov [bp + 24], bp	; 3: 137 110 24
x15258:	add bp, 22	; 3: 131 197 22
x15261:	mov di, bp	; 2: 137 239
x15263:	add di, 8	; 3: 131 199 8
x15266:	jmp fprintf	; 3: 233 216 34

file_test$175:	; PostCall 22

file_test$176:	; Increment index
x15269:	inc word [bp + 12]	; 3: 255 70 12

file_test$177:	; Goto 145
x15272:	jmp file_test$145	; 3: 233 102 255

file_test$178:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$179:	; Parameter 14 string_0A# 6
x15275:	mov word [bp + 20], @10802$string_0A#	; 5: 199 70 20 224 79

file_test$180:	; Call 14 printf 0
x15280:	mov word [bp + 14], file_test$181	; 5: 199 70 14 192 59
x15285:	mov [bp + 16], bp	; 3: 137 110 16
x15288:	add bp, 14	; 3: 131 197 14
x15291:	mov di, bp	; 2: 137 239
x15293:	jmp printf	; 3: 233 68 209

file_test$181:	; PostCall 14

file_test$182:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$183:	; Parameter 10 inFilePtr 6
x15296:	mov ax, [bp + 6]	; 3: 139 70 6
x15299:	mov [bp + 16], ax	; 3: 137 70 16

file_test$184:	; Call 10 fclose 0
x15302:	mov word [bp + 10], file_test$185	; 5: 199 70 10 212 59
x15307:	mov [bp + 12], bp	; 3: 137 110 12
x15310:	add bp, 10	; 3: 131 197 10
x15313:	jmp fclose	; 3: 233 185 53

file_test$185:	; PostCall 10

file_test$186:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$187:	; Parameter 10 outFilePtr 6
x15316:	mov ax, [bp + 8]	; 3: 139 70 8
x15319:	mov [bp + 16], ax	; 3: 137 70 16

file_test$188:	; Call 10 fclose 0
x15322:	mov word [bp + 10], file_test$189	; 5: 199 70 10 232 59
x15327:	mov [bp + 12], bp	; 3: 137 110 12
x15330:	add bp, 10	; 3: 131 197 10
x15333:	jmp fclose	; 3: 233 165 53

file_test$189:	; PostCall 10

file_test$190:	; Assign sourceFile string_Y#
x15336:	mov word [bp + 6], @10806$string_Y#	; 5: 199 70 6 226 79

file_test$191:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$192:	; Parameter 8 sourceFile 6
x15341:	mov ax, [bp + 6]	; 3: 139 70 6
x15344:	mov [bp + 14], ax	; 3: 137 70 14

file_test$193:	; Call 8 remove 0
x15347:	mov word [bp + 8], file_test$194	; 5: 199 70 8 1 60
x15352:	mov [bp + 10], bp	; 3: 137 110 10
x15355:	add bp, 8	; 3: 131 197 8
x15358:	jmp remove	; 3: 233 79 54

file_test$194:	; PostCall 8

file_test$195:	; GetReturnValue £temporary4862

file_test$196:	; NotEqual 203 £temporary4862 0
x15361:	cmp bx, 0	; 3: 131 251 0
x15364:	jne file_test$203	; 2: 117 32

file_test$197:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$198:	; Parameter 8 string_2225s2220has20been20removed0A# 6
x15366:	mov word [bp + 14], @10812$string_2225s2220has20been20removed0A#	; 5: 199 70 14 228 79

file_test$199:	; Parameter 8 sourceFile 8
x15371:	mov ax, [bp + 6]	; 3: 139 70 6
x15374:	mov [bp + 16], ax	; 3: 137 70 16

file_test$200:	; Call 8 printf 0
x15377:	mov word [bp + 8], file_test$201	; 5: 199 70 8 36 60
x15382:	mov [bp + 10], bp	; 3: 137 110 10
x15385:	add bp, 8	; 3: 131 197 8
x15388:	mov di, bp	; 2: 137 239
x15390:	add di, 2	; 3: 131 199 2
x15393:	jmp printf	; 3: 233 224 208

file_test$201:	; PostCall 8

file_test$202:	; Goto 215
x15396:	jmp file_test$215	; 2: 235 59

file_test$203:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$204:	; Parameter 8 string_Error202225s222025i3A2025s2E0A# 6
x15398:	mov word [bp + 14], @10814$string_Error202225s222025i3A2025s2E0A#	; 5: 199 70 14 251 79

file_test$205:	; Parameter 8 sourceFile 8
x15403:	mov ax, [bp + 6]	; 3: 139 70 6
x15406:	mov [bp + 16], ax	; 3: 137 70 16

file_test$206:	; Parameter 8 errno 10
x15409:	mov ax, [errno]	; 3: 161 230 10
x15412:	mov [bp + 18], ax	; 3: 137 70 18

file_test$207:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$208:	; Parameter 8 errno 18
x15415:	mov ax, [errno]	; 3: 161 230 10
x15418:	mov [bp + 26], ax	; 3: 137 70 26

file_test$209:	; Call 8 strerror 12
x15421:	mov word [bp + 20], file_test$210	; 5: 199 70 20 75 60
x15426:	mov [bp + 22], bp	; 3: 137 110 22
x15429:	add bp, 20	; 3: 131 197 20
x15432:	jmp strerror	; 3: 233 211 247

file_test$210:	; PostCall 8

file_test$211:	; GetReturnValue £temporary4865

file_test$212:	; Parameter 8 £temporary4865 12
x15435:	mov [bp + 20], bx	; 3: 137 94 20

file_test$213:	; Call 8 printf 0
x15438:	mov word [bp + 8], file_test$214	; 5: 199 70 8 97 60
x15443:	mov [bp + 10], bp	; 3: 137 110 10
x15446:	add bp, 8	; 3: 131 197 8
x15449:	mov di, bp	; 2: 137 239
x15451:	add di, 6	; 3: 131 199 6
x15454:	jmp printf	; 3: 233 163 208

file_test$214:	; PostCall 8

file_test$215:	; Assign sourceFile string_X#
x15457:	mov word [bp + 6], @10817$string_X#	; 5: 199 70 6 15 80

file_test$216:	; Assign targetFile string_Y#
x15462:	mov word [bp + 8], @10819$string_Y#	; 5: 199 70 8 17 80

file_test$217:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$218:	; Parameter 10 sourceFile 6
x15467:	mov ax, [bp + 6]	; 3: 139 70 6
x15470:	mov [bp + 16], ax	; 3: 137 70 16

file_test$219:	; Parameter 10 string_w# 8
x15473:	mov word [bp + 18], @10821$string_w#	; 5: 199 70 18 19 80

file_test$220:	; Call 10 fopen 0
x15478:	mov word [bp + 10], file_test$221	; 5: 199 70 10 132 60
x15483:	mov [bp + 12], bp	; 3: 137 110 12
x15486:	add bp, 10	; 3: 131 197 10
x15489:	jmp fopen	; 3: 233 96 29

file_test$221:	; PostCall 10

file_test$222:	; GetReturnValue £temporary4867

file_test$223:	; Assign filePtr £temporary4867
x15492:	mov [bp + 10], bx	; 3: 137 94 10

file_test$224:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$225:	; Parameter 12 filePtr 6
x15495:	mov ax, [bp + 10]	; 3: 139 70 10
x15498:	mov [bp + 18], ax	; 3: 137 70 18

file_test$226:	; Parameter 12 string_Hello20X# 8
x15501:	mov word [bp + 20], @10824$string_Hello20X#	; 5: 199 70 20 21 80

file_test$227:	; Call 12 fprintf 0
x15506:	mov word [bp + 12], file_test$228	; 5: 199 70 12 162 60
x15511:	mov [bp + 14], bp	; 3: 137 110 14
x15514:	add bp, 12	; 3: 131 197 12
x15517:	mov di, bp	; 2: 137 239
x15519:	jmp fprintf	; 3: 233 219 33

file_test$228:	; PostCall 12

file_test$229:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$230:	; Parameter 12 filePtr 6
x15522:	mov ax, [bp + 10]	; 3: 139 70 10
x15525:	mov [bp + 18], ax	; 3: 137 70 18

file_test$231:	; Call 12 fclose 0
x15528:	mov word [bp + 12], file_test$232	; 5: 199 70 12 182 60
x15533:	mov [bp + 14], bp	; 3: 137 110 14
x15536:	add bp, 12	; 3: 131 197 12
x15539:	jmp fclose	; 3: 233 215 52

file_test$232:	; PostCall 12

file_test$233:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$234:	; Parameter 12 sourceFile 6
x15542:	mov ax, [bp + 6]	; 3: 139 70 6
x15545:	mov [bp + 18], ax	; 3: 137 70 18

file_test$235:	; Parameter 12 targetFile 8
x15548:	mov ax, [bp + 8]	; 3: 139 70 8
x15551:	mov [bp + 20], ax	; 3: 137 70 20

file_test$236:	; Call 12 rename 0
x15554:	mov word [bp + 12], file_test$237	; 5: 199 70 12 208 60
x15559:	mov [bp + 14], bp	; 3: 137 110 14
x15562:	add bp, 12	; 3: 131 197 12
x15565:	jmp rename	; 3: 233 173 53

file_test$237:	; PostCall 12

file_test$238:	; GetReturnValue £temporary4870

file_test$239:	; NotEqual 247 £temporary4870 0
x15568:	cmp bx, 0	; 3: 131 251 0
x15571:	jne file_test$247	; 2: 117 38

file_test$240:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$241:	; Parameter 12 string_2225s2220has20been20renamed20to202225s222E0A# 6
x15573:	mov word [bp + 18], @10831$string_2225s2220has20been20renamed20to202225s222E0A#	; 5: 199 70 18 29 80

file_test$242:	; Parameter 12 sourceFile 8
x15578:	mov ax, [bp + 6]	; 3: 139 70 6
x15581:	mov [bp + 20], ax	; 3: 137 70 20

file_test$243:	; Parameter 12 targetFile 10
x15584:	mov ax, [bp + 8]	; 3: 139 70 8
x15587:	mov [bp + 22], ax	; 3: 137 70 22

file_test$244:	; Call 12 printf 0
x15590:	mov word [bp + 12], file_test$245	; 5: 199 70 12 249 60
x15595:	mov [bp + 14], bp	; 3: 137 110 14
x15598:	add bp, 12	; 3: 131 197 12
x15601:	mov di, bp	; 2: 137 239
x15603:	add di, 4	; 3: 131 199 4
x15606:	jmp printf	; 3: 233 11 208

file_test$245:	; PostCall 12

file_test$246:	; Goto 260
x15609:	jmp file_test$260	; 2: 235 65

file_test$247:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$248:	; Parameter 12 string_Error202225s22202225s222025i3A2025s2E0A# 6
x15611:	mov word [bp + 18], @10833$string_Error202225s22202225s222025i3A2025s2E0A#	; 5: 199 70 18 61 80

file_test$249:	; Parameter 12 sourceFile 8
x15616:	mov ax, [bp + 6]	; 3: 139 70 6
x15619:	mov [bp + 20], ax	; 3: 137 70 20

file_test$250:	; Parameter 12 targetFile 10
x15622:	mov ax, [bp + 8]	; 3: 139 70 8
x15625:	mov [bp + 22], ax	; 3: 137 70 22

file_test$251:	; Parameter 12 errno 12
x15628:	mov ax, [errno]	; 3: 161 230 10
x15631:	mov [bp + 24], ax	; 3: 137 70 24

file_test$252:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$253:	; Parameter 12 errno 20
x15634:	mov ax, [errno]	; 3: 161 230 10
x15637:	mov [bp + 32], ax	; 3: 137 70 32

file_test$254:	; Call 12 strerror 14
x15640:	mov word [bp + 26], file_test$255	; 5: 199 70 26 38 61
x15645:	mov [bp + 28], bp	; 3: 137 110 28
x15648:	add bp, 26	; 3: 131 197 26
x15651:	jmp strerror	; 3: 233 248 246

file_test$255:	; PostCall 12

file_test$256:	; GetReturnValue £temporary4873

file_test$257:	; Parameter 12 £temporary4873 14
x15654:	mov [bp + 26], bx	; 3: 137 94 26

file_test$258:	; Call 12 printf 0
x15657:	mov word [bp + 12], file_test$259	; 5: 199 70 12 60 61
x15662:	mov [bp + 14], bp	; 3: 137 110 14
x15665:	add bp, 12	; 3: 131 197 12
x15668:	mov di, bp	; 2: 137 239
x15670:	add di, 8	; 3: 131 199 8
x15673:	jmp printf	; 3: 233 200 207

file_test$259:	; PostCall 12

file_test$260:	; Assign sourceFile string_X2#
x15676:	mov word [bp + 6], @10836$string_X2#	; 5: 199 70 6 86 80

file_test$261:	; Assign targetFile string_Y2#
x15681:	mov word [bp + 8], @10838$string_Y2#	; 5: 199 70 8 89 80

file_test$262:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$263:	; Parameter 10 sourceFile 6
x15686:	mov ax, [bp + 6]	; 3: 139 70 6
x15689:	mov [bp + 16], ax	; 3: 137 70 16

file_test$264:	; Parameter 10 targetFile 8
x15692:	mov ax, [bp + 8]	; 3: 139 70 8
x15695:	mov [bp + 18], ax	; 3: 137 70 18

file_test$265:	; Call 10 rename 0
x15698:	mov word [bp + 10], file_test$266	; 5: 199 70 10 96 61
x15703:	mov [bp + 12], bp	; 3: 137 110 12
x15706:	add bp, 10	; 3: 131 197 10
x15709:	jmp rename	; 3: 233 29 53

file_test$266:	; PostCall 10

file_test$267:	; GetReturnValue £temporary4875

file_test$268:	; NotEqual 276 £temporary4875 0
x15712:	cmp bx, 0	; 3: 131 251 0
x15715:	jne file_test$276	; 2: 117 38

file_test$269:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$270:	; Parameter 10 string_2225s2220has20been20renamed20to202225s222E0A# 6
x15717:	mov word [bp + 16], @10844$string_2225s2220has20been20renamed20to202225s222E0A#	; 5: 199 70 16 92 80

file_test$271:	; Parameter 10 sourceFile 8
x15722:	mov ax, [bp + 6]	; 3: 139 70 6
x15725:	mov [bp + 18], ax	; 3: 137 70 18

file_test$272:	; Parameter 10 targetFile 10
x15728:	mov ax, [bp + 8]	; 3: 139 70 8
x15731:	mov [bp + 20], ax	; 3: 137 70 20

file_test$273:	; Call 10 printf 0
x15734:	mov word [bp + 10], file_test$274	; 5: 199 70 10 137 61
x15739:	mov [bp + 12], bp	; 3: 137 110 12
x15742:	add bp, 10	; 3: 131 197 10
x15745:	mov di, bp	; 2: 137 239
x15747:	add di, 4	; 3: 131 199 4
x15750:	jmp printf	; 3: 233 123 207

file_test$274:	; PostCall 10

file_test$275:	; Goto 289
x15753:	jmp file_test$289	; 2: 235 65

file_test$276:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$277:	; Parameter 10 string_Error202225s22202225s222025i3A2025s2E0A# 6
x15755:	mov word [bp + 16], @10846$string_Error202225s22202225s222025i3A2025s2E0A#	; 5: 199 70 16 124 80

file_test$278:	; Parameter 10 sourceFile 8
x15760:	mov ax, [bp + 6]	; 3: 139 70 6
x15763:	mov [bp + 18], ax	; 3: 137 70 18

file_test$279:	; Parameter 10 targetFile 10
x15766:	mov ax, [bp + 8]	; 3: 139 70 8
x15769:	mov [bp + 20], ax	; 3: 137 70 20

file_test$280:	; Parameter 10 errno 12
x15772:	mov ax, [errno]	; 3: 161 230 10
x15775:	mov [bp + 22], ax	; 3: 137 70 22

file_test$281:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$282:	; Parameter 10 errno 20
x15778:	mov ax, [errno]	; 3: 161 230 10
x15781:	mov [bp + 30], ax	; 3: 137 70 30

file_test$283:	; Call 10 strerror 14
x15784:	mov word [bp + 24], file_test$284	; 5: 199 70 24 182 61
x15789:	mov [bp + 26], bp	; 3: 137 110 26
x15792:	add bp, 24	; 3: 131 197 24
x15795:	jmp strerror	; 3: 233 104 246

file_test$284:	; PostCall 10

file_test$285:	; GetReturnValue £temporary4878

file_test$286:	; Parameter 10 £temporary4878 14
x15798:	mov [bp + 24], bx	; 3: 137 94 24

file_test$287:	; Call 10 printf 0
x15801:	mov word [bp + 10], file_test$288	; 5: 199 70 10 204 61
x15806:	mov [bp + 12], bp	; 3: 137 110 12
x15809:	add bp, 10	; 3: 131 197 10
x15812:	mov di, bp	; 2: 137 239
x15814:	add di, 8	; 3: 131 199 8
x15817:	jmp printf	; 3: 233 56 207

file_test$288:	; PostCall 10

file_test$289:	; Assign targetFile string_Z#
x15820:	mov word [bp + 6], @10849$string_Z#	; 5: 199 70 6 149 80

file_test$290:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$291:	; Parameter 8 targetFile 6
x15825:	mov ax, [bp + 6]	; 3: 139 70 6
x15828:	mov [bp + 14], ax	; 3: 137 70 14

file_test$292:	; Parameter 8 string_w# 8
x15831:	mov word [bp + 16], @10851$string_w#	; 5: 199 70 16 151 80

file_test$293:	; Call 8 fopen 0
x15836:	mov word [bp + 8], file_test$294	; 5: 199 70 8 234 61
x15841:	mov [bp + 10], bp	; 3: 137 110 10
x15844:	add bp, 8	; 3: 131 197 8
x15847:	jmp fopen	; 3: 233 250 27

file_test$294:	; PostCall 8

file_test$295:	; GetReturnValue £temporary4880

file_test$296:	; Assign filePtr £temporary4880
x15850:	mov [bp + 8], bx	; 3: 137 94 8

file_test$297:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$298:	; Parameter 10 filePtr 6
x15853:	mov ax, [bp + 8]	; 3: 139 70 8
x15856:	mov [bp + 16], ax	; 3: 137 70 16

file_test$299:	; Parameter 10 string_Hello20Z# 8
x15859:	mov word [bp + 18], @10854$string_Hello20Z#	; 5: 199 70 18 153 80

file_test$300:	; Call 10 fprintf 0
x15864:	mov word [bp + 10], file_test$301	; 5: 199 70 10 8 62
x15869:	mov [bp + 12], bp	; 3: 137 110 12
x15872:	add bp, 10	; 3: 131 197 10
x15875:	mov di, bp	; 2: 137 239
x15877:	jmp fprintf	; 3: 233 117 32

file_test$301:	; PostCall 10

file_test$302:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$303:	; Parameter 10 filePtr 6
x15880:	mov ax, [bp + 8]	; 3: 139 70 8
x15883:	mov [bp + 16], ax	; 3: 137 70 16

file_test$304:	; Call 10 fclose 0
x15886:	mov word [bp + 10], file_test$305	; 5: 199 70 10 28 62
x15891:	mov [bp + 12], bp	; 3: 137 110 12
x15894:	add bp, 10	; 3: 131 197 10
x15897:	jmp fclose	; 3: 233 113 51

file_test$305:	; PostCall 10

file_test$306:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$307:	; Parameter 10 targetFile 6
x15900:	mov ax, [bp + 6]	; 3: 139 70 6
x15903:	mov [bp + 16], ax	; 3: 137 70 16

file_test$308:	; Call 10 remove 0
x15906:	mov word [bp + 10], file_test$309	; 5: 199 70 10 48 62
x15911:	mov [bp + 12], bp	; 3: 137 110 12
x15914:	add bp, 10	; 3: 131 197 10
x15917:	jmp remove	; 3: 233 32 52

file_test$309:	; PostCall 10

file_test$310:	; GetReturnValue £temporary4883

file_test$311:	; NotEqual 318 £temporary4883 0
x15920:	cmp bx, 0	; 3: 131 251 0
x15923:	jne file_test$318	; 2: 117 32

file_test$312:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$313:	; Parameter 10 string_2225s2220has20been20removed2E0A# 6
x15925:	mov word [bp + 16], @10861$string_2225s2220has20been20removed2E0A#	; 5: 199 70 16 161 80

file_test$314:	; Parameter 10 targetFile 8
x15930:	mov ax, [bp + 6]	; 3: 139 70 6
x15933:	mov [bp + 18], ax	; 3: 137 70 18

file_test$315:	; Call 10 printf 0
x15936:	mov word [bp + 10], file_test$316	; 5: 199 70 10 83 62
x15941:	mov [bp + 12], bp	; 3: 137 110 12
x15944:	add bp, 10	; 3: 131 197 10
x15947:	mov di, bp	; 2: 137 239
x15949:	add di, 2	; 3: 131 199 2
x15952:	jmp printf	; 3: 233 177 206

file_test$316:	; PostCall 10

file_test$317:	; Goto 330
x15955:	jmp file_test$330	; 2: 235 59

file_test$318:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$319:	; Parameter 10 string_Error202225s222025i3A2025s2E0A# 6
x15957:	mov word [bp + 16], @10863$string_Error202225s222025i3A2025s2E0A#	; 5: 199 70 16 185 80

file_test$320:	; Parameter 10 targetFile 8
x15962:	mov ax, [bp + 6]	; 3: 139 70 6
x15965:	mov [bp + 18], ax	; 3: 137 70 18

file_test$321:	; Parameter 10 errno 10
x15968:	mov ax, [errno]	; 3: 161 230 10
x15971:	mov [bp + 20], ax	; 3: 137 70 20

file_test$322:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$323:	; Parameter 10 errno 18
x15974:	mov ax, [errno]	; 3: 161 230 10
x15977:	mov [bp + 28], ax	; 3: 137 70 28

file_test$324:	; Call 10 strerror 12
x15980:	mov word [bp + 22], file_test$325	; 5: 199 70 22 122 62
x15985:	mov [bp + 24], bp	; 3: 137 110 24
x15988:	add bp, 22	; 3: 131 197 22
x15991:	jmp strerror	; 3: 233 164 245

file_test$325:	; PostCall 10

file_test$326:	; GetReturnValue £temporary4886

file_test$327:	; Parameter 10 £temporary4886 12
x15994:	mov [bp + 22], bx	; 3: 137 94 22

file_test$328:	; Call 10 printf 0
x15997:	mov word [bp + 10], file_test$329	; 5: 199 70 10 144 62
x16002:	mov [bp + 12], bp	; 3: 137 110 12
x16005:	add bp, 10	; 3: 131 197 10
x16008:	mov di, bp	; 2: 137 239
x16010:	add di, 6	; 3: 131 199 6
x16013:	jmp printf	; 3: 233 116 206

file_test$329:	; PostCall 10

file_test$330:	; Assign targetFile string_Z2#
x16016:	mov word [bp + 6], @10866$string_Z2#	; 5: 199 70 6 205 80

file_test$331:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$332:	; Parameter 8 targetFile 6
x16021:	mov ax, [bp + 6]	; 3: 139 70 6
x16024:	mov [bp + 14], ax	; 3: 137 70 14

file_test$333:	; Call 8 remove 0
x16027:	mov word [bp + 8], file_test$334	; 5: 199 70 8 169 62
x16032:	mov [bp + 10], bp	; 3: 137 110 10
x16035:	add bp, 8	; 3: 131 197 8
x16038:	jmp remove	; 3: 233 167 51

file_test$334:	; PostCall 8

file_test$335:	; GetReturnValue £temporary4888

file_test$336:	; NotEqual 343 £temporary4888 0
x16041:	cmp bx, 0	; 3: 131 251 0
x16044:	jne file_test$343	; 2: 117 32

file_test$337:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$338:	; Parameter 8 string_2225s2220has20been20removed2E0A# 6
x16046:	mov word [bp + 14], @10872$string_2225s2220has20been20removed2E0A#	; 5: 199 70 14 208 80

file_test$339:	; Parameter 8 targetFile 8
x16051:	mov ax, [bp + 6]	; 3: 139 70 6
x16054:	mov [bp + 16], ax	; 3: 137 70 16

file_test$340:	; Call 8 printf 0
x16057:	mov word [bp + 8], file_test$341	; 5: 199 70 8 204 62
x16062:	mov [bp + 10], bp	; 3: 137 110 10
x16065:	add bp, 8	; 3: 131 197 8
x16068:	mov di, bp	; 2: 137 239
x16070:	add di, 2	; 3: 131 199 2
x16073:	jmp printf	; 3: 233 56 206

file_test$341:	; PostCall 8

file_test$342:	; Goto 355
x16076:	jmp file_test$355	; 2: 235 59

file_test$343:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$344:	; Parameter 8 string_Error202225s222025i3A2025s2E0A# 6
x16078:	mov word [bp + 14], @10874$string_Error202225s222025i3A2025s2E0A#	; 5: 199 70 14 232 80

file_test$345:	; Parameter 8 targetFile 8
x16083:	mov ax, [bp + 6]	; 3: 139 70 6
x16086:	mov [bp + 16], ax	; 3: 137 70 16

file_test$346:	; Parameter 8 errno 10
x16089:	mov ax, [errno]	; 3: 161 230 10
x16092:	mov [bp + 18], ax	; 3: 137 70 18

file_test$347:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$348:	; Parameter 8 errno 18
x16095:	mov ax, [errno]	; 3: 161 230 10
x16098:	mov [bp + 26], ax	; 3: 137 70 26

file_test$349:	; Call 8 strerror 12
x16101:	mov word [bp + 20], file_test$350	; 5: 199 70 20 243 62
x16106:	mov [bp + 22], bp	; 3: 137 110 22
x16109:	add bp, 20	; 3: 131 197 20
x16112:	jmp strerror	; 3: 233 43 245

file_test$350:	; PostCall 8

file_test$351:	; GetReturnValue £temporary4891

file_test$352:	; Parameter 8 £temporary4891 12
x16115:	mov [bp + 20], bx	; 3: 137 94 20

file_test$353:	; Call 8 printf 0
x16118:	mov word [bp + 8], file_test$354	; 5: 199 70 8 9 63
x16123:	mov [bp + 10], bp	; 3: 137 110 10
x16126:	add bp, 8	; 3: 131 197 8
x16129:	mov di, bp	; 2: 137 239
x16131:	add di, 6	; 3: 131 199 6
x16134:	jmp printf	; 3: 233 251 205

file_test$354:	; PostCall 8

file_test$355:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$356:	; Parameter 6 string_PBook2Etxt# 6
x16137:	mov word [bp + 12], @10877$string_PBook2Etxt#	; 5: 199 70 12 252 80

file_test$357:	; Parameter 6 string_r# 8
x16142:	mov word [bp + 14], @10878$string_r#	; 5: 199 70 14 6 81

file_test$358:	; Call 6 fopen 0
x16147:	mov word [bp + 6], file_test$359	; 5: 199 70 6 33 63
x16152:	mov [bp + 8], bp	; 3: 137 110 8
x16155:	add bp, 6	; 3: 131 197 6
x16158:	jmp fopen	; 3: 233 195 26

file_test$359:	; PostCall 6

file_test$360:	; GetReturnValue £temporary4893

file_test$361:	; Assign inFilePtr £temporary4893
x16161:	mov [bp + 6], bx	; 3: 137 94 6

file_test$362:	; NotEqual 374 inFilePtr 0
x16164:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x16168:	jne file_test$374	; 2: 117 59

file_test$363:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$364:	; Parameter 8 stderr 6
x16170:	mov ax, [stderr]	; 3: 161 139 77
x16173:	mov [bp + 14], ax	; 3: 137 70 14

file_test$365:	; Parameter 8 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x16176:	mov word [bp + 16], @10886$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 16 8 81

file_test$366:	; Parameter 8 string_inFilePtr20213D20NULL# 10
x16181:	mov word [bp + 18], @10887$string_inFilePtr20213D20NULL#	; 5: 199 70 18 54 81

file_test$367:	; Parameter 8 string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x16186:	mov word [bp + 20], @10888$string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 20 72 81

file_test$368:	; Parameter 8 119 14
x16191:	mov word [bp + 22], 119	; 5: 199 70 22 119 0

file_test$369:	; Call 8 fprintf 0
x16196:	mov word [bp + 8], file_test$370	; 5: 199 70 8 87 63
x16201:	mov [bp + 10], bp	; 3: 137 110 10
x16204:	add bp, 8	; 3: 131 197 8
x16207:	mov di, bp	; 2: 137 239
x16209:	add di, 6	; 3: 131 199 6
x16212:	jmp fprintf	; 3: 233 38 31

file_test$370:	; PostCall 8

file_test$371:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$372:	; Call 8 abort 0
x16215:	mov word [bp + 8], file_test$373	; 5: 199 70 8 101 63
x16220:	mov [bp + 10], bp	; 3: 137 110 10
x16223:	add bp, 8	; 3: 131 197 8
x16226:	jmp abort	; 3: 233 83 31

file_test$373:	; PostCall 8

file_test$374:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$375:	; Parameter 8 string_0A252D24s20252D24s0A# 6
x16229:	mov word [bp + 14], @10893$string_0A252D24s20252D24s0A#	; 5: 199 70 14 136 81

file_test$376:	; Parameter 8 string_Name# 8
x16234:	mov word [bp + 16], @10894$string_Name#	; 5: 199 70 16 150 81

file_test$377:	; Parameter 8 string_Phone# 10
x16239:	mov word [bp + 18], @10895$string_Phone#	; 5: 199 70 18 155 81

file_test$378:	; Call 8 printf 0
x16244:	mov word [bp + 8], file_test$379	; 5: 199 70 8 135 63
x16249:	mov [bp + 10], bp	; 3: 137 110 10
x16252:	add bp, 8	; 3: 131 197 8
x16255:	mov di, bp	; 2: 137 239
x16257:	add di, 4	; 3: 131 199 4
x16260:	jmp printf	; 3: 233 125 205

file_test$379:	; PostCall 8

file_test$380:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$381:	; Parameter 8 string_252D24s20252D24s0A# 6
x16263:	mov word [bp + 14], @10897$string_252D24s20252D24s0A#	; 5: 199 70 14 161 81

file_test$382:	; Parameter 8 string_3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D# 8
x16268:	mov word [bp + 16], @10898$string_3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D#	; 5: 199 70 16 174 81

file_test$383:	; Parameter 8 string_3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D# 10
x16273:	mov word [bp + 18], @10899$string_3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D#	; 5: 199 70 18 199 81

file_test$384:	; Call 8 printf 0
x16278:	mov word [bp + 8], file_test$385	; 5: 199 70 8 169 63
x16283:	mov [bp + 10], bp	; 3: 137 110 10
x16286:	add bp, 8	; 3: 131 197 8
x16289:	mov di, bp	; 2: 137 239
x16291:	add di, 4	; 3: 131 199 4
x16294:	jmp printf	; 3: 233 91 205

file_test$385:	; PostCall 8

file_test$386:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$387:	; Parameter 12 inFilePtr 6
x16297:	mov ax, [bp + 6]	; 3: 139 70 6
x16300:	mov [bp + 18], ax	; 3: 137 70 18

file_test$388:	; Parameter 12 string_25i# 8
x16303:	mov word [bp + 20], @10903$string_25i#	; 5: 199 70 20 224 81

file_test$389:	; address £temporary4900 size
x16308:	mov si, bp	; 2: 137 238
x16310:	add si, 10	; 3: 131 198 10

file_test$390:	; Parameter 12 £temporary4900 10
x16313:	mov [bp + 22], si	; 3: 137 118 22

file_test$391:	; Call 12 fscanf 0
x16316:	mov word [bp + 12], file_test$392	; 5: 199 70 12 207 63
x16321:	mov [bp + 14], bp	; 3: 137 110 14
x16324:	add bp, 12	; 3: 131 197 12
x16327:	mov di, bp	; 2: 137 239
x16329:	add di, 2	; 3: 131 199 2
x16332:	jmp fscanf	; 3: 233 143 31

file_test$392:	; PostCall 12

file_test$393:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$394:	; Parameter 12 string_size2025i0A# 6
x16335:	mov word [bp + 18], @10906$string_size2025i0A#	; 5: 199 70 18 227 81

file_test$395:	; Parameter 12 size 8
x16340:	mov ax, [bp + 10]	; 3: 139 70 10
x16343:	mov [bp + 20], ax	; 3: 137 70 20

file_test$396:	; Call 12 printf 0
x16346:	mov word [bp + 12], file_test$397	; 5: 199 70 12 237 63
x16351:	mov [bp + 14], bp	; 3: 137 110 14
x16354:	add bp, 12	; 3: 131 197 12
x16357:	mov di, bp	; 2: 137 239
x16359:	add di, 2	; 3: 131 199 2
x16362:	jmp printf	; 3: 233 23 205

file_test$397:	; PostCall 12

file_test$398:	; Assign count 0
x16365:	mov word [bp + 8], 0	; 5: 199 70 8 0 0

file_test$399:	; SignedGreaterThanEqual 415 count size
x16370:	mov ax, [bp + 10]	; 3: 139 70 10
x16373:	cmp [bp + 8], ax	; 3: 57 70 8
x16376:	jge file_test$415	; 2: 125 87

file_test$400:	; CallHeader 52 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$401:	; Parameter 52 inFilePtr 6
x16378:	mov ax, [bp + 6]	; 3: 139 70 6
x16381:	mov [bp + 58], ax	; 3: 137 70 58

file_test$402:	; Parameter 52 string_25s25s# 8
x16384:	mov word [bp + 60], @10920$string_25s25s#	; 5: 199 70 60 236 81

file_test$403:	; Parameter 52 name 10
x16389:	mov [bp + 62], bp	; 3: 137 110 62
x16392:	add word [bp + 62], 12	; 4: 131 70 62 12

file_test$404:	; Parameter 52 phone 12
x16396:	mov [bp + 64], bp	; 3: 137 110 64
x16399:	add word [bp + 64], 32	; 4: 131 70 64 32

file_test$405:	; Call 52 fscanf 0
x16403:	mov word [bp + 52], file_test$406	; 5: 199 70 52 38 64
x16408:	mov [bp + 54], bp	; 3: 137 110 54
x16411:	add bp, 52	; 3: 131 197 52
x16414:	mov di, bp	; 2: 137 239
x16416:	add di, 4	; 3: 131 199 4
x16419:	jmp fscanf	; 3: 233 56 31

file_test$406:	; PostCall 52

file_test$407:	; CallHeader 52 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$408:	; Parameter 52 string_252D24s20252D24s0A# 6
x16422:	mov word [bp + 58], @10922$string_252D24s20252D24s0A#	; 5: 199 70 58 241 81

file_test$409:	; Parameter 52 name 8
x16427:	mov [bp + 60], bp	; 3: 137 110 60
x16430:	add word [bp + 60], 12	; 4: 131 70 60 12

file_test$410:	; Parameter 52 phone 10
x16434:	mov [bp + 62], bp	; 3: 137 110 62
x16437:	add word [bp + 62], 32	; 4: 131 70 62 32

file_test$411:	; Call 52 printf 0
x16441:	mov word [bp + 52], file_test$412	; 5: 199 70 52 76 64
x16446:	mov [bp + 54], bp	; 3: 137 110 54
x16449:	add bp, 52	; 3: 131 197 52
x16452:	mov di, bp	; 2: 137 239
x16454:	add di, 4	; 3: 131 199 4
x16457:	jmp printf	; 3: 233 184 204

file_test$412:	; PostCall 52

file_test$413:	; Increment count
x16460:	inc word [bp + 8]	; 3: 255 70 8

file_test$414:	; Goto 399
x16463:	jmp file_test$399	; 2: 235 161

file_test$415:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$416:	; Parameter 8 string_0A# 6
x16465:	mov word [bp + 14], @10924$string_0A#	; 5: 199 70 14 254 81

file_test$417:	; Call 8 printf 0
x16470:	mov word [bp + 8], file_test$418	; 5: 199 70 8 102 64
x16475:	mov [bp + 10], bp	; 3: 137 110 10
x16478:	add bp, 8	; 3: 131 197 8
x16481:	mov di, bp	; 2: 137 239
x16483:	jmp printf	; 3: 233 158 204

file_test$418:	; PostCall 8

file_test$419:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$420:	; Parameter 8 inFilePtr 6
x16486:	mov ax, [bp + 6]	; 3: 139 70 6
x16489:	mov [bp + 14], ax	; 3: 137 70 14

file_test$421:	; Call 8 fclose 0
x16492:	mov word [bp + 8], file_test$422	; 5: 199 70 8 122 64
x16497:	mov [bp + 10], bp	; 3: 137 110 10
x16500:	add bp, 8	; 3: 131 197 8
x16503:	jmp fclose	; 3: 233 19 49

file_test$422:	; PostCall 8

file_test$423:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$424:	; Parameter 6 string_TestX2Ebin# 6
x16506:	mov word [bp + 12], @10927$string_TestX2Ebin#	; 5: 199 70 12 0 82

file_test$425:	; Parameter 6 string_w# 8
x16511:	mov word [bp + 14], @10928$string_w#	; 5: 199 70 14 10 82

file_test$426:	; Call 6 fopen 0
x16516:	mov word [bp + 6], file_test$427	; 5: 199 70 6 146 64
x16521:	mov [bp + 8], bp	; 3: 137 110 8
x16524:	add bp, 6	; 3: 131 197 6
x16527:	jmp fopen	; 3: 233 82 25

file_test$427:	; PostCall 6

file_test$428:	; GetReturnValue £temporary4909

file_test$429:	; Assign outFilePtr £temporary4909
x16530:	mov [bp + 6], bx	; 3: 137 94 6

file_test$430:	; NotEqual 442 outFilePtr 0
x16533:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x16537:	jne file_test$442	; 2: 117 59

file_test$431:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$432:	; Parameter 8 stderr 6
x16539:	mov ax, [stderr]	; 3: 161 139 77
x16542:	mov [bp + 14], ax	; 3: 137 70 14

file_test$433:	; Parameter 8 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x16545:	mov word [bp + 16], @10936$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 16 12 82

file_test$434:	; Parameter 8 string_outFilePtr20213D20NULL# 10
x16550:	mov word [bp + 18], @10937$string_outFilePtr20213D20NULL#	; 5: 199 70 18 58 82

file_test$435:	; Parameter 8 string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x16555:	mov word [bp + 20], @10938$string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 20 77 82

file_test$436:	; Parameter 8 171 14
x16560:	mov word [bp + 22], 171	; 5: 199 70 22 171 0

file_test$437:	; Call 8 fprintf 0
x16565:	mov word [bp + 8], file_test$438	; 5: 199 70 8 200 64
x16570:	mov [bp + 10], bp	; 3: 137 110 10
x16573:	add bp, 8	; 3: 131 197 8
x16576:	mov di, bp	; 2: 137 239
x16578:	add di, 6	; 3: 131 199 6
x16581:	jmp fprintf	; 3: 233 181 29

file_test$438:	; PostCall 8

file_test$439:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$440:	; Call 8 abort 0
x16584:	mov word [bp + 8], file_test$441	; 5: 199 70 8 214 64
x16589:	mov [bp + 10], bp	; 3: 137 110 10
x16592:	add bp, 8	; 3: 131 197 8
x16595:	jmp abort	; 3: 233 226 29

file_test$441:	; PostCall 8

file_test$442:	; Assign size 10
x16598:	mov word [bp + 8], 10	; 5: 199 70 8 10 0

file_test$443:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$444:	; address £temporary4914 size
x16603:	mov si, bp	; 2: 137 238
x16605:	add si, 8	; 3: 131 198 8

file_test$445:	; Parameter 12 £temporary4914 6
x16608:	mov [bp + 18], si	; 3: 137 118 18

file_test$446:	; Parameter 12 2 8
x16611:	mov word [bp + 20], 2	; 5: 199 70 20 2 0

file_test$447:	; Parameter 12 1 10
x16616:	mov word [bp + 22], 1	; 5: 199 70 22 1 0

file_test$448:	; Parameter 12 outFilePtr 12
x16621:	mov ax, [bp + 6]	; 3: 139 70 6
x16624:	mov [bp + 24], ax	; 3: 137 70 24

file_test$449:	; Call 12 fwrite 0
x16627:	mov word [bp + 12], file_test$450	; 5: 199 70 12 1 65
x16632:	mov [bp + 14], bp	; 3: 137 110 14
x16635:	add bp, 12	; 3: 131 197 12
x16638:	jmp fwrite	; 3: 233 172 49

file_test$450:	; PostCall 12

file_test$451:	; Assign index 0
x16641:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

file_test$452:	; SignedGreaterThanEqual 466 index size
x16646:	mov ax, [bp + 8]	; 3: 139 70 8
x16649:	cmp [bp + 10], ax	; 3: 57 70 10
x16652:	jge file_test$466	; 2: 125 61

file_test$453:	; SignedMultiply £temporary4918 index index
x16654:	mov ax, [bp + 10]	; 3: 139 70 10
x16657:	xor dx, dx	; 2: 49 210
x16659:	imul word [bp + 10]	; 3: 247 110 10

file_test$454:	; IntegralToFloating £temporary4919 £temporary4918
x16662:	mov [container2bytes#], ax	; 3: 163 77 27
x16665:	fild word [container2bytes#]	; 4: 223 6 77 27

file_test$455:	; PopFloat value
x16669:	fstp qword [bp + 12]	; 3: 221 94 12

file_test$456:	; CallHeader 20 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$457:	; address £temporary4920 value
x16672:	mov si, bp	; 2: 137 238
x16674:	add si, 12	; 3: 131 198 12

file_test$458:	; Parameter 20 £temporary4920 6
x16677:	mov [bp + 26], si	; 3: 137 118 26

file_test$459:	; Parameter 20 8 8
x16680:	mov word [bp + 28], 8	; 5: 199 70 28 8 0

file_test$460:	; Parameter 20 1 10
x16685:	mov word [bp + 30], 1	; 5: 199 70 30 1 0

file_test$461:	; Parameter 20 outFilePtr 12
x16690:	mov ax, [bp + 6]	; 3: 139 70 6
x16693:	mov [bp + 32], ax	; 3: 137 70 32

file_test$462:	; Call 20 fwrite 0
x16696:	mov word [bp + 20], file_test$463	; 5: 199 70 20 70 65
x16701:	mov [bp + 22], bp	; 3: 137 110 22
x16704:	add bp, 20	; 3: 131 197 20
x16707:	jmp fwrite	; 3: 233 103 49

file_test$463:	; PostCall 20

file_test$464:	; Increment index
x16710:	inc word [bp + 10]	; 3: 255 70 10

file_test$465:	; Goto 452
x16713:	jmp file_test$452	; 2: 235 187

file_test$466:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$467:	; Parameter 12 outFilePtr 6
x16715:	mov ax, [bp + 6]	; 3: 139 70 6
x16718:	mov [bp + 18], ax	; 3: 137 70 18

file_test$468:	; Call 12 fclose 0
x16721:	mov word [bp + 12], file_test$469	; 5: 199 70 12 95 65
x16726:	mov [bp + 14], bp	; 3: 137 110 14
x16729:	add bp, 12	; 3: 131 197 12
x16732:	jmp fclose	; 3: 233 46 48

file_test$469:	; PostCall 12

file_test$470:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$471:	; Parameter 6 string_TestX2Ebin# 6
x16735:	mov word [bp + 12], @10973$string_TestX2Ebin#	; 5: 199 70 12 141 82

file_test$472:	; Parameter 6 string_r# 8
x16740:	mov word [bp + 14], @10974$string_r#	; 5: 199 70 14 151 82

file_test$473:	; Call 6 fopen 0
x16745:	mov word [bp + 6], file_test$474	; 5: 199 70 6 119 65
x16750:	mov [bp + 8], bp	; 3: 137 110 8
x16753:	add bp, 6	; 3: 131 197 6
x16756:	jmp fopen	; 3: 233 109 24

file_test$474:	; PostCall 6

file_test$475:	; GetReturnValue £temporary4923

file_test$476:	; Assign inFilePtr £temporary4923
x16759:	mov [bp + 6], bx	; 3: 137 94 6

file_test$477:	; NotEqual 489 inFilePtr 0
x16762:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x16766:	jne file_test$489	; 2: 117 59

file_test$478:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$479:	; Parameter 12 stderr 6
x16768:	mov ax, [stderr]	; 3: 161 139 77
x16771:	mov [bp + 18], ax	; 3: 137 70 18

file_test$480:	; Parameter 12 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x16774:	mov word [bp + 20], @10984$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 20 153 82

file_test$481:	; Parameter 12 string_inFilePtr20213D20NULL# 10
x16779:	mov word [bp + 22], @10985$string_inFilePtr20213D20NULL#	; 5: 199 70 22 199 82

file_test$482:	; Parameter 12 string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x16784:	mov word [bp + 24], @10986$string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 24 217 82

file_test$483:	; Parameter 12 188 14
x16789:	mov word [bp + 26], 188	; 5: 199 70 26 188 0

file_test$484:	; Call 12 fprintf 0
x16794:	mov word [bp + 12], file_test$485	; 5: 199 70 12 173 65
x16799:	mov [bp + 14], bp	; 3: 137 110 14
x16802:	add bp, 12	; 3: 131 197 12
x16805:	mov di, bp	; 2: 137 239
x16807:	add di, 6	; 3: 131 199 6
x16810:	jmp fprintf	; 3: 233 208 28

file_test$485:	; PostCall 12

file_test$486:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$487:	; Call 12 abort 0
x16813:	mov word [bp + 12], file_test$488	; 5: 199 70 12 187 65
x16818:	mov [bp + 14], bp	; 3: 137 110 14
x16821:	add bp, 12	; 3: 131 197 12
x16824:	jmp abort	; 3: 233 253 28

file_test$488:	; PostCall 12

file_test$489:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$490:	; address £temporary4928 size
x16827:	mov si, bp	; 2: 137 238
x16829:	add si, 8	; 3: 131 198 8

file_test$491:	; Parameter 12 £temporary4928 6
x16832:	mov [bp + 18], si	; 3: 137 118 18

file_test$492:	; Parameter 12 2 8
x16835:	mov word [bp + 20], 2	; 5: 199 70 20 2 0

file_test$493:	; Parameter 12 1 10
x16840:	mov word [bp + 22], 1	; 5: 199 70 22 1 0

file_test$494:	; Parameter 12 inFilePtr 12
x16845:	mov ax, [bp + 6]	; 3: 139 70 6
x16848:	mov [bp + 24], ax	; 3: 137 70 24

file_test$495:	; Call 12 fread 0
x16851:	mov word [bp + 12], file_test$496	; 5: 199 70 12 225 65
x16856:	mov [bp + 14], bp	; 3: 137 110 14
x16859:	add bp, 12	; 3: 131 197 12
x16862:	jmp fread	; 3: 233 15 49

file_test$496:	; PostCall 12

file_test$497:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$498:	; Parameter 12 string_size13A2025i0A# 6
x16865:	mov word [bp + 18], @10999$string_size13A2025i0A#	; 5: 199 70 18 25 83

file_test$499:	; Parameter 12 size 8
x16870:	mov ax, [bp + 8]	; 3: 139 70 8
x16873:	mov [bp + 20], ax	; 3: 137 70 20

file_test$500:	; Call 12 printf 0
x16876:	mov word [bp + 12], file_test$501	; 5: 199 70 12 255 65
x16881:	mov [bp + 14], bp	; 3: 137 110 14
x16884:	add bp, 12	; 3: 131 197 12
x16887:	mov di, bp	; 2: 137 239
x16889:	add di, 2	; 3: 131 199 2
x16892:	jmp printf	; 3: 233 5 203

file_test$501:	; PostCall 12

file_test$502:	; Assign index 0
x16895:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

file_test$503:	; SignedGreaterThanEqual 521 index size
x16900:	mov ax, [bp + 8]	; 3: 139 70 8
x16903:	cmp [bp + 10], ax	; 3: 57 70 10
x16906:	jge file_test$521	; 2: 125 79

file_test$504:	; CallHeader 20 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$505:	; address £temporary4933 value
x16908:	mov si, bp	; 2: 137 238
x16910:	add si, 12	; 3: 131 198 12

file_test$506:	; Parameter 20 £temporary4933 6
x16913:	mov [bp + 26], si	; 3: 137 118 26

file_test$507:	; Parameter 20 8 8
x16916:	mov word [bp + 28], 8	; 5: 199 70 28 8 0

file_test$508:	; Parameter 20 1 10
x16921:	mov word [bp + 30], 1	; 5: 199 70 30 1 0

file_test$509:	; Parameter 20 inFilePtr 12
x16926:	mov ax, [bp + 6]	; 3: 139 70 6
x16929:	mov [bp + 32], ax	; 3: 137 70 32

file_test$510:	; Call 20 fread 0
x16932:	mov word [bp + 20], file_test$511	; 5: 199 70 20 50 66
x16937:	mov [bp + 22], bp	; 3: 137 110 22
x16940:	add bp, 20	; 3: 131 197 20
x16943:	jmp fread	; 3: 233 190 48

file_test$511:	; PostCall 20

file_test$512:	; CallHeader 20 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$513:	; Parameter 20 string_index13A2025i3A20value2025f0A# 6
x16946:	mov word [bp + 26], @11016$string_index13A2025i3A20value2025f0A#	; 5: 199 70 26 36 83

file_test$514:	; Parameter 20 index 8
x16951:	mov ax, [bp + 10]	; 3: 139 70 10
x16954:	mov [bp + 28], ax	; 3: 137 70 28

file_test$515:	; PushFloat value
x16957:	fld qword [bp + 12]	; 3: 221 70 12

file_test$516:	; Parameter 20 value 10
x16960:	fstp qword [bp + 30]	; 3: 221 94 30

file_test$517:	; Call 20 printf 0
x16963:	mov word [bp + 20], file_test$518	; 5: 199 70 20 86 66
x16968:	mov [bp + 22], bp	; 3: 137 110 22
x16971:	add bp, 20	; 3: 131 197 20
x16974:	mov di, bp	; 2: 137 239
x16976:	add di, 10	; 3: 131 199 10
x16979:	jmp printf	; 3: 233 174 202

file_test$518:	; PostCall 20

file_test$519:	; Increment index
x16982:	inc word [bp + 10]	; 3: 255 70 10

file_test$520:	; Goto 503
x16985:	jmp file_test$503	; 2: 235 169

file_test$521:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$522:	; Parameter 12 string_0A# 6
x16987:	mov word [bp + 18], @11018$string_0A#	; 5: 199 70 18 58 83

file_test$523:	; Call 12 printf 0
x16992:	mov word [bp + 12], file_test$524	; 5: 199 70 12 112 66
x16997:	mov [bp + 14], bp	; 3: 137 110 14
x17000:	add bp, 12	; 3: 131 197 12
x17003:	mov di, bp	; 2: 137 239
x17005:	jmp printf	; 3: 233 148 202

file_test$524:	; PostCall 12

file_test$525:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$526:	; Parameter 12 inFilePtr 6
x17008:	mov ax, [bp + 6]	; 3: 139 70 6
x17011:	mov [bp + 18], ax	; 3: 137 70 18

file_test$527:	; Call 12 fclose 0
x17014:	mov word [bp + 12], file_test$528	; 5: 199 70 12 132 66
x17019:	mov [bp + 14], bp	; 3: 137 110 14
x17022:	add bp, 12	; 3: 131 197 12
x17025:	jmp fclose	; 3: 233 9 47

file_test$528:	; PostCall 12

file_test$529:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$530:	; Parameter 6 string_TestY2Ebin# 6
x17028:	mov word [bp + 12], @11021$string_TestY2Ebin#	; 5: 199 70 12 60 83

file_test$531:	; Parameter 6 string_w# 8
x17033:	mov word [bp + 14], @11022$string_w#	; 5: 199 70 14 70 83

file_test$532:	; Call 6 fopen 0
x17038:	mov word [bp + 6], file_test$533	; 5: 199 70 6 156 66
x17043:	mov [bp + 8], bp	; 3: 137 110 8
x17046:	add bp, 6	; 3: 131 197 6
x17049:	jmp fopen	; 3: 233 72 23

file_test$533:	; PostCall 6

file_test$534:	; GetReturnValue £temporary4938

file_test$535:	; Assign outFilePtr £temporary4938
x17052:	mov [bp + 6], bx	; 3: 137 94 6

file_test$536:	; NotEqual 548 outFilePtr 0
x17055:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x17059:	jne file_test$548	; 2: 117 59

file_test$537:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$538:	; Parameter 8 stderr 6
x17061:	mov ax, [stderr]	; 3: 161 139 77
x17064:	mov [bp + 14], ax	; 3: 137 70 14

file_test$539:	; Parameter 8 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x17067:	mov word [bp + 16], @11030$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 16 72 83

file_test$540:	; Parameter 8 string_outFilePtr20213D20NULL# 10
x17072:	mov word [bp + 18], @11031$string_outFilePtr20213D20NULL#	; 5: 199 70 18 118 83

file_test$541:	; Parameter 8 string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x17077:	mov word [bp + 20], @11032$string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 20 137 83

file_test$542:	; Parameter 8 203 14
x17082:	mov word [bp + 22], 203	; 5: 199 70 22 203 0

file_test$543:	; Call 8 fprintf 0
x17087:	mov word [bp + 8], file_test$544	; 5: 199 70 8 210 66
x17092:	mov [bp + 10], bp	; 3: 137 110 10
x17095:	add bp, 8	; 3: 131 197 8
x17098:	mov di, bp	; 2: 137 239
x17100:	add di, 6	; 3: 131 199 6
x17103:	jmp fprintf	; 3: 233 171 27

file_test$544:	; PostCall 8

file_test$545:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$546:	; Call 8 abort 0
x17106:	mov word [bp + 8], file_test$547	; 5: 199 70 8 224 66
x17111:	mov [bp + 10], bp	; 3: 137 110 10
x17114:	add bp, 8	; 3: 131 197 8
x17117:	jmp abort	; 3: 233 216 27

file_test$547:	; PostCall 8

file_test$548:	; Assign size 10
x17120:	mov word [bp + 8], 10	; 5: 199 70 8 10 0

file_test$549:	; Assign index 0
x17125:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

file_test$550:	; SignedGreaterThanEqual 564 index size
x17130:	mov ax, [bp + 8]	; 3: 139 70 8
x17133:	cmp [bp + 10], ax	; 3: 57 70 10
x17136:	jge file_test$564	; 2: 125 61

file_test$551:	; SignedMultiply £temporary4945 index index
x17138:	mov ax, [bp + 10]	; 3: 139 70 10
x17141:	xor dx, dx	; 2: 49 210
x17143:	imul word [bp + 10]	; 3: 247 110 10

file_test$552:	; IntegralToFloating £temporary4946 £temporary4945
x17146:	mov [container2bytes#], ax	; 3: 163 77 27
x17149:	fild word [container2bytes#]	; 4: 223 6 77 27

file_test$553:	; PopFloat value
x17153:	fstp qword [bp + 12]	; 3: 221 94 12

file_test$554:	; CallHeader 20 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$555:	; address £temporary4947 value
x17156:	mov si, bp	; 2: 137 238
x17158:	add si, 12	; 3: 131 198 12

file_test$556:	; Parameter 20 £temporary4947 6
x17161:	mov [bp + 26], si	; 3: 137 118 26

file_test$557:	; Parameter 20 8 8
x17164:	mov word [bp + 28], 8	; 5: 199 70 28 8 0

file_test$558:	; Parameter 20 1 10
x17169:	mov word [bp + 30], 1	; 5: 199 70 30 1 0

file_test$559:	; Parameter 20 outFilePtr 12
x17174:	mov ax, [bp + 6]	; 3: 139 70 6
x17177:	mov [bp + 32], ax	; 3: 137 70 32

file_test$560:	; Call 20 fwrite 0
x17180:	mov word [bp + 20], file_test$561	; 5: 199 70 20 42 67
x17185:	mov [bp + 22], bp	; 3: 137 110 22
x17188:	add bp, 20	; 3: 131 197 20
x17191:	jmp fwrite	; 3: 233 131 47

file_test$561:	; PostCall 20

file_test$562:	; Increment index
x17194:	inc word [bp + 10]	; 3: 255 70 10

file_test$563:	; Goto 550
x17197:	jmp file_test$550	; 2: 235 187

file_test$564:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$565:	; Parameter 12 outFilePtr 6
x17199:	mov ax, [bp + 6]	; 3: 139 70 6
x17202:	mov [bp + 18], ax	; 3: 137 70 18

file_test$566:	; Call 12 fclose 0
x17205:	mov word [bp + 12], file_test$567	; 5: 199 70 12 67 67
x17210:	mov [bp + 14], bp	; 3: 137 110 14
x17213:	add bp, 12	; 3: 131 197 12
x17216:	jmp fclose	; 3: 233 74 46

file_test$567:	; PostCall 12

file_test$568:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$569:	; Parameter 6 string_TestY2Ebin# 6
x17219:	mov word [bp + 12], @11059$string_TestY2Ebin#	; 5: 199 70 12 201 83

file_test$570:	; Parameter 6 string_r# 8
x17224:	mov word [bp + 14], @11060$string_r#	; 5: 199 70 14 211 83

file_test$571:	; Call 6 fopen 0
x17229:	mov word [bp + 6], file_test$572	; 5: 199 70 6 91 67
x17234:	mov [bp + 8], bp	; 3: 137 110 8
x17237:	add bp, 6	; 3: 131 197 6
x17240:	jmp fopen	; 3: 233 137 22

file_test$572:	; PostCall 6

file_test$573:	; GetReturnValue £temporary4950

file_test$574:	; Assign inFilePtr £temporary4950
x17243:	mov [bp + 6], bx	; 3: 137 94 6

file_test$575:	; NotEqual 587 inFilePtr 0
x17246:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x17250:	jne file_test$587	; 2: 117 59

file_test$576:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$577:	; Parameter 8 stderr 6
x17252:	mov ax, [stderr]	; 3: 161 139 77
x17255:	mov [bp + 14], ax	; 3: 137 70 14

file_test$578:	; Parameter 8 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x17258:	mov word [bp + 16], @11068$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 16 213 83

file_test$579:	; Parameter 8 string_inFilePtr20213D20NULL# 10
x17263:	mov word [bp + 18], @11069$string_inFilePtr20213D20NULL#	; 5: 199 70 18 3 84

file_test$580:	; Parameter 8 string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x17268:	mov word [bp + 20], @11070$string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 20 21 84

file_test$581:	; Parameter 8 217 14
x17273:	mov word [bp + 22], 217	; 5: 199 70 22 217 0

file_test$582:	; Call 8 fprintf 0
x17278:	mov word [bp + 8], file_test$583	; 5: 199 70 8 145 67
x17283:	mov [bp + 10], bp	; 3: 137 110 10
x17286:	add bp, 8	; 3: 131 197 8
x17289:	mov di, bp	; 2: 137 239
x17291:	add di, 6	; 3: 131 199 6
x17294:	jmp fprintf	; 3: 233 236 26

file_test$583:	; PostCall 8

file_test$584:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$585:	; Call 8 abort 0
x17297:	mov word [bp + 8], file_test$586	; 5: 199 70 8 159 67
x17302:	mov [bp + 10], bp	; 3: 137 110 10
x17305:	add bp, 8	; 3: 131 197 8
x17308:	jmp abort	; 3: 233 25 27

file_test$586:	; PostCall 8

file_test$587:	; Assign index 0
x17311:	mov word [bp + 8], 0	; 5: 199 70 8 0 0

file_test$588:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$589:	; address £temporary4955 value
x17316:	mov si, bp	; 2: 137 238
x17318:	add si, 10	; 3: 131 198 10

file_test$590:	; Parameter 18 £temporary4955 6
x17321:	mov [bp + 24], si	; 3: 137 118 24

file_test$591:	; Parameter 18 8 8
x17324:	mov word [bp + 26], 8	; 5: 199 70 26 8 0

file_test$592:	; Parameter 18 1 10
x17329:	mov word [bp + 28], 1	; 5: 199 70 28 1 0

file_test$593:	; Parameter 18 inFilePtr 12
x17334:	mov ax, [bp + 6]	; 3: 139 70 6
x17337:	mov [bp + 30], ax	; 3: 137 70 30

file_test$594:	; Call 18 fread 0
x17340:	mov word [bp + 18], file_test$595	; 5: 199 70 18 202 67
x17345:	mov [bp + 20], bp	; 3: 137 110 20
x17348:	add bp, 18	; 3: 131 197 18
x17351:	jmp fread	; 3: 233 38 47

file_test$595:	; PostCall 18

file_test$596:	; GetReturnValue £temporary4956

file_test$597:	; SignedLessThanEqual 608 £temporary4956 0
x17354:	cmp bx, 0	; 3: 131 251 0
x17357:	jle file_test$608	; 2: 126 41

file_test$598:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$599:	; Parameter 18 string_index23A2025i3A20value2025f0A# 6
x17359:	mov word [bp + 24], @11090$string_index23A2025i3A20value2025f0A#	; 5: 199 70 24 85 84

file_test$600:	; Assign £temporary4958 index
x17364:	mov ax, [bp + 8]	; 3: 139 70 8

file_test$601:	; Increment index
x17367:	inc word [bp + 8]	; 3: 255 70 8

file_test$602:	; Parameter 18 £temporary4958 8
x17370:	mov [bp + 26], ax	; 3: 137 70 26

file_test$603:	; PushFloat value
x17373:	fld qword [bp + 10]	; 3: 221 70 10

file_test$604:	; Parameter 18 value 10
x17376:	fstp qword [bp + 28]	; 3: 221 94 28

file_test$605:	; Call 18 printf 0
x17379:	mov word [bp + 18], file_test$606	; 5: 199 70 18 246 67
x17384:	mov [bp + 20], bp	; 3: 137 110 20
x17387:	add bp, 18	; 3: 131 197 18
x17390:	mov di, bp	; 2: 137 239
x17392:	add di, 10	; 3: 131 199 10
x17395:	jmp printf	; 3: 233 14 201

file_test$606:	; PostCall 18

file_test$607:	; Goto 588
x17398:	jmp file_test$588	; 2: 235 172

file_test$608:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$609:	; Parameter 8 string_0A# 6
x17400:	mov word [bp + 14], @11096$string_0A#	; 5: 199 70 14 107 84

file_test$610:	; Call 8 printf 0
x17405:	mov word [bp + 8], file_test$611	; 5: 199 70 8 13 68
x17410:	mov [bp + 10], bp	; 3: 137 110 10
x17413:	add bp, 8	; 3: 131 197 8
x17416:	mov di, bp	; 2: 137 239
x17418:	jmp printf	; 3: 233 247 200

file_test$611:	; PostCall 8

file_test$612:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$613:	; Parameter 8 inFilePtr 6
x17421:	mov ax, [bp + 6]	; 3: 139 70 6
x17424:	mov [bp + 14], ax	; 3: 137 70 14

file_test$614:	; Call 8 fclose 0
x17427:	mov word [bp + 8], file_test$615	; 5: 199 70 8 33 68
x17432:	mov [bp + 10], bp	; 3: 137 110 10
x17435:	add bp, 8	; 3: 131 197 8
x17438:	jmp fclose	; 3: 233 108 45

file_test$615:	; PostCall 8

file_test$616:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$617:	; Parameter 6 string_TestY2Ebin# 6
x17441:	mov word [bp + 12], @11099$string_TestY2Ebin#	; 5: 199 70 12 109 84

file_test$618:	; Parameter 6 string_r# 8
x17446:	mov word [bp + 14], @11100$string_r#	; 5: 199 70 14 119 84

file_test$619:	; Call 6 fopen 0
x17451:	mov word [bp + 6], file_test$620	; 5: 199 70 6 57 68
x17456:	mov [bp + 8], bp	; 3: 137 110 8
x17459:	add bp, 6	; 3: 131 197 6
x17462:	jmp fopen	; 3: 233 171 21

file_test$620:	; PostCall 6

file_test$621:	; GetReturnValue £temporary4963

file_test$622:	; Assign inFilePtr £temporary4963
x17465:	mov [bp + 6], bx	; 3: 137 94 6

file_test$623:	; NotEqual 635 inFilePtr 0
x17468:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x17472:	jne file_test$635	; 2: 117 59

file_test$624:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$625:	; Parameter 8 stderr 6
x17474:	mov ax, [stderr]	; 3: 161 139 77
x17477:	mov [bp + 14], ax	; 3: 137 70 14

file_test$626:	; Parameter 8 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x17480:	mov word [bp + 16], @11108$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 16 121 84

file_test$627:	; Parameter 8 string_inFilePtr20213D20NULL# 10
x17485:	mov word [bp + 18], @11109$string_inFilePtr20213D20NULL#	; 5: 199 70 18 167 84

file_test$628:	; Parameter 8 string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x17490:	mov word [bp + 20], @11110$string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 20 185 84

file_test$629:	; Parameter 8 232 14
x17495:	mov word [bp + 22], 232	; 5: 199 70 22 232 0

file_test$630:	; Call 8 fprintf 0
x17500:	mov word [bp + 8], file_test$631	; 5: 199 70 8 111 68
x17505:	mov [bp + 10], bp	; 3: 137 110 10
x17508:	add bp, 8	; 3: 131 197 8
x17511:	mov di, bp	; 2: 137 239
x17513:	add di, 6	; 3: 131 199 6
x17516:	jmp fprintf	; 3: 233 14 26

file_test$631:	; PostCall 8

file_test$632:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$633:	; Call 8 abort 0
x17519:	mov word [bp + 8], file_test$634	; 5: 199 70 8 125 68
x17524:	mov [bp + 10], bp	; 3: 137 110 10
x17527:	add bp, 8	; 3: 131 197 8
x17530:	jmp abort	; 3: 233 59 26

file_test$634:	; PostCall 8

file_test$635:	; Assign index 0
x17533:	mov word [bp + 8], 0	; 5: 199 70 8 0 0

file_test$636:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$637:	; Parameter 10 inFilePtr 6
x17538:	mov ax, [bp + 6]	; 3: 139 70 6
x17541:	mov [bp + 16], ax	; 3: 137 70 16

file_test$638:	; Call 10 feof 0
x17544:	mov word [bp + 10], file_test$639	; 5: 199 70 10 150 68
x17549:	mov [bp + 12], bp	; 3: 137 110 12
x17552:	add bp, 10	; 3: 131 197 10
x17555:	jmp feof	; 3: 233 51 26

file_test$639:	; PostCall 10

file_test$640:	; GetReturnValue £temporary4968

file_test$641:	; NotEqual 660 £temporary4968 0
x17558:	cmp bx, 0	; 3: 131 251 0
x17561:	jne file_test$660	; 2: 117 79

file_test$642:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$643:	; address £temporary4971 value
x17563:	mov si, bp	; 2: 137 238
x17565:	add si, 10	; 3: 131 198 10

file_test$644:	; Parameter 18 £temporary4971 6
x17568:	mov [bp + 24], si	; 3: 137 118 24

file_test$645:	; Parameter 18 8 8
x17571:	mov word [bp + 26], 8	; 5: 199 70 26 8 0

file_test$646:	; Parameter 18 1 10
x17576:	mov word [bp + 28], 1	; 5: 199 70 28 1 0

file_test$647:	; Parameter 18 inFilePtr 12
x17581:	mov ax, [bp + 6]	; 3: 139 70 6
x17584:	mov [bp + 30], ax	; 3: 137 70 30

file_test$648:	; Call 18 fread 0
x17587:	mov word [bp + 18], file_test$649	; 5: 199 70 18 193 68
x17592:	mov [bp + 20], bp	; 3: 137 110 20
x17595:	add bp, 18	; 3: 131 197 18
x17598:	jmp fread	; 3: 233 47 46

file_test$649:	; PostCall 18

file_test$650:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$651:	; Parameter 18 string_index33A2025i3A20value2025f0A# 6
x17601:	mov word [bp + 24], @11131$string_index33A2025i3A20value2025f0A#	; 5: 199 70 24 249 84

file_test$652:	; Assign £temporary4973 index
x17606:	mov ax, [bp + 8]	; 3: 139 70 8

file_test$653:	; Increment index
x17609:	inc word [bp + 8]	; 3: 255 70 8

file_test$654:	; Parameter 18 £temporary4973 8
x17612:	mov [bp + 26], ax	; 3: 137 70 26

file_test$655:	; PushFloat value
x17615:	fld qword [bp + 10]	; 3: 221 70 10

file_test$656:	; Parameter 18 value 10
x17618:	fstp qword [bp + 28]	; 3: 221 94 28

file_test$657:	; Call 18 printf 0
x17621:	mov word [bp + 18], file_test$658	; 5: 199 70 18 232 68
x17626:	mov [bp + 20], bp	; 3: 137 110 20
x17629:	add bp, 18	; 3: 131 197 18
x17632:	mov di, bp	; 2: 137 239
x17634:	add di, 10	; 3: 131 199 10
x17637:	jmp printf	; 3: 233 28 200

file_test$658:	; PostCall 18

file_test$659:	; Goto 636
x17640:	jmp file_test$636	; 2: 235 152

file_test$660:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$661:	; Parameter 8 string_0A# 6
x17642:	mov word [bp + 14], @11137$string_0A#	; 5: 199 70 14 15 85

file_test$662:	; Call 8 printf 0
x17647:	mov word [bp + 8], file_test$663	; 5: 199 70 8 255 68
x17652:	mov [bp + 10], bp	; 3: 137 110 10
x17655:	add bp, 8	; 3: 131 197 8
x17658:	mov di, bp	; 2: 137 239
x17660:	jmp printf	; 3: 233 5 200

file_test$663:	; PostCall 8

file_test$664:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$665:	; Parameter 8 inFilePtr 6
x17663:	mov ax, [bp + 6]	; 3: 139 70 6
x17666:	mov [bp + 14], ax	; 3: 137 70 14

file_test$666:	; Call 8 fclose 0
x17669:	mov word [bp + 8], file_test$667	; 5: 199 70 8 19 69
x17674:	mov [bp + 10], bp	; 3: 137 110 10
x17677:	add bp, 8	; 3: 131 197 8
x17680:	jmp fclose	; 3: 233 122 44

file_test$667:	; PostCall 8

file_test$668:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$669:	; Parameter 6 string_TestX2Ebin# 6
x17683:	mov word [bp + 12], @11140$string_TestX2Ebin#	; 5: 199 70 12 17 85

file_test$670:	; Parameter 6 string_r# 8
x17688:	mov word [bp + 14], @11141$string_r#	; 5: 199 70 14 27 85

file_test$671:	; Call 6 fopen 0
x17693:	mov word [bp + 6], file_test$672	; 5: 199 70 6 43 69
x17698:	mov [bp + 8], bp	; 3: 137 110 8
x17701:	add bp, 6	; 3: 131 197 6
x17704:	jmp fopen	; 3: 233 185 20

file_test$672:	; PostCall 6

file_test$673:	; GetReturnValue £temporary4978

file_test$674:	; Assign inFilePtr £temporary4978
x17707:	mov [bp + 6], bx	; 3: 137 94 6

file_test$675:	; NotEqual 687 inFilePtr 0
x17710:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x17714:	jne file_test$687	; 2: 117 59

file_test$676:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$677:	; Parameter 10 stderr 6
x17716:	mov ax, [stderr]	; 3: 161 139 77
x17719:	mov [bp + 16], ax	; 3: 137 70 16

file_test$678:	; Parameter 10 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x17722:	mov word [bp + 18], @11150$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 18 29 85

file_test$679:	; Parameter 10 string_inFilePtr20213D20NULL# 10
x17727:	mov word [bp + 20], @11151$string_inFilePtr20213D20NULL#	; 5: 199 70 20 75 85

file_test$680:	; Parameter 10 string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x17732:	mov word [bp + 22], @11152$string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 22 93 85

file_test$681:	; Parameter 10 250 14
x17737:	mov word [bp + 24], 250	; 5: 199 70 24 250 0

file_test$682:	; Call 10 fprintf 0
x17742:	mov word [bp + 10], file_test$683	; 5: 199 70 10 97 69
x17747:	mov [bp + 12], bp	; 3: 137 110 12
x17750:	add bp, 10	; 3: 131 197 10
x17753:	mov di, bp	; 2: 137 239
x17755:	add di, 6	; 3: 131 199 6
x17758:	jmp fprintf	; 3: 233 28 25

file_test$683:	; PostCall 10

file_test$684:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$685:	; Call 10 abort 0
x17761:	mov word [bp + 10], file_test$686	; 5: 199 70 10 111 69
x17766:	mov [bp + 12], bp	; 3: 137 110 12
x17769:	add bp, 10	; 3: 131 197 10
x17772:	jmp abort	; 3: 233 73 25

file_test$686:	; PostCall 10

file_test$687:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$688:	; address £temporary4983 size
x17775:	mov si, bp	; 2: 137 238
x17777:	add si, 8	; 3: 131 198 8

file_test$689:	; Parameter 10 £temporary4983 6
x17780:	mov [bp + 16], si	; 3: 137 118 16

file_test$690:	; Parameter 10 2 8
x17783:	mov word [bp + 18], 2	; 5: 199 70 18 2 0

file_test$691:	; Parameter 10 1 10
x17788:	mov word [bp + 20], 1	; 5: 199 70 20 1 0

file_test$692:	; Parameter 10 inFilePtr 12
x17793:	mov ax, [bp + 6]	; 3: 139 70 6
x17796:	mov [bp + 22], ax	; 3: 137 70 22

file_test$693:	; Call 10 fread 0
x17799:	mov word [bp + 10], file_test$694	; 5: 199 70 10 149 69
x17804:	mov [bp + 12], bp	; 3: 137 110 12
x17807:	add bp, 10	; 3: 131 197 10
x17810:	jmp fread	; 3: 233 91 45

file_test$694:	; PostCall 10

file_test$695:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$696:	; Parameter 10 string_size43A2025i20total2025i0A# 6
x17813:	mov word [bp + 16], @11165$string_size43A2025i20total2025i0A#	; 5: 199 70 16 157 85

file_test$697:	; Parameter 10 size 8
x17818:	mov ax, [bp + 8]	; 3: 139 70 8
x17821:	mov [bp + 18], ax	; 3: 137 70 18

file_test$698:	; SignedMultiply £temporary4985 size 8
x17824:	mov ax, [bp + 8]	; 3: 139 70 8
x17827:	xor dx, dx	; 2: 49 210
x17829:	imul word [@11167$int2$8#]	; 4: 247 46 177 85

file_test$699:	; Parameter 10 £temporary4985 10
x17833:	mov [bp + 20], ax	; 3: 137 70 20

file_test$700:	; Call 10 printf 0
x17836:	mov word [bp + 10], file_test$701	; 5: 199 70 10 191 69
x17841:	mov [bp + 12], bp	; 3: 137 110 12
x17844:	add bp, 10	; 3: 131 197 10
x17847:	mov di, bp	; 2: 137 239
x17849:	add di, 4	; 3: 131 199 4
x17852:	jmp printf	; 3: 233 69 199

file_test$701:	; PostCall 10

file_test$702:	; SignedMultiply total size 8
x17855:	mov ax, [bp + 8]	; 3: 139 70 8
x17858:	xor dx, dx	; 2: 49 210
x17860:	imul word [@11171$int2$8#]	; 4: 247 46 179 85
x17864:	mov [bp + 10], ax	; 3: 137 70 10

file_test$703:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$704:	; Parameter 14 total 6
x17867:	mov ax, [bp + 10]	; 3: 139 70 10
x17870:	mov [bp + 20], ax	; 3: 137 70 20

file_test$705:	; Call 14 malloc 0
x17873:	mov word [bp + 14], file_test$706	; 5: 199 70 14 223 69
x17878:	mov [bp + 16], bp	; 3: 137 110 16
x17881:	add bp, 14	; 3: 131 197 14
x17884:	jmp malloc	; 3: 233 84 45

file_test$706:	; PostCall 14

file_test$707:	; GetReturnValue £temporary4988

file_test$708:	; Assign p £temporary4988
x17887:	mov [bp + 14], bx	; 3: 137 94 14

file_test$709:	; SignedMultiply £temporary4989 size 8
x17890:	mov ax, [bp + 8]	; 3: 139 70 8
x17893:	xor dx, dx	; 2: 49 210
x17895:	imul word [@11178$int2$8#]	; 4: 247 46 181 85

file_test$710:	; BinaryAdd endPtr p £temporary4989
x17899:	mov bx, [bp + 14]	; 3: 139 94 14
x17902:	add bx, ax	; 2: 1 195
x17904:	mov [bp + 16], bx	; 3: 137 94 16

file_test$711:	; NotEqual 723 p 0
x17907:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x17911:	jne file_test$723	; 2: 117 59

file_test$712:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$713:	; Parameter 18 stderr 6
x17913:	mov ax, [stderr]	; 3: 161 139 77
x17916:	mov [bp + 24], ax	; 3: 137 70 24

file_test$714:	; Parameter 18 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x17919:	mov word [bp + 26], @11186$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 26 183 85

file_test$715:	; Parameter 18 string_p20213D20NULL# 10
x17924:	mov word [bp + 28], @11187$string_p20213D20NULL#	; 5: 199 70 28 229 85

file_test$716:	; Parameter 18 string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x17929:	mov word [bp + 30], @11188$string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 30 239 85

file_test$717:	; Parameter 18 257 14
x17934:	mov word [bp + 32], 257	; 5: 199 70 32 1 1

file_test$718:	; Call 18 fprintf 0
x17939:	mov word [bp + 18], file_test$719	; 5: 199 70 18 38 70
x17944:	mov [bp + 20], bp	; 3: 137 110 20
x17947:	add bp, 18	; 3: 131 197 18
x17950:	mov di, bp	; 2: 137 239
x17952:	add di, 6	; 3: 131 199 6
x17955:	jmp fprintf	; 3: 233 87 24

file_test$719:	; PostCall 18

file_test$720:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$721:	; Call 18 abort 0
x17958:	mov word [bp + 18], file_test$722	; 5: 199 70 18 52 70
x17963:	mov [bp + 20], bp	; 3: 137 110 20
x17966:	add bp, 18	; 3: 131 197 18
x17969:	jmp abort	; 3: 233 132 24

file_test$722:	; PostCall 18

file_test$723:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$724:	; Parameter 18 string_malloc43A2025u2025u2025u0A# 6
x17972:	mov word [bp + 24], @11193$string_malloc43A2025u2025u2025u0A#	; 5: 199 70 24 47 86

file_test$725:	; Parameter 18 p 8
x17977:	mov ax, [bp + 14]	; 3: 139 70 14
x17980:	mov [bp + 26], ax	; 3: 137 70 26

file_test$726:	; Parameter 18 total 10
x17983:	mov ax, [bp + 10]	; 3: 139 70 10
x17986:	mov [bp + 28], ax	; 3: 137 70 28

file_test$727:	; Parameter 18 endPtr 12
x17989:	mov ax, [bp + 16]	; 3: 139 70 16
x17992:	mov [bp + 30], ax	; 3: 137 70 30

file_test$728:	; Call 18 printf 0
x17995:	mov word [bp + 18], file_test$729	; 5: 199 70 18 94 70
x18000:	mov [bp + 20], bp	; 3: 137 110 20
x18003:	add bp, 18	; 3: 131 197 18
x18006:	mov di, bp	; 2: 137 239
x18008:	add di, 6	; 3: 131 199 6
x18011:	jmp printf	; 3: 233 166 198

file_test$729:	; PostCall 18

file_test$730:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$731:	; Parameter 18 p 6
x18014:	mov ax, [bp + 14]	; 3: 139 70 14
x18017:	mov [bp + 24], ax	; 3: 137 70 24

file_test$732:	; Parameter 18 total 8
x18020:	mov ax, [bp + 10]	; 3: 139 70 10
x18023:	mov [bp + 26], ax	; 3: 137 70 26

file_test$733:	; Parameter 18 1 10
x18026:	mov word [bp + 28], 1	; 5: 199 70 28 1 0

file_test$734:	; Parameter 18 inFilePtr 12
x18031:	mov ax, [bp + 6]	; 3: 139 70 6
x18034:	mov [bp + 30], ax	; 3: 137 70 30

file_test$735:	; Call 18 fread 0
x18037:	mov word [bp + 18], file_test$736	; 5: 199 70 18 131 70
x18042:	mov [bp + 20], bp	; 3: 137 110 20
x18045:	add bp, 18	; 3: 131 197 18
x18048:	jmp fread	; 3: 233 109 44

file_test$736:	; PostCall 18

file_test$737:	; Assign index 0
x18051:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

file_test$738:	; SignedGreaterThanEqual 751 index size
x18056:	mov ax, [bp + 8]	; 3: 139 70 8
x18059:	cmp [bp + 12], ax	; 3: 57 70 12
x18062:	jge file_test$751	; 2: 125 54

file_test$739:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$740:	; Parameter 18 string_index43A2025i3A20value2025f0A# 6
x18064:	mov word [bp + 24], @11205$string_index43A2025i3A20value2025f0A#	; 5: 199 70 24 66 86

file_test$741:	; Parameter 18 index 8
x18069:	mov ax, [bp + 12]	; 3: 139 70 12
x18072:	mov [bp + 26], ax	; 3: 137 70 26

file_test$742:	; SignedMultiply £temporary5000 index 8
x18075:	mov ax, [bp + 12]	; 3: 139 70 12
x18078:	xor dx, dx	; 2: 49 210
x18080:	imul word [@11207$int2$8#]	; 4: 247 46 88 86

file_test$743:	; BinaryAdd £temporary5001 p £temporary5000
x18084:	mov si, [bp + 14]	; 3: 139 118 14
x18087:	add si, ax	; 2: 1 198

file_test$744:	; Deref £temporary4999 -> £temporary5001 £temporary5001 0

file_test$745:	; PushFloat £temporary4999 -> £temporary5001
x18089:	fld qword [si]	; 2: 221 4

file_test$746:	; Parameter 18 £temporary4999 -> £temporary5001 10
x18091:	fstp qword [bp + 28]	; 3: 221 94 28

file_test$747:	; Call 18 printf 0
x18094:	mov word [bp + 18], file_test$748	; 5: 199 70 18 193 70
x18099:	mov [bp + 20], bp	; 3: 137 110 20
x18102:	add bp, 18	; 3: 131 197 18
x18105:	mov di, bp	; 2: 137 239
x18107:	add di, 10	; 3: 131 199 10
x18110:	jmp printf	; 3: 233 67 198

file_test$748:	; PostCall 18

file_test$749:	; Increment index
x18113:	inc word [bp + 12]	; 3: 255 70 12

file_test$750:	; Goto 738
x18116:	jmp file_test$738	; 2: 235 194

file_test$751:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$752:	; Parameter 18 string_0A# 6
x18118:	mov word [bp + 24], @11211$string_0A#	; 5: 199 70 24 90 86

file_test$753:	; Call 18 printf 0
x18123:	mov word [bp + 18], file_test$754	; 5: 199 70 18 219 70
x18128:	mov [bp + 20], bp	; 3: 137 110 20
x18131:	add bp, 18	; 3: 131 197 18
x18134:	mov di, bp	; 2: 137 239
x18136:	jmp printf	; 3: 233 41 198

file_test$754:	; PostCall 18

file_test$755:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$756:	; Parameter 18 p 6
x18139:	mov ax, [bp + 14]	; 3: 139 70 14
x18142:	mov [bp + 24], ax	; 3: 137 70 24

file_test$757:	; Call 18 free 0
x18145:	mov word [bp + 18], file_test$758	; 5: 199 70 18 239 70
x18150:	mov [bp + 20], bp	; 3: 137 110 20
x18153:	add bp, 18	; 3: 131 197 18
x18156:	jmp free	; 3: 233 80 46

file_test$758:	; PostCall 18

file_test$759:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$760:	; Parameter 10 inFilePtr 6
x18159:	mov ax, [bp + 6]	; 3: 139 70 6
x18162:	mov [bp + 16], ax	; 3: 137 70 16

file_test$761:	; Call 10 fclose 0
x18165:	mov word [bp + 10], file_test$762	; 5: 199 70 10 3 71
x18170:	mov [bp + 12], bp	; 3: 137 110 12
x18173:	add bp, 10	; 3: 131 197 10
x18176:	jmp fclose	; 3: 233 138 42

file_test$762:	; PostCall 10

file_test$763:	; Assign personVector[0]$name[0] 65
x18179:	mov byte [bp + 6], 65	; 4: 198 70 6 65

file_test$764:	; Assign personVector[0]$name[1] 100
x18183:	mov byte [bp + 7], 100	; 4: 198 70 7 100

file_test$765:	; Assign personVector[0]$name[2] 97
x18187:	mov byte [bp + 8], 97	; 4: 198 70 8 97

file_test$766:	; Assign personVector[0]$name[3] 109
x18191:	mov byte [bp + 9], 109	; 4: 198 70 9 109

file_test$767:	; Assign personVector[0]$name[4] 32
x18195:	mov byte [bp + 10], 32	; 4: 198 70 10 32

file_test$768:	; Assign personVector[0]$name[5] 66
x18199:	mov byte [bp + 11], 66	; 4: 198 70 11 66

file_test$769:	; Assign personVector[0]$name[6] 101
x18203:	mov byte [bp + 12], 101	; 4: 198 70 12 101

file_test$770:	; Assign personVector[0]$name[7] 114
x18207:	mov byte [bp + 13], 114	; 4: 198 70 13 114

file_test$771:	; Assign personVector[0]$name[8] 116
x18211:	mov byte [bp + 14], 116	; 4: 198 70 14 116

file_test$772:	; Assign personVector[0]$name[9] 105
x18215:	mov byte [bp + 15], 105	; 4: 198 70 15 105

file_test$773:	; Assign personVector[0]$name[10] 108
x18219:	mov byte [bp + 16], 108	; 4: 198 70 16 108

file_test$774:	; Assign personVector[0]$name[11] 115
x18223:	mov byte [bp + 17], 115	; 4: 198 70 17 115

file_test$775:	; Assign personVector[0]$name[12] 115
x18227:	mov byte [bp + 18], 115	; 4: 198 70 18 115

file_test$776:	; Assign personVector[0]$name[13] 111
x18231:	mov byte [bp + 19], 111	; 4: 198 70 19 111

file_test$777:	; Assign personVector[0]$name[14] 110
x18235:	mov byte [bp + 20], 110	; 4: 198 70 20 110

file_test$778:	; Assign personVector[0]$name[15] 0
x18239:	mov byte [bp + 21], 0	; 4: 198 70 21 0

file_test$779:	; Assign personVector[0]$phone 12345
x18243:	mov word [bp + 54], 12345	; 5: 199 70 54 57 48

file_test$780:	; Assign personVector[1]$name[0] 66
x18248:	mov byte [bp + 56], 66	; 4: 198 70 56 66

file_test$781:	; Assign personVector[1]$name[1] 101
x18252:	mov byte [bp + 57], 101	; 4: 198 70 57 101

file_test$782:	; Assign personVector[1]$name[2] 114
x18256:	mov byte [bp + 58], 114	; 4: 198 70 58 114

file_test$783:	; Assign personVector[1]$name[3] 116
x18260:	mov byte [bp + 59], 116	; 4: 198 70 59 116

file_test$784:	; Assign personVector[1]$name[4] 105
x18264:	mov byte [bp + 60], 105	; 4: 198 70 60 105

file_test$785:	; Assign personVector[1]$name[5] 108
x18268:	mov byte [bp + 61], 108	; 4: 198 70 61 108

file_test$786:	; Assign personVector[1]$name[6] 32
x18272:	mov byte [bp + 62], 32	; 4: 198 70 62 32

file_test$787:	; Assign personVector[1]$name[7] 67
x18276:	mov byte [bp + 63], 67	; 4: 198 70 63 67

file_test$788:	; Assign personVector[1]$name[8] 101
x18280:	mov byte [bp + 64], 101	; 4: 198 70 64 101

file_test$789:	; Assign personVector[1]$name[9] 97
x18284:	mov byte [bp + 65], 97	; 4: 198 70 65 97

file_test$790:	; Assign personVector[1]$name[10] 115
x18288:	mov byte [bp + 66], 115	; 4: 198 70 66 115

file_test$791:	; Assign personVector[1]$name[11] 97
x18292:	mov byte [bp + 67], 97	; 4: 198 70 67 97

file_test$792:	; Assign personVector[1]$name[12] 114
x18296:	mov byte [bp + 68], 114	; 4: 198 70 68 114

file_test$793:	; Assign personVector[1]$name[13] 115
x18300:	mov byte [bp + 69], 115	; 4: 198 70 69 115

file_test$794:	; Assign personVector[1]$name[14] 115
x18304:	mov byte [bp + 70], 115	; 4: 198 70 70 115

file_test$795:	; Assign personVector[1]$name[15] 111
x18308:	mov byte [bp + 71], 111	; 4: 198 70 71 111

file_test$796:	; Assign personVector[1]$name[16] 110
x18312:	mov byte [bp + 72], 110	; 4: 198 70 72 110

file_test$797:	; Assign personVector[1]$name[17] 0
x18316:	mov byte [bp + 73], 0	; 4: 198 70 73 0

file_test$798:	; Assign personVector[1]$phone 23456
x18320:	mov word [bp + 104], 23456	; 5: 199 70 104 160 91

file_test$799:	; Assign personVector[2]$name[0] 67
x18325:	mov byte [bp + 106], 67	; 4: 198 70 106 67

file_test$800:	; Assign personVector[2]$name[1] 101
x18329:	mov byte [bp + 107], 101	; 4: 198 70 107 101

file_test$801:	; Assign personVector[2]$name[2] 97
x18333:	mov byte [bp + 108], 97	; 4: 198 70 108 97

file_test$802:	; Assign personVector[2]$name[3] 115
x18337:	mov byte [bp + 109], 115	; 4: 198 70 109 115

file_test$803:	; Assign personVector[2]$name[4] 97
x18341:	mov byte [bp + 110], 97	; 4: 198 70 110 97

file_test$804:	; Assign personVector[2]$name[5] 114
x18345:	mov byte [bp + 111], 114	; 4: 198 70 111 114

file_test$805:	; Assign personVector[2]$name[6] 32
x18349:	mov byte [bp + 112], 32	; 4: 198 70 112 32

file_test$806:	; Assign personVector[2]$name[7] 68
x18353:	mov byte [bp + 113], 68	; 4: 198 70 113 68

file_test$807:	; Assign personVector[2]$name[8] 97
x18357:	mov byte [bp + 114], 97	; 4: 198 70 114 97

file_test$808:	; Assign personVector[2]$name[9] 118
x18361:	mov byte [bp + 115], 118	; 4: 198 70 115 118

file_test$809:	; Assign personVector[2]$name[10] 105
x18365:	mov byte [bp + 116], 105	; 4: 198 70 116 105

file_test$810:	; Assign personVector[2]$name[11] 100
x18369:	mov byte [bp + 117], 100	; 4: 198 70 117 100

file_test$811:	; Assign personVector[2]$name[12] 115
x18373:	mov byte [bp + 118], 115	; 4: 198 70 118 115

file_test$812:	; Assign personVector[2]$name[13] 115
x18377:	mov byte [bp + 119], 115	; 4: 198 70 119 115

file_test$813:	; Assign personVector[2]$name[14] 111
x18381:	mov byte [bp + 120], 111	; 4: 198 70 120 111

file_test$814:	; Assign personVector[2]$name[15] 110
x18385:	mov byte [bp + 121], 110	; 4: 198 70 121 110

file_test$815:	; Assign personVector[2]$name[16] 0
x18389:	mov byte [bp + 122], 0	; 4: 198 70 122 0

file_test$816:	; Assign personVector[2]$phone 24567
x18393:	mov word [bp + 154], 24567	; 6: 199 134 154 0 247 95

file_test$817:	; CallHeader 206 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$818:	; Parameter 206 string_Block2Ebin# 6
x18399:	mov word [bp + 212], @11392$string_Block2Ebin#	; 6: 199 134 212 0 92 86

file_test$819:	; Parameter 206 string_w# 8
x18405:	mov word [bp + 214], @11393$string_w#	; 6: 199 134 214 0 102 86

file_test$820:	; Call 206 fopen 0
x18411:	mov word [bp + 206], file_test$821	; 6: 199 134 206 0 252 71
x18417:	mov [bp + 208], bp	; 4: 137 174 208 0
x18421:	add bp, 206	; 4: 129 197 206 0
x18425:	jmp fopen	; 3: 233 232 17

file_test$821:	; PostCall 206

file_test$822:	; GetReturnValue £temporary5066

file_test$823:	; Assign outFilePtr £temporary5066
x18428:	mov [bp + 206], bx	; 4: 137 158 206 0

file_test$824:	; CallHeader 208 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$825:	; Parameter 208 string_Block2Ebin# 6
x18432:	mov word [bp + 214], @11396$string_Block2Ebin#	; 6: 199 134 214 0 104 86

file_test$826:	; Parameter 208 string_r# 8
x18438:	mov word [bp + 216], @11397$string_r#	; 6: 199 134 216 0 114 86

file_test$827:	; Call 208 fopen 0
x18444:	mov word [bp + 208], file_test$828	; 6: 199 134 208 0 29 72
x18450:	mov [bp + 210], bp	; 4: 137 174 210 0
x18454:	add bp, 208	; 4: 129 197 208 0
x18458:	jmp fopen	; 3: 233 199 17

file_test$828:	; PostCall 208

file_test$829:	; GetReturnValue £temporary5067

file_test$830:	; Assign inFilePtr £temporary5067
x18461:	mov [bp + 208], bx	; 4: 137 158 208 0

file_test$831:	; NotEqual 843 outFilePtr 0
x18465:	cmp word [bp + 206], 0	; 5: 131 190 206 0 0
x18470:	jne file_test$843	; 2: 117 70

file_test$832:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$833:	; Parameter 210 stderr 6
x18472:	mov ax, [stderr]	; 3: 161 139 77
x18475:	mov [bp + 216], ax	; 4: 137 134 216 0

file_test$834:	; Parameter 210 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x18479:	mov word [bp + 218], @11405$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 6: 199 134 218 0 116 86

file_test$835:	; Parameter 210 string_outFilePtr20213D20NULL# 10
x18485:	mov word [bp + 220], @11406$string_outFilePtr20213D20NULL#	; 6: 199 134 220 0 162 86

file_test$836:	; Parameter 210 string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x18491:	mov word [bp + 222], @11407$string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 6: 199 134 222 0 181 86

file_test$837:	; Parameter 210 284 14
x18497:	mov word [bp + 224], 284	; 6: 199 134 224 0 28 1

file_test$838:	; Call 210 fprintf 0
x18503:	mov word [bp + 210], file_test$839	; 6: 199 134 210 0 93 72
x18509:	mov [bp + 212], bp	; 4: 137 174 212 0
x18513:	add bp, 210	; 4: 129 197 210 0
x18517:	mov di, bp	; 2: 137 239
x18519:	add di, 6	; 3: 131 199 6
x18522:	jmp fprintf	; 3: 233 32 22

file_test$839:	; PostCall 210

file_test$840:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$841:	; Call 210 abort 0
x18525:	mov word [bp + 210], file_test$842	; 6: 199 134 210 0 110 72
x18531:	mov [bp + 212], bp	; 4: 137 174 212 0
x18535:	add bp, 210	; 4: 129 197 210 0
x18539:	jmp abort	; 3: 233 74 22

file_test$842:	; PostCall 210

file_test$843:	; NotEqual 855 inFilePtr 0
x18542:	cmp word [bp + 208], 0	; 5: 131 190 208 0 0
x18547:	jne file_test$855	; 2: 117 70

file_test$844:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$845:	; Parameter 210 stderr 6
x18549:	mov ax, [stderr]	; 3: 161 139 77
x18552:	mov [bp + 216], ax	; 4: 137 134 216 0

file_test$846:	; Parameter 210 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x18556:	mov word [bp + 218], @11417$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 6: 199 134 218 0 245 86

file_test$847:	; Parameter 210 string_inFilePtr20213D20NULL# 10
x18562:	mov word [bp + 220], @11418$string_inFilePtr20213D20NULL#	; 6: 199 134 220 0 35 87

file_test$848:	; Parameter 210 string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x18568:	mov word [bp + 222], @11419$string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 6: 199 134 222 0 53 87

file_test$849:	; Parameter 210 285 14
x18574:	mov word [bp + 224], 285	; 6: 199 134 224 0 29 1

file_test$850:	; Call 210 fprintf 0
x18580:	mov word [bp + 210], file_test$851	; 6: 199 134 210 0 170 72
x18586:	mov [bp + 212], bp	; 4: 137 174 212 0
x18590:	add bp, 210	; 4: 129 197 210 0
x18594:	mov di, bp	; 2: 137 239
x18596:	add di, 6	; 3: 131 199 6
x18599:	jmp fprintf	; 3: 233 211 21

file_test$851:	; PostCall 210

file_test$852:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$853:	; Call 210 abort 0
x18602:	mov word [bp + 210], file_test$854	; 6: 199 134 210 0 187 72
x18608:	mov [bp + 212], bp	; 4: 137 174 212 0
x18612:	add bp, 210	; 4: 129 197 210 0
x18616:	jmp abort	; 3: 233 253 21

file_test$854:	; PostCall 210

file_test$855:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$856:	; Parameter 210 personVector 6
x18619:	mov [bp + 216], bp	; 4: 137 174 216 0
x18623:	add word [bp + 216], 6	; 5: 131 134 216 0 6

file_test$857:	; Parameter 210 150 8
x18628:	mov word [bp + 218], 150	; 6: 199 134 218 0 150 0

file_test$858:	; Parameter 210 1 10
x18634:	mov word [bp + 220], 1	; 6: 199 134 220 0 1 0

file_test$859:	; Parameter 210 outFilePtr 12
x18640:	mov ax, [bp + 206]	; 4: 139 134 206 0
x18644:	mov [bp + 222], ax	; 4: 137 134 222 0

file_test$860:	; Call 210 fwrite 0
x18648:	mov word [bp + 210], file_test$861	; 6: 199 134 210 0 233 72
x18654:	mov [bp + 212], bp	; 4: 137 174 212 0
x18658:	add bp, 210	; 4: 129 197 210 0
x18662:	jmp fwrite	; 3: 233 196 41

file_test$861:	; PostCall 210

file_test$862:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$863:	; Parameter 210 outFilePtr 6
x18665:	mov ax, [bp + 206]	; 4: 139 134 206 0
x18669:	mov [bp + 216], ax	; 4: 137 134 216 0

file_test$864:	; Call 210 fclose 0
x18673:	mov word [bp + 210], file_test$865	; 6: 199 134 210 0 2 73
x18679:	mov [bp + 212], bp	; 4: 137 174 212 0
x18683:	add bp, 210	; 4: 129 197 210 0
x18687:	jmp fclose	; 3: 233 139 40

file_test$865:	; PostCall 210

file_test$866:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$867:	; Parameter 210 inFilePtr 6
x18690:	mov ax, [bp + 208]	; 4: 139 134 208 0
x18694:	mov [bp + 216], ax	; 4: 137 134 216 0

file_test$868:	; Call 210 feof 0
x18698:	mov word [bp + 210], file_test$869	; 6: 199 134 210 0 27 73
x18704:	mov [bp + 212], bp	; 4: 137 174 212 0
x18708:	add bp, 210	; 4: 129 197 210 0
x18712:	jmp feof	; 3: 233 174 21

file_test$869:	; PostCall 210

file_test$870:	; GetReturnValue £temporary5078

file_test$871:	; NotEqual 891 £temporary5078 0
x18715:	cmp bx, 0	; 3: 131 251 0
x18718:	jne file_test$891	; 2: 117 124

file_test$872:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$873:	; address £temporary5081 person
x18720:	mov si, bp	; 2: 137 238
x18722:	add si, 156	; 4: 129 198 156 0

file_test$874:	; Parameter 210 £temporary5081 6
x18726:	mov [bp + 216], si	; 4: 137 182 216 0

file_test$875:	; Parameter 210 50 8
x18730:	mov word [bp + 218], 50	; 6: 199 134 218 0 50 0

file_test$876:	; Parameter 210 1 10
x18736:	mov word [bp + 220], 1	; 6: 199 134 220 0 1 0

file_test$877:	; Parameter 210 inFilePtr 12
x18742:	mov ax, [bp + 208]	; 4: 139 134 208 0
x18746:	mov [bp + 222], ax	; 4: 137 134 222 0

file_test$878:	; Call 210 fread 0
x18750:	mov word [bp + 210], file_test$879	; 6: 199 134 210 0 79 73
x18756:	mov [bp + 212], bp	; 4: 137 174 212 0
x18760:	add bp, 210	; 4: 129 197 210 0
x18764:	jmp fread	; 3: 233 161 41

file_test$879:	; PostCall 210

file_test$880:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$881:	; Parameter 210 string_Name20203A2025s0A# 6
x18767:	mov word [bp + 216], @11444$string_Name20203A2025s0A#	; 6: 199 134 216 0 117 87

file_test$882:	; Parameter 210 person$name 8
x18773:	mov [bp + 218], bp	; 4: 137 174 218 0
x18777:	add word [bp + 218], 156	; 6: 129 134 218 0 156 0

file_test$883:	; Call 210 printf 0
x18783:	mov word [bp + 210], file_test$884	; 6: 199 134 210 0 117 73
x18789:	mov [bp + 212], bp	; 4: 137 174 212 0
x18793:	add bp, 210	; 4: 129 197 210 0
x18797:	mov di, bp	; 2: 137 239
x18799:	add di, 2	; 3: 131 199 2
x18802:	jmp printf	; 3: 233 143 195

file_test$884:	; PostCall 210

file_test$885:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$886:	; Parameter 210 string_Phone203A2025d0A# 6
x18805:	mov word [bp + 216], @11447$string_Phone203A2025d0A#	; 6: 199 134 216 0 129 87

file_test$887:	; Parameter 210 person$phone 8
x18811:	mov ax, [bp + 204]	; 4: 139 134 204 0
x18815:	mov [bp + 218], ax	; 4: 137 134 218 0

file_test$888:	; Call 210 printf 0
x18819:	mov word [bp + 210], file_test$889	; 6: 199 134 210 0 153 73
x18825:	mov [bp + 212], bp	; 4: 137 174 212 0
x18829:	add bp, 210	; 4: 129 197 210 0
x18833:	mov di, bp	; 2: 137 239
x18835:	add di, 2	; 3: 131 199 2
x18838:	jmp printf	; 3: 233 107 195

file_test$889:	; PostCall 210

file_test$890:	; Goto 866
x18841:	jmp file_test$866	; 3: 233 102 255

file_test$891:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$892:	; Parameter 210 inFilePtr 6
x18844:	mov ax, [bp + 208]	; 4: 139 134 208 0
x18848:	mov [bp + 216], ax	; 4: 137 134 216 0

file_test$893:	; Call 210 fclose 0
x18852:	mov word [bp + 210], file_test$894	; 6: 199 134 210 0 181 73
x18858:	mov [bp + 212], bp	; 4: 137 174 212 0
x18862:	add bp, 210	; 4: 129 197 210 0
x18866:	jmp fclose	; 3: 233 216 39

file_test$894:	; PostCall 210

file_test$895:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$896:	; Parameter 6 string_outx2Etxt# 6
x18869:	mov word [bp + 12], @11451$string_outx2Etxt#	; 5: 199 70 12 141 87

file_test$897:	; Parameter 6 string_r# 8
x18874:	mov word [bp + 14], @11452$string_r#	; 5: 199 70 14 150 87

file_test$898:	; Call 6 fopen 0
x18879:	mov word [bp + 6], file_test$899	; 5: 199 70 6 205 73
x18884:	mov [bp + 8], bp	; 3: 137 110 8
x18887:	add bp, 6	; 3: 131 197 6
x18890:	jmp fopen	; 3: 233 23 16

file_test$899:	; PostCall 6

file_test$900:	; GetReturnValue £temporary5088

file_test$901:	; Assign inFilePtr £temporary5088
x18893:	mov [bp + 6], bx	; 3: 137 94 6

file_test$902:	; NotEqual 914 inFilePtr 0
x18896:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x18900:	jne file_test$914	; 2: 117 59

file_test$903:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$904:	; Parameter 8 stderr 6
x18902:	mov ax, [stderr]	; 3: 161 139 77
x18905:	mov [bp + 14], ax	; 3: 137 70 14

file_test$905:	; Parameter 8 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x18908:	mov word [bp + 16], @11460$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 16 152 87

file_test$906:	; Parameter 8 string_inFilePtr20213D20NULL# 10
x18913:	mov word [bp + 18], @11461$string_inFilePtr20213D20NULL#	; 5: 199 70 18 198 87

file_test$907:	; Parameter 8 string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x18918:	mov word [bp + 20], @11462$string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 20 216 87

file_test$908:	; Parameter 8 301 14
x18923:	mov word [bp + 22], 301	; 5: 199 70 22 45 1

file_test$909:	; Call 8 fprintf 0
x18928:	mov word [bp + 8], file_test$910	; 5: 199 70 8 3 74
x18933:	mov [bp + 10], bp	; 3: 137 110 10
x18936:	add bp, 8	; 3: 131 197 8
x18939:	mov di, bp	; 2: 137 239
x18941:	add di, 6	; 3: 131 199 6
x18944:	jmp fprintf	; 3: 233 122 20

file_test$910:	; PostCall 8

file_test$911:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$912:	; Call 8 abort 0
x18947:	mov word [bp + 8], file_test$913	; 5: 199 70 8 17 74
x18952:	mov [bp + 10], bp	; 3: 137 110 10
x18955:	add bp, 8	; 3: 131 197 8
x18958:	jmp abort	; 3: 233 167 20

file_test$913:	; PostCall 8

file_test$914:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$915:	; Parameter 8 inFilePtr 6
x18961:	mov ax, [bp + 6]	; 3: 139 70 6
x18964:	mov [bp + 14], ax	; 3: 137 70 14

file_test$916:	; Parameter 8 0 8
x18967:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

file_test$917:	; Parameter 8 2 10
x18972:	mov word [bp + 18], 2	; 5: 199 70 18 2 0

file_test$918:	; Call 8 fseek 0
x18977:	mov word [bp + 8], file_test$919	; 5: 199 70 8 47 74
x18982:	mov [bp + 10], bp	; 3: 137 110 10
x18985:	add bp, 8	; 3: 131 197 8
x18988:	jmp fseek	; 3: 233 169 19

file_test$919:	; PostCall 8

file_test$920:	; GetReturnValue £temporary5093

file_test$921:	; Assign size £temporary5093
x18991:	mov [bp + 8], bx	; 3: 137 94 8

file_test$922:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$923:	; Parameter 10 inFilePtr 6
x18994:	mov ax, [bp + 6]	; 3: 139 70 6
x18997:	mov [bp + 16], ax	; 3: 137 70 16

file_test$924:	; Call 10 ftell 0
x19000:	mov word [bp + 10], file_test$925	; 5: 199 70 10 70 74
x19005:	mov [bp + 12], bp	; 3: 137 110 12
x19008:	add bp, 10	; 3: 131 197 10
x19011:	jmp ftell	; 3: 233 154 43

file_test$925:	; PostCall 10

file_test$926:	; GetReturnValue £temporary5094

file_test$927:	; SignedLessThanEqual 945 £temporary5094 1
x19014:	cmp bx, 1	; 3: 131 251 1
x19017:	jle file_test$945	; 2: 126 73

file_test$928:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$929:	; Parameter 10 inFilePtr 6
x19019:	mov ax, [bp + 6]	; 3: 139 70 6
x19022:	mov [bp + 16], ax	; 3: 137 70 16

file_test$930:	; Decrement size
x19025:	dec word [bp + 8]	; 3: 255 78 8

file_test$931:	; Parameter 10 size 8
x19028:	mov ax, [bp + 8]	; 3: 139 70 8
x19031:	mov [bp + 18], ax	; 3: 137 70 18

file_test$932:	; Parameter 10 0 10
x19034:	mov word [bp + 20], 0	; 5: 199 70 20 0 0

file_test$933:	; Call 10 fseek 0
x19039:	mov word [bp + 10], file_test$934	; 5: 199 70 10 109 74
x19044:	mov [bp + 12], bp	; 3: 137 110 12
x19047:	add bp, 10	; 3: 131 197 10
x19050:	jmp fseek	; 3: 233 107 19

file_test$934:	; PostCall 10

file_test$935:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$936:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$937:	; Parameter 10 inFilePtr 6
x19053:	mov ax, [bp + 6]	; 3: 139 70 6
x19056:	mov [bp + 16], ax	; 3: 137 70 16

file_test$938:	; Call 10 fgetc 0
x19059:	mov word [bp + 10], file_test$939	; 5: 199 70 10 129 74
x19064:	mov [bp + 12], bp	; 3: 137 110 12
x19067:	add bp, 10	; 3: 131 197 10
x19070:	jmp fgetc	; 3: 233 136 43

file_test$939:	; PostCall 10

file_test$940:	; GetReturnValue £temporary5098

file_test$941:	; Parameter 10 £temporary5098 6
x19073:	mov [bp + 16], bx	; 3: 137 94 16

file_test$942:	; Call 10 putchar 0
x19076:	mov word [bp + 10], file_test$943	; 5: 199 70 10 146 74
x19081:	mov [bp + 12], bp	; 3: 137 110 12
x19084:	add bp, 10	; 3: 131 197 10
x19087:	jmp putchar	; 3: 233 207 43

file_test$943:	; PostCall 10

file_test$944:	; Goto 922
x19090:	jmp file_test$922	; 2: 235 158

file_test$945:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$946:	; Parameter 8 inFilePtr 6
x19092:	mov ax, [bp + 6]	; 3: 139 70 6
x19095:	mov [bp + 14], ax	; 3: 137 70 14

file_test$947:	; Call 8 fclose 0
x19098:	mov word [bp + 8], file_test$948	; 5: 199 70 8 168 74
x19103:	mov [bp + 10], bp	; 3: 137 110 10
x19106:	add bp, 8	; 3: 131 197 8
x19109:	jmp fclose	; 3: 233 229 38

file_test$948:	; PostCall 8

file_test$949:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$950:	; Parameter 6 string_fileexists2022X223A2025s0A# 6
x19112:	mov word [bp + 12], @11487$string_fileexists2022X223A2025s0A#	; 5: 199 70 12 24 88

file_test$951:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$952:	; Parameter 6 string_X# 14
x19117:	mov word [bp + 20], @11488$string_X#	; 5: 199 70 20 44 88

file_test$953:	; Call 6 fileexists 8
x19122:	mov word [bp + 14], file_test$954	; 5: 199 70 14 192 74
x19127:	mov [bp + 16], bp	; 3: 137 110 16
x19130:	add bp, 14	; 3: 131 197 14
x19133:	jmp fileexists	; 3: 233 99 19

file_test$954:	; PostCall 6

file_test$955:	; GetReturnValue £temporary5101

file_test$956:	; Equal 959 £temporary5101 0
x19136:	cmp bx, 0	; 3: 131 251 0
x19139:	je file_test$959	; 2: 116 5

file_test$957:	; Assign £temporary5106 string_Yes#
x19141:	mov ax, @11490$string_Yes#	; 3: 184 46 88

file_test$958:	; Goto 960
x19144:	jmp file_test$960	; 2: 235 3

file_test$959:	; Assign £temporary5106 string_No#
x19146:	mov ax, @11491$string_No#	; 3: 184 50 88

file_test$960:	; Parameter 6 £temporary5106 8
x19149:	mov [bp + 14], ax	; 3: 137 70 14

file_test$961:	; Call 6 printf 0
x19152:	mov word [bp + 6], file_test$962	; 5: 199 70 6 227 74
x19157:	mov [bp + 8], bp	; 3: 137 110 8
x19160:	add bp, 6	; 3: 131 197 6
x19163:	mov di, bp	; 2: 137 239
x19165:	add di, 2	; 3: 131 199 2
x19168:	jmp printf	; 3: 233 33 194

file_test$962:	; PostCall 6

file_test$963:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$964:	; Parameter 6 string_fileexists2022Y223A2025s0A# 6
x19171:	mov word [bp + 12], @11501$string_fileexists2022Y223A2025s0A#	; 5: 199 70 12 53 88

file_test$965:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$966:	; Parameter 6 string_Y# 14
x19176:	mov word [bp + 20], @11502$string_Y#	; 5: 199 70 20 73 88

file_test$967:	; Call 6 fileexists 8
x19181:	mov word [bp + 14], file_test$968	; 5: 199 70 14 251 74
x19186:	mov [bp + 16], bp	; 3: 137 110 16
x19189:	add bp, 14	; 3: 131 197 14
x19192:	jmp fileexists	; 3: 233 40 19

file_test$968:	; PostCall 6

file_test$969:	; GetReturnValue £temporary5108

file_test$970:	; Equal 973 £temporary5108 0
x19195:	cmp bx, 0	; 3: 131 251 0
x19198:	je file_test$973	; 2: 116 5

file_test$971:	; Assign £temporary5113 string_Yes#
x19200:	mov ax, @11504$string_Yes#	; 3: 184 75 88

file_test$972:	; Goto 974
x19203:	jmp file_test$974	; 2: 235 3

file_test$973:	; Assign £temporary5113 string_No#
x19205:	mov ax, @11505$string_No#	; 3: 184 79 88

file_test$974:	; Parameter 6 £temporary5113 8
x19208:	mov [bp + 14], ax	; 3: 137 70 14

file_test$975:	; Call 6 printf 0
x19211:	mov word [bp + 6], file_test$976	; 5: 199 70 6 30 75
x19216:	mov [bp + 8], bp	; 3: 137 110 8
x19219:	add bp, 6	; 3: 131 197 6
x19222:	mov di, bp	; 2: 137 239
x19224:	add di, 2	; 3: 131 199 2
x19227:	jmp printf	; 3: 233 230 193

file_test$976:	; PostCall 6

file_test$977:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$978:	; Parameter 6 string_fileexists2022Main2Easm223A2025s0A# 6
x19230:	mov word [bp + 12], @11515$string_fileexists2022Main2Easm223A2025s0A#	; 5: 199 70 12 82 88

file_test$979:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$980:	; Parameter 6 string_Main2Easm# 14
x19235:	mov word [bp + 20], @11516$string_Main2Easm#	; 5: 199 70 20 109 88

file_test$981:	; Call 6 fileexists 8
x19240:	mov word [bp + 14], file_test$982	; 5: 199 70 14 54 75
x19245:	mov [bp + 16], bp	; 3: 137 110 16
x19248:	add bp, 14	; 3: 131 197 14
x19251:	jmp fileexists	; 3: 233 237 18

file_test$982:	; PostCall 6

file_test$983:	; GetReturnValue £temporary5115

file_test$984:	; Equal 987 £temporary5115 0
x19254:	cmp bx, 0	; 3: 131 251 0
x19257:	je file_test$987	; 2: 116 5

file_test$985:	; Assign £temporary5120 string_Yes#
x19259:	mov ax, @11518$string_Yes#	; 3: 184 118 88

file_test$986:	; Goto 988
x19262:	jmp file_test$988	; 2: 235 3

file_test$987:	; Assign £temporary5120 string_No#
x19264:	mov ax, @11519$string_No#	; 3: 184 122 88

file_test$988:	; Parameter 6 £temporary5120 8
x19267:	mov [bp + 14], ax	; 3: 137 70 14

file_test$989:	; Call 6 printf 0
x19270:	mov word [bp + 6], file_test$990	; 5: 199 70 6 89 75
x19275:	mov [bp + 8], bp	; 3: 137 110 8
x19278:	add bp, 6	; 3: 131 197 6
x19281:	mov di, bp	; 2: 137 239
x19283:	add di, 2	; 3: 131 199 2
x19286:	jmp printf	; 3: 233 171 193

file_test$990:	; PostCall 6

file_test$991:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$992:	; Parameter 6 string_fileexists2022MainX2Easm223A2025s0A# 6
x19289:	mov word [bp + 12], @11529$string_fileexists2022MainX2Easm223A2025s0A#	; 5: 199 70 12 125 88

file_test$993:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$994:	; Parameter 6 string_MainX2Easm# 14
x19294:	mov word [bp + 20], @11530$string_MainX2Easm#	; 5: 199 70 20 153 88

file_test$995:	; Call 6 fileexists 8
x19299:	mov word [bp + 14], file_test$996	; 5: 199 70 14 113 75
x19304:	mov [bp + 16], bp	; 3: 137 110 16
x19307:	add bp, 14	; 3: 131 197 14
x19310:	jmp fileexists	; 3: 233 178 18

file_test$996:	; PostCall 6

file_test$997:	; GetReturnValue £temporary5122

file_test$998:	; Equal 1001 £temporary5122 0
x19313:	cmp bx, 0	; 3: 131 251 0
x19316:	je file_test$1001	; 2: 116 5

file_test$999:	; Assign £temporary5127 string_Yes#
x19318:	mov ax, @11532$string_Yes#	; 3: 184 163 88

file_test$1000:	; Goto 1002
x19321:	jmp file_test$1002	; 2: 235 3

file_test$1001:	; Assign £temporary5127 string_No#
x19323:	mov ax, @11533$string_No#	; 3: 184 167 88

file_test$1002:	; Parameter 6 £temporary5127 8
x19326:	mov [bp + 14], ax	; 3: 137 70 14

file_test$1003:	; Call 6 printf 0
x19329:	mov word [bp + 6], file_test$1004	; 5: 199 70 6 148 75
x19334:	mov [bp + 8], bp	; 3: 137 110 8
x19337:	add bp, 6	; 3: 131 197 6
x19340:	mov di, bp	; 2: 137 239
x19342:	add di, 2	; 3: 131 199 2
x19345:	jmp printf	; 3: 233 112 193

file_test$1004:	; PostCall 6

file_test$1005:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1006:	; Parameter 6 string_fileexists2022Main2Ec223A2025s0A# 6
x19348:	mov word [bp + 12], @11543$string_fileexists2022Main2Ec223A2025s0A#	; 5: 199 70 12 170 88

file_test$1007:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1008:	; Parameter 6 string_Main2Ec# 14
x19353:	mov word [bp + 20], @11544$string_Main2Ec#	; 5: 199 70 20 195 88

file_test$1009:	; Call 6 fileexists 8
x19358:	mov word [bp + 14], file_test$1010	; 5: 199 70 14 172 75
x19363:	mov [bp + 16], bp	; 3: 137 110 16
x19366:	add bp, 14	; 3: 131 197 14
x19369:	jmp fileexists	; 3: 233 119 18

file_test$1010:	; PostCall 6

file_test$1011:	; GetReturnValue £temporary5129

file_test$1012:	; Equal 1015 £temporary5129 0
x19372:	cmp bx, 0	; 3: 131 251 0
x19375:	je file_test$1015	; 2: 116 5

file_test$1013:	; Assign £temporary5134 string_Yes#
x19377:	mov ax, @11546$string_Yes#	; 3: 184 202 88

file_test$1014:	; Goto 1016
x19380:	jmp file_test$1016	; 2: 235 3

file_test$1015:	; Assign £temporary5134 string_No#
x19382:	mov ax, @11547$string_No#	; 3: 184 206 88

file_test$1016:	; Parameter 6 £temporary5134 8
x19385:	mov [bp + 14], ax	; 3: 137 70 14

file_test$1017:	; Call 6 printf 0
x19388:	mov word [bp + 6], file_test$1018	; 5: 199 70 6 207 75
x19393:	mov [bp + 8], bp	; 3: 137 110 8
x19396:	add bp, 6	; 3: 131 197 6
x19399:	mov di, bp	; 2: 137 239
x19401:	add di, 2	; 3: 131 199 2
x19404:	jmp printf	; 3: 233 53 193

file_test$1018:	; PostCall 6

file_test$1019:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1020:	; Parameter 6 string_fileexists2022MainX2Ec223A2025s0A# 6
x19407:	mov word [bp + 12], @11557$string_fileexists2022MainX2Ec223A2025s0A#	; 5: 199 70 12 209 88

file_test$1021:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1022:	; Parameter 6 string_MainX2Ec# 14
x19412:	mov word [bp + 20], @11558$string_MainX2Ec#	; 5: 199 70 20 235 88

file_test$1023:	; Call 6 fileexists 8
x19417:	mov word [bp + 14], file_test$1024	; 5: 199 70 14 231 75
x19422:	mov [bp + 16], bp	; 3: 137 110 16
x19425:	add bp, 14	; 3: 131 197 14
x19428:	jmp fileexists	; 3: 233 60 18

file_test$1024:	; PostCall 6

file_test$1025:	; GetReturnValue £temporary5136

file_test$1026:	; Equal 1029 £temporary5136 0
x19431:	cmp bx, 0	; 3: 131 251 0
x19434:	je file_test$1029	; 2: 116 5

file_test$1027:	; Assign £temporary5141 string_Yes#
x19436:	mov ax, @11560$string_Yes#	; 3: 184 243 88

file_test$1028:	; Goto 1030
x19439:	jmp file_test$1030	; 2: 235 3

file_test$1029:	; Assign £temporary5141 string_No#
x19441:	mov ax, @11561$string_No#	; 3: 184 247 88

file_test$1030:	; Parameter 6 £temporary5141 8
x19444:	mov [bp + 14], ax	; 3: 137 70 14

file_test$1031:	; Call 6 printf 0
x19447:	mov word [bp + 6], file_test$1032	; 5: 199 70 6 10 76
x19452:	mov [bp + 8], bp	; 3: 137 110 8
x19455:	add bp, 6	; 3: 131 197 6
x19458:	mov di, bp	; 2: 137 239
x19460:	add di, 2	; 3: 131 199 2
x19463:	jmp printf	; 3: 233 250 192

file_test$1032:	; PostCall 6

file_test$1033:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1034:	; Parameter 6 string_fileexists2022File2Ec223A2025s0A# 6
x19466:	mov word [bp + 12], @11571$string_fileexists2022File2Ec223A2025s0A#	; 5: 199 70 12 250 88

file_test$1035:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1036:	; Parameter 6 string_File2Ec# 14
x19471:	mov word [bp + 20], @11572$string_File2Ec#	; 5: 199 70 20 19 89

file_test$1037:	; Call 6 fileexists 8
x19476:	mov word [bp + 14], file_test$1038	; 5: 199 70 14 34 76
x19481:	mov [bp + 16], bp	; 3: 137 110 16
x19484:	add bp, 14	; 3: 131 197 14
x19487:	jmp fileexists	; 3: 233 1 18

file_test$1038:	; PostCall 6

file_test$1039:	; GetReturnValue £temporary5143

file_test$1040:	; Equal 1043 £temporary5143 0
x19490:	cmp bx, 0	; 3: 131 251 0
x19493:	je file_test$1043	; 2: 116 5

file_test$1041:	; Assign £temporary5148 string_Yes#
x19495:	mov ax, @11574$string_Yes#	; 3: 184 26 89

file_test$1042:	; Goto 1044
x19498:	jmp file_test$1044	; 2: 235 3

file_test$1043:	; Assign £temporary5148 string_No#
x19500:	mov ax, @11575$string_No#	; 3: 184 30 89

file_test$1044:	; Parameter 6 £temporary5148 8
x19503:	mov [bp + 14], ax	; 3: 137 70 14

file_test$1045:	; Call 6 printf 0
x19506:	mov word [bp + 6], file_test$1046	; 5: 199 70 6 69 76
x19511:	mov [bp + 8], bp	; 3: 137 110 8
x19514:	add bp, 6	; 3: 131 197 6
x19517:	mov di, bp	; 2: 137 239
x19519:	add di, 2	; 3: 131 199 2
x19522:	jmp printf	; 3: 233 191 192

file_test$1046:	; PostCall 6

file_test$1047:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1048:	; Parameter 6 string_fileexists2022File2Ex223A2025s0A# 6
x19525:	mov word [bp + 12], @11585$string_fileexists2022File2Ex223A2025s0A#	; 5: 199 70 12 33 89

file_test$1049:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1050:	; Parameter 6 string_File2Ex# 14
x19530:	mov word [bp + 20], @11586$string_File2Ex#	; 5: 199 70 20 58 89

file_test$1051:	; Call 6 fileexists 8
x19535:	mov word [bp + 14], file_test$1052	; 5: 199 70 14 93 76
x19540:	mov [bp + 16], bp	; 3: 137 110 16
x19543:	add bp, 14	; 3: 131 197 14
x19546:	jmp fileexists	; 3: 233 198 17

file_test$1052:	; PostCall 6

file_test$1053:	; GetReturnValue £temporary5150

file_test$1054:	; Equal 1057 £temporary5150 0
x19549:	cmp bx, 0	; 3: 131 251 0
x19552:	je file_test$1057	; 2: 116 5

file_test$1055:	; Assign £temporary5155 string_Yes#
x19554:	mov ax, @11588$string_Yes#	; 3: 184 65 89

file_test$1056:	; Goto 1058
x19557:	jmp file_test$1058	; 2: 235 3

file_test$1057:	; Assign £temporary5155 string_No#
x19559:	mov ax, @11589$string_No#	; 3: 184 69 89

file_test$1058:	; Parameter 6 £temporary5155 8
x19562:	mov [bp + 14], ax	; 3: 137 70 14

file_test$1059:	; Call 6 printf 0
x19565:	mov word [bp + 6], file_test$1060	; 5: 199 70 6 128 76
x19570:	mov [bp + 8], bp	; 3: 137 110 8
x19573:	add bp, 6	; 3: 131 197 6
x19576:	mov di, bp	; 2: 137 239
x19578:	add di, 2	; 3: 131 199 2
x19581:	jmp printf	; 3: 233 132 192

file_test$1060:	; PostCall 6

file_test$1061:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1062:	; Parameter 6 string_fileexists2022File2Eh223A2025s0A# 6
x19584:	mov word [bp + 12], @11599$string_fileexists2022File2Eh223A2025s0A#	; 5: 199 70 12 72 89

file_test$1063:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1064:	; Parameter 6 string_File2Eh# 14
x19589:	mov word [bp + 20], @11600$string_File2Eh#	; 5: 199 70 20 97 89

file_test$1065:	; Call 6 fileexists 8
x19594:	mov word [bp + 14], file_test$1066	; 5: 199 70 14 152 76
x19599:	mov [bp + 16], bp	; 3: 137 110 16
x19602:	add bp, 14	; 3: 131 197 14
x19605:	jmp fileexists	; 3: 233 139 17

file_test$1066:	; PostCall 6

file_test$1067:	; GetReturnValue £temporary5157

file_test$1068:	; Equal 1071 £temporary5157 0
x19608:	cmp bx, 0	; 3: 131 251 0
x19611:	je file_test$1071	; 2: 116 5

file_test$1069:	; Assign £temporary5162 string_Yes#
x19613:	mov ax, @11602$string_Yes#	; 3: 184 104 89

file_test$1070:	; Goto 1072
x19616:	jmp file_test$1072	; 2: 235 3

file_test$1071:	; Assign £temporary5162 string_No#
x19618:	mov ax, @11603$string_No#	; 3: 184 108 89

file_test$1072:	; Parameter 6 £temporary5162 8
x19621:	mov [bp + 14], ax	; 3: 137 70 14

file_test$1073:	; Call 6 printf 0
x19624:	mov word [bp + 6], file_test$1074	; 5: 199 70 6 187 76
x19629:	mov [bp + 8], bp	; 3: 137 110 8
x19632:	add bp, 6	; 3: 131 197 6
x19635:	mov di, bp	; 2: 137 239
x19637:	add di, 2	; 3: 131 199 2
x19640:	jmp printf	; 3: 233 73 192

file_test$1074:	; PostCall 6

file_test$1075:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1076:	; Parameter 6 string_fileexists2022File2Ey223A2025s0A# 6
x19643:	mov word [bp + 12], @11613$string_fileexists2022File2Ey223A2025s0A#	; 5: 199 70 12 111 89

file_test$1077:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1078:	; Parameter 6 string_File2Ey# 14
x19648:	mov word [bp + 20], @11614$string_File2Ey#	; 5: 199 70 20 136 89

file_test$1079:	; Call 6 fileexists 8
x19653:	mov word [bp + 14], file_test$1080	; 5: 199 70 14 211 76
x19658:	mov [bp + 16], bp	; 3: 137 110 16
x19661:	add bp, 14	; 3: 131 197 14
x19664:	jmp fileexists	; 3: 233 80 17

file_test$1080:	; PostCall 6

file_test$1081:	; GetReturnValue £temporary5164

file_test$1082:	; Equal 1085 £temporary5164 0
x19667:	cmp bx, 0	; 3: 131 251 0
x19670:	je file_test$1085	; 2: 116 5

file_test$1083:	; Assign £temporary5169 string_Yes#
x19672:	mov ax, @11616$string_Yes#	; 3: 184 143 89

file_test$1084:	; Goto 1086
x19675:	jmp file_test$1086	; 2: 235 3

file_test$1085:	; Assign £temporary5169 string_No#
x19677:	mov ax, @11617$string_No#	; 3: 184 147 89

file_test$1086:	; Parameter 6 £temporary5169 8
x19680:	mov [bp + 14], ax	; 3: 137 70 14

file_test$1087:	; Call 6 printf 0
x19683:	mov word [bp + 6], file_test$1088	; 5: 199 70 6 246 76
x19688:	mov [bp + 8], bp	; 3: 137 110 8
x19691:	add bp, 6	; 3: 131 197 6
x19694:	mov di, bp	; 2: 137 239
x19696:	add di, 2	; 3: 131 199 2
x19699:	jmp printf	; 3: 233 14 192

file_test$1088:	; PostCall 6

file_test$1089:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1090:	; Parameter 6 string_fileexists2022File2Ep223A2025s0A# 6
x19702:	mov word [bp + 12], @11627$string_fileexists2022File2Ep223A2025s0A#	; 5: 199 70 12 150 89

file_test$1091:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1092:	; Parameter 6 string_File2Ep# 14
x19707:	mov word [bp + 20], @11628$string_File2Ep#	; 5: 199 70 20 175 89

file_test$1093:	; Call 6 fileexists 8
x19712:	mov word [bp + 14], file_test$1094	; 5: 199 70 14 14 77
x19717:	mov [bp + 16], bp	; 3: 137 110 16
x19720:	add bp, 14	; 3: 131 197 14
x19723:	jmp fileexists	; 3: 233 21 17

file_test$1094:	; PostCall 6

file_test$1095:	; GetReturnValue £temporary5171

file_test$1096:	; Equal 1099 £temporary5171 0
x19726:	cmp bx, 0	; 3: 131 251 0
x19729:	je file_test$1099	; 2: 116 5

file_test$1097:	; Assign £temporary5176 string_Yes#
x19731:	mov ax, @11630$string_Yes#	; 3: 184 182 89

file_test$1098:	; Goto 1100
x19734:	jmp file_test$1100	; 2: 235 3

file_test$1099:	; Assign £temporary5176 string_No#
x19736:	mov ax, @11631$string_No#	; 3: 184 186 89

file_test$1100:	; Parameter 6 £temporary5176 8
x19739:	mov [bp + 14], ax	; 3: 137 70 14

file_test$1101:	; Call 6 printf 0
x19742:	mov word [bp + 6], file_test$1102	; 5: 199 70 6 49 77
x19747:	mov [bp + 8], bp	; 3: 137 110 8
x19750:	add bp, 6	; 3: 131 197 6
x19753:	mov di, bp	; 2: 137 239
x19755:	add di, 2	; 3: 131 199 2
x19758:	jmp printf	; 3: 233 211 191

file_test$1102:	; PostCall 6

file_test$1103:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1104:	; Parameter 6 string_fileexists2022File2Ez223A2025s0A# 6
x19761:	mov word [bp + 12], @11641$string_fileexists2022File2Ez223A2025s0A#	; 5: 199 70 12 189 89

file_test$1105:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1106:	; Parameter 6 string_File2Ez# 14
x19766:	mov word [bp + 20], @11642$string_File2Ez#	; 5: 199 70 20 214 89

file_test$1107:	; Call 6 fileexists 8
x19771:	mov word [bp + 14], file_test$1108	; 5: 199 70 14 73 77
x19776:	mov [bp + 16], bp	; 3: 137 110 16
x19779:	add bp, 14	; 3: 131 197 14
x19782:	jmp fileexists	; 3: 233 218 16

file_test$1108:	; PostCall 6

file_test$1109:	; GetReturnValue £temporary5178

file_test$1110:	; Equal 1113 £temporary5178 0
x19785:	cmp bx, 0	; 3: 131 251 0
x19788:	je file_test$1113	; 2: 116 5

file_test$1111:	; Assign £temporary5183 string_Yes#
x19790:	mov ax, @11644$string_Yes#	; 3: 184 221 89

file_test$1112:	; Goto 1114
x19793:	jmp file_test$1114	; 2: 235 3

file_test$1113:	; Assign £temporary5183 string_No#
x19795:	mov ax, @11645$string_No#	; 3: 184 225 89

file_test$1114:	; Parameter 6 £temporary5183 8
x19798:	mov [bp + 14], ax	; 3: 137 70 14

file_test$1115:	; Call 6 printf 0
x19801:	mov word [bp + 6], file_test$1116	; 5: 199 70 6 108 77
x19806:	mov [bp + 8], bp	; 3: 137 110 8
x19809:	add bp, 6	; 3: 131 197 6
x19812:	mov di, bp	; 2: 137 239
x19814:	add di, 2	; 3: 131 199 2
x19817:	jmp printf	; 3: 233 152 191

file_test$1116:	; PostCall 6

file_test$1117:	; Return 0
x19820:	mov ax, [bp]	; 3: 139 70 0
x19823:	mov di, [bp + 4]	; 3: 139 126 4
x19826:	mov bp, [bp + 2]	; 3: 139 110 2
x19829:	jmp ax	; 2: 255 224

file_test$1118:	; FunctionEnd file_test

@10693$string_in2Etxt#:
x19831:	db "in.txt", 0	; 7: 105 110 46 116 120 116 0

@10694$string_r#:
x19838:	db "r", 0	; 2: 114 0

@10697$string_outX2Etxt#:
x19840:	db "outX.txt", 0	; 9: 111 117 116 88 46 116 120 116 0

@10698$string_w#:
x19849:	db "w", 0	; 2: 119 0

stderr:
x19851:	dw g_fileArray + 58	; 2: 160 13

@10706$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x19853:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@10707$string_inFilePtr20213D20NULL#:
x19899:	db "inFilePtr != NULL", 0	; 18: 105 110 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@10708$string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x19917:	db "C:\Users\Stefa\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 64: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@10718$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x19981:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@10719$string_outFilePtr20213D20NULL#:
x20027:	db "outFilePtr != NULL", 0	; 19: 111 117 116 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@10720$string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x20046:	db "C:\Users\Stefa\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 64: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@10730$string_25lf#:
x20110:	db "%lf", 0	; 4: 37 108 102 0

@10733$string_X12025f0A#:
x20114:	db "X1 %f", 10, 0	; 7: 88 49 32 37 102 10 0

@10736$string_X22025f0A#:
x20121:	db "X2 %f", 10, 0	; 7: 88 50 32 37 102 10 0

@10739$string_0A#:
x20128:	db 10, 0	; 2: 10 0

@10743$string_in2Etxt#:
x20130:	db "in.txt", 0	; 7: 105 110 46 116 120 116 0

@10744$string_r#:
x20137:	db "r", 0	; 2: 114 0

@10747$string_outY2Etxt#:
x20139:	db "outY.txt", 0	; 9: 111 117 116 89 46 116 120 116 0

@10748$string_w#:
x20148:	db "w", 0	; 2: 119 0

@10756$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x20150:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@10757$string_inFilePtr20213D20NULL#:
x20196:	db "inFilePtr != NULL", 0	; 18: 105 110 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@10758$string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x20214:	db "C:\Users\Stefa\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 64: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@10768$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x20278:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@10769$string_outFilePtr20213D20NULL#:
x20324:	db "outFilePtr != NULL", 0	; 19: 111 117 116 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@10770$string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x20343:	db "C:\Users\Stefa\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 64: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@10779$string_25i#:
x20407:	db "%i", 0	; 3: 37 105 0

@10782$string_size2025i0A#:
x20410:	db "size %i", 10, 0	; 9: 115 105 122 101 32 37 105 10 0

@10784$string_Y20size2025i0A#:
x20419:	db "Y size %i", 10, 0	; 11: 89 32 115 105 122 101 32 37 105 10 0

@10793$string_25lf#:
x20430:	db "%lf", 0	; 4: 37 108 102 0

@10796$string_Y12025f0A#:
x20434:	db "Y1 %f", 10, 0	; 7: 89 49 32 37 102 10 0

@10799$string_Y22025f0A#:
x20441:	db "Y2 %f", 10, 0	; 7: 89 50 32 37 102 10 0

@10802$string_0A#:
x20448:	db 10, 0	; 2: 10 0

@10806$string_Y#:
x20450:	db "Y", 0	; 2: 89 0

@10812$string_2225s2220has20been20removed0A#:
x20452:	db 34, "%s", 34, " has been removed", 10, 0	; 23: 34 37 115 34 32 104 97 115 32 98 101 101 110 32 114 101 109 111 118 101 100 10 0

@10814$string_Error202225s222025i3A2025s2E0A#:
x20475:	db "Error ", 34, "%s", 34, " %i: %s.", 10, 0	; 20: 69 114 114 111 114 32 34 37 115 34 32 37 105 58 32 37 115 46 10 0

@10817$string_X#:
x20495:	db "X", 0	; 2: 88 0

@10819$string_Y#:
x20497:	db "Y", 0	; 2: 89 0

@10821$string_w#:
x20499:	db "w", 0	; 2: 119 0

@10824$string_Hello20X#:
x20501:	db "Hello X", 0	; 8: 72 101 108 108 111 32 88 0

@10831$string_2225s2220has20been20renamed20to202225s222E0A#:
x20509:	db 34, "%s", 34, " has been renamed to ", 34, "%s", 34, ".", 10, 0	; 32: 34 37 115 34 32 104 97 115 32 98 101 101 110 32 114 101 110 97 109 101 100 32 116 111 32 34 37 115 34 46 10 0

@10833$string_Error202225s22202225s222025i3A2025s2E0A#:
x20541:	db "Error ", 34, "%s", 34, " ", 34, "%s", 34, " %i: %s.", 10, 0	; 25: 69 114 114 111 114 32 34 37 115 34 32 34 37 115 34 32 37 105 58 32 37 115 46 10 0

@10836$string_X2#:
x20566:	db "X2", 0	; 3: 88 50 0

@10838$string_Y2#:
x20569:	db "Y2", 0	; 3: 89 50 0

@10844$string_2225s2220has20been20renamed20to202225s222E0A#:
x20572:	db 34, "%s", 34, " has been renamed to ", 34, "%s", 34, ".", 10, 0	; 32: 34 37 115 34 32 104 97 115 32 98 101 101 110 32 114 101 110 97 109 101 100 32 116 111 32 34 37 115 34 46 10 0

@10846$string_Error202225s22202225s222025i3A2025s2E0A#:
x20604:	db "Error ", 34, "%s", 34, " ", 34, "%s", 34, " %i: %s.", 10, 0	; 25: 69 114 114 111 114 32 34 37 115 34 32 34 37 115 34 32 37 105 58 32 37 115 46 10 0

@10849$string_Z#:
x20629:	db "Z", 0	; 2: 90 0

@10851$string_w#:
x20631:	db "w", 0	; 2: 119 0

@10854$string_Hello20Z#:
x20633:	db "Hello Z", 0	; 8: 72 101 108 108 111 32 90 0

@10861$string_2225s2220has20been20removed2E0A#:
x20641:	db 34, "%s", 34, " has been removed.", 10, 0	; 24: 34 37 115 34 32 104 97 115 32 98 101 101 110 32 114 101 109 111 118 101 100 46 10 0

@10863$string_Error202225s222025i3A2025s2E0A#:
x20665:	db "Error ", 34, "%s", 34, " %i: %s.", 10, 0	; 20: 69 114 114 111 114 32 34 37 115 34 32 37 105 58 32 37 115 46 10 0

@10866$string_Z2#:
x20685:	db "Z2", 0	; 3: 90 50 0

@10872$string_2225s2220has20been20removed2E0A#:
x20688:	db 34, "%s", 34, " has been removed.", 10, 0	; 24: 34 37 115 34 32 104 97 115 32 98 101 101 110 32 114 101 109 111 118 101 100 46 10 0

@10874$string_Error202225s222025i3A2025s2E0A#:
x20712:	db "Error ", 34, "%s", 34, " %i: %s.", 10, 0	; 20: 69 114 114 111 114 32 34 37 115 34 32 37 105 58 32 37 115 46 10 0

@10877$string_PBook2Etxt#:
x20732:	db "PBook.txt", 0	; 10: 80 66 111 111 107 46 116 120 116 0

@10878$string_r#:
x20742:	db "r", 0	; 2: 114 0

@10886$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x20744:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@10887$string_inFilePtr20213D20NULL#:
x20790:	db "inFilePtr != NULL", 0	; 18: 105 110 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@10888$string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x20808:	db "C:\Users\Stefa\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 64: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@10893$string_0A252D24s20252D24s0A#:
x20872:	db 10, "%-24s %-24s", 10, 0	; 14: 10 37 45 50 52 115 32 37 45 50 52 115 10 0

@10894$string_Name#:
x20886:	db "Name", 0	; 5: 78 97 109 101 0

@10895$string_Phone#:
x20891:	db "Phone", 0	; 6: 80 104 111 110 101 0

@10897$string_252D24s20252D24s0A#:
x20897:	db "%-24s %-24s", 10, 0	; 13: 37 45 50 52 115 32 37 45 50 52 115 10 0

@10898$string_3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D#:
x20910:	db "========================", 0	; 25: 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 0

@10899$string_3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D#:
x20935:	db "========================", 0	; 25: 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 0

@10903$string_25i#:
x20960:	db "%i", 0	; 3: 37 105 0

@10906$string_size2025i0A#:
x20963:	db "size %i", 10, 0	; 9: 115 105 122 101 32 37 105 10 0

@10920$string_25s25s#:
x20972:	db "%s%s", 0	; 5: 37 115 37 115 0

@10922$string_252D24s20252D24s0A#:
x20977:	db "%-24s %-24s", 10, 0	; 13: 37 45 50 52 115 32 37 45 50 52 115 10 0

@10924$string_0A#:
x20990:	db 10, 0	; 2: 10 0

@10927$string_TestX2Ebin#:
x20992:	db "TestX.bin", 0	; 10: 84 101 115 116 88 46 98 105 110 0

@10928$string_w#:
x21002:	db "w", 0	; 2: 119 0

@10936$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x21004:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@10937$string_outFilePtr20213D20NULL#:
x21050:	db "outFilePtr != NULL", 0	; 19: 111 117 116 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@10938$string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x21069:	db "C:\Users\Stefa\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 64: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@10973$string_TestX2Ebin#:
x21133:	db "TestX.bin", 0	; 10: 84 101 115 116 88 46 98 105 110 0

@10974$string_r#:
x21143:	db "r", 0	; 2: 114 0

@10984$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x21145:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@10985$string_inFilePtr20213D20NULL#:
x21191:	db "inFilePtr != NULL", 0	; 18: 105 110 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@10986$string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x21209:	db "C:\Users\Stefa\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 64: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@10999$string_size13A2025i0A#:
x21273:	db "size1: %i", 10, 0	; 11: 115 105 122 101 49 58 32 37 105 10 0

@11016$string_index13A2025i3A20value2025f0A#:
x21284:	db "index1: %i: value %f", 10, 0	; 22: 105 110 100 101 120 49 58 32 37 105 58 32 118 97 108 117 101 32 37 102 10 0

@11018$string_0A#:
x21306:	db 10, 0	; 2: 10 0

@11021$string_TestY2Ebin#:
x21308:	db "TestY.bin", 0	; 10: 84 101 115 116 89 46 98 105 110 0

@11022$string_w#:
x21318:	db "w", 0	; 2: 119 0

@11030$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x21320:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@11031$string_outFilePtr20213D20NULL#:
x21366:	db "outFilePtr != NULL", 0	; 19: 111 117 116 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@11032$string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x21385:	db "C:\Users\Stefa\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 64: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@11059$string_TestY2Ebin#:
x21449:	db "TestY.bin", 0	; 10: 84 101 115 116 89 46 98 105 110 0

@11060$string_r#:
x21459:	db "r", 0	; 2: 114 0

@11068$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x21461:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@11069$string_inFilePtr20213D20NULL#:
x21507:	db "inFilePtr != NULL", 0	; 18: 105 110 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@11070$string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x21525:	db "C:\Users\Stefa\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 64: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@11090$string_index23A2025i3A20value2025f0A#:
x21589:	db "index2: %i: value %f", 10, 0	; 22: 105 110 100 101 120 50 58 32 37 105 58 32 118 97 108 117 101 32 37 102 10 0

@11096$string_0A#:
x21611:	db 10, 0	; 2: 10 0

@11099$string_TestY2Ebin#:
x21613:	db "TestY.bin", 0	; 10: 84 101 115 116 89 46 98 105 110 0

@11100$string_r#:
x21623:	db "r", 0	; 2: 114 0

@11108$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x21625:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@11109$string_inFilePtr20213D20NULL#:
x21671:	db "inFilePtr != NULL", 0	; 18: 105 110 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@11110$string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x21689:	db "C:\Users\Stefa\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 64: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@11131$string_index33A2025i3A20value2025f0A#:
x21753:	db "index3: %i: value %f", 10, 0	; 22: 105 110 100 101 120 51 58 32 37 105 58 32 118 97 108 117 101 32 37 102 10 0

@11137$string_0A#:
x21775:	db 10, 0	; 2: 10 0

@11140$string_TestX2Ebin#:
x21777:	db "TestX.bin", 0	; 10: 84 101 115 116 88 46 98 105 110 0

@11141$string_r#:
x21787:	db "r", 0	; 2: 114 0

@11150$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x21789:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@11151$string_inFilePtr20213D20NULL#:
x21835:	db "inFilePtr != NULL", 0	; 18: 105 110 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@11152$string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x21853:	db "C:\Users\Stefa\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 64: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@11165$string_size43A2025i20total2025i0A#:
x21917:	db "size4: %i total %i", 10, 0	; 20: 115 105 122 101 52 58 32 37 105 32 116 111 116 97 108 32 37 105 10 0

@11167$int2$8#:
x21937:	dw 8	; 2: 8 0

@11171$int2$8#:
x21939:	dw 8	; 2: 8 0

@11178$int2$8#:
x21941:	dw 8	; 2: 8 0

@11186$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x21943:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@11187$string_p20213D20NULL#:
x21989:	db "p != NULL", 0	; 10: 112 32 33 61 32 78 85 76 76 0

@11188$string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x21999:	db "C:\Users\Stefa\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 64: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@11193$string_malloc43A2025u2025u2025u0A#:
x22063:	db "malloc4: %u %u %u", 10, 0	; 19: 109 97 108 108 111 99 52 58 32 37 117 32 37 117 32 37 117 10 0

@11205$string_index43A2025i3A20value2025f0A#:
x22082:	db "index4: %i: value %f", 10, 0	; 22: 105 110 100 101 120 52 58 32 37 105 58 32 118 97 108 117 101 32 37 102 10 0

@11207$int2$8#:
x22104:	dw 8	; 2: 8 0

@11211$string_0A#:
x22106:	db 10, 0	; 2: 10 0

@11392$string_Block2Ebin#:
x22108:	db "Block.bin", 0	; 10: 66 108 111 99 107 46 98 105 110 0

@11393$string_w#:
x22118:	db "w", 0	; 2: 119 0

@11396$string_Block2Ebin#:
x22120:	db "Block.bin", 0	; 10: 66 108 111 99 107 46 98 105 110 0

@11397$string_r#:
x22130:	db "r", 0	; 2: 114 0

@11405$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x22132:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@11406$string_outFilePtr20213D20NULL#:
x22178:	db "outFilePtr != NULL", 0	; 19: 111 117 116 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@11407$string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x22197:	db "C:\Users\Stefa\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 64: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@11417$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x22261:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@11418$string_inFilePtr20213D20NULL#:
x22307:	db "inFilePtr != NULL", 0	; 18: 105 110 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@11419$string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x22325:	db "C:\Users\Stefa\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 64: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@11444$string_Name20203A2025s0A#:
x22389:	db "Name  : %s", 10, 0	; 12: 78 97 109 101 32 32 58 32 37 115 10 0

@11447$string_Phone203A2025d0A#:
x22401:	db "Phone : %d", 10, 0	; 12: 80 104 111 110 101 32 58 32 37 100 10 0

@11451$string_outx2Etxt#:
x22413:	db "outx.txt", 0	; 9: 111 117 116 120 46 116 120 116 0

@11452$string_r#:
x22422:	db "r", 0	; 2: 114 0

@11460$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x22424:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@11461$string_inFilePtr20213D20NULL#:
x22470:	db "inFilePtr != NULL", 0	; 18: 105 110 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@11462$string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x22488:	db "C:\Users\Stefa\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 64: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@11487$string_fileexists2022X223A2025s0A#:
x22552:	db "fileexists ", 34, "X", 34, ": %s", 10, 0	; 20: 102 105 108 101 101 120 105 115 116 115 32 34 88 34 58 32 37 115 10 0

@11488$string_X#:
x22572:	db "X", 0	; 2: 88 0

@11490$string_Yes#:
x22574:	db "Yes", 0	; 4: 89 101 115 0

@11491$string_No#:
x22578:	db "No", 0	; 3: 78 111 0

@11501$string_fileexists2022Y223A2025s0A#:
x22581:	db "fileexists ", 34, "Y", 34, ": %s", 10, 0	; 20: 102 105 108 101 101 120 105 115 116 115 32 34 89 34 58 32 37 115 10 0

@11502$string_Y#:
x22601:	db "Y", 0	; 2: 89 0

@11504$string_Yes#:
x22603:	db "Yes", 0	; 4: 89 101 115 0

@11505$string_No#:
x22607:	db "No", 0	; 3: 78 111 0

@11515$string_fileexists2022Main2Easm223A2025s0A#:
x22610:	db "fileexists ", 34, "Main.asm", 34, ": %s", 10, 0	; 27: 102 105 108 101 101 120 105 115 116 115 32 34 77 97 105 110 46 97 115 109 34 58 32 37 115 10 0

@11516$string_Main2Easm#:
x22637:	db "Main.asm", 0	; 9: 77 97 105 110 46 97 115 109 0

@11518$string_Yes#:
x22646:	db "Yes", 0	; 4: 89 101 115 0

@11519$string_No#:
x22650:	db "No", 0	; 3: 78 111 0

@11529$string_fileexists2022MainX2Easm223A2025s0A#:
x22653:	db "fileexists ", 34, "MainX.asm", 34, ": %s", 10, 0	; 28: 102 105 108 101 101 120 105 115 116 115 32 34 77 97 105 110 88 46 97 115 109 34 58 32 37 115 10 0

@11530$string_MainX2Easm#:
x22681:	db "MainX.asm", 0	; 10: 77 97 105 110 88 46 97 115 109 0

@11532$string_Yes#:
x22691:	db "Yes", 0	; 4: 89 101 115 0

@11533$string_No#:
x22695:	db "No", 0	; 3: 78 111 0

@11543$string_fileexists2022Main2Ec223A2025s0A#:
x22698:	db "fileexists ", 34, "Main.c", 34, ": %s", 10, 0	; 25: 102 105 108 101 101 120 105 115 116 115 32 34 77 97 105 110 46 99 34 58 32 37 115 10 0

@11544$string_Main2Ec#:
x22723:	db "Main.c", 0	; 7: 77 97 105 110 46 99 0

@11546$string_Yes#:
x22730:	db "Yes", 0	; 4: 89 101 115 0

@11547$string_No#:
x22734:	db "No", 0	; 3: 78 111 0

@11557$string_fileexists2022MainX2Ec223A2025s0A#:
x22737:	db "fileexists ", 34, "MainX.c", 34, ": %s", 10, 0	; 26: 102 105 108 101 101 120 105 115 116 115 32 34 77 97 105 110 88 46 99 34 58 32 37 115 10 0

@11558$string_MainX2Ec#:
x22763:	db "MainX.c", 0	; 8: 77 97 105 110 88 46 99 0

@11560$string_Yes#:
x22771:	db "Yes", 0	; 4: 89 101 115 0

@11561$string_No#:
x22775:	db "No", 0	; 3: 78 111 0

@11571$string_fileexists2022File2Ec223A2025s0A#:
x22778:	db "fileexists ", 34, "File.c", 34, ": %s", 10, 0	; 25: 102 105 108 101 101 120 105 115 116 115 32 34 70 105 108 101 46 99 34 58 32 37 115 10 0

@11572$string_File2Ec#:
x22803:	db "File.c", 0	; 7: 70 105 108 101 46 99 0

@11574$string_Yes#:
x22810:	db "Yes", 0	; 4: 89 101 115 0

@11575$string_No#:
x22814:	db "No", 0	; 3: 78 111 0

@11585$string_fileexists2022File2Ex223A2025s0A#:
x22817:	db "fileexists ", 34, "File.x", 34, ": %s", 10, 0	; 25: 102 105 108 101 101 120 105 115 116 115 32 34 70 105 108 101 46 120 34 58 32 37 115 10 0

@11586$string_File2Ex#:
x22842:	db "File.x", 0	; 7: 70 105 108 101 46 120 0

@11588$string_Yes#:
x22849:	db "Yes", 0	; 4: 89 101 115 0

@11589$string_No#:
x22853:	db "No", 0	; 3: 78 111 0

@11599$string_fileexists2022File2Eh223A2025s0A#:
x22856:	db "fileexists ", 34, "File.h", 34, ": %s", 10, 0	; 25: 102 105 108 101 101 120 105 115 116 115 32 34 70 105 108 101 46 104 34 58 32 37 115 10 0

@11600$string_File2Eh#:
x22881:	db "File.h", 0	; 7: 70 105 108 101 46 104 0

@11602$string_Yes#:
x22888:	db "Yes", 0	; 4: 89 101 115 0

@11603$string_No#:
x22892:	db "No", 0	; 3: 78 111 0

@11613$string_fileexists2022File2Ey223A2025s0A#:
x22895:	db "fileexists ", 34, "File.y", 34, ": %s", 10, 0	; 25: 102 105 108 101 101 120 105 115 116 115 32 34 70 105 108 101 46 121 34 58 32 37 115 10 0

@11614$string_File2Ey#:
x22920:	db "File.y", 0	; 7: 70 105 108 101 46 121 0

@11616$string_Yes#:
x22927:	db "Yes", 0	; 4: 89 101 115 0

@11617$string_No#:
x22931:	db "No", 0	; 3: 78 111 0

@11627$string_fileexists2022File2Ep223A2025s0A#:
x22934:	db "fileexists ", 34, "File.p", 34, ": %s", 10, 0	; 25: 102 105 108 101 101 120 105 115 116 115 32 34 70 105 108 101 46 112 34 58 32 37 115 10 0

@11628$string_File2Ep#:
x22959:	db "File.p", 0	; 7: 70 105 108 101 46 112 0

@11630$string_Yes#:
x22966:	db "Yes", 0	; 4: 89 101 115 0

@11631$string_No#:
x22970:	db "No", 0	; 3: 78 111 0

@11641$string_fileexists2022File2Ez223A2025s0A#:
x22973:	db "fileexists ", 34, "File.z", 34, ": %s", 10, 0	; 25: 102 105 108 101 101 120 105 115 116 115 32 34 70 105 108 101 46 122 34 58 32 37 115 10 0

@11642$string_File2Ez#:
x22998:	db "File.z", 0	; 7: 70 105 108 101 46 122 0

@11644$string_Yes#:
x23005:	db "Yes", 0	; 4: 89 101 115 0

@11645$string_No#:
x23009:	db "No", 0	; 3: 78 111 0

fopen:	; Assign index 0
x23012:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

fopen$1:	; SignedGreaterThanEqual 21 index 20
x23017:	cmp word [bp + 10], 20	; 4: 131 126 10 20
x23021:	jge fopen$21	; 2: 125 78

fopen$2:	; SignedMultiply £temporary706 index 29
x23023:	mov ax, [bp + 10]	; 3: 139 70 10
x23026:	xor dx, dx	; 2: 49 210
x23028:	imul word [@1725$int2$29#]	; 4: 247 46 75 90

fopen$3:	; BinaryAdd £temporary707 g_fileArray £temporary706
x23032:	mov si, g_fileArray	; 3: 190 102 13
x23035:	add si, ax	; 2: 1 198

fopen$4:	; Deref £temporary705 -> £temporary707 £temporary707 0

fopen$5:	; NotEqual 19 £temporary705.open$0 -> £temporary707 0
x23037:	cmp word [si], 0	; 3: 131 60 0
x23040:	jne fopen$19	; 2: 117 54

fopen$6:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

fopen$7:	; Parameter 12 name 6
x23042:	mov ax, [bp + 6]	; 3: 139 70 6
x23045:	mov [bp + 18], ax	; 3: 137 70 18

fopen$8:	; Parameter 12 mode 8
x23048:	mov ax, [bp + 8]	; 3: 139 70 8
x23051:	mov [bp + 20], ax	; 3: 137 70 20

fopen$9:	; SignedMultiply £temporary711 index 29
x23054:	mov ax, [bp + 10]	; 3: 139 70 10
x23057:	xor dx, dx	; 2: 49 210
x23059:	imul word [@1733$int2$29#]	; 4: 247 46 77 90

fopen$10:	; BinaryAdd £temporary712 g_fileArray £temporary711
x23063:	mov si, g_fileArray	; 3: 190 102 13
x23066:	add si, ax	; 2: 1 198

fopen$11:	; Deref £temporary710 -> £temporary712 £temporary712 0

fopen$12:	; address £temporary713 £temporary710 -> £temporary712

fopen$13:	; Parameter 12 £temporary713 10
x23068:	mov [bp + 22], si	; 3: 137 118 22

fopen$14:	; Call 12 freopen 0
x23071:	mov word [bp + 12], fopen$15	; 5: 199 70 12 45 90
x23076:	mov [bp + 14], bp	; 3: 137 110 14
x23079:	add bp, 12	; 3: 131 197 12
x23082:	nop	; 1: 144
x23083:	jmp freopen	; 2: 235 34

fopen$15:	; PostCall 12

fopen$16:	; GetReturnValue £temporary714

fopen$17:	; SetReturnValue £temporary714

fopen$18:	; Return £temporary714
x23085:	mov ax, [bp]	; 3: 139 70 0
x23088:	mov di, [bp + 4]	; 3: 139 126 4
x23091:	mov bp, [bp + 2]	; 3: 139 110 2
x23094:	jmp ax	; 2: 255 224

fopen$19:	; Increment index
x23096:	inc word [bp + 10]	; 3: 255 70 10

fopen$20:	; Goto 1
x23099:	jmp fopen$1	; 2: 235 172

fopen$21:	; SetReturnValue 0
x23101:	mov bx, 0	; 3: 187 0 0

fopen$22:	; Return 0
x23104:	mov ax, [bp]	; 3: 139 70 0
x23107:	mov di, [bp + 4]	; 3: 139 126 4
x23110:	mov bp, [bp + 2]	; 3: 139 110 2
x23113:	jmp ax	; 2: 255 224

fopen$23:	; FunctionEnd fopen

@1725$int2$29#:
x23115:	dw 29	; 2: 29 0

@1733$int2$29#:
x23117:	dw 29	; 2: 29 0

freopen:	; Assign handle -1
x23119:	mov word [bp + 12], -1	; 5: 199 70 12 255 255

freopen$1:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$2:	; Parameter 14 mode 6
x23124:	mov ax, [bp + 8]	; 3: 139 70 8
x23127:	mov [bp + 20], ax	; 3: 137 70 20

freopen$3:	; Parameter 14 string_r# 8
x23130:	mov word [bp + 22], @1748$string_r#	; 5: 199 70 22 243 92

freopen$4:	; Call 14 strcmp 0
x23135:	mov word [bp + 14], freopen$5	; 5: 199 70 14 109 90
x23140:	mov [bp + 16], bp	; 3: 137 110 16
x23143:	add bp, 14	; 3: 131 197 14
x23146:	jmp strcmp	; 3: 233 159 2

freopen$5:	; PostCall 14

freopen$6:	; GetReturnValue £temporary718

freopen$7:	; NotEqual 16 £temporary718 0
x23149:	cmp bx, 0	; 3: 131 251 0
x23152:	jne freopen$16	; 2: 117 30

freopen$8:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$9:	; Parameter 14 name 6
x23154:	mov ax, [bp + 6]	; 3: 139 70 6
x23157:	mov [bp + 20], ax	; 3: 137 70 20

freopen$10:	; Parameter 14 64 8
x23160:	mov byte [bp + 22], 64	; 4: 198 70 22 64

freopen$11:	; Call 14 fileopen 0
x23164:	mov word [bp + 14], freopen$12	; 5: 199 70 14 138 90
x23169:	mov [bp + 16], bp	; 3: 137 110 16
x23172:	add bp, 14	; 3: 131 197 14
x23175:	jmp @1702$fileopen	; 3: 233 240 2

freopen$12:	; PostCall 14

freopen$13:	; GetReturnValue £temporary720

freopen$14:	; Assign handle £temporary720
x23178:	mov [bp + 12], bx	; 3: 137 94 12

freopen$15:	; Goto 138
x23181:	jmp freopen$138	; 3: 233 252 1

freopen$16:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$17:	; Parameter 14 mode 6
x23184:	mov ax, [bp + 8]	; 3: 139 70 8
x23187:	mov [bp + 20], ax	; 3: 137 70 20

freopen$18:	; Parameter 14 string_w# 8
x23190:	mov word [bp + 22], @1757$string_w#	; 5: 199 70 22 245 92

freopen$19:	; Call 14 strcmp 0
x23195:	mov word [bp + 14], freopen$20	; 5: 199 70 14 169 90
x23200:	mov [bp + 16], bp	; 3: 137 110 16
x23203:	add bp, 14	; 3: 131 197 14
x23206:	jmp strcmp	; 3: 233 99 2

freopen$20:	; PostCall 14

freopen$21:	; GetReturnValue £temporary721

freopen$22:	; NotEqual 30 £temporary721 0
x23209:	cmp bx, 0	; 3: 131 251 0
x23212:	jne freopen$30	; 2: 117 26

freopen$23:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$24:	; Parameter 14 name 6
x23214:	mov ax, [bp + 6]	; 3: 139 70 6
x23217:	mov [bp + 20], ax	; 3: 137 70 20

freopen$25:	; Call 14 filecreate 0
x23220:	mov word [bp + 14], freopen$26	; 5: 199 70 14 194 90
x23225:	mov [bp + 16], bp	; 3: 137 110 16
x23228:	add bp, 14	; 3: 131 197 14
x23231:	jmp filecreate	; 3: 233 229 2

freopen$26:	; PostCall 14

freopen$27:	; GetReturnValue £temporary723

freopen$28:	; Assign handle £temporary723
x23234:	mov [bp + 12], bx	; 3: 137 94 12

freopen$29:	; Goto 138
x23237:	jmp freopen$138	; 3: 233 196 1

freopen$30:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$31:	; Parameter 14 mode 6
x23240:	mov ax, [bp + 8]	; 3: 139 70 8
x23243:	mov [bp + 20], ax	; 3: 137 70 20

freopen$32:	; Parameter 14 string_a# 8
x23246:	mov word [bp + 22], @1763$string_a#	; 5: 199 70 22 247 92

freopen$33:	; Call 14 strcmp 0
x23251:	mov word [bp + 14], freopen$34	; 5: 199 70 14 225 90
x23256:	mov [bp + 16], bp	; 3: 137 110 16
x23259:	add bp, 14	; 3: 131 197 14
x23262:	jmp strcmp	; 3: 233 43 2

freopen$34:	; PostCall 14

freopen$35:	; GetReturnValue £temporary724

freopen$36:	; NotEqual 59 £temporary724 0
x23265:	cmp bx, 0	; 3: 131 251 0
x23268:	jne freopen$59	; 2: 117 92

freopen$37:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$38:	; Parameter 14 name 6
x23270:	mov ax, [bp + 6]	; 3: 139 70 6
x23273:	mov [bp + 20], ax	; 3: 137 70 20

freopen$39:	; Parameter 14 65 8
x23276:	mov byte [bp + 22], 65	; 4: 198 70 22 65

freopen$40:	; Call 14 fileopen 0
x23280:	mov word [bp + 14], freopen$41	; 5: 199 70 14 254 90
x23285:	mov [bp + 16], bp	; 3: 137 110 16
x23288:	add bp, 14	; 3: 131 197 14
x23291:	jmp @1702$fileopen	; 3: 233 124 2

freopen$41:	; PostCall 14

freopen$42:	; GetReturnValue £temporary726

freopen$43:	; Assign handle £temporary726
x23294:	mov [bp + 12], bx	; 3: 137 94 12

freopen$44:	; Equal 52 handle -1
x23297:	cmp word [bp + 12], -1	; 4: 131 126 12 255
x23301:	je freopen$52	; 2: 116 33

freopen$45:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$46:	; Parameter 14 stream 6
x23303:	mov ax, [bp + 10]	; 3: 139 70 10
x23306:	mov [bp + 20], ax	; 3: 137 70 20

freopen$47:	; Parameter 14 0 8
x23309:	mov word [bp + 22], 0	; 5: 199 70 22 0 0

freopen$48:	; Parameter 14 2 10
x23314:	mov word [bp + 24], 2	; 5: 199 70 24 2 0

freopen$49:	; Call 14 fseek 0
x23319:	mov word [bp + 14], freopen$50	; 5: 199 70 14 37 91
x23324:	mov [bp + 16], bp	; 3: 137 110 16
x23327:	add bp, 14	; 3: 131 197 14
x23330:	jmp fseek	; 3: 233 179 2

freopen$50:	; PostCall 14

freopen$51:	; Goto 138
x23333:	jmp freopen$138	; 3: 233 100 1

freopen$52:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$53:	; Parameter 14 name 6
x23336:	mov ax, [bp + 6]	; 3: 139 70 6
x23339:	mov [bp + 20], ax	; 3: 137 70 20

freopen$54:	; Call 14 filecreate 0
x23342:	mov word [bp + 14], freopen$55	; 5: 199 70 14 60 91
x23347:	mov [bp + 16], bp	; 3: 137 110 16
x23350:	add bp, 14	; 3: 131 197 14
x23353:	jmp filecreate	; 3: 233 107 2

freopen$55:	; PostCall 14

freopen$56:	; GetReturnValue £temporary729

freopen$57:	; Assign handle £temporary729
x23356:	mov [bp + 12], bx	; 3: 137 94 12

freopen$58:	; Goto 138
x23359:	jmp freopen$138	; 3: 233 74 1

freopen$59:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$60:	; Parameter 14 mode 6
x23362:	mov ax, [bp + 8]	; 3: 139 70 8
x23365:	mov [bp + 20], ax	; 3: 137 70 20

freopen$61:	; Parameter 14 string_r2B# 8
x23368:	mov word [bp + 22], @1783$string_r2B#	; 5: 199 70 22 249 92

freopen$62:	; Call 14 strcmp 0
x23373:	mov word [bp + 14], freopen$63	; 5: 199 70 14 91 91
x23378:	mov [bp + 16], bp	; 3: 137 110 16
x23381:	add bp, 14	; 3: 131 197 14
x23384:	jmp strcmp	; 3: 233 177 1

freopen$63:	; PostCall 14

freopen$64:	; GetReturnValue £temporary730

freopen$65:	; NotEqual 82 £temporary730 0
x23387:	cmp bx, 0	; 3: 131 251 0
x23390:	jne freopen$82	; 2: 117 72

freopen$66:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$67:	; Parameter 14 string_r2B10A# 6
x23392:	mov word [bp + 20], @1788$string_r2B10A#	; 5: 199 70 20 252 92

freopen$68:	; Call 14 printf 0
x23397:	mov word [bp + 14], freopen$69	; 5: 199 70 14 117 91
x23402:	mov [bp + 16], bp	; 3: 137 110 16
x23405:	add bp, 14	; 3: 131 197 14
x23408:	mov di, bp	; 2: 137 239
x23410:	jmp printf	; 3: 233 143 177

freopen$69:	; PostCall 14

freopen$70:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$71:	; Parameter 14 name 6
x23413:	mov ax, [bp + 6]	; 3: 139 70 6
x23416:	mov [bp + 20], ax	; 3: 137 70 20

freopen$72:	; Parameter 14 66 8
x23419:	mov byte [bp + 22], 66	; 4: 198 70 22 66

freopen$73:	; Call 14 fileopen 0
x23423:	mov word [bp + 14], freopen$74	; 5: 199 70 14 141 91
x23428:	mov [bp + 16], bp	; 3: 137 110 16
x23431:	add bp, 14	; 3: 131 197 14
x23434:	jmp @1702$fileopen	; 3: 233 237 1

freopen$74:	; PostCall 14

freopen$75:	; GetReturnValue £temporary733

freopen$76:	; Assign handle £temporary733
x23437:	mov [bp + 12], bx	; 3: 137 94 12

freopen$77:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$78:	; Parameter 14 string_r2B20A# 6
x23440:	mov word [bp + 20], @1794$string_r2B20A#	; 5: 199 70 20 1 93

freopen$79:	; Call 14 printf 0
x23445:	mov word [bp + 14], freopen$80	; 5: 199 70 14 165 91
x23450:	mov [bp + 16], bp	; 3: 137 110 16
x23453:	add bp, 14	; 3: 131 197 14
x23456:	mov di, bp	; 2: 137 239
x23458:	jmp printf	; 3: 233 95 177

freopen$80:	; PostCall 14

freopen$81:	; Goto 138
x23461:	jmp freopen$138	; 3: 233 228 0

freopen$82:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$83:	; Parameter 14 mode 6
x23464:	mov ax, [bp + 8]	; 3: 139 70 8
x23467:	mov [bp + 20], ax	; 3: 137 70 20

freopen$84:	; Parameter 14 string_w2B# 8
x23470:	mov word [bp + 22], @1796$string_w2B#	; 5: 199 70 22 6 93

freopen$85:	; Call 14 strcmp 0
x23475:	mov word [bp + 14], freopen$86	; 5: 199 70 14 193 91
x23480:	mov [bp + 16], bp	; 3: 137 110 16
x23483:	add bp, 14	; 3: 131 197 14
x23486:	jmp strcmp	; 3: 233 75 1

freopen$86:	; PostCall 14

freopen$87:	; GetReturnValue £temporary735

freopen$88:	; NotEqual 110 £temporary735 0
x23489:	cmp bx, 0	; 3: 131 251 0
x23492:	jne freopen$110	; 2: 117 80

freopen$89:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$90:	; Parameter 14 name 6
x23494:	mov ax, [bp + 6]	; 3: 139 70 6
x23497:	mov [bp + 20], ax	; 3: 137 70 20

freopen$91:	; Call 14 fileexists 0
x23500:	mov word [bp + 14], freopen$92	; 5: 199 70 14 218 91
x23505:	mov [bp + 16], bp	; 3: 137 110 16
x23508:	add bp, 14	; 3: 131 197 14
x23511:	jmp fileexists	; 3: 233 73 2

freopen$92:	; PostCall 14

freopen$93:	; GetReturnValue £temporary737

freopen$94:	; Equal 103 £temporary737 0
x23514:	cmp bx, 0	; 3: 131 251 0
x23517:	je freopen$103	; 2: 116 30

freopen$95:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$96:	; Parameter 14 name 6
x23519:	mov ax, [bp + 6]	; 3: 139 70 6
x23522:	mov [bp + 20], ax	; 3: 137 70 20

freopen$97:	; Parameter 14 66 8
x23525:	mov byte [bp + 22], 66	; 4: 198 70 22 66

freopen$98:	; Call 14 fileopen 0
x23529:	mov word [bp + 14], freopen$99	; 5: 199 70 14 247 91
x23534:	mov [bp + 16], bp	; 3: 137 110 16
x23537:	add bp, 14	; 3: 131 197 14
x23540:	jmp @1702$fileopen	; 3: 233 131 1

freopen$99:	; PostCall 14

freopen$100:	; GetReturnValue £temporary738

freopen$101:	; Assign handle £temporary738
x23543:	mov [bp + 12], bx	; 3: 137 94 12

freopen$102:	; Goto 138
x23546:	jmp freopen$138	; 3: 233 143 0

freopen$103:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$104:	; Parameter 14 name 6
x23549:	mov ax, [bp + 6]	; 3: 139 70 6
x23552:	mov [bp + 20], ax	; 3: 137 70 20

freopen$105:	; Call 14 filecreate 0
x23555:	mov word [bp + 14], freopen$106	; 5: 199 70 14 17 92
x23560:	mov [bp + 16], bp	; 3: 137 110 16
x23563:	add bp, 14	; 3: 131 197 14
x23566:	jmp filecreate	; 3: 233 150 1

freopen$106:	; PostCall 14

freopen$107:	; GetReturnValue £temporary739

freopen$108:	; Assign handle £temporary739
x23569:	mov [bp + 12], bx	; 3: 137 94 12

freopen$109:	; Goto 138
x23572:	jmp freopen$138	; 2: 235 118

freopen$110:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$111:	; Parameter 14 mode 6
x23574:	mov ax, [bp + 8]	; 3: 139 70 8
x23577:	mov [bp + 20], ax	; 3: 137 70 20

freopen$112:	; Parameter 14 string_a2B# 8
x23580:	mov word [bp + 22], @1809$string_a2B#	; 5: 199 70 22 9 93

freopen$113:	; Call 14 strcmp 0
x23585:	mov word [bp + 14], freopen$114	; 5: 199 70 14 47 92
x23590:	mov [bp + 16], bp	; 3: 137 110 16
x23593:	add bp, 14	; 3: 131 197 14
x23596:	jmp strcmp	; 3: 233 221 0

freopen$114:	; PostCall 14

freopen$115:	; GetReturnValue £temporary741

freopen$116:	; NotEqual 138 £temporary741 0
x23599:	cmp bx, 0	; 3: 131 251 0
x23602:	jne freopen$138	; 2: 117 88

freopen$117:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$118:	; Parameter 14 name 6
x23604:	mov ax, [bp + 6]	; 3: 139 70 6
x23607:	mov [bp + 20], ax	; 3: 137 70 20

freopen$119:	; Parameter 14 66 8
x23610:	mov byte [bp + 22], 66	; 4: 198 70 22 66

freopen$120:	; Call 14 fileopen 0
x23614:	mov word [bp + 14], freopen$121	; 5: 199 70 14 76 92
x23619:	mov [bp + 16], bp	; 3: 137 110 16
x23622:	add bp, 14	; 3: 131 197 14
x23625:	jmp @1702$fileopen	; 3: 233 46 1

freopen$121:	; PostCall 14

freopen$122:	; GetReturnValue £temporary743

freopen$123:	; Assign handle £temporary743
x23628:	mov [bp + 12], bx	; 3: 137 94 12

freopen$124:	; Equal 132 handle -1
x23631:	cmp word [bp + 12], -1	; 4: 131 126 12 255
x23635:	je freopen$132	; 2: 116 32

freopen$125:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$126:	; Parameter 14 stream 6
x23637:	mov ax, [bp + 10]	; 3: 139 70 10
x23640:	mov [bp + 20], ax	; 3: 137 70 20

freopen$127:	; Parameter 14 0 8
x23643:	mov word [bp + 22], 0	; 5: 199 70 22 0 0

freopen$128:	; Parameter 14 2 10
x23648:	mov word [bp + 24], 2	; 5: 199 70 24 2 0

freopen$129:	; Call 14 fseek 0
x23653:	mov word [bp + 14], freopen$130	; 5: 199 70 14 115 92
x23658:	mov [bp + 16], bp	; 3: 137 110 16
x23661:	add bp, 14	; 3: 131 197 14
x23664:	jmp fseek	; 3: 233 101 1

freopen$130:	; PostCall 14

freopen$131:	; Goto 138
x23667:	jmp freopen$138	; 2: 235 23

freopen$132:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$133:	; Parameter 14 name 6
x23669:	mov ax, [bp + 6]	; 3: 139 70 6
x23672:	mov [bp + 20], ax	; 3: 137 70 20

freopen$134:	; Call 14 filecreate 0
x23675:	mov word [bp + 14], freopen$135	; 5: 199 70 14 137 92
x23680:	mov [bp + 16], bp	; 3: 137 110 16
x23683:	add bp, 14	; 3: 131 197 14
x23686:	jmp filecreate	; 3: 233 30 1

freopen$135:	; PostCall 14

freopen$136:	; GetReturnValue £temporary746

freopen$137:	; Assign handle £temporary746
x23689:	mov [bp + 12], bx	; 3: 137 94 12

freopen$138:	; Equal 155 handle -1
x23692:	cmp word [bp + 12], -1	; 4: 131 126 12 255
x23696:	je freopen$155	; 2: 116 76

freopen$139:	; Deref £temporary748 -> stream stream 0
x23698:	mov si, [bp + 10]	; 3: 139 118 10

freopen$140:	; Assign £temporary748 -> stream 1
x23701:	mov word [si], 1	; 4: 199 4 1 0

freopen$141:	; Deref £temporary749 -> stream stream 2
x23705:	mov si, [bp + 10]	; 3: 139 118 10

freopen$142:	; Assign £temporary749 -> stream handle
x23708:	mov ax, [bp + 12]	; 3: 139 70 12
x23711:	mov [si + 2], ax	; 3: 137 68 2

freopen$143:	; Deref £temporary750 -> stream stream 25
x23714:	mov si, [bp + 10]	; 3: 139 118 10

freopen$144:	; Assign £temporary750 -> stream 0
x23717:	mov word [si + 25], 0	; 5: 199 68 25 0 0

freopen$145:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$146:	; Deref £temporary751 -> stream stream 4
x23722:	mov si, [bp + 10]	; 3: 139 118 10

freopen$147:	; Parameter 14 £temporary751 -> stream 6
x23725:	mov [bp + 20], si	; 3: 137 118 20
x23728:	add word [bp + 20], 4	; 4: 131 70 20 4

freopen$148:	; Parameter 14 name 8
x23732:	mov ax, [bp + 6]	; 3: 139 70 6
x23735:	mov [bp + 22], ax	; 3: 137 70 22

freopen$149:	; Call 14 strcpy 0
x23738:	mov word [bp + 14], freopen$150	; 5: 199 70 14 200 92
x23743:	mov [bp + 16], bp	; 3: 137 110 16
x23746:	add bp, 14	; 3: 131 197 14
x23749:	jmp strcpy	; 3: 233 121 1

freopen$150:	; PostCall 14

freopen$151:	; Deref £temporary753 -> stream stream 27
x23752:	mov si, [bp + 10]	; 3: 139 118 10

freopen$152:	; Assign £temporary753 -> stream 0
x23755:	mov word [si + 27], 0	; 5: 199 68 27 0 0

freopen$153:	; SetReturnValue stream
x23760:	mov bx, [bp + 10]	; 3: 139 94 10

freopen$154:	; Return stream
x23763:	mov ax, [bp]	; 3: 139 70 0
x23766:	mov di, [bp + 4]	; 3: 139 126 4
x23769:	mov bp, [bp + 2]	; 3: 139 110 2
x23772:	jmp ax	; 2: 255 224

freopen$155:	; Deref £temporary754 -> stream stream 0
x23774:	mov si, [bp + 10]	; 3: 139 118 10

freopen$156:	; Assign £temporary754 -> stream 0
x23777:	mov word [si], 0	; 4: 199 4 0 0

freopen$157:	; SetReturnValue 0
x23781:	mov bx, 0	; 3: 187 0 0

freopen$158:	; Return 0
x23784:	mov ax, [bp]	; 3: 139 70 0
x23787:	mov di, [bp + 4]	; 3: 139 126 4
x23790:	mov bp, [bp + 2]	; 3: 139 110 2
x23793:	jmp ax	; 2: 255 224

freopen$159:	; FunctionEnd freopen

@1748$string_r#:
x23795:	db "r", 0	; 2: 114 0

@1757$string_w#:
x23797:	db "w", 0	; 2: 119 0

@1763$string_a#:
x23799:	db "a", 0	; 2: 97 0

@1783$string_r2B#:
x23801:	db "r+", 0	; 3: 114 43 0

@1788$string_r2B10A#:
x23804:	db "r+1", 10, 0	; 5: 114 43 49 10 0

@1794$string_r2B20A#:
x23809:	db "r+2", 10, 0	; 5: 114 43 50 10 0

@1796$string_w2B#:
x23814:	db "w+", 0	; 3: 119 43 0

@1809$string_a2B#:
x23817:	db "a+", 0	; 3: 97 43 0

strcmp:	; Assign index 0
x23820:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strcmp$1:	; BinaryAdd £temporary3755 left index
x23825:	mov si, [bp + 6]	; 3: 139 118 6
x23828:	add si, [bp + 10]	; 3: 3 118 10

strcmp$2:	; Deref £temporary3754 -> £temporary3755 £temporary3755 0

strcmp$3:	; NotEqual 9 £temporary3754 -> £temporary3755 0
x23831:	cmp byte [si], 0	; 3: 128 60 0
x23834:	jne strcmp$9	; 2: 117 25

strcmp$4:	; BinaryAdd £temporary3758 right index
x23836:	mov si, [bp + 8]	; 3: 139 118 8
x23839:	add si, [bp + 10]	; 3: 3 118 10

strcmp$5:	; Deref £temporary3757 -> £temporary3758 £temporary3758 0

strcmp$6:	; NotEqual 9 £temporary3757 -> £temporary3758 0
x23842:	cmp byte [si], 0	; 3: 128 60 0
x23845:	jne strcmp$9	; 2: 117 14

strcmp$7:	; SetReturnValue 0
x23847:	mov bx, 0	; 3: 187 0 0

strcmp$8:	; Return 0
x23850:	mov ax, [bp]	; 3: 139 70 0
x23853:	mov di, [bp + 4]	; 3: 139 126 4
x23856:	mov bp, [bp + 2]	; 3: 139 110 2
x23859:	jmp ax	; 2: 255 224

strcmp$9:	; BinaryAdd £temporary3762 left index
x23861:	mov si, [bp + 6]	; 3: 139 118 6
x23864:	add si, [bp + 10]	; 3: 3 118 10

strcmp$10:	; Deref £temporary3761 -> £temporary3762 £temporary3762 0

strcmp$11:	; BinaryAdd £temporary3764 right index
x23867:	mov di, [bp + 8]	; 3: 139 126 8
x23870:	add di, [bp + 10]	; 3: 3 126 10

strcmp$12:	; Deref £temporary3763 -> £temporary3764 £temporary3764 0

strcmp$13:	; SignedGreaterThanEqual 16 £temporary3761 -> £temporary3762 £temporary3763 -> £temporary3764
x23873:	mov al, [di]	; 2: 138 5
x23875:	cmp [si], al	; 2: 56 4
x23877:	jge strcmp$16	; 2: 125 14

strcmp$14:	; SetReturnValue -1
x23879:	mov bx, -1	; 3: 187 255 255

strcmp$15:	; Return -1
x23882:	mov ax, [bp]	; 3: 139 70 0
x23885:	mov di, [bp + 4]	; 3: 139 126 4
x23888:	mov bp, [bp + 2]	; 3: 139 110 2
x23891:	jmp ax	; 2: 255 224

strcmp$16:	; BinaryAdd £temporary3767 left index
x23893:	mov si, [bp + 6]	; 3: 139 118 6
x23896:	add si, [bp + 10]	; 3: 3 118 10

strcmp$17:	; Deref £temporary3766 -> £temporary3767 £temporary3767 0

strcmp$18:	; BinaryAdd £temporary3769 right index
x23899:	mov di, [bp + 8]	; 3: 139 126 8
x23902:	add di, [bp + 10]	; 3: 3 126 10

strcmp$19:	; Deref £temporary3768 -> £temporary3769 £temporary3769 0

strcmp$20:	; SignedLessThanEqual 23 £temporary3766 -> £temporary3767 £temporary3768 -> £temporary3769
x23905:	mov al, [di]	; 2: 138 5
x23907:	cmp [si], al	; 2: 56 4
x23909:	jle strcmp$23	; 2: 126 14

strcmp$21:	; SetReturnValue 1
x23911:	mov bx, 1	; 3: 187 1 0

strcmp$22:	; Return 1
x23914:	mov ax, [bp]	; 3: 139 70 0
x23917:	mov di, [bp + 4]	; 3: 139 126 4
x23920:	mov bp, [bp + 2]	; 3: 139 110 2
x23923:	jmp ax	; 2: 255 224

strcmp$23:	; Increment index
x23925:	inc word [bp + 10]	; 3: 255 70 10

strcmp$24:	; Goto 1
x23928:	jmp strcmp$1	; 2: 235 151

strcmp$25:	; FunctionEnd strcmp

@1702$fileopen:	; AssignRegister ah 61
x23930:	mov ah, 61	; 2: 180 61

@1702$fileopen$1:	; AssignRegister al mode
x23932:	mov al, [bp + 8]	; 3: 138 70 8

@1702$fileopen$2:	; AssignRegister dx name
x23935:	mov dx, [bp + 6]	; 3: 139 86 6

@1702$fileopen$3:	; Interrupt 33
x23938:	int 33	; 2: 205 33

@1702$fileopen$4:	; NotCarry 8
x23940:	jnc @1702$fileopen$8	; 2: 115 20

@1702$fileopen$5:	; Assign errno 9
x23942:	mov word [errno], 9	; 6: 199 6 230 10 9 0

@1702$fileopen$6:	; SetReturnValue -1
x23948:	mov bx, -1	; 3: 187 255 255

@1702$fileopen$7:	; Return -1
x23951:	mov ax, [bp]	; 3: 139 70 0
x23954:	mov di, [bp + 4]	; 3: 139 126 4
x23957:	mov bp, [bp + 2]	; 3: 139 110 2
x23960:	jmp ax	; 2: 255 224

@1702$fileopen$8:	; InspectRegister £temporary702 ax

@1702$fileopen$9:	; SetReturnValue £temporary702
x23962:	mov bx, ax	; 2: 137 195

@1702$fileopen$10:	; Return £temporary702
x23964:	mov ax, [bp]	; 3: 139 70 0
x23967:	mov di, [bp + 4]	; 3: 139 126 4
x23970:	mov bp, [bp + 2]	; 3: 139 110 2
x23973:	jmp ax	; 2: 255 224

@1702$fileopen$11:	; FunctionEnd fileopen

filecreate:	; AssignRegister ah 60
x23975:	mov ah, 60	; 2: 180 60

filecreate$1:	; AssignRegister cx 0
x23977:	mov cx, 0	; 3: 185 0 0

filecreate$2:	; AssignRegister dx name
x23980:	mov dx, [bp + 6]	; 3: 139 86 6

filecreate$3:	; Interrupt 33
x23983:	int 33	; 2: 205 33

filecreate$4:	; InspectRegister £temporary680 ax

filecreate$5:	; Assign handle £temporary680
x23985:	mov [bp + 8], ax	; 3: 137 70 8

filecreate$6:	; NotCarry 10
x23988:	jnc filecreate$10	; 2: 115 20

filecreate$7:	; Assign errno 9
x23990:	mov word [errno], 9	; 6: 199 6 230 10 9 0

filecreate$8:	; SetReturnValue -1
x23996:	mov bx, -1	; 3: 187 255 255

filecreate$9:	; Return -1
x23999:	mov ax, [bp]	; 3: 139 70 0
x24002:	mov di, [bp + 4]	; 3: 139 126 4
x24005:	mov bp, [bp + 2]	; 3: 139 110 2
x24008:	jmp ax	; 2: 255 224

filecreate$10:	; SetReturnValue handle
x24010:	mov bx, [bp + 8]	; 3: 139 94 8

filecreate$11:	; Return handle
x24013:	mov ax, [bp]	; 3: 139 70 0
x24016:	mov di, [bp + 4]	; 3: 139 126 4
x24019:	mov bp, [bp + 2]	; 3: 139 110 2
x24022:	jmp ax	; 2: 255 224

filecreate$12:	; FunctionEnd filecreate

fseek:	; IntegralToIntegral £temporary932 origin
x24024:	mov ax, [bp + 10]	; 3: 139 70 10
x24027:	cmp ax, 0	; 3: 131 248 0
x24030:	jge fseek$1	; 2: 125 4
x24032:	neg ax	; 2: 247 216
x24034:	neg al	; 2: 246 216

fseek$1:	; AssignRegister al £temporary932

fseek$2:	; AssignRegister ah 66
x24036:	mov ah, 66	; 2: 180 66

fseek$3:	; Deref £temporary935 -> stream stream 2
x24038:	mov si, [bp + 6]	; 3: 139 118 6

fseek$4:	; AssignRegister bx £temporary935 -> stream
x24041:	mov bx, [si + 2]	; 3: 139 92 2

fseek$5:	; AssignRegister cx 0
x24044:	mov cx, 0	; 3: 185 0 0

fseek$6:	; IntegralToIntegral £temporary938 offset
x24047:	mov dx, [bp + 8]	; 3: 139 86 8

fseek$7:	; AssignRegister dx £temporary938

fseek$8:	; Interrupt 33
x24050:	int 33	; 2: 205 33

fseek$9:	; Carry 16
x24052:	jc fseek$16	; 2: 114 23

fseek$10:	; Deref £temporary941 -> stream stream 23
x24054:	mov si, [bp + 6]	; 3: 139 118 6

fseek$11:	; InspectRegister £temporary942 ax

fseek$12:	; Assign £temporary941 -> stream £temporary942
x24057:	mov [si + 23], ax	; 3: 137 68 23

fseek$13:	; Deref £temporary943 -> stream stream 23
x24060:	mov si, [bp + 6]	; 3: 139 118 6

fseek$14:	; SetReturnValue £temporary943 -> stream
x24063:	mov bx, [si + 23]	; 3: 139 92 23

fseek$15:	; Return £temporary943 -> stream
x24066:	mov ax, [bp]	; 3: 139 70 0
x24069:	mov di, [bp + 4]	; 3: 139 126 4
x24072:	mov bp, [bp + 2]	; 3: 139 110 2
x24075:	jmp ax	; 2: 255 224

fseek$16:	; Deref £temporary944 -> stream stream 21
x24077:	mov si, [bp + 6]	; 3: 139 118 6

fseek$17:	; Assign £temporary944 -> stream 15
x24080:	mov word [si + 21], 15	; 5: 199 68 21 15 0

fseek$18:	; SetReturnValue -1
x24085:	mov bx, -1	; 3: 187 255 255

fseek$19:	; Return -1
x24088:	mov ax, [bp]	; 3: 139 70 0
x24091:	mov di, [bp + 4]	; 3: 139 126 4
x24094:	mov bp, [bp + 2]	; 3: 139 110 2
x24097:	jmp ax	; 2: 255 224

fseek$20:	; FunctionEnd fseek

fileexists:	; AssignRegister ah 67
x24099:	mov ah, 67	; 2: 180 67

fileexists$1:	; AssignRegister al 0
x24101:	mov al, 0	; 2: 176 0

fileexists$2:	; AssignRegister dx name
x24103:	mov dx, [bp + 6]	; 3: 139 86 6

fileexists$3:	; Interrupt 33
x24106:	int 33	; 2: 205 33

fileexists$4:	; Carry 7
x24108:	jc fileexists$7	; 2: 114 5

fileexists$5:	; Assign £temporary697 1
x24110:	mov bx, 1	; 3: 187 1 0

fileexists$6:	; Goto 8
x24113:	jmp fileexists$8	; 2: 235 3

fileexists$7:	; Assign £temporary697 0
x24115:	mov bx, 0	; 3: 187 0 0

fileexists$8:	; SetReturnValue £temporary697

fileexists$9:	; Return £temporary697
x24118:	mov ax, [bp]	; 3: 139 70 0
x24121:	mov di, [bp + 4]	; 3: 139 126 4
x24124:	mov bp, [bp + 2]	; 3: 139 110 2
x24127:	jmp ax	; 2: 255 224

fileexists$10:	; FunctionEnd fileexists

strcpy:	; Assign index 0
x24129:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strcpy$1:	; BinaryAdd £temporary3698 source index
x24134:	mov si, [bp + 8]	; 3: 139 118 8
x24137:	add si, [bp + 10]	; 3: 3 118 10

strcpy$2:	; Deref £temporary3697 -> £temporary3698 £temporary3698 0

strcpy$3:	; Equal 11 £temporary3697 -> £temporary3698 0
x24140:	cmp byte [si], 0	; 3: 128 60 0
x24143:	je strcpy$11	; 2: 116 21

strcpy$4:	; BinaryAdd £temporary3702 target index
x24145:	mov si, [bp + 6]	; 3: 139 118 6
x24148:	add si, [bp + 10]	; 3: 3 118 10

strcpy$5:	; Deref £temporary3701 -> £temporary3702 £temporary3702 0

strcpy$6:	; BinaryAdd £temporary3704 source index
x24151:	mov di, [bp + 8]	; 3: 139 126 8
x24154:	add di, [bp + 10]	; 3: 3 126 10

strcpy$7:	; Deref £temporary3703 -> £temporary3704 £temporary3704 0

strcpy$8:	; Assign £temporary3701 -> £temporary3702 £temporary3703 -> £temporary3704
x24157:	mov al, [di]	; 2: 138 5
x24159:	mov [si], al	; 2: 136 4

strcpy$9:	; Increment index
x24161:	inc word [bp + 10]	; 3: 255 70 10

strcpy$10:	; Goto 1
x24164:	jmp strcpy$1	; 2: 235 224

strcpy$11:	; BinaryAdd £temporary3706 target index
x24166:	mov si, [bp + 6]	; 3: 139 118 6
x24169:	add si, [bp + 10]	; 3: 3 118 10

strcpy$12:	; Deref £temporary3705 -> £temporary3706 £temporary3706 0

strcpy$13:	; Assign £temporary3705 -> £temporary3706 0
x24172:	mov byte [si], 0	; 3: 198 4 0

strcpy$14:	; SetReturnValue target
x24175:	mov bx, [bp + 6]	; 3: 139 94 6

strcpy$15:	; Return target
x24178:	mov ax, [bp]	; 3: 139 70 0
x24181:	mov di, [bp + 4]	; 3: 139 126 4
x24184:	mov bp, [bp + 2]	; 3: 139 110 2
x24187:	jmp ax	; 2: 255 224

strcpy$16:	; FunctionEnd strcpy

fprintf:	; address £temporary2213 format
x24189:	mov si, bp	; 2: 137 238
x24191:	add si, 8	; 3: 131 198 8

fprintf$1:	; IntegralToIntegral £temporary2214 £temporary2213

fprintf$2:	; BinaryAdd arg_list £temporary2214 2
x24194:	add si, 2	; 3: 131 198 2
x24197:	mov [di + 10], si	; 3: 137 117 10

fprintf$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

fprintf$4:	; Parameter 12 outStream 6
x24200:	mov ax, [bp + 6]	; 3: 139 70 6
x24203:	mov [di + 18], ax	; 3: 137 69 18

fprintf$5:	; Parameter 12 format 8
x24206:	mov ax, [bp + 8]	; 3: 139 70 8
x24209:	mov [di + 20], ax	; 3: 137 69 20

fprintf$6:	; Parameter 12 arg_list 10
x24212:	mov ax, [di + 10]	; 3: 139 69 10
x24215:	mov [di + 22], ax	; 3: 137 69 22

fprintf$7:	; Call 12 vfprintf 0
x24218:	mov word [di + 12], fprintf$8	; 5: 199 69 12 173 94
x24223:	mov [di + 14], bp	; 3: 137 109 14
x24226:	mov [di + 16], di	; 3: 137 125 16
x24229:	add di, 12	; 3: 131 199 12
x24232:	mov bp, di	; 2: 137 253
x24234:	jmp vfprintf	; 3: 233 253 176

fprintf$8:	; PostCall 12

fprintf$9:	; GetReturnValue £temporary2216

fprintf$10:	; SetReturnValue £temporary2216

fprintf$11:	; Return £temporary2216
x24237:	mov ax, [bp]	; 3: 139 70 0
x24240:	mov di, [bp + 4]	; 3: 139 126 4
x24243:	mov bp, [bp + 2]	; 3: 139 110 2
x24246:	jmp ax	; 2: 255 224

fprintf$12:	; FunctionEnd fprintf

abort:	; AssignRegister ah 76
x24248:	mov ah, 76	; 2: 180 76

abort$1:	; AssignRegister al 255
x24250:	mov al, 255	; 2: 176 255

abort$2:	; Interrupt 33
x24252:	int 33	; 2: 205 33

abort$3:	; Return 0
x24254:	mov ax, [bp]	; 3: 139 70 0
x24257:	mov di, [bp + 4]	; 3: 139 126 4
x24260:	mov bp, [bp + 2]	; 3: 139 110 2
x24263:	jmp ax	; 2: 255 224

abort$4:	; FunctionEnd abort

feof:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

feof$1:	; Parameter 8 stream 6
x24265:	mov ax, [bp + 6]	; 3: 139 70 6
x24268:	mov [bp + 14], ax	; 3: 137 70 14

feof$2:	; Parameter 8 0 8
x24271:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

feof$3:	; Parameter 8 1 10
x24276:	mov word [bp + 18], 1	; 5: 199 70 18 1 0

feof$4:	; Call 8 fseek 0
x24281:	mov word [bp + 8], feof$5	; 5: 199 70 8 231 94
x24286:	mov [bp + 10], bp	; 3: 137 110 10
x24289:	add bp, 8	; 3: 131 197 8
x24292:	jmp fseek	; 3: 233 241 254

feof$5:	; PostCall 8

feof$6:	; GetReturnValue £temporary965

feof$7:	; IntegralToIntegral £temporary966 £temporary965
x24295:	and ebx, 65535	; 7: 102 129 227 255 255 0 0

feof$8:	; Assign currPosition £temporary966
x24302:	mov [bp + 8], ebx	; 4: 102 137 94 8

feof$9:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

feof$10:	; Parameter 12 stream 6
x24306:	mov ax, [bp + 6]	; 3: 139 70 6
x24309:	mov [bp + 18], ax	; 3: 137 70 18

feof$11:	; Parameter 12 0 8
x24312:	mov word [bp + 20], 0	; 5: 199 70 20 0 0

feof$12:	; Parameter 12 2 10
x24317:	mov word [bp + 22], 2	; 5: 199 70 22 2 0

feof$13:	; Call 12 fseek 0
x24322:	mov word [bp + 12], feof$14	; 5: 199 70 12 16 95
x24327:	mov [bp + 14], bp	; 3: 137 110 14
x24330:	add bp, 12	; 3: 131 197 12
x24333:	jmp fseek	; 3: 233 200 254

feof$14:	; PostCall 12

feof$15:	; GetReturnValue £temporary967

feof$16:	; IntegralToIntegral £temporary968 £temporary967
x24336:	and ebx, 65535	; 7: 102 129 227 255 255 0 0

feof$17:	; Assign lastPosition £temporary968
x24343:	mov [bp + 12], ebx	; 4: 102 137 94 12

feof$18:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

feof$19:	; Parameter 16 stream 6
x24347:	mov ax, [bp + 6]	; 3: 139 70 6
x24350:	mov [bp + 22], ax	; 3: 137 70 22

feof$20:	; IntegralToIntegral £temporary969 currPosition
x24353:	mov eax, [bp + 8]	; 4: 102 139 70 8

feof$21:	; Parameter 16 £temporary969 8
x24357:	mov [bp + 24], ax	; 3: 137 70 24

feof$22:	; Parameter 16 0 10
x24360:	mov word [bp + 26], 0	; 5: 199 70 26 0 0

feof$23:	; Call 16 fseek 0
x24365:	mov word [bp + 16], feof$24	; 5: 199 70 16 59 95
x24370:	mov [bp + 18], bp	; 3: 137 110 18
x24373:	add bp, 16	; 3: 131 197 16
x24376:	jmp fseek	; 3: 233 157 254

feof$24:	; PostCall 16

feof$25:	; NotEqual 28 currPosition lastPosition
x24379:	mov eax, [bp + 12]	; 4: 102 139 70 12
x24383:	cmp [bp + 8], eax	; 4: 102 57 70 8
x24387:	jne feof$28	; 2: 117 5

feof$26:	; Assign £temporary972 1
x24389:	mov ax, 1	; 3: 184 1 0

feof$27:	; Goto 29
x24392:	jmp feof$29	; 2: 235 3

feof$28:	; Assign £temporary972 0
x24394:	mov ax, 0	; 3: 184 0 0

feof$29:	; Assign endOfFile £temporary972
x24397:	mov [bp + 16], ax	; 3: 137 70 16

feof$30:	; SetReturnValue endOfFile
x24400:	mov bx, [bp + 16]	; 3: 139 94 16

feof$31:	; Return endOfFile
x24403:	mov ax, [bp]	; 3: 139 70 0
x24406:	mov di, [bp + 4]	; 3: 139 126 4
x24409:	mov bp, [bp + 2]	; 3: 139 110 2
x24412:	jmp ax	; 2: 255 224

feof$32:	; FunctionEnd feof

fscanf:	; address £temporary1565 format
x24414:	mov si, bp	; 2: 137 238
x24416:	add si, 8	; 3: 131 198 8

fscanf$1:	; IntegralToIntegral £temporary1566 £temporary1565

fscanf$2:	; BinaryAdd arg_list £temporary1566 2
x24419:	add si, 2	; 3: 131 198 2
x24422:	mov [di + 10], si	; 3: 137 117 10

fscanf$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

fscanf$4:	; Parameter 12 inStream 6
x24425:	mov ax, [bp + 6]	; 3: 139 70 6
x24428:	mov [di + 18], ax	; 3: 137 69 18

fscanf$5:	; Parameter 12 format 8
x24431:	mov ax, [bp + 8]	; 3: 139 70 8
x24434:	mov [di + 20], ax	; 3: 137 69 20

fscanf$6:	; Parameter 12 arg_list 10
x24437:	mov ax, [di + 10]	; 3: 139 69 10
x24440:	mov [di + 22], ax	; 3: 137 69 22

fscanf$7:	; Call 12 vfscanf 0
x24443:	mov word [di + 12], fscanf$8	; 5: 199 69 12 142 95
x24448:	mov [di + 14], bp	; 3: 137 109 14
x24451:	mov [di + 16], di	; 3: 137 125 16
x24454:	add di, 12	; 3: 131 199 12
x24457:	mov bp, di	; 2: 137 253
x24459:	nop	; 1: 144
x24460:	jmp vfscanf	; 2: 235 11

fscanf$8:	; PostCall 12

fscanf$9:	; GetReturnValue £temporary1568

fscanf$10:	; SetReturnValue £temporary1568

fscanf$11:	; Return £temporary1568
x24462:	mov ax, [bp]	; 3: 139 70 0
x24465:	mov di, [bp + 4]	; 3: 139 126 4
x24468:	mov bp, [bp + 2]	; 3: 139 110 2
x24471:	jmp ax	; 2: 255 224

fscanf$12:	; FunctionEnd fscanf

vfscanf:	; Assign g_inStatus 0
x24473:	mov word [g_inStatus], 0	; 6: 199 6 202 95 0 0

vfscanf$1:	; IntegralToIntegral £temporary1573 inStream
x24479:	mov ax, [bp + 6]	; 3: 139 70 6

vfscanf$2:	; Assign g_inDevice £temporary1573
x24482:	mov [g_inDevice], ax	; 3: 163 204 95

vfscanf$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

vfscanf$4:	; Parameter 12 format 6
x24485:	mov ax, [bp + 8]	; 3: 139 70 8
x24488:	mov [bp + 18], ax	; 3: 137 70 18

vfscanf$5:	; Parameter 12 arg_list 8
x24491:	mov ax, [bp + 10]	; 3: 139 70 10
x24494:	mov [bp + 20], ax	; 3: 137 70 20

vfscanf$6:	; Call 12 scanFormat 0
x24497:	mov word [bp + 12], vfscanf$7	; 5: 199 70 12 191 95
x24502:	mov [bp + 14], bp	; 3: 137 110 14
x24505:	add bp, 12	; 3: 131 197 12
x24508:	nop	; 1: 144
x24509:	jmp scanFormat	; 2: 235 15

vfscanf$7:	; PostCall 12

vfscanf$8:	; GetReturnValue £temporary1574

vfscanf$9:	; SetReturnValue £temporary1574

vfscanf$10:	; Return £temporary1574
x24511:	mov ax, [bp]	; 3: 139 70 0
x24514:	mov di, [bp + 4]	; 3: 139 126 4
x24517:	mov bp, [bp + 2]	; 3: 139 110 2
x24520:	jmp ax	; 2: 255 224

vfscanf$11:	; FunctionEnd vfscanf

g_inStatus:
x24522:	db 0, 0	; 2: 0 0

g_inDevice:
x24524:	db 0, 0	; 2: 0 0

scanFormat:	; Assign percent 0
x24526:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanFormat$1:	; Assign shortInt 0
x24531:	mov word [bp + 15], 0	; 5: 199 70 15 0 0

scanFormat$2:	; Assign longIntOrDouble 0
x24536:	mov word [bp + 17], 0	; 5: 199 70 17 0 0

scanFormat$3:	; Assign longDouble 0
x24541:	mov word [bp + 19], 0	; 5: 199 70 19 0 0

scanFormat$4:	; Assign star 0
x24546:	mov word [bp + 21], 0	; 5: 199 70 21 0 0

scanFormat$5:	; Assign g_inCount 0
x24551:	mov word [g_inCount], 0	; 6: 199 6 237 100 0 0

scanFormat$6:	; Assign g_inChars 0
x24557:	mov word [g_inChars], 0	; 6: 199 6 239 100 0 0

scanFormat$7:	; Assign index 0
x24563:	mov word [bp + 31], 0	; 5: 199 70 31 0 0

scanFormat$8:	; BinaryAdd £temporary1360 format index
x24568:	mov si, [bp + 6]	; 3: 139 118 6
x24571:	add si, [bp + 31]	; 3: 3 118 31

scanFormat$9:	; Deref £temporary1359 -> £temporary1360 £temporary1360 0

scanFormat$10:	; Equal 329 £temporary1359 -> £temporary1360 0
x24574:	cmp byte [si], 0	; 3: 128 60 0
x24577:	je scanFormat$329	; 4: 15 132 217 4

scanFormat$11:	; BinaryAdd £temporary1364 format index
x24581:	mov si, [bp + 6]	; 3: 139 118 6
x24584:	add si, [bp + 31]	; 3: 3 118 31

scanFormat$12:	; Deref £temporary1363 -> £temporary1364 £temporary1364 0

scanFormat$13:	; Assign c £temporary1363 -> £temporary1364
x24587:	mov al, [si]	; 2: 138 4
x24589:	mov [bp + 10], al	; 3: 136 70 10

scanFormat$14:	; IntegralToIntegral £temporary1365 c
x24592:	mov al, [bp + 10]	; 3: 138 70 10
x24595:	and ax, 255	; 3: 37 255 0
x24598:	cmp al, 0	; 2: 60 0
x24600:	jge scanFormat$15	; 2: 125 4
x24602:	neg al	; 2: 246 216
x24604:	neg ax	; 2: 247 216

scanFormat$15:	; BinaryAdd d £temporary1365 1
x24606:	inc ax	; 1: 64
x24607:	mov [bp + 55], ax	; 3: 137 70 55

scanFormat$16:	; Equal 321 percent 0
x24610:	cmp word [bp + 13], 0	; 4: 131 126 13 0
x24614:	je scanFormat$321	; 4: 15 132 143 4

scanFormat$17:	; BinarySubtract £temporary1367 d 1
x24618:	mov ax, [bp + 55]	; 3: 139 70 55
x24621:	dec ax	; 1: 72

scanFormat$18:	; Case 36 £temporary1367 104
x24622:	cmp ax, 104	; 3: 131 248 104
x24625:	je scanFormat$36	; 2: 116 100

scanFormat$19:	; Case 38 £temporary1367 108
x24627:	cmp ax, 108	; 3: 131 248 108
x24630:	je scanFormat$38	; 2: 116 103

scanFormat$20:	; Case 40 £temporary1367 76
x24632:	cmp ax, 76	; 3: 131 248 76
x24635:	je scanFormat$40	; 2: 116 106

scanFormat$21:	; Case 42 £temporary1367 42
x24637:	cmp ax, 42	; 3: 131 248 42
x24640:	je scanFormat$42	; 2: 116 109

scanFormat$22:	; Case 44 £temporary1367 99
x24642:	cmp ax, 99	; 3: 131 248 99
x24645:	je scanFormat$44	; 2: 116 112

scanFormat$23:	; Case 62 £temporary1367 115
x24647:	cmp ax, 115	; 3: 131 248 115
x24650:	je scanFormat$62	; 4: 15 132 184 0

scanFormat$24:	; Case 81 £temporary1367 100
x24654:	cmp ax, 100	; 3: 131 248 100
x24657:	je scanFormat$81	; 4: 15 132 1 1

scanFormat$25:	; Case 81 £temporary1367 105
x24661:	cmp ax, 105	; 3: 131 248 105
x24664:	je scanFormat$81	; 4: 15 132 250 0

scanFormat$26:	; Case 117 £temporary1367 111
x24668:	cmp ax, 111	; 3: 131 248 111
x24671:	je scanFormat$117	; 4: 15 132 135 1

scanFormat$27:	; Case 153 £temporary1367 120
x24675:	cmp ax, 120	; 3: 131 248 120
x24678:	je scanFormat$153	; 4: 15 132 254 1

scanFormat$28:	; Case 189 £temporary1367 117
x24682:	cmp ax, 117	; 3: 131 248 117
x24685:	je scanFormat$189	; 4: 15 132 117 2

scanFormat$29:	; Case 225 £temporary1367 103
x24689:	cmp ax, 103	; 3: 131 248 103
x24692:	je scanFormat$225	; 4: 15 132 236 2

scanFormat$30:	; Case 225 £temporary1367 102
x24696:	cmp ax, 102	; 3: 131 248 102
x24699:	je scanFormat$225	; 4: 15 132 229 2

scanFormat$31:	; Case 225 £temporary1367 101
x24703:	cmp ax, 101	; 3: 131 248 101
x24706:	je scanFormat$225	; 4: 15 132 222 2

scanFormat$32:	; Case 261 £temporary1367 91
x24710:	cmp ax, 91	; 3: 131 248 91
x24713:	je scanFormat$261	; 4: 15 132 75 3

scanFormat$33:	; Case 312 £temporary1367 110
x24717:	cmp ax, 110	; 3: 131 248 110
x24720:	je scanFormat$312	; 4: 15 132 7 4

scanFormat$34:	; CaseEnd £temporary1367

scanFormat$35:	; Goto 327
x24724:	jmp scanFormat$327	; 3: 233 65 4

scanFormat$36:	; Assign shortInt 1
x24727:	mov word [bp + 15], 1	; 5: 199 70 15 1 0

scanFormat$37:	; Goto 327
x24732:	jmp scanFormat$327	; 3: 233 57 4

scanFormat$38:	; Assign longIntOrDouble 1
x24735:	mov word [bp + 17], 1	; 5: 199 70 17 1 0

scanFormat$39:	; Goto 327
x24740:	jmp scanFormat$327	; 3: 233 49 4

scanFormat$40:	; Assign longDouble 1
x24743:	mov word [bp + 19], 1	; 5: 199 70 19 1 0

scanFormat$41:	; Goto 327
x24748:	jmp scanFormat$327	; 3: 233 41 4

scanFormat$42:	; Assign star 1
x24751:	mov word [bp + 21], 1	; 5: 199 70 21 1 0

scanFormat$43:	; Goto 327
x24756:	jmp scanFormat$327	; 3: 233 33 4

scanFormat$44:	; CallHeader 57 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$45:	; Call 57 scanChar 0
x24759:	mov word [bp + 57], scanFormat$46	; 5: 199 70 57 197 96
x24764:	mov [bp + 59], bp	; 3: 137 110 59
x24767:	add bp, 57	; 3: 131 197 57
x24770:	jmp scanChar	; 3: 233 44 4

scanFormat$46:	; PostCall 57

scanFormat$47:	; GetReturnValue £temporary1368

scanFormat$48:	; Assign charValue £temporary1368
x24773:	mov [bp + 57], bl	; 3: 136 94 57

scanFormat$49:	; NotEqual 57 star 0
x24776:	cmp word [bp + 21], 0	; 4: 131 126 21 0
x24780:	jne scanFormat$57	; 2: 117 23

scanFormat$50:	; BinaryAdd arg_list arg_list 2
x24782:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$51:	; BinarySubtract £temporary1372 arg_list 2
x24786:	mov si, [bp + 8]	; 3: 139 118 8
x24789:	sub si, 2	; 3: 131 238 2

scanFormat$52:	; IntegralToIntegral £temporary1373 £temporary1372

scanFormat$53:	; Deref £temporary1374 -> £temporary1373 £temporary1373 0

scanFormat$54:	; Assign charPtr £temporary1374 -> £temporary1373
x24792:	mov ax, [si]	; 2: 139 4
x24794:	mov [bp + 11], ax	; 3: 137 70 11

scanFormat$55:	; Deref £temporary1375 -> charPtr charPtr 0
x24797:	mov si, [bp + 11]	; 3: 139 118 11

scanFormat$56:	; Assign £temporary1375 -> charPtr charValue
x24800:	mov al, [bp + 57]	; 3: 138 70 57
x24803:	mov [si], al	; 2: 136 4

scanFormat$57:	; Assign percent 0
x24805:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanFormat$58:	; IntegralToIntegral £temporary1376 charValue
x24810:	mov al, [bp + 57]	; 3: 138 70 57
x24813:	and ax, 255	; 3: 37 255 0
x24816:	cmp al, 0	; 2: 60 0
x24818:	jge scanFormat$59	; 2: 125 4
x24820:	neg al	; 2: 246 216
x24822:	neg ax	; 2: 247 216

scanFormat$59:	; Equal 327 £temporary1376 -1
x24824:	cmp ax, -1	; 3: 131 248 255
x24827:	je scanFormat$327	; 4: 15 132 217 3

scanFormat$60:	; Increment g_inCount
x24831:	inc word [g_inCount]	; 4: 255 6 237 100

scanFormat$61:	; Goto 327
x24835:	jmp scanFormat$327	; 3: 233 210 3

scanFormat$62:	; NotEqual 74 star 0
x24838:	cmp word [bp + 21], 0	; 4: 131 126 21 0
x24842:	jne scanFormat$74	; 2: 117 42

scanFormat$63:	; BinaryAdd arg_list arg_list 2
x24844:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$64:	; BinarySubtract £temporary1382 arg_list 2
x24848:	mov si, [bp + 8]	; 3: 139 118 8
x24851:	sub si, 2	; 3: 131 238 2

scanFormat$65:	; IntegralToIntegral £temporary1383 £temporary1382

scanFormat$66:	; Deref £temporary1384 -> £temporary1383 £temporary1383 0

scanFormat$67:	; Assign charPtr £temporary1384 -> £temporary1383
x24854:	mov ax, [si]	; 2: 139 4
x24856:	mov [bp + 11], ax	; 3: 137 70 11

scanFormat$68:	; CallHeader 57 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$69:	; Parameter 57 charPtr 6
x24859:	mov ax, [bp + 11]	; 3: 139 70 11
x24862:	mov [bp + 63], ax	; 3: 137 70 63

scanFormat$70:	; Parameter 57 0 8
x24865:	mov word [bp + 65], 0	; 5: 199 70 65 0 0

scanFormat$71:	; Call 57 scanString 0
x24870:	mov word [bp + 57], scanFormat$72	; 5: 199 70 57 52 97
x24875:	mov [bp + 59], bp	; 3: 137 110 59
x24878:	add bp, 57	; 3: 131 197 57
x24881:	jmp scanString	; 3: 233 44 4

scanFormat$72:	; PostCall 57

scanFormat$73:	; Goto 79
x24884:	jmp scanFormat$79	; 2: 235 24

scanFormat$74:	; CallHeader 57 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$75:	; Parameter 57 0 6
x24886:	mov word [bp + 63], 0	; 5: 199 70 63 0 0

scanFormat$76:	; Parameter 57 0 8
x24891:	mov word [bp + 65], 0	; 5: 199 70 65 0 0

scanFormat$77:	; Call 57 scanString 0
x24896:	mov word [bp + 57], scanFormat$78	; 5: 199 70 57 78 97
x24901:	mov [bp + 59], bp	; 3: 137 110 59
x24904:	add bp, 57	; 3: 131 197 57
x24907:	jmp scanString	; 3: 233 18 4

scanFormat$78:	; PostCall 57

scanFormat$79:	; Assign percent 0
x24910:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanFormat$80:	; Goto 327
x24915:	jmp scanFormat$327	; 3: 233 130 3

scanFormat$81:	; CallHeader 57 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$82:	; Parameter 57 10 6
x24918:	mov word [bp + 63], 10	; 5: 199 70 63 10 0

scanFormat$83:	; Call 57 scanLongInt 0
x24923:	mov word [bp + 57], scanFormat$84	; 5: 199 70 57 105 97
x24928:	mov [bp + 59], bp	; 3: 137 110 59
x24931:	add bp, 57	; 3: 131 197 57
x24934:	jmp scanLongInt	; 3: 233 123 6

scanFormat$84:	; PostCall 57

scanFormat$85:	; GetReturnValue £temporary1387

scanFormat$86:	; Assign longValue £temporary1387
x24937:	mov [bp + 23], ebx	; 4: 102 137 94 23

scanFormat$87:	; NotEqual 115 star 0
x24941:	cmp word [bp + 21], 0	; 4: 131 126 21 0
x24945:	jne scanFormat$115	; 2: 117 111

scanFormat$88:	; Equal 98 shortInt 0
x24947:	cmp word [bp + 15], 0	; 4: 131 126 15 0
x24951:	je scanFormat$98	; 2: 116 37

scanFormat$89:	; BinaryAdd arg_list arg_list 2
x24953:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$90:	; BinarySubtract £temporary1391 arg_list 2
x24957:	mov si, [bp + 8]	; 3: 139 118 8
x24960:	sub si, 2	; 3: 131 238 2

scanFormat$91:	; IntegralToIntegral £temporary1392 £temporary1391

scanFormat$92:	; Deref £temporary1393 -> £temporary1392 £temporary1392 0

scanFormat$93:	; Assign shortPtr £temporary1393 -> £temporary1392
x24963:	mov ax, [si]	; 2: 139 4
x24965:	mov [bp + 29], ax	; 3: 137 70 29

scanFormat$94:	; Deref £temporary1394 -> shortPtr shortPtr 0
x24968:	mov si, [bp + 29]	; 3: 139 118 29

scanFormat$95:	; IntegralToIntegral £temporary1395 longValue
x24971:	mov eax, [bp + 23]	; 4: 102 139 70 23
x24975:	cmp eax, 0	; 4: 102 131 248 0
x24979:	jge scanFormat$96	; 2: 125 5
x24981:	neg eax	; 3: 102 247 216
x24984:	neg al	; 2: 246 216

scanFormat$96:	; Assign £temporary1394 -> shortPtr £temporary1395
x24986:	mov [si], al	; 2: 136 4

scanFormat$97:	; Goto 115
x24988:	jmp scanFormat$115	; 2: 235 68

scanFormat$98:	; NotEqual 108 longIntOrDouble 0
x24990:	cmp word [bp + 17], 0	; 4: 131 126 17 0
x24994:	jne scanFormat$108	; 2: 117 37

scanFormat$99:	; BinaryAdd arg_list arg_list 2
x24996:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$100:	; BinarySubtract £temporary1399 arg_list 2
x25000:	mov si, [bp + 8]	; 3: 139 118 8
x25003:	sub si, 2	; 3: 131 238 2

scanFormat$101:	; IntegralToIntegral £temporary1400 £temporary1399

scanFormat$102:	; Deref £temporary1401 -> £temporary1400 £temporary1400 0

scanFormat$103:	; Assign intPtr £temporary1401 -> £temporary1400
x25006:	mov ax, [si]	; 2: 139 4
x25008:	mov [bp + 33], ax	; 3: 137 70 33

scanFormat$104:	; Deref £temporary1402 -> intPtr intPtr 0
x25011:	mov si, [bp + 33]	; 3: 139 118 33

scanFormat$105:	; IntegralToIntegral £temporary1403 longValue
x25014:	mov eax, [bp + 23]	; 4: 102 139 70 23
x25018:	cmp eax, 0	; 4: 102 131 248 0
x25022:	jge scanFormat$106	; 2: 125 5
x25024:	neg eax	; 3: 102 247 216
x25027:	neg ax	; 2: 247 216

scanFormat$106:	; Assign £temporary1402 -> intPtr £temporary1403
x25029:	mov [si], ax	; 2: 137 4

scanFormat$107:	; Goto 115
x25031:	jmp scanFormat$115	; 2: 235 25

scanFormat$108:	; BinaryAdd arg_list arg_list 2
x25033:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$109:	; BinarySubtract £temporary1405 arg_list 2
x25037:	mov si, [bp + 8]	; 3: 139 118 8
x25040:	sub si, 2	; 3: 131 238 2

scanFormat$110:	; IntegralToIntegral £temporary1406 £temporary1405

scanFormat$111:	; Deref £temporary1407 -> £temporary1406 £temporary1406 0

scanFormat$112:	; Assign longPtr £temporary1407 -> £temporary1406
x25043:	mov ax, [si]	; 2: 139 4
x25045:	mov [bp + 27], ax	; 3: 137 70 27

scanFormat$113:	; Deref £temporary1408 -> longPtr longPtr 0
x25048:	mov si, [bp + 27]	; 3: 139 118 27

scanFormat$114:	; Assign £temporary1408 -> longPtr longValue
x25051:	mov eax, [bp + 23]	; 4: 102 139 70 23
x25055:	mov [si], eax	; 3: 102 137 4

scanFormat$115:	; Assign percent 0
x25058:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanFormat$116:	; Goto 327
x25063:	jmp scanFormat$327	; 3: 233 238 2

scanFormat$117:	; CallHeader 57 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$118:	; Parameter 57 8 6
x25066:	mov word [bp + 63], 8	; 5: 199 70 63 8 0

scanFormat$119:	; Call 57 scanUnsignedLongInt 0
x25071:	mov word [bp + 57], scanFormat$120	; 5: 199 70 57 253 97
x25076:	mov [bp + 59], bp	; 3: 137 110 59
x25079:	add bp, 57	; 3: 131 197 57
x25082:	jmp scanUnsignedLongInt	; 3: 233 33 10

scanFormat$120:	; PostCall 57

scanFormat$121:	; GetReturnValue £temporary1410

scanFormat$122:	; Assign unsignedLongValue £temporary1410
x25085:	mov [bp + 37], ebx	; 4: 102 137 94 37

scanFormat$123:	; NotEqual 151 star 0
x25089:	cmp word [bp + 21], 0	; 4: 131 126 21 0
x25093:	jne scanFormat$151	; 2: 117 89

scanFormat$124:	; Equal 134 shortInt 0
x25095:	cmp word [bp + 15], 0	; 4: 131 126 15 0
x25099:	je scanFormat$134	; 2: 116 26

scanFormat$125:	; BinaryAdd arg_list arg_list 2
x25101:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$126:	; BinarySubtract £temporary1414 arg_list 2
x25105:	mov si, [bp + 8]	; 3: 139 118 8
x25108:	sub si, 2	; 3: 131 238 2

scanFormat$127:	; IntegralToIntegral £temporary1415 £temporary1414

scanFormat$128:	; Deref £temporary1416 -> £temporary1415 £temporary1415 0

scanFormat$129:	; Assign unsignedShortPtr £temporary1416 -> £temporary1415
x25111:	mov ax, [si]	; 2: 139 4
x25113:	mov [bp + 43], ax	; 3: 137 70 43

scanFormat$130:	; Deref £temporary1417 -> unsignedShortPtr unsignedShortPtr 0
x25116:	mov si, [bp + 43]	; 3: 139 118 43

scanFormat$131:	; IntegralToIntegral £temporary1418 unsignedLongValue
x25119:	mov eax, [bp + 37]	; 4: 102 139 70 37

scanFormat$132:	; Assign £temporary1417 -> unsignedShortPtr £temporary1418
x25123:	mov [si], al	; 2: 136 4

scanFormat$133:	; Goto 151
x25125:	jmp scanFormat$151	; 2: 235 57

scanFormat$134:	; NotEqual 144 longIntOrDouble 0
x25127:	cmp word [bp + 17], 0	; 4: 131 126 17 0
x25131:	jne scanFormat$144	; 2: 117 26

scanFormat$135:	; BinaryAdd arg_list arg_list 2
x25133:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$136:	; BinarySubtract £temporary1422 arg_list 2
x25137:	mov si, [bp + 8]	; 3: 139 118 8
x25140:	sub si, 2	; 3: 131 238 2

scanFormat$137:	; IntegralToIntegral £temporary1423 £temporary1422

scanFormat$138:	; Deref £temporary1424 -> £temporary1423 £temporary1423 0

scanFormat$139:	; Assign unsignedIntPtr £temporary1424 -> £temporary1423
x25143:	mov ax, [si]	; 2: 139 4
x25145:	mov [bp + 45], ax	; 3: 137 70 45

scanFormat$140:	; Deref £temporary1425 -> unsignedIntPtr unsignedIntPtr 0
x25148:	mov si, [bp + 45]	; 3: 139 118 45

scanFormat$141:	; IntegralToIntegral £temporary1426 unsignedLongValue
x25151:	mov eax, [bp + 37]	; 4: 102 139 70 37

scanFormat$142:	; Assign £temporary1425 -> unsignedIntPtr £temporary1426
x25155:	mov [si], ax	; 2: 137 4

scanFormat$143:	; Goto 151
x25157:	jmp scanFormat$151	; 2: 235 25

scanFormat$144:	; BinaryAdd arg_list arg_list 2
x25159:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$145:	; BinarySubtract £temporary1428 arg_list 2
x25163:	mov si, [bp + 8]	; 3: 139 118 8
x25166:	sub si, 2	; 3: 131 238 2

scanFormat$146:	; IntegralToIntegral £temporary1429 £temporary1428

scanFormat$147:	; Deref £temporary1430 -> £temporary1429 £temporary1429 0

scanFormat$148:	; Assign unsignedLongPtr £temporary1430 -> £temporary1429
x25169:	mov ax, [si]	; 2: 139 4
x25171:	mov [bp + 41], ax	; 3: 137 70 41

scanFormat$149:	; Deref £temporary1431 -> unsignedLongPtr unsignedLongPtr 0
x25174:	mov si, [bp + 41]	; 3: 139 118 41

scanFormat$150:	; Assign £temporary1431 -> unsignedLongPtr unsignedLongValue
x25177:	mov eax, [bp + 37]	; 4: 102 139 70 37
x25181:	mov [si], eax	; 3: 102 137 4

scanFormat$151:	; Assign percent 0
x25184:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanFormat$152:	; Goto 327
x25189:	jmp scanFormat$327	; 3: 233 112 2

scanFormat$153:	; CallHeader 57 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$154:	; Parameter 57 16 6
x25192:	mov word [bp + 63], 16	; 5: 199 70 63 16 0

scanFormat$155:	; Call 57 scanUnsignedLongInt 0
x25197:	mov word [bp + 57], scanFormat$156	; 5: 199 70 57 123 98
x25202:	mov [bp + 59], bp	; 3: 137 110 59
x25205:	add bp, 57	; 3: 131 197 57
x25208:	jmp scanUnsignedLongInt	; 3: 233 163 9

scanFormat$156:	; PostCall 57

scanFormat$157:	; GetReturnValue £temporary1433

scanFormat$158:	; Assign unsignedLongValue £temporary1433
x25211:	mov [bp + 37], ebx	; 4: 102 137 94 37

scanFormat$159:	; NotEqual 187 star 0
x25215:	cmp word [bp + 21], 0	; 4: 131 126 21 0
x25219:	jne scanFormat$187	; 2: 117 89

scanFormat$160:	; Equal 170 shortInt 0
x25221:	cmp word [bp + 15], 0	; 4: 131 126 15 0
x25225:	je scanFormat$170	; 2: 116 26

scanFormat$161:	; BinaryAdd arg_list arg_list 2
x25227:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$162:	; BinarySubtract £temporary1437 arg_list 2
x25231:	mov si, [bp + 8]	; 3: 139 118 8
x25234:	sub si, 2	; 3: 131 238 2

scanFormat$163:	; IntegralToIntegral £temporary1438 £temporary1437

scanFormat$164:	; Deref £temporary1439 -> £temporary1438 £temporary1438 0

scanFormat$165:	; Assign unsignedShortPtr £temporary1439 -> £temporary1438
x25237:	mov ax, [si]	; 2: 139 4
x25239:	mov [bp + 43], ax	; 3: 137 70 43

scanFormat$166:	; Deref £temporary1440 -> unsignedShortPtr unsignedShortPtr 0
x25242:	mov si, [bp + 43]	; 3: 139 118 43

scanFormat$167:	; IntegralToIntegral £temporary1441 unsignedLongValue
x25245:	mov eax, [bp + 37]	; 4: 102 139 70 37

scanFormat$168:	; Assign £temporary1440 -> unsignedShortPtr £temporary1441
x25249:	mov [si], al	; 2: 136 4

scanFormat$169:	; Goto 187
x25251:	jmp scanFormat$187	; 2: 235 57

scanFormat$170:	; NotEqual 180 longIntOrDouble 0
x25253:	cmp word [bp + 17], 0	; 4: 131 126 17 0
x25257:	jne scanFormat$180	; 2: 117 26

scanFormat$171:	; BinaryAdd arg_list arg_list 2
x25259:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$172:	; BinarySubtract £temporary1445 arg_list 2
x25263:	mov si, [bp + 8]	; 3: 139 118 8
x25266:	sub si, 2	; 3: 131 238 2

scanFormat$173:	; IntegralToIntegral £temporary1446 £temporary1445

scanFormat$174:	; Deref £temporary1447 -> £temporary1446 £temporary1446 0

scanFormat$175:	; Assign unsignedIntPtr £temporary1447 -> £temporary1446
x25269:	mov ax, [si]	; 2: 139 4
x25271:	mov [bp + 45], ax	; 3: 137 70 45

scanFormat$176:	; Deref £temporary1448 -> unsignedIntPtr unsignedIntPtr 0
x25274:	mov si, [bp + 45]	; 3: 139 118 45

scanFormat$177:	; IntegralToIntegral £temporary1449 unsignedLongValue
x25277:	mov eax, [bp + 37]	; 4: 102 139 70 37

scanFormat$178:	; Assign £temporary1448 -> unsignedIntPtr £temporary1449
x25281:	mov [si], ax	; 2: 137 4

scanFormat$179:	; Goto 187
x25283:	jmp scanFormat$187	; 2: 235 25

scanFormat$180:	; BinaryAdd arg_list arg_list 2
x25285:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$181:	; BinarySubtract £temporary1451 arg_list 2
x25289:	mov si, [bp + 8]	; 3: 139 118 8
x25292:	sub si, 2	; 3: 131 238 2

scanFormat$182:	; IntegralToIntegral £temporary1452 £temporary1451

scanFormat$183:	; Deref £temporary1453 -> £temporary1452 £temporary1452 0

scanFormat$184:	; Assign unsignedLongPtr £temporary1453 -> £temporary1452
x25295:	mov ax, [si]	; 2: 139 4
x25297:	mov [bp + 41], ax	; 3: 137 70 41

scanFormat$185:	; Deref £temporary1454 -> unsignedLongPtr unsignedLongPtr 0
x25300:	mov si, [bp + 41]	; 3: 139 118 41

scanFormat$186:	; Assign £temporary1454 -> unsignedLongPtr unsignedLongValue
x25303:	mov eax, [bp + 37]	; 4: 102 139 70 37
x25307:	mov [si], eax	; 3: 102 137 4

scanFormat$187:	; Assign percent 0
x25310:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanFormat$188:	; Goto 327
x25315:	jmp scanFormat$327	; 3: 233 242 1

scanFormat$189:	; CallHeader 57 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$190:	; Parameter 57 0 6
x25318:	mov word [bp + 63], 0	; 5: 199 70 63 0 0

scanFormat$191:	; Call 57 scanUnsignedLongInt 0
x25323:	mov word [bp + 57], scanFormat$192	; 5: 199 70 57 249 98
x25328:	mov [bp + 59], bp	; 3: 137 110 59
x25331:	add bp, 57	; 3: 131 197 57
x25334:	jmp scanUnsignedLongInt	; 3: 233 37 9

scanFormat$192:	; PostCall 57

scanFormat$193:	; GetReturnValue £temporary1456

scanFormat$194:	; Assign unsignedLongValue £temporary1456
x25337:	mov [bp + 37], ebx	; 4: 102 137 94 37

scanFormat$195:	; NotEqual 223 star 0
x25341:	cmp word [bp + 21], 0	; 4: 131 126 21 0
x25345:	jne scanFormat$223	; 2: 117 89

scanFormat$196:	; Equal 206 shortInt 0
x25347:	cmp word [bp + 15], 0	; 4: 131 126 15 0
x25351:	je scanFormat$206	; 2: 116 26

scanFormat$197:	; BinaryAdd arg_list arg_list 2
x25353:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$198:	; BinarySubtract £temporary1460 arg_list 2
x25357:	mov si, [bp + 8]	; 3: 139 118 8
x25360:	sub si, 2	; 3: 131 238 2

scanFormat$199:	; IntegralToIntegral £temporary1461 £temporary1460

scanFormat$200:	; Deref £temporary1462 -> £temporary1461 £temporary1461 0

scanFormat$201:	; Assign unsignedShortPtr £temporary1462 -> £temporary1461
x25363:	mov ax, [si]	; 2: 139 4
x25365:	mov [bp + 43], ax	; 3: 137 70 43

scanFormat$202:	; Deref £temporary1463 -> unsignedShortPtr unsignedShortPtr 0
x25368:	mov si, [bp + 43]	; 3: 139 118 43

scanFormat$203:	; IntegralToIntegral £temporary1464 unsignedLongValue
x25371:	mov eax, [bp + 37]	; 4: 102 139 70 37

scanFormat$204:	; Assign £temporary1463 -> unsignedShortPtr £temporary1464
x25375:	mov [si], al	; 2: 136 4

scanFormat$205:	; Goto 223
x25377:	jmp scanFormat$223	; 2: 235 57

scanFormat$206:	; NotEqual 216 longIntOrDouble 0
x25379:	cmp word [bp + 17], 0	; 4: 131 126 17 0
x25383:	jne scanFormat$216	; 2: 117 26

scanFormat$207:	; BinaryAdd arg_list arg_list 2
x25385:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$208:	; BinarySubtract £temporary1468 arg_list 2
x25389:	mov si, [bp + 8]	; 3: 139 118 8
x25392:	sub si, 2	; 3: 131 238 2

scanFormat$209:	; IntegralToIntegral £temporary1469 £temporary1468

scanFormat$210:	; Deref £temporary1470 -> £temporary1469 £temporary1469 0

scanFormat$211:	; Assign unsignedIntPtr £temporary1470 -> £temporary1469
x25395:	mov ax, [si]	; 2: 139 4
x25397:	mov [bp + 45], ax	; 3: 137 70 45

scanFormat$212:	; Deref £temporary1471 -> unsignedIntPtr unsignedIntPtr 0
x25400:	mov si, [bp + 45]	; 3: 139 118 45

scanFormat$213:	; IntegralToIntegral £temporary1472 unsignedLongValue
x25403:	mov eax, [bp + 37]	; 4: 102 139 70 37

scanFormat$214:	; Assign £temporary1471 -> unsignedIntPtr £temporary1472
x25407:	mov [si], ax	; 2: 137 4

scanFormat$215:	; Goto 223
x25409:	jmp scanFormat$223	; 2: 235 25

scanFormat$216:	; BinaryAdd arg_list arg_list 2
x25411:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$217:	; BinarySubtract £temporary1474 arg_list 2
x25415:	mov si, [bp + 8]	; 3: 139 118 8
x25418:	sub si, 2	; 3: 131 238 2

scanFormat$218:	; IntegralToIntegral £temporary1475 £temporary1474

scanFormat$219:	; Deref £temporary1476 -> £temporary1475 £temporary1475 0

scanFormat$220:	; Assign unsignedLongPtr £temporary1476 -> £temporary1475
x25421:	mov ax, [si]	; 2: 139 4
x25423:	mov [bp + 41], ax	; 3: 137 70 41

scanFormat$221:	; Deref £temporary1477 -> unsignedLongPtr unsignedLongPtr 0
x25426:	mov si, [bp + 41]	; 3: 139 118 41

scanFormat$222:	; Assign £temporary1477 -> unsignedLongPtr unsignedLongValue
x25429:	mov eax, [bp + 37]	; 4: 102 139 70 37
x25433:	mov [si], eax	; 3: 102 137 4

scanFormat$223:	; Assign percent 0
x25436:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanFormat$224:	; Goto 327
x25441:	jmp scanFormat$327	; 3: 233 116 1

scanFormat$225:	; CallHeader 57 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$226:	; Call 57 scanLongDouble 0
x25444:	mov word [bp + 57], scanFormat$227	; 5: 199 70 57 114 99
x25449:	mov [bp + 59], bp	; 3: 137 110 59
x25452:	add bp, 57	; 3: 131 197 57
x25455:	jmp scanLongDouble	; 3: 233 24 10

scanFormat$227:	; PostCall 57

scanFormat$228:	; GetReturnValue £temporary1479

scanFormat$229:	; PopFloat longDoubleValue
x25458:	fstp qword [bp + 47]	; 3: 221 94 47

scanFormat$230:	; NotEqual 259 star 0
x25461:	cmp word [bp + 21], 0	; 4: 131 126 21 0
x25465:	jne scanFormat$259	; 2: 117 85

scanFormat$231:	; Equal 241 longIntOrDouble 0
x25467:	cmp word [bp + 17], 0	; 4: 131 126 17 0
x25471:	je scanFormat$241	; 2: 116 25

scanFormat$232:	; BinaryAdd arg_list arg_list 2
x25473:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$233:	; BinarySubtract £temporary1483 arg_list 2
x25477:	mov si, [bp + 8]	; 3: 139 118 8
x25480:	sub si, 2	; 3: 131 238 2

scanFormat$234:	; IntegralToIntegral £temporary1484 £temporary1483

scanFormat$235:	; Deref £temporary1485 -> £temporary1484 £temporary1484 0

scanFormat$236:	; Assign doublePtr £temporary1485 -> £temporary1484
x25483:	mov ax, [si]	; 2: 139 4
x25485:	mov [bp + 57], ax	; 3: 137 70 57

scanFormat$237:	; Deref £temporary1486 -> doublePtr doublePtr 0
x25488:	mov si, [bp + 57]	; 3: 139 118 57

scanFormat$238:	; PushFloat longDoubleValue
x25491:	fld qword [bp + 47]	; 3: 221 70 47

scanFormat$239:	; PopFloat £temporary1486 -> doublePtr
x25494:	fstp qword [si]	; 2: 221 28

scanFormat$240:	; Goto 259
x25496:	jmp scanFormat$259	; 2: 235 54

scanFormat$241:	; Equal 251 longDouble 0
x25498:	cmp word [bp + 19], 0	; 4: 131 126 19 0
x25502:	je scanFormat$251	; 2: 116 25

scanFormat$242:	; BinaryAdd arg_list arg_list 2
x25504:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$243:	; BinarySubtract £temporary1489 arg_list 2
x25508:	mov si, [bp + 8]	; 3: 139 118 8
x25511:	sub si, 2	; 3: 131 238 2

scanFormat$244:	; IntegralToIntegral £temporary1490 £temporary1489

scanFormat$245:	; Deref £temporary1491 -> £temporary1490 £temporary1490 0

scanFormat$246:	; Assign longDoublePtr £temporary1491 -> £temporary1490
x25514:	mov ax, [si]	; 2: 139 4
x25516:	mov [bp + 57], ax	; 3: 137 70 57

scanFormat$247:	; Deref £temporary1492 -> longDoublePtr longDoublePtr 0
x25519:	mov si, [bp + 57]	; 3: 139 118 57

scanFormat$248:	; PushFloat longDoubleValue
x25522:	fld qword [bp + 47]	; 3: 221 70 47

scanFormat$249:	; PopFloat £temporary1492 -> longDoublePtr
x25525:	fstp qword [si]	; 2: 221 28

scanFormat$250:	; Goto 259
x25527:	jmp scanFormat$259	; 2: 235 23

scanFormat$251:	; BinaryAdd arg_list arg_list 2
x25529:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$252:	; BinarySubtract £temporary1494 arg_list 2
x25533:	mov si, [bp + 8]	; 3: 139 118 8
x25536:	sub si, 2	; 3: 131 238 2

scanFormat$253:	; IntegralToIntegral £temporary1495 £temporary1494

scanFormat$254:	; Deref £temporary1496 -> £temporary1495 £temporary1495 0

scanFormat$255:	; Assign floatPtr £temporary1496 -> £temporary1495
x25539:	mov ax, [si]	; 2: 139 4
x25541:	mov [bp + 57], ax	; 3: 137 70 57

scanFormat$256:	; Deref £temporary1497 -> floatPtr floatPtr 0
x25544:	mov si, [bp + 57]	; 3: 139 118 57

scanFormat$257:	; PushFloat longDoubleValue
x25547:	fld qword [bp + 47]	; 3: 221 70 47

scanFormat$258:	; PopFloat £temporary1497 -> floatPtr
x25550:	fstp dword [si]	; 2: 217 28

scanFormat$259:	; Assign percent 0
x25552:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanFormat$260:	; Goto 327
x25557:	jmp scanFormat$327	; 3: 233 0 1

scanFormat$261:	; Assign not 0
x25560:	mov word [bp + 57], 0	; 5: 199 70 57 0 0

scanFormat$262:	; Increment index
x25565:	inc word [bp + 31]	; 3: 255 70 31

scanFormat$263:	; BinaryAdd £temporary1503 format index
x25568:	mov si, [bp + 6]	; 3: 139 118 6
x25571:	add si, [bp + 31]	; 3: 3 118 31

scanFormat$264:	; Deref £temporary1502 -> £temporary1503 £temporary1503 0

scanFormat$265:	; NotEqual 268 £temporary1502 -> £temporary1503 94
x25574:	cmp byte [si], 94	; 3: 128 60 94
x25577:	jne scanFormat$268	; 2: 117 8

scanFormat$266:	; Assign not 1
x25579:	mov word [bp + 57], 1	; 5: 199 70 57 1 0

scanFormat$267:	; Increment index
x25584:	inc word [bp + 31]	; 3: 255 70 31

scanFormat$268:	; Assign startIndex index
x25587:	mov ax, [bp + 31]	; 3: 139 70 31
x25590:	mov [bp + 59], ax	; 3: 137 70 59

scanFormat$269:	; BinaryAdd £temporary1507 format index
x25593:	mov si, [bp + 6]	; 3: 139 118 6
x25596:	add si, [bp + 31]	; 3: 3 118 31

scanFormat$270:	; Deref £temporary1506 -> £temporary1507 £temporary1507 0

scanFormat$271:	; Equal 274 £temporary1506 -> £temporary1507 93
x25599:	cmp byte [si], 93	; 3: 128 60 93
x25602:	je scanFormat$274	; 2: 116 5

scanFormat$272:	; Increment index
x25604:	inc word [bp + 31]	; 3: 255 70 31

scanFormat$273:	; Goto 269
x25607:	jmp scanFormat$269	; 2: 235 240

scanFormat$274:	; BinarySubtract size index startIndex
x25609:	mov ax, [bp + 31]	; 3: 139 70 31
x25612:	sub ax, [bp + 59]	; 3: 43 70 59
x25615:	mov [bp + 61], ax	; 3: 137 70 61

scanFormat$275:	; BinaryAdd £temporary1512 format index
x25618:	mov si, [bp + 6]	; 3: 139 118 6
x25621:	add si, [bp + 31]	; 3: 3 118 31

scanFormat$276:	; Deref £temporary1511 -> £temporary1512 £temporary1512 0

scanFormat$277:	; Assign c £temporary1511 -> £temporary1512
x25624:	mov al, [si]	; 2: 138 4
x25626:	mov [bp + 63], al	; 3: 136 70 63

scanFormat$278:	; BinaryAdd £temporary1514 format index
x25629:	mov si, [bp + 6]	; 3: 139 118 6
x25632:	add si, [bp + 31]	; 3: 3 118 31

scanFormat$279:	; Deref £temporary1513 -> £temporary1514 £temporary1514 0

scanFormat$280:	; Assign £temporary1513 -> £temporary1514 0
x25635:	mov byte [si], 0	; 3: 198 4 0

scanFormat$281:	; NotEqual 298 star 0
x25638:	cmp word [bp + 21], 0	; 4: 131 126 21 0
x25642:	jne scanFormat$298	; 2: 117 58

scanFormat$282:	; BinaryAdd arg_list arg_list 2
x25644:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$283:	; BinarySubtract £temporary1518 arg_list 2
x25648:	mov si, [bp + 8]	; 3: 139 118 8
x25651:	sub si, 2	; 3: 131 238 2

scanFormat$284:	; IntegralToIntegral £temporary1519 £temporary1518

scanFormat$285:	; Deref £temporary1520 -> £temporary1519 £temporary1519 0

scanFormat$286:	; Assign string £temporary1520 -> £temporary1519
x25654:	mov ax, [si]	; 2: 139 4
x25656:	mov [bp + 64], ax	; 3: 137 70 64

scanFormat$287:	; CallHeader 66 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$288:	; Parameter 66 string 6
x25659:	mov ax, [bp + 64]	; 3: 139 70 64
x25662:	mov [bp + 72], ax	; 3: 137 70 72

scanFormat$289:	; BinaryAdd £temporary1522 format startIndex
x25665:	mov si, [bp + 6]	; 3: 139 118 6
x25668:	add si, [bp + 59]	; 3: 3 118 59

scanFormat$290:	; Deref £temporary1521 -> £temporary1522 £temporary1522 0

scanFormat$291:	; address £temporary1523 £temporary1521 -> £temporary1522

scanFormat$292:	; Parameter 66 £temporary1523 8
x25671:	mov [bp + 74], si	; 3: 137 118 74

scanFormat$293:	; Parameter 66 size 10
x25674:	mov ax, [bp + 61]	; 3: 139 70 61
x25677:	mov [bp + 76], ax	; 3: 137 70 76

scanFormat$294:	; Parameter 66 not 12
x25680:	mov ax, [bp + 57]	; 3: 139 70 57
x25683:	mov [bp + 78], ax	; 3: 137 70 78

scanFormat$295:	; Call 66 scanPattern 0
x25686:	mov word [bp + 66], scanFormat$296	; 5: 199 70 66 100 100
x25691:	mov [bp + 68], bp	; 3: 137 110 68
x25694:	add bp, 66	; 3: 131 197 66
x25697:	jmp scanPattern	; 3: 233 97 11

scanFormat$296:	; PostCall 66

scanFormat$297:	; Goto 308
x25700:	jmp scanFormat$308	; 2: 235 40

scanFormat$298:	; CallHeader 64 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$299:	; Parameter 64 0 6
x25702:	mov word [bp + 70], 0	; 5: 199 70 70 0 0

scanFormat$300:	; BinaryAdd £temporary1526 format startIndex
x25707:	mov si, [bp + 6]	; 3: 139 118 6
x25710:	add si, [bp + 59]	; 3: 3 118 59

scanFormat$301:	; Deref £temporary1525 -> £temporary1526 £temporary1526 0

scanFormat$302:	; address £temporary1527 £temporary1525 -> £temporary1526

scanFormat$303:	; Parameter 64 £temporary1527 8
x25713:	mov [bp + 72], si	; 3: 137 118 72

scanFormat$304:	; Parameter 64 size 10
x25716:	mov ax, [bp + 61]	; 3: 139 70 61
x25719:	mov [bp + 74], ax	; 3: 137 70 74

scanFormat$305:	; Parameter 64 not 12
x25722:	mov ax, [bp + 57]	; 3: 139 70 57
x25725:	mov [bp + 76], ax	; 3: 137 70 76

scanFormat$306:	; Call 64 scanPattern 0
x25728:	mov word [bp + 64], scanFormat$307	; 5: 199 70 64 142 100
x25733:	mov [bp + 66], bp	; 3: 137 110 66
x25736:	add bp, 64	; 3: 131 197 64
x25739:	jmp scanPattern	; 3: 233 55 11

scanFormat$307:	; PostCall 64

scanFormat$308:	; BinaryAdd £temporary1530 format index
x25742:	mov si, [bp + 6]	; 3: 139 118 6
x25745:	add si, [bp + 31]	; 3: 3 118 31

scanFormat$309:	; Deref £temporary1529 -> £temporary1530 £temporary1530 0

scanFormat$310:	; Assign £temporary1529 -> £temporary1530 c
x25748:	mov al, [bp + 63]	; 3: 138 70 63
x25751:	mov [si], al	; 2: 136 4

scanFormat$311:	; Goto 327
x25753:	jmp scanFormat$327	; 2: 235 61

scanFormat$312:	; BinaryAdd arg_list arg_list 2
x25755:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$313:	; BinarySubtract £temporary1532 arg_list 2
x25759:	mov si, [bp + 8]	; 3: 139 118 8
x25762:	sub si, 2	; 3: 131 238 2

scanFormat$314:	; IntegralToIntegral £temporary1533 £temporary1532

scanFormat$315:	; Deref £temporary1534 -> £temporary1533 £temporary1533 0

scanFormat$316:	; Assign charsPtr £temporary1534 -> £temporary1533
x25765:	mov ax, [si]	; 2: 139 4
x25767:	mov [bp + 35], ax	; 3: 137 70 35

scanFormat$317:	; Deref £temporary1535 -> charsPtr charsPtr 0
x25770:	mov si, [bp + 35]	; 3: 139 118 35

scanFormat$318:	; Assign £temporary1535 -> charsPtr g_inChars
x25773:	mov ax, [g_inChars]	; 3: 161 239 100
x25776:	mov [si], ax	; 2: 137 4

scanFormat$319:	; Assign percent 0
x25778:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanFormat$320:	; Goto 327
x25783:	jmp scanFormat$327	; 2: 235 31

scanFormat$321:	; NotEqual 327 c 37
x25785:	cmp byte [bp + 10], 37	; 4: 128 126 10 37
x25789:	jne scanFormat$327	; 2: 117 25

scanFormat$322:	; Assign percent 1
x25791:	mov word [bp + 13], 1	; 5: 199 70 13 1 0

scanFormat$323:	; Assign shortInt 0
x25796:	mov word [bp + 15], 0	; 5: 199 70 15 0 0

scanFormat$324:	; Assign longIntOrDouble 0
x25801:	mov word [bp + 17], 0	; 5: 199 70 17 0 0

scanFormat$325:	; Assign longDouble 0
x25806:	mov word [bp + 19], 0	; 5: 199 70 19 0 0

scanFormat$326:	; Assign star 0
x25811:	mov word [bp + 21], 0	; 5: 199 70 21 0 0

scanFormat$327:	; Increment index
x25816:	inc word [bp + 31]	; 3: 255 70 31

scanFormat$328:	; Goto 8
x25819:	jmp scanFormat$8	; 3: 233 26 251

scanFormat$329:	; SetReturnValue g_inCount
x25822:	mov bx, [g_inCount]	; 4: 139 30 237 100

scanFormat$330:	; Return g_inCount
x25826:	mov ax, [bp]	; 3: 139 70 0
x25829:	mov di, [bp + 4]	; 3: 139 126 4
x25832:	mov bp, [bp + 2]	; 3: 139 110 2
x25835:	jmp ax	; 2: 255 224

scanFormat$331:	; FunctionEnd scanFormat

g_inCount:
x25837:	db 0, 0	; 2: 0 0

g_inChars:
x25839:	db 0, 0	; 2: 0 0

scanChar:	; Assign c 0
x25841:	mov byte [bp + 6], 0	; 4: 198 70 6 0

scanChar$1:	; Case 5 g_inStatus 0
x25845:	mov ax, [g_inStatus]	; 3: 161 202 95
x25848:	cmp ax, 0	; 3: 131 248 0
x25851:	je scanChar$5	; 2: 116 7

scanChar$2:	; Case 18 g_inStatus 1
x25853:	cmp ax, 1	; 3: 131 248 1
x25856:	je scanChar$18	; 2: 116 50

scanChar$3:	; CaseEnd g_inStatus

scanChar$4:	; Goto 26
x25858:	jmp scanChar$26	; 2: 235 79

scanChar$5:	; IntegralToIntegral £temporary1028 g_inDevice
x25860:	mov ax, [g_inDevice]	; 3: 161 204 95

scanChar$6:	; Assign stream £temporary1028
x25863:	mov [bp + 7], ax	; 3: 137 70 7

scanChar$7:	; Deref £temporary1029 -> stream stream 2
x25866:	mov si, [bp + 7]	; 3: 139 118 7

scanChar$8:	; Assign handle £temporary1029 -> stream
x25869:	mov ax, [si + 2]	; 3: 139 68 2
x25872:	mov [bp + 9], ax	; 3: 137 70 9

scanChar$9:	; AssignRegister ah 63
x25875:	mov ah, 63	; 2: 180 63

scanChar$10:	; AssignRegister bx handle
x25877:	mov bx, [bp + 9]	; 3: 139 94 9

scanChar$11:	; AssignRegister cx 1
x25880:	mov cx, 1	; 3: 185 1 0

scanChar$12:	; address £temporary1034 c
x25883:	mov dx, bp	; 2: 137 234
x25885:	add dx, 6	; 3: 131 194 6

scanChar$13:	; AssignRegister dx £temporary1034

scanChar$14:	; Interrupt 33
x25888:	int 33	; 2: 205 33

scanChar$15:	; Increment g_inChars
x25890:	inc word [g_inChars]	; 4: 255 6 239 100

scanChar$16:	; SetReturnValue c
x25894:	mov bl, [bp + 6]	; 3: 138 94 6

scanChar$17:	; Return c
x25897:	mov ax, [bp]	; 3: 139 70 0
x25900:	mov di, [bp + 4]	; 3: 139 126 4
x25903:	mov bp, [bp + 2]	; 3: 139 110 2
x25906:	jmp ax	; 2: 255 224

scanChar$18:	; IntegralToIntegral £temporary1036 g_inDevice
x25908:	mov ax, [g_inDevice]	; 3: 161 204 95

scanChar$19:	; Assign inString £temporary1036
x25911:	mov [bp + 11], ax	; 3: 137 70 11

scanChar$20:	; Assign £temporary1037 g_inChars
x25914:	mov ax, [g_inChars]	; 3: 161 239 100

scanChar$21:	; Increment g_inChars
x25917:	inc word [g_inChars]	; 4: 255 6 239 100

scanChar$22:	; BinaryAdd £temporary1040 inString £temporary1037
x25921:	mov si, [bp + 11]	; 3: 139 118 11
x25924:	add si, ax	; 2: 1 198

scanChar$23:	; Deref £temporary1039 -> £temporary1040 £temporary1040 0

scanChar$24:	; SetReturnValue £temporary1039 -> £temporary1040
x25926:	mov bl, [si]	; 2: 138 28

scanChar$25:	; Return £temporary1039 -> £temporary1040
x25928:	mov ax, [bp]	; 3: 139 70 0
x25931:	mov di, [bp + 4]	; 3: 139 126 4
x25934:	mov bp, [bp + 2]	; 3: 139 110 2
x25937:	jmp ax	; 2: 255 224

scanChar$26:	; SetReturnValue 0
x25939:	mov bl, 0	; 2: 179 0

scanChar$27:	; Return 0
x25941:	mov ax, [bp]	; 3: 139 70 0
x25944:	mov di, [bp + 4]	; 3: 139 126 4
x25947:	mov bp, [bp + 2]	; 3: 139 110 2
x25950:	jmp ax	; 2: 255 224

scanChar$28:	; FunctionEnd scanChar

scanString:	; Assign index 0
x25952:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

scanString$1:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$2:	; Call 12 scanChar 0
x25957:	mov word [bp + 12], scanString$3	; 5: 199 70 12 115 101
x25962:	mov [bp + 14], bp	; 3: 137 110 14
x25965:	add bp, 12	; 3: 131 197 12
x25968:	jmp scanChar	; 3: 233 126 255

scanString$3:	; PostCall 12

scanString$4:	; GetReturnValue £temporary1106

scanString$5:	; Assign input £temporary1106
x25971:	mov [bp + 12], bl	; 3: 136 94 12

scanString$6:	; Assign found 0
x25974:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanString$7:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$8:	; IntegralToIntegral £temporary1107 input
x25979:	mov al, [bp + 12]	; 3: 138 70 12
x25982:	and ax, 255	; 3: 37 255 0
x25985:	cmp al, 0	; 2: 60 0
x25987:	jge scanString$9	; 2: 125 4
x25989:	neg al	; 2: 246 216
x25991:	neg ax	; 2: 247 216

scanString$9:	; Parameter 15 £temporary1107 6
x25993:	mov [bp + 21], ax	; 3: 137 70 21

scanString$10:	; Call 15 isspace 0
x25996:	mov word [bp + 15], scanString$11	; 5: 199 70 15 154 101
x26001:	mov [bp + 17], bp	; 3: 137 110 17
x26004:	add bp, 15	; 3: 131 197 15
x26007:	jmp isspace	; 3: 233 19 2

scanString$11:	; PostCall 15

scanString$12:	; GetReturnValue £temporary1108

scanString$13:	; Equal 20 £temporary1108 0
x26010:	cmp bx, 0	; 3: 131 251 0
x26013:	je scanString$20	; 2: 116 19

scanString$14:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$15:	; Call 15 scanChar 0
x26015:	mov word [bp + 15], scanString$16	; 5: 199 70 15 173 101
x26020:	mov [bp + 17], bp	; 3: 137 110 17
x26023:	add bp, 15	; 3: 131 197 15
x26026:	jmp scanChar	; 3: 233 68 255

scanString$16:	; PostCall 15

scanString$17:	; GetReturnValue £temporary1109

scanString$18:	; Assign input £temporary1109
x26029:	mov [bp + 12], bl	; 3: 136 94 12

scanString$19:	; Goto 7
x26032:	jmp scanString$7	; 2: 235 201

scanString$20:	; Equal 82 string 0
x26034:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x26038:	je scanString$82	; 4: 15 132 11 1

scanString$21:	; NotEqual 50 precision 0
x26042:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x26046:	jne scanString$50	; 2: 117 121

scanString$22:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$23:	; IntegralToIntegral £temporary1113 input
x26048:	mov al, [bp + 12]	; 3: 138 70 12
x26051:	and ax, 255	; 3: 37 255 0
x26054:	cmp al, 0	; 2: 60 0
x26056:	jge scanString$24	; 2: 125 4
x26058:	neg al	; 2: 246 216
x26060:	neg ax	; 2: 247 216

scanString$24:	; Parameter 15 £temporary1113 6
x26062:	mov [bp + 21], ax	; 3: 137 70 21

scanString$25:	; Call 15 isspace 0
x26065:	mov word [bp + 15], scanString$26	; 5: 199 70 15 223 101
x26070:	mov [bp + 17], bp	; 3: 137 110 17
x26073:	add bp, 15	; 3: 131 197 15
x26076:	jmp isspace	; 3: 233 206 1

scanString$26:	; PostCall 15

scanString$27:	; GetReturnValue £temporary1114

scanString$28:	; NotEqual 45 £temporary1114 0
x26079:	cmp bx, 0	; 3: 131 251 0
x26082:	jne scanString$45	; 2: 117 69

scanString$29:	; IntegralToIntegral £temporary1117 input
x26084:	mov al, [bp + 12]	; 3: 138 70 12
x26087:	and ax, 255	; 3: 37 255 0
x26090:	cmp al, 0	; 2: 60 0
x26092:	jge scanString$30	; 2: 125 4
x26094:	neg al	; 2: 246 216
x26096:	neg ax	; 2: 247 216

scanString$30:	; Equal 45 £temporary1117 -1
x26098:	cmp ax, -1	; 3: 131 248 255
x26101:	je scanString$45	; 2: 116 50

scanString$31:	; Equal 45 input 10
x26103:	cmp byte [bp + 12], 10	; 4: 128 126 12 10
x26107:	je scanString$45	; 2: 116 44

scanString$32:	; Assign £temporary1122 index
x26109:	mov ax, [bp + 10]	; 3: 139 70 10

scanString$33:	; Increment index
x26112:	inc word [bp + 10]	; 3: 255 70 10

scanString$34:	; BinaryAdd £temporary1125 string £temporary1122
x26115:	mov si, [bp + 6]	; 3: 139 118 6
x26118:	add si, ax	; 2: 1 198

scanString$35:	; Deref £temporary1124 -> £temporary1125 £temporary1125 0

scanString$36:	; Assign £temporary1124 -> £temporary1125 input
x26120:	mov al, [bp + 12]	; 3: 138 70 12
x26123:	mov [si], al	; 2: 136 4

scanString$37:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$38:	; Call 15 scanChar 0
x26125:	mov word [bp + 15], scanString$39	; 5: 199 70 15 27 102
x26130:	mov [bp + 17], bp	; 3: 137 110 17
x26133:	add bp, 15	; 3: 131 197 15
x26136:	jmp scanChar	; 3: 233 214 254

scanString$39:	; PostCall 15

scanString$40:	; GetReturnValue £temporary1126

scanString$41:	; Assign input £temporary1126
x26139:	mov [bp + 12], bl	; 3: 136 94 12

scanString$42:	; Assign found 1
x26142:	mov word [bp + 13], 1	; 5: 199 70 13 1 0

scanString$43:	; Increment g_inChars
x26147:	inc word [g_inChars]	; 4: 255 6 239 100

scanString$44:	; Goto 22
x26151:	jmp scanString$22	; 2: 235 151

scanString$45:	; BinaryAdd £temporary1129 string index
x26153:	mov si, [bp + 6]	; 3: 139 118 6
x26156:	add si, [bp + 10]	; 3: 3 118 10

scanString$46:	; Deref £temporary1128 -> £temporary1129 £temporary1129 0

scanString$47:	; Assign £temporary1128 -> £temporary1129 0
x26159:	mov byte [si], 0	; 3: 198 4 0

scanString$48:	; Increment g_inChars
x26162:	inc word [g_inChars]	; 4: 255 6 239 100

scanString$49:	; Goto 126
x26166:	jmp scanString$126	; 3: 233 95 1

scanString$50:	; Assign £temporary1131 precision
x26169:	mov ax, [bp + 8]	; 3: 139 70 8

scanString$51:	; Decrement precision
x26172:	dec word [bp + 8]	; 3: 255 78 8

scanString$52:	; SignedLessThanEqual 76 £temporary1131 0
x26175:	cmp ax, 0	; 3: 131 248 0
x26178:	jle scanString$76	; 2: 126 105

scanString$53:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$54:	; IntegralToIntegral £temporary1134 input
x26180:	mov al, [bp + 12]	; 3: 138 70 12
x26183:	and ax, 255	; 3: 37 255 0
x26186:	cmp al, 0	; 2: 60 0
x26188:	jge scanString$55	; 2: 125 4
x26190:	neg al	; 2: 246 216
x26192:	neg ax	; 2: 247 216

scanString$55:	; Parameter 15 £temporary1134 6
x26194:	mov [bp + 21], ax	; 3: 137 70 21

scanString$56:	; Call 15 isspace 0
x26197:	mov word [bp + 15], scanString$57	; 5: 199 70 15 99 102
x26202:	mov [bp + 17], bp	; 3: 137 110 17
x26205:	add bp, 15	; 3: 131 197 15
x26208:	jmp isspace	; 3: 233 74 1

scanString$57:	; PostCall 15

scanString$58:	; GetReturnValue £temporary1135

scanString$59:	; NotEqual 76 £temporary1135 0
x26211:	cmp bx, 0	; 3: 131 251 0
x26214:	jne scanString$76	; 2: 117 69

scanString$60:	; IntegralToIntegral £temporary1138 input
x26216:	mov al, [bp + 12]	; 3: 138 70 12
x26219:	and ax, 255	; 3: 37 255 0
x26222:	cmp al, 0	; 2: 60 0
x26224:	jge scanString$61	; 2: 125 4
x26226:	neg al	; 2: 246 216
x26228:	neg ax	; 2: 247 216

scanString$61:	; Equal 76 £temporary1138 -1
x26230:	cmp ax, -1	; 3: 131 248 255
x26233:	je scanString$76	; 2: 116 50

scanString$62:	; Equal 76 input 10
x26235:	cmp byte [bp + 12], 10	; 4: 128 126 12 10
x26239:	je scanString$76	; 2: 116 44

scanString$63:	; Assign £temporary1144 index
x26241:	mov ax, [bp + 10]	; 3: 139 70 10

scanString$64:	; Increment index
x26244:	inc word [bp + 10]	; 3: 255 70 10

scanString$65:	; BinaryAdd £temporary1147 string £temporary1144
x26247:	mov si, [bp + 6]	; 3: 139 118 6
x26250:	add si, ax	; 2: 1 198

scanString$66:	; Deref £temporary1146 -> £temporary1147 £temporary1147 0

scanString$67:	; Assign £temporary1146 -> £temporary1147 input
x26252:	mov al, [bp + 12]	; 3: 138 70 12
x26255:	mov [si], al	; 2: 136 4

scanString$68:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$69:	; Call 15 scanChar 0
x26257:	mov word [bp + 15], scanString$70	; 5: 199 70 15 159 102
x26262:	mov [bp + 17], bp	; 3: 137 110 17
x26265:	add bp, 15	; 3: 131 197 15
x26268:	jmp scanChar	; 3: 233 82 254

scanString$70:	; PostCall 15

scanString$71:	; GetReturnValue £temporary1148

scanString$72:	; Assign input £temporary1148
x26271:	mov [bp + 12], bl	; 3: 136 94 12

scanString$73:	; Assign found 1
x26274:	mov word [bp + 13], 1	; 5: 199 70 13 1 0

scanString$74:	; Increment g_inChars
x26279:	inc word [g_inChars]	; 4: 255 6 239 100

scanString$75:	; Goto 50
x26283:	jmp scanString$50	; 2: 235 140

scanString$76:	; SignedLessThanEqual 126 precision 0
x26285:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x26289:	jle scanString$126	; 4: 15 142 227 0

scanString$77:	; BinaryAdd £temporary1152 string index
x26293:	mov si, [bp + 6]	; 3: 139 118 6
x26296:	add si, [bp + 10]	; 3: 3 118 10

scanString$78:	; Deref £temporary1151 -> £temporary1152 £temporary1152 0

scanString$79:	; Assign £temporary1151 -> £temporary1152 0
x26299:	mov byte [si], 0	; 3: 198 4 0

scanString$80:	; Increment g_inChars
x26302:	inc word [g_inChars]	; 4: 255 6 239 100

scanString$81:	; Goto 126
x26306:	jmp scanString$126	; 3: 233 211 0

scanString$82:	; NotEqual 103 precision 0
x26309:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x26313:	jne scanString$103	; 2: 117 95

scanString$83:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$84:	; IntegralToIntegral £temporary1155 input
x26315:	mov al, [bp + 12]	; 3: 138 70 12
x26318:	and ax, 255	; 3: 37 255 0
x26321:	cmp al, 0	; 2: 60 0
x26323:	jge scanString$85	; 2: 125 4
x26325:	neg al	; 2: 246 216
x26327:	neg ax	; 2: 247 216

scanString$85:	; Parameter 15 £temporary1155 6
x26329:	mov [bp + 21], ax	; 3: 137 70 21

scanString$86:	; Call 15 isspace 0
x26332:	mov word [bp + 15], scanString$87	; 5: 199 70 15 234 102
x26337:	mov [bp + 17], bp	; 3: 137 110 17
x26340:	add bp, 15	; 3: 131 197 15
x26343:	jmp isspace	; 3: 233 195 0

scanString$87:	; PostCall 15

scanString$88:	; GetReturnValue £temporary1156

scanString$89:	; NotEqual 101 £temporary1156 0
x26346:	cmp bx, 0	; 3: 131 251 0
x26349:	jne scanString$101	; 2: 117 53

scanString$90:	; IntegralToIntegral £temporary1159 input
x26351:	mov al, [bp + 12]	; 3: 138 70 12
x26354:	and ax, 255	; 3: 37 255 0
x26357:	cmp al, 0	; 2: 60 0
x26359:	jge scanString$91	; 2: 125 4
x26361:	neg al	; 2: 246 216
x26363:	neg ax	; 2: 247 216

scanString$91:	; Equal 101 £temporary1159 -1
x26365:	cmp ax, -1	; 3: 131 248 255
x26368:	je scanString$101	; 2: 116 34

scanString$92:	; Equal 101 input 10
x26370:	cmp byte [bp + 12], 10	; 4: 128 126 12 10
x26374:	je scanString$101	; 2: 116 28

scanString$93:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$94:	; Call 15 scanChar 0
x26376:	mov word [bp + 15], scanString$95	; 5: 199 70 15 22 103
x26381:	mov [bp + 17], bp	; 3: 137 110 17
x26384:	add bp, 15	; 3: 131 197 15
x26387:	jmp scanChar	; 3: 233 219 253

scanString$95:	; PostCall 15

scanString$96:	; GetReturnValue £temporary1164

scanString$97:	; Assign input £temporary1164
x26390:	mov [bp + 12], bl	; 3: 136 94 12

scanString$98:	; Assign found 1
x26393:	mov word [bp + 13], 1	; 5: 199 70 13 1 0

scanString$99:	; Increment g_inChars
x26398:	inc word [g_inChars]	; 4: 255 6 239 100

scanString$100:	; Goto 83
x26402:	jmp scanString$83	; 2: 235 167

scanString$101:	; Increment g_inChars
x26404:	inc word [g_inChars]	; 4: 255 6 239 100

scanString$102:	; Goto 126
x26408:	jmp scanString$126	; 2: 235 110

scanString$103:	; Assign £temporary1167 precision
x26410:	mov ax, [bp + 8]	; 3: 139 70 8

scanString$104:	; Decrement precision
x26413:	dec word [bp + 8]	; 3: 255 78 8

scanString$105:	; SignedLessThanEqual 124 £temporary1167 0
x26416:	cmp ax, 0	; 3: 131 248 0
x26419:	jle scanString$124	; 2: 126 89

scanString$106:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$107:	; IntegralToIntegral £temporary1170 input
x26421:	mov al, [bp + 12]	; 3: 138 70 12
x26424:	and ax, 255	; 3: 37 255 0
x26427:	cmp al, 0	; 2: 60 0
x26429:	jge scanString$108	; 2: 125 4
x26431:	neg al	; 2: 246 216
x26433:	neg ax	; 2: 247 216

scanString$108:	; Parameter 15 £temporary1170 6
x26435:	mov [bp + 21], ax	; 3: 137 70 21

scanString$109:	; Call 15 isspace 0
x26438:	mov word [bp + 15], scanString$110	; 5: 199 70 15 84 103
x26443:	mov [bp + 17], bp	; 3: 137 110 17
x26446:	add bp, 15	; 3: 131 197 15
x26449:	nop	; 1: 144
x26450:	jmp isspace	; 2: 235 89

scanString$110:	; PostCall 15

scanString$111:	; GetReturnValue £temporary1171

scanString$112:	; NotEqual 124 £temporary1171 0
x26452:	cmp bx, 0	; 3: 131 251 0
x26455:	jne scanString$124	; 2: 117 53

scanString$113:	; IntegralToIntegral £temporary1174 input
x26457:	mov al, [bp + 12]	; 3: 138 70 12
x26460:	and ax, 255	; 3: 37 255 0
x26463:	cmp al, 0	; 2: 60 0
x26465:	jge scanString$114	; 2: 125 4
x26467:	neg al	; 2: 246 216
x26469:	neg ax	; 2: 247 216

scanString$114:	; Equal 124 £temporary1174 -1
x26471:	cmp ax, -1	; 3: 131 248 255
x26474:	je scanString$124	; 2: 116 34

scanString$115:	; Equal 124 input 10
x26476:	cmp byte [bp + 12], 10	; 4: 128 126 12 10
x26480:	je scanString$124	; 2: 116 28

scanString$116:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$117:	; Call 15 scanChar 0
x26482:	mov word [bp + 15], scanString$118	; 5: 199 70 15 128 103
x26487:	mov [bp + 17], bp	; 3: 137 110 17
x26490:	add bp, 15	; 3: 131 197 15
x26493:	jmp scanChar	; 3: 233 113 253

scanString$118:	; PostCall 15

scanString$119:	; GetReturnValue £temporary1180

scanString$120:	; Assign input £temporary1180
x26496:	mov [bp + 12], bl	; 3: 136 94 12

scanString$121:	; Assign found 1
x26499:	mov word [bp + 13], 1	; 5: 199 70 13 1 0

scanString$122:	; Increment g_inChars
x26504:	inc word [g_inChars]	; 4: 255 6 239 100

scanString$123:	; Goto 103
x26508:	jmp scanString$103	; 2: 235 156

scanString$124:	; SignedLessThanEqual 126 precision 0
x26510:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x26514:	jle scanString$126	; 2: 126 4

scanString$125:	; Increment g_inChars
x26516:	inc word [g_inChars]	; 4: 255 6 239 100

scanString$126:	; Equal 128 found 0
x26520:	cmp word [bp + 13], 0	; 4: 131 126 13 0
x26524:	je scanString$128	; 2: 116 4

scanString$127:	; Increment g_inCount
x26526:	inc word [g_inCount]	; 4: 255 6 237 100

scanString$128:	; Return 0
x26530:	mov ax, [bp]	; 3: 139 70 0
x26533:	mov di, [bp + 4]	; 3: 139 126 4
x26536:	mov bp, [bp + 2]	; 3: 139 110 2
x26539:	jmp ax	; 2: 255 224

scanString$129:	; FunctionEnd scanString

isspace:	; Equal 6 c 32
x26541:	cmp word [bp + 6], 32	; 4: 131 126 6 32
x26545:	je isspace$6	; 2: 116 30

isspace$1:	; Equal 6 c 12
x26547:	cmp word [bp + 6], 12	; 4: 131 126 6 12
x26551:	je isspace$6	; 2: 116 24

isspace$2:	; Equal 6 c 10
x26553:	cmp word [bp + 6], 10	; 4: 131 126 6 10
x26557:	je isspace$6	; 2: 116 18

isspace$3:	; Equal 6 c 13
x26559:	cmp word [bp + 6], 13	; 4: 131 126 6 13
x26563:	je isspace$6	; 2: 116 12

isspace$4:	; Equal 6 c 9
x26565:	cmp word [bp + 6], 9	; 4: 131 126 6 9
x26569:	je isspace$6	; 2: 116 6

isspace$5:	; NotEqual 8 c 11
x26571:	cmp word [bp + 6], 11	; 4: 131 126 6 11
x26575:	jne isspace$8	; 2: 117 5

isspace$6:	; Assign £temporary251 1
x26577:	mov bx, 1	; 3: 187 1 0

isspace$7:	; Goto 9
x26580:	jmp isspace$9	; 2: 235 3

isspace$8:	; Assign £temporary251 0
x26582:	mov bx, 0	; 3: 187 0 0

isspace$9:	; SetReturnValue £temporary251

isspace$10:	; Return £temporary251
x26585:	mov ax, [bp]	; 3: 139 70 0
x26588:	mov di, [bp + 4]	; 3: 139 126 4
x26591:	mov bp, [bp + 2]	; 3: 139 110 2
x26594:	jmp ax	; 2: 255 224

isspace$11:	; FunctionEnd isspace

scanLongInt:	; Assign longValue 0
x26596:	mov dword [bp + 8], 0	; 8: 102 199 70 8 0 0 0 0

scanLongInt$1:	; Assign minus 0
x26604:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

scanLongInt$2:	; Assign found 0
x26609:	mov word [bp + 14], 0	; 5: 199 70 14 0 0

scanLongInt$3:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$4:	; Call 16 scanChar 0
x26614:	mov word [bp + 16], scanLongInt$5	; 5: 199 70 16 4 104
x26619:	mov [bp + 18], bp	; 3: 137 110 18
x26622:	add bp, 16	; 3: 131 197 16
x26625:	jmp scanChar	; 3: 233 237 252

scanLongInt$5:	; PostCall 16

scanLongInt$6:	; GetReturnValue £temporary1243

scanLongInt$7:	; Assign input £temporary1243
x26628:	mov [bp + 16], bl	; 3: 136 94 16

scanLongInt$8:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$9:	; IntegralToIntegral £temporary1244 input
x26631:	mov al, [bp + 16]	; 3: 138 70 16
x26634:	and ax, 255	; 3: 37 255 0
x26637:	cmp al, 0	; 2: 60 0
x26639:	jge scanLongInt$10	; 2: 125 4
x26641:	neg al	; 2: 246 216
x26643:	neg ax	; 2: 247 216

scanLongInt$10:	; Parameter 17 £temporary1244 6
x26645:	mov [bp + 23], ax	; 3: 137 70 23

scanLongInt$11:	; Call 17 isspace 0
x26648:	mov word [bp + 17], scanLongInt$12	; 5: 199 70 17 38 104
x26653:	mov [bp + 19], bp	; 3: 137 110 19
x26656:	add bp, 17	; 3: 131 197 17
x26659:	nop	; 1: 144
x26660:	jmp isspace	; 2: 235 135

scanLongInt$12:	; PostCall 17

scanLongInt$13:	; GetReturnValue £temporary1245

scanLongInt$14:	; Equal 21 £temporary1245 0
x26662:	cmp bx, 0	; 3: 131 251 0
x26665:	je scanLongInt$21	; 2: 116 19

scanLongInt$15:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$16:	; Call 17 scanChar 0
x26667:	mov word [bp + 17], scanLongInt$17	; 5: 199 70 17 57 104
x26672:	mov [bp + 19], bp	; 3: 137 110 19
x26675:	add bp, 17	; 3: 131 197 17
x26678:	jmp scanChar	; 3: 233 184 252

scanLongInt$17:	; PostCall 17

scanLongInt$18:	; GetReturnValue £temporary1246

scanLongInt$19:	; Assign input £temporary1246
x26681:	mov [bp + 16], bl	; 3: 136 94 16

scanLongInt$20:	; Goto 8
x26684:	jmp scanLongInt$8	; 2: 235 201

scanLongInt$21:	; NotEqual 28 input 43
x26686:	cmp byte [bp + 16], 43	; 4: 128 126 16 43
x26690:	jne scanLongInt$28	; 2: 117 19

scanLongInt$22:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$23:	; Call 17 scanChar 0
x26692:	mov word [bp + 17], scanLongInt$24	; 5: 199 70 17 82 104
x26697:	mov [bp + 19], bp	; 3: 137 110 19
x26700:	add bp, 17	; 3: 131 197 17
x26703:	jmp scanChar	; 3: 233 159 252

scanLongInt$24:	; PostCall 17

scanLongInt$25:	; GetReturnValue £temporary1249

scanLongInt$26:	; Assign input £temporary1249
x26706:	mov [bp + 16], bl	; 3: 136 94 16

scanLongInt$27:	; Goto 35
x26709:	jmp scanLongInt$35	; 2: 235 28

scanLongInt$28:	; NotEqual 35 input 45
x26711:	cmp byte [bp + 16], 45	; 4: 128 126 16 45
x26715:	jne scanLongInt$35	; 2: 117 22

scanLongInt$29:	; Assign minus 1
x26717:	mov word [bp + 12], 1	; 5: 199 70 12 1 0

scanLongInt$30:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$31:	; Call 17 scanChar 0
x26722:	mov word [bp + 17], scanLongInt$32	; 5: 199 70 17 112 104
x26727:	mov [bp + 19], bp	; 3: 137 110 19
x26730:	add bp, 17	; 3: 131 197 17
x26733:	jmp scanChar	; 3: 233 129 252

scanLongInt$32:	; PostCall 17

scanLongInt$33:	; GetReturnValue £temporary1251

scanLongInt$34:	; Assign input £temporary1251
x26736:	mov [bp + 16], bl	; 3: 136 94 16

scanLongInt$35:	; NotEqual 59 base 0
x26739:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x26743:	jne scanLongInt$59	; 2: 117 95

scanLongInt$36:	; NotEqual 58 input 48
x26745:	cmp byte [bp + 16], 48	; 4: 128 126 16 48
x26749:	jne scanLongInt$58	; 2: 117 84

scanLongInt$37:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$38:	; Call 17 scanChar 0
x26751:	mov word [bp + 17], scanLongInt$39	; 5: 199 70 17 141 104
x26756:	mov [bp + 19], bp	; 3: 137 110 19
x26759:	add bp, 17	; 3: 131 197 17
x26762:	jmp scanChar	; 3: 233 100 252

scanLongInt$39:	; PostCall 17

scanLongInt$40:	; GetReturnValue £temporary1254

scanLongInt$41:	; Assign input £temporary1254
x26765:	mov [bp + 16], bl	; 3: 136 94 16

scanLongInt$42:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$43:	; IntegralToIntegral £temporary1255 input
x26768:	mov al, [bp + 16]	; 3: 138 70 16
x26771:	and ax, 255	; 3: 37 255 0
x26774:	cmp al, 0	; 2: 60 0
x26776:	jge scanLongInt$44	; 2: 125 4
x26778:	neg al	; 2: 246 216
x26780:	neg ax	; 2: 247 216

scanLongInt$44:	; Parameter 17 £temporary1255 6
x26782:	mov [bp + 23], ax	; 3: 137 70 23

scanLongInt$45:	; Call 17 tolower 0
x26785:	mov word [bp + 17], scanLongInt$46	; 5: 199 70 17 175 104
x26790:	mov [bp + 19], bp	; 3: 137 110 19
x26793:	add bp, 17	; 3: 131 197 17
x26796:	jmp tolower	; 3: 233 112 188

scanLongInt$46:	; PostCall 17

scanLongInt$47:	; GetReturnValue £temporary1256

scanLongInt$48:	; NotEqual 56 £temporary1256 120
x26799:	cmp bx, 120	; 3: 131 251 120
x26802:	jne scanLongInt$56	; 2: 117 24

scanLongInt$49:	; Assign base 16
x26804:	mov word [bp + 6], 16	; 5: 199 70 6 16 0

scanLongInt$50:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$51:	; Call 17 scanChar 0
x26809:	mov word [bp + 17], scanLongInt$52	; 5: 199 70 17 199 104
x26814:	mov [bp + 19], bp	; 3: 137 110 19
x26817:	add bp, 17	; 3: 131 197 17
x26820:	jmp scanChar	; 3: 233 42 252

scanLongInt$52:	; PostCall 17

scanLongInt$53:	; GetReturnValue £temporary1258

scanLongInt$54:	; Assign input £temporary1258
x26823:	mov [bp + 16], bl	; 3: 136 94 16

scanLongInt$55:	; Goto 59
x26826:	jmp scanLongInt$59	; 2: 235 12

scanLongInt$56:	; Assign base 8
x26828:	mov word [bp + 6], 8	; 5: 199 70 6 8 0

scanLongInt$57:	; Goto 59
x26833:	jmp scanLongInt$59	; 2: 235 5

scanLongInt$58:	; Assign base 10
x26835:	mov word [bp + 6], 10	; 5: 199 70 6 10 0

scanLongInt$59:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$60:	; Parameter 17 input 6
x26840:	mov al, [bp + 16]	; 3: 138 70 16
x26843:	mov [bp + 23], al	; 3: 136 70 23

scanLongInt$61:	; Parameter 17 base 7
x26846:	mov ax, [bp + 6]	; 3: 139 70 6
x26849:	mov [bp + 24], ax	; 3: 137 70 24

scanLongInt$62:	; Call 17 isDigitInBase 0
x26852:	mov word [bp + 17], scanLongInt$63	; 5: 199 70 17 242 104
x26857:	mov [bp + 19], bp	; 3: 137 110 19
x26860:	add bp, 17	; 3: 131 197 17
x26863:	jmp @2758$isDigitInBase	; 3: 233 167 0

scanLongInt$63:	; PostCall 17

scanLongInt$64:	; GetReturnValue £temporary1259

scanLongInt$65:	; Equal 82 £temporary1259 0
x26866:	cmp bx, 0	; 3: 131 251 0
x26869:	je scanLongInt$82	; 2: 116 100

scanLongInt$66:	; IntegralToIntegral £temporary1260 base
x26871:	mov bx, [bp + 6]	; 3: 139 94 6
x26874:	and ebx, 65535	; 7: 102 129 227 255 255 0 0
x26881:	cmp bx, 0	; 3: 131 251 0
x26884:	jge scanLongInt$67	; 2: 125 5
x26886:	neg bx	; 2: 247 219
x26888:	neg ebx	; 3: 102 247 219

scanLongInt$67:	; SignedMultiply longValue longValue £temporary1260
x26891:	mov eax, [bp + 8]	; 4: 102 139 70 8
x26895:	xor edx, edx	; 3: 102 49 210
x26898:	imul ebx	; 3: 102 247 235
x26901:	mov [bp + 8], eax	; 4: 102 137 70 8

scanLongInt$68:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$69:	; Parameter 17 input 6
x26905:	mov al, [bp + 16]	; 3: 138 70 16
x26908:	mov [bp + 23], al	; 3: 136 70 23

scanLongInt$70:	; Call 17 digitToValue 0
x26911:	mov word [bp + 17], scanLongInt$71	; 5: 199 70 17 45 105
x26916:	mov [bp + 19], bp	; 3: 137 110 19
x26919:	add bp, 17	; 3: 131 197 17
x26922:	jmp @2822$digitToValue	; 3: 233 243 1

scanLongInt$71:	; PostCall 17

scanLongInt$72:	; GetReturnValue £temporary1262

scanLongInt$73:	; IntegralToIntegral £temporary1263 £temporary1262
x26925:	and ebx, 65535	; 7: 102 129 227 255 255 0 0
x26932:	cmp bx, 0	; 3: 131 251 0
x26935:	jge scanLongInt$74	; 2: 125 5
x26937:	neg bx	; 2: 247 219
x26939:	neg ebx	; 3: 102 247 219

scanLongInt$74:	; BinaryAdd longValue longValue £temporary1263
x26942:	add [bp + 8], ebx	; 4: 102 1 94 8

scanLongInt$75:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$76:	; Call 17 scanChar 0
x26946:	mov word [bp + 17], scanLongInt$77	; 5: 199 70 17 80 105
x26951:	mov [bp + 19], bp	; 3: 137 110 19
x26954:	add bp, 17	; 3: 131 197 17
x26957:	jmp scanChar	; 3: 233 161 251

scanLongInt$77:	; PostCall 17

scanLongInt$78:	; GetReturnValue £temporary1265

scanLongInt$79:	; Assign input £temporary1265
x26960:	mov [bp + 16], bl	; 3: 136 94 16

scanLongInt$80:	; Assign found 1
x26963:	mov word [bp + 14], 1	; 5: 199 70 14 1 0

scanLongInt$81:	; Goto 59
x26968:	jmp scanLongInt$59	; 3: 233 125 255

scanLongInt$82:	; Equal 85 minus 0
x26971:	cmp word [bp + 12], 0	; 4: 131 126 12 0
x26975:	je scanLongInt$85	; 2: 116 11

scanLongInt$83:	; UnarySubtract £temporary1267 longValue
x26977:	mov eax, [bp + 8]	; 4: 102 139 70 8
x26981:	neg eax	; 3: 102 247 216

scanLongInt$84:	; Assign longValue £temporary1267
x26984:	mov [bp + 8], eax	; 4: 102 137 70 8

scanLongInt$85:	; Equal 87 found 0
x26988:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x26992:	je scanLongInt$87	; 2: 116 4

scanLongInt$86:	; Increment g_inCount
x26994:	inc word [g_inCount]	; 4: 255 6 237 100

scanLongInt$87:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$88:	; Parameter 17 input 6
x26998:	mov al, [bp + 16]	; 3: 138 70 16
x27001:	mov [bp + 23], al	; 3: 136 70 23

scanLongInt$89:	; Call 17 unscanChar 0
x27004:	mov word [bp + 17], scanLongInt$90	; 5: 199 70 17 138 105
x27009:	mov [bp + 19], bp	; 3: 137 110 19
x27012:	add bp, 17	; 3: 131 197 17
x27015:	jmp unscanChar	; 3: 233 112 2

scanLongInt$90:	; PostCall 17

scanLongInt$91:	; SetReturnValue longValue
x27018:	mov ebx, [bp + 8]	; 4: 102 139 94 8

scanLongInt$92:	; Return longValue
x27022:	mov ax, [bp]	; 3: 139 70 0
x27025:	mov di, [bp + 4]	; 3: 139 126 4
x27028:	mov bp, [bp + 2]	; 3: 139 110 2
x27031:	jmp ax	; 2: 255 224

scanLongInt$93:	; FunctionEnd scanLongInt

@2758$isDigitInBase:	; CallHeader 9 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

@2758$isDigitInBase$1:	; IntegralToIntegral £temporary1191 c
x27033:	mov al, [bp + 6]	; 3: 138 70 6
x27036:	and ax, 255	; 3: 37 255 0
x27039:	cmp al, 0	; 2: 60 0
x27041:	jge @2758$isDigitInBase$2	; 2: 125 4
x27043:	neg al	; 2: 246 216
x27045:	neg ax	; 2: 247 216

@2758$isDigitInBase$2:	; Parameter 9 £temporary1191 6
x27047:	mov [bp + 15], ax	; 3: 137 70 15

@2758$isDigitInBase$3:	; Call 9 isdigit 0
x27050:	mov word [bp + 9], @2758$isDigitInBase$4	; 5: 199 70 9 184 105
x27055:	mov [bp + 11], bp	; 3: 137 110 11
x27058:	add bp, 9	; 3: 131 197 9
x27061:	jmp isdigit	; 3: 233 180 193

@2758$isDigitInBase$4:	; PostCall 9

@2758$isDigitInBase$5:	; GetReturnValue £temporary1192

@2758$isDigitInBase$6:	; Equal 17 £temporary1192 0
x27064:	cmp bx, 0	; 3: 131 251 0
x27067:	je @2758$isDigitInBase$17	; 2: 116 52

@2758$isDigitInBase$7:	; BinarySubtract £temporary1193 c 48
x27069:	mov al, [bp + 6]	; 3: 138 70 6
x27072:	sub al, 48	; 2: 44 48

@2758$isDigitInBase$8:	; IntegralToIntegral £temporary1194 £temporary1193
x27074:	and ax, 255	; 3: 37 255 0
x27077:	cmp al, 0	; 2: 60 0
x27079:	jge @2758$isDigitInBase$9	; 2: 125 4
x27081:	neg al	; 2: 246 216
x27083:	neg ax	; 2: 247 216

@2758$isDigitInBase$9:	; Assign value £temporary1194
x27085:	mov [bp + 9], ax	; 3: 137 70 9

@2758$isDigitInBase$10:	; SignedLessThan 14 value 0
x27088:	cmp word [bp + 9], 0	; 4: 131 126 9 0
x27092:	jl @2758$isDigitInBase$14	; 2: 124 13

@2758$isDigitInBase$11:	; SignedGreaterThanEqual 14 value base
x27094:	mov ax, [bp + 7]	; 3: 139 70 7
x27097:	cmp [bp + 9], ax	; 3: 57 70 9
x27100:	jge @2758$isDigitInBase$14	; 2: 125 5

@2758$isDigitInBase$12:	; Assign £temporary1198 1
x27102:	mov bx, 1	; 3: 187 1 0

@2758$isDigitInBase$13:	; Goto 15
x27105:	jmp @2758$isDigitInBase$15	; 2: 235 3

@2758$isDigitInBase$14:	; Assign £temporary1198 0
x27107:	mov bx, 0	; 3: 187 0 0

@2758$isDigitInBase$15:	; SetReturnValue £temporary1198

@2758$isDigitInBase$16:	; Return £temporary1198
x27110:	mov ax, [bp]	; 3: 139 70 0
x27113:	mov di, [bp + 4]	; 3: 139 126 4
x27116:	mov bp, [bp + 2]	; 3: 139 110 2
x27119:	jmp ax	; 2: 255 224

@2758$isDigitInBase$17:	; CallHeader 9 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

@2758$isDigitInBase$18:	; IntegralToIntegral £temporary1199 c
x27121:	mov al, [bp + 6]	; 3: 138 70 6
x27124:	and ax, 255	; 3: 37 255 0
x27127:	cmp al, 0	; 2: 60 0
x27129:	jge @2758$isDigitInBase$19	; 2: 125 4
x27131:	neg al	; 2: 246 216
x27133:	neg ax	; 2: 247 216

@2758$isDigitInBase$19:	; Parameter 9 £temporary1199 6
x27135:	mov [bp + 15], ax	; 3: 137 70 15

@2758$isDigitInBase$20:	; Call 9 islower 0
x27138:	mov word [bp + 9], @2758$isDigitInBase$21	; 5: 199 70 9 16 106
x27143:	mov [bp + 11], bp	; 3: 137 110 11
x27146:	add bp, 9	; 3: 131 197 9
x27149:	jmp islower	; 3: 233 165 0

@2758$isDigitInBase$21:	; PostCall 9

@2758$isDigitInBase$22:	; GetReturnValue £temporary1200

@2758$isDigitInBase$23:	; Equal 34 £temporary1200 0
x27152:	cmp bx, 0	; 3: 131 251 0
x27155:	je @2758$isDigitInBase$34	; 2: 116 55

@2758$isDigitInBase$24:	; BinarySubtract £temporary1201 c 97
x27157:	mov al, [bp + 6]	; 3: 138 70 6
x27160:	sub al, 97	; 2: 44 97

@2758$isDigitInBase$25:	; IntegralToIntegral £temporary1202 £temporary1201
x27162:	and ax, 255	; 3: 37 255 0
x27165:	cmp al, 0	; 2: 60 0
x27167:	jge @2758$isDigitInBase$26	; 2: 125 4
x27169:	neg al	; 2: 246 216
x27171:	neg ax	; 2: 247 216

@2758$isDigitInBase$26:	; BinaryAdd value £temporary1202 10
x27173:	add ax, 10	; 3: 131 192 10
x27176:	mov [bp + 9], ax	; 3: 137 70 9

@2758$isDigitInBase$27:	; SignedLessThan 31 value 0
x27179:	cmp word [bp + 9], 0	; 4: 131 126 9 0
x27183:	jl @2758$isDigitInBase$31	; 2: 124 13

@2758$isDigitInBase$28:	; SignedGreaterThanEqual 31 value base
x27185:	mov ax, [bp + 7]	; 3: 139 70 7
x27188:	cmp [bp + 9], ax	; 3: 57 70 9
x27191:	jge @2758$isDigitInBase$31	; 2: 125 5

@2758$isDigitInBase$29:	; Assign £temporary1207 1
x27193:	mov bx, 1	; 3: 187 1 0

@2758$isDigitInBase$30:	; Goto 32
x27196:	jmp @2758$isDigitInBase$32	; 2: 235 3

@2758$isDigitInBase$31:	; Assign £temporary1207 0
x27198:	mov bx, 0	; 3: 187 0 0

@2758$isDigitInBase$32:	; SetReturnValue £temporary1207

@2758$isDigitInBase$33:	; Return £temporary1207
x27201:	mov ax, [bp]	; 3: 139 70 0
x27204:	mov di, [bp + 4]	; 3: 139 126 4
x27207:	mov bp, [bp + 2]	; 3: 139 110 2
x27210:	jmp ax	; 2: 255 224

@2758$isDigitInBase$34:	; CallHeader 9 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

@2758$isDigitInBase$35:	; IntegralToIntegral £temporary1208 c
x27212:	mov al, [bp + 6]	; 3: 138 70 6
x27215:	and ax, 255	; 3: 37 255 0
x27218:	cmp al, 0	; 2: 60 0
x27220:	jge @2758$isDigitInBase$36	; 2: 125 4
x27222:	neg al	; 2: 246 216
x27224:	neg ax	; 2: 247 216

@2758$isDigitInBase$36:	; Parameter 9 £temporary1208 6
x27226:	mov [bp + 15], ax	; 3: 137 70 15

@2758$isDigitInBase$37:	; Call 9 isupper 0
x27229:	mov word [bp + 9], @2758$isDigitInBase$38	; 5: 199 70 9 107 106
x27234:	mov [bp + 11], bp	; 3: 137 110 11
x27237:	add bp, 9	; 3: 131 197 9
x27240:	jmp isupper	; 3: 233 162 179

@2758$isDigitInBase$38:	; PostCall 9

@2758$isDigitInBase$39:	; GetReturnValue £temporary1209

@2758$isDigitInBase$40:	; Equal 51 £temporary1209 0
x27243:	cmp bx, 0	; 3: 131 251 0
x27246:	je @2758$isDigitInBase$51	; 2: 116 55

@2758$isDigitInBase$41:	; BinarySubtract £temporary1210 c 65
x27248:	mov al, [bp + 6]	; 3: 138 70 6
x27251:	sub al, 65	; 2: 44 65

@2758$isDigitInBase$42:	; IntegralToIntegral £temporary1211 £temporary1210
x27253:	and ax, 255	; 3: 37 255 0
x27256:	cmp al, 0	; 2: 60 0
x27258:	jge @2758$isDigitInBase$43	; 2: 125 4
x27260:	neg al	; 2: 246 216
x27262:	neg ax	; 2: 247 216

@2758$isDigitInBase$43:	; BinaryAdd value £temporary1211 10
x27264:	add ax, 10	; 3: 131 192 10
x27267:	mov [bp + 9], ax	; 3: 137 70 9

@2758$isDigitInBase$44:	; SignedLessThan 48 value 0
x27270:	cmp word [bp + 9], 0	; 4: 131 126 9 0
x27274:	jl @2758$isDigitInBase$48	; 2: 124 13

@2758$isDigitInBase$45:	; SignedGreaterThanEqual 48 value base
x27276:	mov ax, [bp + 7]	; 3: 139 70 7
x27279:	cmp [bp + 9], ax	; 3: 57 70 9
x27282:	jge @2758$isDigitInBase$48	; 2: 125 5

@2758$isDigitInBase$46:	; Assign £temporary1216 1
x27284:	mov bx, 1	; 3: 187 1 0

@2758$isDigitInBase$47:	; Goto 49
x27287:	jmp @2758$isDigitInBase$49	; 2: 235 3

@2758$isDigitInBase$48:	; Assign £temporary1216 0
x27289:	mov bx, 0	; 3: 187 0 0

@2758$isDigitInBase$49:	; SetReturnValue £temporary1216

@2758$isDigitInBase$50:	; Return £temporary1216
x27292:	mov ax, [bp]	; 3: 139 70 0
x27295:	mov di, [bp + 4]	; 3: 139 126 4
x27298:	mov bp, [bp + 2]	; 3: 139 110 2
x27301:	jmp ax	; 2: 255 224

@2758$isDigitInBase$51:	; SetReturnValue 0
x27303:	mov bx, 0	; 3: 187 0 0

@2758$isDigitInBase$52:	; Return 0
x27306:	mov ax, [bp]	; 3: 139 70 0
x27309:	mov di, [bp + 4]	; 3: 139 126 4
x27312:	mov bp, [bp + 2]	; 3: 139 110 2
x27315:	jmp ax	; 2: 255 224

@2758$isDigitInBase$53:	; FunctionEnd isDigitInBase

islower:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

islower$1:	; Call 8 localeconv 0
x27317:	mov word [bp + 8], islower$2	; 5: 199 70 8 195 106
x27322:	mov [bp + 10], bp	; 3: 137 110 10
x27325:	add bp, 8	; 3: 131 197 8
x27328:	jmp localeconv	; 3: 233 181 179

islower$2:	; PostCall 8

islower$3:	; GetReturnValue £temporary160

islower$4:	; Assign localeConvPtr £temporary160
x27331:	mov [bp + 8], bx	; 3: 137 94 8

islower$5:	; Equal 19 localeConvPtr 0
x27334:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x27338:	je islower$19	; 2: 116 53

islower$6:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

islower$7:	; Deref £temporary162 -> localeConvPtr localeConvPtr 12
x27340:	mov si, [bp + 8]	; 3: 139 118 8

islower$8:	; Parameter 10 £temporary162 -> localeConvPtr 6
x27343:	mov ax, [si + 12]	; 3: 139 68 12
x27346:	mov [bp + 16], ax	; 3: 137 70 16

islower$9:	; Parameter 10 c 8
x27349:	mov ax, [bp + 6]	; 3: 139 70 6
x27352:	mov [bp + 18], ax	; 3: 137 70 18

islower$10:	; Call 10 strchr 0
x27355:	mov word [bp + 10], islower$11	; 5: 199 70 10 233 106
x27360:	mov [bp + 12], bp	; 3: 137 110 12
x27363:	add bp, 10	; 3: 131 197 10
x27366:	jmp strchr	; 3: 233 213 182

islower$11:	; PostCall 10

islower$12:	; GetReturnValue £temporary163

islower$13:	; Equal 16 £temporary163 0
x27369:	cmp bx, 0	; 3: 131 251 0
x27372:	je islower$16	; 2: 116 5

islower$14:	; Assign £temporary165 1
x27374:	mov bx, 1	; 3: 187 1 0

islower$15:	; Goto 17
x27377:	jmp islower$17	; 2: 235 3

islower$16:	; Assign £temporary165 0
x27379:	mov bx, 0	; 3: 187 0 0

islower$17:	; SetReturnValue £temporary165

islower$18:	; Return £temporary165
x27382:	mov ax, [bp]	; 3: 139 70 0
x27385:	mov di, [bp + 4]	; 3: 139 126 4
x27388:	mov bp, [bp + 2]	; 3: 139 110 2
x27391:	jmp ax	; 2: 255 224

islower$19:	; SignedLessThan 23 c 97
x27393:	cmp word [bp + 6], 97	; 4: 131 126 6 97
x27397:	jl islower$23	; 2: 124 11

islower$20:	; SignedGreaterThan 23 c 122
x27399:	cmp word [bp + 6], 122	; 4: 131 126 6 122
x27403:	jg islower$23	; 2: 127 5

islower$21:	; Assign £temporary169 1
x27405:	mov bx, 1	; 3: 187 1 0

islower$22:	; Goto 24
x27408:	jmp islower$24	; 2: 235 3

islower$23:	; Assign £temporary169 0
x27410:	mov bx, 0	; 3: 187 0 0

islower$24:	; SetReturnValue £temporary169

islower$25:	; Return £temporary169
x27413:	mov ax, [bp]	; 3: 139 70 0
x27416:	mov di, [bp + 4]	; 3: 139 126 4
x27419:	mov bp, [bp + 2]	; 3: 139 110 2
x27422:	jmp ax	; 2: 255 224

islower$26:	; FunctionEnd islower

@2822$digitToValue:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

@2822$digitToValue$1:	; IntegralToIntegral £temporary1223 c
x27424:	mov al, [bp + 6]	; 3: 138 70 6
x27427:	and ax, 255	; 3: 37 255 0
x27430:	cmp al, 0	; 2: 60 0
x27432:	jge @2822$digitToValue$2	; 2: 125 4
x27434:	neg al	; 2: 246 216
x27436:	neg ax	; 2: 247 216

@2822$digitToValue$2:	; Parameter 7 £temporary1223 6
x27438:	mov [bp + 13], ax	; 3: 137 70 13

@2822$digitToValue$3:	; Call 7 isdigit 0
x27441:	mov word [bp + 7], @2822$digitToValue$4	; 5: 199 70 7 63 107
x27446:	mov [bp + 9], bp	; 3: 137 110 9
x27449:	add bp, 7	; 3: 131 197 7
x27452:	jmp isdigit	; 3: 233 45 192

@2822$digitToValue$4:	; PostCall 7

@2822$digitToValue$5:	; GetReturnValue £temporary1224

@2822$digitToValue$6:	; Equal 11 £temporary1224 0
x27455:	cmp bx, 0	; 3: 131 251 0
x27458:	je @2822$digitToValue$11	; 2: 116 30

@2822$digitToValue$7:	; BinarySubtract £temporary1225 c 48
x27460:	mov bl, [bp + 6]	; 3: 138 94 6
x27463:	sub bl, 48	; 3: 128 235 48

@2822$digitToValue$8:	; IntegralToIntegral £temporary1226 £temporary1225
x27466:	and bx, 255	; 4: 129 227 255 0
x27470:	cmp bl, 0	; 3: 128 251 0
x27473:	jge @2822$digitToValue$9	; 2: 125 4
x27475:	neg bl	; 2: 246 219
x27477:	neg bx	; 2: 247 219

@2822$digitToValue$9:	; SetReturnValue £temporary1226

@2822$digitToValue$10:	; Return £temporary1226
x27479:	mov ax, [bp]	; 3: 139 70 0
x27482:	mov di, [bp + 4]	; 3: 139 126 4
x27485:	mov bp, [bp + 2]	; 3: 139 110 2
x27488:	jmp ax	; 2: 255 224

@2822$digitToValue$11:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

@2822$digitToValue$12:	; IntegralToIntegral £temporary1227 c
x27490:	mov al, [bp + 6]	; 3: 138 70 6
x27493:	and ax, 255	; 3: 37 255 0
x27496:	cmp al, 0	; 2: 60 0
x27498:	jge @2822$digitToValue$13	; 2: 125 4
x27500:	neg al	; 2: 246 216
x27502:	neg ax	; 2: 247 216

@2822$digitToValue$13:	; Parameter 7 £temporary1227 6
x27504:	mov [bp + 13], ax	; 3: 137 70 13

@2822$digitToValue$14:	; Call 7 islower 0
x27507:	mov word [bp + 7], @2822$digitToValue$15	; 5: 199 70 7 129 107
x27512:	mov [bp + 9], bp	; 3: 137 110 9
x27515:	add bp, 7	; 3: 131 197 7
x27518:	jmp islower	; 3: 233 52 255

@2822$digitToValue$15:	; PostCall 7

@2822$digitToValue$16:	; GetReturnValue £temporary1228

@2822$digitToValue$17:	; Equal 23 £temporary1228 0
x27521:	cmp bx, 0	; 3: 131 251 0
x27524:	je @2822$digitToValue$23	; 2: 116 33

@2822$digitToValue$18:	; BinarySubtract £temporary1229 c 97
x27526:	mov bl, [bp + 6]	; 3: 138 94 6
x27529:	sub bl, 97	; 3: 128 235 97

@2822$digitToValue$19:	; IntegralToIntegral £temporary1230 £temporary1229
x27532:	and bx, 255	; 4: 129 227 255 0
x27536:	cmp bl, 0	; 3: 128 251 0
x27539:	jge @2822$digitToValue$20	; 2: 125 4
x27541:	neg bl	; 2: 246 219
x27543:	neg bx	; 2: 247 219

@2822$digitToValue$20:	; BinaryAdd £temporary1231 £temporary1230 10
x27545:	add bx, 10	; 3: 131 195 10

@2822$digitToValue$21:	; SetReturnValue £temporary1231

@2822$digitToValue$22:	; Return £temporary1231
x27548:	mov ax, [bp]	; 3: 139 70 0
x27551:	mov di, [bp + 4]	; 3: 139 126 4
x27554:	mov bp, [bp + 2]	; 3: 139 110 2
x27557:	jmp ax	; 2: 255 224

@2822$digitToValue$23:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

@2822$digitToValue$24:	; IntegralToIntegral £temporary1232 c
x27559:	mov al, [bp + 6]	; 3: 138 70 6
x27562:	and ax, 255	; 3: 37 255 0
x27565:	cmp al, 0	; 2: 60 0
x27567:	jge @2822$digitToValue$25	; 2: 125 4
x27569:	neg al	; 2: 246 216
x27571:	neg ax	; 2: 247 216

@2822$digitToValue$25:	; Parameter 7 £temporary1232 6
x27573:	mov [bp + 13], ax	; 3: 137 70 13

@2822$digitToValue$26:	; Call 7 isupper 0
x27576:	mov word [bp + 7], @2822$digitToValue$27	; 5: 199 70 7 198 107
x27581:	mov [bp + 9], bp	; 3: 137 110 9
x27584:	add bp, 7	; 3: 131 197 7
x27587:	jmp isupper	; 3: 233 71 178

@2822$digitToValue$27:	; PostCall 7

@2822$digitToValue$28:	; GetReturnValue £temporary1233

@2822$digitToValue$29:	; Equal 35 £temporary1233 0
x27590:	cmp bx, 0	; 3: 131 251 0
x27593:	je @2822$digitToValue$35	; 2: 116 33

@2822$digitToValue$30:	; BinarySubtract £temporary1234 c 65
x27595:	mov bl, [bp + 6]	; 3: 138 94 6
x27598:	sub bl, 65	; 3: 128 235 65

@2822$digitToValue$31:	; IntegralToIntegral £temporary1235 £temporary1234
x27601:	and bx, 255	; 4: 129 227 255 0
x27605:	cmp bl, 0	; 3: 128 251 0
x27608:	jge @2822$digitToValue$32	; 2: 125 4
x27610:	neg bl	; 2: 246 219
x27612:	neg bx	; 2: 247 219

@2822$digitToValue$32:	; BinaryAdd £temporary1236 £temporary1235 10
x27614:	add bx, 10	; 3: 131 195 10

@2822$digitToValue$33:	; SetReturnValue £temporary1236

@2822$digitToValue$34:	; Return £temporary1236
x27617:	mov ax, [bp]	; 3: 139 70 0
x27620:	mov di, [bp + 4]	; 3: 139 126 4
x27623:	mov bp, [bp + 2]	; 3: 139 110 2
x27626:	jmp ax	; 2: 255 224

@2822$digitToValue$35:	; SetReturnValue 0
x27628:	mov bx, 0	; 3: 187 0 0

@2822$digitToValue$36:	; Return 0
x27631:	mov ax, [bp]	; 3: 139 70 0
x27634:	mov di, [bp + 4]	; 3: 139 126 4
x27637:	mov bp, [bp + 2]	; 3: 139 110 2
x27640:	jmp ax	; 2: 255 224

@2822$digitToValue$37:	; FunctionEnd digitToValue

unscanChar:	; Case 4 g_inStatus 0
x27642:	mov ax, [g_inStatus]	; 3: 161 202 95
x27645:	cmp ax, 0	; 3: 131 248 0
x27648:	je unscanChar$4	; 2: 116 7

unscanChar$1:	; Case 6 g_inStatus 1
x27650:	cmp ax, 1	; 3: 131 248 1
x27653:	je unscanChar$6	; 2: 116 8

unscanChar$2:	; CaseEnd g_inStatus

unscanChar$3:	; Goto 7
x27655:	jmp unscanChar$7	; 2: 235 10

unscanChar$4:	; Decrement g_inChars
x27657:	dec word [g_inChars]	; 4: 255 14 239 100

unscanChar$5:	; Goto 7
x27661:	jmp unscanChar$7	; 2: 235 4

unscanChar$6:	; Decrement g_inChars
x27663:	dec word [g_inChars]	; 4: 255 14 239 100

unscanChar$7:	; Return 0
x27667:	mov ax, [bp]	; 3: 139 70 0
x27670:	mov di, [bp + 4]	; 3: 139 126 4
x27673:	mov bp, [bp + 2]	; 3: 139 110 2
x27676:	jmp ax	; 2: 255 224

unscanChar$8:	; FunctionEnd unscanChar

scanUnsignedLongInt:	; Assign unsignedLongValue 0
x27678:	mov dword [bp + 8], 0	; 8: 102 199 70 8 0 0 0 0

scanUnsignedLongInt$1:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$2:	; Call 16 scanChar 0
x27686:	mov word [bp + 16], scanUnsignedLongInt$3	; 5: 199 70 16 52 108
x27691:	mov [bp + 18], bp	; 3: 137 110 18
x27694:	add bp, 16	; 3: 131 197 16
x27697:	jmp scanChar	; 3: 233 189 248

scanUnsignedLongInt$3:	; PostCall 16

scanUnsignedLongInt$4:	; GetReturnValue £temporary1278

scanUnsignedLongInt$5:	; Assign input £temporary1278
x27700:	mov [bp + 16], bl	; 3: 136 94 16

scanUnsignedLongInt$6:	; Assign found 1
x27703:	mov word [bp + 17], 1	; 5: 199 70 17 1 0

scanUnsignedLongInt$7:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$8:	; IntegralToIntegral £temporary1279 input
x27708:	mov al, [bp + 16]	; 3: 138 70 16
x27711:	and ax, 255	; 3: 37 255 0
x27714:	cmp al, 0	; 2: 60 0
x27716:	jge scanUnsignedLongInt$9	; 2: 125 4
x27718:	neg al	; 2: 246 216
x27720:	neg ax	; 2: 247 216

scanUnsignedLongInt$9:	; Parameter 19 £temporary1279 6
x27722:	mov [bp + 25], ax	; 3: 137 70 25

scanUnsignedLongInt$10:	; Call 19 isspace 0
x27725:	mov word [bp + 19], scanUnsignedLongInt$11	; 5: 199 70 19 91 108
x27730:	mov [bp + 21], bp	; 3: 137 110 21
x27733:	add bp, 19	; 3: 131 197 19
x27736:	jmp isspace	; 3: 233 82 251

scanUnsignedLongInt$11:	; PostCall 19

scanUnsignedLongInt$12:	; GetReturnValue £temporary1280

scanUnsignedLongInt$13:	; Equal 20 £temporary1280 0
x27739:	cmp bx, 0	; 3: 131 251 0
x27742:	je scanUnsignedLongInt$20	; 2: 116 19

scanUnsignedLongInt$14:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$15:	; Call 19 scanChar 0
x27744:	mov word [bp + 19], scanUnsignedLongInt$16	; 5: 199 70 19 110 108
x27749:	mov [bp + 21], bp	; 3: 137 110 21
x27752:	add bp, 19	; 3: 131 197 19
x27755:	jmp scanChar	; 3: 233 131 248

scanUnsignedLongInt$16:	; PostCall 19

scanUnsignedLongInt$17:	; GetReturnValue £temporary1281

scanUnsignedLongInt$18:	; Assign input £temporary1281
x27758:	mov [bp + 16], bl	; 3: 136 94 16

scanUnsignedLongInt$19:	; Goto 7
x27761:	jmp scanUnsignedLongInt$7	; 2: 235 201

scanUnsignedLongInt$20:	; NotEqual 26 input 43
x27763:	cmp byte [bp + 16], 43	; 4: 128 126 16 43
x27767:	jne scanUnsignedLongInt$26	; 2: 117 17

scanUnsignedLongInt$21:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$22:	; Call 19 scanChar 0
x27769:	mov word [bp + 19], scanUnsignedLongInt$23	; 5: 199 70 19 135 108
x27774:	mov [bp + 21], bp	; 3: 137 110 21
x27777:	add bp, 19	; 3: 131 197 19
x27780:	jmp scanChar	; 3: 233 106 248

scanUnsignedLongInt$23:	; PostCall 19

scanUnsignedLongInt$24:	; GetReturnValue £temporary1284

scanUnsignedLongInt$25:	; Assign input £temporary1284
x27783:	mov [bp + 16], bl	; 3: 136 94 16

scanUnsignedLongInt$26:	; NotEqual 50 base 0
x27786:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x27790:	jne scanUnsignedLongInt$50	; 2: 117 95

scanUnsignedLongInt$27:	; NotEqual 49 input 48
x27792:	cmp byte [bp + 16], 48	; 4: 128 126 16 48
x27796:	jne scanUnsignedLongInt$49	; 2: 117 84

scanUnsignedLongInt$28:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$29:	; Call 19 scanChar 0
x27798:	mov word [bp + 19], scanUnsignedLongInt$30	; 5: 199 70 19 164 108
x27803:	mov [bp + 21], bp	; 3: 137 110 21
x27806:	add bp, 19	; 3: 131 197 19
x27809:	jmp scanChar	; 3: 233 77 248

scanUnsignedLongInt$30:	; PostCall 19

scanUnsignedLongInt$31:	; GetReturnValue £temporary1287

scanUnsignedLongInt$32:	; Assign input £temporary1287
x27812:	mov [bp + 16], bl	; 3: 136 94 16

scanUnsignedLongInt$33:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$34:	; IntegralToIntegral £temporary1288 input
x27815:	mov al, [bp + 16]	; 3: 138 70 16
x27818:	and ax, 255	; 3: 37 255 0
x27821:	cmp al, 0	; 2: 60 0
x27823:	jge scanUnsignedLongInt$35	; 2: 125 4
x27825:	neg al	; 2: 246 216
x27827:	neg ax	; 2: 247 216

scanUnsignedLongInt$35:	; Parameter 19 £temporary1288 6
x27829:	mov [bp + 25], ax	; 3: 137 70 25

scanUnsignedLongInt$36:	; Call 19 tolower 0
x27832:	mov word [bp + 19], scanUnsignedLongInt$37	; 5: 199 70 19 198 108
x27837:	mov [bp + 21], bp	; 3: 137 110 21
x27840:	add bp, 19	; 3: 131 197 19
x27843:	jmp tolower	; 3: 233 89 184

scanUnsignedLongInt$37:	; PostCall 19

scanUnsignedLongInt$38:	; GetReturnValue £temporary1289

scanUnsignedLongInt$39:	; NotEqual 47 £temporary1289 120
x27846:	cmp bx, 120	; 3: 131 251 120
x27849:	jne scanUnsignedLongInt$47	; 2: 117 24

scanUnsignedLongInt$40:	; Assign base 16
x27851:	mov word [bp + 6], 16	; 5: 199 70 6 16 0

scanUnsignedLongInt$41:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$42:	; Call 19 scanChar 0
x27856:	mov word [bp + 19], scanUnsignedLongInt$43	; 5: 199 70 19 222 108
x27861:	mov [bp + 21], bp	; 3: 137 110 21
x27864:	add bp, 19	; 3: 131 197 19
x27867:	jmp scanChar	; 3: 233 19 248

scanUnsignedLongInt$43:	; PostCall 19

scanUnsignedLongInt$44:	; GetReturnValue £temporary1291

scanUnsignedLongInt$45:	; Assign input £temporary1291
x27870:	mov [bp + 16], bl	; 3: 136 94 16

scanUnsignedLongInt$46:	; Goto 50
x27873:	jmp scanUnsignedLongInt$50	; 2: 235 12

scanUnsignedLongInt$47:	; Assign base 8
x27875:	mov word [bp + 6], 8	; 5: 199 70 6 8 0

scanUnsignedLongInt$48:	; Goto 50
x27880:	jmp scanUnsignedLongInt$50	; 2: 235 5

scanUnsignedLongInt$49:	; Assign base 10
x27882:	mov word [bp + 6], 10	; 5: 199 70 6 10 0

scanUnsignedLongInt$50:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$51:	; Parameter 19 input 6
x27887:	mov al, [bp + 16]	; 3: 138 70 16
x27890:	mov [bp + 25], al	; 3: 136 70 25

scanUnsignedLongInt$52:	; Parameter 19 base 7
x27893:	mov ax, [bp + 6]	; 3: 139 70 6
x27896:	mov [bp + 26], ax	; 3: 137 70 26

scanUnsignedLongInt$53:	; Call 19 isDigitInBase 0
x27899:	mov word [bp + 19], scanUnsignedLongInt$54	; 5: 199 70 19 9 109
x27904:	mov [bp + 21], bp	; 3: 137 110 21
x27907:	add bp, 19	; 3: 131 197 19
x27910:	jmp @2758$isDigitInBase	; 3: 233 144 252

scanUnsignedLongInt$54:	; PostCall 19

scanUnsignedLongInt$55:	; GetReturnValue £temporary1292

scanUnsignedLongInt$56:	; Equal 73 £temporary1292 0
x27913:	cmp bx, 0	; 3: 131 251 0
x27916:	je scanUnsignedLongInt$73	; 2: 116 79

scanUnsignedLongInt$57:	; IntegralToIntegral £temporary1293 base
x27918:	mov bx, [bp + 6]	; 3: 139 94 6
x27921:	and ebx, 65535	; 7: 102 129 227 255 255 0 0

scanUnsignedLongInt$58:	; UnsignedMultiply unsignedLongValue unsignedLongValue £temporary1293
x27928:	mov eax, [bp + 8]	; 4: 102 139 70 8
x27932:	xor edx, edx	; 3: 102 49 210
x27935:	mul ebx	; 3: 102 247 227
x27938:	mov [bp + 8], eax	; 4: 102 137 70 8

scanUnsignedLongInt$59:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$60:	; Parameter 19 input 6
x27942:	mov al, [bp + 16]	; 3: 138 70 16
x27945:	mov [bp + 25], al	; 3: 136 70 25

scanUnsignedLongInt$61:	; Call 19 digitToValue 0
x27948:	mov word [bp + 19], scanUnsignedLongInt$62	; 5: 199 70 19 58 109
x27953:	mov [bp + 21], bp	; 3: 137 110 21
x27956:	add bp, 19	; 3: 131 197 19
x27959:	jmp @2822$digitToValue	; 3: 233 230 253

scanUnsignedLongInt$62:	; PostCall 19

scanUnsignedLongInt$63:	; GetReturnValue £temporary1295

scanUnsignedLongInt$64:	; IntegralToIntegral £temporary1296 £temporary1295
x27962:	and ebx, 65535	; 7: 102 129 227 255 255 0 0

scanUnsignedLongInt$65:	; BinaryAdd unsignedLongValue unsignedLongValue £temporary1296
x27969:	add [bp + 8], ebx	; 4: 102 1 94 8

scanUnsignedLongInt$66:	; Assign found 1
x27973:	mov word [bp + 17], 1	; 5: 199 70 17 1 0

scanUnsignedLongInt$67:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$68:	; Call 19 scanChar 0
x27978:	mov word [bp + 19], scanUnsignedLongInt$69	; 5: 199 70 19 88 109
x27983:	mov [bp + 21], bp	; 3: 137 110 21
x27986:	add bp, 19	; 3: 131 197 19
x27989:	jmp scanChar	; 3: 233 153 247

scanUnsignedLongInt$69:	; PostCall 19

scanUnsignedLongInt$70:	; GetReturnValue £temporary1298

scanUnsignedLongInt$71:	; Assign input £temporary1298
x27992:	mov [bp + 16], bl	; 3: 136 94 16

scanUnsignedLongInt$72:	; Goto 50
x27995:	jmp scanUnsignedLongInt$50	; 2: 235 146

scanUnsignedLongInt$73:	; Equal 75 found 0
x27997:	cmp word [bp + 17], 0	; 4: 131 126 17 0
x28001:	je scanUnsignedLongInt$75	; 2: 116 4

scanUnsignedLongInt$74:	; Increment g_inCount
x28003:	inc word [g_inCount]	; 4: 255 6 237 100

scanUnsignedLongInt$75:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$76:	; Parameter 19 input 6
x28007:	mov al, [bp + 16]	; 3: 138 70 16
x28010:	mov [bp + 25], al	; 3: 136 70 25

scanUnsignedLongInt$77:	; Call 19 unscanChar 0
x28013:	mov word [bp + 19], scanUnsignedLongInt$78	; 5: 199 70 19 123 109
x28018:	mov [bp + 21], bp	; 3: 137 110 21
x28021:	add bp, 19	; 3: 131 197 19
x28024:	jmp unscanChar	; 3: 233 127 254

scanUnsignedLongInt$78:	; PostCall 19

scanUnsignedLongInt$79:	; SetReturnValue unsignedLongValue
x28027:	mov ebx, [bp + 8]	; 4: 102 139 94 8

scanUnsignedLongInt$80:	; Return unsignedLongValue
x28031:	mov ax, [bp]	; 3: 139 70 0
x28034:	mov di, [bp + 4]	; 3: 139 126 4
x28037:	mov bp, [bp + 2]	; 3: 139 110 2
x28040:	jmp ax	; 2: 255 224

scanUnsignedLongInt$81:	; FunctionEnd scanUnsignedLongInt

scanLongDouble:	; Assign minus 0
x28042:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

scanLongDouble$1:	; Assign found 0
x28047:	mov word [bp + 8], 0	; 5: 199 70 8 0 0

scanLongDouble$2:	; PushFloat 0.0
x28052:	fldz	; 2: 217 238

scanLongDouble$3:	; PopFloat value
x28054:	fstp qword [bp + 10]	; 3: 221 94 10

scanLongDouble$4:	; PushFloat 1.0
x28057:	fld1	; 2: 217 232

scanLongDouble$5:	; PopFloat factor
x28059:	fstp qword [bp + 18]	; 3: 221 94 18

scanLongDouble$6:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$7:	; Call 26 scanChar 0
x28062:	mov word [bp + 26], scanLongDouble$8	; 5: 199 70 26 172 109
x28067:	mov [bp + 28], bp	; 3: 137 110 28
x28070:	add bp, 26	; 3: 131 197 26
x28073:	jmp scanChar	; 3: 233 69 247

scanLongDouble$8:	; PostCall 26

scanLongDouble$9:	; GetReturnValue £temporary1309

scanLongDouble$10:	; Assign input £temporary1309
x28076:	mov [bp + 26], bl	; 3: 136 94 26

scanLongDouble$11:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$12:	; IntegralToIntegral £temporary1310 input
x28079:	mov al, [bp + 26]	; 3: 138 70 26
x28082:	and ax, 255	; 3: 37 255 0
x28085:	cmp al, 0	; 2: 60 0
x28087:	jge scanLongDouble$13	; 2: 125 4
x28089:	neg al	; 2: 246 216
x28091:	neg ax	; 2: 247 216

scanLongDouble$13:	; Parameter 27 £temporary1310 6
x28093:	mov [bp + 33], ax	; 3: 137 70 33

scanLongDouble$14:	; Call 27 isspace 0
x28096:	mov word [bp + 27], scanLongDouble$15	; 5: 199 70 27 206 109
x28101:	mov [bp + 29], bp	; 3: 137 110 29
x28104:	add bp, 27	; 3: 131 197 27
x28107:	jmp isspace	; 3: 233 223 249

scanLongDouble$15:	; PostCall 27

scanLongDouble$16:	; GetReturnValue £temporary1311

scanLongDouble$17:	; Equal 24 £temporary1311 0
x28110:	cmp bx, 0	; 3: 131 251 0
x28113:	je scanLongDouble$24	; 2: 116 19

scanLongDouble$18:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$19:	; Call 27 scanChar 0
x28115:	mov word [bp + 27], scanLongDouble$20	; 5: 199 70 27 225 109
x28120:	mov [bp + 29], bp	; 3: 137 110 29
x28123:	add bp, 27	; 3: 131 197 27
x28126:	jmp scanChar	; 3: 233 16 247

scanLongDouble$20:	; PostCall 27

scanLongDouble$21:	; GetReturnValue £temporary1312

scanLongDouble$22:	; Assign input £temporary1312
x28129:	mov [bp + 26], bl	; 3: 136 94 26

scanLongDouble$23:	; Goto 11
x28132:	jmp scanLongDouble$11	; 2: 235 201

scanLongDouble$24:	; NotEqual 31 input 43
x28134:	cmp byte [bp + 26], 43	; 4: 128 126 26 43
x28138:	jne scanLongDouble$31	; 2: 117 19

scanLongDouble$25:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$26:	; Call 27 scanChar 0
x28140:	mov word [bp + 27], scanLongDouble$27	; 5: 199 70 27 250 109
x28145:	mov [bp + 29], bp	; 3: 137 110 29
x28148:	add bp, 27	; 3: 131 197 27
x28151:	jmp scanChar	; 3: 233 247 246

scanLongDouble$27:	; PostCall 27

scanLongDouble$28:	; GetReturnValue £temporary1315

scanLongDouble$29:	; Assign input £temporary1315
x28154:	mov [bp + 26], bl	; 3: 136 94 26

scanLongDouble$30:	; Goto 38
x28157:	jmp scanLongDouble$38	; 2: 235 28

scanLongDouble$31:	; NotEqual 38 input 45
x28159:	cmp byte [bp + 26], 45	; 4: 128 126 26 45
x28163:	jne scanLongDouble$38	; 2: 117 22

scanLongDouble$32:	; Assign minus 1
x28165:	mov word [bp + 6], 1	; 5: 199 70 6 1 0

scanLongDouble$33:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$34:	; Call 27 scanChar 0
x28170:	mov word [bp + 27], scanLongDouble$35	; 5: 199 70 27 24 110
x28175:	mov [bp + 29], bp	; 3: 137 110 29
x28178:	add bp, 27	; 3: 131 197 27
x28181:	jmp scanChar	; 3: 233 217 246

scanLongDouble$35:	; PostCall 27

scanLongDouble$36:	; GetReturnValue £temporary1317

scanLongDouble$37:	; Assign input £temporary1317
x28184:	mov [bp + 26], bl	; 3: 136 94 26

scanLongDouble$38:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$39:	; IntegralToIntegral £temporary1318 input
x28187:	mov al, [bp + 26]	; 3: 138 70 26
x28190:	and ax, 255	; 3: 37 255 0
x28193:	cmp al, 0	; 2: 60 0
x28195:	jge scanLongDouble$40	; 2: 125 4
x28197:	neg al	; 2: 246 216
x28199:	neg ax	; 2: 247 216

scanLongDouble$40:	; Parameter 27 £temporary1318 6
x28201:	mov [bp + 33], ax	; 3: 137 70 33

scanLongDouble$41:	; Call 27 isdigit 0
x28204:	mov word [bp + 27], scanLongDouble$42	; 5: 199 70 27 58 110
x28209:	mov [bp + 29], bp	; 3: 137 110 29
x28212:	add bp, 27	; 3: 131 197 27
x28215:	jmp isdigit	; 3: 233 50 189

scanLongDouble$42:	; PostCall 27

scanLongDouble$43:	; GetReturnValue £temporary1319

scanLongDouble$44:	; Equal 60 £temporary1319 0
x28218:	cmp bx, 0	; 3: 131 251 0
x28221:	je scanLongDouble$60	; 2: 116 61

scanLongDouble$45:	; PushFloat 10.0
x28223:	fld qword [@3023$float8$10.0#]	; 4: 221 6 173 111

scanLongDouble$46:	; PushFloat value
x28227:	fld qword [bp + 10]	; 3: 221 70 10

scanLongDouble$47:	; SignedMultiply £temporary1320 10.0 value
x28230:	fmul	; 2: 222 201

scanLongDouble$48:	; BinarySubtract £temporary1321 input 48
x28232:	mov al, [bp + 26]	; 3: 138 70 26
x28235:	sub al, 48	; 2: 44 48

scanLongDouble$49:	; IntegralToIntegral £temporary1323 £temporary1321
x28237:	and ax, 255	; 3: 37 255 0
x28240:	cmp al, 0	; 2: 60 0
x28242:	jge scanLongDouble$50	; 2: 125 4
x28244:	neg al	; 2: 246 216
x28246:	neg ax	; 2: 247 216

scanLongDouble$50:	; IntegralToFloating £temporary1322 £temporary1323
x28248:	mov [container2bytes#], ax	; 3: 163 77 27
x28251:	fild word [container2bytes#]	; 4: 223 6 77 27

scanLongDouble$51:	; BinaryAdd £temporary1324 £temporary1320 £temporary1322
x28255:	fadd	; 2: 222 193

scanLongDouble$52:	; PopFloat value
x28257:	fstp qword [bp + 10]	; 3: 221 94 10

scanLongDouble$53:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$54:	; Call 27 scanChar 0
x28260:	mov word [bp + 27], scanLongDouble$55	; 5: 199 70 27 114 110
x28265:	mov [bp + 29], bp	; 3: 137 110 29
x28268:	add bp, 27	; 3: 131 197 27
x28271:	jmp scanChar	; 3: 233 127 246

scanLongDouble$55:	; PostCall 27

scanLongDouble$56:	; GetReturnValue £temporary1325

scanLongDouble$57:	; Assign input £temporary1325
x28274:	mov [bp + 26], bl	; 3: 136 94 26

scanLongDouble$58:	; Assign found 1
x28277:	mov word [bp + 8], 1	; 5: 199 70 8 1 0

scanLongDouble$59:	; Goto 38
x28282:	jmp scanLongDouble$38	; 2: 235 159

scanLongDouble$60:	; NotEqual 92 input 46
x28284:	cmp byte [bp + 26], 46	; 4: 128 126 26 46
x28288:	jne scanLongDouble$92	; 2: 117 125

scanLongDouble$61:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$62:	; Call 27 scanChar 0
x28290:	mov word [bp + 27], scanLongDouble$63	; 5: 199 70 27 144 110
x28295:	mov [bp + 29], bp	; 3: 137 110 29
x28298:	add bp, 27	; 3: 131 197 27
x28301:	jmp scanChar	; 3: 233 97 246

scanLongDouble$63:	; PostCall 27

scanLongDouble$64:	; GetReturnValue £temporary1328

scanLongDouble$65:	; Assign input £temporary1328
x28304:	mov [bp + 26], bl	; 3: 136 94 26

scanLongDouble$66:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$67:	; IntegralToIntegral £temporary1329 input
x28307:	mov al, [bp + 26]	; 3: 138 70 26
x28310:	and ax, 255	; 3: 37 255 0
x28313:	cmp al, 0	; 2: 60 0
x28315:	jge scanLongDouble$68	; 2: 125 4
x28317:	neg al	; 2: 246 216
x28319:	neg ax	; 2: 247 216

scanLongDouble$68:	; Parameter 27 £temporary1329 6
x28321:	mov [bp + 33], ax	; 3: 137 70 33

scanLongDouble$69:	; Call 27 isdigit 0
x28324:	mov word [bp + 27], scanLongDouble$70	; 5: 199 70 27 178 110
x28329:	mov [bp + 29], bp	; 3: 137 110 29
x28332:	add bp, 27	; 3: 131 197 27
x28335:	jmp isdigit	; 3: 233 186 188

scanLongDouble$70:	; PostCall 27

scanLongDouble$71:	; GetReturnValue £temporary1330

scanLongDouble$72:	; Equal 92 £temporary1330 0
x28338:	cmp bx, 0	; 3: 131 251 0
x28341:	je scanLongDouble$92	; 2: 116 72

scanLongDouble$73:	; PushFloat factor
x28343:	fld qword [bp + 18]	; 3: 221 70 18

scanLongDouble$74:	; PushFloat 10.0
x28346:	fld qword [@3043$float8$10.0#]	; 4: 221 6 181 111

scanLongDouble$75:	; SignedDivide £temporary1331 factor 10.0
x28350:	fdiv	; 2: 222 249

scanLongDouble$76:	; PopFloat factor
x28352:	fstp qword [bp + 18]	; 3: 221 94 18

scanLongDouble$77:	; PushFloat value
x28355:	fld qword [bp + 10]	; 3: 221 70 10

scanLongDouble$78:	; PushFloat factor
x28358:	fld qword [bp + 18]	; 3: 221 70 18

scanLongDouble$79:	; BinarySubtract £temporary1332 input 48
x28361:	mov al, [bp + 26]	; 3: 138 70 26
x28364:	sub al, 48	; 2: 44 48

scanLongDouble$80:	; IntegralToIntegral £temporary1334 £temporary1332
x28366:	and ax, 255	; 3: 37 255 0
x28369:	cmp al, 0	; 2: 60 0
x28371:	jge scanLongDouble$81	; 2: 125 4
x28373:	neg al	; 2: 246 216
x28375:	neg ax	; 2: 247 216

scanLongDouble$81:	; IntegralToFloating £temporary1333 £temporary1334
x28377:	mov [container2bytes#], ax	; 3: 163 77 27
x28380:	fild word [container2bytes#]	; 4: 223 6 77 27

scanLongDouble$82:	; SignedMultiply £temporary1335 factor £temporary1333
x28384:	fmul	; 2: 222 201

scanLongDouble$83:	; BinaryAdd £temporary1336 value £temporary1335
x28386:	fadd	; 2: 222 193

scanLongDouble$84:	; PopFloat value
x28388:	fstp qword [bp + 10]	; 3: 221 94 10

scanLongDouble$85:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$86:	; Call 27 scanChar 0
x28391:	mov word [bp + 27], scanLongDouble$87	; 5: 199 70 27 245 110
x28396:	mov [bp + 29], bp	; 3: 137 110 29
x28399:	add bp, 27	; 3: 131 197 27
x28402:	jmp scanChar	; 3: 233 252 245

scanLongDouble$87:	; PostCall 27

scanLongDouble$88:	; GetReturnValue £temporary1337

scanLongDouble$89:	; Assign input £temporary1337
x28405:	mov [bp + 26], bl	; 3: 136 94 26

scanLongDouble$90:	; Assign found 1
x28408:	mov word [bp + 8], 1	; 5: 199 70 8 1 0

scanLongDouble$91:	; Goto 66
x28413:	jmp scanLongDouble$66	; 2: 235 148

scanLongDouble$92:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$93:	; IntegralToIntegral £temporary1339 input
x28415:	mov al, [bp + 26]	; 3: 138 70 26
x28418:	and ax, 255	; 3: 37 255 0
x28421:	cmp al, 0	; 2: 60 0
x28423:	jge scanLongDouble$94	; 2: 125 4
x28425:	neg al	; 2: 246 216
x28427:	neg ax	; 2: 247 216

scanLongDouble$94:	; Parameter 27 £temporary1339 6
x28429:	mov [bp + 33], ax	; 3: 137 70 33

scanLongDouble$95:	; Call 27 tolower 0
x28432:	mov word [bp + 27], scanLongDouble$96	; 5: 199 70 27 30 111
x28437:	mov [bp + 29], bp	; 3: 137 110 29
x28440:	add bp, 27	; 3: 131 197 27
x28443:	jmp tolower	; 3: 233 1 182

scanLongDouble$96:	; PostCall 27

scanLongDouble$97:	; GetReturnValue £temporary1340

scanLongDouble$98:	; NotEqual 118 £temporary1340 101
x28446:	cmp bx, 101	; 3: 131 251 101
x28449:	jne scanLongDouble$118	; 2: 117 80

scanLongDouble$99:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$100:	; Parameter 27 10 6
x28451:	mov word [bp + 33], 10	; 5: 199 70 33 10 0

scanLongDouble$101:	; Call 27 scanLongInt 0
x28456:	mov word [bp + 27], scanLongDouble$102	; 5: 199 70 27 54 111
x28461:	mov [bp + 29], bp	; 3: 137 110 29
x28464:	add bp, 27	; 3: 131 197 27
x28467:	jmp scanLongInt	; 3: 233 174 248

scanLongDouble$102:	; PostCall 27

scanLongDouble$103:	; GetReturnValue £temporary1342

scanLongDouble$104:	; IntegralToFloating £temporary1343 £temporary1342
x28470:	mov [container4bytes#], ebx	; 5: 102 137 30 81 36
x28475:	fild dword [container4bytes#]	; 4: 219 6 81 36

scanLongDouble$105:	; PopFloat exponent
x28479:	fstp qword [bp + 27]	; 3: 221 94 27

scanLongDouble$106:	; PushFloat value
x28482:	fld qword [bp + 10]	; 3: 221 70 10

scanLongDouble$107:	; CallHeader 35 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x28485:	fstp qword [bp + 35]	; 3: 221 94 35

scanLongDouble$108:	; PushFloat 10.0
x28488:	fld qword [@3069$float8$10.0#]	; 4: 221 6 189 111

scanLongDouble$109:	; Parameter 35 10.0 6
x28492:	fstp qword [bp + 49]	; 3: 221 94 49

scanLongDouble$110:	; PushFloat exponent
x28495:	fld qword [bp + 27]	; 3: 221 70 27

scanLongDouble$111:	; Parameter 35 exponent 14
x28498:	fstp qword [bp + 57]	; 3: 221 94 57

scanLongDouble$112:	; Call 35 pow 0
x28501:	mov word [bp + 43], scanLongDouble$113	; 5: 199 70 43 99 111
x28506:	mov [bp + 45], bp	; 3: 137 110 45
x28509:	add bp, 43	; 3: 131 197 43
x28512:	jmp pow	; 3: 233 56 185

scanLongDouble$113:	; PostCall 35
x28515:	fstp qword [bp + 43]	; 3: 221 94 43
x28518:	fld qword [bp + 35]	; 3: 221 70 35
x28521:	fld qword [bp + 43]	; 3: 221 70 43

scanLongDouble$114:	; GetReturnValue £temporary1344

scanLongDouble$115:	; SignedMultiply £temporary1345 value £temporary1344
x28524:	fmul	; 2: 222 201

scanLongDouble$116:	; PopFloat value
x28526:	fstp qword [bp + 10]	; 3: 221 94 10

scanLongDouble$117:	; Goto 122
x28529:	jmp scanLongDouble$122	; 2: 235 20

scanLongDouble$118:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$119:	; Parameter 27 input 6
x28531:	mov al, [bp + 26]	; 3: 138 70 26
x28534:	mov [bp + 33], al	; 3: 136 70 33

scanLongDouble$120:	; Call 27 unscanChar 0
x28537:	mov word [bp + 27], scanLongDouble$121	; 5: 199 70 27 135 111
x28542:	mov [bp + 29], bp	; 3: 137 110 29
x28545:	add bp, 27	; 3: 131 197 27
x28548:	jmp unscanChar	; 3: 233 115 252

scanLongDouble$121:	; PostCall 27

scanLongDouble$122:	; Equal 126 minus 0
x28551:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x28555:	je scanLongDouble$126	; 2: 116 8

scanLongDouble$123:	; PushFloat value
x28557:	fld qword [bp + 10]	; 3: 221 70 10

scanLongDouble$124:	; UnarySubtract £temporary1347 value
x28560:	fchs	; 2: 217 224

scanLongDouble$125:	; PopFloat value
x28562:	fstp qword [bp + 10]	; 3: 221 94 10

scanLongDouble$126:	; Equal 128 found 0
x28565:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x28569:	je scanLongDouble$128	; 2: 116 4

scanLongDouble$127:	; Increment g_inCount
x28571:	inc word [g_inCount]	; 4: 255 6 237 100

scanLongDouble$128:	; PushFloat value
x28575:	fld qword [bp + 10]	; 3: 221 70 10

scanLongDouble$129:	; SetReturnValue value

scanLongDouble$130:	; Return value
x28578:	mov ax, [bp]	; 3: 139 70 0
x28581:	mov di, [bp + 4]	; 3: 139 126 4
x28584:	mov bp, [bp + 2]	; 3: 139 110 2
x28587:	jmp ax	; 2: 255 224

scanLongDouble$131:	; FunctionEnd scanLongDouble

@3023$float8$10.0#:
x28589:	dq 10.0	; 8: 0 0 0 0 0 0 36 64

@3043$float8$10.0#:
x28597:	dq 10.0	; 8: 0 0 0 0 0 0 36 64

@3069$float8$10.0#:
x28605:	dq 10.0	; 8: 0 0 0 0 0 0 36 64

scanPattern:	; Assign index 0
x28613:	mov word [bp + 14], 0	; 5: 199 70 14 0 0

scanPattern$1:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanPattern$2:	; Call 16 scanChar 0
x28618:	mov word [bp + 16], scanPattern$3	; 5: 199 70 16 216 111
x28623:	mov [bp + 18], bp	; 3: 137 110 18
x28626:	add bp, 16	; 3: 131 197 16
x28629:	jmp scanChar	; 3: 233 25 245

scanPattern$3:	; PostCall 16

scanPattern$4:	; GetReturnValue £temporary1053

scanPattern$5:	; Assign input £temporary1053
x28632:	mov [bp + 16], bl	; 3: 136 94 16

scanPattern$6:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanPattern$7:	; IntegralToIntegral £temporary1054 input
x28635:	mov al, [bp + 16]	; 3: 138 70 16
x28638:	and ax, 255	; 3: 37 255 0
x28641:	cmp al, 0	; 2: 60 0
x28643:	jge scanPattern$8	; 2: 125 4
x28645:	neg al	; 2: 246 216
x28647:	neg ax	; 2: 247 216

scanPattern$8:	; Parameter 17 £temporary1054 6
x28649:	mov [bp + 23], ax	; 3: 137 70 23

scanPattern$9:	; Call 17 isspace 0
x28652:	mov word [bp + 17], scanPattern$10	; 5: 199 70 17 250 111
x28657:	mov [bp + 19], bp	; 3: 137 110 19
x28660:	add bp, 17	; 3: 131 197 17
x28663:	jmp isspace	; 3: 233 179 247

scanPattern$10:	; PostCall 17

scanPattern$11:	; GetReturnValue £temporary1055

scanPattern$12:	; Equal 19 £temporary1055 0
x28666:	cmp bx, 0	; 3: 131 251 0
x28669:	je scanPattern$19	; 2: 116 19

scanPattern$13:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanPattern$14:	; Call 17 scanChar 0
x28671:	mov word [bp + 17], scanPattern$15	; 5: 199 70 17 13 112
x28676:	mov [bp + 19], bp	; 3: 137 110 19
x28679:	add bp, 17	; 3: 131 197 17
x28682:	jmp scanChar	; 3: 233 228 244

scanPattern$15:	; PostCall 17

scanPattern$16:	; GetReturnValue £temporary1056

scanPattern$17:	; Assign input £temporary1056
x28685:	mov [bp + 16], bl	; 3: 136 94 16

scanPattern$18:	; Goto 6
x28688:	jmp scanPattern$6	; 2: 235 201

scanPattern$19:	; Equal 55 string 0
x28690:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x28694:	je scanPattern$55	; 4: 15 132 156 0

scanPattern$20:	; NotEqual 30 not 0
x28698:	cmp word [bp + 12], 0	; 4: 131 126 12 0
x28702:	jne scanPattern$30	; 2: 117 48

scanPattern$21:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanPattern$22:	; Parameter 17 pattern 6
x28704:	mov ax, [bp + 8]	; 3: 139 70 8
x28707:	mov [bp + 23], ax	; 3: 137 70 23

scanPattern$23:	; Parameter 17 size 8
x28710:	mov ax, [bp + 10]	; 3: 139 70 10
x28713:	mov [bp + 25], ax	; 3: 137 70 25

scanPattern$24:	; IntegralToIntegral £temporary1061 input
x28716:	mov al, [bp + 16]	; 3: 138 70 16
x28719:	and ax, 255	; 3: 37 255 0
x28722:	cmp al, 0	; 2: 60 0
x28724:	jge scanPattern$25	; 2: 125 4
x28726:	neg al	; 2: 246 216
x28728:	neg ax	; 2: 247 216

scanPattern$25:	; Parameter 17 £temporary1061 10
x28730:	mov [bp + 27], ax	; 3: 137 70 27

scanPattern$26:	; Call 17 strnchr 0
x28733:	mov word [bp + 17], scanPattern$27	; 5: 199 70 17 75 112
x28738:	mov [bp + 19], bp	; 3: 137 110 19
x28741:	add bp, 17	; 3: 131 197 17
x28744:	jmp @2496$strnchr	; 3: 233 245 0

scanPattern$27:	; PostCall 17

scanPattern$28:	; GetReturnValue £temporary1062

scanPattern$29:	; NotEqual 40 £temporary1062 0
x28747:	cmp bx, 0	; 3: 131 251 0
x28750:	jne scanPattern$40	; 2: 117 54

scanPattern$30:	; Equal 51 not 0
x28752:	cmp word [bp + 12], 0	; 4: 131 126 12 0
x28756:	je scanPattern$51	; 2: 116 84

scanPattern$31:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanPattern$32:	; Parameter 17 pattern 6
x28758:	mov ax, [bp + 8]	; 3: 139 70 8
x28761:	mov [bp + 23], ax	; 3: 137 70 23

scanPattern$33:	; Parameter 17 size 8
x28764:	mov ax, [bp + 10]	; 3: 139 70 10
x28767:	mov [bp + 25], ax	; 3: 137 70 25

scanPattern$34:	; IntegralToIntegral £temporary1065 input
x28770:	mov al, [bp + 16]	; 3: 138 70 16
x28773:	and ax, 255	; 3: 37 255 0
x28776:	cmp al, 0	; 2: 60 0
x28778:	jge scanPattern$35	; 2: 125 4
x28780:	neg al	; 2: 246 216
x28782:	neg ax	; 2: 247 216

scanPattern$35:	; Parameter 17 £temporary1065 10
x28784:	mov [bp + 27], ax	; 3: 137 70 27

scanPattern$36:	; Call 17 strnchr 0
x28787:	mov word [bp + 17], scanPattern$37	; 5: 199 70 17 129 112
x28792:	mov [bp + 19], bp	; 3: 137 110 19
x28795:	add bp, 17	; 3: 131 197 17
x28798:	jmp @2496$strnchr	; 3: 233 191 0

scanPattern$37:	; PostCall 17

scanPattern$38:	; GetReturnValue £temporary1066

scanPattern$39:	; NotEqual 51 £temporary1066 0
x28801:	cmp bx, 0	; 3: 131 251 0
x28804:	jne scanPattern$51	; 2: 117 36

scanPattern$40:	; Assign £temporary1072 index
x28806:	mov ax, [bp + 14]	; 3: 139 70 14

scanPattern$41:	; Increment index
x28809:	inc word [bp + 14]	; 3: 255 70 14

scanPattern$42:	; BinaryAdd £temporary1075 string £temporary1072
x28812:	mov si, [bp + 6]	; 3: 139 118 6
x28815:	add si, ax	; 2: 1 198

scanPattern$43:	; Deref £temporary1074 -> £temporary1075 £temporary1075 0

scanPattern$44:	; Assign £temporary1074 -> £temporary1075 input
x28817:	mov al, [bp + 16]	; 3: 138 70 16
x28820:	mov [si], al	; 2: 136 4

scanPattern$45:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanPattern$46:	; Call 17 scanChar 0
x28822:	mov word [bp + 17], scanPattern$47	; 5: 199 70 17 164 112
x28827:	mov [bp + 19], bp	; 3: 137 110 19
x28830:	add bp, 17	; 3: 131 197 17
x28833:	jmp scanChar	; 3: 233 77 244

scanPattern$47:	; PostCall 17

scanPattern$48:	; GetReturnValue £temporary1076

scanPattern$49:	; Assign input £temporary1076
x28836:	mov [bp + 16], bl	; 3: 136 94 16

scanPattern$50:	; Goto 20
x28839:	jmp scanPattern$20	; 3: 233 112 255

scanPattern$51:	; BinaryAdd £temporary1078 string index
x28842:	mov si, [bp + 6]	; 3: 139 118 6
x28845:	add si, [bp + 14]	; 3: 3 118 14

scanPattern$52:	; Deref £temporary1077 -> £temporary1078 £temporary1078 0

scanPattern$53:	; Assign £temporary1077 -> £temporary1078 0
x28848:	mov byte [si], 0	; 3: 198 4 0

scanPattern$54:	; Goto 81
x28851:	jmp scanPattern$81	; 3: 233 127 0

scanPattern$55:	; NotEqual 65 not 0
x28854:	cmp word [bp + 12], 0	; 4: 131 126 12 0
x28858:	jne scanPattern$65	; 2: 117 48

scanPattern$56:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanPattern$57:	; Parameter 17 pattern 6
x28860:	mov ax, [bp + 8]	; 3: 139 70 8
x28863:	mov [bp + 23], ax	; 3: 137 70 23

scanPattern$58:	; Parameter 17 size 8
x28866:	mov ax, [bp + 10]	; 3: 139 70 10
x28869:	mov [bp + 25], ax	; 3: 137 70 25

scanPattern$59:	; IntegralToIntegral £temporary1081 input
x28872:	mov al, [bp + 16]	; 3: 138 70 16
x28875:	and ax, 255	; 3: 37 255 0
x28878:	cmp al, 0	; 2: 60 0
x28880:	jge scanPattern$60	; 2: 125 4
x28882:	neg al	; 2: 246 216
x28884:	neg ax	; 2: 247 216

scanPattern$60:	; Parameter 17 £temporary1081 10
x28886:	mov [bp + 27], ax	; 3: 137 70 27

scanPattern$61:	; Call 17 strnchr 0
x28889:	mov word [bp + 17], scanPattern$62	; 5: 199 70 17 231 112
x28894:	mov [bp + 19], bp	; 3: 137 110 19
x28897:	add bp, 17	; 3: 131 197 17
x28900:	nop	; 1: 144
x28901:	jmp @2496$strnchr	; 2: 235 89

scanPattern$62:	; PostCall 17

scanPattern$63:	; GetReturnValue £temporary1082

scanPattern$64:	; NotEqual 75 £temporary1082 0
x28903:	cmp bx, 0	; 3: 131 251 0
x28906:	jne scanPattern$75	; 2: 117 54

scanPattern$65:	; Equal 81 not 0
x28908:	cmp word [bp + 12], 0	; 4: 131 126 12 0
x28912:	je scanPattern$81	; 2: 116 67

scanPattern$66:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanPattern$67:	; Parameter 17 pattern 6
x28914:	mov ax, [bp + 8]	; 3: 139 70 8
x28917:	mov [bp + 23], ax	; 3: 137 70 23

scanPattern$68:	; Parameter 17 size 8
x28920:	mov ax, [bp + 10]	; 3: 139 70 10
x28923:	mov [bp + 25], ax	; 3: 137 70 25

scanPattern$69:	; IntegralToIntegral £temporary1085 input
x28926:	mov al, [bp + 16]	; 3: 138 70 16
x28929:	and ax, 255	; 3: 37 255 0
x28932:	cmp al, 0	; 2: 60 0
x28934:	jge scanPattern$70	; 2: 125 4
x28936:	neg al	; 2: 246 216
x28938:	neg ax	; 2: 247 216

scanPattern$70:	; Parameter 17 £temporary1085 10
x28940:	mov [bp + 27], ax	; 3: 137 70 27

scanPattern$71:	; Call 17 strnchr 0
x28943:	mov word [bp + 17], scanPattern$72	; 5: 199 70 17 29 113
x28948:	mov [bp + 19], bp	; 3: 137 110 19
x28951:	add bp, 17	; 3: 131 197 17
x28954:	nop	; 1: 144
x28955:	jmp @2496$strnchr	; 2: 235 35

scanPattern$72:	; PostCall 17

scanPattern$73:	; GetReturnValue £temporary1086

scanPattern$74:	; NotEqual 81 £temporary1086 0
x28957:	cmp bx, 0	; 3: 131 251 0
x28960:	jne scanPattern$81	; 2: 117 19

scanPattern$75:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanPattern$76:	; Call 17 scanChar 0
x28962:	mov word [bp + 17], scanPattern$77	; 5: 199 70 17 48 113
x28967:	mov [bp + 19], bp	; 3: 137 110 19
x28970:	add bp, 17	; 3: 131 197 17
x28973:	jmp scanChar	; 3: 233 193 243

scanPattern$77:	; PostCall 17

scanPattern$78:	; GetReturnValue £temporary1092

scanPattern$79:	; Assign input £temporary1092
x28976:	mov [bp + 16], bl	; 3: 136 94 16

scanPattern$80:	; Goto 55
x28979:	jmp scanPattern$55	; 2: 235 129

scanPattern$81:	; Return 0
x28981:	mov ax, [bp]	; 3: 139 70 0
x28984:	mov di, [bp + 4]	; 3: 139 126 4
x28987:	mov bp, [bp + 2]	; 3: 139 110 2
x28990:	jmp ax	; 2: 255 224

scanPattern$82:	; FunctionEnd scanPattern

@2496$strnchr:	; IntegralToIntegral £temporary1044 i
x28992:	mov ax, [bp + 10]	; 3: 139 70 10
x28995:	cmp ax, 0	; 3: 131 248 0
x28998:	jge @2496$strnchr$1	; 2: 125 4
x29000:	neg ax	; 2: 247 216
x29002:	neg al	; 2: 246 216

@2496$strnchr$1:	; Assign c £temporary1044
x29004:	mov [bp + 14], al	; 3: 136 70 14

@2496$strnchr$2:	; Assign index 0
x29007:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

@2496$strnchr$3:	; SignedGreaterThanEqual 14 index size
x29012:	mov ax, [bp + 8]	; 3: 139 70 8
x29015:	cmp [bp + 12], ax	; 3: 57 70 12
x29018:	jge @2496$strnchr$14	; 2: 125 35

@2496$strnchr$4:	; BinaryAdd £temporary1048 text index
x29020:	mov si, [bp + 6]	; 3: 139 118 6
x29023:	add si, [bp + 12]	; 3: 3 118 12

@2496$strnchr$5:	; Deref £temporary1047 -> £temporary1048 £temporary1048 0

@2496$strnchr$6:	; NotEqual 12 £temporary1047 -> £temporary1048 c
x29026:	mov al, [bp + 14]	; 3: 138 70 14
x29029:	cmp [si], al	; 2: 56 4
x29031:	jne @2496$strnchr$12	; 2: 117 17

@2496$strnchr$7:	; BinaryAdd £temporary1051 text index
x29033:	mov bx, [bp + 6]	; 3: 139 94 6
x29036:	add bx, [bp + 12]	; 3: 3 94 12

@2496$strnchr$8:	; Deref £temporary1050 -> £temporary1051 £temporary1051 0

@2496$strnchr$9:	; address £temporary1052 £temporary1050 -> £temporary1051

@2496$strnchr$10:	; SetReturnValue £temporary1052

@2496$strnchr$11:	; Return £temporary1052
x29039:	mov ax, [bp]	; 3: 139 70 0
x29042:	mov di, [bp + 4]	; 3: 139 126 4
x29045:	mov bp, [bp + 2]	; 3: 139 110 2
x29048:	jmp ax	; 2: 255 224

@2496$strnchr$12:	; Increment index
x29050:	inc word [bp + 12]	; 3: 255 70 12

@2496$strnchr$13:	; Goto 3
x29053:	jmp @2496$strnchr$3	; 2: 235 213

@2496$strnchr$14:	; SetReturnValue 0
x29055:	mov bx, 0	; 3: 187 0 0

@2496$strnchr$15:	; Return 0
x29058:	mov ax, [bp]	; 3: 139 70 0
x29061:	mov di, [bp + 4]	; 3: 139 126 4
x29064:	mov bp, [bp + 2]	; 3: 139 110 2
x29067:	jmp ax	; 2: 255 224

@2496$strnchr$16:	; FunctionEnd strnchr

fclose:	; Equal 20 stream 0
x29069:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x29073:	je fclose$20	; 2: 116 86

fclose$1:	; AssignRegister ah 62
x29075:	mov ah, 62	; 2: 180 62

fclose$2:	; Deref £temporary809 -> stream stream 2
x29077:	mov si, [bp + 6]	; 3: 139 118 6

fclose$3:	; AssignRegister bx £temporary809 -> stream
x29080:	mov bx, [si + 2]	; 3: 139 92 2

fclose$4:	; Interrupt 33
x29083:	int 33	; 2: 205 33

fclose$5:	; NotCarry 9
x29085:	jnc fclose$9	; 2: 115 20

fclose$6:	; Assign errno 11
x29087:	mov word [errno], 11	; 6: 199 6 230 10 11 0

fclose$7:	; SetReturnValue -1
x29093:	mov bx, -1	; 3: 187 255 255

fclose$8:	; Return -1
x29096:	mov ax, [bp]	; 3: 139 70 0
x29099:	mov di, [bp + 4]	; 3: 139 126 4
x29102:	mov bp, [bp + 2]	; 3: 139 110 2
x29105:	jmp ax	; 2: 255 224

fclose$9:	; Deref £temporary811 -> stream stream 27
x29107:	mov si, [bp + 6]	; 3: 139 118 6

fclose$10:	; Equal 16 £temporary811 -> stream 0
x29110:	cmp word [si + 27], 0	; 4: 131 124 27 0
x29114:	je fclose$16	; 2: 116 24

fclose$11:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

fclose$12:	; Deref £temporary812 -> stream stream 4
x29116:	mov si, [bp + 6]	; 3: 139 118 6

fclose$13:	; Parameter 8 £temporary812 -> stream 6
x29119:	mov [bp + 14], si	; 3: 137 118 14
x29122:	add word [bp + 14], 4	; 4: 131 70 14 4

fclose$14:	; Call 8 remove 0
x29126:	mov word [bp + 8], fclose$15	; 5: 199 70 8 212 113
x29131:	mov [bp + 10], bp	; 3: 137 110 10
x29134:	add bp, 8	; 3: 131 197 8
x29137:	nop	; 1: 144
x29138:	jmp remove	; 2: 235 124

fclose$15:	; PostCall 8

fclose$16:	; Deref £temporary815 -> stream stream 0
x29140:	mov si, [bp + 6]	; 3: 139 118 6

fclose$17:	; Assign £temporary815 -> stream 0
x29143:	mov word [si], 0	; 4: 199 4 0 0

fclose$18:	; SetReturnValue 0
x29147:	mov bx, 0	; 3: 187 0 0

fclose$19:	; Return 0
x29150:	mov ax, [bp]	; 3: 139 70 0
x29153:	mov di, [bp + 4]	; 3: 139 126 4
x29156:	mov bp, [bp + 2]	; 3: 139 110 2
x29159:	jmp ax	; 2: 255 224

fclose$20:	; Assign index 0
x29161:	mov word [bp + 8], 0	; 5: 199 70 8 0 0

fclose$21:	; SignedGreaterThanEqual 40 index 20
x29166:	cmp word [bp + 8], 20	; 4: 131 126 8 20
x29170:	jge fclose$40	; 2: 125 74

fclose$22:	; SignedMultiply £temporary819 index 29
x29172:	mov ax, [bp + 8]	; 3: 139 70 8
x29175:	xor dx, dx	; 2: 49 210
x29177:	imul word [@1957$int2$29#]	; 4: 247 46 76 114

fclose$23:	; BinaryAdd £temporary820 g_fileArray £temporary819
x29181:	mov si, g_fileArray	; 3: 190 102 13
x29184:	add si, ax	; 2: 1 198

fclose$24:	; Deref £temporary818 -> £temporary820 £temporary820 0

fclose$25:	; Equal 38 £temporary818.open$0 -> £temporary820 0
x29186:	cmp word [si], 0	; 3: 131 60 0
x29189:	je fclose$38	; 2: 116 50

fclose$26:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

fclose$27:	; SignedMultiply £temporary822 index 29
x29191:	mov ax, [bp + 8]	; 3: 139 70 8
x29194:	xor dx, dx	; 2: 49 210
x29196:	imul word [@1962$int2$29#]	; 4: 247 46 78 114

fclose$28:	; BinaryAdd £temporary823 g_fileArray £temporary822
x29200:	mov si, g_fileArray	; 3: 190 102 13
x29203:	add si, ax	; 2: 1 198

fclose$29:	; Deref £temporary821 -> £temporary823 £temporary823 0

fclose$30:	; address £temporary824 £temporary821 -> £temporary823

fclose$31:	; Parameter 10 £temporary824 6
x29205:	mov [bp + 16], si	; 3: 137 118 16

fclose$32:	; Call 10 fclose 0
x29208:	mov word [bp + 10], fclose$33	; 5: 199 70 10 38 114
x29213:	mov [bp + 12], bp	; 3: 137 110 12
x29216:	add bp, 10	; 3: 131 197 10
x29219:	jmp fclose	; 3: 233 103 255

fclose$33:	; PostCall 10

fclose$34:	; GetReturnValue £temporary825

fclose$35:	; NotEqual 38 £temporary825 -1
x29222:	cmp bx, -1	; 3: 131 251 255
x29225:	jne fclose$38	; 2: 117 14

fclose$36:	; SetReturnValue -1
x29227:	mov bx, -1	; 3: 187 255 255

fclose$37:	; Return -1
x29230:	mov ax, [bp]	; 3: 139 70 0
x29233:	mov di, [bp + 4]	; 3: 139 126 4
x29236:	mov bp, [bp + 2]	; 3: 139 110 2
x29239:	jmp ax	; 2: 255 224

fclose$38:	; Increment index
x29241:	inc word [bp + 8]	; 3: 255 70 8

fclose$39:	; Goto 21
x29244:	jmp fclose$21	; 2: 235 176

fclose$40:	; SetReturnValue 0
x29246:	mov bx, 0	; 3: 187 0 0

fclose$41:	; Return 0
x29249:	mov ax, [bp]	; 3: 139 70 0
x29252:	mov di, [bp + 4]	; 3: 139 126 4
x29255:	mov bp, [bp + 2]	; 3: 139 110 2
x29258:	jmp ax	; 2: 255 224

fclose$42:	; FunctionEnd fclose

@1957$int2$29#:
x29260:	dw 29	; 2: 29 0

@1962$int2$29#:
x29262:	dw 29	; 2: 29 0

remove:	; AssignRegister ah 65
x29264:	mov ah, 65	; 2: 180 65

remove$1:	; AssignRegister cl 0
x29266:	mov cl, 0	; 2: 177 0

remove$2:	; AssignRegister dx name
x29268:	mov dx, [bp + 6]	; 3: 139 86 6

remove$3:	; Interrupt 33
x29271:	int 33	; 2: 205 33

remove$4:	; Carry 7
x29273:	jc remove$7	; 2: 114 14

remove$5:	; SetReturnValue 0
x29275:	mov bx, 0	; 3: 187 0 0

remove$6:	; Return 0
x29278:	mov ax, [bp]	; 3: 139 70 0
x29281:	mov di, [bp + 4]	; 3: 139 126 4
x29284:	mov bp, [bp + 2]	; 3: 139 110 2
x29287:	jmp ax	; 2: 255 224

remove$7:	; Assign errno 18
x29289:	mov word [errno], 18	; 6: 199 6 230 10 18 0

remove$8:	; SetReturnValue -1
x29295:	mov bx, -1	; 3: 187 255 255

remove$9:	; Return -1
x29298:	mov ax, [bp]	; 3: 139 70 0
x29301:	mov di, [bp + 4]	; 3: 139 126 4
x29304:	mov bp, [bp + 2]	; 3: 139 110 2
x29307:	jmp ax	; 2: 255 224

remove$10:	; FunctionEnd remove

rename:	; AssignRegister ah 86
x29309:	mov ah, 86	; 2: 180 86

rename$1:	; AssignRegister cl 0
x29311:	mov cl, 0	; 2: 177 0

rename$2:	; AssignRegister dx oldName
x29313:	mov dx, [bp + 6]	; 3: 139 86 6

rename$3:	; AssignRegister di newName
x29316:	mov di, [bp + 8]	; 3: 139 126 8

rename$4:	; Interrupt 33
x29319:	int 33	; 2: 205 33

rename$5:	; Carry 8
x29321:	jc rename$8	; 2: 114 14

rename$6:	; SetReturnValue 0
x29323:	mov bx, 0	; 3: 187 0 0

rename$7:	; Return 0
x29326:	mov ax, [bp]	; 3: 139 70 0
x29329:	mov di, [bp + 4]	; 3: 139 126 4
x29332:	mov bp, [bp + 2]	; 3: 139 110 2
x29335:	jmp ax	; 2: 255 224

rename$8:	; Assign errno 19
x29337:	mov word [errno], 19	; 6: 199 6 230 10 19 0

rename$9:	; SetReturnValue -1
x29343:	mov bx, -1	; 3: 187 255 255

rename$10:	; Return -1
x29346:	mov ax, [bp]	; 3: 139 70 0
x29349:	mov di, [bp + 4]	; 3: 139 126 4
x29352:	mov bp, [bp + 2]	; 3: 139 110 2
x29355:	jmp ax	; 2: 255 224

rename$11:	; FunctionEnd rename

fwrite:	; Deref £temporary923 -> stream stream 2
x29357:	mov si, [bp + 12]	; 3: 139 118 12

fwrite$1:	; AssignRegister bx £temporary923 -> stream
x29360:	mov bx, [si + 2]	; 3: 139 92 2

fwrite$2:	; SignedMultiply £temporary925 size nobj
x29363:	mov ax, [bp + 8]	; 3: 139 70 8
x29366:	xor dx, dx	; 2: 49 210
x29368:	imul word [bp + 10]	; 3: 247 110 10

fwrite$3:	; AssignRegister cx £temporary925
x29371:	mov cx, ax	; 2: 137 193

fwrite$4:	; AssignRegister ah 64
x29373:	mov ah, 64	; 2: 180 64

fwrite$5:	; AssignRegister dx ptr
x29375:	mov dx, [bp + 6]	; 3: 139 86 6

fwrite$6:	; Interrupt 33
x29378:	int 33	; 2: 205 33

fwrite$7:	; NotCarry 13
x29380:	jnc fwrite$13	; 2: 115 29

fwrite$8:	; Deref £temporary929 -> stream stream 21
x29382:	mov si, [bp + 12]	; 3: 139 118 12

fwrite$9:	; Assign errno 13
x29385:	mov word [errno], 13	; 6: 199 6 230 10 13 0

fwrite$10:	; Assign £temporary929 -> stream errno
x29391:	mov ax, [errno]	; 3: 161 230 10
x29394:	mov [si + 21], ax	; 3: 137 68 21

fwrite$11:	; SetReturnValue 0
x29397:	mov bx, 0	; 3: 187 0 0

fwrite$12:	; Return 0
x29400:	mov ax, [bp]	; 3: 139 70 0
x29403:	mov di, [bp + 4]	; 3: 139 126 4
x29406:	mov bp, [bp + 2]	; 3: 139 110 2
x29409:	jmp ax	; 2: 255 224

fwrite$13:	; InspectRegister £temporary930 ax

fwrite$14:	; SetReturnValue £temporary930
x29411:	mov bx, ax	; 2: 137 195

fwrite$15:	; Return £temporary930
x29413:	mov ax, [bp]	; 3: 139 70 0
x29416:	mov di, [bp + 4]	; 3: 139 126 4
x29419:	mov bp, [bp + 2]	; 3: 139 110 2
x29422:	jmp ax	; 2: 255 224

fwrite$16:	; FunctionEnd fwrite

fread:	; Deref £temporary914 -> stream stream 2
x29424:	mov si, [bp + 12]	; 3: 139 118 12

fread$1:	; AssignRegister bx £temporary914 -> stream
x29427:	mov bx, [si + 2]	; 3: 139 92 2

fread$2:	; SignedMultiply £temporary916 size nobj
x29430:	mov ax, [bp + 8]	; 3: 139 70 8
x29433:	xor dx, dx	; 2: 49 210
x29435:	imul word [bp + 10]	; 3: 247 110 10

fread$3:	; AssignRegister cx £temporary916
x29438:	mov cx, ax	; 2: 137 193

fread$4:	; AssignRegister ah 63
x29440:	mov ah, 63	; 2: 180 63

fread$5:	; AssignRegister dx ptr
x29442:	mov dx, [bp + 6]	; 3: 139 86 6

fread$6:	; Interrupt 33
x29445:	int 33	; 2: 205 33

fread$7:	; NotCarry 13
x29447:	jnc fread$13	; 2: 115 29

fread$8:	; Deref £temporary920 -> stream stream 21
x29449:	mov si, [bp + 12]	; 3: 139 118 12

fread$9:	; Assign errno 14
x29452:	mov word [errno], 14	; 6: 199 6 230 10 14 0

fread$10:	; Assign £temporary920 -> stream errno
x29458:	mov ax, [errno]	; 3: 161 230 10
x29461:	mov [si + 21], ax	; 3: 137 68 21

fread$11:	; SetReturnValue 0
x29464:	mov bx, 0	; 3: 187 0 0

fread$12:	; Return 0
x29467:	mov ax, [bp]	; 3: 139 70 0
x29470:	mov di, [bp + 4]	; 3: 139 126 4
x29473:	mov bp, [bp + 2]	; 3: 139 110 2
x29476:	jmp ax	; 2: 255 224

fread$13:	; InspectRegister £temporary921 ax

fread$14:	; SetReturnValue £temporary921
x29478:	mov bx, ax	; 2: 137 195

fread$15:	; Return £temporary921
x29480:	mov ax, [bp]	; 3: 139 70 0
x29483:	mov di, [bp + 4]	; 3: 139 126 4
x29486:	mov bp, [bp + 2]	; 3: 139 110 2
x29489:	jmp ax	; 2: 255 224

fread$16:	; FunctionEnd fread

malloc:	; IntegralToIntegral £temporary25 memorySize
x29491:	mov ax, [bp + 6]	; 3: 139 70 6

malloc$1:	; BinaryAdd newBlockSize £temporary25 4
x29494:	add ax, 4	; 3: 131 192 4
x29497:	mov [bp + 8], ax	; 3: 137 70 8

malloc$2:	; Assign minGap 0
x29500:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

malloc$3:	; Assign lastAddress 65528
x29505:	mov word [bp + 12], 65528	; 5: 199 70 12 248 255

malloc$4:	; Assign minBlockPtr 0
x29510:	mov word [bp + 14], 0	; 5: 199 70 14 0 0

malloc$5:	; Assign minPrevBlockPtr 0
x29515:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

malloc$6:	; Assign prevBlockPtr 0
x29520:	mov word [bp + 18], 0	; 5: 199 70 18 0 0

malloc$7:	; Assign currBlockPtr g_firstBlockPtr
x29525:	mov ax, [g_firstBlockPtr]	; 3: 161 193 116
x29528:	mov [bp + 20], ax	; 3: 137 70 20

malloc$8:	; SignedGreaterThanEqual 20 memorySize 0
x29531:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x29535:	jge malloc$20	; 2: 125 59

malloc$9:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc$10:	; Parameter 22 stderr 6
x29537:	mov ax, [stderr]	; 3: 161 139 77
x29540:	mov [bp + 28], ax	; 3: 137 70 28

malloc$11:	; Parameter 22 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x29543:	mov word [bp + 30], @115$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 30 195 116

malloc$12:	; Parameter 22 string_memorySize203E3D200# 10
x29548:	mov word [bp + 32], @116$string_memorySize203E3D200#	; 5: 199 70 32 241 116

malloc$13:	; Parameter 22 string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec# 12
x29553:	mov word [bp + 34], @117$string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec#	; 5: 199 70 34 1 117

malloc$14:	; Parameter 22 41 14
x29558:	mov word [bp + 36], 41	; 5: 199 70 36 41 0

malloc$15:	; Call 22 fprintf 0
x29563:	mov word [bp + 22], malloc$16	; 5: 199 70 22 142 115
x29568:	mov [bp + 24], bp	; 3: 137 110 24
x29571:	add bp, 22	; 3: 131 197 22
x29574:	mov di, bp	; 2: 137 239
x29576:	add di, 6	; 3: 131 199 6
x29579:	jmp fprintf	; 3: 233 239 234

malloc$16:	; PostCall 22

malloc$17:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc$18:	; Call 22 abort 0
x29582:	mov word [bp + 22], malloc$19	; 5: 199 70 22 156 115
x29587:	mov [bp + 24], bp	; 3: 137 110 24
x29590:	add bp, 22	; 3: 131 197 22
x29593:	jmp abort	; 3: 233 28 235

malloc$19:	; PostCall 22

malloc$20:	; NotEqual 23 memorySize 0
x29596:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x29600:	jne malloc$23	; 2: 117 14

malloc$21:	; SetReturnValue 0
x29602:	mov bx, 0	; 3: 187 0 0

malloc$22:	; Return 0
x29605:	mov ax, [bp]	; 3: 139 70 0
x29608:	mov di, [bp + 4]	; 3: 139 126 4
x29611:	mov bp, [bp + 2]	; 3: 139 110 2
x29614:	jmp ax	; 2: 255 224

malloc$23:	; Equal 41 currBlockPtr 0
x29616:	cmp word [bp + 20], 0	; 4: 131 126 20 0
x29620:	je malloc$41	; 2: 116 88

malloc$24:	; IntegralToIntegral £temporary33 currBlockPtr
x29622:	mov ax, [bp + 20]	; 3: 139 70 20

malloc$25:	; Assign currAddress £temporary33
x29625:	mov [bp + 22], ax	; 3: 137 70 22

malloc$26:	; Deref £temporary34 -> currBlockPtr currBlockPtr 0
x29628:	mov si, [bp + 20]	; 3: 139 118 20

malloc$27:	; BinaryAdd £temporary35 currAddress £temporary34 -> currBlockPtr
x29631:	mov ax, [bp + 22]	; 3: 139 70 22
x29634:	add ax, [si]	; 2: 3 4

malloc$28:	; BinaryAdd £temporary36 £temporary35 4
x29636:	add ax, 4	; 3: 131 192 4

malloc$29:	; BinarySubtract currGap lastAddress £temporary36
x29639:	mov bx, [bp + 12]	; 3: 139 94 12
x29642:	sub bx, ax	; 2: 41 195
x29644:	mov [bp + 24], bx	; 3: 137 94 24

malloc$30:	; UnsignedGreaterThan 36 newBlockSize currGap
x29647:	mov ax, [bp + 24]	; 3: 139 70 24
x29650:	cmp [bp + 8], ax	; 3: 57 70 8
x29653:	ja malloc$36	; 2: 119 32

malloc$31:	; Equal 33 minGap 0
x29655:	cmp word [bp + 10], 0	; 4: 131 126 10 0
x29659:	je malloc$33	; 2: 116 8

malloc$32:	; UnsignedGreaterThanEqual 36 currGap minGap
x29661:	mov ax, [bp + 10]	; 3: 139 70 10
x29664:	cmp [bp + 24], ax	; 3: 57 70 24
x29667:	jae malloc$36	; 2: 115 18

malloc$33:	; Assign minGap currGap
x29669:	mov ax, [bp + 24]	; 3: 139 70 24
x29672:	mov [bp + 10], ax	; 3: 137 70 10

malloc$34:	; Assign minBlockPtr currBlockPtr
x29675:	mov ax, [bp + 20]	; 3: 139 70 20
x29678:	mov [bp + 14], ax	; 3: 137 70 14

malloc$35:	; Assign minPrevBlockPtr prevBlockPtr
x29681:	mov ax, [bp + 18]	; 3: 139 70 18
x29684:	mov [bp + 16], ax	; 3: 137 70 16

malloc$36:	; Assign lastAddress currAddress
x29687:	mov ax, [bp + 22]	; 3: 139 70 22
x29690:	mov [bp + 12], ax	; 3: 137 70 12

malloc$37:	; Assign prevBlockPtr currBlockPtr
x29693:	mov ax, [bp + 20]	; 3: 139 70 20
x29696:	mov [bp + 18], ax	; 3: 137 70 18

malloc$38:	; Deref £temporary43 -> currBlockPtr currBlockPtr 2
x29699:	mov si, [bp + 20]	; 3: 139 118 20

malloc$39:	; Assign currBlockPtr £temporary43 -> currBlockPtr
x29702:	mov ax, [si + 2]	; 3: 139 68 2
x29705:	mov [bp + 20], ax	; 3: 137 70 20

malloc$40:	; Goto 23
x29708:	jmp malloc$23	; 2: 235 162

malloc$41:	; Equal 61 minBlockPtr 0
x29710:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x29714:	je malloc$61	; 2: 116 77

malloc$42:	; IntegralToIntegral £temporary45 minBlockPtr
x29716:	mov ax, [bp + 14]	; 3: 139 70 14

malloc$43:	; Deref £temporary46 -> minBlockPtr minBlockPtr 0
x29719:	mov si, [bp + 14]	; 3: 139 118 14

malloc$44:	; BinaryAdd £temporary47 £temporary45 £temporary46 -> minBlockPtr
x29722:	add ax, [si]	; 2: 3 4

malloc$45:	; BinaryAdd newAddress £temporary47 4
x29724:	add ax, 4	; 3: 131 192 4
x29727:	mov [bp + 22], ax	; 3: 137 70 22

malloc$46:	; IntegralToIntegral £temporary49 newAddress
x29730:	mov ax, [bp + 22]	; 3: 139 70 22

malloc$47:	; Assign newBlockPtr £temporary49
x29733:	mov [bp + 24], ax	; 3: 137 70 24

malloc$48:	; Deref £temporary50 -> newBlockPtr newBlockPtr 0
x29736:	mov si, [bp + 24]	; 3: 139 118 24

malloc$49:	; Assign £temporary50 -> newBlockPtr memorySize
x29739:	mov ax, [bp + 6]	; 3: 139 70 6
x29742:	mov [si], ax	; 2: 137 4

malloc$50:	; Deref £temporary51 -> newBlockPtr newBlockPtr 2
x29744:	mov si, [bp + 24]	; 3: 139 118 24

malloc$51:	; Assign £temporary51 -> newBlockPtr minBlockPtr
x29747:	mov ax, [bp + 14]	; 3: 139 70 14
x29750:	mov [si + 2], ax	; 3: 137 68 2

malloc$52:	; Equal 56 minPrevBlockPtr 0
x29753:	cmp word [bp + 16], 0	; 4: 131 126 16 0
x29757:	je malloc$56	; 2: 116 11

malloc$53:	; Deref £temporary53 -> minPrevBlockPtr minPrevBlockPtr 2
x29759:	mov si, [bp + 16]	; 3: 139 118 16

malloc$54:	; Assign £temporary53 -> minPrevBlockPtr newBlockPtr
x29762:	mov ax, [bp + 24]	; 3: 139 70 24
x29765:	mov [si + 2], ax	; 3: 137 68 2

malloc$55:	; Goto 57
x29768:	jmp malloc$57	; 2: 235 6

malloc$56:	; Assign g_firstBlockPtr newBlockPtr
x29770:	mov ax, [bp + 24]	; 3: 139 70 24
x29773:	mov [g_firstBlockPtr], ax	; 3: 163 193 116

malloc$57:	; BinaryAdd £temporary54 newAddress 4
x29776:	mov bx, [bp + 22]	; 3: 139 94 22
x29779:	add bx, 4	; 3: 131 195 4

malloc$58:	; IntegralToIntegral £temporary55 £temporary54

malloc$59:	; SetReturnValue £temporary55

malloc$60:	; Return £temporary55
x29782:	mov ax, [bp]	; 3: 139 70 0
x29785:	mov di, [bp + 4]	; 3: 139 126 4
x29788:	mov bp, [bp + 2]	; 3: 139 110 2
x29791:	jmp ax	; 2: 255 224

malloc$61:	; BinarySubtract newAddress lastAddress newBlockSize
x29793:	mov ax, [bp + 12]	; 3: 139 70 12
x29796:	sub ax, [bp + 8]	; 3: 43 70 8
x29799:	mov [bp + 22], ax	; 3: 137 70 22

malloc$62:	; InspectRegister £temporary57 bp

malloc$63:	; Assign stackTop £temporary57
x29802:	mov [bp + 24], bp	; 3: 137 110 24

malloc$64:	; UnsignedGreaterThan 80 stackTop newAddress
x29805:	mov ax, [bp + 22]	; 3: 139 70 22
x29808:	cmp [bp + 24], ax	; 3: 57 70 24
x29811:	ja malloc$80	; 2: 119 62

malloc$65:	; IntegralToIntegral £temporary59 newAddress
x29813:	mov ax, [bp + 22]	; 3: 139 70 22

malloc$66:	; Assign newBlockPtr £temporary59
x29816:	mov [bp + 26], ax	; 3: 137 70 26

malloc$67:	; Deref £temporary60 -> newBlockPtr newBlockPtr 0
x29819:	mov si, [bp + 26]	; 3: 139 118 26

malloc$68:	; Assign £temporary60 -> newBlockPtr memorySize
x29822:	mov ax, [bp + 6]	; 3: 139 70 6
x29825:	mov [si], ax	; 2: 137 4

malloc$69:	; Deref £temporary61 -> newBlockPtr newBlockPtr 2
x29827:	mov si, [bp + 26]	; 3: 139 118 26

malloc$70:	; Assign £temporary61 -> newBlockPtr 0
x29830:	mov word [si + 2], 0	; 5: 199 68 2 0 0

malloc$71:	; Equal 75 prevBlockPtr 0
x29835:	cmp word [bp + 18], 0	; 4: 131 126 18 0
x29839:	je malloc$75	; 2: 116 11

malloc$72:	; Deref £temporary63 -> prevBlockPtr prevBlockPtr 2
x29841:	mov si, [bp + 18]	; 3: 139 118 18

malloc$73:	; Assign £temporary63 -> prevBlockPtr newBlockPtr
x29844:	mov ax, [bp + 26]	; 3: 139 70 26
x29847:	mov [si + 2], ax	; 3: 137 68 2

malloc$74:	; Goto 76
x29850:	jmp malloc$76	; 2: 235 6

malloc$75:	; Assign g_firstBlockPtr newBlockPtr
x29852:	mov ax, [bp + 26]	; 3: 139 70 26
x29855:	mov [g_firstBlockPtr], ax	; 3: 163 193 116

malloc$76:	; BinaryAdd £temporary64 newAddress 4
x29858:	mov bx, [bp + 22]	; 3: 139 94 22
x29861:	add bx, 4	; 3: 131 195 4

malloc$77:	; IntegralToIntegral £temporary65 £temporary64

malloc$78:	; SetReturnValue £temporary65

malloc$79:	; Return £temporary65
x29864:	mov ax, [bp]	; 3: 139 70 0
x29867:	mov di, [bp + 4]	; 3: 139 126 4
x29870:	mov bp, [bp + 2]	; 3: 139 110 2
x29873:	jmp ax	; 2: 255 224

malloc$80:	; SetReturnValue 0
x29875:	mov bx, 0	; 3: 187 0 0

malloc$81:	; Return 0
x29878:	mov ax, [bp]	; 3: 139 70 0
x29881:	mov di, [bp + 4]	; 3: 139 126 4
x29884:	mov bp, [bp + 2]	; 3: 139 110 2
x29887:	jmp ax	; 2: 255 224

malloc$82:	; FunctionEnd malloc

g_firstBlockPtr:
x29889:	dw 0	; 2: 0 0

@115$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x29891:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@116$string_memorySize203E3D200#:
x29937:	db "memorySize >= 0", 0	; 16: 109 101 109 111 114 121 83 105 122 101 32 62 61 32 48 0

@117$string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec#:
x29953:	db "C:\Users\Stefa\Documents\vagrant\homestead\code\code\Malloc.c", 0	; 62: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 77 97 108 108 111 99 46 99 0

free:	; IntegralToIntegral £temporary79 freeMemoryPtr
x30015:	mov ax, [bp + 6]	; 3: 139 70 6

free$1:	; BinarySubtract £temporary80 £temporary79 4
x30018:	sub ax, 4	; 3: 131 232 4

free$2:	; IntegralToIntegral £temporary81 £temporary80

free$3:	; Assign freeBlockPtr £temporary81
x30021:	mov [bp + 8], ax	; 3: 137 70 8

free$4:	; Assign prevBlockPtr 0
x30024:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

free$5:	; Assign currBlockPtr g_firstBlockPtr
x30029:	mov ax, [g_firstBlockPtr]	; 3: 161 193 116
x30032:	mov [bp + 12], ax	; 3: 137 70 12

free$6:	; NotEqual 8 freeMemoryPtr 0
x30035:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x30039:	jne free$8	; 2: 117 11

free$7:	; Return
x30041:	mov ax, [bp]	; 3: 139 70 0
x30044:	mov di, [bp + 4]	; 3: 139 126 4
x30047:	mov bp, [bp + 2]	; 3: 139 110 2
x30050:	jmp ax	; 2: 255 224

free$8:	; Equal 32 currBlockPtr 0
x30052:	cmp word [bp + 12], 0	; 4: 131 126 12 0
x30056:	je free$32	; 2: 116 107

free$9:	; NotEqual 28 currBlockPtr freeBlockPtr
x30058:	mov ax, [bp + 8]	; 3: 139 70 8
x30061:	cmp [bp + 12], ax	; 3: 57 70 12
x30064:	jne free$28	; 2: 117 82

free$10:	; NotEqual 15 prevBlockPtr 0
x30066:	cmp word [bp + 10], 0	; 4: 131 126 10 0
x30070:	jne free$15	; 2: 117 17

free$11:	; Deref £temporary86 -> currBlockPtr currBlockPtr 2
x30072:	mov si, [bp + 12]	; 3: 139 118 12

free$12:	; NotEqual 15 £temporary86 -> currBlockPtr 0
x30075:	cmp word [si + 2], 0	; 4: 131 124 2 0
x30079:	jne free$15	; 2: 117 8

free$13:	; Assign g_firstBlockPtr 0
x30081:	mov word [g_firstBlockPtr], 0	; 6: 199 6 193 116 0 0

free$14:	; Goto 27
x30087:	jmp free$27	; 2: 235 48

free$15:	; NotEqual 19 prevBlockPtr 0
x30089:	cmp word [bp + 10], 0	; 4: 131 126 10 0
x30093:	jne free$19	; 2: 117 11

free$16:	; Deref £temporary90 -> currBlockPtr currBlockPtr 2
x30095:	mov si, [bp + 12]	; 3: 139 118 12

free$17:	; Assign g_firstBlockPtr £temporary90 -> currBlockPtr
x30098:	mov ax, [si + 2]	; 3: 139 68 2
x30101:	mov [g_firstBlockPtr], ax	; 3: 163 193 116

free$18:	; Goto 27
x30104:	jmp free$27	; 2: 235 31

free$19:	; Deref £temporary91 -> currBlockPtr currBlockPtr 2
x30106:	mov si, [bp + 12]	; 3: 139 118 12

free$20:	; NotEqual 24 £temporary91 -> currBlockPtr 0
x30109:	cmp word [si + 2], 0	; 4: 131 124 2 0
x30113:	jne free$24	; 2: 117 10

free$21:	; Deref £temporary93 -> prevBlockPtr prevBlockPtr 2
x30115:	mov si, [bp + 10]	; 3: 139 118 10

free$22:	; Assign £temporary93 -> prevBlockPtr 0
x30118:	mov word [si + 2], 0	; 5: 199 68 2 0 0

free$23:	; Goto 27
x30123:	jmp free$27	; 2: 235 12

free$24:	; Deref £temporary94 -> prevBlockPtr prevBlockPtr 2
x30125:	mov si, [bp + 10]	; 3: 139 118 10

free$25:	; Deref £temporary95 -> currBlockPtr currBlockPtr 2
x30128:	mov di, [bp + 12]	; 3: 139 126 12

free$26:	; Assign £temporary94 -> prevBlockPtr £temporary95 -> currBlockPtr
x30131:	mov ax, [di + 2]	; 3: 139 69 2
x30134:	mov [si + 2], ax	; 3: 137 68 2

free$27:	; Return
x30137:	mov ax, [bp]	; 3: 139 70 0
x30140:	mov di, [bp + 4]	; 3: 139 126 4
x30143:	mov bp, [bp + 2]	; 3: 139 110 2
x30146:	jmp ax	; 2: 255 224

free$28:	; Assign prevBlockPtr currBlockPtr
x30148:	mov ax, [bp + 12]	; 3: 139 70 12
x30151:	mov [bp + 10], ax	; 3: 137 70 10

free$29:	; Deref £temporary96 -> currBlockPtr currBlockPtr 2
x30154:	mov si, [bp + 12]	; 3: 139 118 12

free$30:	; Assign currBlockPtr £temporary96 -> currBlockPtr
x30157:	mov ax, [si + 2]	; 3: 139 68 2
x30160:	mov [bp + 12], ax	; 3: 137 70 12

free$31:	; Goto 8
x30163:	jmp free$8	; 2: 235 143

free$32:	; Return 0
x30165:	mov ax, [bp]	; 3: 139 70 0
x30168:	mov di, [bp + 4]	; 3: 139 126 4
x30171:	mov bp, [bp + 2]	; 3: 139 110 2
x30174:	jmp ax	; 2: 255 224

free$33:	; FunctionEnd free

ftell:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

ftell$1:	; Parameter 8 stream 6
x30176:	mov ax, [bp + 6]	; 3: 139 70 6
x30179:	mov [bp + 14], ax	; 3: 137 70 14

ftell$2:	; Parameter 8 0 8
x30182:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

ftell$3:	; Parameter 8 1 10
x30187:	mov word [bp + 18], 1	; 5: 199 70 18 1 0

ftell$4:	; Call 8 fseek 0
x30192:	mov word [bp + 8], ftell$5	; 5: 199 70 8 254 117
x30197:	mov [bp + 10], bp	; 3: 137 110 10
x30200:	add bp, 8	; 3: 131 197 8
x30203:	jmp fseek	; 3: 233 218 231

ftell$5:	; PostCall 8

ftell$6:	; GetReturnValue £temporary945

ftell$7:	; SetReturnValue £temporary945

ftell$8:	; Return £temporary945
x30206:	mov ax, [bp]	; 3: 139 70 0
x30209:	mov di, [bp + 4]	; 3: 139 126 4
x30212:	mov bp, [bp + 2]	; 3: 139 110 2
x30215:	jmp ax	; 2: 255 224

ftell$9:	; FunctionEnd ftell

fgetc:	; Assign c 0
x30217:	mov byte [bp + 8], 0	; 4: 198 70 8 0

fgetc$1:	; CallHeader 9 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

fgetc$2:	; address £temporary841 c
x30221:	mov si, bp	; 2: 137 238
x30223:	add si, 8	; 3: 131 198 8

fgetc$3:	; Parameter 9 £temporary841 6
x30226:	mov [bp + 15], si	; 3: 137 118 15

fgetc$4:	; Parameter 9 1 8
x30229:	mov word [bp + 17], 1	; 5: 199 70 17 1 0

fgetc$5:	; Parameter 9 1 10
x30234:	mov word [bp + 19], 1	; 5: 199 70 19 1 0

fgetc$6:	; Parameter 9 stream 12
x30239:	mov ax, [bp + 6]	; 3: 139 70 6
x30242:	mov [bp + 21], ax	; 3: 137 70 21

fgetc$7:	; Call 9 fread 0
x30245:	mov word [bp + 9], fgetc$8	; 5: 199 70 9 51 118
x30250:	mov [bp + 11], bp	; 3: 137 110 11
x30253:	add bp, 9	; 3: 131 197 9
x30256:	jmp fread	; 3: 233 189 252

fgetc$8:	; PostCall 9

fgetc$9:	; GetReturnValue £temporary842

fgetc$10:	; SignedLessThanEqual 14 £temporary842 0
x30259:	cmp bx, 0	; 3: 131 251 0
x30262:	jle fgetc$14	; 2: 126 27

fgetc$11:	; IntegralToIntegral £temporary844 c
x30264:	mov bl, [bp + 8]	; 3: 138 94 8
x30267:	and bx, 255	; 4: 129 227 255 0
x30271:	cmp bl, 0	; 3: 128 251 0
x30274:	jge fgetc$12	; 2: 125 4
x30276:	neg bl	; 2: 246 219
x30278:	neg bx	; 2: 247 219

fgetc$12:	; SetReturnValue £temporary844

fgetc$13:	; Return £temporary844
x30280:	mov ax, [bp]	; 3: 139 70 0
x30283:	mov di, [bp + 4]	; 3: 139 126 4
x30286:	mov bp, [bp + 2]	; 3: 139 110 2
x30289:	jmp ax	; 2: 255 224

fgetc$14:	; SetReturnValue -1
x30291:	mov bx, -1	; 3: 187 255 255

fgetc$15:	; Return -1
x30294:	mov ax, [bp]	; 3: 139 70 0
x30297:	mov di, [bp + 4]	; 3: 139 126 4
x30300:	mov bp, [bp + 2]	; 3: 139 110 2
x30303:	jmp ax	; 2: 255 224

fgetc$16:	; FunctionEnd fgetc

putchar:	; Assign g_outStatus 0
x30305:	mov word [g_outStatus], 0	; 6: 199 6 219 15 0 0

putchar$1:	; IntegralToIntegral £temporary1597 stdout
x30311:	mov ax, [stdout]	; 3: 161 100 13

putchar$2:	; Assign g_outDevice £temporary1597
x30314:	mov [g_outDevice], ax	; 3: 163 221 15

putchar$3:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

putchar$4:	; IntegralToIntegral £temporary1598 i
x30317:	mov ax, [bp + 6]	; 3: 139 70 6
x30320:	cmp ax, 0	; 3: 131 248 0
x30323:	jge putchar$5	; 2: 125 4
x30325:	neg ax	; 2: 247 216
x30327:	neg al	; 2: 246 216

putchar$5:	; Parameter 8 £temporary1598 6
x30329:	mov [bp + 14], al	; 3: 136 70 14

putchar$6:	; Call 8 printChar 0
x30332:	mov word [bp + 8], putchar$7	; 5: 199 70 8 138 118
x30337:	mov [bp + 10], bp	; 3: 137 110 10
x30340:	add bp, 8	; 3: 131 197 8
x30343:	jmp printChar	; 3: 233 196 165

putchar$7:	; PostCall 8

putchar$8:	; SetReturnValue 1
x30346:	mov bx, 1	; 3: 187 1 0

putchar$9:	; Return 1
x30349:	mov ax, [bp]	; 3: 139 70 0
x30352:	mov di, [bp + 4]	; 3: 139 126 4
x30355:	mov bp, [bp + 2]	; 3: 139 110 2
x30358:	jmp ax	; 2: 255 224

putchar$10:	; FunctionEnd putchar

time_test:	; Assign weekdays[0] string_Sun#
x30360:	mov word [bp + 6], @13554$string_Sun#	; 5: 199 70 6 120 121

time_test$1:	; Assign weekdays[1] string_Mon#
x30365:	mov word [bp + 8], @13555$string_Mon#	; 5: 199 70 8 124 121

time_test$2:	; Assign weekdays[2] string_Tue#
x30370:	mov word [bp + 10], @13556$string_Tue#	; 5: 199 70 10 128 121

time_test$3:	; Assign weekdays[3] string_Wed#
x30375:	mov word [bp + 12], @13557$string_Wed#	; 5: 199 70 12 132 121

time_test$4:	; Assign weekdays[4] string_Thu#
x30380:	mov word [bp + 14], @13558$string_Thu#	; 5: 199 70 14 136 121

time_test$5:	; Assign weekdays[5] string_Fri#
x30385:	mov word [bp + 16], @13559$string_Fri#	; 5: 199 70 16 140 121

time_test$6:	; Assign weekdays[6] string_Sat#
x30390:	mov word [bp + 18], @13560$string_Sat#	; 5: 199 70 18 144 121

time_test$7:	; CallHeader 20 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$8:	; Parameter 20 0 6
x30395:	mov word [bp + 26], 0	; 5: 199 70 26 0 0

time_test$9:	; Call 20 time 0
x30400:	mov word [bp + 20], time_test$10	; 5: 199 70 20 206 118
x30405:	mov [bp + 22], bp	; 3: 137 110 22
x30408:	add bp, 20	; 3: 131 197 20
x30411:	jmp time	; 3: 233 219 4

time_test$10:	; PostCall 20

time_test$11:	; GetReturnValue £temporary6238

time_test$12:	; Assign now1 £temporary6238
x30414:	mov [bp + 20], ebx	; 4: 102 137 94 20

time_test$13:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$14:	; address £temporary6239 now1
x30418:	mov si, bp	; 2: 137 238
x30420:	add si, 20	; 3: 131 198 20

time_test$15:	; Parameter 24 £temporary6239 6
x30423:	mov [bp + 30], si	; 3: 137 118 30

time_test$16:	; Call 24 gmtime 0
x30426:	mov word [bp + 24], time_test$17	; 5: 199 70 24 232 118
x30431:	mov [bp + 26], bp	; 3: 137 110 26
x30434:	add bp, 24	; 3: 131 197 24
x30437:	jmp gmtime	; 3: 233 161 7

time_test$17:	; PostCall 24

time_test$18:	; GetReturnValue £temporary6240

time_test$19:	; Deref £temporary6241 -> £temporary6240 £temporary6240 0

time_test$20:	; Assign s £temporary6241 -> £temporary6240
x30440:	mov si, bp	; 2: 137 238
x30442:	add si, 24	; 3: 131 198 24
x30445:	mov al, 18	; 2: 176 18

time_test$20$Loop:
x30447:	mov ah, [bx]	; 2: 138 39
x30449:	mov [si], ah	; 2: 136 36
x30451:	inc bx	; 1: 67
x30452:	inc si	; 1: 70
x30453:	dec al	; 2: 254 200
x30455:	cmp al, 0	; 2: 60 0
x30457:	jne time_test$20$Loop	; 2: 117 244

time_test$21:	; CallHeader 42 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$22:	; address £temporary6242 now1
x30459:	mov si, bp	; 2: 137 238
x30461:	add si, 20	; 3: 131 198 20

time_test$23:	; Parameter 42 £temporary6242 6
x30464:	mov [bp + 48], si	; 3: 137 118 48

time_test$24:	; Call 42 localtime 0
x30467:	mov word [bp + 42], time_test$25	; 5: 199 70 42 17 119
x30472:	mov [bp + 44], bp	; 3: 137 110 44
x30475:	add bp, 42	; 3: 131 197 42
x30478:	jmp localtime	; 3: 233 24 10

time_test$25:	; PostCall 42

time_test$26:	; GetReturnValue £temporary6243

time_test$27:	; Deref £temporary6244 -> £temporary6243 £temporary6243 0

time_test$28:	; Assign t £temporary6244 -> £temporary6243
x30481:	mov si, bp	; 2: 137 238
x30483:	add si, 42	; 3: 131 198 42
x30486:	mov al, 18	; 2: 176 18

time_test$28$Loop:
x30488:	mov ah, [bx]	; 2: 138 39
x30490:	mov [si], ah	; 2: 136 36
x30492:	inc bx	; 1: 67
x30493:	inc si	; 1: 70
x30494:	dec al	; 2: 254 200
x30496:	cmp al, 0	; 2: 60 0
x30498:	jne time_test$28$Loop	; 2: 117 244

time_test$29:	; CallHeader 60 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$30:	; address £temporary6245 s
x30500:	mov si, bp	; 2: 137 238
x30502:	add si, 24	; 3: 131 198 24

time_test$31:	; Parameter 60 £temporary6245 6
x30505:	mov [bp + 66], si	; 3: 137 118 66

time_test$32:	; Call 60 mktime 0
x30508:	mov word [bp + 60], time_test$33	; 5: 199 70 60 58 119
x30513:	mov [bp + 62], bp	; 3: 137 110 62
x30516:	add bp, 60	; 3: 131 197 60
x30519:	jmp mktime	; 3: 233 78 6

time_test$33:	; PostCall 60

time_test$34:	; GetReturnValue £temporary6246

time_test$35:	; Assign now2 £temporary6246
x30522:	mov [bp + 60], ebx	; 4: 102 137 94 60

time_test$36:	; CallHeader 64 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$37:	; Parameter 64 string_now2013A2025lu0A# 6
x30526:	mov word [bp + 70], @13586$string_now2013A2025lu0A#	; 5: 199 70 70 148 121

time_test$38:	; Parameter 64 now1 8
x30531:	mov eax, [bp + 20]	; 4: 102 139 70 20
x30535:	mov [bp + 72], eax	; 4: 102 137 70 72

time_test$39:	; Call 64 printf 0
x30539:	mov word [bp + 64], time_test$40	; 5: 199 70 64 94 119
x30544:	mov [bp + 66], bp	; 3: 137 110 66
x30547:	add bp, 64	; 3: 131 197 64
x30550:	mov di, bp	; 2: 137 239
x30552:	add di, 4	; 3: 131 199 4
x30555:	jmp printf	; 3: 233 166 149

time_test$40:	; PostCall 64

time_test$41:	; CallHeader 64 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$42:	; Parameter 64 string_now2023A2025lu0A# 6
x30558:	mov word [bp + 70], @13588$string_now2023A2025lu0A#	; 5: 199 70 70 160 121

time_test$43:	; Parameter 64 now2 8
x30563:	mov eax, [bp + 60]	; 4: 102 139 70 60
x30567:	mov [bp + 72], eax	; 4: 102 137 70 72

time_test$44:	; Call 64 printf 0
x30571:	mov word [bp + 64], time_test$45	; 5: 199 70 64 126 119
x30576:	mov [bp + 66], bp	; 3: 137 110 66
x30579:	add bp, 64	; 3: 131 197 64
x30582:	mov di, bp	; 2: 137 239
x30584:	add di, 4	; 3: 131 199 4
x30587:	jmp printf	; 3: 233 134 149

time_test$45:	; PostCall 64

time_test$46:	; CallHeader 64 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$47:	; Parameter 64 string_202020gm20time3A2025s202502i2D2502i2D2502i202502i3A2502i3A2502i2C20year20day2025i2C20week20day2025i2C20daylight20saving20time2025i0A# 6
x30590:	mov word [bp + 70], @13590$string_202020gm20time3A2025s202502i2D2502i2D2502i202502i3A2502i3A2502i2C20year20day2025i2C20week20day2025i2C20daylight20saving20time2025i0A#	; 5: 199 70 70 172 121

time_test$48:	; SignedMultiply £temporary6251 s$tm_wday 2
x30595:	mov ax, [bp + 36]	; 3: 139 70 36
x30598:	xor dx, dx	; 2: 49 210
x30600:	imul word [@13593$int2$2#]	; 4: 247 46 13 122

time_test$49:	; BinaryAdd £temporary6252 weekdays £temporary6251
x30604:	mov si, bp	; 2: 137 238
x30606:	add si, 6	; 3: 131 198 6
x30609:	add si, ax	; 2: 1 198

time_test$50:	; Deref £temporary6250 -> £temporary6252 £temporary6252 0

time_test$51:	; Parameter 64 £temporary6250 -> £temporary6252 8
x30611:	mov ax, [si]	; 2: 139 4
x30613:	mov [bp + 72], ax	; 3: 137 70 72

time_test$52:	; BinaryAdd £temporary6254 s$tm_year 1900
x30616:	mov ax, [bp + 34]	; 3: 139 70 34
x30619:	add ax, 1900	; 3: 5 108 7

time_test$53:	; Parameter 64 £temporary6254 10
x30622:	mov [bp + 74], ax	; 3: 137 70 74

time_test$54:	; BinaryAdd £temporary6256 s$tm_mon 1
x30625:	mov ax, [bp + 32]	; 3: 139 70 32
x30628:	inc ax	; 1: 64

time_test$55:	; Parameter 64 £temporary6256 12
x30629:	mov [bp + 76], ax	; 3: 137 70 76

time_test$56:	; Parameter 64 s$tm_mday 14
x30632:	mov ax, [bp + 30]	; 3: 139 70 30
x30635:	mov [bp + 78], ax	; 3: 137 70 78

time_test$57:	; Parameter 64 s$tm_hour 16
x30638:	mov ax, [bp + 28]	; 3: 139 70 28
x30641:	mov [bp + 80], ax	; 3: 137 70 80

time_test$58:	; Parameter 64 s$tm_min 18
x30644:	mov ax, [bp + 26]	; 3: 139 70 26
x30647:	mov [bp + 82], ax	; 3: 137 70 82

time_test$59:	; Parameter 64 s$tm_sec 20
x30650:	mov ax, [bp + 24]	; 3: 139 70 24

x30653:	mov [bp + 84], ax	; 3: 137 70 84

time_test$60:	; Parameter 64 s$tm_yday 22
x30656:	mov ax, [bp + 38]	; 3: 139 70 38
x30659:	mov [bp + 86], ax	; 3: 137 70 86

time_test$61:	; Parameter 64 s$tm_wday 24
x30662:	mov ax, [bp + 36]	; 3: 139 70 36
x30665:	mov [bp + 88], ax	; 3: 137 70 88

time_test$62:	; Parameter 64 s$tm_isdst 26
x30668:	mov ax, [bp + 40]	; 3: 139 70 40
x30671:	mov [bp + 90], ax	; 3: 137 70 90

time_test$63:	; Call 64 printf 0
x30674:	mov word [bp + 64], time_test$64	; 5: 199 70 64 229 119
x30679:	mov [bp + 66], bp	; 3: 137 110 66
x30682:	add bp, 64	; 3: 131 197 64
x30685:	mov di, bp	; 2: 137 239
x30687:	add di, 20	; 3: 131 199 20
x30690:	jmp printf	; 3: 233 31 149

time_test$64:	; PostCall 64

time_test$65:	; CallHeader 64 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$66:	; Parameter 64 string_local20time3A2025s202502i2D2502i2D2502i202502i3A2502i3A2502i2C20year20day2025i2C20week20day2025i2C20daylight20saving20time2025i0A# 6
x30693:	mov word [bp + 70], @13612$string_local20time3A2025s202502i2D2502i2D2502i202502i3A2502i3A2502i2C20year20day2025i2C20week20day2025i2C20daylight20saving20time2025i0A#	; 5: 199 70 70 15 122

time_test$67:	; SignedMultiply £temporary6267 t$tm_wday 2
x30698:	mov ax, [bp + 54]	; 3: 139 70 54
x30701:	xor dx, dx	; 2: 49 210
x30703:	imul word [@13615$int2$2#]	; 4: 247 46 112 122

time_test$68:	; BinaryAdd £temporary6268 weekdays £temporary6267
x30707:	mov si, bp	; 2: 137 238
x30709:	add si, 6	; 3: 131 198 6
x30712:	add si, ax	; 2: 1 198

time_test$69:	; Deref £temporary6266 -> £temporary6268 £temporary6268 0

time_test$70:	; Parameter 64 £temporary6266 -> £temporary6268 8
x30714:	mov ax, [si]	; 2: 139 4
x30716:	mov [bp + 72], ax	; 3: 137 70 72

time_test$71:	; BinaryAdd £temporary6270 t$tm_year 1900
x30719:	mov ax, [bp + 52]	; 3: 139 70 52
x30722:	add ax, 1900	; 3: 5 108 7

time_test$72:	; Parameter 64 £temporary6270 10
x30725:	mov [bp + 74], ax	; 3: 137 70 74

time_test$73:	; BinaryAdd £temporary6272 t$tm_mon 1
x30728:	mov ax, [bp + 50]	; 3: 139 70 50
x30731:	inc ax	; 1: 64

time_test$74:	; Parameter 64 £temporary6272 12
x30732:	mov [bp + 76], ax	; 3: 137 70 76

time_test$75:	; Parameter 64 t$tm_mday 14
x30735:	mov ax, [bp + 48]	; 3: 139 70 48
x30738:	mov [bp + 78], ax	; 3: 137 70 78

time_test$76:	; Parameter 64 t$tm_hour 16
x30741:	mov ax, [bp + 46]	; 3: 139 70 46
x30744:	mov [bp + 80], ax	; 3: 137 70 80

time_test$77:	; Parameter 64 t$tm_min 18
x30747:	mov ax, [bp + 44]	; 3: 139 70 44
x30750:	mov [bp + 82], ax	; 3: 137 70 82

time_test$78:	; Parameter 64 t$tm_sec 20
x30753:	mov ax, [bp + 42]	; 3: 139 70 42
x30756:	mov [bp + 84], ax	; 3: 137 70 84

time_test$79:	; Parameter 64 t$tm_yday 22
x30759:	mov ax, [bp + 56]	; 3: 139 70 56
x30762:	mov [bp + 86], ax	; 3: 137 70 86

time_test$80:	; Parameter 64 t$tm_wday 24
x30765:	mov ax, [bp + 54]	; 3: 139 70 54
x30768:	mov [bp + 88], ax	; 3: 137 70 88

time_test$81:	; Parameter 64 t$tm_isdst 26
x30771:	mov ax, [bp + 58]	; 3: 139 70 58
x30774:	mov [bp + 90], ax	; 3: 137 70 90

time_test$82:	; Call 64 printf 0
x30777:	mov word [bp + 64], time_test$83	; 5: 199 70 64 76 120
x30782:	mov [bp + 66], bp	; 3: 137 110 66
x30785:	add bp, 64	; 3: 131 197 64
x30788:	mov di, bp	; 2: 137 239
x30790:	add di, 20	; 3: 131 199 20
x30793:	jmp printf	; 3: 233 184 148

time_test$83:	; PostCall 64

time_test$84:	; CallHeader 666 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$85:	; Parameter 666 buffer1 6
x30796:	mov [bp + 672], bp	; 4: 137 174 160 2
x30800:	add word [bp + 672], 64	; 5: 131 134 160 2 64

time_test$86:	; CallHeader 666 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$87:	; address £temporary6281 s
x30805:	mov si, bp	; 2: 137 238
x30807:	add si, 24	; 3: 131 198 24

time_test$88:	; Parameter 666 £temporary6281 14
x30810:	mov [bp + 680], si	; 4: 137 182 168 2

time_test$89:	; Call 666 asctime 8
x30814:	mov word [bp + 674], time_test$90	; 6: 199 134 162 2 111 120
x30820:	mov [bp + 676], bp	; 4: 137 174 164 2
x30824:	add bp, 674	; 4: 129 197 162 2
x30828:	jmp asctime	; 3: 233 79 9

time_test$90:	; PostCall 666

time_test$91:	; GetReturnValue £temporary6282

time_test$92:	; Parameter 666 £temporary6282 8
x30831:	mov [bp + 674], bx	; 4: 137 158 162 2

time_test$93:	; Call 666 strcpy 0
x30835:	mov word [bp + 666], time_test$94	; 6: 199 134 154 2 132 120
x30841:	mov [bp + 668], bp	; 4: 137 174 156 2
x30845:	add bp, 666	; 4: 129 197 154 2
x30849:	jmp strcpy	; 3: 233 189 229

time_test$94:	; PostCall 666

time_test$95:	; CallHeader 666 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$96:	; Parameter 666 buffer2 6
x30852:	mov [bp + 672], bp	; 4: 137 174 160 2
x30856:	add word [bp + 672], 164	; 6: 129 134 160 2 164 0

time_test$97:	; CallHeader 666 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$98:	; address £temporary6284 now1
x30862:	mov si, bp	; 2: 137 238
x30864:	add si, 20	; 3: 131 198 20

time_test$99:	; Parameter 666 £temporary6284 14
x30867:	mov [bp + 680], si	; 4: 137 182 168 2

time_test$100:	; Call 666 ctime 8
x30871:	mov word [bp + 674], time_test$101	; 6: 199 134 162 2 168 120
x30877:	mov [bp + 676], bp	; 4: 137 174 164 2
x30881:	add bp, 674	; 4: 129 197 162 2
x30885:	jmp ctime	; 3: 233 220 11

time_test$101:	; PostCall 666

time_test$102:	; GetReturnValue £temporary6285

time_test$103:	; Parameter 666 £temporary6285 8
x30888:	mov [bp + 674], bx	; 4: 137 158 162 2

time_test$104:	; Call 666 strcpy 0
x30892:	mov word [bp + 666], time_test$105	; 6: 199 134 154 2 189 120
x30898:	mov [bp + 668], bp	; 4: 137 174 156 2
x30902:	add bp, 666	; 4: 129 197 154 2
x30906:	jmp strcpy	; 3: 233 132 229

time_test$105:	; PostCall 666

time_test$106:	; CallHeader 666 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$107:	; Parameter 666 string_asctime203C25s3E2C20ctime203C25s3E0A# 6
x30909:	mov word [bp + 672], @13650$string_asctime203C25s3E2C20ctime203C25s3E0A#	; 6: 199 134 160 2 114 122

time_test$108:	; Parameter 666 buffer1 8
x30915:	mov [bp + 674], bp	; 4: 137 174 162 2
x30919:	add word [bp + 674], 64	; 5: 131 134 162 2 64

time_test$109:	; Parameter 666 buffer2 10
x30924:	mov [bp + 676], bp	; 4: 137 174 164 2
x30928:	add word [bp + 676], 164	; 6: 129 134 164 2 164 0

time_test$110:	; Call 666 printf 0
x30934:	mov word [bp + 666], time_test$111	; 6: 199 134 154 2 236 120
x30940:	mov [bp + 668], bp	; 4: 137 174 156 2
x30944:	add bp, 666	; 4: 129 197 154 2
x30948:	mov di, bp	; 2: 137 239
x30950:	add di, 4	; 3: 131 199 4
x30953:	jmp printf	; 3: 233 24 148

time_test$111:	; PostCall 666

time_test$112:	; CallHeader 666 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$113:	; Parameter 666 buffer 6
x30956:	mov [bp + 672], bp	; 4: 137 174 160 2
x30960:	add word [bp + 672], 264	; 6: 129 134 160 2 8 1

time_test$114:	; Parameter 666 400 8
x30966:	mov word [bp + 674], 400	; 6: 199 134 162 2 144 1

time_test$115:	; Parameter 666 string_short20day2025a2C20long20day2025A2C20short20month2025b2C20long20month2025B2C20date2Dtime2025c2C20mday2025d2C20hour2025H2C20gm20hour2025I2C20yday2025j2C20month2025m2C20min2025M2C20am2Fpm2025p2C20sec2025S2C20week20number20sun2025U2C20week20day2025w2C20week20number20mon2025W2C20date2025x2C20time2025X2C20short20year2025y2C20long20year2025Y2C20summer2Fwinter2025Z# 10
x30972:	mov word [bp + 676], @13654$string_short20day2025a2C20long20day2025A2C20short20month2025b2C20long20month2025B2C20date2Dtime2025c2C20mday2025d2C20hour2025H2C20gm20hour2025I2C20yday2025j2C20month2025m2C20min2025M2C20am2Fpm2025p2C20sec2025S2C20week20number20sun2025U2C20week20day2025w2C20week20number20mon2025W2C20date2025x2C20time2025X2C20short20year2025y2C20long20year2025Y2C20summer2Fwinter2025Z#	; 6: 199 134 164 2 140 122

time_test$116:	; address £temporary6288 t
x30978:	mov si, bp	; 2: 137 238
x30980:	add si, 42	; 3: 131 198 42

time_test$117:	; Parameter 666 £temporary6288 12
x30983:	mov [bp + 678], si	; 4: 137 182 166 2

time_test$118:	; Call 666 strftime 0
x30987:	mov word [bp + 666], time_test$119	; 6: 199 134 154 2 28 121
x30993:	mov [bp + 668], bp	; 4: 137 174 156 2
x30997:	add bp, 666	; 4: 129 197 154 2
x31001:	jmp strftime	; 3: 233 152 11

time_test$119:	; PostCall 666

time_test$120:	; GetReturnValue £temporary6289

time_test$121:	; Assign i £temporary6289
x31004:	mov [bp + 664], bx	; 4: 137 158 152 2

time_test$122:	; CallHeader 666 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$123:	; Parameter 666 string_strftime2025i2025i203C25s3E0A# 6
x31008:	mov word [bp + 672], @13658$string_strftime2025i2025i203C25s3E0A#	; 6: 199 134 160 2 148 123

time_test$124:	; Parameter 666 i 8
x31014:	mov ax, [bp + 664]	; 4: 139 134 152 2
x31018:	mov [bp + 674], ax	; 4: 137 134 162 2

time_test$125:	; CallHeader 666 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$126:	; Parameter 666 buffer 16
x31022:	mov [bp + 682], bp	; 4: 137 174 170 2
x31026:	add word [bp + 682], 264	; 6: 129 134 170 2 8 1

time_test$127:	; Call 666 strlen 10
x31032:	mov word [bp + 676], time_test$128	; 6: 199 134 164 2 73 121
x31038:	mov [bp + 678], bp	; 4: 137 174 166 2
x31042:	add bp, 676	; 4: 129 197 164 2
x31046:	jmp strlen	; 3: 233 181 19

time_test$128:	; PostCall 666

time_test$129:	; GetReturnValue £temporary6290

time_test$130:	; Parameter 666 £temporary6290 10
x31049:	mov [bp + 676], bx	; 4: 137 158 164 2

time_test$131:	; Parameter 666 buffer 12
x31053:	mov [bp + 678], bp	; 4: 137 174 166 2
x31057:	add word [bp + 678], 264	; 6: 129 134 166 2 8 1

time_test$132:	; Call 666 printf 0
x31063:	mov word [bp + 666], time_test$133	; 6: 199 134 154 2 109 121
x31069:	mov [bp + 668], bp	; 4: 137 174 156 2
x31073:	add bp, 666	; 4: 129 197 154 2
x31077:	mov di, bp	; 2: 137 239
x31079:	add di, 6	; 3: 131 199 6
x31082:	jmp printf	; 3: 233 151 147

time_test$133:	; PostCall 666

time_test$134:	; Return 0
x31085:	mov ax, [bp]	; 3: 139 70 0
x31088:	mov di, [bp + 4]	; 3: 139 126 4
x31091:	mov bp, [bp + 2]	; 3: 139 110 2
x31094:	jmp ax	; 2: 255 224

time_test$135:	; FunctionEnd time_test

@13554$string_Sun#:
x31096:	db "Sun", 0	; 4: 83 117 110 0

@13555$string_Mon#:
x31100:	db "Mon", 0	; 4: 77 111 110 0

@13556$string_Tue#:
x31104:	db "Tue", 0	; 4: 84 117 101 0

@13557$string_Wed#:
x31108:	db "Wed", 0	; 4: 87 101 100 0

@13558$string_Thu#:
x31112:	db "Thu", 0	; 4: 84 104 117 0

@13559$string_Fri#:
x31116:	db "Fri", 0	; 4: 70 114 105 0

@13560$string_Sat#:
x31120:	db "Sat", 0	; 4: 83 97 116 0

@13586$string_now2013A2025lu0A#:
x31124:	db "now 1: %lu", 10, 0	; 12: 110 111 119 32 49 58 32 37 108 117 10 0

@13588$string_now2023A2025lu0A#:
x31136:	db "now 2: %lu", 10, 0	; 12: 110 111 119 32 50 58 32 37 108 117 10 0

@13590$string_202020gm20time3A2025s202502i2D2502i2D2502i202502i3A2502i3A2502i2C20year20day2025i2C20week20day2025i2C20daylight20saving20time2025i0A#:
x31148:	db "   gm time: %s %02i-%02i-%02i %02i:%02i:%02i, year day %i, week day %i, daylight saving time %i", 10, 0	; 97: 32 32 32 103 109 32 116 105 109 101 58 32 37 115 32 37 48 50 105 45 37 48 50 105 45 37 48 50 105 32 37 48 50 105 58 37 48 50 105 58 37 48 50 105 44 32 121 101 97 114 32 100 97 121 32 37 105 44 32 119 101 101 107 32 100 97 121 32 37 105 44 32 100 97 121 108 105 103 104 116 32 115 97 118 105 110 103 32 116 105 109 101 32 37 105 10 0

@13593$int2$2#:
x31245:	dw 2	; 2: 2 0

@13612$string_local20time3A2025s202502i2D2502i2D2502i202502i3A2502i3A2502i2C20year20day2025i2C20week20day2025i2C20daylight20saving20time2025i0A#:
x31247:	db "local time: %s %02i-%02i-%02i %02i:%02i:%02i, year day %i, week day %i, daylight saving time %i", 10, 0	; 97: 108 111 99 97 108 32 116 105 109 101 58 32 37 115 32 37 48 50 105 45 37 48 50 105 45 37 48 50 105 32 37 48 50 105 58 37 48 50 105 58 37 48 50 105 44 32 121 101 97 114 32 100 97 121 32 37 105 44 32 119 101 101 107 32 100 97 121 32 37 105 44 32 100 97 121 108 105 103 104 116 32 115 97 118 105 110 103 32 116 105 109 101 32 37 105 10 0

@13615$int2$2#:
x31344:	dw 2	; 2: 2 0

@13650$string_asctime203C25s3E2C20ctime203C25s3E0A#:
x31346:	db "asctime <%s>, ctime <%s>", 10, 0	; 26: 97 115 99 116 105 109 101 32 60 37 115 62 44 32 99 116 105 109 101 32 60 37 115 62 10 0

@13654$string_short20day2025a2C20long20day2025A2C20short20month2025b2C20long20month2025B2C20date2Dtime2025c2C20mday2025d2C20hour2025H2C20gm20hour2025I2C20yday2025j2C20month2025m2C20min2025M2C20am2Fpm2025p2C20sec2025S2C20week20number20sun2025U2C20week20day2025w2C20week20number20mon2025W2C20date2025x2C20time2025X2C20short20year2025y2C20long20year2025Y2C20summer2Fwinter2025Z#:
x31372:	db "short day %a, long day %A, short month %b, long month %B, date-time %c, mday %d, hour %H, gm hour %I, yday %j, month %m, min %M, am/pm %p, sec %S, week number sun %U, week day %w, week number mon %W, date %x, time %X, short year %y, long year %Y, summer/winter %Z", 0	; 264: 115 104 111 114 116 32 100 97 121 32 37 97 44 32 108 111 110 103 32 100 97 121 32 37 65 44 32 115 104 111 114 116 32 109 111 110 116 104 32 37 98 44 32 108 111 110 103 32 109 111 110 116 104 32 37 66 44 32 100 97 116 101 45 116 105 109 101 32 37 99 44 32 109 100 97 121 32 37 100 44 32 104 111 117 114 32 37 72 44 32 103 109 32 104 111 117 114 32 37 73 44 32 121 100 97 121 32 37 106 44 32 109 111 110 116 104 32 37 109 44 32 109 105 110 32 37 77 44 32 97 109 47 112 109 32 37 112 44 32 115 101 99 32 37 83 44 32 119 101 101 107 32 110 117 109 98 101 114 32 115 117 110 32 37 85 44 32 119 101 101 107 32 100 97 121 32 37 119 44 32 119 101 101 107 32 110 117 109 98 101 114 32 109 111 110 32 37 87 44 32 100 97 116 101 32 37 120 44 32 116 105 109 101 32 37 88 44 32 115 104 111 114 116 32 121 101 97 114 32 37 121 44 32 108 111 110 103 32 121 101 97 114 32 37 89 44 32 115 117 109 109 101 114 47 119 105 110 116 101 114 32 37 90 0

@13658$string_strftime2025i2025i203C25s3E0A#:
x31636:	db "strftime %i %i <%s>", 10, 0	; 21: 115 116 114 102 116 105 109 101 32 37 105 32 37 105 32 60 37 115 62 10 0

time:	; AssignRegister ah 42
x31657:	mov ah, 42	; 2: 180 42

time$1:	; Interrupt 33
x31659:	int 33	; 2: 205 33

time$2:	; InspectRegister £temporary3248 cx

time$3:	; BinarySubtract year £temporary3248 1900
x31661:	sub cx, 1900	; 4: 129 233 108 7
x31665:	mov [bp + 12], cx	; 3: 137 78 12

time$4:	; InspectRegister £temporary3250 dh

time$5:	; BinarySubtract month £temporary3250 1
x31668:	dec dh	; 2: 254 206
x31670:	mov [bp + 14], dh	; 3: 136 118 14

time$6:	; InspectRegister £temporary3252 dl

time$7:	; Assign monthDay £temporary3252
x31673:	mov [bp + 15], dl	; 3: 136 86 15

time$8:	; AssignRegister ah 44
x31676:	mov ah, 44	; 2: 180 44

time$9:	; Interrupt 33
x31678:	int 33	; 2: 205 33

time$10:	; InspectRegister £temporary3254 ch

time$11:	; Assign hour £temporary3254
x31680:	mov [bp + 16], ch	; 3: 136 110 16

time$12:	; InspectRegister £temporary3255 cl

time$13:	; Assign min £temporary3255
x31683:	mov [bp + 17], cl	; 3: 136 78 17

time$14:	; InspectRegister £temporary3256 dh

time$15:	; Assign sec £temporary3256
x31686:	mov [bp + 18], dh	; 3: 136 118 18

time$16:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time$17:	; Call 19 localeconv 0
x31689:	mov word [bp + 19], time$18	; 5: 199 70 19 215 123
x31694:	mov [bp + 21], bp	; 3: 137 110 21
x31697:	add bp, 19	; 3: 131 197 19
x31700:	jmp localeconv	; 3: 233 161 162

time$18:	; PostCall 19

time$19:	; GetReturnValue £temporary3257

time$20:	; Assign localeConvPtr £temporary3257
x31703:	mov [bp + 19], bx	; 3: 137 94 19

time$21:	; Equal 27 localeConvPtr 0
x31706:	cmp word [bp + 19], 0	; 4: 131 126 19 0
x31710:	je time$27	; 2: 116 32

time$22:	; IntegralToIntegral £temporary3260 hour
x31712:	mov al, [bp + 16]	; 3: 138 70 16
x31715:	and ax, 255	; 3: 37 255 0
x31718:	cmp al, 0	; 2: 60 0
x31720:	jge time$23	; 2: 125 4
x31722:	neg al	; 2: 246 216
x31724:	neg ax	; 2: 247 216

time$23:	; Deref £temporary3259 -> localeConvPtr localeConvPtr 2
x31726:	mov si, [bp + 19]	; 3: 139 118 19

time$24:	; BinarySubtract £temporary3261 £temporary3260 £temporary3259 -> localeConvPtr
x31729:	sub ax, [si + 2]	; 3: 43 68 2

time$25:	; IntegralToIntegral £temporary3262 £temporary3261
x31732:	cmp ax, 0	; 3: 131 248 0
x31735:	jge time$26	; 2: 125 4
x31737:	neg ax	; 2: 247 216
x31739:	neg al	; 2: 246 216

time$26:	; Assign hour £temporary3262
x31741:	mov [bp + 16], al	; 3: 136 70 16

time$27:	; Assign daysOfMonths[0] 31
x31744:	mov word [bp + 19], 31	; 5: 199 70 19 31 0

time$28:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time$29:	; Parameter 21 year 6
x31749:	mov ax, [bp + 12]	; 3: 139 70 12
x31752:	mov [bp + 27], ax	; 3: 137 70 27

time$30:	; Call 21 isLeapYear 0
x31755:	mov word [bp + 21], time$31	; 5: 199 70 21 25 124
x31760:	mov [bp + 23], bp	; 3: 137 110 23
x31763:	add bp, 21	; 3: 131 197 21
x31766:	jmp @7454$isLeapYear	; 3: 233 44 1

time$31:	; PostCall 21

time$32:	; GetReturnValue £temporary3263

time$33:	; Equal 36 £temporary3263 0
x31769:	cmp bx, 0	; 3: 131 251 0
x31772:	je time$36	; 2: 116 5

time$34:	; Assign £temporary3268 29
x31774:	mov ax, 29	; 3: 184 29 0

time$35:	; Goto 37
x31777:	jmp time$37	; 2: 235 3

time$36:	; Assign £temporary3268 28
x31779:	mov ax, 28	; 3: 184 28 0

time$37:	; Assign daysOfMonths[1] £temporary3268
x31782:	mov [bp + 21], ax	; 3: 137 70 21

time$38:	; Assign daysOfMonths[2] 31
x31785:	mov word [bp + 23], 31	; 5: 199 70 23 31 0

time$39:	; Assign daysOfMonths[3] 30
x31790:	mov word [bp + 25], 30	; 5: 199 70 25 30 0

time$40:	; Assign daysOfMonths[4] 31
x31795:	mov word [bp + 27], 31	; 5: 199 70 27 31 0

time$41:	; Assign daysOfMonths[5] 30
x31800:	mov word [bp + 29], 30	; 5: 199 70 29 30 0

time$42:	; Assign daysOfMonths[6] 31
x31805:	mov word [bp + 31], 31	; 5: 199 70 31 31 0

time$43:	; Assign daysOfMonths[7] 31
x31810:	mov word [bp + 33], 31	; 5: 199 70 33 31 0

time$44:	; Assign daysOfMonths[8] 30
x31815:	mov word [bp + 35], 30	; 5: 199 70 35 30 0

time$45:	; Assign daysOfMonths[9] 31
x31820:	mov word [bp + 37], 31	; 5: 199 70 37 31 0

time$46:	; Assign daysOfMonths[10] 30
x31825:	mov word [bp + 39], 30	; 5: 199 70 39 30 0

time$47:	; Assign daysOfMonths[11] 31
x31830:	mov word [bp + 41], 31	; 5: 199 70 41 31 0

time$48:	; IntegralToIntegral £temporary3281 monthDay
x31835:	mov al, [bp + 15]	; 3: 138 70 15
x31838:	and ax, 255	; 3: 37 255 0
x31841:	cmp al, 0	; 2: 60 0
x31843:	jge time$49	; 2: 125 4
x31845:	neg al	; 2: 246 216
x31847:	neg ax	; 2: 247 216

time$49:	; BinarySubtract yearDay £temporary3281 1
x31849:	dec ax	; 1: 72
x31850:	mov [bp + 43], ax	; 3: 137 70 43

time$50:	; Assign monthIndex 0
x31853:	mov word [bp + 45], 0	; 5: 199 70 45 0 0

time$51:	; IntegralToIntegral £temporary3283 month
x31858:	mov al, [bp + 14]	; 3: 138 70 14
x31861:	and ax, 255	; 3: 37 255 0
x31864:	cmp al, 0	; 2: 60 0
x31866:	jge time$52	; 2: 125 4
x31868:	neg al	; 2: 246 216
x31870:	neg ax	; 2: 247 216

time$52:	; SignedGreaterThanEqual 59 monthIndex £temporary3283
x31872:	cmp [bp + 45], ax	; 3: 57 70 45
x31875:	jge time$59	; 2: 125 26

time$53:	; SignedMultiply £temporary3287 monthIndex 2
x31877:	mov ax, [bp + 45]	; 3: 139 70 45
x31880:	xor dx, dx	; 2: 49 210
x31882:	imul word [@7578$int2$2#]	; 4: 247 46 67 125

time$54:	; BinaryAdd £temporary3288 daysOfMonths £temporary3287
x31886:	mov si, bp	; 2: 137 238
x31888:	add si, 19	; 3: 131 198 19
x31891:	add si, ax	; 2: 1 198

time$55:	; Deref £temporary3286 -> £temporary3288 £temporary3288 0

time$56:	; BinaryAdd yearDay yearDay £temporary3286 -> £temporary3288
x31893:	mov ax, [si]	; 2: 139 4
x31895:	add [bp + 43], ax	; 3: 1 70 43

time$57:	; Increment monthIndex
x31898:	inc word [bp + 45]	; 3: 255 70 45

time$58:	; Goto 51
x31901:	jmp time$51	; 2: 235 211

time$59:	; IntegralToIntegral £temporary3291 sec
x31903:	mov al, [bp + 18]	; 3: 138 70 18
x31906:	and ax, 255	; 3: 37 255 0
x31909:	cmp al, 0	; 2: 60 0
x31911:	jge time$60	; 2: 125 4
x31913:	neg al	; 2: 246 216
x31915:	neg ax	; 2: 247 216

time$60:	; Assign s$tm_sec £temporary3291
x31917:	mov [bp + 47], ax	; 3: 137 70 47

time$61:	; IntegralToIntegral £temporary3293 min
x31920:	mov al, [bp + 17]	; 3: 138 70 17
x31923:	and ax, 255	; 3: 37 255 0
x31926:	cmp al, 0	; 2: 60 0
x31928:	jge time$62	; 2: 125 4
x31930:	neg al	; 2: 246 216
x31932:	neg ax	; 2: 247 216

time$62:	; Assign s$tm_min £temporary3293
x31934:	mov [bp + 49], ax	; 3: 137 70 49

time$63:	; IntegralToIntegral £temporary3295 hour
x31937:	mov al, [bp + 16]	; 3: 138 70 16
x31940:	and ax, 255	; 3: 37 255 0
x31943:	cmp al, 0	; 2: 60 0
x31945:	jge time$64	; 2: 125 4
x31947:	neg al	; 2: 246 216
x31949:	neg ax	; 2: 247 216

time$64:	; Assign s$tm_hour £temporary3295
x31951:	mov [bp + 51], ax	; 3: 137 70 51

time$65:	; IntegralToIntegral £temporary3297 monthDay
x31954:	mov al, [bp + 15]	; 3: 138 70 15
x31957:	and ax, 255	; 3: 37 255 0
x31960:	cmp al, 0	; 2: 60 0
x31962:	jge time$66	; 2: 125 4
x31964:	neg al	; 2: 246 216
x31966:	neg ax	; 2: 247 216

time$66:	; Assign s$tm_mday £temporary3297
x31968:	mov [bp + 53], ax	; 3: 137 70 53

time$67:	; IntegralToIntegral £temporary3299 month
x31971:	mov al, [bp + 14]	; 3: 138 70 14
x31974:	and ax, 255	; 3: 37 255 0
x31977:	cmp al, 0	; 2: 60 0
x31979:	jge time$68	; 2: 125 4
x31981:	neg al	; 2: 246 216
x31983:	neg ax	; 2: 247 216

time$68:	; Assign s$tm_mon £temporary3299
x31985:	mov [bp + 55], ax	; 3: 137 70 55

time$69:	; Assign s$tm_year year
x31988:	mov ax, [bp + 12]	; 3: 139 70 12
x31991:	mov [bp + 57], ax	; 3: 137 70 57

time$70:	; Assign s$tm_wday 0
x31994:	mov word [bp + 59], 0	; 5: 199 70 59 0 0

time$71:	; Assign s$tm_yday yearDay
x31999:	mov ax, [bp + 43]	; 3: 139 70 43
x32002:	mov [bp + 61], ax	; 3: 137 70 61

time$72:	; Assign s$tm_isdst 0
x32005:	mov word [bp + 63], 0	; 5: 199 70 63 0 0

time$73:	; CallHeader 65 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time$74:	; address £temporary3304 s
x32010:	mov si, bp	; 2: 137 238
x32012:	add si, 47	; 3: 131 198 47

time$75:	; Parameter 65 £temporary3304 6
x32015:	mov [bp + 71], si	; 3: 137 118 71

time$76:	; Call 65 mktime 0
x32018:	mov word [bp + 65], time$77	; 5: 199 70 65 32 125
x32023:	mov [bp + 67], bp	; 3: 137 110 67
x32026:	add bp, 65	; 3: 131 197 65
x32029:	nop	; 1: 144
x32030:	jmp mktime	; 2: 235 104

time$77:	; PostCall 65

time$78:	; GetReturnValue £temporary3305

time$79:	; Assign time £temporary3305
x32032:	mov [bp + 8], ebx	; 4: 102 137 94 8

time$80:	; Equal 83 timePtr 0
x32036:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x32040:	je time$83	; 2: 116 10

time$81:	; Deref £temporary3307 -> timePtr timePtr 0
x32042:	mov si, [bp + 6]	; 3: 139 118 6

time$82:	; Assign £temporary3307 -> timePtr time
x32045:	mov eax, [bp + 8]	; 4: 102 139 70 8
x32049:	mov [si], eax	; 3: 102 137 4

time$83:	; SetReturnValue time
x32052:	mov ebx, [bp + 8]	; 4: 102 139 94 8

time$84:	; Return time
x32056:	mov ax, [bp]	; 3: 139 70 0
x32059:	mov di, [bp + 4]	; 3: 139 126 4
x32062:	mov bp, [bp + 2]	; 3: 139 110 2
x32065:	jmp ax	; 2: 255 224

time$85:	; FunctionEnd time

@7578$int2$2#:
x32067:	dw 2	; 2: 2 0

@7454$isLeapYear:	; SignedModulo £temporary3238 year 4
x32069:	mov ax, [bp + 6]	; 3: 139 70 6
x32072:	xor dx, dx	; 2: 49 210
x32074:	idiv word [@7456$int2$4#]	; 4: 247 62 130 125

@7454$isLeapYear$1:	; NotEqual 4 £temporary3238 0
x32078:	cmp dx, 0	; 3: 131 250 0
x32081:	jne @7454$isLeapYear$4	; 2: 117 14

@7454$isLeapYear$2:	; SignedModulo £temporary3240 year 100
x32083:	mov ax, [bp + 6]	; 3: 139 70 6
x32086:	xor dx, dx	; 2: 49 210
x32088:	idiv word [@7462$int2$100#]	; 4: 247 62 132 125

@7454$isLeapYear$3:	; NotEqual 6 £temporary3240 0
x32092:	cmp dx, 0	; 3: 131 250 0
x32095:	jne @7454$isLeapYear$6	; 2: 117 14

@7454$isLeapYear$4:	; SignedModulo £temporary3243 year 400
x32097:	mov ax, [bp + 6]	; 3: 139 70 6
x32100:	xor dx, dx	; 2: 49 210
x32102:	idiv word [@7469$int2$400#]	; 4: 247 62 134 125

@7454$isLeapYear$5:	; NotEqual 8 £temporary3243 0
x32106:	cmp dx, 0	; 3: 131 250 0
x32109:	jne @7454$isLeapYear$8	; 2: 117 5

@7454$isLeapYear$6:	; Assign £temporary3246 1
x32111:	mov bx, 1	; 3: 187 1 0

@7454$isLeapYear$7:	; Goto 9
x32114:	jmp @7454$isLeapYear$9	; 2: 235 3

@7454$isLeapYear$8:	; Assign £temporary3246 0
x32116:	mov bx, 0	; 3: 187 0 0

@7454$isLeapYear$9:	; SetReturnValue £temporary3246

@7454$isLeapYear$10:	; Return £temporary3246
x32119:	mov ax, [bp]	; 3: 139 70 0
x32122:	mov di, [bp + 4]	; 3: 139 126 4
x32125:	mov bp, [bp + 2]	; 3: 139 110 2
x32128:	jmp ax	; 2: 255 224

@7454$isLeapYear$11:	; FunctionEnd isLeapYear

@7456$int2$4#:
x32130:	dw 4	; 2: 4 0

@7462$int2$100#:
x32132:	dw 100	; 2: 100 0

@7469$int2$400#:
x32134:	dw 400	; 2: 144 1

mktime:	; Equal 28 tp 0
x32136:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x32140:	je mktime$28	; 4: 15 132 216 0

mktime$1:	; Deref £temporary3312 -> tp tp 10
x32144:	mov si, [bp + 6]	; 3: 139 118 6

mktime$2:	; BinarySubtract £temporary3313 £temporary3312 -> tp 69
x32147:	mov ax, [si + 10]	; 3: 139 68 10
x32150:	sub ax, 69	; 3: 131 232 69

mktime$3:	; SignedDivide £temporary3314 £temporary3313 4
x32153:	xor dx, dx	; 2: 49 210
x32155:	idiv word [@7621$int2$4#]	; 4: 247 62 121 126

mktime$4:	; IntegralToIntegral £temporary3315 £temporary3314
x32159:	and eax, 65535	; 6: 102 37 255 255 0 0
x32165:	cmp ax, 0	; 3: 131 248 0
x32168:	jge mktime$5	; 2: 125 5
x32170:	neg ax	; 2: 247 216
x32172:	neg eax	; 3: 102 247 216

mktime$5:	; Assign leapDays £temporary3315
x32175:	mov [bp + 8], eax	; 4: 102 137 70 8

mktime$6:	; Deref £temporary3316 -> tp tp 10
x32179:	mov si, [bp + 6]	; 3: 139 118 6

mktime$7:	; BinarySubtract £temporary3317 £temporary3316 -> tp 70
x32182:	mov ax, [si + 10]	; 3: 139 68 10
x32185:	sub ax, 70	; 3: 131 232 70

mktime$8:	; SignedMultiply £temporary3318 £temporary3317 365
x32188:	xor dx, dx	; 2: 49 210
x32190:	imul word [@7630$int2$365#]	; 4: 247 46 123 126

mktime$9:	; IntegralToIntegral £temporary3319 £temporary3318
x32194:	and eax, 65535	; 6: 102 37 255 255 0 0
x32200:	cmp ax, 0	; 3: 131 248 0
x32203:	jge mktime$10	; 2: 125 5
x32205:	neg ax	; 2: 247 216
x32207:	neg eax	; 3: 102 247 216

mktime$10:	; BinaryAdd £temporary3320 £temporary3319 leapDays
x32210:	add eax, [bp + 8]	; 4: 102 3 70 8

mktime$11:	; Deref £temporary3321 -> tp tp 14
x32214:	mov si, [bp + 6]	; 3: 139 118 6

mktime$12:	; IntegralToIntegral £temporary3322 £temporary3321 -> tp
x32217:	mov bx, [si + 14]	; 3: 139 92 14
x32220:	and ebx, 65535	; 7: 102 129 227 255 255 0 0
x32227:	cmp bx, 0	; 3: 131 251 0
x32230:	jge mktime$13	; 2: 125 5
x32232:	neg bx	; 2: 247 219
x32234:	neg ebx	; 3: 102 247 219

mktime$13:	; BinaryAdd totalDays £temporary3320 £temporary3322
x32237:	add eax, ebx	; 3: 102 1 216
x32240:	mov [bp + 12], eax	; 4: 102 137 70 12

mktime$14:	; SignedMultiply £temporary3324 totalDays 86400
x32244:	mov eax, [bp + 12]	; 4: 102 139 70 12
x32248:	xor edx, edx	; 3: 102 49 210
x32251:	imul dword [@7639$int4$86400#]	; 5: 102 247 46 125 126
x32256:	mov ebx, eax	; 3: 102 137 195

mktime$15:	; Deref £temporary3325 -> tp tp 4
x32259:	mov si, [bp + 6]	; 3: 139 118 6

mktime$16:	; IntegralToIntegral £temporary3326 £temporary3325 -> tp
x32262:	mov ax, [si + 4]	; 3: 139 68 4
x32265:	and eax, 65535	; 6: 102 37 255 255 0 0
x32271:	cmp ax, 0	; 3: 131 248 0
x32274:	jge mktime$17	; 2: 125 5
x32276:	neg ax	; 2: 247 216
x32278:	neg eax	; 3: 102 247 216

mktime$17:	; SignedMultiply £temporary3327 £temporary3326 3600
x32281:	xor edx, edx	; 3: 102 49 210
x32284:	imul dword [@7643$int4$3600#]	; 5: 102 247 46 129 126

mktime$18:	; BinaryAdd £temporary3328 £temporary3324 £temporary3327
x32289:	add ebx, eax	; 3: 102 1 195

mktime$19:	; Deref £temporary3329 -> tp tp 2
x32292:	mov si, [bp + 6]	; 3: 139 118 6

mktime$20:	; IntegralToIntegral £temporary3330 £temporary3329 -> tp
x32295:	mov ax, [si + 2]	; 3: 139 68 2
x32298:	and eax, 65535	; 6: 102 37 255 255 0 0
x32304:	cmp ax, 0	; 3: 131 248 0
x32307:	jge mktime$21	; 2: 125 5
x32309:	neg ax	; 2: 247 216
x32311:	neg eax	; 3: 102 247 216

mktime$21:	; SignedMultiply £temporary3331 £temporary3330 60
x32314:	xor edx, edx	; 3: 102 49 210
x32317:	imul dword [@7649$int4$60#]	; 5: 102 247 46 133 126

mktime$22:	; BinaryAdd £temporary3332 £temporary3328 £temporary3331
x32322:	add ebx, eax	; 3: 102 1 195

mktime$23:	; Deref £temporary3333 -> tp tp 0
x32325:	mov si, [bp + 6]	; 3: 139 118 6

mktime$24:	; IntegralToIntegral £temporary3334 £temporary3333 -> tp
x32328:	mov ax, [si]	; 2: 139 4
x32330:	and eax, 65535	; 6: 102 37 255 255 0 0
x32336:	cmp ax, 0	; 3: 131 248 0
x32339:	jge mktime$25	; 2: 125 5
x32341:	neg ax	; 2: 247 216
x32343:	neg eax	; 3: 102 247 216

mktime$25:	; BinaryAdd £temporary3335 £temporary3332 £temporary3334
x32346:	add ebx, eax	; 3: 102 1 195

mktime$26:	; SetReturnValue £temporary3335

mktime$27:	; Return £temporary3335
x32349:	mov ax, [bp]	; 3: 139 70 0
x32352:	mov di, [bp + 4]	; 3: 139 126 4
x32355:	mov bp, [bp + 2]	; 3: 139 110 2
x32358:	jmp ax	; 2: 255 224

mktime$28:	; SetReturnValue 0
x32360:	mov ebx, 0	; 6: 102 187 0 0 0 0

mktime$29:	; Return 0
x32366:	mov ax, [bp]	; 3: 139 70 0
x32369:	mov di, [bp + 4]	; 3: 139 126 4
x32372:	mov bp, [bp + 2]	; 3: 139 110 2
x32375:	jmp ax	; 2: 255 224

mktime$30:	; FunctionEnd mktime

@7621$int2$4#:
x32377:	dw 4	; 2: 4 0

@7630$int2$365#:
x32379:	dw 365	; 2: 109 1

@7639$int4$86400#:
x32381:	dd 86400	; 4: 128 81 1 0

@7643$int4$3600#:
x32385:	dd 3600	; 4: 16 14 0 0

@7649$int4$60#:
x32389:	dd 60	; 4: 60 0 0 0

gmtime:	; Equal 89 timePtr 0
x32393:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x32397:	je gmtime$89	; 4: 15 132 78 2

gmtime$1:	; Deref £temporary3337 -> timePtr timePtr 0
x32401:	mov si, [bp + 6]	; 3: 139 118 6

gmtime$2:	; Assign time £temporary3337 -> timePtr
x32404:	mov eax, [si]	; 3: 102 139 4
x32407:	mov [bp + 8], eax	; 4: 102 137 70 8

gmtime$3:	; SignedModulo secondsOfDay time 86400
x32411:	mov eax, [bp + 8]	; 4: 102 139 70 8
x32415:	xor edx, edx	; 3: 102 49 210
x32418:	idiv dword [@7667$int4$86400#]	; 5: 102 247 62 237 128
x32423:	mov [bp + 12], edx	; 4: 102 137 86 12

gmtime$4:	; SignedModulo secondsOfHour secondsOfDay 3600
x32427:	mov eax, [bp + 12]	; 4: 102 139 70 12
x32431:	xor edx, edx	; 3: 102 49 210
x32434:	idiv dword [@7671$int4$3600#]	; 5: 102 247 62 241 128
x32439:	mov [bp + 16], edx	; 4: 102 137 86 16

gmtime$5:	; SignedDivide £temporary3341 secondsOfDay 3600
x32443:	mov eax, [bp + 12]	; 4: 102 139 70 12
x32447:	xor edx, edx	; 3: 102 49 210
x32450:	idiv dword [@7676$int4$3600#]	; 5: 102 247 62 245 128

gmtime$6:	; IntegralToIntegral £temporary3342 £temporary3341
x32455:	cmp eax, 0	; 4: 102 131 248 0
x32459:	jge gmtime$7	; 2: 125 5
x32461:	neg eax	; 3: 102 247 216
x32464:	neg ax	; 2: 247 216

gmtime$7:	; Assign g_timeStruct$tm_hour £temporary3342
x32466:	mov [@7659$g_timeStruct + 4], ax	; 3: 163 253 128

gmtime$8:	; SignedDivide £temporary3344 secondsOfHour 60
x32469:	mov eax, [bp + 16]	; 4: 102 139 70 16
x32473:	xor edx, edx	; 3: 102 49 210
x32476:	idiv dword [@7681$int4$60#]	; 5: 102 247 62 11 129

gmtime$9:	; IntegralToIntegral £temporary3345 £temporary3344
x32481:	cmp eax, 0	; 4: 102 131 248 0
x32485:	jge gmtime$10	; 2: 125 5
x32487:	neg eax	; 3: 102 247 216
x32490:	neg ax	; 2: 247 216

gmtime$10:	; Assign g_timeStruct$tm_min £temporary3345
x32492:	mov [@7659$g_timeStruct + 2], ax	; 3: 163 251 128

gmtime$11:	; SignedModulo £temporary3347 secondsOfHour 60
x32495:	mov eax, [bp + 16]	; 4: 102 139 70 16
x32499:	xor edx, edx	; 3: 102 49 210
x32502:	idiv dword [@7686$int4$60#]	; 5: 102 247 62 15 129

gmtime$12:	; IntegralToIntegral £temporary3348 £temporary3347
x32507:	cmp edx, 0	; 4: 102 131 250 0
x32511:	jge gmtime$13	; 2: 125 5
x32513:	neg edx	; 3: 102 247 218
x32516:	neg dx	; 2: 247 218

gmtime$13:	; Assign g_timeStruct$tm_sec £temporary3348
x32518:	mov [@7659$g_timeStruct], dx	; 4: 137 22 249 128

gmtime$14:	; SignedDivide totalDays time 86400
x32522:	mov eax, [bp + 8]	; 4: 102 139 70 8
x32526:	xor edx, edx	; 3: 102 49 210
x32529:	idiv dword [@7690$int4$86400#]	; 5: 102 247 62 19 129
x32534:	mov [bp + 20], eax	; 4: 102 137 70 20

gmtime$15:	; SignedGreaterThanEqual 20 totalDays 3
x32538:	cmp dword [bp + 20], 3	; 5: 102 131 126 20 3
x32543:	jge gmtime$20	; 2: 125 24

gmtime$16:	; BinaryAdd £temporary3352 totalDays 4
x32545:	mov eax, [bp + 20]	; 4: 102 139 70 20
x32549:	add eax, 4	; 4: 102 131 192 4

gmtime$17:	; IntegralToIntegral £temporary3353 £temporary3352
x32553:	cmp eax, 0	; 4: 102 131 248 0
x32557:	jge gmtime$18	; 2: 125 5
x32559:	neg eax	; 3: 102 247 216
x32562:	neg ax	; 2: 247 216

gmtime$18:	; Assign g_timeStruct$tm_wday £temporary3353
x32564:	mov [@7659$g_timeStruct + 12], ax	; 3: 163 5 129

gmtime$19:	; Goto 24
x32567:	jmp gmtime$24	; 2: 235 31

gmtime$20:	; BinarySubtract £temporary3355 totalDays 3
x32569:	mov eax, [bp + 20]	; 4: 102 139 70 20
x32573:	sub eax, 3	; 4: 102 131 232 3

gmtime$21:	; SignedModulo £temporary3356 £temporary3355 7
x32577:	xor edx, edx	; 3: 102 49 210
x32580:	idiv dword [@7706$int4$7#]	; 5: 102 247 62 23 129

gmtime$22:	; IntegralToIntegral £temporary3357 £temporary3356
x32585:	cmp edx, 0	; 4: 102 131 250 0
x32589:	jge gmtime$23	; 2: 125 5
x32591:	neg edx	; 3: 102 247 218
x32594:	neg dx	; 2: 247 218

gmtime$23:	; Assign g_timeStruct$tm_wday £temporary3357
x32596:	mov [@7659$g_timeStruct + 12], dx	; 4: 137 22 5 129

gmtime$24:	; SignedDivide £temporary3358 totalDays 365
x32600:	mov eax, [bp + 20]	; 4: 102 139 70 20
x32604:	xor edx, edx	; 3: 102 49 210
x32607:	idiv dword [@7711$int4$365#]	; 5: 102 247 62 27 129

gmtime$25:	; BinaryAdd £temporary3359 £temporary3358 1970
x32612:	add eax, 1970	; 6: 102 5 178 7 0 0

gmtime$26:	; IntegralToIntegral £temporary3360 £temporary3359
x32618:	cmp eax, 0	; 4: 102 131 248 0
x32622:	jge gmtime$27	; 2: 125 5
x32624:	neg eax	; 3: 102 247 216
x32627:	neg ax	; 2: 247 216

gmtime$27:	; Assign year £temporary3360
x32629:	mov [bp + 24], ax	; 3: 137 70 24

gmtime$28:	; BinarySubtract £temporary3361 year 1969
x32632:	mov ax, [bp + 24]	; 3: 139 70 24
x32635:	sub ax, 1969	; 3: 45 177 7

gmtime$29:	; SignedDivide leapDays £temporary3361 4
x32638:	xor dx, dx	; 2: 49 210
x32640:	idiv word [@7721$int2$4#]	; 4: 247 62 31 129
x32644:	mov [bp + 26], ax	; 3: 137 70 26

gmtime$30:	; SignedModulo totalDays totalDays 365
x32647:	mov eax, [bp + 20]	; 4: 102 139 70 20
x32651:	xor edx, edx	; 3: 102 49 210
x32654:	idiv dword [@7725$int4$365#]	; 5: 102 247 62 33 129
x32659:	mov [bp + 20], edx	; 4: 102 137 86 20

gmtime$31:	; IntegralToIntegral £temporary3364 leapDays
x32663:	mov ax, [bp + 26]	; 3: 139 70 26
x32666:	and eax, 65535	; 6: 102 37 255 255 0 0
x32672:	cmp ax, 0	; 3: 131 248 0
x32675:	jge gmtime$32	; 2: 125 5
x32677:	neg ax	; 2: 247 216
x32679:	neg eax	; 3: 102 247 216

gmtime$32:	; BinarySubtract totalDays totalDays £temporary3364
x32682:	sub [bp + 20], eax	; 4: 102 41 70 20

gmtime$33:	; SignedGreaterThanEqual 44 totalDays 0
x32686:	cmp dword [bp + 20], 0	; 5: 102 131 126 20 0
x32691:	jge gmtime$44	; 2: 125 46

gmtime$34:	; Decrement year
x32693:	dec word [bp + 24]	; 3: 255 78 24

gmtime$35:	; CallHeader 28 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

gmtime$36:	; Parameter 28 year 6
x32696:	mov ax, [bp + 24]	; 3: 139 70 24
x32699:	mov [bp + 34], ax	; 3: 137 70 34

gmtime$37:	; Call 28 isLeapYear 0
x32702:	mov word [bp + 28], gmtime$38	; 5: 199 70 28 204 127
x32707:	mov [bp + 30], bp	; 3: 137 110 30
x32710:	add bp, 28	; 3: 131 197 28
x32713:	jmp @7454$isLeapYear	; 3: 233 121 253

gmtime$38:	; PostCall 28

gmtime$39:	; GetReturnValue £temporary3368

gmtime$40:	; Equal 43 £temporary3368 0
x32716:	cmp bx, 0	; 3: 131 251 0
x32719:	je gmtime$43	; 2: 116 10

gmtime$41:	; BinaryAdd totalDays totalDays 366
x32721:	add dword [bp + 20], 366	; 8: 102 129 70 20 110 1 0 0

gmtime$42:	; Goto 44
x32729:	jmp gmtime$44	; 2: 235 8

gmtime$43:	; BinaryAdd totalDays totalDays 365
x32731:	add dword [bp + 20], 365	; 8: 102 129 70 20 109 1 0 0

gmtime$44:	; BinarySubtract g_timeStruct$tm_year year 1900
x32739:	mov ax, [bp + 24]	; 3: 139 70 24
x32742:	sub ax, 1900	; 3: 45 108 7
x32745:	mov [@7659$g_timeStruct + 10], ax	; 3: 163 3 129

gmtime$45:	; IntegralToIntegral £temporary3375 totalDays
x32748:	mov eax, [bp + 20]	; 4: 102 139 70 20
x32752:	cmp eax, 0	; 4: 102 131 248 0
x32756:	jge gmtime$46	; 2: 125 5
x32758:	neg eax	; 3: 102 247 216
x32761:	neg ax	; 2: 247 216

gmtime$46:	; Assign g_timeStruct$tm_yday £temporary3375
x32763:	mov [@7659$g_timeStruct + 14], ax	; 3: 163 7 129

gmtime$47:	; Assign daysOfMonths[0] 31
x32766:	mov word [bp + 28], 31	; 5: 199 70 28 31 0

gmtime$48:	; CallHeader 30 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

gmtime$49:	; Parameter 30 year 6
x32771:	mov ax, [bp + 24]	; 3: 139 70 24
x32774:	mov [bp + 36], ax	; 3: 137 70 36

gmtime$50:	; Call 30 isLeapYear 0
x32777:	mov word [bp + 30], gmtime$51	; 5: 199 70 30 23 128
x32782:	mov [bp + 32], bp	; 3: 137 110 32
x32785:	add bp, 30	; 3: 131 197 30
x32788:	jmp @7454$isLeapYear	; 3: 233 46 253

gmtime$51:	; PostCall 30

gmtime$52:	; GetReturnValue £temporary3376

gmtime$53:	; Equal 56 £temporary3376 0
x32791:	cmp bx, 0	; 3: 131 251 0
x32794:	je gmtime$56	; 2: 116 5

gmtime$54:	; Assign £temporary3381 29
x32796:	mov ax, 29	; 3: 184 29 0

gmtime$55:	; Goto 57
x32799:	jmp gmtime$57	; 2: 235 3

gmtime$56:	; Assign £temporary3381 28
x32801:	mov ax, 28	; 3: 184 28 0

gmtime$57:	; Assign daysOfMonths[1] £temporary3381
x32804:	mov [bp + 30], ax	; 3: 137 70 30

gmtime$58:	; Assign daysOfMonths[2] 31
x32807:	mov word [bp + 32], 31	; 5: 199 70 32 31 0

gmtime$59:	; Assign daysOfMonths[3] 30
x32812:	mov word [bp + 34], 30	; 5: 199 70 34 30 0

gmtime$60:	; Assign daysOfMonths[4] 31
x32817:	mov word [bp + 36], 31	; 5: 199 70 36 31 0

gmtime$61:	; Assign daysOfMonths[5] 30
x32822:	mov word [bp + 38], 30	; 5: 199 70 38 30 0

gmtime$62:	; Assign daysOfMonths[6] 31
x32827:	mov word [bp + 40], 31	; 5: 199 70 40 31 0

gmtime$63:	; Assign daysOfMonths[7] 31
x32832:	mov word [bp + 42], 31	; 5: 199 70 42 31 0

gmtime$64:	; Assign daysOfMonths[8] 30
x32837:	mov word [bp + 44], 30	; 5: 199 70 44 30 0

gmtime$65:	; Assign daysOfMonths[9] 31
x32842:	mov word [bp + 46], 31	; 5: 199 70 46 31 0

gmtime$66:	; Assign daysOfMonths[10] 30
x32847:	mov word [bp + 48], 30	; 5: 199 70 48 30 0

gmtime$67:	; Assign daysOfMonths[11] 31
x32852:	mov word [bp + 50], 31	; 5: 199 70 50 31 0

gmtime$68:	; Assign month 0
x32857:	mov word [bp + 52], 0	; 5: 199 70 52 0 0

gmtime$69:	; SignedMultiply £temporary3395 month 2
x32862:	mov ax, [bp + 52]	; 3: 139 70 52
x32865:	xor dx, dx	; 2: 49 210
x32867:	imul word [@7802$int2$2#]	; 4: 247 46 37 129

gmtime$70:	; BinaryAdd £temporary3396 daysOfMonths £temporary3395
x32871:	mov si, bp	; 2: 137 238
x32873:	add si, 28	; 3: 131 198 28
x32876:	add si, ax	; 2: 1 198

gmtime$71:	; Deref £temporary3394 -> £temporary3396 £temporary3396 0

gmtime$72:	; IntegralToIntegral £temporary3397 £temporary3394 -> £temporary3396
x32878:	mov ax, [si]	; 2: 139 4
x32880:	and eax, 65535	; 6: 102 37 255 255 0 0
x32886:	cmp ax, 0	; 3: 131 248 0
x32889:	jge gmtime$73	; 2: 125 5
x32891:	neg ax	; 2: 247 216
x32893:	neg eax	; 3: 102 247 216

gmtime$73:	; SignedLessThan 82 totalDays £temporary3397
x32896:	cmp [bp + 20], eax	; 4: 102 57 70 20
x32900:	jl gmtime$82	; 2: 124 43

gmtime$74:	; Assign £temporary3399 month
x32902:	mov ax, [bp + 52]	; 3: 139 70 52

gmtime$75:	; Increment month
x32905:	inc word [bp + 52]	; 3: 255 70 52

gmtime$76:	; SignedMultiply £temporary3402 £temporary3399 2
x32908:	xor dx, dx	; 2: 49 210
x32910:	imul word [@7812$int2$2#]	; 4: 247 46 39 129

gmtime$77:	; BinaryAdd £temporary3403 daysOfMonths £temporary3402
x32914:	mov si, bp	; 2: 137 238
x32916:	add si, 28	; 3: 131 198 28
x32919:	add si, ax	; 2: 1 198

gmtime$78:	; Deref £temporary3401 -> £temporary3403 £temporary3403 0

gmtime$79:	; IntegralToIntegral £temporary3404 £temporary3401 -> £temporary3403
x32921:	mov ax, [si]	; 2: 139 4
x32923:	and eax, 65535	; 6: 102 37 255 255 0 0
x32929:	cmp ax, 0	; 3: 131 248 0
x32932:	jge gmtime$80	; 2: 125 5
x32934:	neg ax	; 2: 247 216
x32936:	neg eax	; 3: 102 247 216

gmtime$80:	; BinarySubtract totalDays totalDays £temporary3404
x32939:	sub [bp + 20], eax	; 4: 102 41 70 20

gmtime$81:	; Goto 69
x32943:	jmp gmtime$69	; 2: 235 173

gmtime$82:	; Assign g_timeStruct$tm_mon month
x32945:	mov ax, [bp + 52]	; 3: 139 70 52
x32948:	mov [@7659$g_timeStruct + 8], ax	; 3: 163 1 129

gmtime$83:	; BinaryAdd £temporary3408 totalDays 1
x32951:	mov eax, [bp + 20]	; 4: 102 139 70 20
x32955:	inc eax	; 2: 102 64

gmtime$84:	; IntegralToIntegral £temporary3409 £temporary3408
x32957:	cmp eax, 0	; 4: 102 131 248 0
x32961:	jge gmtime$85	; 2: 125 5
x32963:	neg eax	; 3: 102 247 216
x32966:	neg ax	; 2: 247 216

gmtime$85:	; Assign g_timeStruct$tm_mday £temporary3409
x32968:	mov [@7659$g_timeStruct + 6], ax	; 3: 163 255 128

gmtime$86:	; Assign g_timeStruct$tm_isdst -1
x32971:	mov word [@7659$g_timeStruct + 16], -1	; 6: 199 6 9 129 255 255

gmtime$87:	; SetReturnValue (@7659$g_timeStruct,0)
x32977:	mov bx, @7659$g_timeStruct	; 3: 187 249 128

gmtime$88:	; Return (@7659$g_timeStruct,0)
x32980:	mov ax, [bp]	; 3: 139 70 0
x32983:	mov di, [bp + 4]	; 3: 139 126 4
x32986:	mov bp, [bp + 2]	; 3: 139 110 2
x32989:	jmp ax	; 2: 255 224

gmtime$89:	; SetReturnValue 0
x32991:	mov bx, 0	; 3: 187 0 0

gmtime$90:	; Return 0
x32994:	mov ax, [bp]	; 3: 139 70 0
x32997:	mov di, [bp + 4]	; 3: 139 126 4
x33000:	mov bp, [bp + 2]	; 3: 139 110 2
x33003:	jmp ax	; 2: 255 224

gmtime$91:	; FunctionEnd gmtime

@7667$int4$86400#:
x33005:	dd 86400	; 4: 128 81 1 0

@7671$int4$3600#:
x33009:	dd 3600	; 4: 16 14 0 0

@7676$int4$3600#:
x33013:	dd 3600	; 4: 16 14 0 0

@7659$g_timeStruct:
x33017:	db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0	; 18: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

@7681$int4$60#:
x33035:	dd 60	; 4: 60 0 0 0

@7686$int4$60#:
x33039:	dd 60	; 4: 60 0 0 0

@7690$int4$86400#:
x33043:	dd 86400	; 4: 128 81 1 0

@7706$int4$7#:
x33047:	dd 7	; 4: 7 0 0 0

@7711$int4$365#:
x33051:	dd 365	; 4: 109 1 0 0

@7721$int2$4#:
x33055:	dw 4	; 2: 4 0

@7725$int4$365#:
x33057:	dd 365	; 4: 109 1 0 0

@7802$int2$2#:
x33061:	dw 2	; 2: 2 0

@7812$int2$2#:
x33063:	dw 2	; 2: 2 0

localtime:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

localtime$1:	; Parameter 8 timePtr 6
x33065:	mov ax, [bp + 6]	; 3: 139 70 6
x33068:	mov [bp + 14], ax	; 3: 137 70 14

localtime$2:	; Call 8 gmtime 0
x33071:	mov word [bp + 8], localtime$3	; 5: 199 70 8 61 129
x33076:	mov [bp + 10], bp	; 3: 137 110 10
x33079:	add bp, 8	; 3: 131 197 8
x33082:	jmp gmtime	; 3: 233 76 253

localtime$3:	; PostCall 8

localtime$4:	; GetReturnValue £temporary3413

localtime$5:	; Assign tmPtr £temporary3413
x33085:	mov [bp + 8], bx	; 3: 137 94 8

localtime$6:	; Deref £temporary3414 -> timePtr timePtr 0
x33088:	mov si, [bp + 6]	; 3: 139 118 6

localtime$7:	; Assign t £temporary3414 -> timePtr
x33091:	mov eax, [si]	; 3: 102 139 4
x33094:	mov [bp + 10], eax	; 4: 102 137 70 10

localtime$8:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

localtime$9:	; Call 14 localeconv 0
x33098:	mov word [bp + 14], localtime$10	; 5: 199 70 14 88 129
x33103:	mov [bp + 16], bp	; 3: 137 110 16
x33106:	add bp, 14	; 3: 131 197 14
x33109:	jmp localeconv	; 3: 233 32 157

localtime$10:	; PostCall 14

localtime$11:	; GetReturnValue £temporary3415

localtime$12:	; Assign localeConvPtr £temporary3415
x33112:	mov [bp + 14], bx	; 3: 137 94 14

localtime$13:	; Equal 25 localeConvPtr 0
x33115:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x33119:	je localtime$25	; 2: 116 56

localtime$14:	; Deref £temporary3417 -> tmPtr tmPtr 16
x33121:	mov si, [bp + 8]	; 3: 139 118 8

localtime$15:	; NotEqual 19 £temporary3417 -> tmPtr 1
x33124:	cmp word [si + 16], 1	; 4: 131 124 16 1
x33128:	jne localtime$19	; 2: 117 7

localtime$16:	; Deref £temporary3419 -> localeConvPtr localeConvPtr 0
x33130:	mov si, [bp + 14]	; 3: 139 118 14

localtime$17:	; Assign £temporary3424 £temporary3419 -> localeConvPtr
x33133:	mov ax, [si]	; 2: 139 4

localtime$18:	; Goto 21
x33135:	jmp localtime$21	; 2: 235 6

localtime$19:	; Deref £temporary3420 -> localeConvPtr localeConvPtr 2
x33137:	mov si, [bp + 14]	; 3: 139 118 14

localtime$20:	; Assign £temporary3424 £temporary3420 -> localeConvPtr
x33140:	mov ax, [si + 2]	; 3: 139 68 2

localtime$21:	; Assign timeZone £temporary3424
x33143:	mov [bp + 16], ax	; 3: 137 70 16

localtime$22:	; IntegralToIntegral £temporary3425 timeZone
x33146:	mov ax, [bp + 16]	; 3: 139 70 16
x33149:	and eax, 65535	; 6: 102 37 255 255 0 0
x33155:	cmp ax, 0	; 3: 131 248 0
x33158:	jge localtime$23	; 2: 125 5
x33160:	neg ax	; 2: 247 216
x33162:	neg eax	; 3: 102 247 216

localtime$23:	; SignedMultiply £temporary3426 £temporary3425 3600
x33165:	xor edx, edx	; 3: 102 49 210
x33168:	imul dword [@7857$int4$3600#]	; 5: 102 247 46 186 129

localtime$24:	; BinaryAdd t t £temporary3426
x33173:	add [bp + 10], eax	; 4: 102 1 70 10

localtime$25:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

localtime$26:	; address £temporary3428 t
x33177:	mov si, bp	; 2: 137 238
x33179:	add si, 10	; 3: 131 198 10

localtime$27:	; Parameter 16 £temporary3428 6
x33182:	mov [bp + 22], si	; 3: 137 118 22

localtime$28:	; Call 16 gmtime 0
x33185:	mov word [bp + 16], localtime$29	; 5: 199 70 16 175 129
x33190:	mov [bp + 18], bp	; 3: 137 110 18
x33193:	add bp, 16	; 3: 131 197 16
x33196:	jmp gmtime	; 3: 233 218 252

localtime$29:	; PostCall 16

localtime$30:	; GetReturnValue £temporary3429

localtime$31:	; SetReturnValue £temporary3429

localtime$32:	; Return £temporary3429
x33199:	mov ax, [bp]	; 3: 139 70 0
x33202:	mov di, [bp + 4]	; 3: 139 126 4
x33205:	mov bp, [bp + 2]	; 3: 139 110 2
x33208:	jmp ax	; 2: 255 224

localtime$33:	; FunctionEnd localtime

@7857$int4$3600#:
x33210:	dd 3600	; 4: 16 14 0 0

asctime:	; Assign localeConvPtr 0
x33214:	mov word [bp + 8], 0	; 5: 199 70 8 0 0

asctime$1:	; Equal 7 localeConvPtr 0
x33219:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x33223:	je asctime$7	; 2: 116 20

asctime$2:	; Deref £temporary3436 -> localeConvPtr localeConvPtr 4
x33225:	mov si, [bp + 8]	; 3: 139 118 8

asctime$3:	; Equal 7 £temporary3436 -> localeConvPtr 0
x33228:	cmp word [si + 4], 0	; 4: 131 124 4 0
x33232:	je asctime$7	; 2: 116 11

asctime$4:	; Deref £temporary3439 -> localeConvPtr localeConvPtr 4
x33234:	mov si, [bp + 8]	; 3: 139 118 8

asctime$5:	; Assign shortDayList £temporary3439 -> localeConvPtr
x33237:	mov ax, [si + 4]	; 3: 139 68 4
x33240:	mov [bp + 10], ax	; 3: 137 70 10

asctime$6:	; Goto 8
x33243:	jmp asctime$8	; 2: 235 5

asctime$7:	; Assign shortDayList g_shortDayList
x33245:	mov word [bp + 10], @7880$g_shortDayList	; 5: 199 70 10 135 130

asctime$8:	; Equal 14 localeConvPtr 0
x33250:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x33254:	je asctime$14	; 2: 116 20

asctime$9:	; Deref £temporary3441 -> localeConvPtr localeConvPtr 8
x33256:	mov si, [bp + 8]	; 3: 139 118 8

asctime$10:	; Equal 14 £temporary3441 -> localeConvPtr 0
x33259:	cmp word [si + 8], 0	; 4: 131 124 8 0
x33263:	je asctime$14	; 2: 116 11

asctime$11:	; Deref £temporary3444 -> localeConvPtr localeConvPtr 8
x33265:	mov si, [bp + 8]	; 3: 139 118 8

asctime$12:	; Assign shortMonthList £temporary3444 -> localeConvPtr
x33268:	mov ax, [si + 8]	; 3: 139 68 8
x33271:	mov [bp + 12], ax	; 3: 137 70 12

asctime$13:	; Goto 15
x33274:	jmp asctime$15	; 2: 235 5

asctime$14:	; Assign shortMonthList g_shortMonthList
x33276:	mov word [bp + 12], @7901$g_shortMonthList	; 5: 199 70 12 177 130

asctime$15:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

asctime$16:	; Parameter 14 g_timeString 6
x33281:	mov word [bp + 20], @7872$g_timeString	; 5: 199 70 20 249 130

asctime$17:	; Parameter 14 string_25s2025s2025i202502i3A2502i3A2502i2025i# 8
x33286:	mov word [bp + 22], @7943$string_25s2025s2025i202502i3A2502i3A2502i2025i#	; 5: 199 70 22 249 131

asctime$18:	; Deref £temporary3445 -> tp tp 12
x33291:	mov si, [bp + 6]	; 3: 139 118 6

asctime$19:	; SignedMultiply £temporary3447 £temporary3445 -> tp 2
x33294:	mov ax, [si + 12]	; 3: 139 68 12
x33297:	xor dx, dx	; 2: 49 210
x33299:	imul word [@7946$int2$2#]	; 4: 247 46 20 132

asctime$20:	; BinaryAdd £temporary3448 shortDayList £temporary3447
x33303:	mov si, [bp + 10]	; 3: 139 118 10
x33306:	add si, ax	; 2: 1 198

asctime$21:	; Deref £temporary3446 -> £temporary3448 £temporary3448 0

asctime$22:	; Parameter 14 £temporary3446 -> £temporary3448 10
x33308:	mov ax, [si]	; 2: 139 4
x33310:	mov [bp + 24], ax	; 3: 137 70 24

asctime$23:	; Deref £temporary3449 -> tp tp 8
x33313:	mov si, [bp + 6]	; 3: 139 118 6

asctime$24:	; SignedMultiply £temporary3451 £temporary3449 -> tp 2
x33316:	mov ax, [si + 8]	; 3: 139 68 8
x33319:	xor dx, dx	; 2: 49 210
x33321:	imul word [@7951$int2$2#]	; 4: 247 46 22 132

asctime$25:	; BinaryAdd £temporary3452 shortMonthList £temporary3451
x33325:	mov si, [bp + 12]	; 3: 139 118 12
x33328:	add si, ax	; 2: 1 198

asctime$26:	; Deref £temporary3450 -> £temporary3452 £temporary3452 0

asctime$27:	; Parameter 14 £temporary3450 -> £temporary3452 12
x33330:	mov ax, [si]	; 2: 139 4
x33332:	mov [bp + 26], ax	; 3: 137 70 26

asctime$28:	; Deref £temporary3453 -> tp tp 6
x33335:	mov si, [bp + 6]	; 3: 139 118 6

asctime$29:	; Parameter 14 £temporary3453 -> tp 14
x33338:	mov ax, [si + 6]	; 3: 139 68 6
x33341:	mov [bp + 28], ax	; 3: 137 70 28

asctime$30:	; Deref £temporary3454 -> tp tp 4
x33344:	mov si, [bp + 6]	; 3: 139 118 6

asctime$31:	; Parameter 14 £temporary3454 -> tp 16
x33347:	mov ax, [si + 4]	; 3: 139 68 4
x33350:	mov [bp + 30], ax	; 3: 137 70 30

asctime$32:	; Deref £temporary3455 -> tp tp 2
x33353:	mov si, [bp + 6]	; 3: 139 118 6

asctime$33:	; Parameter 14 £temporary3455 -> tp 18
x33356:	mov ax, [si + 2]	; 3: 139 68 2
x33359:	mov [bp + 32], ax	; 3: 137 70 32

asctime$34:	; Deref £temporary3456 -> tp tp 0
x33362:	mov si, [bp + 6]	; 3: 139 118 6

asctime$35:	; Parameter 14 £temporary3456 -> tp 20
x33365:	mov ax, [si]	; 2: 139 4
x33367:	mov [bp + 34], ax	; 3: 137 70 34

asctime$36:	; Deref £temporary3457 -> tp tp 10
x33370:	mov si, [bp + 6]	; 3: 139 118 6

asctime$37:	; BinaryAdd £temporary3458 £temporary3457 -> tp 1900
x33373:	mov ax, [si + 10]	; 3: 139 68 10
x33376:	add ax, 1900	; 3: 5 108 7

asctime$38:	; Parameter 14 £temporary3458 22
x33379:	mov [bp + 36], ax	; 3: 137 70 36

asctime$39:	; Call 14 sprintf 0
x33382:	mov word [bp + 14], asctime$40	; 5: 199 70 14 121 130
x33387:	mov [bp + 16], bp	; 3: 137 110 16
x33390:	add bp, 14	; 3: 131 197 14
x33393:	mov di, bp	; 2: 137 239
x33395:	add di, 14	; 3: 131 199 14
x33398:	jmp sprintf	; 3: 233 159 1

asctime$40:	; PostCall 14

asctime$41:	; SetReturnValue g_timeString
x33401:	mov bx, @7872$g_timeString	; 3: 187 249 130

asctime$42:	; Return g_timeString
x33404:	mov ax, [bp]	; 3: 139 70 0
x33407:	mov di, [bp + 4]	; 3: 139 126 4
x33410:	mov bp, [bp + 2]	; 3: 139 110 2
x33413:	jmp ax	; 2: 255 224

asctime$43:	; FunctionEnd asctime

@7880$g_shortDayList:
x33415:	dw @7873$string_Sun# ; 2: 149 130
x33417:	dw @7874$string_Mon# ; 2: 153 130
x33419:	dw @7875$string_Tue# ; 2: 157 130
x33421:	dw @7876$string_Wed# ; 2: 161 130
x33423:	dw @7877$string_Thu# ; 2: 165 130
x33425:	dw @7878$string_Fri# ; 2: 169 130
x33427:	dw @7879$string_Sat# ; 2: 173 130

@7873$string_Sun#:
x33429:	db "Sun", 0	; 4: 83 117 110 0

@7874$string_Mon#:
x33433:	db "Mon", 0	; 4: 77 111 110 0

@7875$string_Tue#:
x33437:	db "Tue", 0	; 4: 84 117 101 0

@7876$string_Wed#:
x33441:	db "Wed", 0	; 4: 87 101 100 0

@7877$string_Thu#:
x33445:	db "Thu", 0	; 4: 84 104 117 0

@7878$string_Fri#:
x33449:	db "Fri", 0	; 4: 70 114 105 0

@7879$string_Sat#:
x33453:	db "Sat", 0	; 4: 83 97 116 0

@7901$g_shortMonthList:
x33457:	dw @7889$string_Jan# ; 2: 201 130
x33459:	dw @7890$string_Feb# ; 2: 205 130
x33461:	dw @7891$string_Mar# ; 2: 209 130
x33463:	dw @7892$string_Apr# ; 2: 213 130
x33465:	dw @7893$string_May# ; 2: 217 130
x33467:	dw @7894$string_Jun# ; 2: 221 130
x33469:	dw @7895$string_Jul# ; 2: 225 130
x33471:	dw @7896$string_Aug# ; 2: 229 130
x33473:	dw @7897$string_Sep# ; 2: 233 130
x33475:	dw @7898$string_Oct# ; 2: 237 130
x33477:	dw @7899$string_Nov# ; 2: 241 130
x33479:	dw @7900$string_Dec# ; 2: 245 130

@7889$string_Jan#:
x33481:	db "Jan", 0	; 4: 74 97 110 0

@7890$string_Feb#:
x33485:	db "Feb", 0	; 4: 70 101 98 0

@7891$string_Mar#:
x33489:	db "Mar", 0	; 4: 77 97 114 0

@7892$string_Apr#:
x33493:	db "Apr", 0	; 4: 65 112 114 0

@7893$string_May#:
x33497:	db "May", 0	; 4: 77 97 121 0

@7894$string_Jun#:
x33501:	db "Jun", 0	; 4: 74 117 110 0

@7895$string_Jul#:
x33505:	db "Jul", 0	; 4: 74 117 108 0

@7896$string_Aug#:
x33509:	db "Aug", 0	; 4: 65 117 103 0

@7897$string_Sep#:
x33513:	db "Sep", 0	; 4: 83 101 112 0

@7898$string_Oct#:
x33517:	db "Oct", 0	; 4: 79 99 116 0

@7899$string_Nov#:
x33521:	db "Nov", 0	; 4: 78 111 118 0

@7900$string_Dec#:
x33525:	db "Dec", 0	; 4: 68 101 99 0

@7872$g_timeString:
x33529:	db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0	; 256: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

@7943$string_25s2025s2025i202502i3A2502i3A2502i2025i#:
x33785:	db "%s %s %i %02i:%02i:%02i %i", 0	; 27: 37 115 32 37 115 32 37 105 32 37 48 50 105 58 37 48 50 105 58 37 48 50 105 32 37 105 0

@7946$int2$2#:
x33812:	dw 2	; 2: 2 0

@7951$int2$2#:
x33814:	dw 2	; 2: 2 0

sprintf:	; address £temporary2225 format
x33816:	mov si, bp	; 2: 137 238
x33818:	add si, 8	; 3: 131 198 8

sprintf$1:	; IntegralToIntegral £temporary2226 £temporary2225

sprintf$2:	; BinaryAdd arg_list £temporary2226 2
x33821:	add si, 2	; 3: 131 198 2
x33824:	mov [di + 10], si	; 3: 137 117 10

sprintf$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

sprintf$4:	; Parameter 12 outString 6
x33827:	mov ax, [bp + 6]	; 3: 139 70 6
x33830:	mov [di + 18], ax	; 3: 137 69 18

sprintf$5:	; Parameter 12 format 8
x33833:	mov ax, [bp + 8]	; 3: 139 70 8
x33836:	mov [di + 20], ax	; 3: 137 69 20

sprintf$6:	; Parameter 12 arg_list 10
x33839:	mov ax, [di + 10]	; 3: 139 69 10
x33842:	mov [di + 22], ax	; 3: 137 69 22

sprintf$7:	; Call 12 vsprintf 0
x33845:	mov word [di + 12], sprintf$8	; 5: 199 69 12 72 132
x33850:	mov [di + 14], bp	; 3: 137 109 14
x33853:	mov [di + 16], di	; 3: 137 125 16
x33856:	add di, 12	; 3: 131 199 12
x33859:	mov bp, di	; 2: 137 253
x33861:	nop	; 1: 144
x33862:	jmp vsprintf	; 2: 235 11

sprintf$8:	; PostCall 12

sprintf$9:	; GetReturnValue £temporary2228

sprintf$10:	; SetReturnValue £temporary2228

sprintf$11:	; Return £temporary2228
x33864:	mov ax, [bp]	; 3: 139 70 0
x33867:	mov di, [bp + 4]	; 3: 139 126 4
x33870:	mov bp, [bp + 2]	; 3: 139 110 2
x33873:	jmp ax	; 2: 255 224

sprintf$12:	; FunctionEnd sprintf

vsprintf:	; Assign g_outStatus 1
x33875:	mov word [g_outStatus], 1	; 6: 199 6 219 15 1 0

vsprintf$1:	; IntegralToIntegral £temporary2233 outString
x33881:	mov ax, [bp + 6]	; 3: 139 70 6

vsprintf$2:	; Assign g_outDevice £temporary2233
x33884:	mov [g_outDevice], ax	; 3: 163 221 15

vsprintf$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

vsprintf$4:	; Parameter 12 format 6
x33887:	mov ax, [bp + 8]	; 3: 139 70 8
x33890:	mov [bp + 18], ax	; 3: 137 70 18

vsprintf$5:	; Parameter 12 arg_list 8
x33893:	mov ax, [bp + 10]	; 3: 139 70 10
x33896:	mov [bp + 20], ax	; 3: 137 70 20

vsprintf$6:	; Call 12 printFormat 0
x33899:	mov word [bp + 12], vsprintf$7	; 5: 199 70 12 121 132
x33904:	mov [bp + 14], bp	; 3: 137 110 14
x33907:	add bp, 12	; 3: 131 197 12
x33910:	jmp printFormat	; 3: 233 102 139

vsprintf$7:	; PostCall 12

vsprintf$8:	; GetReturnValue £temporary2234

vsprintf$9:	; SetReturnValue £temporary2234

vsprintf$10:	; Return £temporary2234
x33913:	mov ax, [bp]	; 3: 139 70 0
x33916:	mov di, [bp + 4]	; 3: 139 126 4
x33919:	mov bp, [bp + 2]	; 3: 139 110 2
x33922:	jmp ax	; 2: 255 224

vsprintf$11:	; FunctionEnd vsprintf

ctime:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

ctime$1:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

ctime$2:	; Parameter 8 time 6
x33924:	mov ax, [bp + 6]	; 3: 139 70 6
x33927:	mov [bp + 14], ax	; 3: 137 70 14

ctime$3:	; Call 8 localtime 0
x33930:	mov word [bp + 8], ctime$4	; 5: 199 70 8 152 132
x33935:	mov [bp + 10], bp	; 3: 137 110 10
x33938:	add bp, 8	; 3: 131 197 8
x33941:	jmp localtime	; 3: 233 145 252

ctime$4:	; PostCall 8

ctime$5:	; GetReturnValue £temporary3469

ctime$6:	; Parameter 8 £temporary3469 6
x33944:	mov [bp + 14], bx	; 3: 137 94 14

ctime$7:	; Call 8 asctime 0
x33947:	mov word [bp + 8], ctime$8	; 5: 199 70 8 169 132
x33952:	mov [bp + 10], bp	; 3: 137 110 10
x33955:	add bp, 8	; 3: 131 197 8
x33958:	jmp asctime	; 3: 233 21 253

ctime$8:	; PostCall 8

ctime$9:	; GetReturnValue £temporary3470

ctime$10:	; SetReturnValue £temporary3470

ctime$11:	; Return £temporary3470
x33961:	mov ax, [bp]	; 3: 139 70 0
x33964:	mov di, [bp + 4]	; 3: 139 126 4
x33967:	mov bp, [bp + 2]	; 3: 139 110 2
x33970:	jmp ax	; 2: 255 224

ctime$12:	; FunctionEnd ctime

strftime:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$1:	; Call 14 localeconv 0
x33972:	mov word [bp + 14], strftime$2	; 5: 199 70 14 194 132
x33977:	mov [bp + 16], bp	; 3: 137 110 16
x33980:	add bp, 14	; 3: 131 197 14
x33983:	jmp localeconv	; 3: 233 182 153

strftime$2:	; PostCall 14

strftime$3:	; GetReturnValue £temporary3494

strftime$4:	; Assign localeConvPtr £temporary3494
x33986:	mov [bp + 14], bx	; 3: 137 94 14

strftime$5:	; Equal 11 localeConvPtr 0
x33989:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x33993:	je strftime$11	; 2: 116 20

strftime$6:	; Deref £temporary3496 -> localeConvPtr localeConvPtr 4
x33995:	mov si, [bp + 14]	; 3: 139 118 14

strftime$7:	; Equal 11 £temporary3496 -> localeConvPtr 0
x33998:	cmp word [si + 4], 0	; 4: 131 124 4 0
x34002:	je strftime$11	; 2: 116 11

strftime$8:	; Deref £temporary3499 -> localeConvPtr localeConvPtr 4
x34004:	mov si, [bp + 14]	; 3: 139 118 14

strftime$9:	; Assign shortDayList £temporary3499 -> localeConvPtr
x34007:	mov ax, [si + 4]	; 3: 139 68 4
x34010:	mov [bp + 16], ax	; 3: 137 70 16

strftime$10:	; Goto 12
x34013:	jmp strftime$12	; 2: 235 5

strftime$11:	; Assign shortDayList g_shortDayList
x34015:	mov word [bp + 16], @7880$g_shortDayList	; 5: 199 70 16 135 130

strftime$12:	; Equal 18 localeConvPtr 0
x34020:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x34024:	je strftime$18	; 2: 116 20

strftime$13:	; Deref £temporary3501 -> localeConvPtr localeConvPtr 6
x34026:	mov si, [bp + 14]	; 3: 139 118 14

strftime$14:	; Equal 18 £temporary3501 -> localeConvPtr 0
x34029:	cmp word [si + 6], 0	; 4: 131 124 6 0
x34033:	je strftime$18	; 2: 116 11

strftime$15:	; Deref £temporary3504 -> localeConvPtr localeConvPtr 6
x34035:	mov si, [bp + 14]	; 3: 139 118 14

strftime$16:	; Assign longDayList £temporary3504 -> localeConvPtr
x34038:	mov ax, [si + 6]	; 3: 139 68 6
x34041:	mov [bp + 20], ax	; 3: 137 70 20

strftime$17:	; Goto 19
x34044:	jmp strftime$19	; 2: 235 5

strftime$18:	; Assign longDayList g_longDayList
x34046:	mov word [bp + 20], @7888$g_longDayList	; 5: 199 70 20 239 138

strftime$19:	; Equal 25 localeConvPtr 0
x34051:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x34055:	je strftime$25	; 2: 116 20

strftime$20:	; Deref £temporary3506 -> localeConvPtr localeConvPtr 8
x34057:	mov si, [bp + 14]	; 3: 139 118 14

strftime$21:	; Equal 25 £temporary3506 -> localeConvPtr 0
x34060:	cmp word [si + 8], 0	; 4: 131 124 8 0
x34064:	je strftime$25	; 2: 116 11

strftime$22:	; Deref £temporary3509 -> localeConvPtr localeConvPtr 8
x34066:	mov si, [bp + 14]	; 3: 139 118 14

strftime$23:	; Assign shortMonthList £temporary3509 -> localeConvPtr
x34069:	mov ax, [si + 8]	; 3: 139 68 8
x34072:	mov [bp + 18], ax	; 3: 137 70 18

strftime$24:	; Goto 26
x34075:	jmp strftime$26	; 2: 235 5

strftime$25:	; Assign shortMonthList g_shortMonthList
x34077:	mov word [bp + 18], @7901$g_shortMonthList	; 5: 199 70 18 177 130

strftime$26:	; Equal 32 localeConvPtr 0
x34082:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x34086:	je strftime$32	; 2: 116 20

strftime$27:	; Deref £temporary3511 -> localeConvPtr localeConvPtr 10
x34088:	mov si, [bp + 14]	; 3: 139 118 14

strftime$28:	; Equal 32 £temporary3511 -> localeConvPtr 0
x34091:	cmp word [si + 10], 0	; 4: 131 124 10 0
x34095:	je strftime$32	; 2: 116 11

strftime$29:	; Deref £temporary3514 -> localeConvPtr localeConvPtr 10
x34097:	mov si, [bp + 14]	; 3: 139 118 14

strftime$30:	; Assign longMonthList £temporary3514 -> localeConvPtr
x34100:	mov ax, [si + 10]	; 3: 139 68 10
x34103:	mov [bp + 22], ax	; 3: 137 70 22

strftime$31:	; Goto 33
x34106:	jmp strftime$33	; 2: 235 5

strftime$32:	; Assign longMonthList g_longMonthList
x34108:	mov word [bp + 22], @7914$g_longMonthList	; 5: 199 70 22 54 139

strftime$33:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$34:	; Parameter 24 result 6
x34113:	mov ax, [bp + 6]	; 3: 139 70 6
x34116:	mov [bp + 30], ax	; 3: 137 70 30

strftime$35:	; Parameter 24 string_# 8
x34119:	mov word [bp + 32], @8078$string_#	; 5: 199 70 32 164 139

strftime$36:	; Call 24 strcpy 0
x34124:	mov word [bp + 24], strftime$37	; 5: 199 70 24 90 133
x34129:	mov [bp + 26], bp	; 3: 137 110 26
x34132:	add bp, 24	; 3: 131 197 24
x34135:	jmp strcpy	; 3: 233 231 216

strftime$37:	; PostCall 24

strftime$38:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$39:	; Parameter 26 tp 6
x34138:	mov ax, [bp + 12]	; 3: 139 70 12
x34141:	mov [bp + 32], ax	; 3: 137 70 32

strftime$40:	; Call 26 getWeekNumber 0
x34144:	mov word [bp + 26], strftime$41	; 5: 199 70 26 110 133
x34149:	mov [bp + 28], bp	; 3: 137 110 28
x34152:	add bp, 26	; 3: 131 197 26
x34155:	jmp getWeekNumber	; 3: 233 213 6

strftime$41:	; PostCall 26

strftime$42:	; GetReturnValue £temporary3516

strftime$43:	; Assign weekNumberStartSunday £temporary3516
x34158:	mov [bp + 26], bx	; 3: 137 94 26

strftime$44:	; Assign weekNumberStartMonday weekNumberStartSunday
x34161:	mov ax, [bp + 26]	; 3: 139 70 26
x34164:	mov [bp + 28], ax	; 3: 137 70 28

strftime$45:	; Deref £temporary3517 -> tp tp 6
x34167:	mov si, [bp + 12]	; 3: 139 118 12

strftime$46:	; NotEqual 48 £temporary3517 -> tp 0
x34170:	cmp word [si + 6], 0	; 4: 131 124 6 0
x34174:	jne strftime$48	; 2: 117 3

strftime$47:	; Decrement weekNumberStartMonday
x34176:	dec word [bp + 28]	; 3: 255 78 28

strftime$48:	; Assign index 0
x34179:	mov word [bp + 24], 0	; 5: 199 70 24 0 0

strftime$49:	; BinaryAdd £temporary3521 format index
x34184:	mov si, [bp + 10]	; 3: 139 118 10
x34187:	add si, [bp + 24]	; 3: 3 118 24

strftime$50:	; Deref £temporary3520 -> £temporary3521 £temporary3521 0

strftime$51:	; Equal 322 £temporary3520 -> £temporary3521 0
x34190:	cmp byte [si], 0	; 3: 128 60 0
x34193:	je strftime$322	; 4: 15 132 59 5

strftime$52:	; BinaryAdd £temporary3525 format index
x34197:	mov si, [bp + 10]	; 3: 139 118 10
x34200:	add si, [bp + 24]	; 3: 3 118 24

strftime$53:	; Deref £temporary3524 -> £temporary3525 £temporary3525 0

strftime$54:	; NotEqual 297 £temporary3524 -> £temporary3525 37
x34203:	cmp byte [si], 37	; 3: 128 60 37
x34206:	jne strftime$297	; 4: 15 133 189 4

strftime$55:	; Increment index
x34210:	inc word [bp + 24]	; 3: 255 70 24

strftime$56:	; BinaryAdd £temporary3529 format index
x34213:	mov si, [bp + 10]	; 3: 139 118 10
x34216:	add si, [bp + 24]	; 3: 3 118 24

strftime$57:	; Deref £temporary3528 -> £temporary3529 £temporary3529 0

strftime$58:	; Case 82 £temporary3528 -> £temporary3529 97
x34219:	mov al, [si]	; 2: 138 4
x34221:	cmp al, 97	; 2: 60 97
x34223:	je strftime$82	; 4: 15 132 129 0

strftime$59:	; Case 92 £temporary3528 -> £temporary3529 65
x34227:	cmp al, 65	; 2: 60 65
x34229:	je strftime$92	; 4: 15 132 169 0

strftime$60:	; Case 102 £temporary3528 -> £temporary3529 98
x34233:	cmp al, 98	; 2: 60 98
x34235:	je strftime$102	; 4: 15 132 209 0

strftime$61:	; Case 112 £temporary3528 -> £temporary3529 66
x34239:	cmp al, 66	; 2: 60 66
x34241:	je strftime$112	; 4: 15 132 249 0

strftime$62:	; Case 122 £temporary3528 -> £temporary3529 99
x34245:	cmp al, 99	; 2: 60 99
x34247:	je strftime$122	; 4: 15 132 33 1

strftime$63:	; Case 142 £temporary3528 -> £temporary3529 100
x34251:	cmp al, 100	; 2: 60 100
x34253:	je strftime$142	; 4: 15 132 118 1

strftime$64:	; Case 150 £temporary3528 -> £temporary3529 72
x34257:	cmp al, 72	; 2: 60 72
x34259:	je strftime$150	; 4: 15 132 155 1

strftime$65:	; Case 158 £temporary3528 -> £temporary3529 73
x34263:	cmp al, 73	; 2: 60 73
x34265:	je strftime$158	; 4: 15 132 192 1

strftime$66:	; Case 167 £temporary3528 -> £temporary3529 106
x34269:	cmp al, 106	; 2: 60 106
x34271:	je strftime$167	; 4: 15 132 235 1

strftime$67:	; Case 175 £temporary3528 -> £temporary3529 109
x34275:	cmp al, 109	; 2: 60 109
x34277:	je strftime$175	; 4: 15 132 16 2

strftime$68:	; Case 184 £temporary3528 -> £temporary3529 77
x34281:	cmp al, 77	; 2: 60 77
x34283:	je strftime$184	; 4: 15 132 54 2

strftime$69:	; Case 192 £temporary3528 -> £temporary3529 112
x34287:	cmp al, 112	; 2: 60 112
x34289:	je strftime$192	; 4: 15 132 91 2

strftime$70:	; Case 203 £temporary3528 -> £temporary3529 83
x34293:	cmp al, 83	; 2: 60 83
x34295:	je strftime$203	; 4: 15 132 136 2

strftime$71:	; Case 211 £temporary3528 -> £temporary3529 85
x34299:	cmp al, 85	; 2: 60 85
x34301:	je strftime$211	; 4: 15 132 172 2

strftime$72:	; Case 218 £temporary3528 -> £temporary3529 119
x34305:	cmp al, 119	; 2: 60 119
x34307:	je strftime$218	; 4: 15 132 206 2

strftime$73:	; Case 226 £temporary3528 -> £temporary3529 87
x34311:	cmp al, 87	; 2: 60 87
x34313:	je strftime$226	; 4: 15 132 243 2

strftime$74:	; Case 233 £temporary3528 -> £temporary3529 120
x34317:	cmp al, 120	; 2: 60 120
x34319:	je strftime$233	; 4: 15 132 21 3

strftime$75:	; Case 245 £temporary3528 -> £temporary3529 88
x34323:	cmp al, 88	; 2: 60 88
x34325:	je strftime$245	; 4: 15 132 75 3

strftime$76:	; Case 257 £temporary3528 -> £temporary3529 121
x34329:	cmp al, 121	; 2: 60 121
x34331:	je strftime$257	; 4: 15 132 129 3

strftime$77:	; Case 266 £temporary3528 -> £temporary3529 89
x34335:	cmp al, 89	; 2: 60 89
x34337:	je strftime$266	; 4: 15 132 172 3

strftime$78:	; Case 275 £temporary3528 -> £temporary3529 90
x34341:	cmp al, 90	; 2: 60 90
x34343:	je strftime$275	; 4: 15 132 211 3

strftime$79:	; Case 286 £temporary3528 -> £temporary3529 37
x34347:	cmp al, 37	; 2: 60 37
x34349:	je strftime$286	; 4: 15 132 248 3

strftime$80:	; CaseEnd £temporary3528 -> £temporary3529

strftime$81:	; Goto 291
x34353:	jmp strftime$291	; 3: 233 15 4

strftime$82:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$83:	; Parameter 50 add 6
x34356:	mov [bp + 56], bp	; 3: 137 110 56
x34359:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$84:	; Deref £temporary3530 -> tp tp 12
x34363:	mov si, [bp + 12]	; 3: 139 118 12

strftime$85:	; SignedMultiply £temporary3532 £temporary3530 -> tp 2
x34366:	mov ax, [si + 12]	; 3: 139 68 12
x34369:	xor dx, dx	; 2: 49 210
x34371:	imul word [@8118$int2$2#]	; 4: 247 46 165 139

strftime$86:	; BinaryAdd £temporary3533 shortDayList £temporary3532
x34375:	mov si, [bp + 16]	; 3: 139 118 16
x34378:	add si, ax	; 2: 1 198

strftime$87:	; Deref £temporary3531 -> £temporary3533 £temporary3533 0

strftime$88:	; Parameter 50 £temporary3531 -> £temporary3533 8
x34380:	mov ax, [si]	; 2: 139 4
x34382:	mov [bp + 58], ax	; 3: 137 70 58

strftime$89:	; Call 50 strcpy 0
x34385:	mov word [bp + 50], strftime$90	; 5: 199 70 50 95 134
x34390:	mov [bp + 52], bp	; 3: 137 110 52
x34393:	add bp, 50	; 3: 131 197 50
x34396:	jmp strcpy	; 3: 233 226 215

strftime$90:	; PostCall 50

strftime$91:	; Goto 303
x34399:	jmp strftime$303	; 3: 233 21 4

strftime$92:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$93:	; Parameter 50 add 6
x34402:	mov [bp + 56], bp	; 3: 137 110 56
x34405:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$94:	; Deref £temporary3535 -> tp tp 12
x34409:	mov si, [bp + 12]	; 3: 139 118 12

strftime$95:	; SignedMultiply £temporary3537 £temporary3535 -> tp 2
x34412:	mov ax, [si + 12]	; 3: 139 68 12
x34415:	xor dx, dx	; 2: 49 210
x34417:	imul word [@8126$int2$2#]	; 4: 247 46 167 139

strftime$96:	; BinaryAdd £temporary3538 longDayList £temporary3537
x34421:	mov si, [bp + 20]	; 3: 139 118 20
x34424:	add si, ax	; 2: 1 198

strftime$97:	; Deref £temporary3536 -> £temporary3538 £temporary3538 0

strftime$98:	; Parameter 50 £temporary3536 -> £temporary3538 8
x34426:	mov ax, [si]	; 2: 139 4
x34428:	mov [bp + 58], ax	; 3: 137 70 58

strftime$99:	; Call 50 strcpy 0
x34431:	mov word [bp + 50], strftime$100	; 5: 199 70 50 141 134
x34436:	mov [bp + 52], bp	; 3: 137 110 52
x34439:	add bp, 50	; 3: 131 197 50
x34442:	jmp strcpy	; 3: 233 180 215

strftime$100:	; PostCall 50

strftime$101:	; Goto 303
x34445:	jmp strftime$303	; 3: 233 231 3

strftime$102:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$103:	; Parameter 50 add 6
x34448:	mov [bp + 56], bp	; 3: 137 110 56
x34451:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$104:	; Deref £temporary3540 -> tp tp 8
x34455:	mov si, [bp + 12]	; 3: 139 118 12

strftime$105:	; SignedMultiply £temporary3542 £temporary3540 -> tp 2
x34458:	mov ax, [si + 8]	; 3: 139 68 8
x34461:	xor dx, dx	; 2: 49 210
x34463:	imul word [@8134$int2$2#]	; 4: 247 46 169 139

strftime$106:	; BinaryAdd £temporary3543 shortMonthList £temporary3542
x34467:	mov si, [bp + 18]	; 3: 139 118 18
x34470:	add si, ax	; 2: 1 198

strftime$107:	; Deref £temporary3541 -> £temporary3543 £temporary3543 0

strftime$108:	; Parameter 50 £temporary3541 -> £temporary3543 8
x34472:	mov ax, [si]	; 2: 139 4
x34474:	mov [bp + 58], ax	; 3: 137 70 58

strftime$109:	; Call 50 strcpy 0
x34477:	mov word [bp + 50], strftime$110	; 5: 199 70 50 187 134
x34482:	mov [bp + 52], bp	; 3: 137 110 52
x34485:	add bp, 50	; 3: 131 197 50
x34488:	jmp strcpy	; 3: 233 134 215

strftime$110:	; PostCall 50

strftime$111:	; Goto 303
x34491:	jmp strftime$303	; 3: 233 185 3

strftime$112:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$113:	; Parameter 50 add 6
x34494:	mov [bp + 56], bp	; 3: 137 110 56
x34497:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$114:	; Deref £temporary3545 -> tp tp 8
x34501:	mov si, [bp + 12]	; 3: 139 118 12

strftime$115:	; SignedMultiply £temporary3547 £temporary3545 -> tp 2
x34504:	mov ax, [si + 8]	; 3: 139 68 8
x34507:	xor dx, dx	; 2: 49 210
x34509:	imul word [@8142$int2$2#]	; 4: 247 46 171 139

strftime$116:	; BinaryAdd £temporary3548 longMonthList £temporary3547
x34513:	mov si, [bp + 22]	; 3: 139 118 22
x34516:	add si, ax	; 2: 1 198

strftime$117:	; Deref £temporary3546 -> £temporary3548 £temporary3548 0

strftime$118:	; Parameter 50 £temporary3546 -> £temporary3548 8
x34518:	mov ax, [si]	; 2: 139 4
x34520:	mov [bp + 58], ax	; 3: 137 70 58

strftime$119:	; Call 50 strcpy 0
x34523:	mov word [bp + 50], strftime$120	; 5: 199 70 50 233 134
x34528:	mov [bp + 52], bp	; 3: 137 110 52
x34531:	add bp, 50	; 3: 131 197 50
x34534:	jmp strcpy	; 3: 233 88 215

strftime$120:	; PostCall 50

strftime$121:	; Goto 303
x34537:	jmp strftime$303	; 3: 233 139 3

strftime$122:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$123:	; Parameter 50 add 6
x34540:	mov [bp + 56], bp	; 3: 137 110 56
x34543:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$124:	; Parameter 50 string_2502i2D2502i2D2502i202502i3A2502i3A2502i# 8
x34547:	mov word [bp + 58], @8148$string_2502i2D2502i2D2502i202502i3A2502i3A2502i#	; 5: 199 70 58 173 139

strftime$125:	; Deref £temporary3550 -> tp tp 10
x34552:	mov si, [bp + 12]	; 3: 139 118 12

strftime$126:	; BinaryAdd £temporary3551 £temporary3550 -> tp 1900
x34555:	mov ax, [si + 10]	; 3: 139 68 10
x34558:	add ax, 1900	; 3: 5 108 7

strftime$127:	; Parameter 50 £temporary3551 10
x34561:	mov [bp + 60], ax	; 3: 137 70 60

strftime$128:	; Deref £temporary3552 -> tp tp 8
x34564:	mov si, [bp + 12]	; 3: 139 118 12

strftime$129:	; BinaryAdd £temporary3553 £temporary3552 -> tp 1
x34567:	mov ax, [si + 8]	; 3: 139 68 8
x34570:	inc ax	; 1: 64

strftime$130:	; Parameter 50 £temporary3553 12
x34571:	mov [bp + 62], ax	; 3: 137 70 62

strftime$131:	; Deref £temporary3554 -> tp tp 6
x34574:	mov si, [bp + 12]	; 3: 139 118 12

strftime$132:	; Parameter 50 £temporary3554 -> tp 14
x34577:	mov ax, [si + 6]	; 3: 139 68 6
x34580:	mov [bp + 64], ax	; 3: 137 70 64

strftime$133:	; Deref £temporary3555 -> tp tp 4
x34583:	mov si, [bp + 12]	; 3: 139 118 12

strftime$134:	; Parameter 50 £temporary3555 -> tp 16
x34586:	mov ax, [si + 4]	; 3: 139 68 4
x34589:	mov [bp + 66], ax	; 3: 137 70 66

strftime$135:	; Deref £temporary3556 -> tp tp 2
x34592:	mov si, [bp + 12]	; 3: 139 118 12

strftime$136:	; Parameter 50 £temporary3556 -> tp 18
x34595:	mov ax, [si + 2]	; 3: 139 68 2
x34598:	mov [bp + 68], ax	; 3: 137 70 68

strftime$137:	; Deref £temporary3557 -> tp tp 0
x34601:	mov si, [bp + 12]	; 3: 139 118 12

strftime$138:	; Parameter 50 £temporary3557 -> tp 20
x34604:	mov ax, [si]	; 2: 139 4
x34606:	mov [bp + 70], ax	; 3: 137 70 70

strftime$139:	; Call 50 sprintf 0
x34609:	mov word [bp + 50], strftime$140	; 5: 199 70 50 68 135
x34614:	mov [bp + 52], bp	; 3: 137 110 52
x34617:	add bp, 50	; 3: 131 197 50
x34620:	mov di, bp	; 2: 137 239
x34622:	add di, 12	; 3: 131 199 12
x34625:	jmp sprintf	; 3: 233 212 252

strftime$140:	; PostCall 50

strftime$141:	; Goto 303
x34628:	jmp strftime$303	; 3: 233 48 3

strftime$142:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$143:	; Parameter 50 add 6
x34631:	mov [bp + 56], bp	; 3: 137 110 56
x34634:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$144:	; Parameter 50 string_2502i# 8
x34638:	mov word [bp + 58], @8164$string_2502i#	; 5: 199 70 58 203 139

strftime$145:	; Deref £temporary3559 -> tp tp 6
x34643:	mov si, [bp + 12]	; 3: 139 118 12

strftime$146:	; Parameter 50 £temporary3559 -> tp 10
x34646:	mov ax, [si + 6]	; 3: 139 68 6
x34649:	mov [bp + 60], ax	; 3: 137 70 60

strftime$147:	; Call 50 sprintf 0
x34652:	mov word [bp + 50], strftime$148	; 5: 199 70 50 111 135
x34657:	mov [bp + 52], bp	; 3: 137 110 52
x34660:	add bp, 50	; 3: 131 197 50
x34663:	mov di, bp	; 2: 137 239
x34665:	add di, 2	; 3: 131 199 2
x34668:	jmp sprintf	; 3: 233 169 252

strftime$148:	; PostCall 50

strftime$149:	; Goto 303
x34671:	jmp strftime$303	; 3: 233 5 3

strftime$150:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$151:	; Parameter 50 add 6
x34674:	mov [bp + 56], bp	; 3: 137 110 56
x34677:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$152:	; Parameter 50 string_2502i# 8
x34681:	mov word [bp + 58], @8169$string_2502i#	; 5: 199 70 58 208 139

strftime$153:	; Deref £temporary3561 -> tp tp 4
x34686:	mov si, [bp + 12]	; 3: 139 118 12

strftime$154:	; Parameter 50 £temporary3561 -> tp 10
x34689:	mov ax, [si + 4]	; 3: 139 68 4
x34692:	mov [bp + 60], ax	; 3: 137 70 60

strftime$155:	; Call 50 sprintf 0
x34695:	mov word [bp + 50], strftime$156	; 5: 199 70 50 154 135
x34700:	mov [bp + 52], bp	; 3: 137 110 52
x34703:	add bp, 50	; 3: 131 197 50
x34706:	mov di, bp	; 2: 137 239
x34708:	add di, 2	; 3: 131 199 2
x34711:	jmp sprintf	; 3: 233 126 252

strftime$156:	; PostCall 50

strftime$157:	; Goto 303
x34714:	jmp strftime$303	; 3: 233 218 2

strftime$158:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$159:	; Parameter 50 add 6
x34717:	mov [bp + 56], bp	; 3: 137 110 56
x34720:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$160:	; Parameter 50 string_2502i# 8
x34724:	mov word [bp + 58], @8174$string_2502i#	; 5: 199 70 58 213 139

strftime$161:	; Deref £temporary3563 -> tp tp 4
x34729:	mov si, [bp + 12]	; 3: 139 118 12

strftime$162:	; SignedModulo £temporary3564 £temporary3563 -> tp 12
x34732:	mov ax, [si + 4]	; 3: 139 68 4
x34735:	xor dx, dx	; 2: 49 210
x34737:	idiv word [@8177$int2$12#]	; 4: 247 62 218 139

strftime$163:	; Parameter 50 £temporary3564 10
x34741:	mov [bp + 60], dx	; 3: 137 86 60

strftime$164:	; Call 50 sprintf 0
x34744:	mov word [bp + 50], strftime$165	; 5: 199 70 50 203 135
x34749:	mov [bp + 52], bp	; 3: 137 110 52
x34752:	add bp, 50	; 3: 131 197 50
x34755:	mov di, bp	; 2: 137 239
x34757:	add di, 2	; 3: 131 199 2
x34760:	jmp sprintf	; 3: 233 77 252

strftime$165:	; PostCall 50

strftime$166:	; Goto 303
x34763:	jmp strftime$303	; 3: 233 169 2

strftime$167:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$168:	; Parameter 50 add 6
x34766:	mov [bp + 56], bp	; 3: 137 110 56
x34769:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$169:	; Parameter 50 string_2503i# 8
x34773:	mov word [bp + 58], @8182$string_2503i#	; 5: 199 70 58 220 139

strftime$170:	; Deref £temporary3566 -> tp tp 14
x34778:	mov si, [bp + 12]	; 3: 139 118 12

strftime$171:	; Parameter 50 £temporary3566 -> tp 10
x34781:	mov ax, [si + 14]	; 3: 139 68 14
x34784:	mov [bp + 60], ax	; 3: 137 70 60

strftime$172:	; Call 50 sprintf 0
x34787:	mov word [bp + 50], strftime$173	; 5: 199 70 50 246 135
x34792:	mov [bp + 52], bp	; 3: 137 110 52
x34795:	add bp, 50	; 3: 131 197 50
x34798:	mov di, bp	; 2: 137 239
x34800:	add di, 2	; 3: 131 199 2
x34803:	jmp sprintf	; 3: 233 34 252

strftime$173:	; PostCall 50

strftime$174:	; Goto 303
x34806:	jmp strftime$303	; 3: 233 126 2

strftime$175:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$176:	; Parameter 50 add 6
x34809:	mov [bp + 56], bp	; 3: 137 110 56
x34812:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$177:	; Parameter 50 string_2502i# 8
x34816:	mov word [bp + 58], @8187$string_2502i#	; 5: 199 70 58 225 139

strftime$178:	; Deref £temporary3568 -> tp tp 8
x34821:	mov si, [bp + 12]	; 3: 139 118 12

strftime$179:	; BinaryAdd £temporary3569 £temporary3568 -> tp 1
x34824:	mov ax, [si + 8]	; 3: 139 68 8
x34827:	inc ax	; 1: 64

strftime$180:	; Parameter 50 £temporary3569 10
x34828:	mov [bp + 60], ax	; 3: 137 70 60

strftime$181:	; Call 50 sprintf 0
x34831:	mov word [bp + 50], strftime$182	; 5: 199 70 50 34 136
x34836:	mov [bp + 52], bp	; 3: 137 110 52
x34839:	add bp, 50	; 3: 131 197 50
x34842:	mov di, bp	; 2: 137 239
x34844:	add di, 2	; 3: 131 199 2
x34847:	jmp sprintf	; 3: 233 246 251

strftime$182:	; PostCall 50

strftime$183:	; Goto 303
x34850:	jmp strftime$303	; 3: 233 82 2

strftime$184:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$185:	; Parameter 50 add 6
x34853:	mov [bp + 56], bp	; 3: 137 110 56
x34856:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$186:	; Parameter 50 string_2502i# 8
x34860:	mov word [bp + 58], @8195$string_2502i#	; 5: 199 70 58 230 139

strftime$187:	; Deref £temporary3571 -> tp tp 2
x34865:	mov si, [bp + 12]	; 3: 139 118 12

strftime$188:	; Parameter 50 £temporary3571 -> tp 10
x34868:	mov ax, [si + 2]	; 3: 139 68 2
x34871:	mov [bp + 60], ax	; 3: 137 70 60

strftime$189:	; Call 50 sprintf 0
x34874:	mov word [bp + 50], strftime$190	; 5: 199 70 50 77 136
x34879:	mov [bp + 52], bp	; 3: 137 110 52
x34882:	add bp, 50	; 3: 131 197 50
x34885:	mov di, bp	; 2: 137 239
x34887:	add di, 2	; 3: 131 199 2
x34890:	jmp sprintf	; 3: 233 203 251

strftime$190:	; PostCall 50

strftime$191:	; Goto 303
x34893:	jmp strftime$303	; 3: 233 39 2

strftime$192:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$193:	; Parameter 50 add 6
x34896:	mov [bp + 56], bp	; 3: 137 110 56
x34899:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$194:	; Parameter 50 string_25s# 8
x34903:	mov word [bp + 58], @8200$string_25s#	; 5: 199 70 58 235 139

strftime$195:	; Equal 198 index 0
x34908:	cmp word [bp + 24], 0	; 4: 131 126 24 0
x34912:	je strftime$198	; 2: 116 5

strftime$196:	; Assign £temporary3577 string_AM#
x34914:	mov ax, @8201$string_AM#	; 3: 184 238 139

strftime$197:	; Goto 199
x34917:	jmp strftime$199	; 2: 235 3

strftime$198:	; Assign £temporary3577 string_PM#
x34919:	mov ax, @8202$string_PM#	; 3: 184 241 139

strftime$199:	; Parameter 50 £temporary3577 10
x34922:	mov [bp + 60], ax	; 3: 137 70 60

strftime$200:	; Call 50 sprintf 0
x34925:	mov word [bp + 50], strftime$201	; 5: 199 70 50 128 136
x34930:	mov [bp + 52], bp	; 3: 137 110 52
x34933:	add bp, 50	; 3: 131 197 50
x34936:	mov di, bp	; 2: 137 239
x34938:	add di, 2	; 3: 131 199 2
x34941:	jmp sprintf	; 3: 233 152 251

strftime$201:	; PostCall 50

strftime$202:	; Goto 303
x34944:	jmp strftime$303	; 3: 233 244 1

strftime$203:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$204:	; Parameter 50 add 6
x34947:	mov [bp + 56], bp	; 3: 137 110 56
x34950:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$205:	; Parameter 50 string_2502i# 8
x34954:	mov word [bp + 58], @8214$string_2502i#	; 5: 199 70 58 244 139

strftime$206:	; Deref £temporary3579 -> tp tp 0
x34959:	mov si, [bp + 12]	; 3: 139 118 12

strftime$207:	; Parameter 50 £temporary3579 -> tp 10
x34962:	mov ax, [si]	; 2: 139 4
x34964:	mov [bp + 60], ax	; 3: 137 70 60

strftime$208:	; Call 50 sprintf 0
x34967:	mov word [bp + 50], strftime$209	; 5: 199 70 50 170 136
x34972:	mov [bp + 52], bp	; 3: 137 110 52
x34975:	add bp, 50	; 3: 131 197 50
x34978:	mov di, bp	; 2: 137 239
x34980:	add di, 2	; 3: 131 199 2
x34983:	jmp sprintf	; 3: 233 110 251

strftime$209:	; PostCall 50

strftime$210:	; Goto 303
x34986:	jmp strftime$303	; 3: 233 202 1

strftime$211:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$212:	; Parameter 50 add 6
x34989:	mov [bp + 56], bp	; 3: 137 110 56
x34992:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$213:	; Parameter 50 string_2502i# 8
x34996:	mov word [bp + 58], @8219$string_2502i#	; 5: 199 70 58 249 139

strftime$214:	; Parameter 50 weekNumberStartSunday 10
x35001:	mov ax, [bp + 26]	; 3: 139 70 26
x35004:	mov [bp + 60], ax	; 3: 137 70 60

strftime$215:	; Call 50 sprintf 0
x35007:	mov word [bp + 50], strftime$216	; 5: 199 70 50 210 136
x35012:	mov [bp + 52], bp	; 3: 137 110 52
x35015:	add bp, 50	; 3: 131 197 50
x35018:	mov di, bp	; 2: 137 239
x35020:	add di, 2	; 3: 131 199 2
x35023:	jmp sprintf	; 3: 233 70 251

strftime$216:	; PostCall 50

strftime$217:	; Goto 303
x35026:	jmp strftime$303	; 3: 233 162 1

strftime$218:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$219:	; Parameter 50 add 6
x35029:	mov [bp + 56], bp	; 3: 137 110 56
x35032:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$220:	; Parameter 50 string_2502i# 8
x35036:	mov word [bp + 58], @8223$string_2502i#	; 5: 199 70 58 254 139

strftime$221:	; Deref £temporary3582 -> tp tp 12
x35041:	mov si, [bp + 12]	; 3: 139 118 12

strftime$222:	; Parameter 50 £temporary3582 -> tp 10
x35044:	mov ax, [si + 12]	; 3: 139 68 12
x35047:	mov [bp + 60], ax	; 3: 137 70 60

strftime$223:	; Call 50 sprintf 0
x35050:	mov word [bp + 50], strftime$224	; 5: 199 70 50 253 136
x35055:	mov [bp + 52], bp	; 3: 137 110 52
x35058:	add bp, 50	; 3: 131 197 50
x35061:	mov di, bp	; 2: 137 239
x35063:	add di, 2	; 3: 131 199 2
x35066:	jmp sprintf	; 3: 233 27 251

strftime$224:	; PostCall 50

strftime$225:	; Goto 303
x35069:	jmp strftime$303	; 3: 233 119 1

strftime$226:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$227:	; Parameter 50 add 6
x35072:	mov [bp + 56], bp	; 3: 137 110 56
x35075:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$228:	; Parameter 50 string_2502i# 8
x35079:	mov word [bp + 58], @8228$string_2502i#	; 5: 199 70 58 3 140

strftime$229:	; Parameter 50 weekNumberStartMonday 10
x35084:	mov ax, [bp + 28]	; 3: 139 70 28
x35087:	mov [bp + 60], ax	; 3: 137 70 60

strftime$230:	; Call 50 sprintf 0
x35090:	mov word [bp + 50], strftime$231	; 5: 199 70 50 37 137
x35095:	mov [bp + 52], bp	; 3: 137 110 52
x35098:	add bp, 50	; 3: 131 197 50
x35101:	mov di, bp	; 2: 137 239
x35103:	add di, 2	; 3: 131 199 2
x35106:	jmp sprintf	; 3: 233 243 250

strftime$231:	; PostCall 50

strftime$232:	; Goto 303
x35109:	jmp strftime$303	; 3: 233 79 1

strftime$233:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$234:	; Parameter 50 add 6
x35112:	mov [bp + 56], bp	; 3: 137 110 56
x35115:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$235:	; Parameter 50 string_2502i3A2502i3A2502i# 8
x35119:	mov word [bp + 58], @8232$string_2502i3A2502i3A2502i#	; 5: 199 70 58 8 140

strftime$236:	; Deref £temporary3585 -> tp tp 4
x35124:	mov si, [bp + 12]	; 3: 139 118 12

strftime$237:	; Parameter 50 £temporary3585 -> tp 10
x35127:	mov ax, [si + 4]	; 3: 139 68 4
x35130:	mov [bp + 60], ax	; 3: 137 70 60

strftime$238:	; Deref £temporary3586 -> tp tp 2
x35133:	mov si, [bp + 12]	; 3: 139 118 12

strftime$239:	; Parameter 50 £temporary3586 -> tp 12
x35136:	mov ax, [si + 2]	; 3: 139 68 2
x35139:	mov [bp + 62], ax	; 3: 137 70 62

strftime$240:	; Deref £temporary3587 -> tp tp 0
x35142:	mov si, [bp + 12]	; 3: 139 118 12

strftime$241:	; Parameter 50 £temporary3587 -> tp 14
x35145:	mov ax, [si]	; 2: 139 4
x35147:	mov [bp + 64], ax	; 3: 137 70 64

strftime$242:	; Call 50 sprintf 0
x35150:	mov word [bp + 50], strftime$243	; 5: 199 70 50 97 137
x35155:	mov [bp + 52], bp	; 3: 137 110 52
x35158:	add bp, 50	; 3: 131 197 50
x35161:	mov di, bp	; 2: 137 239
x35163:	add di, 6	; 3: 131 199 6
x35166:	jmp sprintf	; 3: 233 183 250

strftime$243:	; PostCall 50

strftime$244:	; Goto 303
x35169:	jmp strftime$303	; 3: 233 19 1

strftime$245:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$246:	; Parameter 50 add 6
x35172:	mov [bp + 56], bp	; 3: 137 110 56
x35175:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$247:	; Parameter 50 string_2502i3A2502i3A2502i# 8
x35179:	mov word [bp + 58], @8239$string_2502i3A2502i3A2502i#	; 5: 199 70 58 23 140

strftime$248:	; Deref £temporary3589 -> tp tp 4
x35184:	mov si, [bp + 12]	; 3: 139 118 12

strftime$249:	; Parameter 50 £temporary3589 -> tp 10
x35187:	mov ax, [si + 4]	; 3: 139 68 4
x35190:	mov [bp + 60], ax	; 3: 137 70 60

strftime$250:	; Deref £temporary3590 -> tp tp 2
x35193:	mov si, [bp + 12]	; 3: 139 118 12

strftime$251:	; Parameter 50 £temporary3590 -> tp 12
x35196:	mov ax, [si + 2]	; 3: 139 68 2
x35199:	mov [bp + 62], ax	; 3: 137 70 62

strftime$252:	; Deref £temporary3591 -> tp tp 0
x35202:	mov si, [bp + 12]	; 3: 139 118 12

strftime$253:	; Parameter 50 £temporary3591 -> tp 14
x35205:	mov ax, [si]	; 2: 139 4
x35207:	mov [bp + 64], ax	; 3: 137 70 64

strftime$254:	; Call 50 sprintf 0
x35210:	mov word [bp + 50], strftime$255	; 5: 199 70 50 157 137
x35215:	mov [bp + 52], bp	; 3: 137 110 52
x35218:	add bp, 50	; 3: 131 197 50
x35221:	mov di, bp	; 2: 137 239
x35223:	add di, 6	; 3: 131 199 6
x35226:	jmp sprintf	; 3: 233 123 250

strftime$255:	; PostCall 50

strftime$256:	; Goto 303
x35229:	jmp strftime$303	; 3: 233 215 0

strftime$257:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$258:	; Parameter 50 add 6
x35232:	mov [bp + 56], bp	; 3: 137 110 56
x35235:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$259:	; Parameter 50 string_2502i# 8
x35239:	mov word [bp + 58], @8246$string_2502i#	; 5: 199 70 58 38 140

strftime$260:	; Deref £temporary3593 -> tp tp 10
x35244:	mov si, [bp + 12]	; 3: 139 118 12

strftime$261:	; SignedModulo £temporary3594 £temporary3593 -> tp 100
x35247:	mov ax, [si + 10]	; 3: 139 68 10
x35250:	xor dx, dx	; 2: 49 210
x35252:	idiv word [@8249$int2$100#]	; 4: 247 62 43 140

strftime$262:	; Parameter 50 £temporary3594 10
x35256:	mov [bp + 60], dx	; 3: 137 86 60

strftime$263:	; Call 50 sprintf 0
x35259:	mov word [bp + 50], strftime$264	; 5: 199 70 50 206 137
x35264:	mov [bp + 52], bp	; 3: 137 110 52
x35267:	add bp, 50	; 3: 131 197 50
x35270:	mov di, bp	; 2: 137 239
x35272:	add di, 2	; 3: 131 199 2
x35275:	jmp sprintf	; 3: 233 74 250

strftime$264:	; PostCall 50

strftime$265:	; Goto 303
x35278:	jmp strftime$303	; 3: 233 166 0

strftime$266:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$267:	; Parameter 50 add 6
x35281:	mov [bp + 56], bp	; 3: 137 110 56
x35284:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$268:	; Parameter 50 string_2502i# 8
x35288:	mov word [bp + 58], @8254$string_2502i#	; 5: 199 70 58 45 140

strftime$269:	; Deref £temporary3596 -> tp tp 10
x35293:	mov si, [bp + 12]	; 3: 139 118 12

strftime$270:	; BinaryAdd £temporary3597 £temporary3596 -> tp 1900
x35296:	mov ax, [si + 10]	; 3: 139 68 10
x35299:	add ax, 1900	; 3: 5 108 7

strftime$271:	; Parameter 50 £temporary3597 10
x35302:	mov [bp + 60], ax	; 3: 137 70 60

strftime$272:	; Call 50 sprintf 0
x35305:	mov word [bp + 50], strftime$273	; 5: 199 70 50 252 137
x35310:	mov [bp + 52], bp	; 3: 137 110 52
x35313:	add bp, 50	; 3: 131 197 50
x35316:	mov di, bp	; 2: 137 239
x35318:	add di, 2	; 3: 131 199 2
x35321:	jmp sprintf	; 3: 233 28 250

strftime$273:	; PostCall 50

strftime$274:	; Goto 303
x35324:	jmp strftime$303	; 2: 235 121

strftime$275:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$276:	; Parameter 50 add 6
x35326:	mov [bp + 56], bp	; 3: 137 110 56
x35329:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$277:	; Deref £temporary3599 -> tp tp 16
x35333:	mov si, [bp + 12]	; 3: 139 118 12

strftime$278:	; Equal 281 £temporary3599 -> tp 0
x35336:	cmp word [si + 16], 0	; 4: 131 124 16 0
x35340:	je strftime$281	; 2: 116 5

strftime$279:	; Assign £temporary3604 string_summer#
x35342:	mov ax, @8263$string_summer#	; 3: 184 50 140

strftime$280:	; Goto 282
x35345:	jmp strftime$282	; 2: 235 3

strftime$281:	; Assign £temporary3604 string_winter#
x35347:	mov ax, @8264$string_winter#	; 3: 184 57 140

strftime$282:	; Parameter 50 £temporary3604 8
x35350:	mov [bp + 58], ax	; 3: 137 70 58

strftime$283:	; Call 50 strcpy 0
x35353:	mov word [bp + 50], strftime$284	; 5: 199 70 50 39 138
x35358:	mov [bp + 52], bp	; 3: 137 110 52
x35361:	add bp, 50	; 3: 131 197 50
x35364:	jmp strcpy	; 3: 233 26 212

strftime$284:	; PostCall 50

strftime$285:	; Goto 303
x35367:	jmp strftime$303	; 2: 235 78

strftime$286:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$287:	; Parameter 50 add 6
x35369:	mov [bp + 56], bp	; 3: 137 110 56
x35372:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$288:	; Parameter 50 string_25# 8
x35376:	mov word [bp + 58], @8276$string_25#	; 5: 199 70 58 64 140

strftime$289:	; Call 50 strcpy 0
x35381:	mov word [bp + 50], strftime$290	; 5: 199 70 50 67 138
x35386:	mov [bp + 52], bp	; 3: 137 110 52
x35389:	add bp, 50	; 3: 131 197 50
x35392:	jmp strcpy	; 3: 233 254 211

strftime$290:	; PostCall 50

strftime$291:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$292:	; Parameter 50 add 6
x35395:	mov [bp + 56], bp	; 3: 137 110 56
x35398:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$293:	; Parameter 50 string_# 8
x35402:	mov word [bp + 58], @8278$string_#	; 5: 199 70 58 66 140

strftime$294:	; Call 50 strcpy 0
x35407:	mov word [bp + 50], strftime$295	; 5: 199 70 50 93 138
x35412:	mov [bp + 52], bp	; 3: 137 110 52
x35415:	add bp, 50	; 3: 131 197 50
x35418:	jmp strcpy	; 3: 233 228 211

strftime$295:	; PostCall 50

strftime$296:	; Goto 303
x35421:	jmp strftime$303	; 2: 235 24

strftime$297:	; Deref £temporary3608 -> add add 0
x35423:	mov si, bp	; 2: 137 238
x35425:	add si, 30	; 3: 131 198 30

strftime$298:	; BinaryAdd £temporary3610 format index
x35428:	mov di, [bp + 10]	; 3: 139 126 10
x35431:	add di, [bp + 24]	; 3: 3 126 24

strftime$299:	; Deref £temporary3609 -> £temporary3610 £temporary3610 0

strftime$300:	; Assign £temporary3608 -> add £temporary3609 -> £temporary3610
x35434:	mov al, [di]	; 2: 138 5
x35436:	mov [si], al	; 2: 136 4

strftime$301:	; Deref £temporary3611 -> add add 1
x35438:	mov si, bp	; 2: 137 238
x35440:	add si, 30	; 3: 131 198 30

strftime$302:	; Assign £temporary3611 -> add 0
x35443:	mov byte [si + 1], 0	; 4: 198 68 1 0

strftime$303:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$304:	; Parameter 50 result 6
x35447:	mov ax, [bp + 6]	; 3: 139 70 6
x35450:	mov [bp + 56], ax	; 3: 137 70 56

strftime$305:	; Call 50 strlen 0
x35453:	mov word [bp + 50], strftime$306	; 5: 199 70 50 139 138
x35458:	mov [bp + 52], bp	; 3: 137 110 52
x35461:	add bp, 50	; 3: 131 197 50
x35464:	jmp strlen	; 3: 233 115 2

strftime$306:	; PostCall 50

strftime$307:	; GetReturnValue £temporary3612

strftime$308:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
x35467:	mov [bp + 50], bx	; 3: 137 94 50

strftime$309:	; Parameter 50 add 6
x35470:	mov [bp + 58], bp	; 3: 137 110 58
x35473:	add word [bp + 58], 30	; 4: 131 70 58 30

strftime$310:	; Call 50 strlen 0
x35477:	mov word [bp + 52], strftime$311	; 5: 199 70 52 163 138
x35482:	mov [bp + 54], bp	; 3: 137 110 54
x35485:	add bp, 52	; 3: 131 197 52
x35488:	jmp strlen	; 3: 233 91 2

strftime$311:	; PostCall 50
x35491:	mov ax, bx	; 2: 137 216
x35493:	mov bx, [bp + 50]	; 3: 139 94 50

strftime$312:	; GetReturnValue £temporary3613

strftime$313:	; BinaryAdd £temporary3614 £temporary3612 £temporary3613
x35496:	add bx, ax	; 2: 1 195

strftime$314:	; SignedGreaterThanEqual 322 £temporary3614 maxSize
x35498:	cmp bx, [bp + 8]	; 3: 59 94 8
x35501:	jge strftime$322	; 2: 125 33

strftime$315:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$316:	; Parameter 50 result 6
x35503:	mov ax, [bp + 6]	; 3: 139 70 6
x35506:	mov [bp + 56], ax	; 3: 137 70 56

strftime$317:	; Parameter 50 add 8
x35509:	mov [bp + 58], bp	; 3: 137 110 58
x35512:	add word [bp + 58], 30	; 4: 131 70 58 30

strftime$318:	; Call 50 strcat 0
x35516:	mov word [bp + 50], strftime$319	; 5: 199 70 50 202 138
x35521:	mov [bp + 52], bp	; 3: 137 110 52
x35524:	add bp, 50	; 3: 131 197 50
x35527:	jmp strcat	; 3: 233 87 2

strftime$319:	; PostCall 50

strftime$320:	; Increment index
x35530:	inc word [bp + 24]	; 3: 255 70 24

strftime$321:	; Goto 49
x35533:	jmp strftime$49	; 3: 233 184 250

strftime$322:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$323:	; Parameter 24 result 6
x35536:	mov ax, [bp + 6]	; 3: 139 70 6
x35539:	mov [bp + 30], ax	; 3: 137 70 30

strftime$324:	; Call 24 strlen 0
x35542:	mov word [bp + 24], strftime$325	; 5: 199 70 24 228 138
x35547:	mov [bp + 26], bp	; 3: 137 110 26
x35550:	add bp, 24	; 3: 131 197 24
x35553:	jmp strlen	; 3: 233 26 2

strftime$325:	; PostCall 24

strftime$326:	; GetReturnValue £temporary3617

strftime$327:	; SetReturnValue £temporary3617

strftime$328:	; Return £temporary3617
x35556:	mov ax, [bp]	; 3: 139 70 0
x35559:	mov di, [bp + 4]	; 3: 139 126 4
x35562:	mov bp, [bp + 2]	; 3: 139 110 2
x35565:	jmp ax	; 2: 255 224

strftime$329:	; FunctionEnd strftime

@7888$g_longDayList:
x35567:	dw @7881$string_Sunday# ; 2: 253 138
x35569:	dw @7882$string_Monday# ; 2: 4 139
x35571:	dw @7883$string_Tuesday# ; 2: 11 139
x35573:	dw @7884$string_Wednesday# ; 2: 19 139
x35575:	dw @7885$string_Thursday# ; 2: 29 139
x35577:	dw @7886$string_Friday# ; 2: 38 139
x35579:	dw @7887$string_Saturday# ; 2: 45 139

@7881$string_Sunday#:
x35581:	db "Sunday", 0	; 7: 83 117 110 100 97 121 0

@7882$string_Monday#:
x35588:	db "Monday", 0	; 7: 77 111 110 100 97 121 0

@7883$string_Tuesday#:
x35595:	db "Tuesday", 0	; 8: 84 117 101 115 100 97 121 0

@7884$string_Wednesday#:
x35603:	db "Wednesday", 0	; 10: 87 101 100 110 101 115 100 97 121 0

@7885$string_Thursday#:
x35613:	db "Thursday", 0	; 9: 84 104 117 114 115 100 97 121 0

@7886$string_Friday#:
x35622:	db "Friday", 0	; 7: 70 114 105 100 97 121 0

@7887$string_Saturday#:
x35629:	db "Saturday", 0	; 9: 83 97 116 117 114 100 97 121 0

@7914$g_longMonthList:
x35638:	dw @7902$string_January# ; 2: 78 139
x35640:	dw @7903$string_February# ; 2: 86 139
x35642:	dw @7904$string_March# ; 2: 95 139
x35644:	dw @7905$string_April# ; 2: 101 139
x35646:	dw @7906$string_May# ; 2: 107 139
x35648:	dw @7907$string_June# ; 2: 111 139
x35650:	dw @7908$string_July# ; 2: 116 139
x35652:	dw @7909$string_August# ; 2: 121 139
x35654:	dw @7910$string_September# ; 2: 128 139
x35656:	dw @7911$string_October# ; 2: 138 139
x35658:	dw @7912$string_November# ; 2: 146 139
x35660:	dw @7913$string_December# ; 2: 155 139

@7902$string_January#:
x35662:	db "January", 0	; 8: 74 97 110 117 97 114 121 0

@7903$string_February#:
x35670:	db "February", 0	; 9: 70 101 98 114 117 97 114 121 0

@7904$string_March#:
x35679:	db "March", 0	; 6: 77 97 114 99 104 0

@7905$string_April#:
x35685:	db "April", 0	; 6: 65 112 114 105 108 0

@7906$string_May#:
x35691:	db "May", 0	; 4: 77 97 121 0

@7907$string_June#:
x35695:	db "June", 0	; 5: 74 117 110 101 0

@7908$string_July#:
x35700:	db "July", 0	; 5: 74 117 108 121 0

@7909$string_August#:
x35705:	db "August", 0	; 7: 65 117 103 117 115 116 0

@7910$string_September#:
x35712:	db "September", 0	; 10: 83 101 112 116 101 109 98 101 114 0

@7911$string_October#:
x35722:	db "October", 0	; 8: 79 99 116 111 98 101 114 0

@7912$string_November#:
x35730:	db "November", 0	; 9: 78 111 118 101 109 98 101 114 0

@7913$string_December#:
x35739:	db "December", 0	; 9: 68 101 99 101 109 98 101 114 0

@8078$string_#:
x35748:	db 0	; 1: 0

@8118$int2$2#:
x35749:	dw 2	; 2: 2 0

@8126$int2$2#:
x35751:	dw 2	; 2: 2 0

@8134$int2$2#:
x35753:	dw 2	; 2: 2 0

@8142$int2$2#:
x35755:	dw 2	; 2: 2 0

@8148$string_2502i2D2502i2D2502i202502i3A2502i3A2502i#:
x35757:	db "%02i-%02i-%02i %02i:%02i:%02i", 0	; 30: 37 48 50 105 45 37 48 50 105 45 37 48 50 105 32 37 48 50 105 58 37 48 50 105 58 37 48 50 105 0

@8164$string_2502i#:
x35787:	db "%02i", 0	; 5: 37 48 50 105 0

@8169$string_2502i#:
x35792:	db "%02i", 0	; 5: 37 48 50 105 0

@8174$string_2502i#:
x35797:	db "%02i", 0	; 5: 37 48 50 105 0

@8177$int2$12#:
x35802:	dw 12	; 2: 12 0

@8182$string_2503i#:
x35804:	db "%03i", 0	; 5: 37 48 51 105 0

@8187$string_2502i#:
x35809:	db "%02i", 0	; 5: 37 48 50 105 0

@8195$string_2502i#:
x35814:	db "%02i", 0	; 5: 37 48 50 105 0

@8200$string_25s#:
x35819:	db "%s", 0	; 3: 37 115 0

@8201$string_AM#:
x35822:	db "AM", 0	; 3: 65 77 0

@8202$string_PM#:
x35825:	db "PM", 0	; 3: 80 77 0

@8214$string_2502i#:
x35828:	db "%02i", 0	; 5: 37 48 50 105 0

@8219$string_2502i#:
x35833:	db "%02i", 0	; 5: 37 48 50 105 0

@8223$string_2502i#:
x35838:	db "%02i", 0	; 5: 37 48 50 105 0

@8228$string_2502i#:
x35843:	db "%02i", 0	; 5: 37 48 50 105 0

@8232$string_2502i3A2502i3A2502i#:
x35848:	db "%02i:%02i:%02i", 0	; 15: 37 48 50 105 58 37 48 50 105 58 37 48 50 105 0

@8239$string_2502i3A2502i3A2502i#:
x35863:	db "%02i:%02i:%02i", 0	; 15: 37 48 50 105 58 37 48 50 105 58 37 48 50 105 0

@8246$string_2502i#:
x35878:	db "%02i", 0	; 5: 37 48 50 105 0

@8249$int2$100#:
x35883:	dw 100	; 2: 100 0

@8254$string_2502i#:
x35885:	db "%02i", 0	; 5: 37 48 50 105 0

@8263$string_summer#:
x35890:	db "summer", 0	; 7: 115 117 109 109 101 114 0

@8264$string_winter#:
x35897:	db "winter", 0	; 7: 119 105 110 116 101 114 0

@8276$string_25#:
x35904:	db "%", 0	; 2: 37 0

@8278$string_#:
x35906:	db 0	; 1: 0

getWeekNumber:	; Deref £temporary3473 -> tp tp 10
x35907:	mov si, [bp + 6]	; 3: 139 118 6

getWeekNumber$1:	; BinarySubtract £temporary3474 £temporary3473 -> tp 69
x35910:	mov ax, [si + 10]	; 3: 139 68 10
x35913:	sub ax, 69	; 3: 131 232 69

getWeekNumber$2:	; SignedDivide £temporary3475 £temporary3474 4
x35916:	xor dx, dx	; 2: 49 210
x35918:	idiv word [@7983$int2$4#]	; 4: 247 62 246 140

getWeekNumber$3:	; IntegralToIntegral £temporary3476 £temporary3475
x35922:	and eax, 65535	; 6: 102 37 255 255 0 0
x35928:	cmp ax, 0	; 3: 131 248 0
x35931:	jge getWeekNumber$4	; 2: 125 5
x35933:	neg ax	; 2: 247 216
x35935:	neg eax	; 3: 102 247 216

getWeekNumber$4:	; Assign leapDays £temporary3476
x35938:	mov [bp + 8], eax	; 4: 102 137 70 8

getWeekNumber$5:	; Deref £temporary3477 -> tp tp 10
x35942:	mov si, [bp + 6]	; 3: 139 118 6

getWeekNumber$6:	; BinarySubtract £temporary3478 £temporary3477 -> tp 70
x35945:	mov ax, [si + 10]	; 3: 139 68 10
x35948:	sub ax, 70	; 3: 131 232 70

getWeekNumber$7:	; SignedMultiply £temporary3479 £temporary3478 365
x35951:	xor dx, dx	; 2: 49 210
x35953:	imul word [@7992$int2$365#]	; 4: 247 46 248 140

getWeekNumber$8:	; IntegralToIntegral £temporary3480 £temporary3479
x35957:	and eax, 65535	; 6: 102 37 255 255 0 0
x35963:	cmp ax, 0	; 3: 131 248 0
x35966:	jge getWeekNumber$9	; 2: 125 5
x35968:	neg ax	; 2: 247 216
x35970:	neg eax	; 3: 102 247 216

getWeekNumber$9:	; BinaryAdd £temporary3481 £temporary3480 leapDays
x35973:	add eax, [bp + 8]	; 4: 102 3 70 8

getWeekNumber$10:	; IntegralToIntegral £temporary3482 £temporary3481
x35977:	cmp eax, 0	; 4: 102 131 248 0
x35981:	jge getWeekNumber$11	; 2: 125 5
x35983:	neg eax	; 3: 102 247 216
x35986:	neg ax	; 2: 247 216

getWeekNumber$11:	; Assign totalDays £temporary3482
x35988:	mov [bp + 12], ax	; 3: 137 70 12

getWeekNumber$12:	; SignedGreaterThanEqual 15 totalDays 3
x35991:	cmp word [bp + 12], 3	; 4: 131 126 12 3
x35995:	jge getWeekNumber$15	; 2: 125 11

getWeekNumber$13:	; BinaryAdd weekDayJanuaryFirst totalDays 4
x35997:	mov ax, [bp + 12]	; 3: 139 70 12
x36000:	add ax, 4	; 3: 131 192 4
x36003:	mov [bp + 14], ax	; 3: 137 70 14

getWeekNumber$14:	; Goto 17
x36006:	jmp getWeekNumber$17	; 2: 235 15

getWeekNumber$15:	; BinarySubtract £temporary3485 totalDays 3
x36008:	mov ax, [bp + 12]	; 3: 139 70 12
x36011:	sub ax, 3	; 3: 131 232 3

getWeekNumber$16:	; SignedModulo weekDayJanuaryFirst £temporary3485 7
x36014:	xor dx, dx	; 2: 49 210
x36016:	idiv word [@8009$int2$7#]	; 4: 247 62 250 140
x36020:	mov [bp + 14], dx	; 3: 137 86 14

getWeekNumber$17:	; BinarySubtract firstWeekSize 7 weekDayJanuaryFirst
x36023:	mov ax, 7	; 3: 184 7 0
x36026:	sub ax, [bp + 14]	; 3: 43 70 14
x36029:	mov [bp + 16], ax	; 3: 137 70 16

getWeekNumber$18:	; Deref £temporary3488 -> tp tp 14
x36032:	mov si, [bp + 6]	; 3: 139 118 6

getWeekNumber$19:	; SignedGreaterThanEqual 22 £temporary3488 -> tp firstWeekSize
x36035:	mov ax, [bp + 16]	; 3: 139 70 16
x36038:	cmp [si + 14], ax	; 3: 57 68 14
x36041:	jge getWeekNumber$22	; 2: 125 14

getWeekNumber$20:	; SetReturnValue 0
x36043:	mov bx, 0	; 3: 187 0 0

getWeekNumber$21:	; Return 0
x36046:	mov ax, [bp]	; 3: 139 70 0
x36049:	mov di, [bp + 4]	; 3: 139 126 4
x36052:	mov bp, [bp + 2]	; 3: 139 110 2
x36055:	jmp ax	; 2: 255 224

getWeekNumber$22:	; Deref £temporary3490 -> tp tp 14
x36057:	mov si, [bp + 6]	; 3: 139 118 6

getWeekNumber$23:	; BinarySubtract £temporary3491 £temporary3490 -> tp firstWeekSize
x36060:	mov ax, [si + 14]	; 3: 139 68 14
x36063:	sub ax, [bp + 16]	; 3: 43 70 16

getWeekNumber$24:	; SignedDivide £temporary3492 £temporary3491 7
x36066:	xor dx, dx	; 2: 49 210
x36068:	idiv word [@8022$int2$7#]	; 4: 247 62 252 140

getWeekNumber$25:	; BinaryAdd £temporary3493 £temporary3492 1
x36072:	inc ax	; 1: 64

getWeekNumber$26:	; SetReturnValue £temporary3493
x36073:	mov bx, ax	; 2: 137 195

getWeekNumber$27:	; Return £temporary3493
x36075:	mov ax, [bp]	; 3: 139 70 0
x36078:	mov di, [bp + 4]	; 3: 139 126 4
x36081:	mov bp, [bp + 2]	; 3: 139 110 2
x36084:	jmp ax	; 2: 255 224

getWeekNumber$28:	; FunctionEnd getWeekNumber

@7983$int2$4#:
x36086:	dw 4	; 2: 4 0

@7992$int2$365#:
x36088:	dw 365	; 2: 109 1

@8009$int2$7#:
x36090:	dw 7	; 2: 7 0

@8022$int2$7#:
x36092:	dw 7	; 2: 7 0

strlen:	; Assign index 0
x36094:	mov word [bp + 8], 0	; 5: 199 70 8 0 0

strlen$1:	; BinaryAdd £temporary3865 string index
x36099:	mov si, [bp + 6]	; 3: 139 118 6
x36102:	add si, [bp + 8]	; 3: 3 118 8

strlen$2:	; Deref £temporary3864 -> £temporary3865 £temporary3865 0

strlen$3:	; Equal 6 £temporary3864 -> £temporary3865 0
x36105:	cmp byte [si], 0	; 3: 128 60 0
x36108:	je strlen$6	; 2: 116 5

strlen$4:	; Increment index
x36110:	inc word [bp + 8]	; 3: 255 70 8

strlen$5:	; Goto 1
x36113:	jmp strlen$1	; 2: 235 240

strlen$6:	; SetReturnValue index
x36115:	mov bx, [bp + 8]	; 3: 139 94 8

strlen$7:	; Return index
x36118:	mov ax, [bp]	; 3: 139 70 0
x36121:	mov di, [bp + 4]	; 3: 139 126 4
x36124:	mov bp, [bp + 2]	; 3: 139 110 2
x36127:	jmp ax	; 2: 255 224

strlen$8:	; FunctionEnd strlen

strcat:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strcat$1:	; Parameter 12 target 6
x36129:	mov ax, [bp + 6]	; 3: 139 70 6
x36132:	mov [bp + 18], ax	; 3: 137 70 18

strcat$2:	; Call 12 strlen 0
x36135:	mov word [bp + 12], strcat$3	; 5: 199 70 12 53 141
x36140:	mov [bp + 14], bp	; 3: 137 110 14
x36143:	add bp, 12	; 3: 131 197 12
x36146:	nop	; 1: 144
x36147:	jmp strlen	; 2: 235 201

strcat$3:	; PostCall 12

strcat$4:	; GetReturnValue £temporary3721

strcat$5:	; Assign targetLength £temporary3721
x36149:	mov [bp + 12], bx	; 3: 137 94 12

strcat$6:	; Assign index 0
x36152:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strcat$7:	; BinaryAdd £temporary3723 source index
x36157:	mov si, [bp + 8]	; 3: 139 118 8
x36160:	add si, [bp + 10]	; 3: 3 118 10

strcat$8:	; Deref £temporary3722 -> £temporary3723 £temporary3723 0

strcat$9:	; Equal 18 £temporary3722 -> £temporary3723 0
x36163:	cmp byte [si], 0	; 3: 128 60 0
x36166:	je strcat$18	; 2: 116 26

strcat$10:	; BinaryAdd £temporary3726 targetLength index
x36168:	mov ax, [bp + 12]	; 3: 139 70 12
x36171:	add ax, [bp + 10]	; 3: 3 70 10

strcat$11:	; BinaryAdd £temporary3728 target £temporary3726
x36174:	mov si, [bp + 6]	; 3: 139 118 6
x36177:	add si, ax	; 2: 1 198

strcat$12:	; Deref £temporary3727 -> £temporary3728 £temporary3728 0

strcat$13:	; BinaryAdd £temporary3730 source index
x36179:	mov di, [bp + 8]	; 3: 139 126 8
x36182:	add di, [bp + 10]	; 3: 3 126 10

strcat$14:	; Deref £temporary3729 -> £temporary3730 £temporary3730 0

strcat$15:	; Assign £temporary3727 -> £temporary3728 £temporary3729 -> £temporary3730
x36185:	mov al, [di]	; 2: 138 5
x36187:	mov [si], al	; 2: 136 4

strcat$16:	; Increment index
x36189:	inc word [bp + 10]	; 3: 255 70 10

strcat$17:	; Goto 7
x36192:	jmp strcat$7	; 2: 235 219

strcat$18:	; BinaryAdd £temporary3731 targetLength index
x36194:	mov ax, [bp + 12]	; 3: 139 70 12
x36197:	add ax, [bp + 10]	; 3: 3 70 10

strcat$19:	; BinaryAdd £temporary3733 target £temporary3731
x36200:	mov si, [bp + 6]	; 3: 139 118 6
x36203:	add si, ax	; 2: 1 198

strcat$20:	; Deref £temporary3732 -> £temporary3733 £temporary3733 0

strcat$21:	; Assign £temporary3732 -> £temporary3733 0
x36205:	mov byte [si], 0	; 3: 198 4 0

strcat$22:	; SetReturnValue target
x36208:	mov bx, [bp + 6]	; 3: 139 94 6

strcat$23:	; Return target
x36211:	mov ax, [bp]	; 3: 139 70 0
x36214:	mov di, [bp + 4]	; 3: 139 126 4
x36217:	mov bp, [bp + 2]	; 3: 139 110 2
x36220:	jmp ax	; 2: 255 224

strcat$24:	; FunctionEnd strcat

assert_test:	; Assign n 1
x36222:	mov word [bp + 6], 1	; 5: 199 70 6 1 0

assert_test$1:	; Equal 13 n 1
x36227:	cmp word [bp + 6], 1	; 4: 131 126 6 1
x36231:	je assert_test$13	; 2: 116 59

assert_test$2:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

assert_test$3:	; Parameter 8 stderr 6
x36233:	mov ax, [stderr]	; 3: 161 139 77
x36236:	mov [bp + 14], ax	; 3: 137 70 14

assert_test$4:	; Parameter 8 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x36239:	mov word [bp + 16], @9614$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 16 207 141

assert_test$5:	; Parameter 8 string_n203D3D201# 10
x36244:	mov word [bp + 18], @9615$string_n203D3D201#	; 5: 199 70 18 253 141

assert_test$6:	; Parameter 8 string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CAssertTest2Ec# 12
x36249:	mov word [bp + 20], @9616$string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CAssertTest2Ec#	; 5: 199 70 20 4 142

assert_test$7:	; Parameter 8 8 14
x36254:	mov word [bp + 22], 8	; 5: 199 70 22 8 0

assert_test$8:	; Call 8 fprintf 0
x36259:	mov word [bp + 8], assert_test$9	; 5: 199 70 8 182 141
x36264:	mov [bp + 10], bp	; 3: 137 110 10
x36267:	add bp, 8	; 3: 131 197 8
x36270:	mov di, bp	; 2: 137 239
x36272:	add di, 6	; 3: 131 199 6
x36275:	jmp fprintf	; 3: 233 199 208

assert_test$9:	; PostCall 8

assert_test$10:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

assert_test$11:	; Call 8 abort 0
x36278:	mov word [bp + 8], assert_test$12	; 5: 199 70 8 196 141
x36283:	mov [bp + 10], bp	; 3: 137 110 10
x36286:	add bp, 8	; 3: 131 197 8
x36289:	jmp abort	; 3: 233 244 208

assert_test$12:	; PostCall 8

assert_test$13:	; Return 0
x36292:	mov ax, [bp]	; 3: 139 70 0
x36295:	mov di, [bp + 4]	; 3: 139 126 4
x36298:	mov bp, [bp + 2]	; 3: 139 110 2
x36301:	jmp ax	; 2: 255 224

assert_test$14:	; FunctionEnd assert_test

@9614$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x36303:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@9615$string_n203D3D201#:
x36349:	db "n == 1", 0	; 7: 110 32 61 61 32 49 0

@9616$string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CAssertTest2Ec#:
x36356:	db "C:\Users\Stefa\Documents\vagrant\homestead\code\code\AssertTest.c", 0	; 66: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 65 115 115 101 114 116 84 101 115 116 46 99 0

malloc_test:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$1:	; Parameter 6 96 6
x36422:	mov word [bp + 12], 96	; 5: 199 70 12 96 0

malloc_test$2:	; Call 6 malloc 0
x36427:	mov word [bp + 6], malloc_test$3	; 5: 199 70 6 89 142
x36432:	mov [bp + 8], bp	; 3: 137 110 8
x36435:	add bp, 6	; 3: 131 197 6
x36438:	jmp malloc	; 3: 233 218 228

malloc_test$3:	; PostCall 6

malloc_test$4:	; GetReturnValue £temporary5951

malloc_test$5:	; Assign b £temporary5951
x36441:	mov [bp + 6], bx	; 3: 137 94 6

malloc_test$6:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$7:	; Parameter 8 96 6
x36444:	mov word [bp + 14], 96	; 5: 199 70 14 96 0

malloc_test$8:	; Call 8 malloc 0
x36449:	mov word [bp + 8], malloc_test$9	; 5: 199 70 8 111 142
x36454:	mov [bp + 10], bp	; 3: 137 110 10
x36457:	add bp, 8	; 3: 131 197 8
x36460:	jmp malloc	; 3: 233 196 228

malloc_test$9:	; PostCall 8

malloc_test$10:	; GetReturnValue £temporary5952

malloc_test$11:	; Assign c £temporary5952
x36463:	mov [bp + 8], bx	; 3: 137 94 8

malloc_test$12:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$13:	; Parameter 10 96 6
x36466:	mov word [bp + 16], 96	; 5: 199 70 16 96 0

malloc_test$14:	; Call 10 malloc 0
x36471:	mov word [bp + 10], malloc_test$15	; 5: 199 70 10 133 142
x36476:	mov [bp + 12], bp	; 3: 137 110 12
x36479:	add bp, 10	; 3: 131 197 10
x36482:	jmp malloc	; 3: 233 174 228

malloc_test$15:	; PostCall 10

malloc_test$16:	; GetReturnValue £temporary5953

malloc_test$17:	; Assign d £temporary5953
x36485:	mov [bp + 10], bx	; 3: 137 94 10

malloc_test$18:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$19:	; Call 12 print_heap 0
x36488:	mov word [bp + 12], malloc_test$20	; 5: 199 70 12 150 142
x36493:	mov [bp + 14], bp	; 3: 137 110 14
x36496:	add bp, 12	; 3: 131 197 12
x36499:	jmp print_heap	; 3: 233 151 0

malloc_test$20:	; PostCall 12

malloc_test$21:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$22:	; Parameter 12 c 6
x36502:	mov ax, [bp + 8]	; 3: 139 70 8
x36505:	mov [bp + 18], ax	; 3: 137 70 18

malloc_test$23:	; Parameter 12 40 8
x36508:	mov word [bp + 20], 40	; 5: 199 70 20 40 0

malloc_test$24:	; Call 12 realloc 0
x36513:	mov word [bp + 12], malloc_test$25	; 5: 199 70 12 175 142
x36518:	mov [bp + 14], bp	; 3: 137 110 14
x36521:	add bp, 12	; 3: 131 197 12
x36524:	jmp realloc	; 3: 233 16 1

malloc_test$25:	; PostCall 12

malloc_test$26:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$27:	; Call 12 print_heap 0
x36527:	mov word [bp + 12], malloc_test$28	; 5: 199 70 12 189 142
x36532:	mov [bp + 14], bp	; 3: 137 110 14
x36535:	add bp, 12	; 3: 131 197 12
x36538:	nop	; 1: 144
x36539:	jmp print_heap	; 2: 235 112

malloc_test$28:	; PostCall 12

malloc_test$29:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$30:	; Parameter 12 40 6
x36541:	mov word [bp + 18], 40	; 5: 199 70 18 40 0

malloc_test$31:	; Call 12 malloc 0
x36546:	mov word [bp + 12], malloc_test$32	; 5: 199 70 12 208 142
x36551:	mov [bp + 14], bp	; 3: 137 110 14
x36554:	add bp, 12	; 3: 131 197 12
x36557:	jmp malloc	; 3: 233 99 228

malloc_test$32:	; PostCall 12

malloc_test$33:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$34:	; Call 12 print_heap 0
x36560:	mov word [bp + 12], malloc_test$35	; 5: 199 70 12 222 142
x36565:	mov [bp + 14], bp	; 3: 137 110 14
x36568:	add bp, 12	; 3: 131 197 12
x36571:	nop	; 1: 144
x36572:	jmp print_heap	; 2: 235 79

malloc_test$35:	; PostCall 12

malloc_test$36:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$37:	; Parameter 12 b 6
x36574:	mov ax, [bp + 6]	; 3: 139 70 6
x36577:	mov [bp + 18], ax	; 3: 137 70 18

malloc_test$38:	; Call 12 free 0
x36580:	mov word [bp + 12], malloc_test$39	; 5: 199 70 12 242 142
x36585:	mov [bp + 14], bp	; 3: 137 110 14
x36588:	add bp, 12	; 3: 131 197 12
x36591:	jmp free	; 3: 233 77 230

malloc_test$39:	; PostCall 12

malloc_test$40:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$41:	; Call 12 print_heap 0
x36594:	mov word [bp + 12], malloc_test$42	; 5: 199 70 12 0 143
x36599:	mov [bp + 14], bp	; 3: 137 110 14
x36602:	add bp, 12	; 3: 131 197 12
x36605:	nop	; 1: 144
x36606:	jmp print_heap	; 2: 235 45

malloc_test$42:	; PostCall 12

malloc_test$43:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$44:	; Parameter 12 d 6
x36608:	mov ax, [bp + 10]	; 3: 139 70 10
x36611:	mov [bp + 18], ax	; 3: 137 70 18

malloc_test$45:	; Call 12 free 0
x36614:	mov word [bp + 12], malloc_test$46	; 5: 199 70 12 20 143
x36619:	mov [bp + 14], bp	; 3: 137 110 14
x36622:	add bp, 12	; 3: 131 197 12
x36625:	jmp free	; 3: 233 43 230

malloc_test$46:	; PostCall 12

malloc_test$47:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$48:	; Call 12 print_heap 0
x36628:	mov word [bp + 12], malloc_test$49	; 5: 199 70 12 34 143
x36633:	mov [bp + 14], bp	; 3: 137 110 14
x36636:	add bp, 12	; 3: 131 197 12
x36639:	nop	; 1: 144
x36640:	jmp print_heap	; 2: 235 11

malloc_test$49:	; PostCall 12

malloc_test$50:	; Return 0
x36642:	mov ax, [bp]	; 3: 139 70 0
x36645:	mov di, [bp + 4]	; 3: 139 126 4
x36648:	mov bp, [bp + 2]	; 3: 139 110 2
x36651:	jmp ax	; 2: 255 224

malloc_test$51:	; FunctionEnd malloc_test

print_heap:	; Assign currBlockPtr g_firstBlockPtr
x36653:	mov ax, [g_firstBlockPtr]	; 3: 161 193 116
x36656:	mov [bp + 6], ax	; 3: 137 70 6

print_heap$1:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_heap$2:	; Parameter 8 string_Heap3A0A# 6
x36659:	mov word [bp + 14], @376$string_Heap3A0A#	; 5: 199 70 14 159 143

print_heap$3:	; Call 8 printf 0
x36664:	mov word [bp + 8], print_heap$4	; 5: 199 70 8 72 143
x36669:	mov [bp + 10], bp	; 3: 137 110 10
x36672:	add bp, 8	; 3: 131 197 8
x36675:	mov di, bp	; 2: 137 239
x36677:	jmp printf	; 3: 233 188 125

print_heap$4:	; PostCall 8

print_heap$5:	; Equal 17 currBlockPtr 0
x36680:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x36684:	je print_heap$17	; 2: 116 49

print_heap$6:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_heap$7:	; Parameter 8 string_2020Address2025u2C20Size2025u0A# 6
x36686:	mov word [bp + 14], @382$string_2020Address2025u2C20Size2025u0A#	; 5: 199 70 14 166 143

print_heap$8:	; IntegralToIntegral £temporary150 currBlockPtr
x36691:	mov ax, [bp + 6]	; 3: 139 70 6

print_heap$9:	; Parameter 8 £temporary150 8
x36694:	mov [bp + 16], ax	; 3: 137 70 16

print_heap$10:	; Deref £temporary151 -> currBlockPtr currBlockPtr 0
x36697:	mov si, [bp + 6]	; 3: 139 118 6

print_heap$11:	; Parameter 8 £temporary151 -> currBlockPtr 10
x36700:	mov ax, [si]	; 2: 139 4
x36702:	mov [bp + 18], ax	; 3: 137 70 18

print_heap$12:	; Call 8 printf 0
x36705:	mov word [bp + 8], print_heap$13	; 5: 199 70 8 116 143
x36710:	mov [bp + 10], bp	; 3: 137 110 10
x36713:	add bp, 8	; 3: 131 197 8
x36716:	mov di, bp	; 2: 137 239
x36718:	add di, 4	; 3: 131 199 4
x36721:	jmp printf	; 3: 233 144 125

print_heap$13:	; PostCall 8

print_heap$14:	; Deref £temporary153 -> currBlockPtr currBlockPtr 2
x36724:	mov si, [bp + 6]	; 3: 139 118 6

print_heap$15:	; Assign currBlockPtr £temporary153 -> currBlockPtr
x36727:	mov ax, [si + 2]	; 3: 139 68 2
x36730:	mov [bp + 6], ax	; 3: 137 70 6

print_heap$16:	; Goto 5
x36733:	jmp print_heap$5	; 2: 235 201

print_heap$17:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_heap$18:	; Parameter 8 string_0A# 6
x36735:	mov word [bp + 14], @387$string_0A#	; 5: 199 70 14 189 143

print_heap$19:	; Call 8 printf 0
x36740:	mov word [bp + 8], print_heap$20	; 5: 199 70 8 148 143
x36745:	mov [bp + 10], bp	; 3: 137 110 10
x36748:	add bp, 8	; 3: 131 197 8
x36751:	mov di, bp	; 2: 137 239
x36753:	jmp printf	; 3: 233 112 125

print_heap$20:	; PostCall 8

print_heap$21:	; Return 0
x36756:	mov ax, [bp]	; 3: 139 70 0
x36759:	mov di, [bp + 4]	; 3: 139 126 4
x36762:	mov bp, [bp + 2]	; 3: 139 110 2
x36765:	jmp ax	; 2: 255 224

print_heap$22:	; FunctionEnd print_heap

@376$string_Heap3A0A#:
x36767:	db "Heap:", 10, 0	; 7: 72 101 97 112 58 10 0

@382$string_2020Address2025u2C20Size2025u0A#:
x36774:	db "  Address %u, Size %u", 10, 0	; 23: 32 32 65 100 100 114 101 115 115 32 37 117 44 32 83 105 122 101 32 37 117 10 0

@387$string_0A#:
x36797:	db 10, 0	; 2: 10 0

realloc:	; SignedGreaterThanEqual 12 newMemorySize 0
x36799:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x36803:	jge realloc$12	; 2: 125 59

realloc$1:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

realloc$2:	; Parameter 10 stderr 6
x36805:	mov ax, [stderr]	; 3: 161 139 77
x36808:	mov [bp + 16], ax	; 3: 137 70 16

realloc$3:	; Parameter 10 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x36811:	mov word [bp + 18], @279$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 18 134 145

realloc$4:	; Parameter 10 string_newMemorySize203E3D200# 10
x36816:	mov word [bp + 20], @280$string_newMemorySize203E3D200#	; 5: 199 70 20 180 145

realloc$5:	; Parameter 10 string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec# 12
x36821:	mov word [bp + 22], @281$string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec#	; 5: 199 70 22 199 145

realloc$6:	; Parameter 10 259 14
x36826:	mov word [bp + 24], 259	; 5: 199 70 24 3 1

realloc$7:	; Call 10 fprintf 0
x36831:	mov word [bp + 10], realloc$8	; 5: 199 70 10 242 143
x36836:	mov [bp + 12], bp	; 3: 137 110 12
x36839:	add bp, 10	; 3: 131 197 10
x36842:	mov di, bp	; 2: 137 239
x36844:	add di, 6	; 3: 131 199 6
x36847:	jmp fprintf	; 3: 233 139 206

realloc$8:	; PostCall 10

realloc$9:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

realloc$10:	; Call 10 abort 0
x36850:	mov word [bp + 10], realloc$11	; 5: 199 70 10 0 144
x36855:	mov [bp + 12], bp	; 3: 137 110 12
x36858:	add bp, 10	; 3: 131 197 10
x36861:	jmp abort	; 3: 233 184 206

realloc$11:	; PostCall 10

realloc$12:	; NotEqual 25 oldMemoryPtr 0
x36864:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x36868:	jne realloc$25	; 2: 117 65

realloc$13:	; SignedGreaterThan 25 newMemorySize 0
x36870:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x36874:	jg realloc$25	; 2: 127 59

realloc$14:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

realloc$15:	; Parameter 10 stderr 6
x36876:	mov ax, [stderr]	; 3: 161 139 77
x36879:	mov [bp + 16], ax	; 3: 137 70 16

realloc$16:	; Parameter 10 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x36882:	mov word [bp + 18], @295$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 18 5 146

realloc$17:	; Parameter 10 string_2820oldMemoryPtr20213D20NULL2029207C7C202820newMemorySize203E2002029# 10
x36887:	mov word [bp + 20], @296$string_2820oldMemoryPtr20213D20NULL2029207C7C202820newMemorySize203E2002029#	; 5: 199 70 20 51 146

realloc$18:	; Parameter 10 string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec# 12
x36892:	mov word [bp + 22], @297$string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec#	; 5: 199 70 22 101 146

realloc$19:	; Parameter 10 260 14
x36897:	mov word [bp + 24], 260	; 5: 199 70 24 4 1

realloc$20:	; Call 10 fprintf 0
x36902:	mov word [bp + 10], realloc$21	; 5: 199 70 10 57 144
x36907:	mov [bp + 12], bp	; 3: 137 110 12
x36910:	add bp, 10	; 3: 131 197 10
x36913:	mov di, bp	; 2: 137 239
x36915:	add di, 6	; 3: 131 199 6
x36918:	jmp fprintf	; 3: 233 68 206

realloc$21:	; PostCall 10

realloc$22:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

realloc$23:	; Call 10 abort 0
x36921:	mov word [bp + 10], realloc$24	; 5: 199 70 10 71 144
x36926:	mov [bp + 12], bp	; 3: 137 110 12
x36929:	add bp, 10	; 3: 131 197 10
x36932:	jmp abort	; 3: 233 113 206

realloc$24:	; PostCall 10

realloc$25:	; NotEqual 33 oldMemoryPtr 0
x36935:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x36939:	jne realloc$33	; 2: 117 31

realloc$26:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

realloc$27:	; Parameter 10 newMemorySize 6
x36941:	mov ax, [bp + 8]	; 3: 139 70 8
x36944:	mov [bp + 16], ax	; 3: 137 70 16

realloc$28:	; Call 10 malloc 0
x36947:	mov word [bp + 10], realloc$29	; 5: 199 70 10 97 144
x36952:	mov [bp + 12], bp	; 3: 137 110 12
x36955:	add bp, 10	; 3: 131 197 10
x36958:	jmp malloc	; 3: 233 210 226

realloc$29:	; PostCall 10

realloc$30:	; GetReturnValue £temporary108

realloc$31:	; SetReturnValue £temporary108

realloc$32:	; Return £temporary108
x36961:	mov ax, [bp]	; 3: 139 70 0
x36964:	mov di, [bp + 4]	; 3: 139 126 4
x36967:	mov bp, [bp + 2]	; 3: 139 110 2
x36970:	jmp ax	; 2: 255 224

realloc$33:	; NotEqual 40 newMemorySize 0
x36972:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x36976:	jne realloc$40	; 2: 117 34

realloc$34:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

realloc$35:	; Parameter 10 oldMemoryPtr 6
x36978:	mov ax, [bp + 6]	; 3: 139 70 6
x36981:	mov [bp + 16], ax	; 3: 137 70 16

realloc$36:	; Call 10 free 0
x36984:	mov word [bp + 10], realloc$37	; 5: 199 70 10 134 144
x36989:	mov [bp + 12], bp	; 3: 137 110 12
x36992:	add bp, 10	; 3: 131 197 10
x36995:	jmp free	; 3: 233 185 228

realloc$37:	; PostCall 10

realloc$38:	; SetReturnValue 0
x36998:	mov bx, 0	; 3: 187 0 0

realloc$39:	; Return 0
x37001:	mov ax, [bp]	; 3: 139 70 0
x37004:	mov di, [bp + 4]	; 3: 139 126 4
x37007:	mov bp, [bp + 2]	; 3: 139 110 2
x37010:	jmp ax	; 2: 255 224

realloc$40:	; IntegralToIntegral £temporary111 newMemorySize
x37012:	mov ax, [bp + 8]	; 3: 139 70 8

realloc$41:	; BinaryAdd newBlockSize £temporary111 4
x37015:	add ax, 4	; 3: 131 192 4
x37018:	mov [bp + 10], ax	; 3: 137 70 10

realloc$42:	; IntegralToIntegral £temporary113 oldMemoryPtr
x37021:	mov ax, [bp + 6]	; 3: 139 70 6

realloc$43:	; BinarySubtract £temporary114 £temporary113 4
x37024:	sub ax, 4	; 3: 131 232 4

realloc$44:	; IntegralToIntegral £temporary115 £temporary114

realloc$45:	; Assign oldBlockPtr £temporary115
x37027:	mov [bp + 12], ax	; 3: 137 70 12

realloc$46:	; Deref £temporary116 -> oldBlockPtr oldBlockPtr 0
x37030:	mov si, [bp + 12]	; 3: 139 118 12

realloc$47:	; UnsignedGreaterThan 52 newBlockSize £temporary116 -> oldBlockPtr
x37033:	mov ax, [si]	; 2: 139 4
x37035:	cmp [bp + 10], ax	; 3: 57 70 10
x37038:	ja realloc$52	; 2: 119 22

realloc$48:	; Deref £temporary118 -> oldBlockPtr oldBlockPtr 0
x37040:	mov si, [bp + 12]	; 3: 139 118 12

realloc$49:	; Assign £temporary118 -> oldBlockPtr newBlockSize
x37043:	mov ax, [bp + 10]	; 3: 139 70 10
x37046:	mov [si], ax	; 2: 137 4

realloc$50:	; SetReturnValue oldMemoryPtr
x37048:	mov bx, [bp + 6]	; 3: 139 94 6

realloc$51:	; Return oldMemoryPtr
x37051:	mov ax, [bp]	; 3: 139 70 0
x37054:	mov di, [bp + 4]	; 3: 139 126 4
x37057:	mov bp, [bp + 2]	; 3: 139 110 2
x37060:	jmp ax	; 2: 255 224

realloc$52:	; Assign lastAddress 65528
x37062:	mov word [bp + 14], 65528	; 5: 199 70 14 248 255

realloc$53:	; Assign currBlockPtr g_firstBlockPtr
x37067:	mov ax, [g_firstBlockPtr]	; 3: 161 193 116
x37070:	mov [bp + 16], ax	; 3: 137 70 16

realloc$54:	; Equal 68 currBlockPtr 0
x37073:	cmp word [bp + 16], 0	; 4: 131 126 16 0
x37077:	je realloc$68	; 2: 116 66

realloc$55:	; NotEqual 63 currBlockPtr oldBlockPtr
x37079:	mov ax, [bp + 12]	; 3: 139 70 12
x37082:	cmp [bp + 16], ax	; 3: 57 70 16
x37085:	jne realloc$63	; 2: 117 41

realloc$56:	; IntegralToIntegral £temporary121 currBlockPtr
x37087:	mov ax, [bp + 16]	; 3: 139 70 16

realloc$57:	; BinarySubtract availableSize lastAddress £temporary121
x37090:	mov bx, [bp + 14]	; 3: 139 94 14
x37093:	sub bx, ax	; 2: 41 195
x37095:	mov [bp + 18], bx	; 3: 137 94 18

realloc$58:	; UnsignedLessThan 68 availableSize newBlockSize
x37098:	mov ax, [bp + 10]	; 3: 139 70 10
x37101:	cmp [bp + 18], ax	; 3: 57 70 18
x37104:	jb realloc$68	; 2: 114 39

realloc$59:	; Deref £temporary124 -> oldBlockPtr oldBlockPtr 0
x37106:	mov si, [bp + 12]	; 3: 139 118 12

realloc$60:	; Assign £temporary124 -> oldBlockPtr newBlockSize
x37109:	mov ax, [bp + 10]	; 3: 139 70 10
x37112:	mov [si], ax	; 2: 137 4

realloc$61:	; SetReturnValue oldMemoryPtr
x37114:	mov bx, [bp + 6]	; 3: 139 94 6

realloc$62:	; Return oldMemoryPtr
x37117:	mov ax, [bp]	; 3: 139 70 0
x37120:	mov di, [bp + 4]	; 3: 139 126 4
x37123:	mov bp, [bp + 2]	; 3: 139 110 2
x37126:	jmp ax	; 2: 255 224

realloc$63:	; IntegralToIntegral £temporary125 currBlockPtr
x37128:	mov ax, [bp + 16]	; 3: 139 70 16

realloc$64:	; Assign lastAddress £temporary125
x37131:	mov [bp + 14], ax	; 3: 137 70 14

realloc$65:	; Deref £temporary126 -> currBlockPtr currBlockPtr 2
x37134:	mov si, [bp + 16]	; 3: 139 118 16

realloc$66:	; Assign currBlockPtr £temporary126 -> currBlockPtr
x37137:	mov ax, [si + 2]	; 3: 139 68 2
x37140:	mov [bp + 16], ax	; 3: 137 70 16

realloc$67:	; Goto 54
x37143:	jmp realloc$54	; 2: 235 184

realloc$68:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

realloc$69:	; Parameter 14 newMemorySize 6
x37145:	mov ax, [bp + 8]	; 3: 139 70 8
x37148:	mov [bp + 20], ax	; 3: 137 70 20

realloc$70:	; Call 14 malloc 0
x37151:	mov word [bp + 14], realloc$71	; 5: 199 70 14 45 145
x37156:	mov [bp + 16], bp	; 3: 137 110 16
x37159:	add bp, 14	; 3: 131 197 14
x37162:	jmp malloc	; 3: 233 6 226

realloc$71:	; PostCall 14

realloc$72:	; GetReturnValue £temporary127

realloc$73:	; Assign newMemoryPtr £temporary127
x37165:	mov [bp + 14], bx	; 3: 137 94 14

realloc$74:	; Equal 87 newMemoryPtr 0
x37168:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x37172:	je realloc$87	; 2: 116 66

realloc$75:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

realloc$76:	; Parameter 16 newMemoryPtr 6
x37174:	mov ax, [bp + 14]	; 3: 139 70 14
x37177:	mov [bp + 22], ax	; 3: 137 70 22

realloc$77:	; Parameter 16 oldMemoryPtr 8
x37180:	mov ax, [bp + 6]	; 3: 139 70 6
x37183:	mov [bp + 24], ax	; 3: 137 70 24

realloc$78:	; Parameter 16 newMemorySize 10
x37186:	mov ax, [bp + 8]	; 3: 139 70 8
x37189:	mov [bp + 26], ax	; 3: 137 70 26

realloc$79:	; Call 16 memcpy 0
x37192:	mov word [bp + 16], realloc$80	; 5: 199 70 16 86 145
x37197:	mov [bp + 18], bp	; 3: 137 110 18
x37200:	add bp, 16	; 3: 131 197 16
x37203:	jmp memcpy	; 3: 233 77 1

realloc$80:	; PostCall 16

realloc$81:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

realloc$82:	; Parameter 16 oldMemoryPtr 6
x37206:	mov ax, [bp + 6]	; 3: 139 70 6
x37209:	mov [bp + 22], ax	; 3: 137 70 22

realloc$83:	; Call 16 free 0
x37212:	mov word [bp + 16], realloc$84	; 5: 199 70 16 106 145
x37217:	mov [bp + 18], bp	; 3: 137 110 18
x37220:	add bp, 16	; 3: 131 197 16
x37223:	jmp free	; 3: 233 213 227

realloc$84:	; PostCall 16

realloc$85:	; SetReturnValue newMemoryPtr
x37226:	mov bx, [bp + 14]	; 3: 139 94 14

realloc$86:	; Return newMemoryPtr
x37229:	mov ax, [bp]	; 3: 139 70 0
x37232:	mov di, [bp + 4]	; 3: 139 126 4
x37235:	mov bp, [bp + 2]	; 3: 139 110 2
x37238:	jmp ax	; 2: 255 224

realloc$87:	; SetReturnValue 0
x37240:	mov bx, 0	; 3: 187 0 0

realloc$88:	; Return 0
x37243:	mov ax, [bp]	; 3: 139 70 0
x37246:	mov di, [bp + 4]	; 3: 139 126 4
x37249:	mov bp, [bp + 2]	; 3: 139 110 2
x37252:	jmp ax	; 2: 255 224

realloc$89:	; FunctionEnd realloc

@279$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x37254:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@280$string_newMemorySize203E3D200#:
x37300:	db "newMemorySize >= 0", 0	; 19: 110 101 119 77 101 109 111 114 121 83 105 122 101 32 62 61 32 48 0

@281$string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec#:
x37319:	db "C:\Users\Stefa\Documents\vagrant\homestead\code\code\Malloc.c", 0	; 62: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 77 97 108 108 111 99 46 99 0

@295$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x37381:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@296$string_2820oldMemoryPtr20213D20NULL2029207C7C202820newMemorySize203E2002029#:
x37427:	db "( oldMemoryPtr != NULL ) || ( newMemorySize > 0 )", 0	; 50: 40 32 111 108 100 77 101 109 111 114 121 80 116 114 32 33 61 32 78 85 76 76 32 41 32 124 124 32 40 32 110 101 119 77 101 109 111 114 121 83 105 122 101 32 62 32 48 32 41 0

@297$string_C3A5CUsers5CStefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec#:
x37477:	db "C:\Users\Stefa\Documents\vagrant\homestead\code\code\Malloc.c", 0	; 62: 67 58 92 85 115 101 114 115 92 83 116 101 102 97 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 77 97 108 108 111 99 46 99 0

memcpy:	; IntegralToIntegral £temporary3921 target
x37539:	mov ax, [bp + 6]	; 3: 139 70 6

memcpy$1:	; Assign charTarget £temporary3921
x37542:	mov [bp + 12], ax	; 3: 137 70 12

memcpy$2:	; IntegralToIntegral £temporary3922 source
x37545:	mov ax, [bp + 8]	; 3: 139 70 8

memcpy$3:	; Assign charSource £temporary3922
x37548:	mov [bp + 14], ax	; 3: 137 70 14

memcpy$4:	; Assign index 0
x37551:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

memcpy$5:	; SignedGreaterThanEqual 13 index size
x37556:	mov ax, [bp + 10]	; 3: 139 70 10
x37559:	cmp [bp + 16], ax	; 3: 57 70 16
x37562:	jge memcpy$13	; 2: 125 21

memcpy$6:	; BinaryAdd £temporary3926 charTarget index
x37564:	mov si, [bp + 12]	; 3: 139 118 12
x37567:	add si, [bp + 16]	; 3: 3 118 16

memcpy$7:	; Deref £temporary3925 -> £temporary3926 £temporary3926 0

memcpy$8:	; BinaryAdd £temporary3928 charSource index
x37570:	mov di, [bp + 14]	; 3: 139 126 14
x37573:	add di, [bp + 16]	; 3: 3 126 16

memcpy$9:	; Deref £temporary3927 -> £temporary3928 £temporary3928 0

memcpy$10:	; Assign £temporary3925 -> £temporary3926 £temporary3927 -> £temporary3928
x37576:	mov al, [di]	; 2: 138 5
x37578:	mov [si], al	; 2: 136 4

memcpy$11:	; Increment index
x37580:	inc word [bp + 16]	; 3: 255 70 16

memcpy$12:	; Goto 5
x37583:	jmp memcpy$5	; 2: 235 227

memcpy$13:	; IntegralToIntegral £temporary3929 target
x37585:	mov bx, [bp + 6]	; 3: 139 94 6

memcpy$14:	; SetReturnValue £temporary3929

memcpy$15:	; Return £temporary3929
x37588:	mov ax, [bp]	; 3: 139 70 0
x37591:	mov di, [bp + 4]	; 3: 139 126 4
x37594:	mov bp, [bp + 2]	; 3: 139 110 2
x37597:	jmp ax	; 2: 255 224

memcpy$16:	; FunctionEnd memcpy

print_test:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_test$1:	; Parameter 6 string_3C258i3E203C252B8i3E203C25208i3E203C252D8i3E203C252B2D8i3E203C252D2B8i3E203C25202D8i3E203C252D208i3E0A# 6
x37599:	mov word [bp + 12], @9004$string_3C258i3E203C252B8i3E203C25208i3E203C252D8i3E203C252B2D8i3E203C252D2B8i3E203C25202D8i3E203C252D208i3E0A#	; 5: 199 70 12 202 148

print_test$2:	; Parameter 6 123 8
x37604:	mov word [bp + 14], 123	; 5: 199 70 14 123 0

print_test$3:	; Parameter 6 123 10
x37609:	mov word [bp + 16], 123	; 5: 199 70 16 123 0

print_test$4:	; Parameter 6 123 12
x37614:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

print_test$5:	; Parameter 6 123 14
x37619:	mov word [bp + 20], 123	; 5: 199 70 20 123 0

print_test$6:	; Parameter 6 123 16
x37624:	mov word [bp + 22], 123	; 5: 199 70 22 123 0

print_test$7:	; Parameter 6 123 18
x37629:	mov word [bp + 24], 123	; 5: 199 70 24 123 0

print_test$8:	; Parameter 6 123 20
x37634:	mov word [bp + 26], 123	; 5: 199 70 26 123 0

print_test$9:	; Parameter 6 123 22
x37639:	mov word [bp + 28], 123	; 5: 199 70 28 123 0

print_test$10:	; Call 6 printf 0
x37644:	mov word [bp + 6], print_test$11	; 5: 199 70 6 31 147
x37649:	mov [bp + 8], bp	; 3: 137 110 8
x37652:	add bp, 6	; 3: 131 197 6
x37655:	mov di, bp	; 2: 137 239
x37657:	add di, 16	; 3: 131 199 16
x37660:	jmp printf	; 3: 233 229 121

print_test$11:	; PostCall 6

print_test$12:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_test$13:	; Parameter 6 string_3C258i3E203C252B8i3E203C25208i3E203C252D8i3E203C252B2D8i3E203C252D2B8i3E203C25202D8i3E203C252D208i3E0A# 6
x37663:	mov word [bp + 12], @9022$string_3C258i3E203C252B8i3E203C25208i3E203C252D8i3E203C252B2D8i3E203C252D2B8i3E203C25202D8i3E203C252D208i3E0A#	; 5: 199 70 12 6 149

print_test$14:	; Parameter 6 -123 8
x37668:	mov word [bp + 14], -123	; 5: 199 70 14 133 255

print_test$15:	; Parameter 6 -123 10
x37673:	mov word [bp + 16], -123	; 5: 199 70 16 133 255

print_test$16:	; Parameter 6 -123 12
x37678:	mov word [bp + 18], -123	; 5: 199 70 18 133 255

print_test$17:	; Parameter 6 -123 14
x37683:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

print_test$18:	; Parameter 6 -123 16
x37688:	mov word [bp + 22], -123	; 5: 199 70 22 133 255

print_test$19:	; Parameter 6 -123 18
x37693:	mov word [bp + 24], -123	; 5: 199 70 24 133 255

print_test$20:	; Parameter 6 -123 20
x37698:	mov word [bp + 26], -123	; 5: 199 70 26 133 255

print_test$21:	; Parameter 6 -123 22
x37703:	mov word [bp + 28], -123	; 5: 199 70 28 133 255

print_test$22:	; Call 6 printf 0
x37708:	mov word [bp + 6], print_test$23	; 5: 199 70 6 95 147
x37713:	mov [bp + 8], bp	; 3: 137 110 8
x37716:	add bp, 6	; 3: 131 197 6
x37719:	mov di, bp	; 2: 137 239
x37721:	add di, 16	; 3: 131 199 16
x37724:	jmp printf	; 3: 233 165 121

print_test$23:	; PostCall 6

print_test$24:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_test$25:	; Parameter 6 string_3C2508i3E203C252B08i3E203C252008i3E203C250208i3E0A# 6
x37727:	mov word [bp + 12], @9040$string_3C2508i3E203C252B08i3E203C252008i3E203C250208i3E0A#	; 5: 199 70 12 66 149

print_test$26:	; Parameter 6 123 8
x37732:	mov word [bp + 14], 123	; 5: 199 70 14 123 0

print_test$27:	; Parameter 6 123 10
x37737:	mov word [bp + 16], 123	; 5: 199 70 16 123 0

print_test$28:	; Parameter 6 123 12
x37742:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

print_test$29:	; Parameter 6 123 14
x37747:	mov word [bp + 20], 123	; 5: 199 70 20 123 0

print_test$30:	; Call 6 printf 0
x37752:	mov word [bp + 6], print_test$31	; 5: 199 70 6 139 147
x37757:	mov [bp + 8], bp	; 3: 137 110 8
x37760:	add bp, 6	; 3: 131 197 6
x37763:	mov di, bp	; 2: 137 239
x37765:	add di, 8	; 3: 131 199 8
x37768:	jmp printf	; 3: 233 121 121

print_test$31:	; PostCall 6

print_test$32:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_test$33:	; Parameter 6 string_3C2508i3E203C252B08i3E203C252008i3E203C250208i3E0A# 6
x37771:	mov word [bp + 12], @9050$string_3C2508i3E203C252B08i3E203C252008i3E203C250208i3E0A#	; 5: 199 70 12 98 149

print_test$34:	; Parameter 6 -123 8
x37776:	mov word [bp + 14], -123	; 5: 199 70 14 133 255

print_test$35:	; Parameter 6 -123 10
x37781:	mov word [bp + 16], -123	; 5: 199 70 16 133 255

print_test$36:	; Parameter 6 -123 12
x37786:	mov word [bp + 18], -123	; 5: 199 70 18 133 255

print_test$37:	; Parameter 6 -123 14
x37791:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

print_test$38:	; Call 6 printf 0
x37796:	mov word [bp + 6], print_test$39	; 5: 199 70 6 183 147
x37801:	mov [bp + 8], bp	; 3: 137 110 8
x37804:	add bp, 6	; 3: 131 197 6
x37807:	mov di, bp	; 2: 137 239
x37809:	add di, 8	; 3: 131 199 8
x37812:	jmp printf	; 3: 233 77 121

print_test$39:	; PostCall 6

print_test$40:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_test$41:	; Parameter 6 string_3C25122E3f3E203C252B122E3f3E203C2520122E3f3E203C252D122E3f3E203C252B2D122E3f3E203C252D2B122E3f3E203C25202D122E3f3E203C252D20122E3f3E0A# 6
x37815:	mov word [bp + 12], @9060$string_3C25122E3f3E203C252B122E3f3E203C2520122E3f3E203C252D122E3f3E203C252B2D122E3f3E203C252D2B122E3f3E203C25202D122E3f3E203C252D20122E3f3E0A#	; 5: 199 70 12 130 149

print_test$42:	; PushFloat 123.456
x37820:	fld qword [@9061$float8$123.456#]	; 4: 221 6 214 149

print_test$43:	; Parameter 6 123.456 8
x37824:	fstp qword [bp + 14]	; 3: 221 94 14

print_test$44:	; PushFloat 123.456
x37827:	fld qword [@9062$float8$123.456#]	; 4: 221 6 222 149

print_test$45:	; Parameter 6 123.456 16
x37831:	fstp qword [bp + 22]	; 3: 221 94 22

print_test$46:	; PushFloat 123.456
x37834:	fld qword [@9063$float8$123.456#]	; 4: 221 6 230 149

print_test$47:	; Parameter 6 123.456 24
x37838:	fstp qword [bp + 30]	; 3: 221 94 30

print_test$48:	; PushFloat 123.456
x37841:	fld qword [@9064$float8$123.456#]	; 4: 221 6 238 149

print_test$49:	; Parameter 6 123.456 32
x37845:	fstp qword [bp + 38]	; 3: 221 94 38

print_test$50:	; PushFloat 123.456
x37848:	fld qword [@9065$float8$123.456#]	; 4: 221 6 246 149

print_test$51:	; Parameter 6 123.456 40
x37852:	fstp qword [bp + 46]	; 3: 221 94 46

print_test$52:	; PushFloat 123.456
x37855:	fld qword [@9066$float8$123.456#]	; 4: 221 6 254 149

print_test$53:	; Parameter 6 123.456 48
x37859:	fstp qword [bp + 54]	; 3: 221 94 54

print_test$54:	; PushFloat 123.456
x37862:	fld qword [@9067$float8$123.456#]	; 4: 221 6 6 150

print_test$55:	; Parameter 6 123.456 56
x37866:	fstp qword [bp + 62]	; 3: 221 94 62

print_test$56:	; PushFloat 123.456
x37869:	fld qword [@9068$float8$123.456#]	; 4: 221 6 14 150

print_test$57:	; Parameter 6 123.456 64
x37873:	fstp qword [bp + 70]	; 3: 221 94 70

print_test$58:	; Call 6 printf 0
x37876:	mov word [bp + 6], print_test$59	; 5: 199 70 6 7 148
x37881:	mov [bp + 8], bp	; 3: 137 110 8
x37884:	add bp, 6	; 3: 131 197 6
x37887:	mov di, bp	; 2: 137 239
x37889:	add di, 64	; 3: 131 199 64
x37892:	jmp printf	; 3: 233 253 120

print_test$59:	; PostCall 6

print_test$60:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_test$61:	; Parameter 6 string_3C25122E3f3E203C252B122E3f3E203C2520122E3f3E203C252D122E3f3E203C252B2D122E3f3E203C252D2B122E3f3E203C25202D122E3f3E203C252D20122E3f3E0A# 6
x37895:	mov word [bp + 12], @9078$string_3C25122E3f3E203C252B122E3f3E203C2520122E3f3E203C252D122E3f3E203C252B2D122E3f3E203C252D2B122E3f3E203C25202D122E3f3E203C252D20122E3f3E0A#	; 5: 199 70 12 22 150

print_test$62:	; PushFloat -123.456
x37900:	fld qword [@9079$float8$minus123.456#]	; 4: 221 6 106 150

print_test$63:	; Parameter 6 -123.456 8
x37904:	fstp qword [bp + 14]	; 3: 221 94 14

print_test$64:	; PushFloat -123.456
x37907:	fld qword [@9080$float8$minus123.456#]	; 4: 221 6 114 150

print_test$65:	; Parameter 6 -123.456 16
x37911:	fstp qword [bp + 22]	; 3: 221 94 22

print_test$66:	; PushFloat -123.456
x37914:	fld qword [@9081$float8$minus123.456#]	; 4: 221 6 122 150

print_test$67:	; Parameter 6 -123.456 24
x37918:	fstp qword [bp + 30]	; 3: 221 94 30

print_test$68:	; PushFloat -123.456
x37921:	fld qword [@9082$float8$minus123.456#]	; 4: 221 6 130 150

print_test$69:	; Parameter 6 -123.456 32
x37925:	fstp qword [bp + 38]	; 3: 221 94 38

print_test$70:	; PushFloat -123.456
x37928:	fld qword [@9083$float8$minus123.456#]	; 4: 221 6 138 150

print_test$71:	; Parameter 6 -123.456 40
x37932:	fstp qword [bp + 46]	; 3: 221 94 46

print_test$72:	; PushFloat -123.456
x37935:	fld qword [@9084$float8$minus123.456#]	; 4: 221 6 146 150

print_test$73:	; Parameter 6 -123.456 48
x37939:	fstp qword [bp + 54]	; 3: 221 94 54

print_test$74:	; PushFloat -123.456
x37942:	fld qword [@9085$float8$minus123.456#]	; 4: 221 6 154 150

print_test$75:	; Parameter 6 -123.456 56
x37946:	fstp qword [bp + 62]	; 3: 221 94 62

print_test$76:	; PushFloat -123.456
x37949:	fld qword [@9086$float8$minus123.456#]	; 4: 221 6 162 150

print_test$77:	; Parameter 6 -123.456 64
x37953:	fstp qword [bp + 70]	; 3: 221 94 70

print_test$78:	; Call 6 printf 0
x37956:	mov word [bp + 6], print_test$79	; 5: 199 70 6 87 148
x37961:	mov [bp + 8], bp	; 3: 137 110 8
x37964:	add bp, 6	; 3: 131 197 6
x37967:	mov di, bp	; 2: 137 239
x37969:	add di, 64	; 3: 131 199 64
x37972:	jmp printf	; 3: 233 173 120

print_test$79:	; PostCall 6

print_test$80:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_test$81:	; Parameter 6 string_3C250122E3f3E203C252B0122E3f3E203C25200122E3f3E203C25020122E3f3E0A# 6
x37975:	mov word [bp + 12], @9096$string_3C250122E3f3E203C252B0122E3f3E203C25200122E3f3E203C25020122E3f3E0A#	; 5: 199 70 12 170 150

print_test$82:	; PushFloat 123.456
x37980:	fld qword [@9097$float8$123.456#]	; 4: 221 6 214 150

print_test$83:	; Parameter 6 123.456 8
x37984:	fstp qword [bp + 14]	; 3: 221 94 14

print_test$84:	; PushFloat 123.456
x37987:	fld qword [@9098$float8$123.456#]	; 4: 221 6 222 150

print_test$85:	; Parameter 6 123.456 16
x37991:	fstp qword [bp + 22]	; 3: 221 94 22

print_test$86:	; PushFloat 123.456
x37994:	fld qword [@9099$float8$123.456#]	; 4: 221 6 230 150

print_test$87:	; Parameter 6 123.456 24
x37998:	fstp qword [bp + 30]	; 3: 221 94 30

print_test$88:	; PushFloat 123.456
x38001:	fld qword [@9100$float8$123.456#]	; 4: 221 6 238 150

print_test$89:	; Parameter 6 123.456 32
x38005:	fstp qword [bp + 38]	; 3: 221 94 38

print_test$90:	; Call 6 printf 0
x38008:	mov word [bp + 6], print_test$91	; 5: 199 70 6 139 148
x38013:	mov [bp + 8], bp	; 3: 137 110 8
x38016:	add bp, 6	; 3: 131 197 6
x38019:	mov di, bp	; 2: 137 239
x38021:	add di, 32	; 3: 131 199 32
x38024:	jmp printf	; 3: 233 121 120

print_test$91:	; PostCall 6

print_test$92:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_test$93:	; Parameter 6 string_3C250122E3f3E203C252B0122E3f3E203C25200122E3f3E203C25020122E3f3E0A# 6
x38027:	mov word [bp + 12], @9106$string_3C250122E3f3E203C252B0122E3f3E203C25200122E3f3E203C25020122E3f3E0A#	; 5: 199 70 12 246 150

print_test$94:	; PushFloat -123.456
x38032:	fld qword [@9107$float8$minus123.456#]	; 4: 221 6 34 151

print_test$95:	; Parameter 6 -123.456 8
x38036:	fstp qword [bp + 14]	; 3: 221 94 14

print_test$96:	; PushFloat -123.456
x38039:	fld qword [@9108$float8$minus123.456#]	; 4: 221 6 42 151

print_test$97:	; Parameter 6 -123.456 16
x38043:	fstp qword [bp + 22]	; 3: 221 94 22

print_test$98:	; PushFloat -123.456
x38046:	fld qword [@9109$float8$minus123.456#]	; 4: 221 6 50 151

print_test$99:	; Parameter 6 -123.456 24
x38050:	fstp qword [bp + 30]	; 3: 221 94 30

print_test$100:	; PushFloat -123.456
x38053:	fld qword [@9110$float8$minus123.456#]	; 4: 221 6 58 151

print_test$101:	; Parameter 6 -123.456 32
x38057:	fstp qword [bp + 38]	; 3: 221 94 38

print_test$102:	; Call 6 printf 0
x38060:	mov word [bp + 6], print_test$103	; 5: 199 70 6 191 148
x38065:	mov [bp + 8], bp	; 3: 137 110 8
x38068:	add bp, 6	; 3: 131 197 6
x38071:	mov di, bp	; 2: 137 239
x38073:	add di, 32	; 3: 131 199 32
x38076:	jmp printf	; 3: 233 69 120

print_test$103:	; PostCall 6

print_test$104:	; Return 0
x38079:	mov ax, [bp]	; 3: 139 70 0
x38082:	mov di, [bp + 4]	; 3: 139 126 4
x38085:	mov bp, [bp + 2]	; 3: 139 110 2
x38088:	jmp ax	; 2: 255 224

print_test$105:	; FunctionEnd print_test

@9004$string_3C258i3E203C252B8i3E203C25208i3E203C252D8i3E203C252B2D8i3E203C252D2B8i3E203C25202D8i3E203C252D208i3E0A#:
x38090:	db "<%8i> <%+8i> <% 8i> <%-8i> <%+-8i> <%-+8i> <% -8i> <%- 8i>", 10, 0	; 60: 60 37 56 105 62 32 60 37 43 56 105 62 32 60 37 32 56 105 62 32 60 37 45 56 105 62 32 60 37 43 45 56 105 62 32 60 37 45 43 56 105 62 32 60 37 32 45 56 105 62 32 60 37 45 32 56 105 62 10 0

@9022$string_3C258i3E203C252B8i3E203C25208i3E203C252D8i3E203C252B2D8i3E203C252D2B8i3E203C25202D8i3E203C252D208i3E0A#:
x38150:	db "<%8i> <%+8i> <% 8i> <%-8i> <%+-8i> <%-+8i> <% -8i> <%- 8i>", 10, 0	; 60: 60 37 56 105 62 32 60 37 43 56 105 62 32 60 37 32 56 105 62 32 60 37 45 56 105 62 32 60 37 43 45 56 105 62 32 60 37 45 43 56 105 62 32 60 37 32 45 56 105 62 32 60 37 45 32 56 105 62 10 0

@9040$string_3C2508i3E203C252B08i3E203C252008i3E203C250208i3E0A#:
x38210:	db "<%08i> <%+08i> <% 08i> <%0 8i>", 10, 0	; 32: 60 37 48 56 105 62 32 60 37 43 48 56 105 62 32 60 37 32 48 56 105 62 32 60 37 48 32 56 105 62 10 0

@9050$string_3C2508i3E203C252B08i3E203C252008i3E203C250208i3E0A#:
x38242:	db "<%08i> <%+08i> <% 08i> <%0 8i>", 10, 0	; 32: 60 37 48 56 105 62 32 60 37 43 48 56 105 62 32 60 37 32 48 56 105 62 32 60 37 48 32 56 105 62 10 0

@9060$string_3C25122E3f3E203C252B122E3f3E203C2520122E3f3E203C252D122E3f3E203C252B2D122E3f3E203C252D2B122E3f3E203C25202D122E3f3E203C252D20122E3f3E0A#:
x38274:	db "<%12.3f> <%+12.3f> <% 12.3f> <%-12.3f> <%+-12.3f> <%-+12.3f> <% -12.3f> <%- 12.3f>", 10, 0	; 84: 60 37 49 50 46 51 102 62 32 60 37 43 49 50 46 51 102 62 32 60 37 32 49 50 46 51 102 62 32 60 37 45 49 50 46 51 102 62 32 60 37 43 45 49 50 46 51 102 62 32 60 37 45 43 49 50 46 51 102 62 32 60 37 32 45 49 50 46 51 102 62 32 60 37 45 32 49 50 46 51 102 62 10 0

@9061$float8$123.456#:
x38358:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@9062$float8$123.456#:
x38366:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@9063$float8$123.456#:
x38374:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@9064$float8$123.456#:
x38382:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@9065$float8$123.456#:
x38390:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@9066$float8$123.456#:
x38398:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@9067$float8$123.456#:
x38406:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@9068$float8$123.456#:
x38414:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@9078$string_3C25122E3f3E203C252B122E3f3E203C2520122E3f3E203C252D122E3f3E203C252B2D122E3f3E203C252D2B122E3f3E203C25202D122E3f3E203C252D20122E3f3E0A#:
x38422:	db "<%12.3f> <%+12.3f> <% 12.3f> <%-12.3f> <%+-12.3f> <%-+12.3f> <% -12.3f> <%- 12.3f>", 10, 0	; 84: 60 37 49 50 46 51 102 62 32 60 37 43 49 50 46 51 102 62 32 60 37 32 49 50 46 51 102 62 32 60 37 45 49 50 46 51 102 62 32 60 37 43 45 49 50 46 51 102 62 32 60 37 45 43 49 50 46 51 102 62 32 60 37 32 45 49 50 46 51 102 62 32 60 37 45 32 49 50 46 51 102 62 10 0

@9079$float8$minus123.456#:
x38506:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@9080$float8$minus123.456#:
x38514:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@9081$float8$minus123.456#:
x38522:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@9082$float8$minus123.456#:
x38530:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@9083$float8$minus123.456#:
x38538:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@9084$float8$minus123.456#:
x38546:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@9085$float8$minus123.456#:
x38554:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@9086$float8$minus123.456#:
x38562:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@9096$string_3C250122E3f3E203C252B0122E3f3E203C25200122E3f3E203C25020122E3f3E0A#:
x38570:	db "<%012.3f> <%+012.3f> <% 012.3f> <%0 12.3f>", 10, 0	; 44: 60 37 48 49 50 46 51 102 62 32 60 37 43 48 49 50 46 51 102 62 32 60 37 32 48 49 50 46 51 102 62 32 60 37 48 32 49 50 46 51 102 62 10 0

@9097$float8$123.456#:
x38614:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@9098$float8$123.456#:
x38622:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@9099$float8$123.456#:
x38630:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@9100$float8$123.456#:
x38638:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@9106$string_3C250122E3f3E203C252B0122E3f3E203C25200122E3f3E203C25020122E3f3E0A#:
x38646:	db "<%012.3f> <%+012.3f> <% 012.3f> <%0 12.3f>", 10, 0	; 44: 60 37 48 49 50 46 51 102 62 32 60 37 43 48 49 50 46 51 102 62 32 60 37 32 48 49 50 46 51 102 62 32 60 37 48 32 49 50 46 51 102 62 10 0

@9107$float8$minus123.456#:
x38690:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@9108$float8$minus123.456#:
x38698:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@9109$float8$minus123.456#:
x38706:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@9110$float8$minus123.456#:
x38714:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

limits_test:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$1:	; Parameter 6 string_CHAR_BIT203D2025i0A# 6
x38722:	mov word [bp + 12], @9494$string_CHAR_BIT203D2025i0A#	; 5: 199 70 12 15 153

limits_test$2:	; Parameter 6 8 8
x38727:	mov word [bp + 14], 8	; 5: 199 70 14 8 0

limits_test$3:	; Call 6 printf 0
x38732:	mov word [bp + 6], limits_test$4	; 5: 199 70 6 95 151
x38737:	mov [bp + 8], bp	; 3: 137 110 8
x38740:	add bp, 6	; 3: 131 197 6
x38743:	mov di, bp	; 2: 137 239
x38745:	add di, 2	; 3: 131 199 2
x38748:	jmp printf	; 3: 233 165 117

limits_test$4:	; PostCall 6

limits_test$5:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$6:	; Parameter 6 string_CHAR_MIN203D2025i0A0A# 6
x38751:	mov word [bp + 12], @9498$string_CHAR_MIN203D2025i0A0A#	; 5: 199 70 12 30 153

limits_test$7:	; Parameter 6 -128 8
x38756:	mov word [bp + 14], -128	; 5: 199 70 14 128 255

limits_test$8:	; Call 6 printf 0
x38761:	mov word [bp + 6], limits_test$9	; 5: 199 70 6 124 151
x38766:	mov [bp + 8], bp	; 3: 137 110 8
x38769:	add bp, 6	; 3: 131 197 6
x38772:	mov di, bp	; 2: 137 239
x38774:	add di, 2	; 3: 131 199 2
x38777:	jmp printf	; 3: 233 136 117

limits_test$9:	; PostCall 6

limits_test$10:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$11:	; Parameter 6 string_CHAR_MAX203D2025i0A# 6
x38780:	mov word [bp + 12], @9503$string_CHAR_MAX203D2025i0A#	; 5: 199 70 12 46 153

limits_test$12:	; Parameter 6 127 8
x38785:	mov word [bp + 14], 127	; 5: 199 70 14 127 0

limits_test$13:	; Call 6 printf 0
x38790:	mov word [bp + 6], limits_test$14	; 5: 199 70 6 153 151
x38795:	mov [bp + 8], bp	; 3: 137 110 8
x38798:	add bp, 6	; 3: 131 197 6
x38801:	mov di, bp	; 2: 137 239
x38803:	add di, 2	; 3: 131 199 2
x38806:	jmp printf	; 3: 233 107 117

limits_test$14:	; PostCall 6

limits_test$15:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$16:	; Parameter 6 string_UCHAR_MAX203D2025u0A0A# 6
x38809:	mov word [bp + 12], @9508$string_UCHAR_MAX203D2025u0A0A#	; 5: 199 70 12 61 153

limits_test$17:	; Parameter 6 255 8
x38814:	mov word [bp + 14], 255	; 5: 199 70 14 255 0

limits_test$18:	; Call 6 printf 0
x38819:	mov word [bp + 6], limits_test$19	; 5: 199 70 6 182 151
x38824:	mov [bp + 8], bp	; 3: 137 110 8
x38827:	add bp, 6	; 3: 131 197 6
x38830:	mov di, bp	; 2: 137 239
x38832:	add di, 2	; 3: 131 199 2
x38835:	jmp printf	; 3: 233 78 117

limits_test$19:	; PostCall 6

limits_test$20:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$21:	; Parameter 6 string_SHRT_MIN203D2025i0A# 6
x38838:	mov word [bp + 12], @9513$string_SHRT_MIN203D2025i0A#	; 5: 199 70 12 78 153

limits_test$22:	; Parameter 6 -128 8
x38843:	mov word [bp + 14], -128	; 5: 199 70 14 128 255

limits_test$23:	; Call 6 printf 0
x38848:	mov word [bp + 6], limits_test$24	; 5: 199 70 6 211 151
x38853:	mov [bp + 8], bp	; 3: 137 110 8
x38856:	add bp, 6	; 3: 131 197 6
x38859:	mov di, bp	; 2: 137 239
x38861:	add di, 2	; 3: 131 199 2
x38864:	jmp printf	; 3: 233 49 117

limits_test$24:	; PostCall 6

limits_test$25:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$26:	; Parameter 6 string_SHRT_MAX203D2025i0A# 6
x38867:	mov word [bp + 12], @9518$string_SHRT_MAX203D2025i0A#	; 5: 199 70 12 93 153

limits_test$27:	; Parameter 6 127 8
x38872:	mov word [bp + 14], 127	; 5: 199 70 14 127 0

limits_test$28:	; Call 6 printf 0
x38877:	mov word [bp + 6], limits_test$29	; 5: 199 70 6 240 151
x38882:	mov [bp + 8], bp	; 3: 137 110 8
x38885:	add bp, 6	; 3: 131 197 6
x38888:	mov di, bp	; 2: 137 239
x38890:	add di, 2	; 3: 131 199 2
x38893:	jmp printf	; 3: 233 20 117

limits_test$29:	; PostCall 6

limits_test$30:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$31:	; Parameter 6 string_USHRT_MAX203D2025u0A0A# 6
x38896:	mov word [bp + 12], @9523$string_USHRT_MAX203D2025u0A0A#	; 5: 199 70 12 108 153

limits_test$32:	; Parameter 6 255 8
x38901:	mov word [bp + 14], 255	; 5: 199 70 14 255 0

limits_test$33:	; Call 6 printf 0
x38906:	mov word [bp + 6], limits_test$34	; 5: 199 70 6 13 152
x38911:	mov [bp + 8], bp	; 3: 137 110 8
x38914:	add bp, 6	; 3: 131 197 6
x38917:	mov di, bp	; 2: 137 239
x38919:	add di, 2	; 3: 131 199 2
x38922:	jmp printf	; 3: 233 247 116

limits_test$34:	; PostCall 6

limits_test$35:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$36:	; Parameter 6 string_INT_MIN203D2025i0A# 6
x38925:	mov word [bp + 12], @9528$string_INT_MIN203D2025i0A#	; 5: 199 70 12 125 153

limits_test$37:	; Parameter 6 -32768 8
x38930:	mov word [bp + 14], -32768	; 5: 199 70 14 0 128

limits_test$38:	; Call 6 printf 0
x38935:	mov word [bp + 6], limits_test$39	; 5: 199 70 6 42 152
x38940:	mov [bp + 8], bp	; 3: 137 110 8
x38943:	add bp, 6	; 3: 131 197 6
x38946:	mov di, bp	; 2: 137 239
x38948:	add di, 2	; 3: 131 199 2
x38951:	jmp printf	; 3: 233 218 116

limits_test$39:	; PostCall 6

limits_test$40:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$41:	; Parameter 6 string_INT_MAX203D2025i0A# 6
x38954:	mov word [bp + 12], @9532$string_INT_MAX203D2025i0A#	; 5: 199 70 12 139 153

limits_test$42:	; Parameter 6 32767 8
x38959:	mov word [bp + 14], 32767	; 5: 199 70 14 255 127

limits_test$43:	; Call 6 printf 0
x38964:	mov word [bp + 6], limits_test$44	; 5: 199 70 6 71 152
x38969:	mov [bp + 8], bp	; 3: 137 110 8
x38972:	add bp, 6	; 3: 131 197 6
x38975:	mov di, bp	; 2: 137 239
x38977:	add di, 2	; 3: 131 199 2
x38980:	jmp printf	; 3: 233 189 116

limits_test$44:	; PostCall 6

limits_test$45:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$46:	; Parameter 6 string_UINT_MAX203D2025u0A0A# 6
x38983:	mov word [bp + 12], @9536$string_UINT_MAX203D2025u0A0A#	; 5: 199 70 12 153 153

limits_test$47:	; Parameter 6 65535 8
x38988:	mov word [bp + 14], 65535	; 5: 199 70 14 255 255

limits_test$48:	; Call 6 printf 0
x38993:	mov word [bp + 6], limits_test$49	; 5: 199 70 6 100 152
x38998:	mov [bp + 8], bp	; 3: 137 110 8
x39001:	add bp, 6	; 3: 131 197 6
x39004:	mov di, bp	; 2: 137 239
x39006:	add di, 2	; 3: 131 199 2
x39009:	jmp printf	; 3: 233 160 116

limits_test$49:	; PostCall 6

limits_test$50:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$51:	; Parameter 6 string_LONG_MIN203D2025li0A# 6
x39012:	mov word [bp + 12], @9540$string_LONG_MIN203D2025li0A#	; 5: 199 70 12 169 153

limits_test$52:	; Parameter 6 -2147483648 8
x39017:	mov dword [bp + 14], -2147483648	; 8: 102 199 70 14 0 0 0 128

limits_test$53:	; Call 6 printf 0
x39025:	mov word [bp + 6], limits_test$54	; 5: 199 70 6 132 152
x39030:	mov [bp + 8], bp	; 3: 137 110 8
x39033:	add bp, 6	; 3: 131 197 6
x39036:	mov di, bp	; 2: 137 239
x39038:	add di, 4	; 3: 131 199 4
x39041:	jmp printf	; 3: 233 128 116

limits_test$54:	; PostCall 6

limits_test$55:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$56:	; Parameter 6 string_LONG_MAX203D2025li0A# 6
x39044:	mov word [bp + 12], @9544$string_LONG_MAX203D2025li0A#	; 5: 199 70 12 185 153

limits_test$57:	; Parameter 6 2147483647 8
x39049:	mov dword [bp + 14], 2147483647	; 8: 102 199 70 14 255 255 255 127

limits_test$58:	; Call 6 printf 0
x39057:	mov word [bp + 6], limits_test$59	; 5: 199 70 6 164 152
x39062:	mov [bp + 8], bp	; 3: 137 110 8
x39065:	add bp, 6	; 3: 131 197 6
x39068:	mov di, bp	; 2: 137 239
x39070:	add di, 4	; 3: 131 199 4
x39073:	jmp printf	; 3: 233 96 116

limits_test$59:	; PostCall 6

limits_test$60:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$61:	; Parameter 6 string_ULONG_MAX203D2025lu0A# 6
x39076:	mov word [bp + 12], @9548$string_ULONG_MAX203D2025lu0A#	; 5: 199 70 12 201 153

limits_test$62:	; Parameter 6 4294967295 8
x39081:	mov dword [bp + 14], -1	; 8: 102 199 70 14 255 255 255 255

limits_test$63:	; Call 6 printf 0
x39089:	mov word [bp + 6], limits_test$64	; 5: 199 70 6 196 152
x39094:	mov [bp + 8], bp	; 3: 137 110 8
x39097:	add bp, 6	; 3: 131 197 6
x39100:	mov di, bp	; 2: 137 239
x39102:	add di, 4	; 3: 131 199 4
x39105:	jmp printf	; 3: 233 64 116

limits_test$64:	; PostCall 6

limits_test$65:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$66:	; Parameter 6 string_ULONG_MAX203D2025lx0A# 6
x39108:	mov word [bp + 12], @9552$string_ULONG_MAX203D2025lx0A#	; 5: 199 70 12 218 153

limits_test$67:	; Parameter 6 4294967295 8
x39113:	mov dword [bp + 14], -1	; 8: 102 199 70 14 255 255 255 255

limits_test$68:	; Call 6 printf 0
x39121:	mov word [bp + 6], limits_test$69	; 5: 199 70 6 228 152
x39126:	mov [bp + 8], bp	; 3: 137 110 8
x39129:	add bp, 6	; 3: 131 197 6
x39132:	mov di, bp	; 2: 137 239
x39134:	add di, 4	; 3: 131 199 4
x39137:	jmp printf	; 3: 233 32 116

limits_test$69:	; PostCall 6

limits_test$70:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$71:	; Parameter 6 string_ULONG_MAX203D2025lX0A# 6
x39140:	mov word [bp + 12], @9556$string_ULONG_MAX203D2025lX0A#	; 5: 199 70 12 235 153

limits_test$72:	; Parameter 6 4294967295 8
x39145:	mov dword [bp + 14], -1	; 8: 102 199 70 14 255 255 255 255

limits_test$73:	; Call 6 printf 0
x39153:	mov word [bp + 6], limits_test$74	; 5: 199 70 6 4 153
x39158:	mov [bp + 8], bp	; 3: 137 110 8
x39161:	add bp, 6	; 3: 131 197 6
x39164:	mov di, bp	; 2: 137 239
x39166:	add di, 4	; 3: 131 199 4
x39169:	jmp printf	; 3: 233 0 116

limits_test$74:	; PostCall 6

limits_test$75:	; Return 0
x39172:	mov ax, [bp]	; 3: 139 70 0
x39175:	mov di, [bp + 4]	; 3: 139 126 4
x39178:	mov bp, [bp + 2]	; 3: 139 110 2
x39181:	jmp ax	; 2: 255 224

limits_test$76:	; FunctionEnd limits_test

@9494$string_CHAR_BIT203D2025i0A#:
x39183:	db "CHAR_BIT = %i", 10, 0	; 15: 67 72 65 82 95 66 73 84 32 61 32 37 105 10 0

@9498$string_CHAR_MIN203D2025i0A0A#:
x39198:	db "CHAR_MIN = %i", 10, 10, 0	; 16: 67 72 65 82 95 77 73 78 32 61 32 37 105 10 10 0

@9503$string_CHAR_MAX203D2025i0A#:
x39214:	db "CHAR_MAX = %i", 10, 0	; 15: 67 72 65 82 95 77 65 88 32 61 32 37 105 10 0

@9508$string_UCHAR_MAX203D2025u0A0A#:
x39229:	db "UCHAR_MAX = %u", 10, 10, 0	; 17: 85 67 72 65 82 95 77 65 88 32 61 32 37 117 10 10 0

@9513$string_SHRT_MIN203D2025i0A#:
x39246:	db "SHRT_MIN = %i", 10, 0	; 15: 83 72 82 84 95 77 73 78 32 61 32 37 105 10 0

@9518$string_SHRT_MAX203D2025i0A#:
x39261:	db "SHRT_MAX = %i", 10, 0	; 15: 83 72 82 84 95 77 65 88 32 61 32 37 105 10 0

@9523$string_USHRT_MAX203D2025u0A0A#:
x39276:	db "USHRT_MAX = %u", 10, 10, 0	; 17: 85 83 72 82 84 95 77 65 88 32 61 32 37 117 10 10 0

@9528$string_INT_MIN203D2025i0A#:
x39293:	db "INT_MIN = %i", 10, 0	; 14: 73 78 84 95 77 73 78 32 61 32 37 105 10 0

@9532$string_INT_MAX203D2025i0A#:
x39307:	db "INT_MAX = %i", 10, 0	; 14: 73 78 84 95 77 65 88 32 61 32 37 105 10 0

@9536$string_UINT_MAX203D2025u0A0A#:
x39321:	db "UINT_MAX = %u", 10, 10, 0	; 16: 85 73 78 84 95 77 65 88 32 61 32 37 117 10 10 0

@9540$string_LONG_MIN203D2025li0A#:
x39337:	db "LONG_MIN = %li", 10, 0	; 16: 76 79 78 71 95 77 73 78 32 61 32 37 108 105 10 0

@9544$string_LONG_MAX203D2025li0A#:
x39353:	db "LONG_MAX = %li", 10, 0	; 16: 76 79 78 71 95 77 65 88 32 61 32 37 108 105 10 0

@9548$string_ULONG_MAX203D2025lu0A#:
x39369:	db "ULONG_MAX = %lu", 10, 0	; 17: 85 76 79 78 71 95 77 65 88 32 61 32 37 108 117 10 0

@9552$string_ULONG_MAX203D2025lx0A#:
x39386:	db "ULONG_MAX = %lx", 10, 0	; 17: 85 76 79 78 71 95 77 65 88 32 61 32 37 108 120 10 0

@9556$string_ULONG_MAX203D2025lX0A#:
x39403:	db "ULONG_MAX = %lX", 10, 0	; 17: 85 76 79 78 71 95 77 65 88 32 61 32 37 108 88 10 0

float_test:	; Empty

float_test$1:	; Return 0
x39420:	mov ax, [bp]	; 3: 139 70 0
x39423:	mov di, [bp + 4]	; 3: 139 126 4
x39426:	mov bp, [bp + 2]	; 3: 139 110 2
x39429:	jmp ax	; 2: 255 224

float_test$2:	; FunctionEnd float_test

setjmp_test:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

setjmp_test$1:	; PushFloat 10
x39431:	fld qword [@10110$float8$10#]	; 4: 221 6 79 154

setjmp_test$2:	; Parameter 6 10 6
x39435:	fstp qword [bp + 12]	; 3: 221 94 12

setjmp_test$3:	; Call 6 test 0
x39438:	mov word [bp + 6], setjmp_test$4	; 5: 199 70 6 28 154
x39443:	mov [bp + 8], bp	; 3: 137 110 8
x39446:	add bp, 6	; 3: 131 197 6
x39449:	nop	; 1: 144
x39450:	jmp test	; 2: 235 67

setjmp_test$4:	; PostCall 6

setjmp_test$5:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

setjmp_test$6:	; PushZero
x39452:	fldz	; 2: 217 238

setjmp_test$7:	; Parameter 6 0 6
x39454:	fstp qword [bp + 12]	; 3: 221 94 12

setjmp_test$8:	; Call 6 test 0
x39457:	mov word [bp + 6], setjmp_test$9	; 5: 199 70 6 47 154
x39462:	mov [bp + 8], bp	; 3: 137 110 8
x39465:	add bp, 6	; 3: 131 197 6
x39468:	nop	; 1: 144
x39469:	jmp test	; 2: 235 48

setjmp_test$9:	; PostCall 6

setjmp_test$10:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

setjmp_test$11:	; PushFloat 0.1
x39471:	fld qword [@10117$float8$0.1#]	; 4: 221 6 87 154

setjmp_test$12:	; Parameter 6 0.1 6
x39475:	fstp qword [bp + 12]	; 3: 221 94 12

setjmp_test$13:	; Call 6 test 0
x39478:	mov word [bp + 6], setjmp_test$14	; 5: 199 70 6 68 154
x39483:	mov [bp + 8], bp	; 3: 137 110 8
x39486:	add bp, 6	; 3: 131 197 6
x39489:	nop	; 1: 144
x39490:	jmp test	; 2: 235 27

setjmp_test$14:	; PostCall 6

setjmp_test$15:	; Return 0
x39492:	mov ax, [bp]	; 3: 139 70 0
x39495:	mov di, [bp + 4]	; 3: 139 126 4
x39498:	mov bp, [bp + 2]	; 3: 139 110 2
x39501:	jmp ax	; 2: 255 224

setjmp_test$16:	; FunctionEnd setjmp_test

@10110$float8$10#:
x39503:	dq 10.0	; 8: 0 0 0 0 0 0 36 64

@10117$float8$0.1#:
x39511:	dq 0.1	; 8: 154 153 153 153 153 153 185 63

test:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

test$1:	; Parameter 16 buffer 6
x39519:	mov word [bp + 22], buffer	; 5: 199 70 22 219 154

test$2:	; Call 16 setjmp 0
x39524:	mov word [bp + 16], test$3	; 5: 199 70 16 114 154
x39529:	mov [bp + 18], bp	; 3: 137 110 18
x39532:	add bp, 16	; 3: 131 197 16
x39535:	jmp setjmp	; 3: 233 130 0

test$3:	; PostCall 16

test$4:	; GetReturnValue £temporary4514

test$5:	; Assign message £temporary4514
x39538:	mov [bp + 14], bx	; 3: 137 94 14

test$6:	; NotEqual 21 message 0
x39541:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x39545:	jne test$21	; 2: 117 55

test$7:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

test$8:	; Parameter 16 string_12E0202F2025f203D2025f0A# 6
x39547:	mov word [bp + 22], @10096$string_12E0202F2025f203D2025f0A#	; 5: 199 70 22 225 154

test$9:	; PushFloat x
x39552:	fld qword [bp + 6]	; 3: 221 70 6

test$10:	; Parameter 16 x 8
x39555:	fstp qword [bp + 24]	; 3: 221 94 24

test$11:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

test$12:	; PushFloat x
x39558:	fld qword [bp + 6]	; 3: 221 70 6

test$13:	; Parameter 16 x 22
x39561:	fstp qword [bp + 38]	; 3: 221 94 38

test$14:	; Call 16 inverse 16
x39564:	mov word [bp + 32], test$15	; 5: 199 70 32 154 154
x39569:	mov [bp + 34], bp	; 3: 137 110 34
x39572:	add bp, 32	; 3: 131 197 32
x39575:	jmp inverse	; 3: 233 141 0

test$15:	; PostCall 16

test$16:	; GetReturnValue £temporary4516

test$17:	; Parameter 16 £temporary4516 16
x39578:	fstp qword [bp + 32]	; 3: 221 94 32

test$18:	; Call 16 printf 0
x39581:	mov word [bp + 16], test$19	; 5: 199 70 16 176 154
x39586:	mov [bp + 18], bp	; 3: 137 110 18
x39589:	add bp, 16	; 3: 131 197 16
x39592:	mov di, bp	; 2: 137 239
x39594:	add di, 16	; 3: 131 199 16
x39597:	jmp printf	; 3: 233 84 114

test$19:	; PostCall 16

test$20:	; Goto 26
x39600:	jmp test$26	; 2: 235 30

test$21:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

test$22:	; Parameter 16 string_25s0A# 6
x39602:	mov word [bp + 22], @10099$string_25s0A#	; 5: 199 70 22 240 154

test$23:	; Parameter 16 message 8
x39607:	mov ax, [bp + 14]	; 3: 139 70 14
x39610:	mov [bp + 24], ax	; 3: 137 70 24

test$24:	; Call 16 printf 0
x39613:	mov word [bp + 16], test$25	; 5: 199 70 16 208 154
x39618:	mov [bp + 18], bp	; 3: 137 110 18
x39621:	add bp, 16	; 3: 131 197 16
x39624:	mov di, bp	; 2: 137 239
x39626:	add di, 2	; 3: 131 199 2
x39629:	jmp printf	; 3: 233 52 114

test$25:	; PostCall 16

test$26:	; Return 0
x39632:	mov ax, [bp]	; 3: 139 70 0
x39635:	mov di, [bp + 4]	; 3: 139 126 4
x39638:	mov bp, [bp + 2]	; 3: 139 110 2
x39641:	jmp ax	; 2: 255 224

test$27:	; FunctionEnd test

buffer:
x39643:	db 0, 0, 0, 0, 0, 0	; 6: 0 0 0 0 0 0

@10096$string_12E0202F2025f203D2025f0A#:
x39649:	db "1.0 / %f = %f", 10, 0	; 15: 49 46 48 32 47 32 37 102 32 61 32 37 102 10 0

@10099$string_25s0A#:
x39664:	db "%s", 10, 0	; 4: 37 115 10 0

setjmp:	; InspectRegister £temporary628 bp

setjmp$1:	; Assign bp_pointer £temporary628
x39668:	mov [bp + 8], bp	; 3: 137 110 8

setjmp$2:	; Deref £temporary629 -> buf buf 0
x39671:	mov si, [bp + 6]	; 3: 139 118 6

setjmp$3:	; Deref £temporary630 -> bp_pointer bp_pointer 0
x39674:	mov di, [bp + 8]	; 3: 139 126 8

setjmp$4:	; Assign £temporary629 -> buf £temporary630 -> bp_pointer
x39677:	mov ax, [di]	; 2: 139 5
x39679:	mov [si], ax	; 2: 137 4

setjmp$5:	; Deref £temporary631 -> buf buf 2
x39681:	mov si, [bp + 6]	; 3: 139 118 6

setjmp$6:	; Deref £temporary632 -> bp_pointer bp_pointer 2
x39684:	mov di, [bp + 8]	; 3: 139 126 8

setjmp$7:	; Assign £temporary631 -> buf £temporary632 -> bp_pointer
x39687:	mov ax, [di + 2]	; 3: 139 69 2
x39690:	mov [si + 2], ax	; 3: 137 68 2

setjmp$8:	; Deref £temporary633 -> buf buf 4
x39693:	mov si, [bp + 6]	; 3: 139 118 6

setjmp$9:	; Deref £temporary634 -> bp_pointer bp_pointer 4
x39696:	mov di, [bp + 8]	; 3: 139 126 8

setjmp$10:	; Assign £temporary633 -> buf £temporary634 -> bp_pointer
x39699:	mov ax, [di + 4]	; 3: 139 69 4
x39702:	mov [si + 4], ax	; 3: 137 68 4

setjmp$11:	; SetReturnValue 0
x39705:	mov bx, 0	; 3: 187 0 0

setjmp$12:	; Return 0
x39708:	mov ax, [bp]	; 3: 139 70 0
x39711:	mov di, [bp + 4]	; 3: 139 126 4
x39714:	mov bp, [bp + 2]	; 3: 139 110 2
x39717:	jmp ax	; 2: 255 224

setjmp$13:	; FunctionEnd setjmp

inverse:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

inverse$1:	; PushOne
x39719:	fld1	; 2: 217 232

inverse$2:	; Parameter 14 1 6
x39721:	fstp qword [bp + 20]	; 3: 221 94 20

inverse$3:	; PushFloat x
x39724:	fld qword [bp + 6]	; 3: 221 70 6

inverse$4:	; Parameter 14 x 14
x39727:	fstp qword [bp + 28]	; 3: 221 94 28

inverse$5:	; Call 14 divide 0
x39730:	mov word [bp + 14], inverse$6	; 5: 199 70 14 64 155
x39735:	mov [bp + 16], bp	; 3: 137 110 16
x39738:	add bp, 14	; 3: 131 197 14
x39741:	nop	; 1: 144
x39742:	jmp divide	; 2: 235 11

inverse$6:	; PostCall 14

inverse$7:	; GetReturnValue £temporary4506

inverse$8:	; SetReturnValue £temporary4506

inverse$9:	; Return £temporary4506
x39744:	mov ax, [bp]	; 3: 139 70 0
x39747:	mov di, [bp + 4]	; 3: 139 126 4
x39750:	mov bp, [bp + 2]	; 3: 139 110 2
x39753:	jmp ax	; 2: 255 224

inverse$10:	; FunctionEnd inverse

divide:	; PushFloat y
x39755:	fld qword [bp + 14]	; 3: 221 70 14

divide$1:	; PushZero
x39758:	fldz	; 2: 217 238

divide$2:	; Equal 8 y 0
x39760:	fcompp	; 2: 222 217
x39762:	fstsw ax	; 3: 155 223 224
x39765:	sahf	; 1: 158
x39766:	je divide$8	; 2: 116 19

divide$3:	; PushFloat x
x39768:	fld qword [bp + 6]	; 3: 221 70 6

divide$4:	; PushFloat y
x39771:	fld qword [bp + 14]	; 3: 221 70 14

divide$5:	; SignedDivide £temporary4510 x y
x39774:	fdiv	; 2: 222 249

divide$6:	; SetReturnValue £temporary4510

divide$7:	; Return £temporary4510
x39776:	mov ax, [bp]	; 3: 139 70 0
x39779:	mov di, [bp + 4]	; 3: 139 126 4
x39782:	mov bp, [bp + 2]	; 3: 139 110 2
x39785:	jmp ax	; 2: 255 224

divide$8:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

divide$9:	; Parameter 22 buffer 6
x39787:	mov word [bp + 28], buffer	; 5: 199 70 28 219 154

divide$10:	; Parameter 22 string_Division20by20Zero2E# 8
x39792:	mov word [bp + 30], @10084$string_Division20by20Zero2E#	; 5: 199 70 30 144 155

divide$11:	; Call 22 longjmp 0
x39797:	mov word [bp + 22], divide$12	; 5: 199 70 22 131 155
x39802:	mov [bp + 24], bp	; 3: 137 110 24
x39805:	add bp, 22	; 3: 131 197 22
x39808:	nop	; 1: 144
x39809:	jmp longjmp	; 2: 235 31

divide$12:	; PostCall 22

divide$13:	; PushZero
x39811:	fldz	; 2: 217 238

divide$14:	; SetReturnValue 0

divide$15:	; Return 0
x39813:	mov ax, [bp]	; 3: 139 70 0
x39816:	mov di, [bp + 4]	; 3: 139 126 4
x39819:	mov bp, [bp + 2]	; 3: 139 110 2
x39822:	jmp ax	; 2: 255 224

divide$16:	; FunctionEnd divide

@10084$string_Division20by20Zero2E#:
x39824:	db "Division by Zero.", 0	; 18: 68 105 118 105 115 105 111 110 32 98 121 32 90 101 114 111 46 0

longjmp:	; AssignRegister bx return_value
x39842:	mov bx, [bp + 8]	; 3: 139 94 8

longjmp$1:	; Deref £temporary637 -> buf buf 0
x39845:	mov si, [bp + 6]	; 3: 139 118 6

longjmp$2:	; AssignRegister cx £temporary637 -> buf
x39848:	mov cx, [si]	; 2: 139 12

longjmp$3:	; Deref £temporary639 -> buf buf 4
x39850:	mov si, [bp + 6]	; 3: 139 118 6

longjmp$4:	; AssignRegister di £temporary639 -> buf
x39853:	mov di, [si + 4]	; 3: 139 124 4

longjmp$5:	; Deref £temporary641 -> buf buf 2
x39856:	mov si, [bp + 6]	; 3: 139 118 6

longjmp$6:	; AssignRegister bp £temporary641 -> buf
x39859:	mov bp, [si + 2]	; 3: 139 108 2

longjmp$7:	; JumpRegister cx
x39862:	jmp cx	; 2: 255 225

longjmp$8:	; Return 0
x39864:	mov ax, [bp]	; 3: 139 70 0
x39867:	mov di, [bp + 4]	; 3: 139 126 4
x39870:	mov bp, [bp + 2]	; 3: 139 110 2
x39873:	jmp ax	; 2: 255 224

longjmp$9:	; FunctionEnd longjmp

stdio_test:	; Assign n 0
x39875:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

stdio_test$1:	; address £temporary5600 n
x39880:	mov si, bp	; 2: 137 238
x39882:	add si, 6	; 3: 131 198 6

stdio_test$2:	; Assign p £temporary5600
x39885:	mov [bp + 8], si	; 3: 137 118 8

stdio_test$3:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$4:	; Parameter 10 string_3C25i3E203C25i3E203C25li3E203C25li3E203C25u3E203C25lu3E0A0A# 6
x39888:	mov word [bp + 16], @12122$string_3C25i3E203C25i3E203C25li3E203C25li3E203C25u3E203C25lu3E0A0A#	; 5: 199 70 16 171 163

stdio_test$5:	; Parameter 10 123 8
x39893:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$6:	; Parameter 10 -123 10
x39898:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$7:	; Parameter 10 123 12
x39903:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$8:	; Parameter 10 -123 16
x39911:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$9:	; Parameter 10 123 20
x39919:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$10:	; Parameter 10 123 22
x39924:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$11:	; Call 10 printf 0
x39932:	mov word [bp + 10], stdio_test$12	; 5: 199 70 10 15 156
x39937:	mov [bp + 12], bp	; 3: 137 110 12
x39940:	add bp, 10	; 3: 131 197 10
x39943:	mov di, bp	; 2: 137 239
x39945:	add di, 18	; 3: 131 199 18
x39948:	jmp printf	; 3: 233 245 112

stdio_test$12:	; PostCall 10

stdio_test$13:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$14:	; Parameter 10 string_3C256i3E203C256i3E203C256li3E203C256li3E203C256u3E203C256lu3E0A# 6
x39951:	mov word [bp + 16], @12136$string_3C256i3E203C256i3E203C256li3E203C256li3E203C256u3E203C256lu3E0A#	; 5: 199 70 16 206 163

stdio_test$15:	; Parameter 10 123 8
x39956:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$16:	; Parameter 10 -123 10
x39961:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$17:	; Parameter 10 123 12
x39966:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$18:	; Parameter 10 -123 16
x39974:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$19:	; Parameter 10 123 20
x39982:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$20:	; Parameter 10 123 22
x39987:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$21:	; Call 10 printf 0
x39995:	mov word [bp + 10], stdio_test$22	; 5: 199 70 10 78 156
x40000:	mov [bp + 12], bp	; 3: 137 110 12
x40003:	add bp, 10	; 3: 131 197 10
x40006:	mov di, bp	; 2: 137 239
x40008:	add di, 18	; 3: 131 199 18
x40011:	jmp printf	; 3: 233 182 112

stdio_test$22:	; PostCall 10

stdio_test$23:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$24:	; Parameter 10 string_3C252B6i3E203C252B6i3E203C252B6li3E203C252B6li3E203C252B6u3E203C252B6lu3E0A# 6
x40014:	mov word [bp + 16], @12150$string_3C252B6i3E203C252B6i3E203C252B6li3E203C252B6li3E203C252B6u3E203C252B6lu3E0A#	; 5: 199 70 16 246 163

stdio_test$25:	; Parameter 10 123 8
x40019:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$26:	; Parameter 10 -123 10
x40024:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$27:	; Parameter 10 123 12
x40029:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$28:	; Parameter 10 -123 16
x40037:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$29:	; Parameter 10 123 20
x40045:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$30:	; Parameter 10 123 22
x40050:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$31:	; Call 10 printf 0
x40058:	mov word [bp + 10], stdio_test$32	; 5: 199 70 10 141 156
x40063:	mov [bp + 12], bp	; 3: 137 110 12
x40066:	add bp, 10	; 3: 131 197 10
x40069:	mov di, bp	; 2: 137 239
x40071:	add di, 18	; 3: 131 199 18
x40074:	jmp printf	; 3: 233 119 112

stdio_test$32:	; PostCall 10

stdio_test$33:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$34:	; Parameter 10 string_3C252D6i3E203C252D6i3E203C252D6li3E203C252D6li3E203C252D6u3E203C252D6lu3E0A# 6
x40077:	mov word [bp + 16], @12164$string_3C252D6i3E203C252D6i3E203C252D6li3E203C252D6li3E203C252D6u3E203C252D6lu3E0A#	; 5: 199 70 16 36 164

stdio_test$35:	; Parameter 10 123 8
x40082:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$36:	; Parameter 10 -123 10
x40087:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$37:	; Parameter 10 123 12
x40092:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$38:	; Parameter 10 -123 16
x40100:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$39:	; Parameter 10 123 20
x40108:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$40:	; Parameter 10 123 22
x40113:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$41:	; Call 10 printf 0
x40121:	mov word [bp + 10], stdio_test$42	; 5: 199 70 10 204 156
x40126:	mov [bp + 12], bp	; 3: 137 110 12
x40129:	add bp, 10	; 3: 131 197 10
x40132:	mov di, bp	; 2: 137 239
x40134:	add di, 18	; 3: 131 199 18
x40137:	jmp printf	; 3: 233 56 112

stdio_test$42:	; PostCall 10

stdio_test$43:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$44:	; Parameter 10 string_3C252B2D6i3E203C252B2D6i3E203C252B2D6li3E203C252B2D6li3E203C252B2D6u3E203C252B2D6lu3E0A0A# 6
x40140:	mov word [bp + 16], @12178$string_3C252B2D6i3E203C252B2D6i3E203C252B2D6li3E203C252B2D6li3E203C252B2D6u3E203C252B2D6lu3E0A0A#	; 5: 199 70 16 82 164

stdio_test$45:	; Parameter 10 123 8
x40145:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$46:	; Parameter 10 -123 10
x40150:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$47:	; Parameter 10 123 12
x40155:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$48:	; Parameter 10 -123 16
x40163:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$49:	; Parameter 10 123 20
x40171:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$50:	; Parameter 10 123 22
x40176:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$51:	; Call 10 printf 0
x40184:	mov word [bp + 10], stdio_test$52	; 5: 199 70 10 11 157
x40189:	mov [bp + 12], bp	; 3: 137 110 12
x40192:	add bp, 10	; 3: 131 197 10
x40195:	mov di, bp	; 2: 137 239
x40197:	add di, 18	; 3: 131 199 18
x40200:	jmp printf	; 3: 233 249 111

stdio_test$52:	; PostCall 10

stdio_test$53:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$54:	; Parameter 10 string_3C2506i3E203C2506i3E203C2506li3E203C2506li3E203C2506u3E203C2506lu3E0A# 6
x40203:	mov word [bp + 16], @12196$string_3C2506i3E203C2506i3E203C2506li3E203C2506li3E203C2506u3E203C2506lu3E0A#	; 5: 199 70 16 135 164

stdio_test$55:	; Parameter 10 123 8
x40208:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$56:	; Parameter 10 -123 10
x40213:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$57:	; Parameter 10 123 12
x40218:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$58:	; Parameter 10 -123 16
x40226:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$59:	; Parameter 10 123 20
x40234:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$60:	; Parameter 10 123 22
x40239:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$61:	; Call 10 printf 0
x40247:	mov word [bp + 10], stdio_test$62	; 5: 199 70 10 74 157
x40252:	mov [bp + 12], bp	; 3: 137 110 12
x40255:	add bp, 10	; 3: 131 197 10
x40258:	mov di, bp	; 2: 137 239
x40260:	add di, 18	; 3: 131 199 18
x40263:	jmp printf	; 3: 233 186 111

stdio_test$62:	; PostCall 10

stdio_test$63:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$64:	; Parameter 10 string_3C252B06i3E203C252B06i3E203C252B06li3E203C252B06li3E203C252B06u3E203C252B06lu3E0A# 6
x40266:	mov word [bp + 16], @12210$string_3C252B06i3E203C252B06i3E203C252B06li3E203C252B06li3E203C252B06u3E203C252B06lu3E0A#	; 5: 199 70 16 181 164

stdio_test$65:	; Parameter 10 123 8
x40271:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$66:	; Parameter 10 -123 10
x40276:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$67:	; Parameter 10 123 12
x40281:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$68:	; Parameter 10 -123 16
x40289:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$69:	; Parameter 10 123 20
x40297:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$70:	; Parameter 10 123 22
x40302:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$71:	; Call 10 printf 0
x40310:	mov word [bp + 10], stdio_test$72	; 5: 199 70 10 137 157
x40315:	mov [bp + 12], bp	; 3: 137 110 12
x40318:	add bp, 10	; 3: 131 197 10
x40321:	mov di, bp	; 2: 137 239
x40323:	add di, 18	; 3: 131 199 18
x40326:	jmp printf	; 3: 233 123 111

stdio_test$72:	; PostCall 10

stdio_test$73:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$74:	; Parameter 10 string_3C252D06i3E203C252D06i3E203C252D06li3E203C252D06li3E203C252D06u3E203C252D06lu3E0A# 6
x40329:	mov word [bp + 16], @12224$string_3C252D06i3E203C252D06i3E203C252D06li3E203C252D06li3E203C252D06u3E203C252D06lu3E0A#	; 5: 199 70 16 233 164

stdio_test$75:	; Parameter 10 123 8
x40334:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$76:	; Parameter 10 -123 10
x40339:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$77:	; Parameter 10 123 12
x40344:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$78:	; Parameter 10 -123 16
x40352:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$79:	; Parameter 10 123 20
x40360:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$80:	; Parameter 10 123 22
x40365:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$81:	; Call 10 printf 0
x40373:	mov word [bp + 10], stdio_test$82	; 5: 199 70 10 200 157
x40378:	mov [bp + 12], bp	; 3: 137 110 12
x40381:	add bp, 10	; 3: 131 197 10
x40384:	mov di, bp	; 2: 137 239
x40386:	add di, 18	; 3: 131 199 18
x40389:	jmp printf	; 3: 233 60 111

stdio_test$82:	; PostCall 10

stdio_test$83:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$84:	; Parameter 10 string_3C252B2D06i3E203C252B2D06i3E203C252B2D06li3E203C252B2D06li3E203C252B2D06u3E203C252B2D06lu3E0A0A# 6
x40392:	mov word [bp + 16], @12238$string_3C252B2D06i3E203C252B2D06i3E203C252B2D06li3E203C252B2D06li3E203C252B2D06u3E203C252B2D06lu3E0A0A#	; 5: 199 70 16 29 165

stdio_test$85:	; Parameter 10 123 8
x40397:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$86:	; Parameter 10 -123 10
x40402:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$87:	; Parameter 10 123 12
x40407:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$88:	; Parameter 10 -123 16
x40415:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$89:	; Parameter 10 123 20
x40423:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$90:	; Parameter 10 123 22
x40428:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$91:	; Call 10 printf 0
x40436:	mov word [bp + 10], stdio_test$92	; 5: 199 70 10 7 158
x40441:	mov [bp + 12], bp	; 3: 137 110 12
x40444:	add bp, 10	; 3: 131 197 10
x40447:	mov di, bp	; 2: 137 239
x40449:	add di, 18	; 3: 131 199 18
x40452:	jmp printf	; 3: 233 253 110

stdio_test$92:	; PostCall 10

stdio_test$93:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$94:	; Parameter 10 string_3C25206i3E203C25206i3E203C25206li3E203C25206li3E203C25206u3E203C25206lu3E0A# 6
x40455:	mov word [bp + 16], @12252$string_3C25206i3E203C25206i3E203C25206li3E203C25206li3E203C25206u3E203C25206lu3E0A#	; 5: 199 70 16 88 165

stdio_test$95:	; Parameter 10 123 8
x40460:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$96:	; Parameter 10 -123 10
x40465:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$97:	; Parameter 10 123 12
x40470:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$98:	; Parameter 10 -123 16
x40478:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$99:	; Parameter 10 123 20
x40486:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$100:	; Parameter 10 123 22
x40491:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$101:	; Call 10 printf 0
x40499:	mov word [bp + 10], stdio_test$102	; 5: 199 70 10 70 158
x40504:	mov [bp + 12], bp	; 3: 137 110 12
x40507:	add bp, 10	; 3: 131 197 10
x40510:	mov di, bp	; 2: 137 239
x40512:	add di, 18	; 3: 131 199 18
x40515:	jmp printf	; 3: 233 190 110

stdio_test$102:	; PostCall 10

stdio_test$103:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$104:	; Parameter 10 string_3C252B206i3E203C252B206i3E203C252B206li3E203C252B206li3E203C252B206u3E203C252B206lu3E0A# 6
x40518:	mov word [bp + 16], @12266$string_3C252B206i3E203C252B206i3E203C252B206li3E203C252B206li3E203C252B206u3E203C252B206lu3E0A#	; 5: 199 70 16 134 165

stdio_test$105:	; Parameter 10 123 8
x40523:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$106:	; Parameter 10 -123 10
x40528:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$107:	; Parameter 10 123 12
x40533:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$108:	; Parameter 10 -123 16
x40541:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$109:	; Parameter 10 123 20
x40549:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$110:	; Parameter 10 123 22
x40554:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$111:	; Call 10 printf 0
x40562:	mov word [bp + 10], stdio_test$112	; 5: 199 70 10 133 158
x40567:	mov [bp + 12], bp	; 3: 137 110 12
x40570:	add bp, 10	; 3: 131 197 10
x40573:	mov di, bp	; 2: 137 239
x40575:	add di, 18	; 3: 131 199 18
x40578:	jmp printf	; 3: 233 127 110

stdio_test$112:	; PostCall 10

stdio_test$113:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$114:	; Parameter 10 string_3C252D206i3E203C252D206i3E203C252D206li3E203C252D206li3E203C252D206u3E203C252D206lu3E0A# 6
x40581:	mov word [bp + 16], @12280$string_3C252D206i3E203C252D206i3E203C252D206li3E203C252D206li3E203C252D206u3E203C252D206lu3E0A#	; 5: 199 70 16 186 165

stdio_test$115:	; Parameter 10 123 8
x40586:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$116:	; Parameter 10 -123 10
x40591:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$117:	; Parameter 10 123 12
x40596:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$118:	; Parameter 10 -123 16
x40604:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$119:	; Parameter 10 123 20
x40612:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$120:	; Parameter 10 123 22
x40617:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$121:	; Call 10 printf 0
x40625:	mov word [bp + 10], stdio_test$122	; 5: 199 70 10 196 158
x40630:	mov [bp + 12], bp	; 3: 137 110 12
x40633:	add bp, 10	; 3: 131 197 10
x40636:	mov di, bp	; 2: 137 239
x40638:	add di, 18	; 3: 131 199 18
x40641:	jmp printf	; 3: 233 64 110

stdio_test$122:	; PostCall 10

stdio_test$123:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$124:	; Parameter 10 string_3C252B2D206i3E203C252B2D206i3E203C252B2D206li3E203C252B2D206li3E203C252B2D206u3E203C252B2D206lu3E0A0A# 6
x40644:	mov word [bp + 16], @12294$string_3C252B2D206i3E203C252B2D206i3E203C252B2D206li3E203C252B2D206li3E203C252B2D206u3E203C252B2D206lu3E0A0A#	; 5: 199 70 16 238 165

stdio_test$125:	; Parameter 10 123 8
x40649:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$126:	; Parameter 10 -123 10
x40654:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$127:	; Parameter 10 123 12
x40659:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$128:	; Parameter 10 -123 16
x40667:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$129:	; Parameter 10 123 20
x40675:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$130:	; Parameter 10 123 22
x40680:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$131:	; Call 10 printf 0
x40688:	mov word [bp + 10], stdio_test$132	; 5: 199 70 10 3 159
x40693:	mov [bp + 12], bp	; 3: 137 110 12
x40696:	add bp, 10	; 3: 131 197 10
x40699:	mov di, bp	; 2: 137 239
x40701:	add di, 18	; 3: 131 199 18
x40704:	jmp printf	; 3: 233 1 110

stdio_test$132:	; PostCall 10

stdio_test$133:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$134:	; Parameter 10 string_3C25x3E203C25X3E203C25o3E203C25lx3E203C25lX3E203C25lo3E0A# 6
x40707:	mov word [bp + 16], @12308$string_3C25x3E203C25X3E203C25o3E203C25lx3E203C25lX3E203C25lo3E0A#	; 5: 199 70 16 41 166

stdio_test$135:	; Parameter 10 123 8
x40712:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$136:	; Parameter 10 123 10
x40717:	mov word [bp + 20], 123	; 5: 199 70 20 123 0

stdio_test$137:	; Parameter 10 123 12
x40722:	mov word [bp + 22], 123	; 5: 199 70 22 123 0

stdio_test$138:	; Parameter 10 123 14
x40727:	mov dword [bp + 24], 123	; 8: 102 199 70 24 123 0 0 0

stdio_test$139:	; Parameter 10 123 18
x40735:	mov dword [bp + 28], 123	; 8: 102 199 70 28 123 0 0 0

stdio_test$140:	; Parameter 10 123 22
x40743:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$141:	; Call 10 printf 0
x40751:	mov word [bp + 10], stdio_test$142	; 5: 199 70 10 66 159
x40756:	mov [bp + 12], bp	; 3: 137 110 12
x40759:	add bp, 10	; 3: 131 197 10
x40762:	mov di, bp	; 2: 137 239
x40764:	add di, 18	; 3: 131 199 18
x40767:	jmp printf	; 3: 233 194 109

stdio_test$142:	; PostCall 10

stdio_test$143:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$144:	; Parameter 10 string_3C2523x3E203C2523X3E203C2523o3E203C2523lx3E203C2523lX3E203C2523lo3E0A# 6
x40770:	mov word [bp + 16], @12322$string_3C2523x3E203C2523X3E203C2523o3E203C2523lx3E203C2523lX3E203C2523lo3E0A#	; 5: 199 70 16 75 166

stdio_test$145:	; Parameter 10 123 8
x40775:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$146:	; Parameter 10 123 10
x40780:	mov word [bp + 20], 123	; 5: 199 70 20 123 0

stdio_test$147:	; Parameter 10 123 12
x40785:	mov word [bp + 22], 123	; 5: 199 70 22 123 0

stdio_test$148:	; Parameter 10 123 14
x40790:	mov dword [bp + 24], 123	; 8: 102 199 70 24 123 0 0 0

stdio_test$149:	; Parameter 10 123 18
x40798:	mov dword [bp + 28], 123	; 8: 102 199 70 28 123 0 0 0

stdio_test$150:	; Parameter 10 123 22
x40806:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$151:	; Call 10 printf 0
x40814:	mov word [bp + 10], stdio_test$152	; 5: 199 70 10 129 159
x40819:	mov [bp + 12], bp	; 3: 137 110 12
x40822:	add bp, 10	; 3: 131 197 10
x40825:	mov di, bp	; 2: 137 239
x40827:	add di, 18	; 3: 131 199 18
x40830:	jmp printf	; 3: 233 131 109

stdio_test$152:	; PostCall 10

stdio_test$153:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$154:	; Parameter 10 string_3C25253E203C25s3E203C25c3E203C25p3E0A0A# 6
x40833:	mov word [bp + 16], @12336$string_3C25253E203C25s3E203C25c3E203C25p3E0A0A#	; 5: 199 70 16 115 166

stdio_test$155:	; Parameter 10 string_Hello2C20World21# 8
x40838:	mov word [bp + 18], @12337$string_Hello2C20World21#	; 5: 199 70 18 137 166

stdio_test$156:	; Parameter 10 88 10
x40843:	mov word [bp + 20], 88	; 5: 199 70 20 88 0

stdio_test$157:	; Parameter 10 p 12
x40848:	mov ax, [bp + 8]	; 3: 139 70 8
x40851:	mov [bp + 22], ax	; 3: 137 70 22

stdio_test$158:	; Call 10 printf 0
x40854:	mov word [bp + 10], stdio_test$159	; 5: 199 70 10 169 159
x40859:	mov [bp + 12], bp	; 3: 137 110 12
x40862:	add bp, 10	; 3: 131 197 10
x40865:	mov di, bp	; 2: 137 239
x40867:	add di, 6	; 3: 131 199 6
x40870:	jmp printf	; 3: 233 91 109

stdio_test$159:	; PostCall 10

stdio_test$160:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$161:	; Parameter 10 string_3C25f3E203C25e3E203C25E3E203C25g3E203C25G3E0A# 6
x40873:	mov word [bp + 16], @12342$string_3C25f3E203C25e3E203C25E3E203C25g3E203C25G3E0A#	; 5: 199 70 16 151 166

stdio_test$162:	; PushFloat 123.456
x40878:	fld qword [@12343$float8$123.456#]	; 4: 221 6 177 166

stdio_test$163:	; Parameter 10 123.456 8
x40882:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$164:	; PushFloat 123.456
x40885:	fld qword [@12344$float8$123.456#]	; 4: 221 6 185 166

stdio_test$165:	; Parameter 10 123.456 16
x40889:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$166:	; PushFloat 123.456
x40892:	fld qword [@12345$float8$123.456#]	; 4: 221 6 193 166

stdio_test$167:	; Parameter 10 123.456 24
x40896:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$168:	; PushFloat 123456.1
x40899:	fld qword [@12346$float8$123456.1#]	; 4: 221 6 201 166

stdio_test$169:	; Parameter 10 123456.1 32
x40903:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$170:	; PushFloat 123456.1
x40906:	fld qword [@12347$float8$123456.1#]	; 4: 221 6 209 166

stdio_test$171:	; Parameter 10 123456.1 40
x40910:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$172:	; Call 10 printf 0
x40913:	mov word [bp + 10], stdio_test$173	; 5: 199 70 10 228 159
x40918:	mov [bp + 12], bp	; 3: 137 110 12
x40921:	add bp, 10	; 3: 131 197 10
x40924:	mov di, bp	; 2: 137 239
x40926:	add di, 40	; 3: 131 199 40
x40929:	jmp printf	; 3: 233 32 109

stdio_test$173:	; PostCall 10

stdio_test$174:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$175:	; Parameter 10 string_3C25lf3E203C25le3E203C25lE3E203C25lg3E203C25lG3E0A# 6
x40932:	mov word [bp + 16], @12354$string_3C25lf3E203C25le3E203C25lE3E203C25lg3E203C25lG3E0A#	; 5: 199 70 16 217 166

stdio_test$176:	; PushFloat 123.456
x40937:	fld qword [@12355$float8$123.456#]	; 4: 221 6 248 166

stdio_test$177:	; Parameter 10 123.456 8
x40941:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$178:	; PushFloat 123.456
x40944:	fld qword [@12356$float8$123.456#]	; 4: 221 6 0 167

stdio_test$179:	; Parameter 10 123.456 16
x40948:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$180:	; PushFloat 123.456
x40951:	fld qword [@12357$float8$123.456#]	; 4: 221 6 8 167

stdio_test$181:	; Parameter 10 123.456 24
x40955:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$182:	; PushFloat 123456.1
x40958:	fld qword [@12358$float8$123456.1#]	; 4: 221 6 16 167

stdio_test$183:	; Parameter 10 123456.1 32
x40962:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$184:	; PushFloat 123456.1
x40965:	fld qword [@12359$float8$123456.1#]	; 4: 221 6 24 167

stdio_test$185:	; Parameter 10 123456.1 40
x40969:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$186:	; Call 10 printf 0
x40972:	mov word [bp + 10], stdio_test$187	; 5: 199 70 10 31 160
x40977:	mov [bp + 12], bp	; 3: 137 110 12
x40980:	add bp, 10	; 3: 131 197 10
x40983:	mov di, bp	; 2: 137 239
x40985:	add di, 40	; 3: 131 199 40
x40988:	jmp printf	; 3: 233 229 108

stdio_test$187:	; PostCall 10

stdio_test$188:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$189:	; Parameter 10 string_3C2523f3E203C2523e3E203C2523E3E203C2523g3E203C2523G3E0A# 6
x40991:	mov word [bp + 16], @12366$string_3C2523f3E203C2523e3E203C2523E3E203C2523g3E203C2523G3E0A#	; 5: 199 70 16 32 167

stdio_test$190:	; PushFloat 123.456
x40996:	fld qword [@12367$float8$123.456#]	; 4: 221 6 63 167

stdio_test$191:	; Parameter 10 123.456 8
x41000:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$192:	; PushFloat 123.456
x41003:	fld qword [@12368$float8$123.456#]	; 4: 221 6 71 167

stdio_test$193:	; Parameter 10 123.456 16
x41007:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$194:	; PushFloat 123.456
x41010:	fld qword [@12369$float8$123.456#]	; 4: 221 6 79 167

stdio_test$195:	; Parameter 10 123.456 24
x41014:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$196:	; PushFloat 123.456
x41017:	fld qword [@12370$float8$123.456#]	; 4: 221 6 87 167

stdio_test$197:	; Parameter 10 123.456 32
x41021:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$198:	; PushFloat 123.456
x41024:	fld qword [@12371$float8$123.456#]	; 4: 221 6 95 167

stdio_test$199:	; Parameter 10 123.456 40
x41028:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$200:	; Call 10 printf 0
x41031:	mov word [bp + 10], stdio_test$201	; 5: 199 70 10 90 160
x41036:	mov [bp + 12], bp	; 3: 137 110 12
x41039:	add bp, 10	; 3: 131 197 10
x41042:	mov di, bp	; 2: 137 239
x41044:	add di, 40	; 3: 131 199 40
x41047:	jmp printf	; 3: 233 170 108

stdio_test$201:	; PostCall 10

stdio_test$202:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$203:	; Parameter 10 string_3C2523lf3E203C2523le3E203C2523lE3E203C2523lg3E203C2523lG3E0A# 6
x41050:	mov word [bp + 16], @12378$string_3C2523lf3E203C2523le3E203C2523lE3E203C2523lg3E203C2523lG3E0A#	; 5: 199 70 16 103 167

stdio_test$204:	; PushFloat 123.456
x41055:	fld qword [@12379$float8$123.456#]	; 4: 221 6 139 167

stdio_test$205:	; Parameter 10 123.456 8
x41059:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$206:	; PushFloat 123.456
x41062:	fld qword [@12380$float8$123.456#]	; 4: 221 6 147 167

stdio_test$207:	; Parameter 10 123.456 16
x41066:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$208:	; PushFloat 123.456
x41069:	fld qword [@12381$float8$123.456#]	; 4: 221 6 155 167

stdio_test$209:	; Parameter 10 123.456 24
x41073:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$210:	; PushFloat 123.456
x41076:	fld qword [@12382$float8$123.456#]	; 4: 221 6 163 167

stdio_test$211:	; Parameter 10 123.456 32
x41080:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$212:	; PushFloat 123.456
x41083:	fld qword [@12383$float8$123.456#]	; 4: 221 6 171 167

stdio_test$213:	; Parameter 10 123.456 40
x41087:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$214:	; Call 10 printf 0
x41090:	mov word [bp + 10], stdio_test$215	; 5: 199 70 10 149 160
x41095:	mov [bp + 12], bp	; 3: 137 110 12
x41098:	add bp, 10	; 3: 131 197 10
x41101:	mov di, bp	; 2: 137 239
x41103:	add di, 40	; 3: 131 199 40
x41106:	jmp printf	; 3: 233 111 108

stdio_test$215:	; PostCall 10

stdio_test$216:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$217:	; Parameter 10 string_3C2562E3f3E203C2562E3e3E203C2562E3E3E203C2562E3g3E203C2562E3G3E0A# 6
x41109:	mov word [bp + 16], @12390$string_3C2562E3f3E203C2562E3e3E203C2562E3E3E203C2562E3g3E203C2562E3G3E0A#	; 5: 199 70 16 179 167

stdio_test$218:	; PushFloat 123.456
x41114:	fld qword [@12391$float8$123.456#]	; 4: 221 6 220 167

stdio_test$219:	; Parameter 10 123.456 8
x41118:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$220:	; PushFloat 123.456
x41121:	fld qword [@12392$float8$123.456#]	; 4: 221 6 228 167

stdio_test$221:	; Parameter 10 123.456 16
x41125:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$222:	; PushFloat 123.456
x41128:	fld qword [@12393$float8$123.456#]	; 4: 221 6 236 167

stdio_test$223:	; Parameter 10 123.456 24
x41132:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$224:	; PushFloat 123.456
x41135:	fld qword [@12394$float8$123.456#]	; 4: 221 6 244 167

stdio_test$225:	; Parameter 10 123.456 32
x41139:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$226:	; PushFloat 123.456
x41142:	fld qword [@12395$float8$123.456#]	; 4: 221 6 252 167

stdio_test$227:	; Parameter 10 123.456 40
x41146:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$228:	; Call 10 printf 0
x41149:	mov word [bp + 10], stdio_test$229	; 5: 199 70 10 208 160
x41154:	mov [bp + 12], bp	; 3: 137 110 12
x41157:	add bp, 10	; 3: 131 197 10
x41160:	mov di, bp	; 2: 137 239
x41162:	add di, 40	; 3: 131 199 40
x41165:	jmp printf	; 3: 233 52 108

stdio_test$229:	; PostCall 10

stdio_test$230:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$231:	; Parameter 10 string_3C2562E3lf3E203C2562E3le3E203C2562E3lE3E203C2562E3lg3E203C2562E3lG3E0A0A# 6
x41168:	mov word [bp + 16], @12402$string_3C2562E3lf3E203C2562E3le3E203C2562E3lE3E203C2562E3lg3E203C2562E3lG3E0A0A#	; 5: 199 70 16 4 168

stdio_test$232:	; PushFloat 123.456
x41173:	fld qword [@12403$float8$123.456#]	; 4: 221 6 51 168

stdio_test$233:	; Parameter 10 123.456 8
x41177:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$234:	; PushFloat 123.456
x41180:	fld qword [@12404$float8$123.456#]	; 4: 221 6 59 168

stdio_test$235:	; Parameter 10 123.456 16
x41184:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$236:	; PushFloat 123.456
x41187:	fld qword [@12405$float8$123.456#]	; 4: 221 6 67 168

stdio_test$237:	; Parameter 10 123.456 24
x41191:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$238:	; PushFloat 123.456
x41194:	fld qword [@12406$float8$123.456#]	; 4: 221 6 75 168

stdio_test$239:	; Parameter 10 123.456 32
x41198:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$240:	; PushFloat 123.456
x41201:	fld qword [@12407$float8$123.456#]	; 4: 221 6 83 168

stdio_test$241:	; Parameter 10 123.456 40
x41205:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$242:	; Call 10 printf 0
x41208:	mov word [bp + 10], stdio_test$243	; 5: 199 70 10 11 161
x41213:	mov [bp + 12], bp	; 3: 137 110 12
x41216:	add bp, 10	; 3: 131 197 10
x41219:	mov di, bp	; 2: 137 239
x41221:	add di, 40	; 3: 131 199 40
x41224:	jmp printf	; 3: 233 249 107

stdio_test$243:	; PostCall 10

stdio_test$244:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$245:	; Parameter 10 string_3C25f3E203C25e3E203C25E3E203C25g3E203C25G3E0A# 6
x41227:	mov word [bp + 16], @12414$string_3C25f3E203C25e3E203C25E3E203C25g3E203C25G3E0A#	; 5: 199 70 16 91 168

stdio_test$246:	; PushFloat -123.456
x41232:	fld qword [@12415$float8$minus123.456#]	; 4: 221 6 117 168

stdio_test$247:	; Parameter 10 -123.456 8
x41236:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$248:	; PushFloat -123.456
x41239:	fld qword [@12416$float8$minus123.456#]	; 4: 221 6 125 168

stdio_test$249:	; Parameter 10 -123.456 16
x41243:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$250:	; PushFloat -123.456
x41246:	fld qword [@12417$float8$minus123.456#]	; 4: 221 6 133 168

stdio_test$251:	; Parameter 10 -123.456 24
x41250:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$252:	; PushFloat -0.000000123456
x41253:	fld qword [@12418$float8$minus0.000000123456#]	; 4: 221 6 141 168

stdio_test$253:	; Parameter 10 -0.000000123456 32
x41257:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$254:	; PushFloat -0.000000123456
x41260:	fld qword [@12419$float8$minus0.000000123456#]	; 4: 221 6 149 168

stdio_test$255:	; Parameter 10 -0.000000123456 40
x41264:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$256:	; Call 10 printf 0
x41267:	mov word [bp + 10], stdio_test$257	; 5: 199 70 10 70 161
x41272:	mov [bp + 12], bp	; 3: 137 110 12
x41275:	add bp, 10	; 3: 131 197 10
x41278:	mov di, bp	; 2: 137 239
x41280:	add di, 40	; 3: 131 199 40
x41283:	jmp printf	; 3: 233 190 107

stdio_test$257:	; PostCall 10

stdio_test$258:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$259:	; Parameter 10 string_3C25lf3E203C25le3E203C25lE3E203C25lg3E203C25lG3E0A# 6
x41286:	mov word [bp + 16], @12426$string_3C25lf3E203C25le3E203C25lE3E203C25lg3E203C25lG3E0A#	; 5: 199 70 16 157 168

stdio_test$260:	; PushFloat -123.456
x41291:	fld qword [@12427$float8$minus123.456#]	; 4: 221 6 188 168

stdio_test$261:	; Parameter 10 -123.456 8
x41295:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$262:	; PushFloat -123.456
x41298:	fld qword [@12428$float8$minus123.456#]	; 4: 221 6 196 168

stdio_test$263:	; Parameter 10 -123.456 16
x41302:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$264:	; PushFloat -123.456
x41305:	fld qword [@12429$float8$minus123.456#]	; 4: 221 6 204 168

stdio_test$265:	; Parameter 10 -123.456 24
x41309:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$266:	; PushFloat -0.000000123456
x41312:	fld qword [@12430$float8$minus0.000000123456#]	; 4: 221 6 212 168

stdio_test$267:	; Parameter 10 -0.000000123456 32
x41316:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$268:	; PushFloat -0.000000123456
x41319:	fld qword [@12431$float8$minus0.000000123456#]	; 4: 221 6 220 168

stdio_test$269:	; Parameter 10 -0.000000123456 40
x41323:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$270:	; Call 10 printf 0
x41326:	mov word [bp + 10], stdio_test$271	; 5: 199 70 10 129 161
x41331:	mov [bp + 12], bp	; 3: 137 110 12
x41334:	add bp, 10	; 3: 131 197 10
x41337:	mov di, bp	; 2: 137 239
x41339:	add di, 40	; 3: 131 199 40
x41342:	jmp printf	; 3: 233 131 107

stdio_test$271:	; PostCall 10

stdio_test$272:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$273:	; Parameter 10 string_3C2523f3E203C2523e3E203C2523E3E203C2523g3E203C2523G3E0A# 6
x41345:	mov word [bp + 16], @12438$string_3C2523f3E203C2523e3E203C2523E3E203C2523g3E203C2523G3E0A#	; 5: 199 70 16 228 168

stdio_test$274:	; PushFloat -123.456
x41350:	fld qword [@12439$float8$minus123.456#]	; 4: 221 6 3 169

stdio_test$275:	; Parameter 10 -123.456 8
x41354:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$276:	; PushFloat -123.456
x41357:	fld qword [@12440$float8$minus123.456#]	; 4: 221 6 11 169

stdio_test$277:	; Parameter 10 -123.456 16
x41361:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$278:	; PushFloat -123.456
x41364:	fld qword [@12441$float8$minus123.456#]	; 4: 221 6 19 169

stdio_test$279:	; Parameter 10 -123.456 24
x41368:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$280:	; PushFloat -123.456
x41371:	fld qword [@12442$float8$minus123.456#]	; 4: 221 6 27 169

stdio_test$281:	; Parameter 10 -123.456 32
x41375:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$282:	; PushFloat -123.456
x41378:	fld qword [@12443$float8$minus123.456#]	; 4: 221 6 35 169

stdio_test$283:	; Parameter 10 -123.456 40
x41382:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$284:	; Call 10 printf 0
x41385:	mov word [bp + 10], stdio_test$285	; 5: 199 70 10 188 161
x41390:	mov [bp + 12], bp	; 3: 137 110 12
x41393:	add bp, 10	; 3: 131 197 10
x41396:	mov di, bp	; 2: 137 239
x41398:	add di, 40	; 3: 131 199 40
x41401:	jmp printf	; 3: 233 72 107

stdio_test$285:	; PostCall 10

stdio_test$286:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$287:	; Parameter 10 string_3C2523lf3E203C2523le3E203C2523lE3E203C2523lg3E203C2523lG3E0A# 6
x41404:	mov word [bp + 16], @12450$string_3C2523lf3E203C2523le3E203C2523lE3E203C2523lg3E203C2523lG3E0A#	; 5: 199 70 16 43 169

stdio_test$288:	; PushFloat -123.456
x41409:	fld qword [@12451$float8$minus123.456#]	; 4: 221 6 79 169

stdio_test$289:	; Parameter 10 -123.456 8
x41413:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$290:	; PushFloat -123.456
x41416:	fld qword [@12452$float8$minus123.456#]	; 4: 221 6 87 169

stdio_test$291:	; Parameter 10 -123.456 16
x41420:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$292:	; PushFloat -123.456
x41423:	fld qword [@12453$float8$minus123.456#]	; 4: 221 6 95 169

stdio_test$293:	; Parameter 10 -123.456 24
x41427:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$294:	; PushFloat -123.456
x41430:	fld qword [@12454$float8$minus123.456#]	; 4: 221 6 103 169

stdio_test$295:	; Parameter 10 -123.456 32
x41434:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$296:	; PushFloat -123.456
x41437:	fld qword [@12455$float8$minus123.456#]	; 4: 221 6 111 169

stdio_test$297:	; Parameter 10 -123.456 40
x41441:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$298:	; Call 10 printf 0
x41444:	mov word [bp + 10], stdio_test$299	; 5: 199 70 10 247 161
x41449:	mov [bp + 12], bp	; 3: 137 110 12
x41452:	add bp, 10	; 3: 131 197 10
x41455:	mov di, bp	; 2: 137 239
x41457:	add di, 40	; 3: 131 199 40
x41460:	jmp printf	; 3: 233 13 107

stdio_test$299:	; PostCall 10

stdio_test$300:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$301:	; Parameter 10 string_3C2562E3f3E203C2562E3e3E203C2562E3E3E203C2562E3g3E203C2562E3G3E0A# 6
x41463:	mov word [bp + 16], @12462$string_3C2562E3f3E203C2562E3e3E203C2562E3E3E203C2562E3g3E203C2562E3G3E0A#	; 5: 199 70 16 119 169

stdio_test$302:	; PushFloat -123.456
x41468:	fld qword [@12463$float8$minus123.456#]	; 4: 221 6 160 169

stdio_test$303:	; Parameter 10 -123.456 8
x41472:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$304:	; PushFloat -123.456
x41475:	fld qword [@12464$float8$minus123.456#]	; 4: 221 6 168 169

stdio_test$305:	; Parameter 10 -123.456 16
x41479:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$306:	; PushFloat -123.456
x41482:	fld qword [@12465$float8$minus123.456#]	; 4: 221 6 176 169

stdio_test$307:	; Parameter 10 -123.456 24
x41486:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$308:	; PushFloat -123.456
x41489:	fld qword [@12466$float8$minus123.456#]	; 4: 221 6 184 169

stdio_test$309:	; Parameter 10 -123.456 32
x41493:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$310:	; PushFloat -123.456
x41496:	fld qword [@12467$float8$minus123.456#]	; 4: 221 6 192 169

stdio_test$311:	; Parameter 10 -123.456 40
x41500:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$312:	; Call 10 printf 0
x41503:	mov word [bp + 10], stdio_test$313	; 5: 199 70 10 50 162
x41508:	mov [bp + 12], bp	; 3: 137 110 12
x41511:	add bp, 10	; 3: 131 197 10
x41514:	mov di, bp	; 2: 137 239
x41516:	add di, 40	; 3: 131 199 40
x41519:	jmp printf	; 3: 233 210 106

stdio_test$313:	; PostCall 10

stdio_test$314:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$315:	; Parameter 10 string_3C2562E3lf3E203C2562E3le3E203C2562E3lE3E203C2562E3lg3E203C2562E3lG3E0A0A# 6
x41522:	mov word [bp + 16], @12474$string_3C2562E3lf3E203C2562E3le3E203C2562E3lE3E203C2562E3lg3E203C2562E3lG3E0A0A#	; 5: 199 70 16 200 169

stdio_test$316:	; PushFloat -123.456
x41527:	fld qword [@12475$float8$minus123.456#]	; 4: 221 6 247 169

stdio_test$317:	; Parameter 10 -123.456 8
x41531:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$318:	; PushFloat -123.456
x41534:	fld qword [@12476$float8$minus123.456#]	; 4: 221 6 255 169

stdio_test$319:	; Parameter 10 -123.456 16
x41538:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$320:	; PushFloat -123.456
x41541:	fld qword [@12477$float8$minus123.456#]	; 4: 221 6 7 170

stdio_test$321:	; Parameter 10 -123.456 24
x41545:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$322:	; PushFloat -123.456
x41548:	fld qword [@12478$float8$minus123.456#]	; 4: 221 6 15 170

stdio_test$323:	; Parameter 10 -123.456 32
x41552:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$324:	; PushFloat -123.456
x41555:	fld qword [@12479$float8$minus123.456#]	; 4: 221 6 23 170

stdio_test$325:	; Parameter 10 -123.456 40
x41559:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$326:	; Call 10 printf 0
x41562:	mov word [bp + 10], stdio_test$327	; 5: 199 70 10 109 162
x41567:	mov [bp + 12], bp	; 3: 137 110 12
x41570:	add bp, 10	; 3: 131 197 10
x41573:	mov di, bp	; 2: 137 239
x41575:	add di, 40	; 3: 131 199 40
x41578:	jmp printf	; 3: 233 151 106

stdio_test$327:	; PostCall 10

stdio_test$328:	; Assign a 0
x41581:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

stdio_test$329:	; Assign b 0
x41586:	mov word [bp + 8], 0	; 5: 199 70 8 0 0

stdio_test$330:	; Assign n 0
x41591:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

stdio_test$331:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$332:	; Parameter 12 string_Please20write20three20integers3A20# 6
x41596:	mov word [bp + 18], @12495$string_Please20write20three20integers3A20#	; 5: 199 70 18 31 170

stdio_test$333:	; Call 12 printf 0
x41601:	mov word [bp + 12], stdio_test$334	; 5: 199 70 12 145 162
x41606:	mov [bp + 14], bp	; 3: 137 110 14
x41609:	add bp, 12	; 3: 131 197 12
x41612:	mov di, bp	; 2: 137 239
x41614:	jmp printf	; 3: 233 115 106

stdio_test$334:	; PostCall 12

stdio_test$335:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$336:	; Parameter 12 string_1232045620789# 6
x41617:	mov word [bp + 18], @12497$string_1232045620789#	; 5: 199 70 18 61 170

stdio_test$337:	; Parameter 12 string_25i20252Ai2025i2025n# 8
x41622:	mov word [bp + 20], @12498$string_25i20252Ai2025i2025n#	; 5: 199 70 20 73 170

stdio_test$338:	; address £temporary5630 a
x41627:	mov si, bp	; 2: 137 238
x41629:	add si, 6	; 3: 131 198 6

stdio_test$339:	; Parameter 12 £temporary5630 10
x41632:	mov [bp + 22], si	; 3: 137 118 22

stdio_test$340:	; address £temporary5631 b
x41635:	mov si, bp	; 2: 137 238
x41637:	add si, 8	; 3: 131 198 8

stdio_test$341:	; Parameter 12 £temporary5631 12
x41640:	mov [bp + 24], si	; 3: 137 118 24

stdio_test$342:	; address £temporary5632 n
x41643:	mov si, bp	; 2: 137 238
x41645:	add si, 10	; 3: 131 198 10

stdio_test$343:	; Parameter 12 £temporary5632 14
x41648:	mov [bp + 26], si	; 3: 137 118 26

stdio_test$344:	; Call 12 sscanf 0
x41651:	mov word [bp + 12], stdio_test$345	; 5: 199 70 12 198 162
x41656:	mov [bp + 14], bp	; 3: 137 110 14
x41659:	add bp, 12	; 3: 131 197 12
x41662:	mov di, bp	; 2: 137 239
x41664:	add di, 6	; 3: 131 199 6
x41667:	jmp sscanf	; 3: 233 15 8

stdio_test$345:	; PostCall 12

stdio_test$346:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$347:	; Parameter 12 string_3C25i3E203C25i3E203C25i3E0A# 6
x41670:	mov word [bp + 18], @12503$string_3C25i3E203C25i3E203C25i3E0A#	; 5: 199 70 18 86 170

stdio_test$348:	; Parameter 12 a 8
x41675:	mov ax, [bp + 6]	; 3: 139 70 6
x41678:	mov [bp + 20], ax	; 3: 137 70 20

stdio_test$349:	; Parameter 12 b 10
x41681:	mov ax, [bp + 8]	; 3: 139 70 8
x41684:	mov [bp + 22], ax	; 3: 137 70 22

stdio_test$350:	; Parameter 12 n 12
x41687:	mov ax, [bp + 10]	; 3: 139 70 10
x41690:	mov [bp + 24], ax	; 3: 137 70 24

stdio_test$351:	; Call 12 printf 0
x41693:	mov word [bp + 12], stdio_test$352	; 5: 199 70 12 240 162
x41698:	mov [bp + 14], bp	; 3: 137 110 14
x41701:	add bp, 12	; 3: 131 197 12
x41704:	mov di, bp	; 2: 137 239
x41706:	add di, 6	; 3: 131 199 6
x41709:	jmp printf	; 3: 233 20 106

stdio_test$352:	; PostCall 12

stdio_test$353:	; CallHeader 106 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$354:	; Parameter 106 string_Please20write20the20patterns205Babc5D3A20# 6
x41712:	mov word [bp + 112], @12508$string_Please20write20the20patterns205Babc5D3A20#	; 5: 199 70 112 102 170

stdio_test$355:	; Call 106 printf 0
x41717:	mov word [bp + 106], stdio_test$356	; 5: 199 70 106 5 163
x41722:	mov [bp + 108], bp	; 3: 137 110 108
x41725:	add bp, 106	; 3: 131 197 106
x41728:	mov di, bp	; 2: 137 239
x41730:	jmp printf	; 3: 233 255 105

stdio_test$356:	; PostCall 106

stdio_test$357:	; CallHeader 106 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$358:	; Parameter 106 string_abcdef# 6
x41733:	mov word [bp + 112], @12510$string_abcdef#	; 5: 199 70 112 136 170

stdio_test$359:	; Parameter 106 string_255Babc5D# 8
x41738:	mov word [bp + 114], @12511$string_255Babc5D#	; 5: 199 70 114 143 170

stdio_test$360:	; Parameter 106 s 10
x41743:	mov [bp + 116], bp	; 3: 137 110 116
x41746:	add word [bp + 116], 6	; 4: 131 70 116 6

stdio_test$361:	; Call 106 sscanf 0
x41750:	mov word [bp + 106], stdio_test$362	; 5: 199 70 106 41 163
x41755:	mov [bp + 108], bp	; 3: 137 110 108
x41758:	add bp, 106	; 3: 131 197 106
x41761:	mov di, bp	; 2: 137 239
x41763:	add di, 2	; 3: 131 199 2
x41766:	jmp sscanf	; 3: 233 172 7

stdio_test$362:	; PostCall 106

stdio_test$363:	; CallHeader 106 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$364:	; Parameter 106 string_3C25s3E0A# 6
x41769:	mov word [bp + 112], @12513$string_3C25s3E0A#	; 5: 199 70 112 150 170

stdio_test$365:	; Parameter 106 s 8
x41774:	mov [bp + 114], bp	; 3: 137 110 114
x41777:	add word [bp + 114], 6	; 4: 131 70 114 6

stdio_test$366:	; Call 106 printf 0
x41781:	mov word [bp + 106], stdio_test$367	; 5: 199 70 106 72 163
x41786:	mov [bp + 108], bp	; 3: 137 110 108
x41789:	add bp, 106	; 3: 131 197 106
x41792:	mov di, bp	; 2: 137 239
x41794:	add di, 2	; 3: 131 199 2
x41797:	jmp printf	; 3: 233 188 105

stdio_test$367:	; PostCall 106

stdio_test$368:	; CallHeader 106 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$369:	; Parameter 106 string_Please20write20the20patterns205B5Eabc5D3A20# 6
x41800:	mov word [bp + 112], @12515$string_Please20write20the20patterns205B5Eabc5D3A20#	; 5: 199 70 112 156 170

stdio_test$370:	; Call 106 printf 0
x41805:	mov word [bp + 106], stdio_test$371	; 5: 199 70 106 93 163
x41810:	mov [bp + 108], bp	; 3: 137 110 108
x41813:	add bp, 106	; 3: 131 197 106
x41816:	mov di, bp	; 2: 137 239
x41818:	jmp printf	; 3: 233 167 105

stdio_test$371:	; PostCall 106

stdio_test$372:	; CallHeader 106 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$373:	; Parameter 106 string_defabc# 6
x41821:	mov word [bp + 112], @12517$string_defabc#	; 5: 199 70 112 191 170

stdio_test$374:	; Parameter 106 string_255B5Eabc5D# 8
x41826:	mov word [bp + 114], @12518$string_255B5Eabc5D#	; 5: 199 70 114 198 170

stdio_test$375:	; Parameter 106 s 10
x41831:	mov [bp + 116], bp	; 3: 137 110 116
x41834:	add word [bp + 116], 6	; 4: 131 70 116 6

stdio_test$376:	; Call 106 sscanf 0
x41838:	mov word [bp + 106], stdio_test$377	; 5: 199 70 106 129 163
x41843:	mov [bp + 108], bp	; 3: 137 110 108
x41846:	add bp, 106	; 3: 131 197 106
x41849:	mov di, bp	; 2: 137 239
x41851:	add di, 2	; 3: 131 199 2
x41854:	jmp sscanf	; 3: 233 84 7

stdio_test$377:	; PostCall 106

stdio_test$378:	; CallHeader 106 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$379:	; Parameter 106 string_3C25s3E0A0A# 6
x41857:	mov word [bp + 112], @12520$string_3C25s3E0A0A#	; 5: 199 70 112 206 170

stdio_test$380:	; Parameter 106 s 8
x41862:	mov [bp + 114], bp	; 3: 137 110 114
x41865:	add word [bp + 114], 6	; 4: 131 70 114 6

stdio_test$381:	; Call 106 printf 0
x41869:	mov word [bp + 106], stdio_test$382	; 5: 199 70 106 160 163
x41874:	mov [bp + 108], bp	; 3: 137 110 108
x41877:	add bp, 106	; 3: 131 197 106
x41880:	mov di, bp	; 2: 137 239
x41882:	add di, 2	; 3: 131 199 2
x41885:	jmp printf	; 3: 233 100 105

stdio_test$382:	; PostCall 106

stdio_test$383:	; Return 0
x41888:	mov ax, [bp]	; 3: 139 70 0
x41891:	mov di, [bp + 4]	; 3: 139 126 4
x41894:	mov bp, [bp + 2]	; 3: 139 110 2
x41897:	jmp ax	; 2: 255 224

stdio_test$384:	; FunctionEnd stdio_test

@12122$string_3C25i3E203C25i3E203C25li3E203C25li3E203C25u3E203C25lu3E0A0A#:
x41899:	db "<%i> <%i> <%li> <%li> <%u> <%lu>", 10, 10, 0	; 35: 60 37 105 62 32 60 37 105 62 32 60 37 108 105 62 32 60 37 108 105 62 32 60 37 117 62 32 60 37 108 117 62 10 10 0

@12136$string_3C256i3E203C256i3E203C256li3E203C256li3E203C256u3E203C256lu3E0A#:
x41934:	db "<%6i> <%6i> <%6li> <%6li> <%6u> <%6lu>", 10, 0	; 40: 60 37 54 105 62 32 60 37 54 105 62 32 60 37 54 108 105 62 32 60 37 54 108 105 62 32 60 37 54 117 62 32 60 37 54 108 117 62 10 0

@12150$string_3C252B6i3E203C252B6i3E203C252B6li3E203C252B6li3E203C252B6u3E203C252B6lu3E0A#:
x41974:	db "<%+6i> <%+6i> <%+6li> <%+6li> <%+6u> <%+6lu>", 10, 0	; 46: 60 37 43 54 105 62 32 60 37 43 54 105 62 32 60 37 43 54 108 105 62 32 60 37 43 54 108 105 62 32 60 37 43 54 117 62 32 60 37 43 54 108 117 62 10 0

@12164$string_3C252D6i3E203C252D6i3E203C252D6li3E203C252D6li3E203C252D6u3E203C252D6lu3E0A#:
x42020:	db "<%-6i> <%-6i> <%-6li> <%-6li> <%-6u> <%-6lu>", 10, 0	; 46: 60 37 45 54 105 62 32 60 37 45 54 105 62 32 60 37 45 54 108 105 62 32 60 37 45 54 108 105 62 32 60 37 45 54 117 62 32 60 37 45 54 108 117 62 10 0

@12178$string_3C252B2D6i3E203C252B2D6i3E203C252B2D6li3E203C252B2D6li3E203C252B2D6u3E203C252B2D6lu3E0A0A#:
x42066:	db "<%+-6i> <%+-6i> <%+-6li> <%+-6li> <%+-6u> <%+-6lu>", 10, 10, 0	; 53: 60 37 43 45 54 105 62 32 60 37 43 45 54 105 62 32 60 37 43 45 54 108 105 62 32 60 37 43 45 54 108 105 62 32 60 37 43 45 54 117 62 32 60 37 43 45 54 108 117 62 10 10 0

@12196$string_3C2506i3E203C2506i3E203C2506li3E203C2506li3E203C2506u3E203C2506lu3E0A#:
x42119:	db "<%06i> <%06i> <%06li> <%06li> <%06u> <%06lu>", 10, 0	; 46: 60 37 48 54 105 62 32 60 37 48 54 105 62 32 60 37 48 54 108 105 62 32 60 37 48 54 108 105 62 32 60 37 48 54 117 62 32 60 37 48 54 108 117 62 10 0

@12210$string_3C252B06i3E203C252B06i3E203C252B06li3E203C252B06li3E203C252B06u3E203C252B06lu3E0A#:
x42165:	db "<%+06i> <%+06i> <%+06li> <%+06li> <%+06u> <%+06lu>", 10, 0	; 52: 60 37 43 48 54 105 62 32 60 37 43 48 54 105 62 32 60 37 43 48 54 108 105 62 32 60 37 43 48 54 108 105 62 32 60 37 43 48 54 117 62 32 60 37 43 48 54 108 117 62 10 0

@12224$string_3C252D06i3E203C252D06i3E203C252D06li3E203C252D06li3E203C252D06u3E203C252D06lu3E0A#:
x42217:	db "<%-06i> <%-06i> <%-06li> <%-06li> <%-06u> <%-06lu>", 10, 0	; 52: 60 37 45 48 54 105 62 32 60 37 45 48 54 105 62 32 60 37 45 48 54 108 105 62 32 60 37 45 48 54 108 105 62 32 60 37 45 48 54 117 62 32 60 37 45 48 54 108 117 62 10 0

@12238$string_3C252B2D06i3E203C252B2D06i3E203C252B2D06li3E203C252B2D06li3E203C252B2D06u3E203C252B2D06lu3E0A0A#:
x42269:	db "<%+-06i> <%+-06i> <%+-06li> <%+-06li> <%+-06u> <%+-06lu>", 10, 10, 0	; 59: 60 37 43 45 48 54 105 62 32 60 37 43 45 48 54 105 62 32 60 37 43 45 48 54 108 105 62 32 60 37 43 45 48 54 108 105 62 32 60 37 43 45 48 54 117 62 32 60 37 43 45 48 54 108 117 62 10 10 0

@12252$string_3C25206i3E203C25206i3E203C25206li3E203C25206li3E203C25206u3E203C25206lu3E0A#:
x42328:	db "<% 6i> <% 6i> <% 6li> <% 6li> <% 6u> <% 6lu>", 10, 0	; 46: 60 37 32 54 105 62 32 60 37 32 54 105 62 32 60 37 32 54 108 105 62 32 60 37 32 54 108 105 62 32 60 37 32 54 117 62 32 60 37 32 54 108 117 62 10 0

@12266$string_3C252B206i3E203C252B206i3E203C252B206li3E203C252B206li3E203C252B206u3E203C252B206lu3E0A#:
x42374:	db "<%+ 6i> <%+ 6i> <%+ 6li> <%+ 6li> <%+ 6u> <%+ 6lu>", 10, 0	; 52: 60 37 43 32 54 105 62 32 60 37 43 32 54 105 62 32 60 37 43 32 54 108 105 62 32 60 37 43 32 54 108 105 62 32 60 37 43 32 54 117 62 32 60 37 43 32 54 108 117 62 10 0

@12280$string_3C252D206i3E203C252D206i3E203C252D206li3E203C252D206li3E203C252D206u3E203C252D206lu3E0A#:
x42426:	db "<%- 6i> <%- 6i> <%- 6li> <%- 6li> <%- 6u> <%- 6lu>", 10, 0	; 52: 60 37 45 32 54 105 62 32 60 37 45 32 54 105 62 32 60 37 45 32 54 108 105 62 32 60 37 45 32 54 108 105 62 32 60 37 45 32 54 117 62 32 60 37 45 32 54 108 117 62 10 0

@12294$string_3C252B2D206i3E203C252B2D206i3E203C252B2D206li3E203C252B2D206li3E203C252B2D206u3E203C252B2D206lu3E0A0A#:
x42478:	db "<%+- 6i> <%+- 6i> <%+- 6li> <%+- 6li> <%+- 6u> <%+- 6lu>", 10, 10, 0	; 59: 60 37 43 45 32 54 105 62 32 60 37 43 45 32 54 105 62 32 60 37 43 45 32 54 108 105 62 32 60 37 43 45 32 54 108 105 62 32 60 37 43 45 32 54 117 62 32 60 37 43 45 32 54 108 117 62 10 10 0

@12308$string_3C25x3E203C25X3E203C25o3E203C25lx3E203C25lX3E203C25lo3E0A#:
x42537:	db "<%x> <%X> <%o> <%lx> <%lX> <%lo>", 10, 0	; 34: 60 37 120 62 32 60 37 88 62 32 60 37 111 62 32 60 37 108 120 62 32 60 37 108 88 62 32 60 37 108 111 62 10 0

@12322$string_3C2523x3E203C2523X3E203C2523o3E203C2523lx3E203C2523lX3E203C2523lo3E0A#:
x42571:	db "<%#x> <%#X> <%#o> <%#lx> <%#lX> <%#lo>", 10, 0	; 40: 60 37 35 120 62 32 60 37 35 88 62 32 60 37 35 111 62 32 60 37 35 108 120 62 32 60 37 35 108 88 62 32 60 37 35 108 111 62 10 0

@12336$string_3C25253E203C25s3E203C25c3E203C25p3E0A0A#:
x42611:	db "<%%> <%s> <%c> <%p>", 10, 10, 0	; 22: 60 37 37 62 32 60 37 115 62 32 60 37 99 62 32 60 37 112 62 10 10 0

@12337$string_Hello2C20World21#:
x42633:	db "Hello, World!", 0	; 14: 72 101 108 108 111 44 32 87 111 114 108 100 33 0

@12342$string_3C25f3E203C25e3E203C25E3E203C25g3E203C25G3E0A#:
x42647:	db "<%f> <%e> <%E> <%g> <%G>", 10, 0	; 26: 60 37 102 62 32 60 37 101 62 32 60 37 69 62 32 60 37 103 62 32 60 37 71 62 10 0

@12343$float8$123.456#:
x42673:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12344$float8$123.456#:
x42681:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12345$float8$123.456#:
x42689:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12346$float8$123456.1#:
x42697:	dq 123456.1	; 8: 154 153 153 153 1 36 254 64

@12347$float8$123456.1#:
x42705:	dq 123456.1	; 8: 154 153 153 153 1 36 254 64

@12354$string_3C25lf3E203C25le3E203C25lE3E203C25lg3E203C25lG3E0A#:
x42713:	db "<%lf> <%le> <%lE> <%lg> <%lG>", 10, 0	; 31: 60 37 108 102 62 32 60 37 108 101 62 32 60 37 108 69 62 32 60 37 108 103 62 32 60 37 108 71 62 10 0

@12355$float8$123.456#:
x42744:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12356$float8$123.456#:
x42752:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12357$float8$123.456#:
x42760:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12358$float8$123456.1#:
x42768:	dq 123456.1	; 8: 154 153 153 153 1 36 254 64

@12359$float8$123456.1#:
x42776:	dq 123456.1	; 8: 154 153 153 153 1 36 254 64

@12366$string_3C2523f3E203C2523e3E203C2523E3E203C2523g3E203C2523G3E0A#:
x42784:	db "<%#f> <%#e> <%#E> <%#g> <%#G>", 10, 0	; 31: 60 37 35 102 62 32 60 37 35 101 62 32 60 37 35 69 62 32 60 37 35 103 62 32 60 37 35 71 62 10 0

@12367$float8$123.456#:
x42815:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12368$float8$123.456#:
x42823:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12369$float8$123.456#:
x42831:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12370$float8$123.456#:
x42839:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12371$float8$123.456#:
x42847:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12378$string_3C2523lf3E203C2523le3E203C2523lE3E203C2523lg3E203C2523lG3E0A#:
x42855:	db "<%#lf> <%#le> <%#lE> <%#lg> <%#lG>", 10, 0	; 36: 60 37 35 108 102 62 32 60 37 35 108 101 62 32 60 37 35 108 69 62 32 60 37 35 108 103 62 32 60 37 35 108 71 62 10 0

@12379$float8$123.456#:
x42891:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12380$float8$123.456#:
x42899:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12381$float8$123.456#:
x42907:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12382$float8$123.456#:
x42915:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12383$float8$123.456#:
x42923:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12390$string_3C2562E3f3E203C2562E3e3E203C2562E3E3E203C2562E3g3E203C2562E3G3E0A#:
x42931:	db "<%6.3f> <%6.3e> <%6.3E> <%6.3g> <%6.3G>", 10, 0	; 41: 60 37 54 46 51 102 62 32 60 37 54 46 51 101 62 32 60 37 54 46 51 69 62 32 60 37 54 46 51 103 62 32 60 37 54 46 51 71 62 10 0

@12391$float8$123.456#:
x42972:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12392$float8$123.456#:
x42980:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12393$float8$123.456#:
x42988:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12394$float8$123.456#:
x42996:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12395$float8$123.456#:
x43004:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12402$string_3C2562E3lf3E203C2562E3le3E203C2562E3lE3E203C2562E3lg3E203C2562E3lG3E0A0A#:
x43012:	db "<%6.3lf> <%6.3le> <%6.3lE> <%6.3lg> <%6.3lG>", 10, 10, 0	; 47: 60 37 54 46 51 108 102 62 32 60 37 54 46 51 108 101 62 32 60 37 54 46 51 108 69 62 32 60 37 54 46 51 108 103 62 32 60 37 54 46 51 108 71 62 10 10 0

@12403$float8$123.456#:
x43059:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12404$float8$123.456#:
x43067:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12405$float8$123.456#:
x43075:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12406$float8$123.456#:
x43083:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12407$float8$123.456#:
x43091:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12414$string_3C25f3E203C25e3E203C25E3E203C25g3E203C25G3E0A#:
x43099:	db "<%f> <%e> <%E> <%g> <%G>", 10, 0	; 26: 60 37 102 62 32 60 37 101 62 32 60 37 69 62 32 60 37 103 62 32 60 37 71 62 10 0

@12415$float8$minus123.456#:
x43125:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12416$float8$minus123.456#:
x43133:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12417$float8$minus123.456#:
x43141:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12418$float8$minus0.000000123456#:
x43149:	dq -0.000000123456	; 8: 23 95 204 117 234 145 128 190

@12419$float8$minus0.000000123456#:
x43157:	dq -0.000000123456	; 8: 23 95 204 117 234 145 128 190

@12426$string_3C25lf3E203C25le3E203C25lE3E203C25lg3E203C25lG3E0A#:
x43165:	db "<%lf> <%le> <%lE> <%lg> <%lG>", 10, 0	; 31: 60 37 108 102 62 32 60 37 108 101 62 32 60 37 108 69 62 32 60 37 108 103 62 32 60 37 108 71 62 10 0

@12427$float8$minus123.456#:
x43196:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12428$float8$minus123.456#:
x43204:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12429$float8$minus123.456#:
x43212:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12430$float8$minus0.000000123456#:
x43220:	dq -0.000000123456	; 8: 23 95 204 117 234 145 128 190

@12431$float8$minus0.000000123456#:
x43228:	dq -0.000000123456	; 8: 23 95 204 117 234 145 128 190

@12438$string_3C2523f3E203C2523e3E203C2523E3E203C2523g3E203C2523G3E0A#:
x43236:	db "<%#f> <%#e> <%#E> <%#g> <%#G>", 10, 0	; 31: 60 37 35 102 62 32 60 37 35 101 62 32 60 37 35 69 62 32 60 37 35 103 62 32 60 37 35 71 62 10 0

@12439$float8$minus123.456#:
x43267:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12440$float8$minus123.456#:
x43275:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12441$float8$minus123.456#:
x43283:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12442$float8$minus123.456#:
x43291:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12443$float8$minus123.456#:
x43299:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12450$string_3C2523lf3E203C2523le3E203C2523lE3E203C2523lg3E203C2523lG3E0A#:
x43307:	db "<%#lf> <%#le> <%#lE> <%#lg> <%#lG>", 10, 0	; 36: 60 37 35 108 102 62 32 60 37 35 108 101 62 32 60 37 35 108 69 62 32 60 37 35 108 103 62 32 60 37 35 108 71 62 10 0

@12451$float8$minus123.456#:
x43343:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12452$float8$minus123.456#:
x43351:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12453$float8$minus123.456#:
x43359:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12454$float8$minus123.456#:
x43367:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12455$float8$minus123.456#:
x43375:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12462$string_3C2562E3f3E203C2562E3e3E203C2562E3E3E203C2562E3g3E203C2562E3G3E0A#:
x43383:	db "<%6.3f> <%6.3e> <%6.3E> <%6.3g> <%6.3G>", 10, 0	; 41: 60 37 54 46 51 102 62 32 60 37 54 46 51 101 62 32 60 37 54 46 51 69 62 32 60 37 54 46 51 103 62 32 60 37 54 46 51 71 62 10 0

@12463$float8$minus123.456#:
x43424:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12464$float8$minus123.456#:
x43432:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12465$float8$minus123.456#:
x43440:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12466$float8$minus123.456#:
x43448:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12467$float8$minus123.456#:
x43456:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12474$string_3C2562E3lf3E203C2562E3le3E203C2562E3lE3E203C2562E3lg3E203C2562E3lG3E0A0A#:
x43464:	db "<%6.3lf> <%6.3le> <%6.3lE> <%6.3lg> <%6.3lG>", 10, 10, 0	; 47: 60 37 54 46 51 108 102 62 32 60 37 54 46 51 108 101 62 32 60 37 54 46 51 108 69 62 32 60 37 54 46 51 108 103 62 32 60 37 54 46 51 108 71 62 10 10 0

@12475$float8$minus123.456#:
x43511:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12476$float8$minus123.456#:
x43519:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12477$float8$minus123.456#:
x43527:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12478$float8$minus123.456#:
x43535:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12479$float8$minus123.456#:
x43543:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12495$string_Please20write20three20integers3A20#:
x43551:	db "Please write three integers: ", 0	; 30: 80 108 101 97 115 101 32 119 114 105 116 101 32 116 104 114 101 101 32 105 110 116 101 103 101 114 115 58 32 0

@12497$string_1232045620789#:
x43581:	db "123 456 789", 0	; 12: 49 50 51 32 52 53 54 32 55 56 57 0

@12498$string_25i20252Ai2025i2025n#:
x43593:	db "%i %*i %i %n", 0	; 13: 37 105 32 37 42 105 32 37 105 32 37 110 0

@12503$string_3C25i3E203C25i3E203C25i3E0A#:
x43606:	db "<%i> <%i> <%i>", 10, 0	; 16: 60 37 105 62 32 60 37 105 62 32 60 37 105 62 10 0

@12508$string_Please20write20the20patterns205Babc5D3A20#:
x43622:	db "Please write the patterns [abc]: ", 0	; 34: 80 108 101 97 115 101 32 119 114 105 116 101 32 116 104 101 32 112 97 116 116 101 114 110 115 32 91 97 98 99 93 58 32 0

@12510$string_abcdef#:
x43656:	db "abcdef", 0	; 7: 97 98 99 100 101 102 0

@12511$string_255Babc5D#:
x43663:	db "%[abc]", 0	; 7: 37 91 97 98 99 93 0

@12513$string_3C25s3E0A#:
x43670:	db "<%s>", 10, 0	; 6: 60 37 115 62 10 0

@12515$string_Please20write20the20patterns205B5Eabc5D3A20#:
x43676:	db "Please write the patterns [^abc]: ", 0	; 35: 80 108 101 97 115 101 32 119 114 105 116 101 32 116 104 101 32 112 97 116 116 101 114 110 115 32 91 94 97 98 99 93 58 32 0

@12517$string_defabc#:
x43711:	db "defabc", 0	; 7: 100 101 102 97 98 99 0

@12518$string_255B5Eabc5D#:
x43718:	db "%[^abc]", 0	; 8: 37 91 94 97 98 99 93 0

@12520$string_3C25s3E0A0A#:
x43726:	db "<%s>", 10, 10, 0	; 7: 60 37 115 62 10 10 0

sscanf:	; address £temporary1577 format
x43733:	mov si, bp	; 2: 137 238
x43735:	add si, 8	; 3: 131 198 8

sscanf$1:	; IntegralToIntegral £temporary1578 £temporary1577

sscanf$2:	; BinaryAdd arg_list £temporary1578 2
x43738:	add si, 2	; 3: 131 198 2
x43741:	mov [di + 10], si	; 3: 137 117 10

sscanf$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

sscanf$4:	; Parameter 12 inString 6
x43744:	mov ax, [bp + 6]	; 3: 139 70 6
x43747:	mov [di + 18], ax	; 3: 137 69 18

sscanf$5:	; Parameter 12 format 8
x43750:	mov ax, [bp + 8]	; 3: 139 70 8
x43753:	mov [di + 20], ax	; 3: 137 69 20

sscanf$6:	; Parameter 12 arg_list 10
x43756:	mov ax, [di + 10]	; 3: 139 69 10
x43759:	mov [di + 22], ax	; 3: 137 69 22

sscanf$7:	; Call 12 vsscanf 0
x43762:	mov word [di + 12], sscanf$8	; 5: 199 69 12 5 171
x43767:	mov [di + 14], bp	; 3: 137 109 14
x43770:	mov [di + 16], di	; 3: 137 125 16
x43773:	add di, 12	; 3: 131 199 12
x43776:	mov bp, di	; 2: 137 253
x43778:	nop	; 1: 144
x43779:	jmp vsscanf	; 2: 235 11

sscanf$8:	; PostCall 12

sscanf$9:	; GetReturnValue £temporary1580

sscanf$10:	; SetReturnValue £temporary1580

sscanf$11:	; Return £temporary1580
x43781:	mov ax, [bp]	; 3: 139 70 0
x43784:	mov di, [bp + 4]	; 3: 139 126 4
x43787:	mov bp, [bp + 2]	; 3: 139 110 2
x43790:	jmp ax	; 2: 255 224

sscanf$12:	; FunctionEnd sscanf

vsscanf:	; Assign g_inStatus 1
x43792:	mov word [g_inStatus], 1	; 6: 199 6 202 95 1 0

vsscanf$1:	; IntegralToIntegral £temporary1585 inString
x43798:	mov ax, [bp + 6]	; 3: 139 70 6

vsscanf$2:	; Assign g_inDevice £temporary1585
x43801:	mov [g_inDevice], ax	; 3: 163 204 95

vsscanf$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

vsscanf$4:	; Parameter 12 format 6
x43804:	mov ax, [bp + 8]	; 3: 139 70 8
x43807:	mov [bp + 18], ax	; 3: 137 70 18

vsscanf$5:	; Parameter 12 arg_list 8
x43810:	mov ax, [bp + 10]	; 3: 139 70 10
x43813:	mov [bp + 20], ax	; 3: 137 70 20

vsscanf$6:	; Call 12 scanFormat 0
x43816:	mov word [bp + 12], vsscanf$7	; 5: 199 70 12 54 171
x43821:	mov [bp + 14], bp	; 3: 137 110 14
x43824:	add bp, 12	; 3: 131 197 12
x43827:	jmp scanFormat	; 3: 233 152 180

vsscanf$7:	; PostCall 12

vsscanf$8:	; GetReturnValue £temporary1586

vsscanf$9:	; SetReturnValue £temporary1586

vsscanf$10:	; Return £temporary1586
x43830:	mov ax, [bp]	; 3: 139 70 0
x43833:	mov di, [bp + 4]	; 3: 139 126 4
x43836:	mov bp, [bp + 2]	; 3: 139 110 2
x43839:	jmp ax	; 2: 255 224

vsscanf$11:	; FunctionEnd vsscanf

string_test:	; Assign s string_Hello2C20World21#
x43841:	mov word [bp + 8], @9688$string_Hello2C20World21#	; 5: 199 70 8 200 177

string_test$1:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$2:	; Parameter 212 string_strlen282225s2229203D2025i0A# 6
x43846:	mov word [bp + 218], @9697$string_strlen282225s2229203D2025i0A#	; 6: 199 134 218 0 214 177

string_test$3:	; Parameter 212 s 8
x43852:	mov ax, [bp + 8]	; 3: 139 70 8
x43855:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$4:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$5:	; Parameter 212 s 16
x43859:	mov ax, [bp + 8]	; 3: 139 70 8
x43862:	mov [bp + 228], ax	; 4: 137 134 228 0

string_test$6:	; Call 212 strlen 10
x43866:	mov word [bp + 222], string_test$7	; 6: 199 134 222 0 107 171
x43872:	mov [bp + 224], bp	; 4: 137 174 224 0
x43876:	add bp, 222	; 4: 129 197 222 0
x43880:	jmp strlen	; 3: 233 147 225

string_test$7:	; PostCall 212

string_test$8:	; GetReturnValue £temporary4304

string_test$9:	; Parameter 212 £temporary4304 10
x43883:	mov [bp + 222], bx	; 4: 137 158 222 0

string_test$10:	; Call 212 printf 0
x43887:	mov word [bp + 212], string_test$11	; 6: 199 134 212 0 133 171
x43893:	mov [bp + 214], bp	; 4: 137 174 214 0
x43897:	add bp, 212	; 4: 129 197 212 0
x43901:	mov di, bp	; 2: 137 239
x43903:	add di, 4	; 3: 131 199 4
x43906:	jmp printf	; 3: 233 127 97

string_test$11:	; PostCall 212

string_test$12:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$13:	; Parameter 212 t 6
x43909:	mov [bp + 218], bp	; 4: 137 174 218 0
x43913:	add word [bp + 218], 10	; 5: 131 134 218 0 10

string_test$14:	; Parameter 212 s 8
x43918:	mov ax, [bp + 8]	; 3: 139 70 8
x43921:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$15:	; Call 212 strcpy 0
x43925:	mov word [bp + 212], string_test$16	; 6: 199 134 212 0 166 171
x43931:	mov [bp + 214], bp	; 4: 137 174 214 0
x43935:	add bp, 212	; 4: 129 197 212 0
x43939:	jmp strcpy	; 3: 233 155 178

string_test$16:	; PostCall 212

string_test$17:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$18:	; Parameter 212 u 6
x43942:	mov [bp + 218], bp	; 4: 137 174 218 0
x43946:	add word [bp + 218], 110	; 5: 131 134 218 0 110

string_test$19:	; Parameter 212 s 8
x43951:	mov ax, [bp + 8]	; 3: 139 70 8
x43954:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$20:	; Parameter 212 5 10
x43958:	mov word [bp + 222], 5	; 6: 199 134 222 0 5 0

string_test$21:	; Call 212 strncpy 0
x43964:	mov word [bp + 212], string_test$22	; 6: 199 134 212 0 205 171
x43970:	mov [bp + 214], bp	; 4: 137 174 214 0
x43974:	add bp, 212	; 4: 129 197 212 0
x43978:	jmp strncpy	; 3: 233 37 8

string_test$22:	; PostCall 212

string_test$23:	; Deref £temporary4308 -> u u 5
x43981:	mov si, bp	; 2: 137 238
x43983:	add si, 110	; 3: 131 198 110

string_test$24:	; Assign £temporary4308 -> u 0
x43986:	mov byte [si + 5], 0	; 4: 198 68 5 0

string_test$25:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$26:	; Parameter 212 string_t203D202225s222C20u203D202225s220A# 6
x43990:	mov word [bp + 218], @9709$string_t203D202225s222C20u203D202225s220A#	; 6: 199 134 218 0 233 177

string_test$27:	; Parameter 212 t 8
x43996:	mov [bp + 220], bp	; 4: 137 174 220 0
x44000:	add word [bp + 220], 10	; 5: 131 134 220 0 10

string_test$28:	; Parameter 212 u 10
x44005:	mov [bp + 222], bp	; 4: 137 174 222 0
x44009:	add word [bp + 222], 110	; 5: 131 134 222 0 110

string_test$29:	; Call 212 printf 0
x44014:	mov word [bp + 212], string_test$30	; 6: 199 134 212 0 4 172
x44020:	mov [bp + 214], bp	; 4: 137 174 214 0
x44024:	add bp, 212	; 4: 129 197 212 0
x44028:	mov di, bp	; 2: 137 239
x44030:	add di, 4	; 3: 131 199 4
x44033:	jmp printf	; 3: 233 0 97

string_test$30:	; PostCall 212

string_test$31:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$32:	; Parameter 212 t 6
x44036:	mov [bp + 218], bp	; 4: 137 174 218 0
x44040:	add word [bp + 218], 10	; 5: 131 134 218 0 10

string_test$33:	; Parameter 212 string_abc# 8
x44045:	mov word [bp + 220], @9711$string_abc#	; 6: 199 134 220 0 253 177

string_test$34:	; Call 212 strcat 0
x44051:	mov word [bp + 212], string_test$35	; 6: 199 134 212 0 36 172
x44057:	mov [bp + 214], bp	; 4: 137 174 214 0
x44061:	add bp, 212	; 4: 129 197 212 0
x44065:	jmp strcat	; 3: 233 253 224

string_test$35:	; PostCall 212

string_test$36:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$37:	; Parameter 212 u 6
x44068:	mov [bp + 218], bp	; 4: 137 174 218 0
x44072:	add word [bp + 218], 110	; 5: 131 134 218 0 110

string_test$38:	; Call 212 strlen 0
x44077:	mov word [bp + 212], string_test$39	; 6: 199 134 212 0 62 172
x44083:	mov [bp + 214], bp	; 4: 137 174 214 0
x44087:	add bp, 212	; 4: 129 197 212 0
x44091:	jmp strlen	; 3: 233 192 224

string_test$39:	; PostCall 212

string_test$40:	; GetReturnValue £temporary4311

string_test$41:	; Assign i £temporary4311
x44094:	mov [bp + 6], bx	; 3: 137 94 6

string_test$42:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$43:	; Parameter 212 u 6
x44097:	mov [bp + 218], bp	; 4: 137 174 218 0
x44101:	add word [bp + 218], 110	; 5: 131 134 218 0 110

string_test$44:	; Parameter 212 string_abc# 8
x44106:	mov word [bp + 220], @9714$string_abc#	; 6: 199 134 220 0 1 178

string_test$45:	; Parameter 212 2 10
x44112:	mov word [bp + 222], 2	; 6: 199 134 222 0 2 0

string_test$46:	; Call 212 strncat 0
x44118:	mov word [bp + 212], string_test$47	; 6: 199 134 212 0 103 172
x44124:	mov [bp + 214], bp	; 4: 137 174 214 0
x44128:	add bp, 212	; 4: 129 197 212 0
x44132:	jmp strncat	; 3: 233 220 7

string_test$47:	; PostCall 212

string_test$48:	; BinaryAdd £temporary4313 i 2
x44135:	mov ax, [bp + 6]	; 3: 139 70 6
x44138:	add ax, 2	; 3: 131 192 2

string_test$49:	; BinaryAdd £temporary4315 u £temporary4313
x44141:	mov si, bp	; 2: 137 238
x44143:	add si, 110	; 3: 131 198 110
x44146:	add si, ax	; 2: 1 198

string_test$50:	; Deref £temporary4314 -> £temporary4315 £temporary4315 0

string_test$51:	; Assign £temporary4314 -> £temporary4315 0
x44148:	mov byte [si], 0	; 3: 198 4 0

string_test$52:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$53:	; Parameter 212 string_t203D202225s222C20u203D202225s220A# 6
x44151:	mov word [bp + 218], @9726$string_t203D202225s222C20u203D202225s220A#	; 6: 199 134 218 0 5 178

string_test$54:	; Parameter 212 t 8
x44157:	mov [bp + 220], bp	; 4: 137 174 220 0
x44161:	add word [bp + 220], 10	; 5: 131 134 220 0 10

string_test$55:	; Parameter 212 u 10
x44166:	mov [bp + 222], bp	; 4: 137 174 222 0
x44170:	add word [bp + 222], 110	; 5: 131 134 222 0 110

string_test$56:	; Call 212 printf 0
x44175:	mov word [bp + 212], string_test$57	; 6: 199 134 212 0 165 172
x44181:	mov [bp + 214], bp	; 4: 137 174 214 0
x44185:	add bp, 212	; 4: 129 197 212 0
x44189:	mov di, bp	; 2: 137 239
x44191:	add di, 4	; 3: 131 199 4
x44194:	jmp printf	; 3: 233 95 96

string_test$57:	; PostCall 212

string_test$58:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$59:	; Parameter 212 string_strcmp28s2C20u29203D2025i0A# 6
x44197:	mov word [bp + 218], @9728$string_strcmp28s2C20u29203D2025i0A#	; 6: 199 134 218 0 25 178

string_test$60:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$61:	; Parameter 212 s 14
x44203:	mov ax, [bp + 8]	; 3: 139 70 8
x44206:	mov [bp + 226], ax	; 4: 137 134 226 0

string_test$62:	; Parameter 212 u 16
x44210:	mov [bp + 228], bp	; 4: 137 174 228 0
x44214:	add word [bp + 228], 110	; 5: 131 134 228 0 110

string_test$63:	; Call 212 strcmp 8
x44219:	mov word [bp + 220], string_test$64	; 6: 199 134 220 0 204 172
x44225:	mov [bp + 222], bp	; 4: 137 174 222 0
x44229:	add bp, 220	; 4: 129 197 220 0
x44233:	jmp strcmp	; 3: 233 64 176

string_test$64:	; PostCall 212

string_test$65:	; GetReturnValue £temporary4317

string_test$66:	; Parameter 212 £temporary4317 8
x44236:	mov [bp + 220], bx	; 4: 137 158 220 0

string_test$67:	; Call 212 printf 0
x44240:	mov word [bp + 212], string_test$68	; 6: 199 134 212 0 230 172
x44246:	mov [bp + 214], bp	; 4: 137 174 214 0
x44250:	add bp, 212	; 4: 129 197 212 0
x44254:	mov di, bp	; 2: 137 239
x44256:	add di, 2	; 3: 131 199 2
x44259:	jmp printf	; 3: 233 30 96

string_test$68:	; PostCall 212

string_test$69:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$70:	; Parameter 212 string_strncmp28s2C20u2C20229203D2025i0A# 6
x44262:	mov word [bp + 218], @9731$string_strncmp28s2C20u2C20229203D2025i0A#	; 6: 199 134 218 0 44 178

string_test$71:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$72:	; Parameter 212 s 14
x44268:	mov ax, [bp + 8]	; 3: 139 70 8
x44271:	mov [bp + 226], ax	; 4: 137 134 226 0

string_test$73:	; Parameter 212 u 16
x44275:	mov [bp + 228], bp	; 4: 137 174 228 0
x44279:	add word [bp + 228], 110	; 5: 131 134 228 0 110

string_test$74:	; Parameter 212 2 18
x44284:	mov word [bp + 230], 2	; 6: 199 134 230 0 2 0

string_test$75:	; Call 212 strncmp 8
x44290:	mov word [bp + 220], string_test$76	; 6: 199 134 220 0 19 173
x44296:	mov [bp + 222], bp	; 4: 137 174 222 0
x44300:	add bp, 220	; 4: 129 197 220 0
x44304:	jmp strncmp	; 3: 233 151 7

string_test$76:	; PostCall 212

string_test$77:	; GetReturnValue £temporary4319

string_test$78:	; Parameter 212 £temporary4319 8
x44307:	mov [bp + 220], bx	; 4: 137 158 220 0

string_test$79:	; Call 212 printf 0
x44311:	mov word [bp + 212], string_test$80	; 6: 199 134 212 0 45 173
x44317:	mov [bp + 214], bp	; 4: 137 174 214 0
x44321:	add bp, 212	; 4: 129 197 212 0
x44325:	mov di, bp	; 2: 137 239
x44327:	add di, 2	; 3: 131 199 2
x44330:	jmp printf	; 3: 233 215 95

string_test$80:	; PostCall 212

string_test$81:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$82:	; Parameter 212 s 6
x44333:	mov ax, [bp + 8]	; 3: 139 70 8
x44336:	mov [bp + 218], ax	; 4: 137 134 218 0

string_test$83:	; Parameter 212 108 8
x44340:	mov word [bp + 220], 108	; 6: 199 134 220 0 108 0

string_test$84:	; Call 212 strchr 0
x44346:	mov word [bp + 212], string_test$85	; 6: 199 134 212 0 75 173
x44352:	mov [bp + 214], bp	; 4: 137 174 214 0
x44356:	add bp, 212	; 4: 129 197 212 0
x44360:	jmp strchr	; 3: 233 115 116

string_test$85:	; PostCall 212

string_test$86:	; GetReturnValue £temporary4321

string_test$87:	; Assign p £temporary4321
x44363:	mov [bp + 210], bx	; 4: 137 158 210 0

string_test$88:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$89:	; Parameter 212 string_strchr28s2C2027l2729203D2025i0A# 6
x44367:	mov word [bp + 218], @9741$string_strchr28s2C2027l2729203D2025i0A#	; 6: 199 134 218 0 67 178

string_test$90:	; Equal 93 p 0
x44373:	cmp word [bp + 210], 0	; 5: 131 190 210 0 0
x44378:	je string_test$93	; 2: 116 9

string_test$91:	; BinarySubtract £temporary4327 p s
x44380:	mov ax, [bp + 210]	; 4: 139 134 210 0
x44384:	sub ax, [bp + 8]	; 3: 43 70 8

string_test$92:	; Goto 94
x44387:	jmp string_test$94	; 2: 235 3

string_test$93:	; Assign £temporary4327 -1
x44389:	mov ax, -1	; 3: 184 255 255

string_test$94:	; Parameter 212 £temporary4327 8
x44392:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$95:	; Call 212 printf 0
x44396:	mov word [bp + 212], string_test$96	; 6: 199 134 212 0 130 173
x44402:	mov [bp + 214], bp	; 4: 137 174 214 0
x44406:	add bp, 212	; 4: 129 197 212 0
x44410:	mov di, bp	; 2: 137 239
x44412:	add di, 2	; 3: 131 199 2
x44415:	jmp printf	; 3: 233 130 95

string_test$96:	; PostCall 212

string_test$97:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$98:	; Parameter 212 s 6
x44418:	mov ax, [bp + 8]	; 3: 139 70 8
x44421:	mov [bp + 218], ax	; 4: 137 134 218 0

string_test$99:	; Parameter 212 108 8
x44425:	mov word [bp + 220], 108	; 6: 199 134 220 0 108 0

string_test$100:	; Call 212 strrchr 0
x44431:	mov word [bp + 212], string_test$101	; 6: 199 134 212 0 160 173
x44437:	mov [bp + 214], bp	; 4: 137 174 214 0
x44441:	add bp, 212	; 4: 129 197 212 0
x44445:	jmp strrchr	; 3: 233 142 7

string_test$101:	; PostCall 212

string_test$102:	; GetReturnValue £temporary4329

string_test$103:	; Assign p £temporary4329
x44448:	mov [bp + 210], bx	; 4: 137 158 210 0

string_test$104:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$105:	; Parameter 212 string_strrchr28s2C2027l2729203D2025i0A# 6
x44452:	mov word [bp + 218], @9760$string_strrchr28s2C2027l2729203D2025i0A#	; 6: 199 134 218 0 88 178

string_test$106:	; Equal 109 p 0
x44458:	cmp word [bp + 210], 0	; 5: 131 190 210 0 0
x44463:	je string_test$109	; 2: 116 9

string_test$107:	; BinarySubtract £temporary4335 p s
x44465:	mov ax, [bp + 210]	; 4: 139 134 210 0
x44469:	sub ax, [bp + 8]	; 3: 43 70 8

string_test$108:	; Goto 110
x44472:	jmp string_test$110	; 2: 235 3

string_test$109:	; Assign £temporary4335 -1
x44474:	mov ax, -1	; 3: 184 255 255

string_test$110:	; Parameter 212 £temporary4335 8
x44477:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$111:	; Call 212 printf 0
x44481:	mov word [bp + 212], string_test$112	; 6: 199 134 212 0 215 173
x44487:	mov [bp + 214], bp	; 4: 137 174 214 0
x44491:	add bp, 212	; 4: 129 197 212 0
x44495:	mov di, bp	; 2: 137 239
x44497:	add di, 2	; 3: 131 199 2
x44500:	jmp printf	; 3: 233 45 95

string_test$112:	; PostCall 212

string_test$113:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$114:	; Parameter 212 s 6
x44503:	mov ax, [bp + 8]	; 3: 139 70 8
x44506:	mov [bp + 218], ax	; 4: 137 134 218 0

string_test$115:	; Parameter 212 120 8
x44510:	mov word [bp + 220], 120	; 6: 199 134 220 0 120 0

string_test$116:	; Call 212 strchr 0
x44516:	mov word [bp + 212], string_test$117	; 6: 199 134 212 0 245 173
x44522:	mov [bp + 214], bp	; 4: 137 174 214 0
x44526:	add bp, 212	; 4: 129 197 212 0
x44530:	jmp strchr	; 3: 233 201 115

string_test$117:	; PostCall 212

string_test$118:	; GetReturnValue £temporary4337

string_test$119:	; Assign p £temporary4337
x44533:	mov [bp + 210], bx	; 4: 137 158 210 0

string_test$120:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$121:	; Parameter 212 string_strchr28s2C2027x2729203D2025i0A# 6
x44537:	mov word [bp + 218], @9779$string_strchr28s2C2027x2729203D2025i0A#	; 6: 199 134 218 0 110 178

string_test$122:	; Equal 125 p 0
x44543:	cmp word [bp + 210], 0	; 5: 131 190 210 0 0
x44548:	je string_test$125	; 2: 116 9

string_test$123:	; BinarySubtract £temporary4343 p s
x44550:	mov ax, [bp + 210]	; 4: 139 134 210 0
x44554:	sub ax, [bp + 8]	; 3: 43 70 8

string_test$124:	; Goto 126
x44557:	jmp string_test$126	; 2: 235 3

string_test$125:	; Assign £temporary4343 -1
x44559:	mov ax, -1	; 3: 184 255 255

string_test$126:	; Parameter 212 £temporary4343 8
x44562:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$127:	; Call 212 printf 0
x44566:	mov word [bp + 212], string_test$128	; 6: 199 134 212 0 44 174
x44572:	mov [bp + 214], bp	; 4: 137 174 214 0
x44576:	add bp, 212	; 4: 129 197 212 0
x44580:	mov di, bp	; 2: 137 239
x44582:	add di, 2	; 3: 131 199 2
x44585:	jmp printf	; 3: 233 216 94

string_test$128:	; PostCall 212

string_test$129:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$130:	; Parameter 212 s 6
x44588:	mov ax, [bp + 8]	; 3: 139 70 8
x44591:	mov [bp + 218], ax	; 4: 137 134 218 0

string_test$131:	; Parameter 212 120 8
x44595:	mov word [bp + 220], 120	; 6: 199 134 220 0 120 0

string_test$132:	; Call 212 strrchr 0
x44601:	mov word [bp + 212], string_test$133	; 6: 199 134 212 0 74 174
x44607:	mov [bp + 214], bp	; 4: 137 174 214 0
x44611:	add bp, 212	; 4: 129 197 212 0
x44615:	jmp strrchr	; 3: 233 228 6

string_test$133:	; PostCall 212

string_test$134:	; GetReturnValue £temporary4345

string_test$135:	; Assign p £temporary4345
x44618:	mov [bp + 210], bx	; 4: 137 158 210 0

string_test$136:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$137:	; Parameter 212 string_strrchr28s2C2027x2729203D2025i0A# 6
x44622:	mov word [bp + 218], @9798$string_strrchr28s2C2027x2729203D2025i0A#	; 6: 199 134 218 0 131 178

string_test$138:	; Equal 141 p 0
x44628:	cmp word [bp + 210], 0	; 5: 131 190 210 0 0
x44633:	je string_test$141	; 2: 116 9

string_test$139:	; BinarySubtract £temporary4351 p s
x44635:	mov ax, [bp + 210]	; 4: 139 134 210 0
x44639:	sub ax, [bp + 8]	; 3: 43 70 8

string_test$140:	; Goto 142
x44642:	jmp string_test$142	; 2: 235 3

string_test$141:	; Assign £temporary4351 -1
x44644:	mov ax, -1	; 3: 184 255 255

string_test$142:	; Parameter 212 £temporary4351 8
x44647:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$143:	; Call 212 printf 0
x44651:	mov word [bp + 212], string_test$144	; 6: 199 134 212 0 129 174
x44657:	mov [bp + 214], bp	; 4: 137 174 214 0
x44661:	add bp, 212	; 4: 129 197 212 0
x44665:	mov di, bp	; 2: 137 239
x44667:	add di, 2	; 3: 131 199 2
x44670:	jmp printf	; 3: 233 131 94

string_test$144:	; PostCall 212

string_test$145:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$146:	; Parameter 212 s 6
x44673:	mov ax, [bp + 8]	; 3: 139 70 8
x44676:	mov [bp + 218], ax	; 4: 137 134 218 0

string_test$147:	; Parameter 212 string_Hello2C20World21# 8
x44680:	mov word [bp + 220], @9813$string_Hello2C20World21#	; 6: 199 134 220 0 153 178

string_test$148:	; Parameter 212 20 10
x44686:	mov word [bp + 222], 20	; 6: 199 134 222 0 20 0

string_test$149:	; Call 212 memcpy 0
x44692:	mov word [bp + 212], string_test$150	; 6: 199 134 212 0 165 174
x44698:	mov [bp + 214], bp	; 4: 137 174 214 0
x44702:	add bp, 212	; 4: 129 197 212 0
x44706:	jmp memcpy	; 3: 233 254 227

string_test$150:	; PostCall 212

string_test$151:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$152:	; Parameter 212 t 6
x44709:	mov [bp + 218], bp	; 4: 137 174 218 0
x44713:	add word [bp + 218], 10	; 5: 131 134 218 0 10

string_test$153:	; Parameter 212 string_Hello2C20World21# 8
x44718:	mov word [bp + 220], @9820$string_Hello2C20World21#	; 6: 199 134 220 0 167 178

string_test$154:	; Parameter 212 20 10
x44724:	mov word [bp + 222], 20	; 6: 199 134 222 0 20 0

string_test$155:	; Call 212 memmove 0
x44730:	mov word [bp + 212], string_test$156	; 6: 199 134 212 0 203 174
x44736:	mov [bp + 214], bp	; 4: 137 174 214 0
x44740:	add bp, 212	; 4: 129 197 212 0
x44744:	jmp memmove	; 3: 233 176 6

string_test$156:	; PostCall 212

string_test$157:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$158:	; Parameter 212 u 6
x44747:	mov [bp + 218], bp	; 4: 137 174 218 0
x44751:	add word [bp + 218], 110	; 5: 131 134 218 0 110

string_test$159:	; Parameter 212 88 8
x44756:	mov word [bp + 220], 88	; 6: 199 134 220 0 88 0

string_test$160:	; Parameter 212 20 10
x44762:	mov word [bp + 222], 20	; 6: 199 134 222 0 20 0

string_test$161:	; Call 212 memset 0
x44768:	mov word [bp + 212], string_test$162	; 6: 199 134 212 0 241 174
x44774:	mov [bp + 214], bp	; 4: 137 174 214 0
x44778:	add bp, 212	; 4: 129 197 212 0
x44782:	jmp memset	; 3: 233 240 6

string_test$162:	; PostCall 212

string_test$163:	; Deref £temporary4356 -> u u 19
x44785:	mov si, bp	; 2: 137 238
x44787:	add si, 110	; 3: 131 198 110

string_test$164:	; Assign £temporary4356 -> u 0
x44790:	mov byte [si + 19], 0	; 4: 198 68 19 0

string_test$165:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$166:	; Parameter 212 string_s203D202225s222C20t203D202225s222C20u203D202225s220A# 6
x44794:	mov word [bp + 218], @9842$string_s203D202225s222C20t203D202225s222C20u203D202225s220A#	; 6: 199 134 218 0 181 178

string_test$167:	; Parameter 212 s 8
x44800:	mov ax, [bp + 8]	; 3: 139 70 8
x44803:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$168:	; Parameter 212 t 10
x44807:	mov [bp + 222], bp	; 4: 137 174 222 0
x44811:	add word [bp + 222], 10	; 5: 131 134 222 0 10

string_test$169:	; Parameter 212 u 12
x44816:	mov [bp + 224], bp	; 4: 137 174 224 0
x44820:	add word [bp + 224], 110	; 5: 131 134 224 0 110

string_test$170:	; Call 212 printf 0
x44825:	mov word [bp + 212], string_test$171	; 6: 199 134 212 0 47 175
x44831:	mov [bp + 214], bp	; 4: 137 174 214 0
x44835:	add bp, 212	; 4: 129 197 212 0
x44839:	mov di, bp	; 2: 137 239
x44841:	add di, 6	; 3: 131 199 6
x44844:	jmp printf	; 3: 233 213 93

string_test$171:	; PostCall 212

string_test$172:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$173:	; Parameter 212 s 6
x44847:	mov ax, [bp + 8]	; 3: 139 70 8
x44850:	mov [bp + 218], ax	; 4: 137 134 218 0

string_test$174:	; Parameter 212 108 8
x44854:	mov word [bp + 220], 108	; 6: 199 134 220 0 108 0

string_test$175:	; Parameter 212 20 10
x44860:	mov word [bp + 222], 20	; 6: 199 134 222 0 20 0

string_test$176:	; Call 212 memchr 0
x44866:	mov word [bp + 212], string_test$177	; 6: 199 134 212 0 83 175
x44872:	mov [bp + 214], bp	; 4: 137 174 214 0
x44876:	add bp, 212	; 4: 129 197 212 0
x44880:	jmp memchr	; 3: 233 206 6

string_test$177:	; PostCall 212

string_test$178:	; GetReturnValue £temporary4358

string_test$179:	; Assign p £temporary4358
x44883:	mov [bp + 210], bx	; 4: 137 158 210 0

string_test$180:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$181:	; Parameter 212 string_memchr28s2C2027l272C20SIZE202A20sizeof28char2929203D2025i0A# 6
x44887:	mov word [bp + 218], @9853$string_memchr28s2C2027l272C20SIZE202A20sizeof28char2929203D2025i0A#	; 6: 199 134 218 0 211 178

string_test$182:	; Equal 185 p 0
x44893:	cmp word [bp + 210], 0	; 5: 131 190 210 0 0
x44898:	je string_test$185	; 2: 116 9

string_test$183:	; BinarySubtract £temporary4364 p s
x44900:	mov ax, [bp + 210]	; 4: 139 134 210 0
x44904:	sub ax, [bp + 8]	; 3: 43 70 8

string_test$184:	; Goto 186
x44907:	jmp string_test$186	; 2: 235 3

string_test$185:	; Assign £temporary4364 -1
x44909:	mov ax, -1	; 3: 184 255 255

string_test$186:	; Parameter 212 £temporary4364 8
x44912:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$187:	; Call 212 printf 0
x44916:	mov word [bp + 212], string_test$188	; 6: 199 134 212 0 138 175
x44922:	mov [bp + 214], bp	; 4: 137 174 214 0
x44926:	add bp, 212	; 4: 129 197 212 0
x44930:	mov di, bp	; 2: 137 239
x44932:	add di, 2	; 3: 131 199 2
x44935:	jmp printf	; 3: 233 122 93

string_test$188:	; PostCall 212

string_test$189:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$190:	; Parameter 212 s 6
x44938:	mov ax, [bp + 8]	; 3: 139 70 8
x44941:	mov [bp + 218], ax	; 4: 137 134 218 0

string_test$191:	; Parameter 212 120 8
x44945:	mov word [bp + 220], 120	; 6: 199 134 220 0 120 0

string_test$192:	; Parameter 212 20 10
x44951:	mov word [bp + 222], 20	; 6: 199 134 222 0 20 0

string_test$193:	; Call 212 memchr 0
x44957:	mov word [bp + 212], string_test$194	; 6: 199 134 212 0 174 175
x44963:	mov [bp + 214], bp	; 4: 137 174 214 0
x44967:	add bp, 212	; 4: 129 197 212 0
x44971:	jmp memchr	; 3: 233 115 6

string_test$194:	; PostCall 212

string_test$195:	; GetReturnValue £temporary4366

string_test$196:	; Assign p £temporary4366
x44974:	mov [bp + 210], bx	; 4: 137 158 210 0

string_test$197:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$198:	; Parameter 212 string_memchr28s2C2027x272C20SIZE202A20sizeof28char2929203D2025i0A# 6
x44978:	mov word [bp + 218], @9877$string_memchr28s2C2027x272C20SIZE202A20sizeof28char2929203D2025i0A#	; 6: 199 134 218 0 253 178

string_test$199:	; Equal 202 p 0
x44984:	cmp word [bp + 210], 0	; 5: 131 190 210 0 0
x44989:	je string_test$202	; 2: 116 9

string_test$200:	; BinarySubtract £temporary4372 p s
x44991:	mov ax, [bp + 210]	; 4: 139 134 210 0
x44995:	sub ax, [bp + 8]	; 3: 43 70 8

string_test$201:	; Goto 203
x44998:	jmp string_test$203	; 2: 235 3

string_test$202:	; Assign £temporary4372 -1
x45000:	mov ax, -1	; 3: 184 255 255

string_test$203:	; Parameter 212 £temporary4372 8
x45003:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$204:	; Call 212 printf 0
x45007:	mov word [bp + 212], string_test$205	; 6: 199 134 212 0 229 175
x45013:	mov [bp + 214], bp	; 4: 137 174 214 0
x45017:	add bp, 212	; 4: 129 197 212 0
x45021:	mov di, bp	; 2: 137 239
x45023:	add di, 2	; 3: 131 199 2
x45026:	jmp printf	; 3: 233 31 93

string_test$205:	; PostCall 212

string_test$206:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$207:	; Parameter 212 string_s3A202225s222C20t3A202225s220A# 6
x45029:	mov word [bp + 218], @9892$string_s3A202225s222C20t3A202225s220A#	; 6: 199 134 218 0 39 179

string_test$208:	; Parameter 212 s 8
x45035:	mov ax, [bp + 8]	; 3: 139 70 8
x45038:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$209:	; Parameter 212 t 10
x45042:	mov [bp + 222], bp	; 4: 137 174 222 0
x45046:	add word [bp + 222], 10	; 5: 131 134 222 0 10

string_test$210:	; Call 212 printf 0
x45051:	mov word [bp + 212], string_test$211	; 6: 199 134 212 0 17 176
x45057:	mov [bp + 214], bp	; 4: 137 174 214 0
x45061:	add bp, 212	; 4: 129 197 212 0
x45065:	mov di, bp	; 2: 137 239
x45067:	add di, 4	; 3: 131 199 4
x45070:	jmp printf	; 3: 233 243 92

string_test$211:	; PostCall 212

string_test$212:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$213:	; Parameter 212 string_strcmp28s2C20t29203D2025i0A# 6
x45073:	mov word [bp + 218], @9894$string_strcmp28s2C20t29203D2025i0A#	; 6: 199 134 218 0 57 179

string_test$214:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$215:	; Parameter 212 s 14
x45079:	mov ax, [bp + 8]	; 3: 139 70 8
x45082:	mov [bp + 226], ax	; 4: 137 134 226 0

string_test$216:	; Parameter 212 t 16
x45086:	mov [bp + 228], bp	; 4: 137 174 228 0
x45090:	add word [bp + 228], 10	; 5: 131 134 228 0 10

string_test$217:	; Call 212 strcmp 8
x45095:	mov word [bp + 220], string_test$218	; 6: 199 134 220 0 56 176
x45101:	mov [bp + 222], bp	; 4: 137 174 222 0
x45105:	add bp, 220	; 4: 129 197 220 0
x45109:	jmp strcmp	; 3: 233 212 172

string_test$218:	; PostCall 212

string_test$219:	; GetReturnValue £temporary4375

string_test$220:	; Parameter 212 £temporary4375 8
x45112:	mov [bp + 220], bx	; 4: 137 158 220 0

string_test$221:	; Call 212 printf 0
x45116:	mov word [bp + 212], string_test$222	; 6: 199 134 212 0 82 176
x45122:	mov [bp + 214], bp	; 4: 137 174 214 0
x45126:	add bp, 212	; 4: 129 197 212 0
x45130:	mov di, bp	; 2: 137 239
x45132:	add di, 2	; 3: 131 199 2
x45135:	jmp printf	; 3: 233 178 92

string_test$222:	; PostCall 212

string_test$223:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$224:	; Parameter 212 string_memcmp28s2C20t2C20SIZE202A20sizeof28char2929203D2025i0A# 6
x45138:	mov word [bp + 218], @9897$string_memcmp28s2C20t2C20SIZE202A20sizeof28char2929203D2025i0A#	; 6: 199 134 218 0 76 179

string_test$225:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$226:	; Parameter 212 s 14
x45144:	mov ax, [bp + 8]	; 3: 139 70 8
x45147:	mov [bp + 226], ax	; 4: 137 134 226 0

string_test$227:	; Parameter 212 t 16
x45151:	mov [bp + 228], bp	; 4: 137 174 228 0
x45155:	add word [bp + 228], 10	; 5: 131 134 228 0 10

string_test$228:	; Parameter 212 20 18
x45160:	mov word [bp + 230], 20	; 6: 199 134 230 0 20 0

string_test$229:	; Call 212 memcmp 8
x45166:	mov word [bp + 220], string_test$230	; 6: 199 134 220 0 127 176
x45172:	mov [bp + 222], bp	; 4: 137 174 222 0
x45176:	add bp, 220	; 4: 129 197 220 0
x45180:	jmp memcmp	; 3: 233 245 5

string_test$230:	; PostCall 212

string_test$231:	; GetReturnValue £temporary4377

string_test$232:	; Parameter 212 £temporary4377 8
x45183:	mov [bp + 220], bx	; 4: 137 158 220 0

string_test$233:	; Call 212 printf 0
x45187:	mov word [bp + 212], string_test$234	; 6: 199 134 212 0 153 176
x45193:	mov [bp + 214], bp	; 4: 137 174 214 0
x45197:	add bp, 212	; 4: 129 197 212 0
x45201:	mov di, bp	; 2: 137 239
x45203:	add di, 2	; 3: 131 199 2
x45206:	jmp printf	; 3: 233 107 92

string_test$234:	; PostCall 212

string_test$235:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$236:	; Parameter 212 string_strspn28s2C2022Hello2C20C2229203D2025i0A# 6
x45209:	mov word [bp + 218], @9905$string_strspn28s2C2022Hello2C20C2229203D2025i0A#	; 6: 199 134 218 0 116 179

string_test$237:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$238:	; Parameter 212 s 14
x45215:	mov ax, [bp + 8]	; 3: 139 70 8
x45218:	mov [bp + 226], ax	; 4: 137 134 226 0

string_test$239:	; Parameter 212 string_Hello2C20C# 16
x45222:	mov word [bp + 228], @9906$string_Hello2C20C#	; 6: 199 134 228 0 144 179

string_test$240:	; Call 212 strspn 8
x45228:	mov word [bp + 220], string_test$241	; 6: 199 134 220 0 189 176
x45234:	mov [bp + 222], bp	; 4: 137 174 222 0
x45238:	add bp, 220	; 4: 129 197 220 0
x45242:	jmp strspn	; 3: 233 35 6

string_test$241:	; PostCall 212

string_test$242:	; GetReturnValue £temporary4379

string_test$243:	; Parameter 212 £temporary4379 8
x45245:	mov [bp + 220], bx	; 4: 137 158 220 0

string_test$244:	; Call 212 printf 0
x45249:	mov word [bp + 212], string_test$245	; 6: 199 134 212 0 215 176
x45255:	mov [bp + 214], bp	; 4: 137 174 214 0
x45259:	add bp, 212	; 4: 129 197 212 0
x45263:	mov di, bp	; 2: 137 239
x45265:	add di, 2	; 3: 131 199 2
x45268:	jmp printf	; 3: 233 45 92

string_test$245:	; PostCall 212

string_test$246:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$247:	; Parameter 212 string_strcspn28s2C2022Hello2C20C2229203D2025i0A# 6
x45271:	mov word [bp + 218], @9909$string_strcspn28s2C2022Hello2C20C2229203D2025i0A#	; 6: 199 134 218 0 153 179

string_test$248:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$249:	; Parameter 212 s 14
x45277:	mov ax, [bp + 8]	; 3: 139 70 8
x45280:	mov [bp + 226], ax	; 4: 137 134 226 0

string_test$250:	; Parameter 212 string_Hello2C20C# 16
x45284:	mov word [bp + 228], @9910$string_Hello2C20C#	; 6: 199 134 228 0 182 179

string_test$251:	; Call 212 strcspn 8
x45290:	mov word [bp + 220], string_test$252	; 6: 199 134 220 0 251 176
x45296:	mov [bp + 222], bp	; 4: 137 174 222 0
x45300:	add bp, 220	; 4: 129 197 220 0
x45304:	jmp strcspn	; 3: 233 69 6

string_test$252:	; PostCall 212

string_test$253:	; GetReturnValue £temporary4381

string_test$254:	; Parameter 212 £temporary4381 8
x45307:	mov [bp + 220], bx	; 4: 137 158 220 0

string_test$255:	; Call 212 printf 0
x45311:	mov word [bp + 212], string_test$256	; 6: 199 134 212 0 21 177
x45317:	mov [bp + 214], bp	; 4: 137 174 214 0
x45321:	add bp, 212	; 4: 129 197 212 0
x45325:	mov di, bp	; 2: 137 239
x45327:	add di, 2	; 3: 131 199 2
x45330:	jmp printf	; 3: 233 239 91

string_test$256:	; PostCall 212

string_test$257:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$258:	; Parameter 212 string_strerror28errno29203D202225s220A# 6
x45333:	mov word [bp + 218], @9913$string_strerror28errno29203D202225s220A#	; 6: 199 134 218 0 191 179

string_test$259:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$260:	; Parameter 212 errno 14
x45339:	mov ax, [errno]	; 3: 161 230 10
x45342:	mov [bp + 226], ax	; 4: 137 134 226 0

string_test$261:	; Call 212 strerror 8
x45346:	mov word [bp + 220], string_test$262	; 6: 199 134 220 0 51 177
x45352:	mov [bp + 222], bp	; 4: 137 174 222 0
x45356:	add bp, 220	; 4: 129 197 220 0
x45360:	jmp strerror	; 3: 233 235 130

string_test$262:	; PostCall 212

string_test$263:	; GetReturnValue £temporary4383

string_test$264:	; Parameter 212 £temporary4383 8
x45363:	mov [bp + 220], bx	; 4: 137 158 220 0

string_test$265:	; Call 212 printf 0
x45367:	mov word [bp + 212], string_test$266	; 6: 199 134 212 0 77 177
x45373:	mov [bp + 214], bp	; 4: 137 174 214 0
x45377:	add bp, 212	; 4: 129 197 212 0
x45381:	mov di, bp	; 2: 137 239
x45383:	add di, 2	; 3: 131 199 2
x45386:	jmp printf	; 3: 233 183 91

string_test$266:	; PostCall 212

string_test$267:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$268:	; Parameter 212 s 6
x45389:	mov ax, [bp + 8]	; 3: 139 70 8
x45392:	mov [bp + 218], ax	; 4: 137 134 218 0

string_test$269:	; Parameter 212 string_2C# 8
x45396:	mov word [bp + 220], @9916$string_2C#	; 6: 199 134 220 0 215 179

string_test$270:	; Call 212 strtok 0
x45402:	mov word [bp + 212], string_test$271	; 6: 199 134 212 0 107 177
x45408:	mov [bp + 214], bp	; 4: 137 174 214 0
x45412:	add bp, 212	; 4: 129 197 212 0
x45416:	jmp strtok	; 3: 233 53 6

string_test$271:	; PostCall 212

string_test$272:	; GetReturnValue £temporary4385

string_test$273:	; Assign p £temporary4385
x45419:	mov [bp + 210], bx	; 4: 137 158 210 0

string_test$274:	; Equal 288 p 0
x45423:	cmp word [bp + 210], 0	; 5: 131 190 210 0 0
x45428:	je string_test$288	; 2: 116 71

string_test$275:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$276:	; Parameter 212 string_strtok28s2C20222C2229203D202225s220A# 6
x45430:	mov word [bp + 218], @9922$string_strtok28s2C20222C2229203D202225s220A#	; 6: 199 134 218 0 217 179

string_test$277:	; Parameter 212 p 8
x45436:	mov ax, [bp + 210]	; 4: 139 134 210 0
x45440:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$278:	; Call 212 printf 0
x45444:	mov word [bp + 212], string_test$279	; 6: 199 134 212 0 154 177
x45450:	mov [bp + 214], bp	; 4: 137 174 214 0
x45454:	add bp, 212	; 4: 129 197 212 0
x45458:	mov di, bp	; 2: 137 239
x45460:	add di, 2	; 3: 131 199 2
x45463:	jmp printf	; 3: 233 106 91

string_test$279:	; PostCall 212

string_test$280:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$281:	; Parameter 212 0 6
x45466:	mov word [bp + 218], 0	; 6: 199 134 218 0 0 0

string_test$282:	; Parameter 212 string_2C# 8
x45472:	mov word [bp + 220], @9927$string_2C#	; 6: 199 134 220 0 240 179

string_test$283:	; Call 212 strtok 0
x45478:	mov word [bp + 212], string_test$284	; 6: 199 134 212 0 183 177
x45484:	mov [bp + 214], bp	; 4: 137 174 214 0
x45488:	add bp, 212	; 4: 129 197 212 0
x45492:	jmp strtok	; 3: 233 233 5

string_test$284:	; PostCall 212

string_test$285:	; GetReturnValue £temporary4388

string_test$286:	; Assign p £temporary4388
x45495:	mov [bp + 210], bx	; 4: 137 158 210 0

string_test$287:	; Goto 274
x45499:	jmp string_test$274	; 2: 235 178

string_test$288:	; Return 0
x45501:	mov ax, [bp]	; 3: 139 70 0
x45504:	mov di, [bp + 4]	; 3: 139 126 4
x45507:	mov bp, [bp + 2]	; 3: 139 110 2
x45510:	jmp ax	; 2: 255 224

string_test$289:	; FunctionEnd string_test

@9688$string_Hello2C20World21#:
x45512:	db "Hello, World!", 0	; 14: 72 101 108 108 111 44 32 87 111 114 108 100 33 0

@9697$string_strlen282225s2229203D2025i0A#:
x45526:	db "strlen(", 34, "%s", 34, ") = %i", 10, 0	; 19: 115 116 114 108 101 110 40 34 37 115 34 41 32 61 32 37 105 10 0

@9709$string_t203D202225s222C20u203D202225s220A#:
x45545:	db "t = ", 34, "%s", 34, ", u = ", 34, "%s", 34, 10, 0	; 20: 116 32 61 32 34 37 115 34 44 32 117 32 61 32 34 37 115 34 10 0

@9711$string_abc#:
x45565:	db "abc", 0	; 4: 97 98 99 0

@9714$string_abc#:
x45569:	db "abc", 0	; 4: 97 98 99 0

@9726$string_t203D202225s222C20u203D202225s220A#:
x45573:	db "t = ", 34, "%s", 34, ", u = ", 34, "%s", 34, 10, 0	; 20: 116 32 61 32 34 37 115 34 44 32 117 32 61 32 34 37 115 34 10 0

@9728$string_strcmp28s2C20u29203D2025i0A#:
x45593:	db "strcmp(s, u) = %i", 10, 0	; 19: 115 116 114 99 109 112 40 115 44 32 117 41 32 61 32 37 105 10 0

@9731$string_strncmp28s2C20u2C20229203D2025i0A#:
x45612:	db "strncmp(s, u, 2) = %i", 10, 0	; 23: 115 116 114 110 99 109 112 40 115 44 32 117 44 32 50 41 32 61 32 37 105 10 0

@9741$string_strchr28s2C2027l2729203D2025i0A#:
x45635:	db "strchr(s, ", 39, "l", 39, ") = %i", 10, 0	; 21: 115 116 114 99 104 114 40 115 44 32 39 108 39 41 32 61 32 37 105 10 0

@9760$string_strrchr28s2C2027l2729203D2025i0A#:
x45656:	db "strrchr(s, ", 39, "l", 39, ") = %i", 10, 0	; 22: 115 116 114 114 99 104 114 40 115 44 32 39 108 39 41 32 61 32 37 105 10 0

@9779$string_strchr28s2C2027x2729203D2025i0A#:
x45678:	db "strchr(s, ", 39, "x", 39, ") = %i", 10, 0	; 21: 115 116 114 99 104 114 40 115 44 32 39 120 39 41 32 61 32 37 105 10 0

@9798$string_strrchr28s2C2027x2729203D2025i0A#:
x45699:	db "strrchr(s, ", 39, "x", 39, ") = %i", 10, 0	; 22: 115 116 114 114 99 104 114 40 115 44 32 39 120 39 41 32 61 32 37 105 10 0

@9813$string_Hello2C20World21#:
x45721:	db "Hello, World!", 0	; 14: 72 101 108 108 111 44 32 87 111 114 108 100 33 0

@9820$string_Hello2C20World21#:
x45735:	db "Hello, World!", 0	; 14: 72 101 108 108 111 44 32 87 111 114 108 100 33 0

@9842$string_s203D202225s222C20t203D202225s222C20u203D202225s220A#:
x45749:	db "s = ", 34, "%s", 34, ", t = ", 34, "%s", 34, ", u = ", 34, "%s", 34, 10, 0	; 30: 115 32 61 32 34 37 115 34 44 32 116 32 61 32 34 37 115 34 44 32 117 32 61 32 34 37 115 34 10 0

@9853$string_memchr28s2C2027l272C20SIZE202A20sizeof28char2929203D2025i0A#:
x45779:	db "memchr(s, ", 39, "l", 39, ", SIZE * sizeof(char)) = %i", 10, 0	; 42: 109 101 109 99 104 114 40 115 44 32 39 108 39 44 32 83 73 90 69 32 42 32 115 105 122 101 111 102 40 99 104 97 114 41 41 32 61 32 37 105 10 0

@9877$string_memchr28s2C2027x272C20SIZE202A20sizeof28char2929203D2025i0A#:
x45821:	db "memchr(s, ", 39, "x", 39, ", SIZE * sizeof(char)) = %i", 10, 0	; 42: 109 101 109 99 104 114 40 115 44 32 39 120 39 44 32 83 73 90 69 32 42 32 115 105 122 101 111 102 40 99 104 97 114 41 41 32 61 32 37 105 10 0

@9892$string_s3A202225s222C20t3A202225s220A#:
x45863:	db "s: ", 34, "%s", 34, ", t: ", 34, "%s", 34, 10, 0	; 18: 115 58 32 34 37 115 34 44 32 116 58 32 34 37 115 34 10 0

@9894$string_strcmp28s2C20t29203D2025i0A#:
x45881:	db "strcmp(s, t) = %i", 10, 0	; 19: 115 116 114 99 109 112 40 115 44 32 116 41 32 61 32 37 105 10 0

@9897$string_memcmp28s2C20t2C20SIZE202A20sizeof28char2929203D2025i0A#:
x45900:	db "memcmp(s, t, SIZE * sizeof(char)) = %i", 10, 0	; 40: 109 101 109 99 109 112 40 115 44 32 116 44 32 83 73 90 69 32 42 32 115 105 122 101 111 102 40 99 104 97 114 41 41 32 61 32 37 105 10 0

@9905$string_strspn28s2C2022Hello2C20C2229203D2025i0A#:
x45940:	db "strspn(s, ", 34, "Hello, C", 34, ") = %i", 10, 0	; 28: 115 116 114 115 112 110 40 115 44 32 34 72 101 108 108 111 44 32 67 34 41 32 61 32 37 105 10 0

@9906$string_Hello2C20C#:
x45968:	db "Hello, C", 0	; 9: 72 101 108 108 111 44 32 67 0

@9909$string_strcspn28s2C2022Hello2C20C2229203D2025i0A#:
x45977:	db "strcspn(s, ", 34, "Hello, C", 34, ") = %i", 10, 0	; 29: 115 116 114 99 115 112 110 40 115 44 32 34 72 101 108 108 111 44 32 67 34 41 32 61 32 37 105 10 0

@9910$string_Hello2C20C#:
x46006:	db "Hello, C", 0	; 9: 72 101 108 108 111 44 32 67 0

@9913$string_strerror28errno29203D202225s220A#:
x46015:	db "strerror(errno) = ", 34, "%s", 34, 10, 0	; 24: 115 116 114 101 114 114 111 114 40 101 114 114 110 111 41 32 61 32 34 37 115 34 10 0

@9916$string_2C#:
x46039:	db ",", 0	; 2: 44 0

@9922$string_strtok28s2C20222C2229203D202225s220A#:
x46041:	db "strtok(s, ", 34, ",", 34, ") = ", 34, "%s", 34, 10, 0	; 23: 115 116 114 116 111 107 40 115 44 32 34 44 34 41 32 61 32 34 37 115 34 10 0

@9927$string_2C#:
x46064:	db ",", 0	; 2: 44 0

strncpy:	; Assign index 0
x46066:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

strncpy$1:	; SignedGreaterThanEqual 12 index size
x46071:	mov ax, [bp + 10]	; 3: 139 70 10
x46074:	cmp [bp + 12], ax	; 3: 57 70 12
x46077:	jge strncpy$12	; 2: 125 32

strncpy$2:	; BinaryAdd £temporary3709 source index
x46079:	mov si, [bp + 8]	; 3: 139 118 8
x46082:	add si, [bp + 12]	; 3: 3 118 12

strncpy$3:	; Deref £temporary3708 -> £temporary3709 £temporary3709 0

strncpy$4:	; Equal 12 £temporary3708 -> £temporary3709 0
x46085:	cmp byte [si], 0	; 3: 128 60 0
x46088:	je strncpy$12	; 2: 116 21

strncpy$5:	; BinaryAdd £temporary3714 target index
x46090:	mov si, [bp + 6]	; 3: 139 118 6
x46093:	add si, [bp + 12]	; 3: 3 118 12

strncpy$6:	; Deref £temporary3713 -> £temporary3714 £temporary3714 0

strncpy$7:	; BinaryAdd £temporary3716 source index
x46096:	mov di, [bp + 8]	; 3: 139 126 8
x46099:	add di, [bp + 12]	; 3: 3 126 12

strncpy$8:	; Deref £temporary3715 -> £temporary3716 £temporary3716 0

strncpy$9:	; Assign £temporary3713 -> £temporary3714 £temporary3715 -> £temporary3716
x46102:	mov al, [di]	; 2: 138 5
x46104:	mov [si], al	; 2: 136 4

strncpy$10:	; Increment index
x46106:	inc word [bp + 12]	; 3: 255 70 12

strncpy$11:	; Goto 1
x46109:	jmp strncpy$1	; 2: 235 216

strncpy$12:	; SignedGreaterThanEqual 18 index size
x46111:	mov ax, [bp + 10]	; 3: 139 70 10
x46114:	cmp [bp + 12], ax	; 3: 57 70 12
x46117:	jge strncpy$18	; 2: 125 14

strncpy$13:	; BinaryAdd £temporary3720 target index
x46119:	mov si, [bp + 6]	; 3: 139 118 6
x46122:	add si, [bp + 12]	; 3: 3 118 12

strncpy$14:	; Deref £temporary3719 -> £temporary3720 £temporary3720 0

strncpy$15:	; Assign £temporary3719 -> £temporary3720 0
x46125:	mov byte [si], 0	; 3: 198 4 0

strncpy$16:	; Increment index
x46128:	inc word [bp + 12]	; 3: 255 70 12

strncpy$17:	; Goto 12
x46131:	jmp strncpy$12	; 2: 235 234

strncpy$18:	; SetReturnValue target
x46133:	mov bx, [bp + 6]	; 3: 139 94 6

strncpy$19:	; Return target
x46136:	mov ax, [bp]	; 3: 139 70 0
x46139:	mov di, [bp + 4]	; 3: 139 126 4
x46142:	mov bp, [bp + 2]	; 3: 139 110 2
x46145:	jmp ax	; 2: 255 224

strncpy$20:	; FunctionEnd strncpy

strncat:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strncat$1:	; Parameter 14 target 6
x46147:	mov ax, [bp + 6]	; 3: 139 70 6
x46150:	mov [bp + 20], ax	; 3: 137 70 20

strncat$2:	; Call 14 strlen 0
x46153:	mov word [bp + 14], strncat$3	; 5: 199 70 14 87 180
x46158:	mov [bp + 16], bp	; 3: 137 110 16
x46161:	add bp, 14	; 3: 131 197 14
x46164:	jmp strlen	; 3: 233 167 216

strncat$3:	; PostCall 14

strncat$4:	; GetReturnValue £temporary3735

strncat$5:	; Assign targetLength £temporary3735
x46167:	mov [bp + 14], bx	; 3: 137 94 14

strncat$6:	; Assign index 0
x46170:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

strncat$7:	; BinarySubtract £temporary3736 size 1
x46175:	mov ax, [bp + 10]	; 3: 139 70 10
x46178:	dec ax	; 1: 72

strncat$8:	; SignedGreaterThanEqual 20 index £temporary3736
x46179:	cmp [bp + 12], ax	; 3: 57 70 12
x46182:	jge strncat$20	; 2: 125 37

strncat$9:	; BinaryAdd £temporary3739 source index
x46184:	mov si, [bp + 8]	; 3: 139 118 8
x46187:	add si, [bp + 12]	; 3: 3 118 12

strncat$10:	; Deref £temporary3738 -> £temporary3739 £temporary3739 0

strncat$11:	; Equal 20 £temporary3738 -> £temporary3739 0
x46190:	cmp byte [si], 0	; 3: 128 60 0
x46193:	je strncat$20	; 2: 116 26

strncat$12:	; BinaryAdd £temporary3743 targetLength index
x46195:	mov ax, [bp + 14]	; 3: 139 70 14
x46198:	add ax, [bp + 12]	; 3: 3 70 12

strncat$13:	; BinaryAdd £temporary3745 target £temporary3743
x46201:	mov si, [bp + 6]	; 3: 139 118 6
x46204:	add si, ax	; 2: 1 198

strncat$14:	; Deref £temporary3744 -> £temporary3745 £temporary3745 0

strncat$15:	; BinaryAdd £temporary3747 source index
x46206:	mov di, [bp + 8]	; 3: 139 126 8
x46209:	add di, [bp + 12]	; 3: 3 126 12

strncat$16:	; Deref £temporary3746 -> £temporary3747 £temporary3747 0

strncat$17:	; Assign £temporary3744 -> £temporary3745 £temporary3746 -> £temporary3747
x46212:	mov al, [di]	; 2: 138 5
x46214:	mov [si], al	; 2: 136 4

strncat$18:	; Increment index
x46216:	inc word [bp + 12]	; 3: 255 70 12

strncat$19:	; Goto 7
x46219:	jmp strncat$7	; 2: 235 210

strncat$20:	; BinaryAdd £temporary3748 targetLength size
x46221:	mov ax, [bp + 14]	; 3: 139 70 14
x46224:	add ax, [bp + 10]	; 3: 3 70 10

strncat$21:	; BinarySubtract £temporary3749 £temporary3748 1
x46227:	dec ax	; 1: 72

strncat$22:	; BinaryAdd £temporary3751 target £temporary3749
x46228:	mov si, [bp + 6]	; 3: 139 118 6
x46231:	add si, ax	; 2: 1 198

strncat$23:	; Deref £temporary3750 -> £temporary3751 £temporary3751 0

strncat$24:	; Assign £temporary3750 -> £temporary3751 0
x46233:	mov byte [si], 0	; 3: 198 4 0

strncat$25:	; SetReturnValue target
x46236:	mov bx, [bp + 6]	; 3: 139 94 6

strncat$26:	; Return target
x46239:	mov ax, [bp]	; 3: 139 70 0
x46242:	mov di, [bp + 4]	; 3: 139 126 4
x46245:	mov bp, [bp + 2]	; 3: 139 110 2
x46248:	jmp ax	; 2: 255 224

strncat$27:	; FunctionEnd strncat

strncmp:	; Assign index 0
x46250:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

strncmp$1:	; SignedGreaterThanEqual 26 index size
x46255:	mov ax, [bp + 10]	; 3: 139 70 10
x46258:	cmp [bp + 12], ax	; 3: 57 70 12
x46261:	jge strncmp$26	; 2: 125 105

strncmp$2:	; BinaryAdd £temporary3775 left index
x46263:	mov si, [bp + 6]	; 3: 139 118 6
x46266:	add si, [bp + 12]	; 3: 3 118 12

strncmp$3:	; Deref £temporary3774 -> £temporary3775 £temporary3775 0

strncmp$4:	; NotEqual 10 £temporary3774 -> £temporary3775 0
x46269:	cmp byte [si], 0	; 3: 128 60 0
x46272:	jne strncmp$10	; 2: 117 25

strncmp$5:	; BinaryAdd £temporary3778 right index
x46274:	mov si, [bp + 8]	; 3: 139 118 8
x46277:	add si, [bp + 12]	; 3: 3 118 12

strncmp$6:	; Deref £temporary3777 -> £temporary3778 £temporary3778 0

strncmp$7:	; NotEqual 10 £temporary3777 -> £temporary3778 0
x46280:	cmp byte [si], 0	; 3: 128 60 0
x46283:	jne strncmp$10	; 2: 117 14

strncmp$8:	; SetReturnValue 0
x46285:	mov bx, 0	; 3: 187 0 0

strncmp$9:	; Return 0
x46288:	mov ax, [bp]	; 3: 139 70 0
x46291:	mov di, [bp + 4]	; 3: 139 126 4
x46294:	mov bp, [bp + 2]	; 3: 139 110 2
x46297:	jmp ax	; 2: 255 224

strncmp$10:	; BinaryAdd £temporary3782 left index
x46299:	mov si, [bp + 6]	; 3: 139 118 6
x46302:	add si, [bp + 12]	; 3: 3 118 12

strncmp$11:	; Deref £temporary3781 -> £temporary3782 £temporary3782 0

strncmp$12:	; BinaryAdd £temporary3784 right index
x46305:	mov di, [bp + 8]	; 3: 139 126 8
x46308:	add di, [bp + 12]	; 3: 3 126 12

strncmp$13:	; Deref £temporary3783 -> £temporary3784 £temporary3784 0

strncmp$14:	; SignedGreaterThanEqual 17 £temporary3781 -> £temporary3782 £temporary3783 -> £temporary3784
x46311:	mov al, [di]	; 2: 138 5
x46313:	cmp [si], al	; 2: 56 4
x46315:	jge strncmp$17	; 2: 125 14

strncmp$15:	; SetReturnValue -1
x46317:	mov bx, -1	; 3: 187 255 255

strncmp$16:	; Return -1
x46320:	mov ax, [bp]	; 3: 139 70 0
x46323:	mov di, [bp + 4]	; 3: 139 126 4
x46326:	mov bp, [bp + 2]	; 3: 139 110 2
x46329:	jmp ax	; 2: 255 224

strncmp$17:	; BinaryAdd £temporary3787 left index
x46331:	mov si, [bp + 6]	; 3: 139 118 6
x46334:	add si, [bp + 12]	; 3: 3 118 12

strncmp$18:	; Deref £temporary3786 -> £temporary3787 £temporary3787 0

strncmp$19:	; BinaryAdd £temporary3789 right index
x46337:	mov di, [bp + 8]	; 3: 139 126 8
x46340:	add di, [bp + 12]	; 3: 3 126 12

strncmp$20:	; Deref £temporary3788 -> £temporary3789 £temporary3789 0

strncmp$21:	; SignedLessThanEqual 24 £temporary3786 -> £temporary3787 £temporary3788 -> £temporary3789
x46343:	mov al, [di]	; 2: 138 5
x46345:	cmp [si], al	; 2: 56 4
x46347:	jle strncmp$24	; 2: 126 14

strncmp$22:	; SetReturnValue 1
x46349:	mov bx, 1	; 3: 187 1 0

strncmp$23:	; Return 1
x46352:	mov ax, [bp]	; 3: 139 70 0
x46355:	mov di, [bp + 4]	; 3: 139 126 4
x46358:	mov bp, [bp + 2]	; 3: 139 110 2
x46361:	jmp ax	; 2: 255 224

strncmp$24:	; Increment index
x46363:	inc word [bp + 12]	; 3: 255 70 12

strncmp$25:	; Goto 1
x46366:	jmp strncmp$1	; 2: 235 143

strncmp$26:	; SetReturnValue 0
x46368:	mov bx, 0	; 3: 187 0 0

strncmp$27:	; Return 0
x46371:	mov ax, [bp]	; 3: 139 70 0
x46374:	mov di, [bp + 4]	; 3: 139 126 4
x46377:	mov bp, [bp + 2]	; 3: 139 110 2
x46380:	jmp ax	; 2: 255 224

strncmp$28:	; FunctionEnd strncmp

strrchr:	; Assign result 0
x46382:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

strrchr$1:	; IntegralToIntegral £temporary3802 i
x46387:	mov ax, [bp + 8]	; 3: 139 70 8
x46390:	cmp ax, 0	; 3: 131 248 0
x46393:	jge strrchr$2	; 2: 125 4
x46395:	neg ax	; 2: 247 216
x46397:	neg al	; 2: 246 216

strrchr$2:	; Assign c £temporary3802
x46399:	mov [bp + 14], al	; 3: 136 70 14

strrchr$3:	; Assign index 0
x46402:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strrchr$4:	; BinaryAdd £temporary3804 text index
x46407:	mov si, [bp + 6]	; 3: 139 118 6
x46410:	add si, [bp + 10]	; 3: 3 118 10

strrchr$5:	; Deref £temporary3803 -> £temporary3804 £temporary3804 0

strrchr$6:	; Equal 16 £temporary3803 -> £temporary3804 0
x46413:	cmp byte [si], 0	; 3: 128 60 0
x46416:	je strrchr$16	; 2: 116 27

strrchr$7:	; BinaryAdd £temporary3808 text index
x46418:	mov si, [bp + 6]	; 3: 139 118 6
x46421:	add si, [bp + 10]	; 3: 3 118 10

strrchr$8:	; Deref £temporary3807 -> £temporary3808 £temporary3808 0

strrchr$9:	; NotEqual 14 £temporary3807 -> £temporary3808 c
x46424:	mov al, [bp + 14]	; 3: 138 70 14
x46427:	cmp [si], al	; 2: 56 4
x46429:	jne strrchr$14	; 2: 117 9

strrchr$10:	; BinaryAdd £temporary3811 text index
x46431:	mov si, [bp + 6]	; 3: 139 118 6
x46434:	add si, [bp + 10]	; 3: 3 118 10

strrchr$11:	; Deref £temporary3810 -> £temporary3811 £temporary3811 0

strrchr$12:	; address £temporary3812 £temporary3810 -> £temporary3811

strrchr$13:	; Assign result £temporary3812
x46437:	mov [bp + 12], si	; 3: 137 118 12

strrchr$14:	; Increment index
x46440:	inc word [bp + 10]	; 3: 255 70 10

strrchr$15:	; Goto 4
x46443:	jmp strrchr$4	; 2: 235 218

strrchr$16:	; SetReturnValue result
x46445:	mov bx, [bp + 12]	; 3: 139 94 12

strrchr$17:	; Return result
x46448:	mov ax, [bp]	; 3: 139 70 0
x46451:	mov di, [bp + 4]	; 3: 139 126 4
x46454:	mov bp, [bp + 2]	; 3: 139 110 2
x46457:	jmp ax	; 2: 255 224

strrchr$18:	; FunctionEnd strrchr

memmove:	; IntegralToIntegral £temporary3930 target
x46459:	mov ax, [bp + 6]	; 3: 139 70 6

memmove$1:	; Assign charTarget £temporary3930
x46462:	mov [bp + 12], ax	; 3: 137 70 12

memmove$2:	; IntegralToIntegral £temporary3931 source
x46465:	mov ax, [bp + 8]	; 3: 139 70 8

memmove$3:	; Assign charSource £temporary3931
x46468:	mov [bp + 14], ax	; 3: 137 70 14

memmove$4:	; SignedGreaterThanEqual 14 source target
x46471:	mov ax, [bp + 6]	; 3: 139 70 6
x46474:	cmp [bp + 8], ax	; 3: 57 70 8
x46477:	jge memmove$14	; 2: 125 34

memmove$5:	; BinarySubtract index size 1
x46479:	mov ax, [bp + 10]	; 3: 139 70 10
x46482:	dec ax	; 1: 72
x46483:	mov [bp + 16], ax	; 3: 137 70 16

memmove$6:	; SignedLessThan 23 index 0
x46486:	cmp word [bp + 16], 0	; 4: 131 126 16 0
x46490:	jl memmove$23	; 2: 124 55

memmove$7:	; BinaryAdd £temporary3937 charTarget index
x46492:	mov si, [bp + 12]	; 3: 139 118 12
x46495:	add si, [bp + 16]	; 3: 3 118 16

memmove$8:	; Deref £temporary3936 -> £temporary3937 £temporary3937 0

memmove$9:	; BinaryAdd £temporary3939 charSource index
x46498:	mov di, [bp + 14]	; 3: 139 126 14
x46501:	add di, [bp + 16]	; 3: 3 126 16

memmove$10:	; Deref £temporary3938 -> £temporary3939 £temporary3939 0

memmove$11:	; Assign £temporary3936 -> £temporary3937 £temporary3938 -> £temporary3939
x46504:	mov al, [di]	; 2: 138 5
x46506:	mov [si], al	; 2: 136 4

memmove$12:	; Decrement index
x46508:	dec word [bp + 16]	; 3: 255 78 16

memmove$13:	; Goto 6
x46511:	jmp memmove$6	; 2: 235 229

memmove$14:	; Assign index 0
x46513:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

memmove$15:	; SignedGreaterThanEqual 23 index size
x46518:	mov ax, [bp + 10]	; 3: 139 70 10
x46521:	cmp [bp + 16], ax	; 3: 57 70 16
x46524:	jge memmove$23	; 2: 125 21

memmove$16:	; BinaryAdd £temporary3943 charTarget index
x46526:	mov si, [bp + 12]	; 3: 139 118 12
x46529:	add si, [bp + 16]	; 3: 3 118 16

memmove$17:	; Deref £temporary3942 -> £temporary3943 £temporary3943 0

memmove$18:	; BinaryAdd £temporary3945 charSource index
x46532:	mov di, [bp + 14]	; 3: 139 126 14
x46535:	add di, [bp + 16]	; 3: 3 126 16

memmove$19:	; Deref £temporary3944 -> £temporary3945 £temporary3945 0

memmove$20:	; Assign £temporary3942 -> £temporary3943 £temporary3944 -> £temporary3945
x46538:	mov al, [di]	; 2: 138 5
x46540:	mov [si], al	; 2: 136 4

memmove$21:	; Increment index
x46542:	inc word [bp + 16]	; 3: 255 70 16

memmove$22:	; Goto 15
x46545:	jmp memmove$15	; 2: 235 227

memmove$23:	; IntegralToIntegral £temporary3946 target
x46547:	mov bx, [bp + 6]	; 3: 139 94 6

memmove$24:	; SetReturnValue £temporary3946

memmove$25:	; Return £temporary3946
x46550:	mov ax, [bp]	; 3: 139 70 0
x46553:	mov di, [bp + 4]	; 3: 139 126 4
x46556:	mov bp, [bp + 2]	; 3: 139 110 2
x46559:	jmp ax	; 2: 255 224

memmove$26:	; FunctionEnd memmove

memset:	; IntegralToIntegral £temporary3972 block
x46561:	mov ax, [bp + 6]	; 3: 139 70 6

memset$1:	; Assign charBlock £temporary3972
x46564:	mov [bp + 12], ax	; 3: 137 70 12

memset$2:	; IntegralToIntegral £temporary3973 i
x46567:	mov ax, [bp + 8]	; 3: 139 70 8
x46570:	cmp ax, 0	; 3: 131 248 0
x46573:	jge memset$3	; 2: 125 4
x46575:	neg ax	; 2: 247 216
x46577:	neg al	; 2: 246 216

memset$3:	; Assign c £temporary3973
x46579:	mov [bp + 14], al	; 3: 136 70 14

memset$4:	; Assign index 0
x46582:	mov word [bp + 15], 0	; 5: 199 70 15 0 0

memset$5:	; SignedGreaterThanEqual 11 index size
x46587:	mov ax, [bp + 10]	; 3: 139 70 10
x46590:	cmp [bp + 15], ax	; 3: 57 70 15
x46593:	jge memset$11	; 2: 125 16

memset$6:	; BinaryAdd £temporary3977 charBlock index
x46595:	mov si, [bp + 12]	; 3: 139 118 12
x46598:	add si, [bp + 15]	; 3: 3 118 15

memset$7:	; Deref £temporary3976 -> £temporary3977 £temporary3977 0

memset$8:	; Assign £temporary3976 -> £temporary3977 c
x46601:	mov al, [bp + 14]	; 3: 138 70 14
x46604:	mov [si], al	; 2: 136 4

memset$9:	; Increment index
x46606:	inc word [bp + 15]	; 3: 255 70 15

memset$10:	; Goto 5
x46609:	jmp memset$5	; 2: 235 232

memset$11:	; SetReturnValue block
x46611:	mov bx, [bp + 6]	; 3: 139 94 6

memset$12:	; Return block
x46614:	mov ax, [bp]	; 3: 139 70 0
x46617:	mov di, [bp + 4]	; 3: 139 126 4
x46620:	mov bp, [bp + 2]	; 3: 139 110 2
x46623:	jmp ax	; 2: 255 224

memset$13:	; FunctionEnd memset

memchr:	; IntegralToIntegral £temporary3961 block
x46625:	mov ax, [bp + 6]	; 3: 139 70 6

memchr$1:	; Assign charBlock £temporary3961
x46628:	mov [bp + 14], ax	; 3: 137 70 14

memchr$2:	; IntegralToIntegral £temporary3962 i
x46631:	mov ax, [bp + 8]	; 3: 139 70 8
x46634:	cmp ax, 0	; 3: 131 248 0
x46637:	jge memchr$3	; 2: 125 4
x46639:	neg ax	; 2: 247 216
x46641:	neg al	; 2: 246 216

memchr$3:	; Assign c £temporary3962
x46643:	mov [bp + 16], al	; 3: 136 70 16

memchr$4:	; Assign index 0
x46646:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

memchr$5:	; SignedGreaterThanEqual 17 index size
x46651:	mov ax, [bp + 10]	; 3: 139 70 10
x46654:	cmp [bp + 12], ax	; 3: 57 70 12
x46657:	jge memchr$17	; 2: 125 35

memchr$6:	; BinaryAdd £temporary3966 charBlock index
x46659:	mov si, [bp + 14]	; 3: 139 118 14
x46662:	add si, [bp + 12]	; 3: 3 118 12

memchr$7:	; Deref £temporary3965 -> £temporary3966 £temporary3966 0

memchr$8:	; NotEqual 15 £temporary3965 -> £temporary3966 c
x46665:	mov al, [bp + 16]	; 3: 138 70 16
x46668:	cmp [si], al	; 2: 56 4
x46670:	jne memchr$15	; 2: 117 17

memchr$9:	; BinaryAdd £temporary3969 charBlock index
x46672:	mov bx, [bp + 14]	; 3: 139 94 14
x46675:	add bx, [bp + 12]	; 3: 3 94 12

memchr$10:	; Deref £temporary3968 -> £temporary3969 £temporary3969 0

memchr$11:	; address £temporary3970 £temporary3968 -> £temporary3969

memchr$12:	; IntegralToIntegral £temporary3971 £temporary3970

memchr$13:	; SetReturnValue £temporary3971

memchr$14:	; Return £temporary3971
x46678:	mov ax, [bp]	; 3: 139 70 0
x46681:	mov di, [bp + 4]	; 3: 139 126 4
x46684:	mov bp, [bp + 2]	; 3: 139 110 2
x46687:	jmp ax	; 2: 255 224

memchr$15:	; Increment index
x46689:	inc word [bp + 12]	; 3: 255 70 12

memchr$16:	; Goto 5
x46692:	jmp memchr$5	; 2: 235 213

memchr$17:	; SetReturnValue 0
x46694:	mov bx, 0	; 3: 187 0 0

memchr$18:	; Return 0
x46697:	mov ax, [bp]	; 3: 139 70 0
x46700:	mov di, [bp + 4]	; 3: 139 126 4
x46703:	mov bp, [bp + 2]	; 3: 139 110 2
x46706:	jmp ax	; 2: 255 224

memchr$19:	; FunctionEnd memchr

memcmp:	; IntegralToIntegral £temporary3947 left
x46708:	mov ax, [bp + 6]	; 3: 139 70 6

memcmp$1:	; Assign charLeft £temporary3947
x46711:	mov [bp + 12], ax	; 3: 137 70 12

memcmp$2:	; IntegralToIntegral £temporary3948 right
x46714:	mov ax, [bp + 8]	; 3: 139 70 8

memcmp$3:	; Assign charRight £temporary3948
x46717:	mov [bp + 14], ax	; 3: 137 70 14

memcmp$4:	; Assign index 0
x46720:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

memcmp$5:	; SignedGreaterThanEqual 22 index size
x46725:	mov ax, [bp + 10]	; 3: 139 70 10
x46728:	cmp [bp + 16], ax	; 3: 57 70 16
x46731:	jge memcmp$22	; 2: 125 69

memcmp$6:	; BinaryAdd £temporary3952 charLeft index
x46733:	mov si, [bp + 12]	; 3: 139 118 12
x46736:	add si, [bp + 16]	; 3: 3 118 16

memcmp$7:	; Deref £temporary3951 -> £temporary3952 £temporary3952 0

memcmp$8:	; BinaryAdd £temporary3954 charRight index
x46739:	mov di, [bp + 14]	; 3: 139 126 14
x46742:	add di, [bp + 16]	; 3: 3 126 16

memcmp$9:	; Deref £temporary3953 -> £temporary3954 £temporary3954 0

memcmp$10:	; SignedGreaterThanEqual 13 £temporary3951 -> £temporary3952 £temporary3953 -> £temporary3954
x46745:	mov al, [di]	; 2: 138 5
x46747:	cmp [si], al	; 2: 56 4
x46749:	jge memcmp$13	; 2: 125 14

memcmp$11:	; SetReturnValue -1
x46751:	mov bx, -1	; 3: 187 255 255

memcmp$12:	; Return -1
x46754:	mov ax, [bp]	; 3: 139 70 0
x46757:	mov di, [bp + 4]	; 3: 139 126 4
x46760:	mov bp, [bp + 2]	; 3: 139 110 2
x46763:	jmp ax	; 2: 255 224

memcmp$13:	; BinaryAdd £temporary3957 charLeft index
x46765:	mov si, [bp + 12]	; 3: 139 118 12
x46768:	add si, [bp + 16]	; 3: 3 118 16

memcmp$14:	; Deref £temporary3956 -> £temporary3957 £temporary3957 0

memcmp$15:	; BinaryAdd £temporary3959 charRight index
x46771:	mov di, [bp + 14]	; 3: 139 126 14
x46774:	add di, [bp + 16]	; 3: 3 126 16

memcmp$16:	; Deref £temporary3958 -> £temporary3959 £temporary3959 0

memcmp$17:	; SignedLessThanEqual 20 £temporary3956 -> £temporary3957 £temporary3958 -> £temporary3959
x46777:	mov al, [di]	; 2: 138 5
x46779:	cmp [si], al	; 2: 56 4
x46781:	jle memcmp$20	; 2: 126 14

memcmp$18:	; SetReturnValue 1
x46783:	mov bx, 1	; 3: 187 1 0

memcmp$19:	; Return 1
x46786:	mov ax, [bp]	; 3: 139 70 0
x46789:	mov di, [bp + 4]	; 3: 139 126 4
x46792:	mov bp, [bp + 2]	; 3: 139 110 2
x46795:	jmp ax	; 2: 255 224

memcmp$20:	; Increment index
x46797:	inc word [bp + 16]	; 3: 255 70 16

memcmp$21:	; Goto 5
x46800:	jmp memcmp$5	; 2: 235 179

memcmp$22:	; SetReturnValue 0
x46802:	mov bx, 0	; 3: 187 0 0

memcmp$23:	; Return 0
x46805:	mov ax, [bp]	; 3: 139 70 0
x46808:	mov di, [bp + 4]	; 3: 139 126 4
x46811:	mov bp, [bp + 2]	; 3: 139 110 2
x46814:	jmp ax	; 2: 255 224

memcmp$24:	; FunctionEnd memcmp

strspn:	; Assign index 0
x46816:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strspn$1:	; BinaryAdd £temporary3814 mainString index
x46821:	mov si, [bp + 6]	; 3: 139 118 6
x46824:	add si, [bp + 10]	; 3: 3 118 10

strspn$2:	; Deref £temporary3813 -> £temporary3814 £temporary3814 0

strspn$3:	; Equal 18 £temporary3813 -> £temporary3814 0
x46827:	cmp byte [si], 0	; 3: 128 60 0
x46830:	je strspn$18	; 2: 116 66

strspn$4:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strspn$5:	; Parameter 12 charSet 6
x46832:	mov ax, [bp + 8]	; 3: 139 70 8
x46835:	mov [bp + 18], ax	; 3: 137 70 18

strspn$6:	; BinaryAdd £temporary3818 mainString index
x46838:	mov si, [bp + 6]	; 3: 139 118 6
x46841:	add si, [bp + 10]	; 3: 3 118 10

strspn$7:	; Deref £temporary3817 -> £temporary3818 £temporary3818 0

strspn$8:	; IntegralToIntegral £temporary3819 £temporary3817 -> £temporary3818
x46844:	mov al, [si]	; 2: 138 4
x46846:	and ax, 255	; 3: 37 255 0
x46849:	cmp al, 0	; 2: 60 0
x46851:	jge strspn$9	; 2: 125 4
x46853:	neg al	; 2: 246 216
x46855:	neg ax	; 2: 247 216

strspn$9:	; Parameter 12 £temporary3819 8
x46857:	mov [bp + 20], ax	; 3: 137 70 20

strspn$10:	; Call 12 strchr 0
x46860:	mov word [bp + 12], strspn$11	; 5: 199 70 12 26 183
x46865:	mov [bp + 14], bp	; 3: 137 110 14
x46868:	add bp, 12	; 3: 131 197 12
x46871:	jmp strchr	; 3: 233 164 106

strspn$11:	; PostCall 12

strspn$12:	; GetReturnValue £temporary3820

strspn$13:	; NotEqual 16 £temporary3820 0
x46874:	cmp bx, 0	; 3: 131 251 0
x46877:	jne strspn$16	; 2: 117 14

strspn$14:	; SetReturnValue index
x46879:	mov bx, [bp + 10]	; 3: 139 94 10

strspn$15:	; Return index
x46882:	mov ax, [bp]	; 3: 139 70 0
x46885:	mov di, [bp + 4]	; 3: 139 126 4
x46888:	mov bp, [bp + 2]	; 3: 139 110 2
x46891:	jmp ax	; 2: 255 224

strspn$16:	; Increment index
x46893:	inc word [bp + 10]	; 3: 255 70 10

strspn$17:	; Goto 1
x46896:	jmp strspn$1	; 2: 235 179

strspn$18:	; SetReturnValue -1
x46898:	mov bx, -1	; 3: 187 255 255

strspn$19:	; Return -1
x46901:	mov ax, [bp]	; 3: 139 70 0
x46904:	mov di, [bp + 4]	; 3: 139 126 4
x46907:	mov bp, [bp + 2]	; 3: 139 110 2
x46910:	jmp ax	; 2: 255 224

strspn$20:	; FunctionEnd strspn

strcspn:	; Assign index 0
x46912:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strcspn$1:	; BinaryAdd £temporary3825 mainString index
x46917:	mov si, [bp + 6]	; 3: 139 118 6
x46920:	add si, [bp + 10]	; 3: 3 118 10

strcspn$2:	; Deref £temporary3824 -> £temporary3825 £temporary3825 0

strcspn$3:	; Equal 18 £temporary3824 -> £temporary3825 0
x46923:	cmp byte [si], 0	; 3: 128 60 0
x46926:	je strcspn$18	; 2: 116 66

strcspn$4:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strcspn$5:	; Parameter 12 charSet 6
x46928:	mov ax, [bp + 8]	; 3: 139 70 8
x46931:	mov [bp + 18], ax	; 3: 137 70 18

strcspn$6:	; BinaryAdd £temporary3829 mainString index
x46934:	mov si, [bp + 6]	; 3: 139 118 6
x46937:	add si, [bp + 10]	; 3: 3 118 10

strcspn$7:	; Deref £temporary3828 -> £temporary3829 £temporary3829 0

strcspn$8:	; IntegralToIntegral £temporary3830 £temporary3828 -> £temporary3829
x46940:	mov al, [si]	; 2: 138 4
x46942:	and ax, 255	; 3: 37 255 0
x46945:	cmp al, 0	; 2: 60 0
x46947:	jge strcspn$9	; 2: 125 4
x46949:	neg al	; 2: 246 216
x46951:	neg ax	; 2: 247 216

strcspn$9:	; Parameter 12 £temporary3830 8
x46953:	mov [bp + 20], ax	; 3: 137 70 20

strcspn$10:	; Call 12 strchr 0
x46956:	mov word [bp + 12], strcspn$11	; 5: 199 70 12 122 183
x46961:	mov [bp + 14], bp	; 3: 137 110 14
x46964:	add bp, 12	; 3: 131 197 12
x46967:	jmp strchr	; 3: 233 68 106

strcspn$11:	; PostCall 12

strcspn$12:	; GetReturnValue £temporary3831

strcspn$13:	; Equal 16 £temporary3831 0
x46970:	cmp bx, 0	; 3: 131 251 0
x46973:	je strcspn$16	; 2: 116 14

strcspn$14:	; SetReturnValue index
x46975:	mov bx, [bp + 10]	; 3: 139 94 10

strcspn$15:	; Return index
x46978:	mov ax, [bp]	; 3: 139 70 0
x46981:	mov di, [bp + 4]	; 3: 139 126 4
x46984:	mov bp, [bp + 2]	; 3: 139 110 2
x46987:	jmp ax	; 2: 255 224

strcspn$16:	; Increment index
x46989:	inc word [bp + 10]	; 3: 255 70 10

strcspn$17:	; Goto 1
x46992:	jmp strcspn$1	; 2: 235 179

strcspn$18:	; SetReturnValue -1
x46994:	mov bx, -1	; 3: 187 255 255

strcspn$19:	; Return -1
x46997:	mov ax, [bp]	; 3: 139 70 0
x47000:	mov di, [bp + 4]	; 3: 139 126 4
x47003:	mov bp, [bp + 2]	; 3: 139 110 2
x47006:	jmp ax	; 2: 255 224

strcspn$20:	; FunctionEnd strcspn

strtok:	; Equal 37 string 0
x47008:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x47012:	je strtok$37	; 4: 15 132 150 0

strtok$1:	; Deref £temporary3876 -> string string 0
x47016:	mov si, [bp + 6]	; 3: 139 118 6

strtok$2:	; NotEqual 5 £temporary3876 -> string 0
x47019:	cmp byte [si], 0	; 3: 128 60 0
x47022:	jne strtok$5	; 2: 117 14

strtok$3:	; SetReturnValue 0
x47024:	mov bx, 0	; 3: 187 0 0

strtok$4:	; Return 0
x47027:	mov ax, [bp]	; 3: 139 70 0
x47030:	mov di, [bp + 4]	; 3: 139 126 4
x47033:	mov bp, [bp + 2]	; 3: 139 110 2
x47036:	jmp ax	; 2: 255 224

strtok$5:	; Assign index 0
x47038:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strtok$6:	; BinaryAdd £temporary3879 string index
x47043:	mov si, [bp + 6]	; 3: 139 118 6
x47046:	add si, [bp + 10]	; 3: 3 118 10

strtok$7:	; Deref £temporary3878 -> £temporary3879 £temporary3879 0

strtok$8:	; Equal 31 £temporary3878 -> £temporary3879 0
x47049:	cmp byte [si], 0	; 3: 128 60 0
x47052:	je strtok$31	; 2: 116 88

strtok$9:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtok$10:	; Parameter 14 charSet 6
x47054:	mov ax, [bp + 8]	; 3: 139 70 8
x47057:	mov [bp + 20], ax	; 3: 137 70 20

strtok$11:	; BinaryAdd £temporary3883 string index
x47060:	mov si, [bp + 6]	; 3: 139 118 6
x47063:	add si, [bp + 10]	; 3: 3 118 10

strtok$12:	; Deref £temporary3882 -> £temporary3883 £temporary3883 0

strtok$13:	; IntegralToIntegral £temporary3884 £temporary3882 -> £temporary3883
x47066:	mov al, [si]	; 2: 138 4
x47068:	and ax, 255	; 3: 37 255 0
x47071:	cmp al, 0	; 2: 60 0
x47073:	jge strtok$14	; 2: 125 4
x47075:	neg al	; 2: 246 216
x47077:	neg ax	; 2: 247 216

strtok$14:	; Parameter 14 £temporary3884 8
x47079:	mov [bp + 22], ax	; 3: 137 70 22

strtok$15:	; Call 14 strchr 0
x47082:	mov word [bp + 14], strtok$16	; 5: 199 70 14 248 183
x47087:	mov [bp + 16], bp	; 3: 137 110 16
x47090:	add bp, 14	; 3: 131 197 14
x47093:	jmp strchr	; 3: 233 198 105

strtok$16:	; PostCall 14

strtok$17:	; GetReturnValue £temporary3885

strtok$18:	; Equal 29 £temporary3885 0
x47096:	cmp bx, 0	; 3: 131 251 0
x47099:	je strtok$29	; 2: 116 36

strtok$19:	; BinaryAdd £temporary3888 string index
x47101:	mov si, [bp + 6]	; 3: 139 118 6
x47104:	add si, [bp + 10]	; 3: 3 118 10

strtok$20:	; Deref £temporary3887 -> £temporary3888 £temporary3888 0

strtok$21:	; Assign £temporary3887 -> £temporary3888 0
x47107:	mov byte [si], 0	; 3: 198 4 0

strtok$22:	; BinaryAdd £temporary3889 index 1
x47110:	mov ax, [bp + 10]	; 3: 139 70 10
x47113:	inc ax	; 1: 64

strtok$23:	; BinaryAdd £temporary3891 string £temporary3889
x47114:	mov si, [bp + 6]	; 3: 139 118 6
x47117:	add si, ax	; 2: 1 198

strtok$24:	; Deref £temporary3890 -> £temporary3891 £temporary3891 0

strtok$25:	; address £temporary3892 £temporary3890 -> £temporary3891

strtok$26:	; Assign token £temporary3892
x47119:	mov [@8781$token], si	; 4: 137 54 251 184

strtok$27:	; SetReturnValue string
x47123:	mov bx, [bp + 6]	; 3: 139 94 6

strtok$28:	; Return string
x47126:	mov ax, [bp]	; 3: 139 70 0
x47129:	mov di, [bp + 4]	; 3: 139 126 4
x47132:	mov bp, [bp + 2]	; 3: 139 110 2
x47135:	jmp ax	; 2: 255 224

strtok$29:	; Increment index
x47137:	inc word [bp + 10]	; 3: 255 70 10

strtok$30:	; Goto 6
x47140:	jmp strtok$6	; 2: 235 157

strtok$31:	; BinaryAdd £temporary3894 string index
x47142:	mov si, [bp + 6]	; 3: 139 118 6
x47145:	add si, [bp + 10]	; 3: 3 118 10

strtok$32:	; Deref £temporary3893 -> £temporary3894 £temporary3894 0

strtok$33:	; address £temporary3895 £temporary3893 -> £temporary3894

strtok$34:	; Assign token £temporary3895
x47148:	mov [@8781$token], si	; 4: 137 54 251 184

strtok$35:	; SetReturnValue string
x47152:	mov bx, [bp + 6]	; 3: 139 94 6

strtok$36:	; Return string
x47155:	mov ax, [bp]	; 3: 139 70 0
x47158:	mov di, [bp + 4]	; 3: 139 126 4
x47161:	mov bp, [bp + 2]	; 3: 139 110 2
x47164:	jmp ax	; 2: 255 224

strtok$37:	; NotEqual 40 token 0
x47166:	cmp word [@8781$token], 0	; 5: 131 62 251 184 0
x47171:	jne strtok$40	; 2: 117 14

strtok$38:	; SetReturnValue 0
x47173:	mov bx, 0	; 3: 187 0 0

strtok$39:	; Return 0
x47176:	mov ax, [bp]	; 3: 139 70 0
x47179:	mov di, [bp + 4]	; 3: 139 126 4
x47182:	mov bp, [bp + 2]	; 3: 139 110 2
x47185:	jmp ax	; 2: 255 224

strtok$40:	; NotEqual 43 (@8781$token,0) 0
x47187:	mov si, [@8781$token]	; 4: 139 54 251 184
x47191:	cmp byte [si], 0	; 3: 128 60 0
x47194:	jne strtok$43	; 2: 117 14

strtok$41:	; SetReturnValue 0
x47196:	mov bx, 0	; 3: 187 0 0

strtok$42:	; Return 0
x47199:	mov ax, [bp]	; 3: 139 70 0
x47202:	mov di, [bp + 4]	; 3: 139 126 4
x47205:	mov bp, [bp + 2]	; 3: 139 110 2
x47208:	jmp ax	; 2: 255 224

strtok$43:	; Assign index 0
x47210:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strtok$44:	; BinaryAdd £temporary3900 token index
x47215:	mov si, [@8781$token]	; 4: 139 54 251 184
x47219:	add si, [bp + 10]	; 3: 3 118 10

strtok$45:	; Deref £temporary3899 -> £temporary3900 £temporary3900 0

strtok$46:	; Equal 70 £temporary3899 -> £temporary3900 0
x47222:	cmp byte [si], 0	; 3: 128 60 0
x47225:	je strtok$70	; 2: 116 97

strtok$47:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtok$48:	; Parameter 14 charSet 6
x47227:	mov ax, [bp + 8]	; 3: 139 70 8
x47230:	mov [bp + 20], ax	; 3: 137 70 20

strtok$49:	; BinaryAdd £temporary3904 token index
x47233:	mov si, [@8781$token]	; 4: 139 54 251 184
x47237:	add si, [bp + 10]	; 3: 3 118 10

strtok$50:	; Deref £temporary3903 -> £temporary3904 £temporary3904 0

strtok$51:	; IntegralToIntegral £temporary3905 £temporary3903 -> £temporary3904
x47240:	mov al, [si]	; 2: 138 4
x47242:	and ax, 255	; 3: 37 255 0
x47245:	cmp al, 0	; 2: 60 0
x47247:	jge strtok$52	; 2: 125 4
x47249:	neg al	; 2: 246 216
x47251:	neg ax	; 2: 247 216

strtok$52:	; Parameter 14 £temporary3905 8
x47253:	mov [bp + 22], ax	; 3: 137 70 22

strtok$53:	; Call 14 strchr 0
x47256:	mov word [bp + 14], strtok$54	; 5: 199 70 14 166 184
x47261:	mov [bp + 16], bp	; 3: 137 110 16
x47264:	add bp, 14	; 3: 131 197 14
x47267:	jmp strchr	; 3: 233 24 105

strtok$54:	; PostCall 14

strtok$55:	; GetReturnValue £temporary3906

strtok$56:	; Equal 68 £temporary3906 0
x47270:	cmp bx, 0	; 3: 131 251 0
x47273:	je strtok$68	; 2: 116 44

strtok$57:	; Assign tokenStart2 token
x47275:	mov ax, [@8781$token]	; 3: 161 251 184
x47278:	mov [bp + 14], ax	; 3: 137 70 14

strtok$58:	; BinaryAdd £temporary3909 token index
x47281:	mov si, [@8781$token]	; 4: 139 54 251 184
x47285:	add si, [bp + 10]	; 3: 3 118 10

strtok$59:	; Deref £temporary3908 -> £temporary3909 £temporary3909 0

strtok$60:	; Assign £temporary3908 -> £temporary3909 0
x47288:	mov byte [si], 0	; 3: 198 4 0

strtok$61:	; BinaryAdd £temporary3910 index 1
x47291:	mov ax, [bp + 10]	; 3: 139 70 10
x47294:	inc ax	; 1: 64

strtok$62:	; BinaryAdd £temporary3912 token £temporary3910
x47295:	mov si, [@8781$token]	; 4: 139 54 251 184
x47299:	add si, ax	; 2: 1 198

strtok$63:	; Deref £temporary3911 -> £temporary3912 £temporary3912 0

strtok$64:	; address £temporary3913 £temporary3911 -> £temporary3912

strtok$65:	; Assign token £temporary3913
x47301:	mov [@8781$token], si	; 4: 137 54 251 184

strtok$66:	; SetReturnValue tokenStart2
x47305:	mov bx, [bp + 14]	; 3: 139 94 14

strtok$67:	; Return tokenStart2
x47308:	mov ax, [bp]	; 3: 139 70 0
x47311:	mov di, [bp + 4]	; 3: 139 126 4
x47314:	mov bp, [bp + 2]	; 3: 139 110 2
x47317:	jmp ax	; 2: 255 224

strtok$68:	; Increment index
x47319:	inc word [bp + 10]	; 3: 255 70 10

strtok$69:	; Goto 44
x47322:	jmp strtok$44	; 2: 235 147

strtok$70:	; Assign tokenStart token
x47324:	mov ax, [@8781$token]	; 3: 161 251 184
x47327:	mov [bp + 12], ax	; 3: 137 70 12

strtok$71:	; BinaryAdd £temporary3915 token index
x47330:	mov si, [@8781$token]	; 4: 139 54 251 184
x47334:	add si, [bp + 10]	; 3: 3 118 10

strtok$72:	; Deref £temporary3914 -> £temporary3915 £temporary3915 0

strtok$73:	; address £temporary3916 £temporary3914 -> £temporary3915

strtok$74:	; Assign token £temporary3916
x47337:	mov [@8781$token], si	; 4: 137 54 251 184

strtok$75:	; SetReturnValue tokenStart
x47341:	mov bx, [bp + 12]	; 3: 139 94 12

strtok$76:	; Return tokenStart
x47344:	mov ax, [bp]	; 3: 139 70 0
x47347:	mov di, [bp + 4]	; 3: 139 126 4
x47350:	mov bp, [bp + 2]	; 3: 139 110 2
x47353:	jmp ax	; 2: 255 224

strtok$77:	; FunctionEnd strtok

@8781$token:
x47355:	dw 0	; 2: 0 0

stdlib_test:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$1:	; Parameter 8 string_atof28221232E4562229203D2025f0A# 6
x47357:	mov word [bp + 14], @13228$string_atof28221232E4562229203D2025f0A#	; 5: 199 70 14 64 190

stdlib_test$2:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$3:	; Parameter 8 string_1232E456# 14
x47362:	mov word [bp + 22], @13229$string_1232E456#	; 5: 199 70 22 86 190

stdlib_test$4:	; Call 8 atof 8
x47367:	mov word [bp + 16], stdlib_test$5	; 5: 199 70 16 21 185
x47372:	mov [bp + 18], bp	; 3: 137 110 18
x47375:	add bp, 16	; 3: 131 197 16
x47378:	jmp atof	; 3: 233 42 7

stdlib_test$5:	; PostCall 8

stdlib_test$6:	; GetReturnValue £temporary6056

stdlib_test$7:	; Parameter 8 £temporary6056 8
x47381:	fstp qword [bp + 16]	; 3: 221 94 16

stdlib_test$8:	; Call 8 printf 0
x47384:	mov word [bp + 8], stdlib_test$9	; 5: 199 70 8 43 185
x47389:	mov [bp + 10], bp	; 3: 137 110 10
x47392:	add bp, 8	; 3: 131 197 8
x47395:	mov di, bp	; 2: 137 239
x47397:	add di, 8	; 3: 131 199 8
x47400:	jmp printf	; 3: 233 217 83

stdlib_test$9:	; PostCall 8

stdlib_test$10:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$11:	; Parameter 8 string_strtod28221232E456789abc222C2026p29203D202825f2C2025s290A# 6
x47403:	mov word [bp + 14], @13232$string_strtod28221232E456789abc222C2026p29203D202825f2C2025s290A#	; 5: 199 70 14 94 190

stdlib_test$12:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$13:	; Parameter 8 string_1232E456789abc# 14
x47408:	mov word [bp + 22], @13233$string_1232E456789abc#	; 5: 199 70 22 134 190

stdlib_test$14:	; address £temporary6058 p
x47413:	mov si, bp	; 2: 137 238
x47415:	add si, 6	; 3: 131 198 6

stdlib_test$15:	; Parameter 8 £temporary6058 16
x47418:	mov [bp + 24], si	; 3: 137 118 24

stdlib_test$16:	; Call 8 strtod 8
x47421:	mov word [bp + 16], stdlib_test$17	; 5: 199 70 16 75 185
x47426:	mov [bp + 18], bp	; 3: 137 110 18
x47429:	add bp, 16	; 3: 131 197 16
x47432:	jmp strtod	; 3: 233 24 7

stdlib_test$17:	; PostCall 8

stdlib_test$18:	; GetReturnValue £temporary6059

stdlib_test$19:	; Parameter 8 £temporary6059 8
x47435:	fstp qword [bp + 16]	; 3: 221 94 16

stdlib_test$20:	; Parameter 8 p 16
x47438:	mov ax, [bp + 6]	; 3: 139 70 6
x47441:	mov [bp + 24], ax	; 3: 137 70 24

stdlib_test$21:	; Call 8 printf 0
x47444:	mov word [bp + 8], stdlib_test$22	; 5: 199 70 8 103 185
x47449:	mov [bp + 10], bp	; 3: 137 110 10
x47452:	add bp, 8	; 3: 131 197 8
x47455:	mov di, bp	; 2: 137 239
x47457:	add di, 10	; 3: 131 199 10
x47460:	jmp printf	; 3: 233 157 83

stdlib_test$22:	; PostCall 8

stdlib_test$23:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$24:	; Parameter 6 string_0Agetenv2822path2229203D2025s0A# 6
x47463:	mov word [bp + 12], @13237$string_0Agetenv2822path2229203D2025s0A#	; 5: 199 70 12 148 190

stdlib_test$25:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$26:	; Parameter 6 string_path# 14
x47468:	mov word [bp + 20], @13238$string_path#	; 5: 199 70 20 170 190

stdlib_test$27:	; Call 6 getenv 8
x47473:	mov word [bp + 14], stdlib_test$28	; 5: 199 70 14 127 185
x47478:	mov [bp + 16], bp	; 3: 137 110 16
x47481:	add bp, 14	; 3: 131 197 14
x47484:	jmp getenv	; 3: 233 65 7

stdlib_test$28:	; PostCall 6

stdlib_test$29:	; GetReturnValue £temporary6061

stdlib_test$30:	; Parameter 6 £temporary6061 8
x47487:	mov [bp + 14], bx	; 3: 137 94 14

stdlib_test$31:	; Call 6 printf 0
x47490:	mov word [bp + 6], stdlib_test$32	; 5: 199 70 6 149 185
x47495:	mov [bp + 8], bp	; 3: 137 110 8
x47498:	add bp, 6	; 3: 131 197 6
x47501:	mov di, bp	; 2: 137 239
x47503:	add di, 2	; 3: 131 199 2
x47506:	jmp printf	; 3: 233 111 83

stdlib_test$32:	; PostCall 6

stdlib_test$33:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$34:	; Parameter 6 string_system2822dir22290A# 6
x47509:	mov word [bp + 12], @13241$string_system2822dir22290A#	; 5: 199 70 12 175 190

stdlib_test$35:	; Call 6 printf 0
x47514:	mov word [bp + 6], stdlib_test$36	; 5: 199 70 6 170 185
x47519:	mov [bp + 8], bp	; 3: 137 110 8
x47522:	add bp, 6	; 3: 131 197 6
x47525:	mov di, bp	; 2: 137 239
x47527:	jmp printf	; 3: 233 90 83

stdlib_test$36:	; PostCall 6

stdlib_test$37:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$38:	; Parameter 6 string_dir# 6
x47530:	mov word [bp + 12], @13243$string_dir#	; 5: 199 70 12 190 190

stdlib_test$39:	; Call 6 system 0
x47535:	mov word [bp + 6], stdlib_test$40	; 5: 199 70 6 189 185
x47540:	mov [bp + 8], bp	; 3: 137 110 8
x47543:	add bp, 6	; 3: 131 197 6
x47546:	jmp system	; 3: 233 17 7

stdlib_test$40:	; PostCall 6

stdlib_test$41:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$42:	; Parameter 6 string_0Aabs282D329203D2025i2C20abs28329203D2025i0A# 6
x47549:	mov word [bp + 12], @13245$string_0Aabs282D329203D2025i2C20abs28329203D2025i0A#	; 5: 199 70 12 194 190

stdlib_test$43:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$44:	; Parameter 6 -3 14
x47554:	mov word [bp + 20], -3	; 5: 199 70 20 253 255

stdlib_test$45:	; Call 6 _abs 8
x47559:	mov word [bp + 14], stdlib_test$46	; 5: 199 70 14 213 185
x47564:	mov [bp + 16], bp	; 3: 137 110 16
x47567:	add bp, 14	; 3: 131 197 14
x47570:	jmp _abs	; 3: 233 7 7

stdlib_test$46:	; PostCall 6

stdlib_test$47:	; GetReturnValue £temporary6065

stdlib_test$48:	; Parameter 6 £temporary6065 8
x47573:	mov [bp + 14], bx	; 3: 137 94 14

stdlib_test$49:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$50:	; Parameter 6 3 16
x47576:	mov word [bp + 22], 3	; 5: 199 70 22 3 0

stdlib_test$51:	; Call 6 _abs 10
x47581:	mov word [bp + 16], stdlib_test$52	; 5: 199 70 16 235 185
x47586:	mov [bp + 18], bp	; 3: 137 110 18
x47589:	add bp, 16	; 3: 131 197 16
x47592:	jmp _abs	; 3: 233 241 6

stdlib_test$52:	; PostCall 6

stdlib_test$53:	; GetReturnValue £temporary6066

stdlib_test$54:	; Parameter 6 £temporary6066 10
x47595:	mov [bp + 16], bx	; 3: 137 94 16

stdlib_test$55:	; Call 6 printf 0
x47598:	mov word [bp + 6], stdlib_test$56	; 5: 199 70 6 1 186
x47603:	mov [bp + 8], bp	; 3: 137 110 8
x47606:	add bp, 6	; 3: 131 197 6
x47609:	mov di, bp	; 2: 137 239
x47611:	add di, 4	; 3: 131 199 4
x47614:	jmp printf	; 3: 233 3 83

stdlib_test$56:	; PostCall 6

stdlib_test$57:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$58:	; Parameter 6 string_labs282D3l29203D2025li2C20labs283l29203D2025li0A0A# 6
x47617:	mov word [bp + 12], @13255$string_labs282D3l29203D2025li2C20labs283l29203D2025li0A0A#	; 5: 199 70 12 222 190

stdlib_test$59:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$60:	; Parameter 6 -3 14
x47622:	mov dword [bp + 20], -3	; 8: 102 199 70 20 253 255 255 255

stdlib_test$61:	; Call 6 labs 8
x47630:	mov word [bp + 14], stdlib_test$62	; 5: 199 70 14 28 186
x47635:	mov [bp + 16], bp	; 3: 137 110 16
x47638:	add bp, 14	; 3: 131 197 14
x47641:	jmp labs	; 3: 233 51 97

stdlib_test$62:	; PostCall 6

stdlib_test$63:	; GetReturnValue £temporary6068

stdlib_test$64:	; Parameter 6 £temporary6068 8
x47644:	mov [bp + 14], ebx	; 4: 102 137 94 14

stdlib_test$65:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$66:	; Parameter 6 3 18
x47648:	mov dword [bp + 24], 3	; 8: 102 199 70 24 3 0 0 0

stdlib_test$67:	; Call 6 labs 12
x47656:	mov word [bp + 18], stdlib_test$68	; 5: 199 70 18 54 186
x47661:	mov [bp + 20], bp	; 3: 137 110 20
x47664:	add bp, 18	; 3: 131 197 18
x47667:	jmp labs	; 3: 233 25 97

stdlib_test$68:	; PostCall 6

stdlib_test$69:	; GetReturnValue £temporary6069

stdlib_test$70:	; Parameter 6 £temporary6069 12
x47670:	mov [bp + 18], ebx	; 4: 102 137 94 18

stdlib_test$71:	; Call 6 printf 0
x47674:	mov word [bp + 6], stdlib_test$72	; 5: 199 70 6 77 186
x47679:	mov [bp + 8], bp	; 3: 137 110 8
x47682:	add bp, 6	; 3: 131 197 6
x47685:	mov di, bp	; 2: 137 239
x47687:	add di, 8	; 3: 131 199 8
x47690:	jmp printf	; 3: 233 183 82

stdlib_test$72:	; PostCall 6

stdlib_test$73:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$74:	; Parameter 6 10 6
x47693:	mov word [bp + 12], 10	; 5: 199 70 12 10 0

stdlib_test$75:	; Parameter 6 3 8
x47698:	mov word [bp + 14], 3	; 5: 199 70 14 3 0

stdlib_test$76:	; Call 6 div 0
x47703:	mov word [bp + 6], stdlib_test$77	; 5: 199 70 6 101 186
x47708:	mov [bp + 8], bp	; 3: 137 110 8
x47711:	add bp, 6	; 3: 131 197 6
x47714:	jmp div	; 3: 233 146 6

stdlib_test$77:	; PostCall 6

stdlib_test$78:	; GetReturnValue £temporary6071 -> £temporary6072

stdlib_test$79:	; Assign i £temporary6071 -> £temporary6072
x47717:	mov si, bp	; 2: 137 238
x47719:	add si, 6	; 3: 131 198 6
x47722:	mov al, 4	; 2: 176 4

stdlib_test$79$Loop:
x47724:	mov ah, [bx]	; 2: 138 39
x47726:	mov [si], ah	; 2: 136 36
x47728:	inc bx	; 1: 67
x47729:	inc si	; 1: 70
x47730:	dec al	; 2: 254 200
x47732:	cmp al, 0	; 2: 60 0
x47734:	jne stdlib_test$79$Loop	; 2: 117 244

stdlib_test$80:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$81:	; Parameter 10 string_div_t28102C20329203D202825i2C2025i290A# 6
x47736:	mov word [bp + 16], @13274$string_div_t28102C20329203D202825i2C2025i290A#	; 5: 199 70 16 0 191

stdlib_test$82:	; Parameter 10 i$quot 8
x47741:	mov ax, [bp + 6]	; 3: 139 70 6
x47744:	mov [bp + 18], ax	; 3: 137 70 18

stdlib_test$83:	; Parameter 10 i$rem 10
x47747:	mov ax, [bp + 8]	; 3: 139 70 8
x47750:	mov [bp + 20], ax	; 3: 137 70 20

stdlib_test$84:	; Call 10 printf 0
x47753:	mov word [bp + 10], stdlib_test$85	; 5: 199 70 10 156 186
x47758:	mov [bp + 12], bp	; 3: 137 110 12
x47761:	add bp, 10	; 3: 131 197 10
x47764:	mov di, bp	; 2: 137 239
x47766:	add di, 4	; 3: 131 199 4
x47769:	jmp printf	; 3: 233 104 82

stdlib_test$85:	; PostCall 10

stdlib_test$86:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$87:	; ParameterInitSize

stdlib_test$88:	; Parameter 10 i 6
x47772:	mov si, bp	; 2: 137 238
x47774:	add si, 6	; 3: 131 198 6
x47777:	mov di, bp	; 2: 137 239
x47779:	add di, 16	; 3: 131 199 16
x47782:	mov al, 4	; 2: 176 4

stdlib_test$88$Loop:
x47784:	mov ah, [si]	; 2: 138 36
x47786:	mov [di], ah	; 2: 136 37
x47788:	inc si	; 1: 70
x47789:	inc di	; 1: 71
x47790:	dec al	; 2: 254 200
x47792:	cmp al, 0	; 2: 60 0
x47794:	jne stdlib_test$88$Loop	; 2: 117 244

stdlib_test$89:	; Call 10 print_div 0
x47796:	mov word [bp + 10], stdlib_test$90	; 5: 199 70 10 194 186
x47801:	mov [bp + 12], bp	; 3: 137 110 12
x47804:	add bp, 10	; 3: 131 197 10
x47807:	jmp print_div	; 3: 233 129 6

stdlib_test$90:	; PostCall 10

stdlib_test$91:	; GetReturnValue £temporary6076 -> £temporary6077

stdlib_test$92:	; Assign j £temporary6076 -> £temporary6077
x47810:	mov si, bp	; 2: 137 238
x47812:	add si, 10	; 3: 131 198 10
x47815:	mov al, 4	; 2: 176 4

stdlib_test$92$Loop:
x47817:	mov ah, [bx]	; 2: 138 39
x47819:	mov [si], ah	; 2: 136 36
x47821:	inc bx	; 1: 67
x47822:	inc si	; 1: 70
x47823:	dec al	; 2: 254 200
x47825:	cmp al, 0	; 2: 60 0
x47827:	jne stdlib_test$92$Loop	; 2: 117 244

stdlib_test$93:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$94:	; Parameter 14 string_div_t28102C20329203D202825i2C2025i290A0A# 6
x47829:	mov word [bp + 20], @13281$string_div_t28102C20329203D202825i2C2025i290A0A#	; 5: 199 70 20 25 191

stdlib_test$95:	; Parameter 14 j$quot 8
x47834:	mov ax, [bp + 10]	; 3: 139 70 10
x47837:	mov [bp + 22], ax	; 3: 137 70 22

stdlib_test$96:	; Parameter 14 j$rem 10
x47840:	mov ax, [bp + 12]	; 3: 139 70 12
x47843:	mov [bp + 24], ax	; 3: 137 70 24

stdlib_test$97:	; Call 14 printf 0
x47846:	mov word [bp + 14], stdlib_test$98	; 5: 199 70 14 249 186
x47851:	mov [bp + 16], bp	; 3: 137 110 16
x47854:	add bp, 14	; 3: 131 197 14
x47857:	mov di, bp	; 2: 137 239
x47859:	add di, 4	; 3: 131 199 4
x47862:	jmp printf	; 3: 233 11 82

stdlib_test$98:	; PostCall 14

stdlib_test$99:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$100:	; Parameter 6 10 6
x47865:	mov dword [bp + 12], 10	; 8: 102 199 70 12 10 0 0 0

stdlib_test$101:	; Parameter 6 3 10
x47873:	mov dword [bp + 16], 3	; 8: 102 199 70 16 3 0 0 0

stdlib_test$102:	; Call 6 ldiv 0
x47881:	mov word [bp + 6], stdlib_test$103	; 5: 199 70 6 23 187
x47886:	mov [bp + 8], bp	; 3: 137 110 8
x47889:	add bp, 6	; 3: 131 197 6
x47892:	jmp ldiv	; 3: 233 127 6

stdlib_test$103:	; PostCall 6

stdlib_test$104:	; GetReturnValue £temporary6081 -> £temporary6082

stdlib_test$105:	; Assign li £temporary6081 -> £temporary6082
x47895:	mov si, bp	; 2: 137 238
x47897:	add si, 6	; 3: 131 198 6
x47900:	mov al, 8	; 2: 176 8

stdlib_test$105$Loop:
x47902:	mov ah, [bx]	; 2: 138 39
x47904:	mov [si], ah	; 2: 136 36
x47906:	inc bx	; 1: 67
x47907:	inc si	; 1: 70
x47908:	dec al	; 2: 254 200
x47910:	cmp al, 0	; 2: 60 0
x47912:	jne stdlib_test$105$Loop	; 2: 117 244

stdlib_test$106:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$107:	; Parameter 14 string_ldiv_t28102C20329203D202825li2C2025li290A# 6
x47914:	mov word [bp + 20], @13294$string_ldiv_t28102C20329203D202825li2C2025li290A#	; 5: 199 70 20 51 191

stdlib_test$108:	; Parameter 14 li$quot 8
x47919:	mov eax, [bp + 6]	; 4: 102 139 70 6
x47923:	mov [bp + 22], eax	; 4: 102 137 70 22

stdlib_test$109:	; Parameter 14 li$rem 12
x47927:	mov eax, [bp + 10]	; 4: 102 139 70 10
x47931:	mov [bp + 26], eax	; 4: 102 137 70 26

stdlib_test$110:	; Call 14 printf 0
x47935:	mov word [bp + 14], stdlib_test$111	; 5: 199 70 14 82 187
x47940:	mov [bp + 16], bp	; 3: 137 110 16
x47943:	add bp, 14	; 3: 131 197 14
x47946:	mov di, bp	; 2: 137 239
x47948:	add di, 8	; 3: 131 199 8
x47951:	jmp printf	; 3: 233 178 81

stdlib_test$111:	; PostCall 14

stdlib_test$112:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$113:	; ParameterInitSize

stdlib_test$114:	; Parameter 14 li 6
x47954:	mov si, bp	; 2: 137 238
x47956:	add si, 6	; 3: 131 198 6
x47959:	mov di, bp	; 2: 137 239
x47961:	add di, 20	; 3: 131 199 20
x47964:	mov al, 8	; 2: 176 8

stdlib_test$114$Loop:
x47966:	mov ah, [si]	; 2: 138 36
x47968:	mov [di], ah	; 2: 136 37
x47970:	inc si	; 1: 70
x47971:	inc di	; 1: 71
x47972:	dec al	; 2: 254 200
x47974:	cmp al, 0	; 2: 60 0
x47976:	jne stdlib_test$114$Loop	; 2: 117 244

stdlib_test$115:	; Call 14 print_ldiv 0
x47978:	mov word [bp + 14], stdlib_test$116	; 5: 199 70 14 120 187
x47983:	mov [bp + 16], bp	; 3: 137 110 16
x47986:	add bp, 14	; 3: 131 197 14
x47989:	jmp print_ldiv	; 3: 233 121 6

stdlib_test$116:	; PostCall 14

stdlib_test$117:	; GetReturnValue £temporary6086 -> £temporary6087

stdlib_test$118:	; Assign lj £temporary6086 -> £temporary6087
x47992:	mov si, bp	; 2: 137 238
x47994:	add si, 14	; 3: 131 198 14
x47997:	mov al, 8	; 2: 176 8

stdlib_test$118$Loop:
x47999:	mov ah, [bx]	; 2: 138 39
x48001:	mov [si], ah	; 2: 136 36
x48003:	inc bx	; 1: 67
x48004:	inc si	; 1: 70
x48005:	dec al	; 2: 254 200
x48007:	cmp al, 0	; 2: 60 0
x48009:	jne stdlib_test$118$Loop	; 2: 117 244

stdlib_test$119:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$120:	; Parameter 22 string_ldiv_t28102C20329203D202825li2C2025li290A0A# 6
x48011:	mov word [bp + 28], @13301$string_ldiv_t28102C20329203D202825li2C2025li290A0A#	; 5: 199 70 28 79 191

stdlib_test$121:	; Parameter 22 lj$quot 8
x48016:	mov eax, [bp + 14]	; 4: 102 139 70 14
x48020:	mov [bp + 30], eax	; 4: 102 137 70 30

stdlib_test$122:	; Parameter 22 lj$rem 12
x48024:	mov eax, [bp + 18]	; 4: 102 139 70 18
x48028:	mov [bp + 34], eax	; 4: 102 137 70 34

stdlib_test$123:	; Call 22 printf 0
x48032:	mov word [bp + 22], stdlib_test$124	; 5: 199 70 22 179 187
x48037:	mov [bp + 24], bp	; 3: 137 110 24
x48040:	add bp, 22	; 3: 131 197 22
x48043:	mov di, bp	; 2: 137 239
x48045:	add di, 8	; 3: 131 199 8
x48048:	jmp printf	; 3: 233 81 81

stdlib_test$124:	; PostCall 22

stdlib_test$125:	; Assign list[0] 3
x48051:	mov word [bp + 6], 3	; 5: 199 70 6 3 0

stdlib_test$126:	; Assign list[1] 4
x48056:	mov word [bp + 8], 4	; 5: 199 70 8 4 0

stdlib_test$127:	; Assign list[2] 2
x48061:	mov word [bp + 10], 2	; 5: 199 70 10 2 0

stdlib_test$128:	; Assign list[3] 1
x48066:	mov word [bp + 12], 1	; 5: 199 70 12 1 0

stdlib_test$129:	; Assign size 4
x48071:	mov word [bp + 14], 4	; 5: 199 70 14 4 0

stdlib_test$130:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$131:	; Parameter 18 string_0AA20List2013A20# 6
x48076:	mov word [bp + 24], @13326$string_0AA20List2013A20#	; 5: 199 70 24 108 191

stdlib_test$132:	; Call 18 printf 0
x48081:	mov word [bp + 18], stdlib_test$133	; 5: 199 70 18 225 187
x48086:	mov [bp + 20], bp	; 3: 137 110 20
x48089:	add bp, 18	; 3: 131 197 18
x48092:	mov di, bp	; 2: 137 239
x48094:	jmp printf	; 3: 233 35 81

stdlib_test$133:	; PostCall 18

stdlib_test$134:	; Assign index 0
x48097:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

stdlib_test$135:	; SignedGreaterThanEqual 146 index size
x48102:	mov ax, [bp + 14]	; 3: 139 70 14
x48105:	cmp [bp + 16], ax	; 3: 57 70 16
x48108:	jge stdlib_test$146	; 2: 125 50

stdlib_test$136:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$137:	; Parameter 18 string_25i20# 6
x48110:	mov word [bp + 24], @13334$string_25i20#	; 5: 199 70 24 120 191

stdlib_test$138:	; SignedMultiply £temporary6099 index 2
x48115:	mov ax, [bp + 16]	; 3: 139 70 16
x48118:	xor dx, dx	; 2: 49 210
x48120:	imul word [@13336$int2$2#]	; 4: 247 46 124 191

stdlib_test$139:	; BinaryAdd £temporary6100 list £temporary6099
x48124:	mov si, bp	; 2: 137 238
x48126:	add si, 6	; 3: 131 198 6
x48129:	add si, ax	; 2: 1 198

stdlib_test$140:	; Deref £temporary6101 -> £temporary6100 £temporary6100 0

stdlib_test$141:	; Parameter 18 £temporary6101 -> £temporary6100 8
x48131:	mov ax, [si]	; 2: 139 4
x48133:	mov [bp + 26], ax	; 3: 137 70 26

stdlib_test$142:	; Call 18 printf 0
x48136:	mov word [bp + 18], stdlib_test$143	; 5: 199 70 18 27 188
x48141:	mov [bp + 20], bp	; 3: 137 110 20
x48144:	add bp, 18	; 3: 131 197 18
x48147:	mov di, bp	; 2: 137 239
x48149:	add di, 2	; 3: 131 199 2
x48152:	jmp printf	; 3: 233 233 80

stdlib_test$143:	; PostCall 18

stdlib_test$144:	; Increment index
x48155:	inc word [bp + 16]	; 3: 255 70 16

stdlib_test$145:	; Goto 135
x48158:	jmp stdlib_test$135	; 2: 235 198

stdlib_test$146:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$147:	; Parameter 18 string_0AB20List2023A20# 6
x48160:	mov word [bp + 24], @13341$string_0AB20List2023A20#	; 5: 199 70 24 126 191

stdlib_test$148:	; Call 18 printf 0
x48165:	mov word [bp + 18], stdlib_test$149	; 5: 199 70 18 53 188
x48170:	mov [bp + 20], bp	; 3: 137 110 20
x48173:	add bp, 18	; 3: 131 197 18
x48176:	mov di, bp	; 2: 137 239
x48178:	jmp printf	; 3: 233 207 80

stdlib_test$149:	; PostCall 18

stdlib_test$150:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$151:	; Parameter 18 list 6
x48181:	mov [bp + 24], bp	; 3: 137 110 24
x48184:	add word [bp + 24], 6	; 4: 131 70 24 6

stdlib_test$152:	; Parameter 18 size 8
x48188:	mov ax, [bp + 14]	; 3: 139 70 14
x48191:	mov [bp + 26], ax	; 3: 137 70 26

stdlib_test$153:	; Parameter 18 2 10
x48194:	mov word [bp + 28], 2	; 5: 199 70 28 2 0

stdlib_test$154:	; Parameter 18 compare 12
x48199:	mov word [bp + 30], compare	; 5: 199 70 30 138 191

stdlib_test$155:	; Call 18 qsort 0
x48204:	mov word [bp + 18], stdlib_test$156	; 5: 199 70 18 90 188
x48209:	mov [bp + 20], bp	; 3: 137 110 20
x48212:	add bp, 18	; 3: 131 197 18
x48215:	jmp qsort	; 3: 233 244 5

stdlib_test$156:	; PostCall 18

stdlib_test$157:	; Assign index 0
x48218:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

stdlib_test$158:	; SignedGreaterThanEqual 169 index size
x48223:	mov ax, [bp + 14]	; 3: 139 70 14
x48226:	cmp [bp + 16], ax	; 3: 57 70 16
x48229:	jge stdlib_test$169	; 2: 125 50

stdlib_test$159:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$160:	; Parameter 18 string_25i20# 6
x48231:	mov word [bp + 24], @13355$string_25i20#	; 5: 199 70 24 194 191

stdlib_test$161:	; SignedMultiply £temporary6108 index 2
x48236:	mov ax, [bp + 16]	; 3: 139 70 16
x48239:	xor dx, dx	; 2: 49 210
x48241:	imul word [@13357$int2$2#]	; 4: 247 46 198 191

stdlib_test$162:	; BinaryAdd £temporary6109 list £temporary6108
x48245:	mov si, bp	; 2: 137 238
x48247:	add si, 6	; 3: 131 198 6
x48250:	add si, ax	; 2: 1 198

stdlib_test$163:	; Deref £temporary6110 -> £temporary6109 £temporary6109 0

stdlib_test$164:	; Parameter 18 £temporary6110 -> £temporary6109 8
x48252:	mov ax, [si]	; 2: 139 4
x48254:	mov [bp + 26], ax	; 3: 137 70 26

stdlib_test$165:	; Call 18 printf 0
x48257:	mov word [bp + 18], stdlib_test$166	; 5: 199 70 18 148 188
x48262:	mov [bp + 20], bp	; 3: 137 110 20
x48265:	add bp, 18	; 3: 131 197 18
x48268:	mov di, bp	; 2: 137 239
x48270:	add di, 2	; 3: 131 199 2
x48273:	jmp printf	; 3: 233 112 80

stdlib_test$166:	; PostCall 18

stdlib_test$167:	; Increment index
x48276:	inc word [bp + 16]	; 3: 255 70 16

stdlib_test$168:	; Goto 158
x48279:	jmp stdlib_test$158	; 2: 235 198

stdlib_test$169:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$170:	; Parameter 18 string_0AC20List2033A20# 6
x48281:	mov word [bp + 24], @13362$string_0AC20List2033A20#	; 5: 199 70 24 200 191

stdlib_test$171:	; Call 18 printf 0
x48286:	mov word [bp + 18], stdlib_test$172	; 5: 199 70 18 174 188
x48291:	mov [bp + 20], bp	; 3: 137 110 20
x48294:	add bp, 18	; 3: 131 197 18
x48297:	mov di, bp	; 2: 137 239
x48299:	jmp printf	; 3: 233 86 80

stdlib_test$172:	; PostCall 18

stdlib_test$173:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$174:	; Parameter 18 list 6
x48302:	mov [bp + 24], bp	; 3: 137 110 24
x48305:	add word [bp + 24], 6	; 4: 131 70 24 6

stdlib_test$175:	; Parameter 18 size 8
x48309:	mov ax, [bp + 14]	; 3: 139 70 14
x48312:	mov [bp + 26], ax	; 3: 137 70 26

stdlib_test$176:	; Parameter 18 2 10
x48315:	mov word [bp + 28], 2	; 5: 199 70 28 2 0

stdlib_test$177:	; Parameter 18 reverse_compare 12
x48320:	mov word [bp + 30], reverse_compare	; 5: 199 70 30 212 191

stdlib_test$178:	; Call 18 qsort 0
x48325:	mov word [bp + 18], stdlib_test$179	; 5: 199 70 18 211 188
x48330:	mov [bp + 20], bp	; 3: 137 110 20
x48333:	add bp, 18	; 3: 131 197 18
x48336:	jmp qsort	; 3: 233 123 5

stdlib_test$179:	; PostCall 18

stdlib_test$180:	; Assign index 0
x48339:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

stdlib_test$181:	; SignedGreaterThanEqual 192 index size
x48344:	mov ax, [bp + 14]	; 3: 139 70 14
x48347:	cmp [bp + 16], ax	; 3: 57 70 16
x48350:	jge stdlib_test$192	; 2: 125 50

stdlib_test$182:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$183:	; Parameter 18 string_25i20# 6
x48352:	mov word [bp + 24], @13376$string_25i20#	; 5: 199 70 24 12 192

stdlib_test$184:	; SignedMultiply £temporary6117 index 2
x48357:	mov ax, [bp + 16]	; 3: 139 70 16
x48360:	xor dx, dx	; 2: 49 210
x48362:	imul word [@13378$int2$2#]	; 4: 247 46 16 192

stdlib_test$185:	; BinaryAdd £temporary6118 list £temporary6117
x48366:	mov si, bp	; 2: 137 238
x48368:	add si, 6	; 3: 131 198 6
x48371:	add si, ax	; 2: 1 198

stdlib_test$186:	; Deref £temporary6119 -> £temporary6118 £temporary6118 0

stdlib_test$187:	; Parameter 18 £temporary6119 -> £temporary6118 8
x48373:	mov ax, [si]	; 2: 139 4
x48375:	mov [bp + 26], ax	; 3: 137 70 26

stdlib_test$188:	; Call 18 printf 0
x48378:	mov word [bp + 18], stdlib_test$189	; 5: 199 70 18 13 189
x48383:	mov [bp + 20], bp	; 3: 137 110 20
x48386:	add bp, 18	; 3: 131 197 18
x48389:	mov di, bp	; 2: 137 239
x48391:	add di, 2	; 3: 131 199 2
x48394:	jmp printf	; 3: 233 247 79

stdlib_test$189:	; PostCall 18

stdlib_test$190:	; Increment index
x48397:	inc word [bp + 16]	; 3: 255 70 16

stdlib_test$191:	; Goto 181
x48400:	jmp stdlib_test$181	; 2: 235 198

stdlib_test$192:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$193:	; Parameter 18 string_0AB20List2043A20# 6
x48402:	mov word [bp + 24], @13383$string_0AB20List2043A20#	; 5: 199 70 24 18 192

stdlib_test$194:	; Call 18 printf 0
x48407:	mov word [bp + 18], stdlib_test$195	; 5: 199 70 18 39 189
x48412:	mov [bp + 20], bp	; 3: 137 110 20
x48415:	add bp, 18	; 3: 131 197 18
x48418:	mov di, bp	; 2: 137 239
x48420:	jmp printf	; 3: 233 221 79

stdlib_test$195:	; PostCall 18

stdlib_test$196:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$197:	; Parameter 18 list 6
x48423:	mov [bp + 24], bp	; 3: 137 110 24
x48426:	add word [bp + 24], 6	; 4: 131 70 24 6

stdlib_test$198:	; Parameter 18 size 8
x48430:	mov ax, [bp + 14]	; 3: 139 70 14
x48433:	mov [bp + 26], ax	; 3: 137 70 26

stdlib_test$199:	; Parameter 18 2 10
x48436:	mov word [bp + 28], 2	; 5: 199 70 28 2 0

stdlib_test$200:	; Parameter 18 compare 12
x48441:	mov word [bp + 30], compare	; 5: 199 70 30 138 191

stdlib_test$201:	; Call 18 qsort 0
x48446:	mov word [bp + 18], stdlib_test$202	; 5: 199 70 18 76 189
x48451:	mov [bp + 20], bp	; 3: 137 110 20
x48454:	add bp, 18	; 3: 131 197 18
x48457:	jmp qsort	; 3: 233 2 5

stdlib_test$202:	; PostCall 18

stdlib_test$203:	; Assign index 0
x48460:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

stdlib_test$204:	; SignedGreaterThanEqual 215 index size
x48465:	mov ax, [bp + 14]	; 3: 139 70 14
x48468:	cmp [bp + 16], ax	; 3: 57 70 16
x48471:	jge stdlib_test$215	; 2: 125 50

stdlib_test$205:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$206:	; Parameter 18 string_25i20# 6
x48473:	mov word [bp + 24], @13397$string_25i20#	; 5: 199 70 24 30 192

stdlib_test$207:	; SignedMultiply £temporary6126 index 2
x48478:	mov ax, [bp + 16]	; 3: 139 70 16
x48481:	xor dx, dx	; 2: 49 210
x48483:	imul word [@13399$int2$2#]	; 4: 247 46 34 192

stdlib_test$208:	; BinaryAdd £temporary6127 list £temporary6126
x48487:	mov si, bp	; 2: 137 238
x48489:	add si, 6	; 3: 131 198 6
x48492:	add si, ax	; 2: 1 198

stdlib_test$209:	; Deref £temporary6128 -> £temporary6127 £temporary6127 0

stdlib_test$210:	; Parameter 18 £temporary6128 -> £temporary6127 8
x48494:	mov ax, [si]	; 2: 139 4
x48496:	mov [bp + 26], ax	; 3: 137 70 26

stdlib_test$211:	; Call 18 printf 0
x48499:	mov word [bp + 18], stdlib_test$212	; 5: 199 70 18 134 189
x48504:	mov [bp + 20], bp	; 3: 137 110 20
x48507:	add bp, 18	; 3: 131 197 18
x48510:	mov di, bp	; 2: 137 239
x48512:	add di, 2	; 3: 131 199 2
x48515:	jmp printf	; 3: 233 126 79

stdlib_test$212:	; PostCall 18

stdlib_test$213:	; Increment index
x48518:	inc word [bp + 16]	; 3: 255 70 16

stdlib_test$214:	; Goto 204
x48521:	jmp stdlib_test$204	; 2: 235 198

stdlib_test$215:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$216:	; Parameter 18 string_0A0ASearch3A0A# 6
x48523:	mov word [bp + 24], @13404$string_0A0ASearch3A0A#	; 5: 199 70 24 36 192

stdlib_test$217:	; Call 18 printf 0
x48528:	mov word [bp + 18], stdlib_test$218	; 5: 199 70 18 160 189
x48533:	mov [bp + 20], bp	; 3: 137 110 20
x48536:	add bp, 18	; 3: 131 197 18
x48539:	mov di, bp	; 2: 137 239
x48541:	jmp printf	; 3: 233 100 79

stdlib_test$218:	; PostCall 18

stdlib_test$219:	; Assign key 0
x48544:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

stdlib_test$220:	; SignedGreaterThanEqual 247 key 6
x48549:	cmp word [bp + 16], 6	; 4: 131 126 16 6
x48553:	jge stdlib_test$247	; 2: 125 117

stdlib_test$221:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$222:	; address £temporary6133 key
x48555:	mov si, bp	; 2: 137 238
x48557:	add si, 16	; 3: 131 198 16

stdlib_test$223:	; Parameter 18 £temporary6133 6
x48560:	mov [bp + 24], si	; 3: 137 118 24

stdlib_test$224:	; Parameter 18 list 8
x48563:	mov [bp + 26], bp	; 3: 137 110 26
x48566:	add word [bp + 26], 6	; 4: 131 70 26 6

stdlib_test$225:	; Parameter 18 size 10
x48570:	mov ax, [bp + 14]	; 3: 139 70 14
x48573:	mov [bp + 28], ax	; 3: 137 70 28

stdlib_test$226:	; Parameter 18 2 12
x48576:	mov word [bp + 30], 2	; 5: 199 70 30 2 0

stdlib_test$227:	; Parameter 18 compare 14
x48581:	mov word [bp + 32], compare	; 5: 199 70 32 138 191

stdlib_test$228:	; Call 18 bsearch 0
x48586:	mov word [bp + 18], stdlib_test$229	; 5: 199 70 18 216 189
x48591:	mov [bp + 20], bp	; 3: 137 110 20
x48594:	add bp, 18	; 3: 131 197 18
x48597:	jmp bsearch	; 3: 233 99 5

stdlib_test$229:	; PostCall 18

stdlib_test$230:	; GetReturnValue £temporary6135

stdlib_test$231:	; IntegralToIntegral £temporary6136 £temporary6135

stdlib_test$232:	; Assign p £temporary6136
x48600:	mov [bp + 18], bx	; 3: 137 94 18

stdlib_test$233:	; Equal 237 p 0
x48603:	cmp word [bp + 18], 0	; 4: 131 126 18 0
x48607:	je stdlib_test$237	; 2: 116 16

stdlib_test$234:	; BinarySubtract £temporary6138 p list
x48609:	mov ax, [bp + 18]	; 3: 139 70 18
x48612:	sub ax, bp	; 2: 41 232
x48614:	sub ax, 6	; 3: 131 232 6

stdlib_test$235:	; SignedDivide £temporary6143 £temporary6138 2
x48617:	xor dx, dx	; 2: 49 210
x48619:	idiv word [@13428$int2$2#]	; 4: 247 62 47 192

stdlib_test$236:	; Goto 238
x48623:	jmp stdlib_test$238	; 2: 235 3

stdlib_test$237:	; Assign £temporary6143 -1
x48625:	mov ax, -1	; 3: 184 255 255

stdlib_test$238:	; Assign index £temporary6143
x48628:	mov [bp + 20], ax	; 3: 137 70 20

stdlib_test$239:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$240:	; Parameter 22 string_20202825i2C2025i290A# 6
x48631:	mov word [bp + 28], @13439$string_20202825i2C2025i290A#	; 5: 199 70 28 49 192

stdlib_test$241:	; Parameter 22 key 8
x48636:	mov ax, [bp + 16]	; 3: 139 70 16
x48639:	mov [bp + 30], ax	; 3: 137 70 30

stdlib_test$242:	; Parameter 22 index 10
x48642:	mov ax, [bp + 20]	; 3: 139 70 20
x48645:	mov [bp + 32], ax	; 3: 137 70 32

stdlib_test$243:	; Call 22 printf 0
x48648:	mov word [bp + 22], stdlib_test$244	; 5: 199 70 22 27 190
x48653:	mov [bp + 24], bp	; 3: 137 110 24
x48656:	add bp, 22	; 3: 131 197 22
x48659:	mov di, bp	; 2: 137 239
x48661:	add di, 4	; 3: 131 199 4
x48664:	jmp printf	; 3: 233 233 78

stdlib_test$244:	; PostCall 22

stdlib_test$245:	; Increment key
x48667:	inc word [bp + 16]	; 3: 255 70 16

stdlib_test$246:	; Goto 220
x48670:	jmp stdlib_test$220	; 2: 235 133

stdlib_test$247:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$248:	; Parameter 16 string_0A# 6
x48672:	mov word [bp + 22], @13441$string_0A#	; 5: 199 70 22 61 192

stdlib_test$249:	; Call 16 printf 0
x48677:	mov word [bp + 16], stdlib_test$250	; 5: 199 70 16 53 190
x48682:	mov [bp + 18], bp	; 3: 137 110 18
x48685:	add bp, 16	; 3: 131 197 16
x48688:	mov di, bp	; 2: 137 239
x48690:	jmp printf	; 3: 233 207 78

stdlib_test$250:	; PostCall 16

stdlib_test$251:	; Return 0
x48693:	mov ax, [bp]	; 3: 139 70 0
x48696:	mov di, [bp + 4]	; 3: 139 126 4
x48699:	mov bp, [bp + 2]	; 3: 139 110 2
x48702:	jmp ax	; 2: 255 224

stdlib_test$252:	; FunctionEnd stdlib_test

@13228$string_atof28221232E4562229203D2025f0A#:
x48704:	db "atof(", 34, "123.456", 34, ") = %f", 10, 0	; 22: 97 116 111 102 40 34 49 50 51 46 52 53 54 34 41 32 61 32 37 102 10 0

@13229$string_1232E456#:
x48726:	db "123.456", 0	; 8: 49 50 51 46 52 53 54 0

@13232$string_strtod28221232E456789abc222C2026p29203D202825f2C2025s290A#:
x48734:	db "strtod(", 34, "123.456789abc", 34, ", &p) = (%f, %s)", 10, 0	; 40: 115 116 114 116 111 100 40 34 49 50 51 46 52 53 54 55 56 57 97 98 99 34 44 32 38 112 41 32 61 32 40 37 102 44 32 37 115 41 10 0

@13233$string_1232E456789abc#:
x48774:	db "123.456789abc", 0	; 14: 49 50 51 46 52 53 54 55 56 57 97 98 99 0

@13237$string_0Agetenv2822path2229203D2025s0A#:
x48788:	db 10, "getenv(", 34, "path", 34, ") = %s", 10, 0	; 22: 10 103 101 116 101 110 118 40 34 112 97 116 104 34 41 32 61 32 37 115 10 0

@13238$string_path#:
x48810:	db "path", 0	; 5: 112 97 116 104 0

@13241$string_system2822dir22290A#:
x48815:	db "system(", 34, "dir", 34, ")", 10, 0	; 15: 115 121 115 116 101 109 40 34 100 105 114 34 41 10 0

@13243$string_dir#:
x48830:	db "dir", 0	; 4: 100 105 114 0

@13245$string_0Aabs282D329203D2025i2C20abs28329203D2025i0A#:
x48834:	db 10, "abs(-3) = %i, abs(3) = %i", 10, 0	; 28: 10 97 98 115 40 45 51 41 32 61 32 37 105 44 32 97 98 115 40 51 41 32 61 32 37 105 10 0

@13255$string_labs282D3l29203D2025li2C20labs283l29203D2025li0A0A#:
x48862:	db "labs(-3l) = %li, labs(3l) = %li", 10, 10, 0	; 34: 108 97 98 115 40 45 51 108 41 32 61 32 37 108 105 44 32 108 97 98 115 40 51 108 41 32 61 32 37 108 105 10 10 0

@13274$string_div_t28102C20329203D202825i2C2025i290A#:
x48896:	db "div_t(10, 3) = (%i, %i)", 10, 0	; 25: 100 105 118 95 116 40 49 48 44 32 51 41 32 61 32 40 37 105 44 32 37 105 41 10 0

@13281$string_div_t28102C20329203D202825i2C2025i290A0A#:
x48921:	db "div_t(10, 3) = (%i, %i)", 10, 10, 0	; 26: 100 105 118 95 116 40 49 48 44 32 51 41 32 61 32 40 37 105 44 32 37 105 41 10 10 0

@13294$string_ldiv_t28102C20329203D202825li2C2025li290A#:
x48947:	db "ldiv_t(10, 3) = (%li, %li)", 10, 0	; 28: 108 100 105 118 95 116 40 49 48 44 32 51 41 32 61 32 40 37 108 105 44 32 37 108 105 41 10 0

@13301$string_ldiv_t28102C20329203D202825li2C2025li290A0A#:
x48975:	db "ldiv_t(10, 3) = (%li, %li)", 10, 10, 0	; 29: 108 100 105 118 95 116 40 49 48 44 32 51 41 32 61 32 40 37 108 105 44 32 37 108 105 41 10 10 0

@13326$string_0AA20List2013A20#:
x49004:	db 10, "A List 1: ", 0	; 12: 10 65 32 76 105 115 116 32 49 58 32 0

@13334$string_25i20#:
x49016:	db "%i ", 0	; 4: 37 105 32 0

@13336$int2$2#:
x49020:	dw 2	; 2: 2 0

@13341$string_0AB20List2023A20#:
x49022:	db 10, "B List 2: ", 0	; 12: 10 66 32 76 105 115 116 32 50 58 32 0

compare:	; IntegralToIntegral £temporary5983 valuePtr1
x49034:	mov si, [bp + 6]	; 3: 139 118 6

compare$1:	; Deref £temporary5984 -> £temporary5983 £temporary5983 0

compare$2:	; Assign intValue1 £temporary5984 -> £temporary5983
x49037:	mov ax, [si]	; 2: 139 4
x49039:	mov [bp + 10], ax	; 3: 137 70 10

compare$3:	; IntegralToIntegral £temporary5985 valuePtr2
x49042:	mov si, [bp + 8]	; 3: 139 118 8

compare$4:	; Deref £temporary5986 -> £temporary5985 £temporary5985 0

compare$5:	; Assign intValue2 £temporary5986 -> £temporary5985
x49045:	mov ax, [si]	; 2: 139 4
x49047:	mov [bp + 12], ax	; 3: 137 70 12

compare$6:	; SignedGreaterThanEqual 9 intValue1 intValue2
x49050:	mov ax, [bp + 12]	; 3: 139 70 12
x49053:	cmp [bp + 10], ax	; 3: 57 70 10
x49056:	jge compare$9	; 2: 125 5

compare$7:	; Assign £temporary5996 -1
x49058:	mov bx, -1	; 3: 187 255 255

compare$8:	; Goto 14
x49061:	jmp compare$14	; 2: 235 16

compare$9:	; NotEqual 12 intValue1 intValue2
x49063:	mov ax, [bp + 12]	; 3: 139 70 12
x49066:	cmp [bp + 10], ax	; 3: 57 70 10
x49069:	jne compare$12	; 2: 117 5

compare$10:	; Assign £temporary5992 0
x49071:	mov bx, 0	; 3: 187 0 0

compare$11:	; Goto 13
x49074:	jmp compare$13	; 2: 235 3

compare$12:	; Assign £temporary5992 1
x49076:	mov bx, 1	; 3: 187 1 0

compare$13:	; Assign £temporary5996 £temporary5992

compare$14:	; SetReturnValue £temporary5996

compare$15:	; Return £temporary5996
x49079:	mov ax, [bp]	; 3: 139 70 0
x49082:	mov di, [bp + 4]	; 3: 139 126 4
x49085:	mov bp, [bp + 2]	; 3: 139 110 2
x49088:	jmp ax	; 2: 255 224

compare$16:	; FunctionEnd compare

@13355$string_25i20#:
x49090:	db "%i ", 0	; 4: 37 105 32 0

@13357$int2$2#:
x49094:	dw 2	; 2: 2 0

@13362$string_0AC20List2033A20#:
x49096:	db 10, "C List 3: ", 0	; 12: 10 67 32 76 105 115 116 32 51 58 32 0

reverse_compare:	; IntegralToIntegral £temporary5997 valuePtr1
x49108:	mov si, [bp + 6]	; 3: 139 118 6

reverse_compare$1:	; Deref £temporary5998 -> £temporary5997 £temporary5997 0

reverse_compare$2:	; Assign intValue1 £temporary5998 -> £temporary5997
x49111:	mov ax, [si]	; 2: 139 4
x49113:	mov [bp + 10], ax	; 3: 137 70 10

reverse_compare$3:	; IntegralToIntegral £temporary5999 valuePtr2
x49116:	mov si, [bp + 8]	; 3: 139 118 8

reverse_compare$4:	; Deref £temporary6000 -> £temporary5999 £temporary5999 0

reverse_compare$5:	; Assign intValue2 £temporary6000 -> £temporary5999
x49119:	mov ax, [si]	; 2: 139 4
x49121:	mov [bp + 12], ax	; 3: 137 70 12

reverse_compare$6:	; SignedGreaterThanEqual 9 intValue1 intValue2
x49124:	mov ax, [bp + 12]	; 3: 139 70 12
x49127:	cmp [bp + 10], ax	; 3: 57 70 10
x49130:	jge reverse_compare$9	; 2: 125 5

reverse_compare$7:	; Assign £temporary6010 1
x49132:	mov bx, 1	; 3: 187 1 0

reverse_compare$8:	; Goto 14
x49135:	jmp reverse_compare$14	; 2: 235 16

reverse_compare$9:	; NotEqual 12 intValue1 intValue2
x49137:	mov ax, [bp + 12]	; 3: 139 70 12
x49140:	cmp [bp + 10], ax	; 3: 57 70 10
x49143:	jne reverse_compare$12	; 2: 117 5

reverse_compare$10:	; Assign £temporary6006 0
x49145:	mov bx, 0	; 3: 187 0 0

reverse_compare$11:	; Goto 13
x49148:	jmp reverse_compare$13	; 2: 235 3

reverse_compare$12:	; Assign £temporary6006 -1
x49150:	mov bx, -1	; 3: 187 255 255

reverse_compare$13:	; Assign £temporary6010 £temporary6006

reverse_compare$14:	; SetReturnValue £temporary6010

reverse_compare$15:	; Return £temporary6010
x49153:	mov ax, [bp]	; 3: 139 70 0
x49156:	mov di, [bp + 4]	; 3: 139 126 4
x49159:	mov bp, [bp + 2]	; 3: 139 110 2
x49162:	jmp ax	; 2: 255 224

reverse_compare$16:	; FunctionEnd reverse_compare

@13376$string_25i20#:
x49164:	db "%i ", 0	; 4: 37 105 32 0

@13378$int2$2#:
x49168:	dw 2	; 2: 2 0

@13383$string_0AB20List2043A20#:
x49170:	db 10, "B List 4: ", 0	; 12: 10 66 32 76 105 115 116 32 52 58 32 0

@13397$string_25i20#:
x49182:	db "%i ", 0	; 4: 37 105 32 0

@13399$int2$2#:
x49186:	dw 2	; 2: 2 0

@13404$string_0A0ASearch3A0A#:
x49188:	db 10, 10, "Search:", 10, 0	; 11: 10 10 83 101 97 114 99 104 58 10 0

@13428$int2$2#:
x49199:	dw 2	; 2: 2 0

@13439$string_20202825i2C2025i290A#:
x49201:	db "  (%i, %i)", 10, 0	; 12: 32 32 40 37 105 44 32 37 105 41 10 0

@13441$string_0A#:
x49213:	db 10, 0	; 2: 10 0

atof:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

atof$1:	; Parameter 8 s 6
x49215:	mov ax, [bp + 6]	; 3: 139 70 6
x49218:	mov [bp + 14], ax	; 3: 137 70 14

atof$2:	; Parameter 8 0 8
x49221:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

atof$3:	; Call 8 strtod 0
x49226:	mov word [bp + 8], atof$4	; 5: 199 70 8 88 192
x49231:	mov [bp + 10], bp	; 3: 137 110 10
x49234:	add bp, 8	; 3: 131 197 8
x49237:	nop	; 1: 144
x49238:	jmp strtod	; 2: 235 11

atof$4:	; PostCall 8

atof$5:	; GetReturnValue £temporary2256

atof$6:	; SetReturnValue £temporary2256

atof$7:	; Return £temporary2256
x49240:	mov ax, [bp]	; 3: 139 70 0
x49243:	mov di, [bp + 4]	; 3: 139 126 4
x49246:	mov bp, [bp + 2]	; 3: 139 110 2
x49249:	jmp ax	; 2: 255 224

atof$8:	; FunctionEnd atof

strtod:	; Assign chars 0
x49251:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strtod$1:	; PushZero
x49256:	fldz	; 2: 217 238

strtod$2:	; PopFloat value
x49258:	fstp qword [bp + 12]	; 3: 221 94 12

strtod$3:	; CallHeader 20 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtod$4:	; Parameter 20 s 6
x49261:	mov ax, [bp + 6]	; 3: 139 70 6
x49264:	mov [bp + 26], ax	; 3: 137 70 26

strtod$5:	; Parameter 20 string_25lf25n# 8
x49267:	mov word [bp + 28], @5142$string_25lf25n#	; 5: 199 70 28 186 192

strtod$6:	; address £temporary2259 value
x49272:	mov si, bp	; 2: 137 238
x49274:	add si, 12	; 3: 131 198 12

strtod$7:	; Parameter 20 £temporary2259 10
x49277:	mov [bp + 30], si	; 3: 137 118 30

strtod$8:	; address £temporary2260 chars
x49280:	mov si, bp	; 2: 137 238
x49282:	add si, 10	; 3: 131 198 10

strtod$9:	; Parameter 20 £temporary2260 12
x49285:	mov [bp + 32], si	; 3: 137 118 32

strtod$10:	; Call 20 sscanf 0
x49288:	mov word [bp + 20], strtod$11	; 5: 199 70 20 155 192
x49293:	mov [bp + 22], bp	; 3: 137 110 22
x49296:	add bp, 20	; 3: 131 197 20
x49299:	mov di, bp	; 2: 137 239
x49301:	add di, 4	; 3: 131 199 4
x49304:	jmp sscanf	; 3: 233 58 234

strtod$11:	; PostCall 20

strtod$12:	; Equal 15 endp 0
x49307:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x49311:	je strtod$15	; 2: 116 11

strtod$13:	; Deref £temporary2263 -> endp endp 0
x49313:	mov si, [bp + 8]	; 3: 139 118 8

strtod$14:	; BinaryAdd £temporary2263 -> endp s chars
x49316:	mov ax, [bp + 6]	; 3: 139 70 6
x49319:	add ax, [bp + 10]	; 3: 3 70 10
x49322:	mov [si], ax	; 2: 137 4

strtod$15:	; PushFloat value
x49324:	fld qword [bp + 12]	; 3: 221 70 12

strtod$16:	; SetReturnValue value

strtod$17:	; Return value
x49327:	mov ax, [bp]	; 3: 139 70 0
x49330:	mov di, [bp + 4]	; 3: 139 126 4
x49333:	mov bp, [bp + 2]	; 3: 139 110 2
x49336:	jmp ax	; 2: 255 224

strtod$18:	; FunctionEnd strtod

@5142$string_25lf25n#:
x49338:	db "%lf%n", 0	; 6: 37 108 102 37 110 0

getenv:	; SetReturnValue 0
x49344:	mov bx, 0	; 3: 187 0 0

getenv$1:	; Return 0
x49347:	mov ax, [bp]	; 3: 139 70 0
x49350:	mov di, [bp + 4]	; 3: 139 126 4
x49353:	mov bp, [bp + 2]	; 3: 139 110 2
x49356:	jmp ax	; 2: 255 224

getenv$2:	; FunctionEnd getenv

system:	; SetReturnValue -1
x49358:	mov bx, -1	; 3: 187 255 255

system$1:	; Return -1
x49361:	mov ax, [bp]	; 3: 139 70 0
x49364:	mov di, [bp + 4]	; 3: 139 126 4
x49367:	mov bp, [bp + 2]	; 3: 139 110 2
x49370:	jmp ax	; 2: 255 224

system$2:	; FunctionEnd system

_abs:	; SignedGreaterThanEqual 4 value 0
x49372:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x49376:	jge _abs$4	; 2: 125 7

_abs$1:	; UnarySubtract £temporary3209 value
x49378:	mov bx, [bp + 6]	; 3: 139 94 6
x49381:	neg bx	; 2: 247 219

_abs$2:	; Assign £temporary3213 £temporary3209

_abs$3:	; Goto 5
x49383:	jmp _abs$5	; 2: 235 3

_abs$4:	; Assign £temporary3213 value
x49385:	mov bx, [bp + 6]	; 3: 139 94 6

_abs$5:	; SetReturnValue £temporary3213

_abs$6:	; Return £temporary3213
x49388:	mov ax, [bp]	; 3: 139 70 0
x49391:	mov di, [bp + 4]	; 3: 139 126 4
x49394:	mov bp, [bp + 2]	; 3: 139 110 2
x49397:	jmp ax	; 2: 255 224

_abs$7:	; FunctionEnd _abs

div:	; Assign result$quot 0
x49399:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

div$1:	; Assign result$rem 0
x49404:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

div$2:	; NotEqual 6 denum 0
x49409:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x49413:	jne div$6	; 2: 117 22

div$3:	; Assign errno 6
x49415:	mov word [errno], 6	; 6: 199 6 230 10 6 0

div$4:	; SetReturnValue result
x49421:	mov bx, bp	; 2: 137 235
x49423:	add bx, 10	; 3: 131 195 10

div$5:	; Return result
x49426:	mov ax, [bp]	; 3: 139 70 0
x49429:	mov di, [bp + 4]	; 3: 139 126 4
x49432:	mov bp, [bp + 2]	; 3: 139 110 2
x49435:	jmp ax	; 2: 255 224

div$6:	; SignedDivide result$quot num denum
x49437:	mov ax, [bp + 6]	; 3: 139 70 6
x49440:	xor dx, dx	; 2: 49 210
x49442:	idiv word [bp + 8]	; 3: 247 126 8
x49445:	mov [bp + 10], ax	; 3: 137 70 10

div$7:	; SignedModulo result$rem num denum
x49448:	mov ax, [bp + 6]	; 3: 139 70 6
x49451:	xor dx, dx	; 2: 49 210
x49453:	idiv word [bp + 8]	; 3: 247 126 8
x49456:	mov [bp + 12], dx	; 3: 137 86 12

div$8:	; SetReturnValue result
x49459:	mov bx, bp	; 2: 137 235
x49461:	add bx, 10	; 3: 131 195 10

div$9:	; Return result
x49464:	mov ax, [bp]	; 3: 139 70 0
x49467:	mov di, [bp + 4]	; 3: 139 126 4
x49470:	mov bp, [bp + 2]	; 3: 139 110 2
x49473:	jmp ax	; 2: 255 224

div$10:	; FunctionEnd div

print_div:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_div$1:	; Parameter 10 string_div_t20quot2025i20rem2025i0A# 6
x49475:	mov word [bp + 16], @13157$string_div_t20quot2025i20rem2025i0A#	; 5: 199 70 16 128 193

print_div$2:	; Parameter 10 d$quot 8
x49480:	mov ax, [bp + 6]	; 3: 139 70 6
x49483:	mov [bp + 18], ax	; 3: 137 70 18

print_div$3:	; Parameter 10 d$rem 10
x49486:	mov ax, [bp + 8]	; 3: 139 70 8
x49489:	mov [bp + 20], ax	; 3: 137 70 20

print_div$4:	; Call 10 printf 0
x49492:	mov word [bp + 10], print_div$5	; 5: 199 70 10 103 193
x49497:	mov [bp + 12], bp	; 3: 137 110 12
x49500:	add bp, 10	; 3: 131 197 10
x49503:	mov di, bp	; 2: 137 239
x49505:	add di, 4	; 3: 131 199 4
x49508:	jmp printf	; 3: 233 157 75

print_div$5:	; PostCall 10

print_div$6:	; Increment d$quot
x49511:	inc word [bp + 6]	; 3: 255 70 6

print_div$7:	; Assign £temporary6017 d$rem
x49514:	mov ax, [bp + 8]	; 3: 139 70 8

print_div$8:	; Increment d$rem
x49517:	inc word [bp + 8]	; 3: 255 70 8

print_div$9:	; SetReturnValue d
x49520:	mov bx, bp	; 2: 137 235
x49522:	add bx, 6	; 3: 131 195 6

print_div$10:	; Return d
x49525:	mov ax, [bp]	; 3: 139 70 0
x49528:	mov di, [bp + 4]	; 3: 139 126 4
x49531:	mov bp, [bp + 2]	; 3: 139 110 2
x49534:	jmp ax	; 2: 255 224

print_div$11:	; FunctionEnd print_div

@13157$string_div_t20quot2025i20rem2025i0A#:
x49536:	db "div_t quot %i rem %i", 10, 0	; 22: 100 105 118 95 116 32 113 117 111 116 32 37 105 32 114 101 109 32 37 105 10 0

ldiv:	; Assign result$quot 0
x49558:	mov dword [bp + 14], 0	; 8: 102 199 70 14 0 0 0 0

ldiv$1:	; Assign result$rem 0
x49566:	mov dword [bp + 18], 0	; 8: 102 199 70 18 0 0 0 0

ldiv$2:	; NotEqual 6 denum 0
x49574:	cmp dword [bp + 10], 0	; 5: 102 131 126 10 0
x49579:	jne ldiv$6	; 2: 117 22

ldiv$3:	; Assign errno 6
x49581:	mov word [errno], 6	; 6: 199 6 230 10 6 0

ldiv$4:	; SetReturnValue result
x49587:	mov bx, bp	; 2: 137 235
x49589:	add bx, 14	; 3: 131 195 14

ldiv$5:	; Return result
x49592:	mov ax, [bp]	; 3: 139 70 0
x49595:	mov di, [bp + 4]	; 3: 139 126 4
x49598:	mov bp, [bp + 2]	; 3: 139 110 2
x49601:	jmp ax	; 2: 255 224

ldiv$6:	; SignedDivide result$quot num denum
x49603:	mov eax, [bp + 6]	; 4: 102 139 70 6
x49607:	xor edx, edx	; 3: 102 49 210
x49610:	idiv dword [bp + 10]	; 4: 102 247 126 10
x49614:	mov [bp + 14], eax	; 4: 102 137 70 14

ldiv$7:	; SignedModulo result$rem num denum
x49618:	mov eax, [bp + 6]	; 4: 102 139 70 6
x49622:	xor edx, edx	; 3: 102 49 210
x49625:	idiv dword [bp + 10]	; 4: 102 247 126 10
x49629:	mov [bp + 18], edx	; 4: 102 137 86 18

ldiv$8:	; SetReturnValue result
x49633:	mov bx, bp	; 2: 137 235
x49635:	add bx, 14	; 3: 131 195 14

ldiv$9:	; Return result
x49638:	mov ax, [bp]	; 3: 139 70 0
x49641:	mov di, [bp + 4]	; 3: 139 126 4
x49644:	mov bp, [bp + 2]	; 3: 139 110 2
x49647:	jmp ax	; 2: 255 224

ldiv$10:	; FunctionEnd ldiv

print_ldiv:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_ldiv$1:	; Parameter 14 string_ldiv_t20quot2025li20rem2025li0A# 6
x49649:	mov word [bp + 20], @13175$string_ldiv_t20quot2025li20rem2025li0A#	; 5: 199 70 20 53 194

print_ldiv$2:	; Parameter 14 ld$quot 8
x49654:	mov eax, [bp + 6]	; 4: 102 139 70 6
x49658:	mov [bp + 22], eax	; 4: 102 137 70 22

print_ldiv$3:	; Parameter 14 ld$rem 12
x49662:	mov eax, [bp + 10]	; 4: 102 139 70 10
x49666:	mov [bp + 26], eax	; 4: 102 137 70 26

print_ldiv$4:	; Call 14 printf 0
x49670:	mov word [bp + 14], print_ldiv$5	; 5: 199 70 14 25 194
x49675:	mov [bp + 16], bp	; 3: 137 110 16
x49678:	add bp, 14	; 3: 131 197 14
x49681:	mov di, bp	; 2: 137 239
x49683:	add di, 8	; 3: 131 199 8
x49686:	jmp printf	; 3: 233 235 74

print_ldiv$5:	; PostCall 14

print_ldiv$6:	; Decrement ld$quot
x49689:	dec dword [bp + 6]	; 4: 102 255 78 6

print_ldiv$7:	; Assign £temporary6029 ld$rem
x49693:	mov eax, [bp + 10]	; 4: 102 139 70 10

print_ldiv$8:	; Decrement ld$rem
x49697:	dec dword [bp + 10]	; 4: 102 255 78 10

print_ldiv$9:	; SetReturnValue ld
x49701:	mov bx, bp	; 2: 137 235
x49703:	add bx, 6	; 3: 131 195 6

print_ldiv$10:	; Return ld
x49706:	mov ax, [bp]	; 3: 139 70 0
x49709:	mov di, [bp + 4]	; 3: 139 126 4
x49712:	mov bp, [bp + 2]	; 3: 139 110 2
x49715:	jmp ax	; 2: 255 224

print_ldiv$11:	; FunctionEnd print_ldiv

@13175$string_ldiv_t20quot2025li20rem2025li0A#:
x49717:	db "ldiv_t quot %li rem %li", 10, 0	; 25: 108 100 105 118 95 116 32 113 117 111 116 32 37 108 105 32 114 101 109 32 37 108 105 10 0

qsort:	; IntegralToIntegral £temporary3187 valueList
x49742:	mov ax, [bp + 6]	; 3: 139 70 6

qsort$1:	; Assign charList £temporary3187
x49745:	mov [bp + 14], ax	; 3: 137 70 14

qsort$2:	; BinarySubtract size listSize 1
x49748:	mov ax, [bp + 8]	; 3: 139 70 8
x49751:	dec ax	; 1: 72
x49752:	mov [bp + 16], ax	; 3: 137 70 16

qsort$3:	; SignedLessThanEqual 31 size 0
x49755:	cmp word [bp + 16], 0	; 4: 131 126 16 0
x49759:	jle qsort$31	; 4: 15 142 138 0

qsort$4:	; Assign update 0
x49763:	mov word [bp + 20], 0	; 5: 199 70 20 0 0

qsort$5:	; Assign index 0
x49768:	mov word [bp + 18], 0	; 5: 199 70 18 0 0

qsort$6:	; SignedGreaterThanEqual 28 index size
x49773:	mov ax, [bp + 16]	; 3: 139 70 16
x49776:	cmp [bp + 18], ax	; 3: 57 70 18
x49779:	jge qsort$28	; 2: 125 108

qsort$7:	; SignedMultiply £temporary3193 index valueSize
x49781:	mov ax, [bp + 18]	; 3: 139 70 18
x49784:	xor dx, dx	; 2: 49 210
x49786:	imul word [bp + 10]	; 3: 247 110 10

qsort$8:	; BinaryAdd valuePtr1 charList £temporary3193
x49789:	mov bx, [bp + 14]	; 3: 139 94 14
x49792:	add bx, ax	; 2: 1 195
x49794:	mov [bp + 22], bx	; 3: 137 94 22

qsort$9:	; BinaryAdd £temporary3195 index 1
x49797:	mov ax, [bp + 18]	; 3: 139 70 18
x49800:	inc ax	; 1: 64

qsort$10:	; SignedMultiply £temporary3196 £temporary3195 valueSize
x49801:	xor dx, dx	; 2: 49 210
x49803:	imul word [bp + 10]	; 3: 247 110 10

qsort$11:	; BinaryAdd valuePtr2 charList £temporary3196
x49806:	mov bx, [bp + 14]	; 3: 139 94 14
x49809:	add bx, ax	; 2: 1 195
x49811:	mov [bp + 24], bx	; 3: 137 94 24

qsort$12:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

qsort$13:	; Parameter 26 valuePtr1 6
x49814:	mov ax, [bp + 22]	; 3: 139 70 22
x49817:	mov [bp + 32], ax	; 3: 137 70 32

qsort$14:	; Parameter 26 valuePtr2 8
x49820:	mov ax, [bp + 24]	; 3: 139 70 24
x49823:	mov [bp + 34], ax	; 3: 137 70 34

qsort$15:	; Call 26 compare 0
x49826:	mov word [bp + 26], qsort$16	; 5: 199 70 26 178 194
x49831:	mov [bp + 28], bp	; 3: 137 110 28
x49834:	mov ax, [bp + 12]	; 3: 139 70 12
x49837:	add bp, 26	; 3: 131 197 26
x49840:	jmp ax	; 2: 255 224

qsort$16:	; PostCall 26

qsort$17:	; GetReturnValue £temporary3198

qsort$18:	; SignedLessThanEqual 26 £temporary3198 0
x49842:	cmp bx, 0	; 3: 131 251 0
x49845:	jle qsort$26	; 2: 126 37

qsort$19:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

qsort$20:	; Parameter 26 valuePtr1 6
x49847:	mov ax, [bp + 22]	; 3: 139 70 22
x49850:	mov [bp + 32], ax	; 3: 137 70 32

qsort$21:	; Parameter 26 valuePtr2 8
x49853:	mov ax, [bp + 24]	; 3: 139 70 24
x49856:	mov [bp + 34], ax	; 3: 137 70 34

qsort$22:	; Parameter 26 valueSize 10
x49859:	mov ax, [bp + 10]	; 3: 139 70 10
x49862:	mov [bp + 36], ax	; 3: 137 70 36

qsort$23:	; Call 26 memswap 0
x49865:	mov word [bp + 26], qsort$24	; 5: 199 70 26 215 194
x49870:	mov [bp + 28], bp	; 3: 137 110 28
x49873:	add bp, 26	; 3: 131 197 26
x49876:	nop	; 1: 144
x49877:	jmp @7290$memswap	; 2: 235 33

qsort$24:	; PostCall 26

qsort$25:	; Assign update 1
x49879:	mov word [bp + 20], 1	; 5: 199 70 20 1 0

qsort$26:	; Increment index
x49884:	inc word [bp + 18]	; 3: 255 70 18

qsort$27:	; Goto 6
x49887:	jmp qsort$6	; 2: 235 140

qsort$28:	; Equal 31 update 0
x49889:	cmp word [bp + 20], 0	; 4: 131 126 20 0
x49893:	je qsort$31	; 2: 116 6

qsort$29:	; Decrement size
x49895:	dec word [bp + 16]	; 3: 255 78 16

qsort$30:	; Goto 3
x49898:	jmp qsort$3	; 3: 233 110 255

qsort$31:	; Return 0
x49901:	mov ax, [bp]	; 3: 139 70 0
x49904:	mov di, [bp + 4]	; 3: 139 126 4
x49907:	mov bp, [bp + 2]	; 3: 139 110 2
x49910:	jmp ax	; 2: 255 224

qsort$32:	; FunctionEnd qsort

@7290$memswap:	; Assign index 0
x49912:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

@7290$memswap$1:	; SignedGreaterThanEqual 15 index valueSize
x49917:	mov ax, [bp + 10]	; 3: 139 70 10
x49920:	cmp [bp + 12], ax	; 3: 57 70 12
x49923:	jge @7290$memswap$15	; 2: 125 43

@7290$memswap$2:	; BinaryAdd £temporary3180 value1 index
x49925:	mov si, [bp + 6]	; 3: 139 118 6
x49928:	add si, [bp + 12]	; 3: 3 118 12

@7290$memswap$3:	; Deref £temporary3179 -> £temporary3180 £temporary3180 0

@7290$memswap$4:	; Assign tempValue £temporary3179 -> £temporary3180
x49931:	mov al, [si]	; 2: 138 4
x49933:	mov [bp + 14], al	; 3: 136 70 14

@7290$memswap$5:	; BinaryAdd £temporary3182 value1 index
x49936:	mov si, [bp + 6]	; 3: 139 118 6
x49939:	add si, [bp + 12]	; 3: 3 118 12

@7290$memswap$6:	; Deref £temporary3181 -> £temporary3182 £temporary3182 0

@7290$memswap$7:	; BinaryAdd £temporary3184 value2 index
x49942:	mov di, [bp + 8]	; 3: 139 126 8
x49945:	add di, [bp + 12]	; 3: 3 126 12

@7290$memswap$8:	; Deref £temporary3183 -> £temporary3184 £temporary3184 0

@7290$memswap$9:	; Assign £temporary3181 -> £temporary3182 £temporary3183 -> £temporary3184
x49948:	mov al, [di]	; 2: 138 5
x49950:	mov [si], al	; 2: 136 4

@7290$memswap$10:	; BinaryAdd £temporary3186 value2 index
x49952:	mov si, [bp + 8]	; 3: 139 118 8
x49955:	add si, [bp + 12]	; 3: 3 118 12

@7290$memswap$11:	; Deref £temporary3185 -> £temporary3186 £temporary3186 0

@7290$memswap$12:	; Assign £temporary3185 -> £temporary3186 tempValue
x49958:	mov al, [bp + 14]	; 3: 138 70 14
x49961:	mov [si], al	; 2: 136 4

@7290$memswap$13:	; Increment index
x49963:	inc word [bp + 12]	; 3: 255 70 12

@7290$memswap$14:	; Goto 1
x49966:	jmp @7290$memswap$1	; 2: 235 205

@7290$memswap$15:	; Return 0
x49968:	mov ax, [bp]	; 3: 139 70 0
x49971:	mov di, [bp + 4]	; 3: 139 126 4
x49974:	mov bp, [bp + 2]	; 3: 139 110 2
x49977:	jmp ax	; 2: 255 224

@7290$memswap$16:	; FunctionEnd memswap

bsearch:	; Assign firstIndex 0
x49979:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

bsearch$1:	; BinarySubtract lastIndex listSize 1
x49984:	mov ax, [bp + 10]	; 3: 139 70 10
x49987:	dec ax	; 1: 72
x49988:	mov [bp + 18], ax	; 3: 137 70 18

bsearch$2:	; NotEqual 5 listSize 0
x49991:	cmp word [bp + 10], 0	; 4: 131 126 10 0
x49995:	jne bsearch$5	; 2: 117 14

bsearch$3:	; SetReturnValue 0
x49997:	mov bx, 0	; 3: 187 0 0

bsearch$4:	; Return 0
x50000:	mov ax, [bp]	; 3: 139 70 0
x50003:	mov di, [bp + 4]	; 3: 139 126 4
x50006:	mov bp, [bp + 2]	; 3: 139 110 2
x50009:	jmp ax	; 2: 255 224

bsearch$5:	; IntegralToIntegral £temporary3123 valueList
x50011:	mov bx, [bp + 8]	; 3: 139 94 8

bsearch$6:	; SignedMultiply £temporary3124 firstIndex valueSize
x50014:	mov ax, [bp + 16]	; 3: 139 70 16
x50017:	xor dx, dx	; 2: 49 210
x50019:	imul word [bp + 12]	; 3: 247 110 12

bsearch$7:	; BinaryAdd firstValuePtr £temporary3123 £temporary3124
x50022:	add bx, ax	; 2: 1 195
x50024:	mov [bp + 20], bx	; 3: 137 94 20

bsearch$8:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

bsearch$9:	; Parameter 22 keyPtr 6
x50027:	mov ax, [bp + 6]	; 3: 139 70 6
x50030:	mov [bp + 28], ax	; 3: 137 70 28

bsearch$10:	; Parameter 22 firstValuePtr 8
x50033:	mov ax, [bp + 20]	; 3: 139 70 20
x50036:	mov [bp + 30], ax	; 3: 137 70 30

bsearch$11:	; Call 22 compare 0
x50039:	mov word [bp + 22], bsearch$12	; 5: 199 70 22 135 195
x50044:	mov [bp + 24], bp	; 3: 137 110 24
x50047:	mov ax, [bp + 14]	; 3: 139 70 14
x50050:	add bp, 22	; 3: 131 197 22
x50053:	jmp ax	; 2: 255 224

bsearch$12:	; PostCall 22

bsearch$13:	; GetReturnValue £temporary3126

bsearch$14:	; Assign firstCompare £temporary3126
x50055:	mov [bp + 22], bx	; 3: 137 94 22

bsearch$15:	; SignedGreaterThanEqual 18 firstCompare 0
x50058:	cmp word [bp + 22], 0	; 4: 131 126 22 0
x50062:	jge bsearch$18	; 2: 125 14

bsearch$16:	; SetReturnValue 0
x50064:	mov bx, 0	; 3: 187 0 0

bsearch$17:	; Return 0
x50067:	mov ax, [bp]	; 3: 139 70 0
x50070:	mov di, [bp + 4]	; 3: 139 126 4
x50073:	mov bp, [bp + 2]	; 3: 139 110 2
x50076:	jmp ax	; 2: 255 224

bsearch$18:	; NotEqual 21 firstCompare 0
x50078:	cmp word [bp + 22], 0	; 4: 131 126 22 0
x50082:	jne bsearch$21	; 2: 117 14

bsearch$19:	; SetReturnValue firstValuePtr
x50084:	mov bx, [bp + 20]	; 3: 139 94 20

bsearch$20:	; Return firstValuePtr
x50087:	mov ax, [bp]	; 3: 139 70 0
x50090:	mov di, [bp + 4]	; 3: 139 126 4
x50093:	mov bp, [bp + 2]	; 3: 139 110 2
x50096:	jmp ax	; 2: 255 224

bsearch$21:	; IntegralToIntegral £temporary3129 valueList
x50098:	mov bx, [bp + 8]	; 3: 139 94 8

bsearch$22:	; SignedMultiply £temporary3130 lastIndex valueSize
x50101:	mov ax, [bp + 18]	; 3: 139 70 18
x50104:	xor dx, dx	; 2: 49 210
x50106:	imul word [bp + 12]	; 3: 247 110 12

bsearch$23:	; BinaryAdd lastValuePtr £temporary3129 £temporary3130
x50109:	add bx, ax	; 2: 1 195
x50111:	mov [bp + 20], bx	; 3: 137 94 20

bsearch$24:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

bsearch$25:	; Parameter 22 keyPtr 6
x50114:	mov ax, [bp + 6]	; 3: 139 70 6
x50117:	mov [bp + 28], ax	; 3: 137 70 28

bsearch$26:	; Parameter 22 lastValuePtr 8
x50120:	mov ax, [bp + 20]	; 3: 139 70 20
x50123:	mov [bp + 30], ax	; 3: 137 70 30

bsearch$27:	; Call 22 compare 0
x50126:	mov word [bp + 22], bsearch$28	; 5: 199 70 22 222 195
x50131:	mov [bp + 24], bp	; 3: 137 110 24
x50134:	mov ax, [bp + 14]	; 3: 139 70 14
x50137:	add bp, 22	; 3: 131 197 22
x50140:	jmp ax	; 2: 255 224

bsearch$28:	; PostCall 22

bsearch$29:	; GetReturnValue £temporary3132

bsearch$30:	; Assign lastCompare £temporary3132
x50142:	mov [bp + 22], bx	; 3: 137 94 22

bsearch$31:	; SignedLessThanEqual 34 lastCompare 0
x50145:	cmp word [bp + 22], 0	; 4: 131 126 22 0
x50149:	jle bsearch$34	; 2: 126 14

bsearch$32:	; SetReturnValue 0
x50151:	mov bx, 0	; 3: 187 0 0

bsearch$33:	; Return 0
x50154:	mov ax, [bp]	; 3: 139 70 0
x50157:	mov di, [bp + 4]	; 3: 139 126 4
x50160:	mov bp, [bp + 2]	; 3: 139 110 2
x50163:	jmp ax	; 2: 255 224

bsearch$34:	; NotEqual 37 lastCompare 0
x50165:	cmp word [bp + 22], 0	; 4: 131 126 22 0
x50169:	jne bsearch$37	; 2: 117 14

bsearch$35:	; SetReturnValue lastValuePtr
x50171:	mov bx, [bp + 20]	; 3: 139 94 20

bsearch$36:	; Return lastValuePtr
x50174:	mov ax, [bp]	; 3: 139 70 0
x50177:	mov di, [bp + 4]	; 3: 139 126 4
x50180:	mov bp, [bp + 2]	; 3: 139 110 2
x50183:	jmp ax	; 2: 255 224

bsearch$37:	; BinaryAdd £temporary3135 firstIndex lastIndex
x50185:	mov ax, [bp + 16]	; 3: 139 70 16
x50188:	add ax, [bp + 18]	; 3: 3 70 18

bsearch$38:	; SignedDivide middleIndex £temporary3135 2
x50191:	xor dx, dx	; 2: 49 210
x50193:	idiv word [@7190$int2$2#]	; 4: 247 62 115 196
x50197:	mov [bp + 20], ax	; 3: 137 70 20

bsearch$39:	; IntegralToIntegral £temporary3137 valueList
x50200:	mov bx, [bp + 8]	; 3: 139 94 8

bsearch$40:	; SignedMultiply £temporary3138 middleIndex valueSize
x50203:	mov ax, [bp + 20]	; 3: 139 70 20
x50206:	xor dx, dx	; 2: 49 210
x50208:	imul word [bp + 12]	; 3: 247 110 12

bsearch$41:	; BinaryAdd middleValuePtr £temporary3137 £temporary3138
x50211:	add bx, ax	; 2: 1 195
x50213:	mov [bp + 22], bx	; 3: 137 94 22

bsearch$42:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

bsearch$43:	; Parameter 24 keyPtr 6
x50216:	mov ax, [bp + 6]	; 3: 139 70 6
x50219:	mov [bp + 30], ax	; 3: 137 70 30

bsearch$44:	; Parameter 24 middleValuePtr 8
x50222:	mov ax, [bp + 22]	; 3: 139 70 22
x50225:	mov [bp + 32], ax	; 3: 137 70 32

bsearch$45:	; Call 24 compare 0
x50228:	mov word [bp + 24], bsearch$46	; 5: 199 70 24 68 196
x50233:	mov [bp + 26], bp	; 3: 137 110 26
x50236:	mov ax, [bp + 14]	; 3: 139 70 14
x50239:	add bp, 24	; 3: 131 197 24
x50242:	jmp ax	; 2: 255 224

bsearch$46:	; PostCall 24

bsearch$47:	; GetReturnValue £temporary3140

bsearch$48:	; Assign middleCompare £temporary3140
x50244:	mov [bp + 24], bx	; 3: 137 94 24

bsearch$49:	; SignedGreaterThanEqual 52 middleCompare 0
x50247:	cmp word [bp + 24], 0	; 4: 131 126 24 0
x50251:	jge bsearch$52	; 2: 125 9

bsearch$50:	; Assign lastIndex middleIndex
x50253:	mov ax, [bp + 20]	; 3: 139 70 20
x50256:	mov [bp + 18], ax	; 3: 137 70 18

bsearch$51:	; Goto 5
x50259:	jmp bsearch$5	; 3: 233 5 255

bsearch$52:	; SignedLessThanEqual 55 middleCompare 0
x50262:	cmp word [bp + 24], 0	; 4: 131 126 24 0
x50266:	jle bsearch$55	; 2: 126 9

bsearch$53:	; Assign firstIndex middleIndex
x50268:	mov ax, [bp + 20]	; 3: 139 70 20
x50271:	mov [bp + 16], ax	; 3: 137 70 16

bsearch$54:	; Goto 5
x50274:	jmp bsearch$5	; 3: 233 246 254

bsearch$55:	; SetReturnValue middleValuePtr
x50277:	mov bx, [bp + 22]	; 3: 139 94 22

bsearch$56:	; Return middleValuePtr
x50280:	mov ax, [bp]	; 3: 139 70 0
x50283:	mov di, [bp + 4]	; 3: 139 126 4
x50286:	mov bp, [bp + 2]	; 3: 139 110 2
x50289:	jmp ax	; 2: 255 224

bsearch$57:	; FunctionEnd bsearch

@7190$int2$2#:
x50291:	dw 2	; 2: 2 0

strtol_test:	; Assign base 0
x50293:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtol_test$1:	; Assign text[0] 32
x50298:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$2:	; Assign text[1] 32
x50302:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$3:	; Assign text[2] 32
x50306:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$4:	; Assign text[3] 43
x50310:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtol_test$5:	; Assign text[4] 49
x50314:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$6:	; Assign text[5] 50
x50318:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$7:	; Assign text[6] 51
x50322:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$8:	; Assign text[7] 97
x50326:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$9:	; Assign text[8] 98
x50330:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$10:	; Assign text[9] 99
x50334:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$11:	; Assign text[10] 0
x50338:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$12:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$13:	; Parameter 21 text 6
x50342:	mov [bp + 27], bp	; 3: 137 110 27
x50345:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$14:	; address £temporary2282 pointer
x50349:	mov si, bp	; 2: 137 238
x50351:	add si, 19	; 3: 131 198 19

strtol_test$15:	; Parameter 21 £temporary2282 8
x50354:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$16:	; Parameter 21 base 10
x50357:	mov ax, [bp + 6]	; 3: 139 70 6
x50360:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$17:	; Call 21 strtol 0
x50363:	mov word [bp + 21], strtol_test$18	; 5: 199 70 21 201 196
x50368:	mov [bp + 23], bp	; 3: 137 110 23
x50371:	add bp, 21	; 3: 131 197 21
x50374:	jmp strtol	; 3: 233 49 11

strtol_test$18:	; PostCall 21

strtol_test$19:	; GetReturnValue £temporary2283

strtol_test$20:	; Assign value £temporary2283
x50377:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$21:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$22:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x50381:	mov word [bp + 31], @5201$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 110 206

strtol_test$23:	; Parameter 25 text 8
x50386:	mov [bp + 33], bp	; 3: 137 110 33
x50389:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$24:	; Parameter 25 value 10
x50393:	mov eax, [bp + 21]	; 4: 102 139 70 21
x50397:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$25:	; Parameter 25 pointer 14
x50401:	mov ax, [bp + 19]	; 3: 139 70 19
x50404:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$26:	; Parameter 25 base 16
x50407:	mov ax, [bp + 6]	; 3: 139 70 6
x50410:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$27:	; Call 25 printf 0
x50413:	mov word [bp + 25], strtol_test$28	; 5: 199 70 25 0 197
x50418:	mov [bp + 27], bp	; 3: 137 110 27
x50421:	add bp, 25	; 3: 131 197 25
x50424:	mov di, bp	; 2: 137 239
x50426:	add di, 10	; 3: 131 199 10
x50429:	jmp printf	; 3: 233 4 72

strtol_test$28:	; PostCall 25

strtol_test$29:	; Assign base 0
x50432:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtol_test$30:	; Assign text[0] 32
x50437:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$31:	; Assign text[1] 32
x50441:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$32:	; Assign text[2] 32
x50445:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$33:	; Assign text[3] 43
x50449:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtol_test$34:	; Assign text[4] 48
x50453:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtol_test$35:	; Assign text[5] 49
x50457:	mov byte [bp + 13], 49	; 4: 198 70 13 49

strtol_test$36:	; Assign text[6] 50
x50461:	mov byte [bp + 14], 50	; 4: 198 70 14 50

strtol_test$37:	; Assign text[7] 51
x50465:	mov byte [bp + 15], 51	; 4: 198 70 15 51

strtol_test$38:	; Assign text[8] 97
x50469:	mov byte [bp + 16], 97	; 4: 198 70 16 97

strtol_test$39:	; Assign text[9] 98
x50473:	mov byte [bp + 17], 98	; 4: 198 70 17 98

strtol_test$40:	; Assign text[10] 99
x50477:	mov byte [bp + 18], 99	; 4: 198 70 18 99

strtol_test$41:	; Assign text[11] 0
x50481:	mov byte [bp + 19], 0	; 4: 198 70 19 0

strtol_test$42:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$43:	; Parameter 22 text 6
x50485:	mov [bp + 28], bp	; 3: 137 110 28
x50488:	add word [bp + 28], 8	; 4: 131 70 28 8

strtol_test$44:	; address £temporary2297 pointer
x50492:	mov si, bp	; 2: 137 238
x50494:	add si, 20	; 3: 131 198 20

strtol_test$45:	; Parameter 22 £temporary2297 8
x50497:	mov [bp + 30], si	; 3: 137 118 30

strtol_test$46:	; Parameter 22 base 10
x50500:	mov ax, [bp + 6]	; 3: 139 70 6
x50503:	mov [bp + 32], ax	; 3: 137 70 32

strtol_test$47:	; Call 22 strtol 0
x50506:	mov word [bp + 22], strtol_test$48	; 5: 199 70 22 88 197
x50511:	mov [bp + 24], bp	; 3: 137 110 24
x50514:	add bp, 22	; 3: 131 197 22
x50517:	jmp strtol	; 3: 233 162 10

strtol_test$48:	; PostCall 22

strtol_test$49:	; GetReturnValue £temporary2298

strtol_test$50:	; Assign value £temporary2298
x50520:	mov [bp + 22], ebx	; 4: 102 137 94 22

strtol_test$51:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$52:	; Parameter 26 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x50524:	mov word [bp + 32], @5248$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 32 132 206

strtol_test$53:	; Parameter 26 text 8
x50529:	mov [bp + 34], bp	; 3: 137 110 34
x50532:	add word [bp + 34], 8	; 4: 131 70 34 8

strtol_test$54:	; Parameter 26 value 10
x50536:	mov eax, [bp + 22]	; 4: 102 139 70 22
x50540:	mov [bp + 36], eax	; 4: 102 137 70 36

strtol_test$55:	; Parameter 26 pointer 14
x50544:	mov ax, [bp + 20]	; 3: 139 70 20
x50547:	mov [bp + 40], ax	; 3: 137 70 40

strtol_test$56:	; Parameter 26 base 16
x50550:	mov ax, [bp + 6]	; 3: 139 70 6
x50553:	mov [bp + 42], ax	; 3: 137 70 42

strtol_test$57:	; Call 26 printf 0
x50556:	mov word [bp + 26], strtol_test$58	; 5: 199 70 26 143 197
x50561:	mov [bp + 28], bp	; 3: 137 110 28
x50564:	add bp, 26	; 3: 131 197 26
x50567:	mov di, bp	; 2: 137 239
x50569:	add di, 10	; 3: 131 199 10
x50572:	jmp printf	; 3: 233 117 71

strtol_test$58:	; PostCall 26

strtol_test$59:	; Assign base 0
x50575:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtol_test$60:	; Assign text[0] 32
x50580:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$61:	; Assign text[1] 32
x50584:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$62:	; Assign text[2] 32
x50588:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$63:	; Assign text[3] 43
x50592:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtol_test$64:	; Assign text[4] 48
x50596:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtol_test$65:	; Assign text[5] 120
x50600:	mov byte [bp + 13], 120	; 4: 198 70 13 120

strtol_test$66:	; Assign text[6] 49
x50604:	mov byte [bp + 14], 49	; 4: 198 70 14 49

strtol_test$67:	; Assign text[7] 50
x50608:	mov byte [bp + 15], 50	; 4: 198 70 15 50

strtol_test$68:	; Assign text[8] 51
x50612:	mov byte [bp + 16], 51	; 4: 198 70 16 51

strtol_test$69:	; Assign text[9] 65
x50616:	mov byte [bp + 17], 65	; 4: 198 70 17 65

strtol_test$70:	; Assign text[10] 66
x50620:	mov byte [bp + 18], 66	; 4: 198 70 18 66

strtol_test$71:	; Assign text[11] 67
x50624:	mov byte [bp + 19], 67	; 4: 198 70 19 67

strtol_test$72:	; Assign text[12] 0
x50628:	mov byte [bp + 20], 0	; 4: 198 70 20 0

strtol_test$73:	; CallHeader 23 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$74:	; Parameter 23 text 6
x50632:	mov [bp + 29], bp	; 3: 137 110 29
x50635:	add word [bp + 29], 8	; 4: 131 70 29 8

strtol_test$75:	; address £temporary2313 pointer
x50639:	mov si, bp	; 2: 137 238
x50641:	add si, 21	; 3: 131 198 21

strtol_test$76:	; Parameter 23 £temporary2313 8
x50644:	mov [bp + 31], si	; 3: 137 118 31

strtol_test$77:	; Parameter 23 base 10
x50647:	mov ax, [bp + 6]	; 3: 139 70 6
x50650:	mov [bp + 33], ax	; 3: 137 70 33

strtol_test$78:	; Call 23 strtol 0
x50653:	mov word [bp + 23], strtol_test$79	; 5: 199 70 23 235 197
x50658:	mov [bp + 25], bp	; 3: 137 110 25
x50661:	add bp, 23	; 3: 131 197 23
x50664:	jmp strtol	; 3: 233 15 10

strtol_test$79:	; PostCall 23

strtol_test$80:	; GetReturnValue £temporary2314

strtol_test$81:	; Assign value £temporary2314
x50667:	mov [bp + 23], ebx	; 4: 102 137 94 23

strtol_test$82:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$83:	; Parameter 27 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x50671:	mov word [bp + 33], @5298$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 33 154 206

strtol_test$84:	; Parameter 27 text 8
x50676:	mov [bp + 35], bp	; 3: 137 110 35
x50679:	add word [bp + 35], 8	; 4: 131 70 35 8

strtol_test$85:	; Parameter 27 value 10
x50683:	mov eax, [bp + 23]	; 4: 102 139 70 23
x50687:	mov [bp + 37], eax	; 4: 102 137 70 37

strtol_test$86:	; Parameter 27 pointer 14
x50691:	mov ax, [bp + 21]	; 3: 139 70 21
x50694:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$87:	; Parameter 27 base 16
x50697:	mov ax, [bp + 6]	; 3: 139 70 6
x50700:	mov [bp + 43], ax	; 3: 137 70 43

strtol_test$88:	; Call 27 printf 0
x50703:	mov word [bp + 27], strtol_test$89	; 5: 199 70 27 34 198
x50708:	mov [bp + 29], bp	; 3: 137 110 29
x50711:	add bp, 27	; 3: 131 197 27
x50714:	mov di, bp	; 2: 137 239
x50716:	add di, 10	; 3: 131 199 10
x50719:	jmp printf	; 3: 233 226 70

strtol_test$89:	; PostCall 27

strtol_test$90:	; Assign base 0
x50722:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtol_test$91:	; Assign text[0] 32
x50727:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$92:	; Assign text[1] 32
x50731:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$93:	; Assign text[2] 32
x50735:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$94:	; Assign text[3] 43
x50739:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtol_test$95:	; Assign text[4] 48
x50743:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtol_test$96:	; Assign text[5] 88
x50747:	mov byte [bp + 13], 88	; 4: 198 70 13 88

strtol_test$97:	; Assign text[6] 49
x50751:	mov byte [bp + 14], 49	; 4: 198 70 14 49

strtol_test$98:	; Assign text[7] 50
x50755:	mov byte [bp + 15], 50	; 4: 198 70 15 50

strtol_test$99:	; Assign text[8] 51
x50759:	mov byte [bp + 16], 51	; 4: 198 70 16 51

strtol_test$100:	; Assign text[9] 97
x50763:	mov byte [bp + 17], 97	; 4: 198 70 17 97

strtol_test$101:	; Assign text[10] 98
x50767:	mov byte [bp + 18], 98	; 4: 198 70 18 98

strtol_test$102:	; Assign text[11] 99
x50771:	mov byte [bp + 19], 99	; 4: 198 70 19 99

strtol_test$103:	; Assign text[12] 0
x50775:	mov byte [bp + 20], 0	; 4: 198 70 20 0

strtol_test$104:	; CallHeader 23 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$105:	; Parameter 23 text 6
x50779:	mov [bp + 29], bp	; 3: 137 110 29
x50782:	add word [bp + 29], 8	; 4: 131 70 29 8

strtol_test$106:	; address £temporary2329 pointer
x50786:	mov si, bp	; 2: 137 238
x50788:	add si, 21	; 3: 131 198 21

strtol_test$107:	; Parameter 23 £temporary2329 8
x50791:	mov [bp + 31], si	; 3: 137 118 31

strtol_test$108:	; Parameter 23 base 10
x50794:	mov ax, [bp + 6]	; 3: 139 70 6
x50797:	mov [bp + 33], ax	; 3: 137 70 33

strtol_test$109:	; Call 23 strtol 0
x50800:	mov word [bp + 23], strtol_test$110	; 5: 199 70 23 126 198
x50805:	mov [bp + 25], bp	; 3: 137 110 25
x50808:	add bp, 23	; 3: 131 197 23
x50811:	jmp strtol	; 3: 233 124 9

strtol_test$110:	; PostCall 23

strtol_test$111:	; GetReturnValue £temporary2330

strtol_test$112:	; Assign value £temporary2330
x50814:	mov [bp + 23], ebx	; 4: 102 137 94 23

strtol_test$113:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$114:	; Parameter 27 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x50818:	mov word [bp + 33], @5348$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 33 176 206

strtol_test$115:	; Parameter 27 text 8
x50823:	mov [bp + 35], bp	; 3: 137 110 35
x50826:	add word [bp + 35], 8	; 4: 131 70 35 8

strtol_test$116:	; Parameter 27 value 10
x50830:	mov eax, [bp + 23]	; 4: 102 139 70 23
x50834:	mov [bp + 37], eax	; 4: 102 137 70 37

strtol_test$117:	; Parameter 27 pointer 14
x50838:	mov ax, [bp + 21]	; 3: 139 70 21
x50841:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$118:	; Parameter 27 base 16
x50844:	mov ax, [bp + 6]	; 3: 139 70 6
x50847:	mov [bp + 43], ax	; 3: 137 70 43

strtol_test$119:	; Call 27 printf 0
x50850:	mov word [bp + 27], strtol_test$120	; 5: 199 70 27 181 198
x50855:	mov [bp + 29], bp	; 3: 137 110 29
x50858:	add bp, 27	; 3: 131 197 27
x50861:	mov di, bp	; 2: 137 239
x50863:	add di, 10	; 3: 131 199 10
x50866:	jmp printf	; 3: 233 79 70

strtol_test$120:	; PostCall 27

strtol_test$121:	; Assign base 0
x50869:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtol_test$122:	; Assign text[0] 32
x50874:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$123:	; Assign text[1] 32
x50878:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$124:	; Assign text[2] 32
x50882:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$125:	; Assign text[3] 45
x50886:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtol_test$126:	; Assign text[4] 49
x50890:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$127:	; Assign text[5] 50
x50894:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$128:	; Assign text[6] 51
x50898:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$129:	; Assign text[7] 97
x50902:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$130:	; Assign text[8] 98
x50906:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$131:	; Assign text[9] 99
x50910:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$132:	; Assign text[10] 0
x50914:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$133:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$134:	; Parameter 21 text 6
x50918:	mov [bp + 27], bp	; 3: 137 110 27
x50921:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$135:	; address £temporary2343 pointer
x50925:	mov si, bp	; 2: 137 238
x50927:	add si, 19	; 3: 131 198 19

strtol_test$136:	; Parameter 21 £temporary2343 8
x50930:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$137:	; Parameter 21 base 10
x50933:	mov ax, [bp + 6]	; 3: 139 70 6
x50936:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$138:	; Call 21 strtol 0
x50939:	mov word [bp + 21], strtol_test$139	; 5: 199 70 21 9 199
x50944:	mov [bp + 23], bp	; 3: 137 110 23
x50947:	add bp, 21	; 3: 131 197 21
x50950:	jmp strtol	; 3: 233 241 8

strtol_test$139:	; PostCall 21

strtol_test$140:	; GetReturnValue £temporary2344

strtol_test$141:	; Assign value £temporary2344
x50953:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$142:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$143:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x50957:	mov word [bp + 31], @5392$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 198 206

strtol_test$144:	; Parameter 25 text 8
x50962:	mov [bp + 33], bp	; 3: 137 110 33
x50965:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$145:	; Parameter 25 value 10
x50969:	mov eax, [bp + 21]	; 4: 102 139 70 21
x50973:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$146:	; Parameter 25 pointer 14
x50977:	mov ax, [bp + 19]	; 3: 139 70 19
x50980:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$147:	; Parameter 25 base 16
x50983:	mov ax, [bp + 6]	; 3: 139 70 6
x50986:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$148:	; Call 25 printf 0
x50989:	mov word [bp + 25], strtol_test$149	; 5: 199 70 25 64 199
x50994:	mov [bp + 27], bp	; 3: 137 110 27
x50997:	add bp, 25	; 3: 131 197 25
x51000:	mov di, bp	; 2: 137 239
x51002:	add di, 10	; 3: 131 199 10
x51005:	jmp printf	; 3: 233 196 69

strtol_test$149:	; PostCall 25

strtol_test$150:	; Assign base 0
x51008:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtol_test$151:	; Assign text[0] 32
x51013:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$152:	; Assign text[1] 32
x51017:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$153:	; Assign text[2] 32
x51021:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$154:	; Assign text[3] 45
x51025:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtol_test$155:	; Assign text[4] 48
x51029:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtol_test$156:	; Assign text[5] 49
x51033:	mov byte [bp + 13], 49	; 4: 198 70 13 49

strtol_test$157:	; Assign text[6] 50
x51037:	mov byte [bp + 14], 50	; 4: 198 70 14 50

strtol_test$158:	; Assign text[7] 51
x51041:	mov byte [bp + 15], 51	; 4: 198 70 15 51

strtol_test$159:	; Assign text[8] 97
x51045:	mov byte [bp + 16], 97	; 4: 198 70 16 97

strtol_test$160:	; Assign text[9] 98
x51049:	mov byte [bp + 17], 98	; 4: 198 70 17 98

strtol_test$161:	; Assign text[10] 99
x51053:	mov byte [bp + 18], 99	; 4: 198 70 18 99

strtol_test$162:	; Assign text[11] 0
x51057:	mov byte [bp + 19], 0	; 4: 198 70 19 0

strtol_test$163:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$164:	; Parameter 22 text 6
x51061:	mov [bp + 28], bp	; 3: 137 110 28
x51064:	add word [bp + 28], 8	; 4: 131 70 28 8

strtol_test$165:	; address £temporary2358 pointer
x51068:	mov si, bp	; 2: 137 238
x51070:	add si, 20	; 3: 131 198 20

strtol_test$166:	; Parameter 22 £temporary2358 8
x51073:	mov [bp + 30], si	; 3: 137 118 30

strtol_test$167:	; Parameter 22 base 10
x51076:	mov ax, [bp + 6]	; 3: 139 70 6
x51079:	mov [bp + 32], ax	; 3: 137 70 32

strtol_test$168:	; Call 22 strtol 0
x51082:	mov word [bp + 22], strtol_test$169	; 5: 199 70 22 152 199
x51087:	mov [bp + 24], bp	; 3: 137 110 24
x51090:	add bp, 22	; 3: 131 197 22
x51093:	jmp strtol	; 3: 233 98 8

strtol_test$169:	; PostCall 22

strtol_test$170:	; GetReturnValue £temporary2359

strtol_test$171:	; Assign value £temporary2359
x51096:	mov [bp + 22], ebx	; 4: 102 137 94 22

strtol_test$172:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$173:	; Parameter 26 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x51100:	mov word [bp + 32], @5439$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 32 220 206

strtol_test$174:	; Parameter 26 text 8
x51105:	mov [bp + 34], bp	; 3: 137 110 34
x51108:	add word [bp + 34], 8	; 4: 131 70 34 8

strtol_test$175:	; Parameter 26 value 10
x51112:	mov eax, [bp + 22]	; 4: 102 139 70 22
x51116:	mov [bp + 36], eax	; 4: 102 137 70 36

strtol_test$176:	; Parameter 26 pointer 14
x51120:	mov ax, [bp + 20]	; 3: 139 70 20
x51123:	mov [bp + 40], ax	; 3: 137 70 40

strtol_test$177:	; Parameter 26 base 16
x51126:	mov ax, [bp + 6]	; 3: 139 70 6
x51129:	mov [bp + 42], ax	; 3: 137 70 42

strtol_test$178:	; Call 26 printf 0
x51132:	mov word [bp + 26], strtol_test$179	; 5: 199 70 26 207 199
x51137:	mov [bp + 28], bp	; 3: 137 110 28
x51140:	add bp, 26	; 3: 131 197 26
x51143:	mov di, bp	; 2: 137 239
x51145:	add di, 10	; 3: 131 199 10
x51148:	jmp printf	; 3: 233 53 69

strtol_test$179:	; PostCall 26

strtol_test$180:	; Assign base 0
x51151:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtol_test$181:	; Assign text[0] 32
x51156:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$182:	; Assign text[1] 32
x51160:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$183:	; Assign text[2] 32
x51164:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$184:	; Assign text[3] 45
x51168:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtol_test$185:	; Assign text[4] 48
x51172:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtol_test$186:	; Assign text[5] 120
x51176:	mov byte [bp + 13], 120	; 4: 198 70 13 120

strtol_test$187:	; Assign text[6] 49
x51180:	mov byte [bp + 14], 49	; 4: 198 70 14 49

strtol_test$188:	; Assign text[7] 50
x51184:	mov byte [bp + 15], 50	; 4: 198 70 15 50

strtol_test$189:	; Assign text[8] 51
x51188:	mov byte [bp + 16], 51	; 4: 198 70 16 51

strtol_test$190:	; Assign text[9] 65
x51192:	mov byte [bp + 17], 65	; 4: 198 70 17 65

strtol_test$191:	; Assign text[10] 66
x51196:	mov byte [bp + 18], 66	; 4: 198 70 18 66

strtol_test$192:	; Assign text[11] 67
x51200:	mov byte [bp + 19], 67	; 4: 198 70 19 67

strtol_test$193:	; Assign text[12] 0
x51204:	mov byte [bp + 20], 0	; 4: 198 70 20 0

strtol_test$194:	; CallHeader 23 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$195:	; Parameter 23 text 6
x51208:	mov [bp + 29], bp	; 3: 137 110 29
x51211:	add word [bp + 29], 8	; 4: 131 70 29 8

strtol_test$196:	; address £temporary2374 pointer
x51215:	mov si, bp	; 2: 137 238
x51217:	add si, 21	; 3: 131 198 21

strtol_test$197:	; Parameter 23 £temporary2374 8
x51220:	mov [bp + 31], si	; 3: 137 118 31

strtol_test$198:	; Parameter 23 base 10
x51223:	mov ax, [bp + 6]	; 3: 139 70 6
x51226:	mov [bp + 33], ax	; 3: 137 70 33

strtol_test$199:	; Call 23 strtol 0
x51229:	mov word [bp + 23], strtol_test$200	; 5: 199 70 23 43 200
x51234:	mov [bp + 25], bp	; 3: 137 110 25
x51237:	add bp, 23	; 3: 131 197 23
x51240:	jmp strtol	; 3: 233 207 7

strtol_test$200:	; PostCall 23

strtol_test$201:	; GetReturnValue £temporary2375

strtol_test$202:	; Assign value £temporary2375
x51243:	mov [bp + 23], ebx	; 4: 102 137 94 23

strtol_test$203:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$204:	; Parameter 27 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x51247:	mov word [bp + 33], @5489$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 33 242 206

strtol_test$205:	; Parameter 27 text 8
x51252:	mov [bp + 35], bp	; 3: 137 110 35
x51255:	add word [bp + 35], 8	; 4: 131 70 35 8

strtol_test$206:	; Parameter 27 value 10
x51259:	mov eax, [bp + 23]	; 4: 102 139 70 23
x51263:	mov [bp + 37], eax	; 4: 102 137 70 37

strtol_test$207:	; Parameter 27 pointer 14
x51267:	mov ax, [bp + 21]	; 3: 139 70 21
x51270:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$208:	; Parameter 27 base 16
x51273:	mov ax, [bp + 6]	; 3: 139 70 6
x51276:	mov [bp + 43], ax	; 3: 137 70 43

strtol_test$209:	; Call 27 printf 0
x51279:	mov word [bp + 27], strtol_test$210	; 5: 199 70 27 98 200
x51284:	mov [bp + 29], bp	; 3: 137 110 29
x51287:	add bp, 27	; 3: 131 197 27
x51290:	mov di, bp	; 2: 137 239
x51292:	add di, 10	; 3: 131 199 10
x51295:	jmp printf	; 3: 233 162 68

strtol_test$210:	; PostCall 27

strtol_test$211:	; Assign base 0
x51298:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtol_test$212:	; Assign text[0] 32
x51303:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$213:	; Assign text[1] 32
x51307:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$214:	; Assign text[2] 32
x51311:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$215:	; Assign text[3] 45
x51315:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtol_test$216:	; Assign text[4] 48
x51319:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtol_test$217:	; Assign text[5] 88
x51323:	mov byte [bp + 13], 88	; 4: 198 70 13 88

strtol_test$218:	; Assign text[6] 49
x51327:	mov byte [bp + 14], 49	; 4: 198 70 14 49

strtol_test$219:	; Assign text[7] 50
x51331:	mov byte [bp + 15], 50	; 4: 198 70 15 50

strtol_test$220:	; Assign text[8] 51
x51335:	mov byte [bp + 16], 51	; 4: 198 70 16 51

strtol_test$221:	; Assign text[9] 97
x51339:	mov byte [bp + 17], 97	; 4: 198 70 17 97

strtol_test$222:	; Assign text[10] 98
x51343:	mov byte [bp + 18], 98	; 4: 198 70 18 98

strtol_test$223:	; Assign text[11] 99
x51347:	mov byte [bp + 19], 99	; 4: 198 70 19 99

strtol_test$224:	; Assign text[12] 0
x51351:	mov byte [bp + 20], 0	; 4: 198 70 20 0

strtol_test$225:	; CallHeader 23 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$226:	; Parameter 23 text 6
x51355:	mov [bp + 29], bp	; 3: 137 110 29
x51358:	add word [bp + 29], 8	; 4: 131 70 29 8

strtol_test$227:	; address £temporary2390 pointer
x51362:	mov si, bp	; 2: 137 238
x51364:	add si, 21	; 3: 131 198 21

strtol_test$228:	; Parameter 23 £temporary2390 8
x51367:	mov [bp + 31], si	; 3: 137 118 31

strtol_test$229:	; Parameter 23 base 10
x51370:	mov ax, [bp + 6]	; 3: 139 70 6
x51373:	mov [bp + 33], ax	; 3: 137 70 33

strtol_test$230:	; Call 23 strtol 0
x51376:	mov word [bp + 23], strtol_test$231	; 5: 199 70 23 190 200
x51381:	mov [bp + 25], bp	; 3: 137 110 25
x51384:	add bp, 23	; 3: 131 197 23
x51387:	jmp strtol	; 3: 233 60 7

strtol_test$231:	; PostCall 23

strtol_test$232:	; GetReturnValue £temporary2391

strtol_test$233:	; Assign value £temporary2391
x51390:	mov [bp + 23], ebx	; 4: 102 137 94 23

strtol_test$234:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$235:	; Parameter 27 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x51394:	mov word [bp + 33], @5539$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 33 8 207

strtol_test$236:	; Parameter 27 text 8
x51399:	mov [bp + 35], bp	; 3: 137 110 35
x51402:	add word [bp + 35], 8	; 4: 131 70 35 8

strtol_test$237:	; Parameter 27 value 10
x51406:	mov eax, [bp + 23]	; 4: 102 139 70 23
x51410:	mov [bp + 37], eax	; 4: 102 137 70 37

strtol_test$238:	; Parameter 27 pointer 14
x51414:	mov ax, [bp + 21]	; 3: 139 70 21
x51417:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$239:	; Parameter 27 base 16
x51420:	mov ax, [bp + 6]	; 3: 139 70 6
x51423:	mov [bp + 43], ax	; 3: 137 70 43

strtol_test$240:	; Call 27 printf 0
x51426:	mov word [bp + 27], strtol_test$241	; 5: 199 70 27 245 200
x51431:	mov [bp + 29], bp	; 3: 137 110 29
x51434:	add bp, 27	; 3: 131 197 27
x51437:	mov di, bp	; 2: 137 239
x51439:	add di, 10	; 3: 131 199 10
x51442:	jmp printf	; 3: 233 15 68

strtol_test$241:	; PostCall 27

strtol_test$242:	; Assign base 9
x51445:	mov word [bp + 6], 9	; 5: 199 70 6 9 0

strtol_test$243:	; Assign text[0] 32
x51450:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$244:	; Assign text[1] 32
x51454:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$245:	; Assign text[2] 32
x51458:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$246:	; Assign text[3] 43
x51462:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtol_test$247:	; Assign text[4] 49
x51466:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$248:	; Assign text[5] 50
x51470:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$249:	; Assign text[6] 51
x51474:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$250:	; Assign text[7] 97
x51478:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$251:	; Assign text[8] 98
x51482:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$252:	; Assign text[9] 99
x51486:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$253:	; Assign text[10] 0
x51490:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$254:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$255:	; Parameter 21 text 6
x51494:	mov [bp + 27], bp	; 3: 137 110 27
x51497:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$256:	; address £temporary2404 pointer
x51501:	mov si, bp	; 2: 137 238
x51503:	add si, 19	; 3: 131 198 19

strtol_test$257:	; Parameter 21 £temporary2404 8
x51506:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$258:	; Parameter 21 base 10
x51509:	mov ax, [bp + 6]	; 3: 139 70 6
x51512:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$259:	; Call 21 strtol 0
x51515:	mov word [bp + 21], strtol_test$260	; 5: 199 70 21 73 201
x51520:	mov [bp + 23], bp	; 3: 137 110 23
x51523:	add bp, 21	; 3: 131 197 21
x51526:	jmp strtol	; 3: 233 177 6

strtol_test$260:	; PostCall 21

strtol_test$261:	; GetReturnValue £temporary2405

strtol_test$262:	; Assign value £temporary2405
x51529:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$263:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$264:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x51533:	mov word [bp + 31], @5583$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 30 207

strtol_test$265:	; Parameter 25 text 8
x51538:	mov [bp + 33], bp	; 3: 137 110 33
x51541:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$266:	; Parameter 25 value 10
x51545:	mov eax, [bp + 21]	; 4: 102 139 70 21
x51549:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$267:	; Parameter 25 pointer 14
x51553:	mov ax, [bp + 19]	; 3: 139 70 19
x51556:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$268:	; Parameter 25 base 16
x51559:	mov ax, [bp + 6]	; 3: 139 70 6
x51562:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$269:	; Call 25 printf 0
x51565:	mov word [bp + 25], strtol_test$270	; 5: 199 70 25 128 201
x51570:	mov [bp + 27], bp	; 3: 137 110 27
x51573:	add bp, 25	; 3: 131 197 25
x51576:	mov di, bp	; 2: 137 239
x51578:	add di, 10	; 3: 131 199 10
x51581:	jmp printf	; 3: 233 132 67

strtol_test$270:	; PostCall 25

strtol_test$271:	; Assign base 10
x51584:	mov word [bp + 6], 10	; 5: 199 70 6 10 0

strtol_test$272:	; Assign text[0] 32
x51589:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$273:	; Assign text[1] 32
x51593:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$274:	; Assign text[2] 32
x51597:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$275:	; Assign text[3] 43
x51601:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtol_test$276:	; Assign text[4] 49
x51605:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$277:	; Assign text[5] 50
x51609:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$278:	; Assign text[6] 51
x51613:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$279:	; Assign text[7] 97
x51617:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$280:	; Assign text[8] 98
x51621:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$281:	; Assign text[9] 99
x51625:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$282:	; Assign text[10] 0
x51629:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$283:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$284:	; Parameter 21 text 6
x51633:	mov [bp + 27], bp	; 3: 137 110 27
x51636:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$285:	; address £temporary2418 pointer
x51640:	mov si, bp	; 2: 137 238
x51642:	add si, 19	; 3: 131 198 19

strtol_test$286:	; Parameter 21 £temporary2418 8
x51645:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$287:	; Parameter 21 base 10
x51648:	mov ax, [bp + 6]	; 3: 139 70 6
x51651:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$288:	; Call 21 strtol 0
x51654:	mov word [bp + 21], strtol_test$289	; 5: 199 70 21 212 201
x51659:	mov [bp + 23], bp	; 3: 137 110 23
x51662:	add bp, 21	; 3: 131 197 21
x51665:	jmp strtol	; 3: 233 38 6

strtol_test$289:	; PostCall 21

strtol_test$290:	; GetReturnValue £temporary2419

strtol_test$291:	; Assign value £temporary2419
x51668:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$292:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$293:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x51672:	mov word [bp + 31], @5627$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 52 207

strtol_test$294:	; Parameter 25 text 8
x51677:	mov [bp + 33], bp	; 3: 137 110 33
x51680:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$295:	; Parameter 25 value 10
x51684:	mov eax, [bp + 21]	; 4: 102 139 70 21
x51688:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$296:	; Parameter 25 pointer 14
x51692:	mov ax, [bp + 19]	; 3: 139 70 19
x51695:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$297:	; Parameter 25 base 16
x51698:	mov ax, [bp + 6]	; 3: 139 70 6
x51701:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$298:	; Call 25 printf 0
x51704:	mov word [bp + 25], strtol_test$299	; 5: 199 70 25 11 202
x51709:	mov [bp + 27], bp	; 3: 137 110 27
x51712:	add bp, 25	; 3: 131 197 25
x51715:	mov di, bp	; 2: 137 239
x51717:	add di, 10	; 3: 131 199 10
x51720:	jmp printf	; 3: 233 249 66

strtol_test$299:	; PostCall 25

strtol_test$300:	; Assign base 11
x51723:	mov word [bp + 6], 11	; 5: 199 70 6 11 0

strtol_test$301:	; Assign text[0] 32
x51728:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$302:	; Assign text[1] 32
x51732:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$303:	; Assign text[2] 32
x51736:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$304:	; Assign text[3] 43
x51740:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtol_test$305:	; Assign text[4] 49
x51744:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$306:	; Assign text[5] 50
x51748:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$307:	; Assign text[6] 51
x51752:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$308:	; Assign text[7] 97
x51756:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$309:	; Assign text[8] 98
x51760:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$310:	; Assign text[9] 99
x51764:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$311:	; Assign text[10] 0
x51768:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$312:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$313:	; Parameter 21 text 6
x51772:	mov [bp + 27], bp	; 3: 137 110 27
x51775:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$314:	; address £temporary2432 pointer
x51779:	mov si, bp	; 2: 137 238
x51781:	add si, 19	; 3: 131 198 19

strtol_test$315:	; Parameter 21 £temporary2432 8
x51784:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$316:	; Parameter 21 base 10
x51787:	mov ax, [bp + 6]	; 3: 139 70 6
x51790:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$317:	; Call 21 strtol 0
x51793:	mov word [bp + 21], strtol_test$318	; 5: 199 70 21 95 202
x51798:	mov [bp + 23], bp	; 3: 137 110 23
x51801:	add bp, 21	; 3: 131 197 21
x51804:	jmp strtol	; 3: 233 155 5

strtol_test$318:	; PostCall 21

strtol_test$319:	; GetReturnValue £temporary2433

strtol_test$320:	; Assign value £temporary2433
x51807:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$321:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$322:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x51811:	mov word [bp + 31], @5671$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 74 207

strtol_test$323:	; Parameter 25 text 8
x51816:	mov [bp + 33], bp	; 3: 137 110 33
x51819:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$324:	; Parameter 25 value 10
x51823:	mov eax, [bp + 21]	; 4: 102 139 70 21
x51827:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$325:	; Parameter 25 pointer 14
x51831:	mov ax, [bp + 19]	; 3: 139 70 19
x51834:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$326:	; Parameter 25 base 16
x51837:	mov ax, [bp + 6]	; 3: 139 70 6
x51840:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$327:	; Call 25 printf 0
x51843:	mov word [bp + 25], strtol_test$328	; 5: 199 70 25 150 202
x51848:	mov [bp + 27], bp	; 3: 137 110 27
x51851:	add bp, 25	; 3: 131 197 25
x51854:	mov di, bp	; 2: 137 239
x51856:	add di, 10	; 3: 131 199 10
x51859:	jmp printf	; 3: 233 110 66

strtol_test$328:	; PostCall 25

strtol_test$329:	; Assign base 12
x51862:	mov word [bp + 6], 12	; 5: 199 70 6 12 0

strtol_test$330:	; Assign text[0] 32
x51867:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$331:	; Assign text[1] 32
x51871:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$332:	; Assign text[2] 32
x51875:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$333:	; Assign text[3] 43
x51879:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtol_test$334:	; Assign text[4] 49
x51883:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$335:	; Assign text[5] 50
x51887:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$336:	; Assign text[6] 51
x51891:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$337:	; Assign text[7] 65
x51895:	mov byte [bp + 15], 65	; 4: 198 70 15 65

strtol_test$338:	; Assign text[8] 66
x51899:	mov byte [bp + 16], 66	; 4: 198 70 16 66

strtol_test$339:	; Assign text[9] 67
x51903:	mov byte [bp + 17], 67	; 4: 198 70 17 67

strtol_test$340:	; Assign text[10] 0
x51907:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$341:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$342:	; Parameter 21 text 6
x51911:	mov [bp + 27], bp	; 3: 137 110 27
x51914:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$343:	; address £temporary2446 pointer
x51918:	mov si, bp	; 2: 137 238
x51920:	add si, 19	; 3: 131 198 19

strtol_test$344:	; Parameter 21 £temporary2446 8
x51923:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$345:	; Parameter 21 base 10
x51926:	mov ax, [bp + 6]	; 3: 139 70 6
x51929:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$346:	; Call 21 strtol 0
x51932:	mov word [bp + 21], strtol_test$347	; 5: 199 70 21 234 202
x51937:	mov [bp + 23], bp	; 3: 137 110 23
x51940:	add bp, 21	; 3: 131 197 21
x51943:	jmp strtol	; 3: 233 16 5

strtol_test$347:	; PostCall 21

strtol_test$348:	; GetReturnValue £temporary2447

strtol_test$349:	; Assign value £temporary2447
x51946:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$350:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$351:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x51950:	mov word [bp + 31], @5715$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 96 207

strtol_test$352:	; Parameter 25 text 8
x51955:	mov [bp + 33], bp	; 3: 137 110 33
x51958:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$353:	; Parameter 25 value 10
x51962:	mov eax, [bp + 21]	; 4: 102 139 70 21
x51966:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$354:	; Parameter 25 pointer 14
x51970:	mov ax, [bp + 19]	; 3: 139 70 19
x51973:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$355:	; Parameter 25 base 16
x51976:	mov ax, [bp + 6]	; 3: 139 70 6
x51979:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$356:	; Call 25 printf 0
x51982:	mov word [bp + 25], strtol_test$357	; 5: 199 70 25 33 203
x51987:	mov [bp + 27], bp	; 3: 137 110 27
x51990:	add bp, 25	; 3: 131 197 25
x51993:	mov di, bp	; 2: 137 239
x51995:	add di, 10	; 3: 131 199 10
x51998:	jmp printf	; 3: 233 227 65

strtol_test$357:	; PostCall 25

strtol_test$358:	; Assign base 13
x52001:	mov word [bp + 6], 13	; 5: 199 70 6 13 0

strtol_test$359:	; Assign text[0] 32
x52006:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$360:	; Assign text[1] 32
x52010:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$361:	; Assign text[2] 32
x52014:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$362:	; Assign text[3] 43
x52018:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtol_test$363:	; Assign text[4] 49
x52022:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$364:	; Assign text[5] 50
x52026:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$365:	; Assign text[6] 51
x52030:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$366:	; Assign text[7] 97
x52034:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$367:	; Assign text[8] 98
x52038:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$368:	; Assign text[9] 99
x52042:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$369:	; Assign text[10] 0
x52046:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$370:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$371:	; Parameter 21 text 6
x52050:	mov [bp + 27], bp	; 3: 137 110 27
x52053:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$372:	; address £temporary2460 pointer
x52057:	mov si, bp	; 2: 137 238
x52059:	add si, 19	; 3: 131 198 19

strtol_test$373:	; Parameter 21 £temporary2460 8
x52062:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$374:	; Parameter 21 base 10
x52065:	mov ax, [bp + 6]	; 3: 139 70 6
x52068:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$375:	; Call 21 strtol 0
x52071:	mov word [bp + 21], strtol_test$376	; 5: 199 70 21 117 203
x52076:	mov [bp + 23], bp	; 3: 137 110 23
x52079:	add bp, 21	; 3: 131 197 21
x52082:	jmp strtol	; 3: 233 133 4

strtol_test$376:	; PostCall 21

strtol_test$377:	; GetReturnValue £temporary2461

strtol_test$378:	; Assign value £temporary2461
x52085:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$379:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$380:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x52089:	mov word [bp + 31], @5759$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 118 207

strtol_test$381:	; Parameter 25 text 8
x52094:	mov [bp + 33], bp	; 3: 137 110 33
x52097:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$382:	; Parameter 25 value 10
x52101:	mov eax, [bp + 21]	; 4: 102 139 70 21
x52105:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$383:	; Parameter 25 pointer 14
x52109:	mov ax, [bp + 19]	; 3: 139 70 19
x52112:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$384:	; Parameter 25 base 16
x52115:	mov ax, [bp + 6]	; 3: 139 70 6
x52118:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$385:	; Call 25 printf 0
x52121:	mov word [bp + 25], strtol_test$386	; 5: 199 70 25 172 203
x52126:	mov [bp + 27], bp	; 3: 137 110 27
x52129:	add bp, 25	; 3: 131 197 25
x52132:	mov di, bp	; 2: 137 239
x52134:	add di, 10	; 3: 131 199 10
x52137:	jmp printf	; 3: 233 88 65

strtol_test$386:	; PostCall 25

strtol_test$387:	; Assign base 9
x52140:	mov word [bp + 6], 9	; 5: 199 70 6 9 0

strtol_test$388:	; Assign text[0] 32
x52145:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$389:	; Assign text[1] 32
x52149:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$390:	; Assign text[2] 32
x52153:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$391:	; Assign text[3] 45
x52157:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtol_test$392:	; Assign text[4] 49
x52161:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$393:	; Assign text[5] 50
x52165:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$394:	; Assign text[6] 51
x52169:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$395:	; Assign text[7] 97
x52173:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$396:	; Assign text[8] 98
x52177:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$397:	; Assign text[9] 99
x52181:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$398:	; Assign text[10] 0
x52185:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$399:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$400:	; Parameter 21 text 6
x52189:	mov [bp + 27], bp	; 3: 137 110 27
x52192:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$401:	; address £temporary2474 pointer
x52196:	mov si, bp	; 2: 137 238
x52198:	add si, 19	; 3: 131 198 19

strtol_test$402:	; Parameter 21 £temporary2474 8
x52201:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$403:	; Parameter 21 base 10
x52204:	mov ax, [bp + 6]	; 3: 139 70 6
x52207:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$404:	; Call 21 strtol 0
x52210:	mov word [bp + 21], strtol_test$405	; 5: 199 70 21 0 204
x52215:	mov [bp + 23], bp	; 3: 137 110 23
x52218:	add bp, 21	; 3: 131 197 21
x52221:	jmp strtol	; 3: 233 250 3

strtol_test$405:	; PostCall 21

strtol_test$406:	; GetReturnValue £temporary2475

strtol_test$407:	; Assign value £temporary2475
x52224:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$408:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$409:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x52228:	mov word [bp + 31], @5803$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 140 207

strtol_test$410:	; Parameter 25 text 8
x52233:	mov [bp + 33], bp	; 3: 137 110 33
x52236:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$411:	; Parameter 25 value 10
x52240:	mov eax, [bp + 21]	; 4: 102 139 70 21
x52244:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$412:	; Parameter 25 pointer 14
x52248:	mov ax, [bp + 19]	; 3: 139 70 19
x52251:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$413:	; Parameter 25 base 16
x52254:	mov ax, [bp + 6]	; 3: 139 70 6
x52257:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$414:	; Call 25 printf 0
x52260:	mov word [bp + 25], strtol_test$415	; 5: 199 70 25 55 204
x52265:	mov [bp + 27], bp	; 3: 137 110 27
x52268:	add bp, 25	; 3: 131 197 25
x52271:	mov di, bp	; 2: 137 239
x52273:	add di, 10	; 3: 131 199 10
x52276:	jmp printf	; 3: 233 205 64

strtol_test$415:	; PostCall 25

strtol_test$416:	; Assign base 10
x52279:	mov word [bp + 6], 10	; 5: 199 70 6 10 0

strtol_test$417:	; Assign text[0] 32
x52284:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$418:	; Assign text[1] 32
x52288:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$419:	; Assign text[2] 32
x52292:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$420:	; Assign text[3] 45
x52296:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtol_test$421:	; Assign text[4] 49
x52300:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$422:	; Assign text[5] 50
x52304:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$423:	; Assign text[6] 51
x52308:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$424:	; Assign text[7] 97
x52312:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$425:	; Assign text[8] 98
x52316:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$426:	; Assign text[9] 99
x52320:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$427:	; Assign text[10] 0
x52324:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$428:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$429:	; Parameter 21 text 6
x52328:	mov [bp + 27], bp	; 3: 137 110 27
x52331:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$430:	; address £temporary2488 pointer
x52335:	mov si, bp	; 2: 137 238
x52337:	add si, 19	; 3: 131 198 19

strtol_test$431:	; Parameter 21 £temporary2488 8
x52340:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$432:	; Parameter 21 base 10
x52343:	mov ax, [bp + 6]	; 3: 139 70 6
x52346:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$433:	; Call 21 strtol 0
x52349:	mov word [bp + 21], strtol_test$434	; 5: 199 70 21 139 204
x52354:	mov [bp + 23], bp	; 3: 137 110 23
x52357:	add bp, 21	; 3: 131 197 21
x52360:	jmp strtol	; 3: 233 111 3

strtol_test$434:	; PostCall 21

strtol_test$435:	; GetReturnValue £temporary2489

strtol_test$436:	; Assign value £temporary2489
x52363:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$437:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$438:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x52367:	mov word [bp + 31], @5847$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 162 207

strtol_test$439:	; Parameter 25 text 8
x52372:	mov [bp + 33], bp	; 3: 137 110 33
x52375:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$440:	; Parameter 25 value 10
x52379:	mov eax, [bp + 21]	; 4: 102 139 70 21
x52383:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$441:	; Parameter 25 pointer 14
x52387:	mov ax, [bp + 19]	; 3: 139 70 19
x52390:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$442:	; Parameter 25 base 16
x52393:	mov ax, [bp + 6]	; 3: 139 70 6
x52396:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$443:	; Call 25 printf 0
x52399:	mov word [bp + 25], strtol_test$444	; 5: 199 70 25 194 204
x52404:	mov [bp + 27], bp	; 3: 137 110 27
x52407:	add bp, 25	; 3: 131 197 25
x52410:	mov di, bp	; 2: 137 239
x52412:	add di, 10	; 3: 131 199 10
x52415:	jmp printf	; 3: 233 66 64

strtol_test$444:	; PostCall 25

strtol_test$445:	; Assign base 11
x52418:	mov word [bp + 6], 11	; 5: 199 70 6 11 0

strtol_test$446:	; Assign text[0] 32
x52423:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$447:	; Assign text[1] 32
x52427:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$448:	; Assign text[2] 32
x52431:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$449:	; Assign text[3] 45
x52435:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtol_test$450:	; Assign text[4] 49
x52439:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$451:	; Assign text[5] 50
x52443:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$452:	; Assign text[6] 51
x52447:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$453:	; Assign text[7] 97
x52451:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$454:	; Assign text[8] 98
x52455:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$455:	; Assign text[9] 99
x52459:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$456:	; Assign text[10] 0
x52463:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$457:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$458:	; Parameter 21 text 6
x52467:	mov [bp + 27], bp	; 3: 137 110 27
x52470:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$459:	; address £temporary2502 pointer
x52474:	mov si, bp	; 2: 137 238
x52476:	add si, 19	; 3: 131 198 19

strtol_test$460:	; Parameter 21 £temporary2502 8
x52479:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$461:	; Parameter 21 base 10
x52482:	mov ax, [bp + 6]	; 3: 139 70 6
x52485:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$462:	; Call 21 strtol 0
x52488:	mov word [bp + 21], strtol_test$463	; 5: 199 70 21 22 205
x52493:	mov [bp + 23], bp	; 3: 137 110 23
x52496:	add bp, 21	; 3: 131 197 21
x52499:	jmp strtol	; 3: 233 228 2

strtol_test$463:	; PostCall 21

strtol_test$464:	; GetReturnValue £temporary2503

strtol_test$465:	; Assign value £temporary2503
x52502:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$466:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$467:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x52506:	mov word [bp + 31], @5891$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 184 207

strtol_test$468:	; Parameter 25 text 8
x52511:	mov [bp + 33], bp	; 3: 137 110 33
x52514:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$469:	; Parameter 25 value 10
x52518:	mov eax, [bp + 21]	; 4: 102 139 70 21
x52522:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$470:	; Parameter 25 pointer 14
x52526:	mov ax, [bp + 19]	; 3: 139 70 19
x52529:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$471:	; Parameter 25 base 16
x52532:	mov ax, [bp + 6]	; 3: 139 70 6
x52535:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$472:	; Call 25 printf 0
x52538:	mov word [bp + 25], strtol_test$473	; 5: 199 70 25 77 205
x52543:	mov [bp + 27], bp	; 3: 137 110 27
x52546:	add bp, 25	; 3: 131 197 25
x52549:	mov di, bp	; 2: 137 239
x52551:	add di, 10	; 3: 131 199 10
x52554:	jmp printf	; 3: 233 183 63

strtol_test$473:	; PostCall 25

strtol_test$474:	; Assign base 12
x52557:	mov word [bp + 6], 12	; 5: 199 70 6 12 0

strtol_test$475:	; Assign text[0] 32
x52562:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$476:	; Assign text[1] 32
x52566:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$477:	; Assign text[2] 32
x52570:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$478:	; Assign text[3] 45
x52574:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtol_test$479:	; Assign text[4] 49
x52578:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$480:	; Assign text[5] 50
x52582:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$481:	; Assign text[6] 51
x52586:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$482:	; Assign text[7] 65
x52590:	mov byte [bp + 15], 65	; 4: 198 70 15 65

strtol_test$483:	; Assign text[8] 66
x52594:	mov byte [bp + 16], 66	; 4: 198 70 16 66

strtol_test$484:	; Assign text[9] 67
x52598:	mov byte [bp + 17], 67	; 4: 198 70 17 67

strtol_test$485:	; Assign text[10] 0
x52602:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$486:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$487:	; Parameter 21 text 6
x52606:	mov [bp + 27], bp	; 3: 137 110 27
x52609:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$488:	; address £temporary2516 pointer
x52613:	mov si, bp	; 2: 137 238
x52615:	add si, 19	; 3: 131 198 19

strtol_test$489:	; Parameter 21 £temporary2516 8
x52618:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$490:	; Parameter 21 base 10
x52621:	mov ax, [bp + 6]	; 3: 139 70 6
x52624:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$491:	; Call 21 strtol 0
x52627:	mov word [bp + 21], strtol_test$492	; 5: 199 70 21 161 205
x52632:	mov [bp + 23], bp	; 3: 137 110 23
x52635:	add bp, 21	; 3: 131 197 21
x52638:	jmp strtol	; 3: 233 89 2

strtol_test$492:	; PostCall 21

strtol_test$493:	; GetReturnValue £temporary2517

strtol_test$494:	; Assign value £temporary2517
x52641:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$495:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$496:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x52645:	mov word [bp + 31], @5935$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 206 207

strtol_test$497:	; Parameter 25 text 8
x52650:	mov [bp + 33], bp	; 3: 137 110 33
x52653:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$498:	; Parameter 25 value 10
x52657:	mov eax, [bp + 21]	; 4: 102 139 70 21
x52661:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$499:	; Parameter 25 pointer 14
x52665:	mov ax, [bp + 19]	; 3: 139 70 19
x52668:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$500:	; Parameter 25 base 16
x52671:	mov ax, [bp + 6]	; 3: 139 70 6
x52674:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$501:	; Call 25 printf 0
x52677:	mov word [bp + 25], strtol_test$502	; 5: 199 70 25 216 205
x52682:	mov [bp + 27], bp	; 3: 137 110 27
x52685:	add bp, 25	; 3: 131 197 25
x52688:	mov di, bp	; 2: 137 239
x52690:	add di, 10	; 3: 131 199 10
x52693:	jmp printf	; 3: 233 44 63

strtol_test$502:	; PostCall 25

strtol_test$503:	; Assign base 13
x52696:	mov word [bp + 6], 13	; 5: 199 70 6 13 0

strtol_test$504:	; Assign text[0] 32
x52701:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$505:	; Assign text[1] 32
x52705:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$506:	; Assign text[2] 32
x52709:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$507:	; Assign text[3] 45
x52713:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtol_test$508:	; Assign text[4] 49
x52717:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$509:	; Assign text[5] 50
x52721:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$510:	; Assign text[6] 51
x52725:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$511:	; Assign text[7] 97
x52729:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$512:	; Assign text[8] 98
x52733:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$513:	; Assign text[9] 99
x52737:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$514:	; Assign text[10] 0
x52741:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$515:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$516:	; Parameter 21 text 6
x52745:	mov [bp + 27], bp	; 3: 137 110 27
x52748:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$517:	; address £temporary2530 pointer
x52752:	mov si, bp	; 2: 137 238
x52754:	add si, 19	; 3: 131 198 19

strtol_test$518:	; Parameter 21 £temporary2530 8
x52757:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$519:	; Parameter 21 base 10
x52760:	mov ax, [bp + 6]	; 3: 139 70 6
x52763:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$520:	; Call 21 strtol 0
x52766:	mov word [bp + 21], strtol_test$521	; 5: 199 70 21 44 206
x52771:	mov [bp + 23], bp	; 3: 137 110 23
x52774:	add bp, 21	; 3: 131 197 21
x52777:	jmp strtol	; 3: 233 206 1

strtol_test$521:	; PostCall 21

strtol_test$522:	; GetReturnValue £temporary2531

strtol_test$523:	; Assign value £temporary2531
x52780:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$524:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$525:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x52784:	mov word [bp + 31], @5979$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 228 207

strtol_test$526:	; Parameter 25 text 8
x52789:	mov [bp + 33], bp	; 3: 137 110 33
x52792:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$527:	; Parameter 25 value 10
x52796:	mov eax, [bp + 21]	; 4: 102 139 70 21
x52800:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$528:	; Parameter 25 pointer 14
x52804:	mov ax, [bp + 19]	; 3: 139 70 19
x52807:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$529:	; Parameter 25 base 16
x52810:	mov ax, [bp + 6]	; 3: 139 70 6
x52813:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$530:	; Call 25 printf 0
x52816:	mov word [bp + 25], strtol_test$531	; 5: 199 70 25 99 206
x52821:	mov [bp + 27], bp	; 3: 137 110 27
x52824:	add bp, 25	; 3: 131 197 25
x52827:	mov di, bp	; 2: 137 239
x52829:	add di, 10	; 3: 131 199 10
x52832:	jmp printf	; 3: 233 161 62

strtol_test$531:	; PostCall 25

strtol_test$532:	; Return 0
x52835:	mov ax, [bp]	; 3: 139 70 0
x52838:	mov di, [bp + 4]	; 3: 139 126 4
x52841:	mov bp, [bp + 2]	; 3: 139 110 2
x52844:	jmp ax	; 2: 255 224

strtol_test$533:	; FunctionEnd strtol_test

@5201$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x52846:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5248$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x52868:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5298$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x52890:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5348$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x52912:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5392$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x52934:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5439$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x52956:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5489$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x52978:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5539$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x53000:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5583$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x53022:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5627$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x53044:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5671$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x53066:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5715$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x53088:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5759$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x53110:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5803$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x53132:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5847$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x53154:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5891$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x53176:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5935$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x53198:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5979$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x53220:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

strtol:	; Assign g_inStatus 1
x53242:	mov word [g_inStatus], 1	; 6: 199 6 202 95 1 0

strtol$1:	; Assign g_inDevice s
x53248:	mov ax, [bp + 6]	; 3: 139 70 6
x53251:	mov [g_inDevice], ax	; 3: 163 204 95

strtol$2:	; Assign g_inChars 0
x53254:	mov word [g_inChars], 0	; 6: 199 6 239 100 0 0

strtol$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol$4:	; Parameter 12 base 6
x53260:	mov ax, [bp + 10]	; 3: 139 70 10
x53263:	mov [bp + 18], ax	; 3: 137 70 18

strtol$5:	; Call 12 scanLongInt 0
x53266:	mov word [bp + 12], strtol$6	; 5: 199 70 12 32 208
x53271:	mov [bp + 14], bp	; 3: 137 110 14
x53274:	add bp, 12	; 3: 131 197 12
x53277:	jmp scanLongInt	; 3: 233 196 151

strtol$6:	; PostCall 12

strtol$7:	; GetReturnValue £temporary2246

strtol$8:	; Assign value £temporary2246
x53280:	mov [bp + 12], ebx	; 4: 102 137 94 12

strtol$9:	; Equal 12 endp 0
x53284:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x53288:	je strtol$12	; 2: 116 12

strtol$10:	; Deref £temporary2248 -> endp endp 0
x53290:	mov si, [bp + 8]	; 3: 139 118 8

strtol$11:	; BinaryAdd £temporary2248 -> endp s g_inChars
x53293:	mov ax, [bp + 6]	; 3: 139 70 6
x53296:	add ax, [g_inChars]	; 4: 3 6 239 100
x53300:	mov [si], ax	; 2: 137 4

strtol$12:	; SetReturnValue value
x53302:	mov ebx, [bp + 12]	; 4: 102 139 94 12

strtol$13:	; Return value
x53306:	mov ax, [bp]	; 3: 139 70 0
x53309:	mov di, [bp + 4]	; 3: 139 126 4
x53312:	mov bp, [bp + 2]	; 3: 139 110 2
x53315:	jmp ax	; 2: 255 224

strtol$14:	; FunctionEnd strtol

strtoul_test:	; Assign base 0
x53317:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtoul_test$1:	; Assign text[0] 32
x53322:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$2:	; Assign text[1] 32
x53326:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$3:	; Assign text[2] 32
x53330:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$4:	; Assign text[3] 43
x53334:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtoul_test$5:	; Assign text[4] 49
x53338:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$6:	; Assign text[5] 50
x53342:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$7:	; Assign text[6] 51
x53346:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$8:	; Assign text[7] 97
x53350:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$9:	; Assign text[8] 98
x53354:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$10:	; Assign text[9] 99
x53358:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$11:	; Assign text[10] 0
x53362:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$12:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$13:	; Parameter 21 text 6
x53366:	mov [bp + 27], bp	; 3: 137 110 27
x53369:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$14:	; address £temporary2706 pointer
x53373:	mov si, bp	; 2: 137 238
x53375:	add si, 19	; 3: 131 198 19

strtoul_test$15:	; Parameter 21 £temporary2706 8
x53378:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$16:	; Parameter 21 base 10
x53381:	mov ax, [bp + 6]	; 3: 139 70 6
x53384:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$17:	; Call 21 strtoul 0
x53387:	mov word [bp + 21], strtoul_test$18	; 5: 199 70 21 153 208
x53392:	mov [bp + 23], bp	; 3: 137 110 23
x53395:	add bp, 21	; 3: 131 197 21
x53398:	jmp strtoul	; 3: 233 49 11

strtoul_test$18:	; PostCall 21

strtoul_test$19:	; GetReturnValue £temporary2707

strtoul_test$20:	; Assign value £temporary2707
x53401:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$21:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$22:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x53405:	mov word [bp + 31], @6186$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 62 218

strtoul_test$23:	; Parameter 25 text 8
x53410:	mov [bp + 33], bp	; 3: 137 110 33
x53413:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$24:	; Parameter 25 value 10
x53417:	mov eax, [bp + 21]	; 4: 102 139 70 21
x53421:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$25:	; Parameter 25 pointer 14
x53425:	mov ax, [bp + 19]	; 3: 139 70 19
x53428:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$26:	; Parameter 25 base 16
x53431:	mov ax, [bp + 6]	; 3: 139 70 6
x53434:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$27:	; Call 25 printf 0
x53437:	mov word [bp + 25], strtoul_test$28	; 5: 199 70 25 208 208
x53442:	mov [bp + 27], bp	; 3: 137 110 27
x53445:	add bp, 25	; 3: 131 197 25
x53448:	mov di, bp	; 2: 137 239
x53450:	add di, 10	; 3: 131 199 10
x53453:	jmp printf	; 3: 233 52 60

strtoul_test$28:	; PostCall 25

strtoul_test$29:	; Assign base 0
x53456:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtoul_test$30:	; Assign text[0] 32
x53461:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$31:	; Assign text[1] 32
x53465:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$32:	; Assign text[2] 32
x53469:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$33:	; Assign text[3] 43
x53473:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtoul_test$34:	; Assign text[4] 48
x53477:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtoul_test$35:	; Assign text[5] 49
x53481:	mov byte [bp + 13], 49	; 4: 198 70 13 49

strtoul_test$36:	; Assign text[6] 50
x53485:	mov byte [bp + 14], 50	; 4: 198 70 14 50

strtoul_test$37:	; Assign text[7] 51
x53489:	mov byte [bp + 15], 51	; 4: 198 70 15 51

strtoul_test$38:	; Assign text[8] 97
x53493:	mov byte [bp + 16], 97	; 4: 198 70 16 97

strtoul_test$39:	; Assign text[9] 98
x53497:	mov byte [bp + 17], 98	; 4: 198 70 17 98

strtoul_test$40:	; Assign text[10] 99
x53501:	mov byte [bp + 18], 99	; 4: 198 70 18 99

strtoul_test$41:	; Assign text[11] 0
x53505:	mov byte [bp + 19], 0	; 4: 198 70 19 0

strtoul_test$42:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$43:	; Parameter 22 text 6
x53509:	mov [bp + 28], bp	; 3: 137 110 28
x53512:	add word [bp + 28], 8	; 4: 131 70 28 8

strtoul_test$44:	; address £temporary2721 pointer
x53516:	mov si, bp	; 2: 137 238
x53518:	add si, 20	; 3: 131 198 20

strtoul_test$45:	; Parameter 22 £temporary2721 8
x53521:	mov [bp + 30], si	; 3: 137 118 30

strtoul_test$46:	; Parameter 22 base 10
x53524:	mov ax, [bp + 6]	; 3: 139 70 6
x53527:	mov [bp + 32], ax	; 3: 137 70 32

strtoul_test$47:	; Call 22 strtoul 0
x53530:	mov word [bp + 22], strtoul_test$48	; 5: 199 70 22 40 209
x53535:	mov [bp + 24], bp	; 3: 137 110 24
x53538:	add bp, 22	; 3: 131 197 22
x53541:	jmp strtoul	; 3: 233 162 10

strtoul_test$48:	; PostCall 22

strtoul_test$49:	; GetReturnValue £temporary2722

strtoul_test$50:	; Assign value £temporary2722
x53544:	mov [bp + 22], ebx	; 4: 102 137 94 22

strtoul_test$51:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$52:	; Parameter 26 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x53548:	mov word [bp + 32], @6233$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 32 84 218

strtoul_test$53:	; Parameter 26 text 8
x53553:	mov [bp + 34], bp	; 3: 137 110 34
x53556:	add word [bp + 34], 8	; 4: 131 70 34 8

strtoul_test$54:	; Parameter 26 value 10
x53560:	mov eax, [bp + 22]	; 4: 102 139 70 22
x53564:	mov [bp + 36], eax	; 4: 102 137 70 36

strtoul_test$55:	; Parameter 26 pointer 14
x53568:	mov ax, [bp + 20]	; 3: 139 70 20
x53571:	mov [bp + 40], ax	; 3: 137 70 40

strtoul_test$56:	; Parameter 26 base 16
x53574:	mov ax, [bp + 6]	; 3: 139 70 6
x53577:	mov [bp + 42], ax	; 3: 137 70 42

strtoul_test$57:	; Call 26 printf 0
x53580:	mov word [bp + 26], strtoul_test$58	; 5: 199 70 26 95 209
x53585:	mov [bp + 28], bp	; 3: 137 110 28
x53588:	add bp, 26	; 3: 131 197 26
x53591:	mov di, bp	; 2: 137 239
x53593:	add di, 10	; 3: 131 199 10
x53596:	jmp printf	; 3: 233 165 59

strtoul_test$58:	; PostCall 26

strtoul_test$59:	; Assign base 0
x53599:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtoul_test$60:	; Assign text[0] 32
x53604:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$61:	; Assign text[1] 32
x53608:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$62:	; Assign text[2] 32
x53612:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$63:	; Assign text[3] 43
x53616:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtoul_test$64:	; Assign text[4] 48
x53620:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtoul_test$65:	; Assign text[5] 120
x53624:	mov byte [bp + 13], 120	; 4: 198 70 13 120

strtoul_test$66:	; Assign text[6] 49
x53628:	mov byte [bp + 14], 49	; 4: 198 70 14 49

strtoul_test$67:	; Assign text[7] 50
x53632:	mov byte [bp + 15], 50	; 4: 198 70 15 50

strtoul_test$68:	; Assign text[8] 51
x53636:	mov byte [bp + 16], 51	; 4: 198 70 16 51

strtoul_test$69:	; Assign text[9] 65
x53640:	mov byte [bp + 17], 65	; 4: 198 70 17 65

strtoul_test$70:	; Assign text[10] 66
x53644:	mov byte [bp + 18], 66	; 4: 198 70 18 66

strtoul_test$71:	; Assign text[11] 67
x53648:	mov byte [bp + 19], 67	; 4: 198 70 19 67

strtoul_test$72:	; Assign text[12] 0
x53652:	mov byte [bp + 20], 0	; 4: 198 70 20 0

strtoul_test$73:	; CallHeader 23 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$74:	; Parameter 23 text 6
x53656:	mov [bp + 29], bp	; 3: 137 110 29
x53659:	add word [bp + 29], 8	; 4: 131 70 29 8

strtoul_test$75:	; address £temporary2737 pointer
x53663:	mov si, bp	; 2: 137 238
x53665:	add si, 21	; 3: 131 198 21

strtoul_test$76:	; Parameter 23 £temporary2737 8
x53668:	mov [bp + 31], si	; 3: 137 118 31

strtoul_test$77:	; Parameter 23 base 10
x53671:	mov ax, [bp + 6]	; 3: 139 70 6
x53674:	mov [bp + 33], ax	; 3: 137 70 33

strtoul_test$78:	; Call 23 strtoul 0
x53677:	mov word [bp + 23], strtoul_test$79	; 5: 199 70 23 187 209
x53682:	mov [bp + 25], bp	; 3: 137 110 25
x53685:	add bp, 23	; 3: 131 197 23
x53688:	jmp strtoul	; 3: 233 15 10

strtoul_test$79:	; PostCall 23

strtoul_test$80:	; GetReturnValue £temporary2738

strtoul_test$81:	; Assign value £temporary2738
x53691:	mov [bp + 23], ebx	; 4: 102 137 94 23

strtoul_test$82:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$83:	; Parameter 27 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x53695:	mov word [bp + 33], @6283$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 33 106 218

strtoul_test$84:	; Parameter 27 text 8
x53700:	mov [bp + 35], bp	; 3: 137 110 35
x53703:	add word [bp + 35], 8	; 4: 131 70 35 8

strtoul_test$85:	; Parameter 27 value 10
x53707:	mov eax, [bp + 23]	; 4: 102 139 70 23
x53711:	mov [bp + 37], eax	; 4: 102 137 70 37

strtoul_test$86:	; Parameter 27 pointer 14
x53715:	mov ax, [bp + 21]	; 3: 139 70 21
x53718:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$87:	; Parameter 27 base 16
x53721:	mov ax, [bp + 6]	; 3: 139 70 6
x53724:	mov [bp + 43], ax	; 3: 137 70 43

strtoul_test$88:	; Call 27 printf 0
x53727:	mov word [bp + 27], strtoul_test$89	; 5: 199 70 27 242 209
x53732:	mov [bp + 29], bp	; 3: 137 110 29
x53735:	add bp, 27	; 3: 131 197 27
x53738:	mov di, bp	; 2: 137 239
x53740:	add di, 10	; 3: 131 199 10
x53743:	jmp printf	; 3: 233 18 59

strtoul_test$89:	; PostCall 27

strtoul_test$90:	; Assign base 0
x53746:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtoul_test$91:	; Assign text[0] 32
x53751:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$92:	; Assign text[1] 32
x53755:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$93:	; Assign text[2] 32
x53759:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$94:	; Assign text[3] 43
x53763:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtoul_test$95:	; Assign text[4] 48
x53767:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtoul_test$96:	; Assign text[5] 88
x53771:	mov byte [bp + 13], 88	; 4: 198 70 13 88

strtoul_test$97:	; Assign text[6] 49
x53775:	mov byte [bp + 14], 49	; 4: 198 70 14 49

strtoul_test$98:	; Assign text[7] 50
x53779:	mov byte [bp + 15], 50	; 4: 198 70 15 50

strtoul_test$99:	; Assign text[8] 51
x53783:	mov byte [bp + 16], 51	; 4: 198 70 16 51

strtoul_test$100:	; Assign text[9] 97
x53787:	mov byte [bp + 17], 97	; 4: 198 70 17 97

strtoul_test$101:	; Assign text[10] 98
x53791:	mov byte [bp + 18], 98	; 4: 198 70 18 98

strtoul_test$102:	; Assign text[11] 99
x53795:	mov byte [bp + 19], 99	; 4: 198 70 19 99

strtoul_test$103:	; Assign text[12] 0
x53799:	mov byte [bp + 20], 0	; 4: 198 70 20 0

strtoul_test$104:	; CallHeader 23 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$105:	; Parameter 23 text 6
x53803:	mov [bp + 29], bp	; 3: 137 110 29
x53806:	add word [bp + 29], 8	; 4: 131 70 29 8

strtoul_test$106:	; address £temporary2753 pointer
x53810:	mov si, bp	; 2: 137 238
x53812:	add si, 21	; 3: 131 198 21

strtoul_test$107:	; Parameter 23 £temporary2753 8
x53815:	mov [bp + 31], si	; 3: 137 118 31

strtoul_test$108:	; Parameter 23 base 10
x53818:	mov ax, [bp + 6]	; 3: 139 70 6
x53821:	mov [bp + 33], ax	; 3: 137 70 33

strtoul_test$109:	; Call 23 strtoul 0
x53824:	mov word [bp + 23], strtoul_test$110	; 5: 199 70 23 78 210
x53829:	mov [bp + 25], bp	; 3: 137 110 25
x53832:	add bp, 23	; 3: 131 197 23
x53835:	jmp strtoul	; 3: 233 124 9

strtoul_test$110:	; PostCall 23

strtoul_test$111:	; GetReturnValue £temporary2754

strtoul_test$112:	; Assign value £temporary2754
x53838:	mov [bp + 23], ebx	; 4: 102 137 94 23

strtoul_test$113:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$114:	; Parameter 27 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x53842:	mov word [bp + 33], @6333$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 33 128 218

strtoul_test$115:	; Parameter 27 text 8
x53847:	mov [bp + 35], bp	; 3: 137 110 35
x53850:	add word [bp + 35], 8	; 4: 131 70 35 8

strtoul_test$116:	; Parameter 27 value 10
x53854:	mov eax, [bp + 23]	; 4: 102 139 70 23
x53858:	mov [bp + 37], eax	; 4: 102 137 70 37

strtoul_test$117:	; Parameter 27 pointer 14
x53862:	mov ax, [bp + 21]	; 3: 139 70 21
x53865:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$118:	; Parameter 27 base 16
x53868:	mov ax, [bp + 6]	; 3: 139 70 6
x53871:	mov [bp + 43], ax	; 3: 137 70 43

strtoul_test$119:	; Call 27 printf 0
x53874:	mov word [bp + 27], strtoul_test$120	; 5: 199 70 27 133 210
x53879:	mov [bp + 29], bp	; 3: 137 110 29
x53882:	add bp, 27	; 3: 131 197 27
x53885:	mov di, bp	; 2: 137 239
x53887:	add di, 10	; 3: 131 199 10
x53890:	jmp printf	; 3: 233 127 58

strtoul_test$120:	; PostCall 27

strtoul_test$121:	; Assign base 0
x53893:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtoul_test$122:	; Assign text[0] 32
x53898:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$123:	; Assign text[1] 32
x53902:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$124:	; Assign text[2] 32
x53906:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$125:	; Assign text[3] 45
x53910:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtoul_test$126:	; Assign text[4] 49
x53914:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$127:	; Assign text[5] 50
x53918:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$128:	; Assign text[6] 51
x53922:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$129:	; Assign text[7] 97
x53926:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$130:	; Assign text[8] 98
x53930:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$131:	; Assign text[9] 99
x53934:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$132:	; Assign text[10] 0
x53938:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$133:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$134:	; Parameter 21 text 6
x53942:	mov [bp + 27], bp	; 3: 137 110 27
x53945:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$135:	; address £temporary2767 pointer
x53949:	mov si, bp	; 2: 137 238
x53951:	add si, 19	; 3: 131 198 19

strtoul_test$136:	; Parameter 21 £temporary2767 8
x53954:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$137:	; Parameter 21 base 10
x53957:	mov ax, [bp + 6]	; 3: 139 70 6
x53960:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$138:	; Call 21 strtoul 0
x53963:	mov word [bp + 21], strtoul_test$139	; 5: 199 70 21 217 210
x53968:	mov [bp + 23], bp	; 3: 137 110 23
x53971:	add bp, 21	; 3: 131 197 21
x53974:	jmp strtoul	; 3: 233 241 8

strtoul_test$139:	; PostCall 21

strtoul_test$140:	; GetReturnValue £temporary2768

strtoul_test$141:	; Assign value £temporary2768
x53977:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$142:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$143:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x53981:	mov word [bp + 31], @6377$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 150 218

strtoul_test$144:	; Parameter 25 text 8
x53986:	mov [bp + 33], bp	; 3: 137 110 33
x53989:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$145:	; Parameter 25 value 10
x53993:	mov eax, [bp + 21]	; 4: 102 139 70 21
x53997:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$146:	; Parameter 25 pointer 14
x54001:	mov ax, [bp + 19]	; 3: 139 70 19
x54004:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$147:	; Parameter 25 base 16
x54007:	mov ax, [bp + 6]	; 3: 139 70 6
x54010:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$148:	; Call 25 printf 0
x54013:	mov word [bp + 25], strtoul_test$149	; 5: 199 70 25 16 211
x54018:	mov [bp + 27], bp	; 3: 137 110 27
x54021:	add bp, 25	; 3: 131 197 25
x54024:	mov di, bp	; 2: 137 239
x54026:	add di, 10	; 3: 131 199 10
x54029:	jmp printf	; 3: 233 244 57

strtoul_test$149:	; PostCall 25

strtoul_test$150:	; Assign base 0
x54032:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtoul_test$151:	; Assign text[0] 32
x54037:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$152:	; Assign text[1] 32
x54041:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$153:	; Assign text[2] 32
x54045:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$154:	; Assign text[3] 45
x54049:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtoul_test$155:	; Assign text[4] 48
x54053:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtoul_test$156:	; Assign text[5] 49
x54057:	mov byte [bp + 13], 49	; 4: 198 70 13 49

strtoul_test$157:	; Assign text[6] 50
x54061:	mov byte [bp + 14], 50	; 4: 198 70 14 50

strtoul_test$158:	; Assign text[7] 51
x54065:	mov byte [bp + 15], 51	; 4: 198 70 15 51

strtoul_test$159:	; Assign text[8] 97
x54069:	mov byte [bp + 16], 97	; 4: 198 70 16 97

strtoul_test$160:	; Assign text[9] 98
x54073:	mov byte [bp + 17], 98	; 4: 198 70 17 98

strtoul_test$161:	; Assign text[10] 99
x54077:	mov byte [bp + 18], 99	; 4: 198 70 18 99

strtoul_test$162:	; Assign text[11] 0
x54081:	mov byte [bp + 19], 0	; 4: 198 70 19 0

strtoul_test$163:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$164:	; Parameter 22 text 6
x54085:	mov [bp + 28], bp	; 3: 137 110 28
x54088:	add word [bp + 28], 8	; 4: 131 70 28 8

strtoul_test$165:	; address £temporary2782 pointer
x54092:	mov si, bp	; 2: 137 238
x54094:	add si, 20	; 3: 131 198 20

strtoul_test$166:	; Parameter 22 £temporary2782 8
x54097:	mov [bp + 30], si	; 3: 137 118 30

strtoul_test$167:	; Parameter 22 base 10
x54100:	mov ax, [bp + 6]	; 3: 139 70 6
x54103:	mov [bp + 32], ax	; 3: 137 70 32

strtoul_test$168:	; Call 22 strtoul 0
x54106:	mov word [bp + 22], strtoul_test$169	; 5: 199 70 22 104 211
x54111:	mov [bp + 24], bp	; 3: 137 110 24
x54114:	add bp, 22	; 3: 131 197 22
x54117:	jmp strtoul	; 3: 233 98 8

strtoul_test$169:	; PostCall 22

strtoul_test$170:	; GetReturnValue £temporary2783

strtoul_test$171:	; Assign value £temporary2783
x54120:	mov [bp + 22], ebx	; 4: 102 137 94 22

strtoul_test$172:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$173:	; Parameter 26 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x54124:	mov word [bp + 32], @6424$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 32 172 218

strtoul_test$174:	; Parameter 26 text 8
x54129:	mov [bp + 34], bp	; 3: 137 110 34
x54132:	add word [bp + 34], 8	; 4: 131 70 34 8

strtoul_test$175:	; Parameter 26 value 10
x54136:	mov eax, [bp + 22]	; 4: 102 139 70 22
x54140:	mov [bp + 36], eax	; 4: 102 137 70 36

strtoul_test$176:	; Parameter 26 pointer 14
x54144:	mov ax, [bp + 20]	; 3: 139 70 20
x54147:	mov [bp + 40], ax	; 3: 137 70 40

strtoul_test$177:	; Parameter 26 base 16
x54150:	mov ax, [bp + 6]	; 3: 139 70 6
x54153:	mov [bp + 42], ax	; 3: 137 70 42

strtoul_test$178:	; Call 26 printf 0
x54156:	mov word [bp + 26], strtoul_test$179	; 5: 199 70 26 159 211
x54161:	mov [bp + 28], bp	; 3: 137 110 28
x54164:	add bp, 26	; 3: 131 197 26
x54167:	mov di, bp	; 2: 137 239
x54169:	add di, 10	; 3: 131 199 10
x54172:	jmp printf	; 3: 233 101 57

strtoul_test$179:	; PostCall 26

strtoul_test$180:	; Assign base 0
x54175:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtoul_test$181:	; Assign text[0] 32
x54180:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$182:	; Assign text[1] 32
x54184:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$183:	; Assign text[2] 32
x54188:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$184:	; Assign text[3] 45
x54192:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtoul_test$185:	; Assign text[4] 48
x54196:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtoul_test$186:	; Assign text[5] 120
x54200:	mov byte [bp + 13], 120	; 4: 198 70 13 120

strtoul_test$187:	; Assign text[6] 49
x54204:	mov byte [bp + 14], 49	; 4: 198 70 14 49

strtoul_test$188:	; Assign text[7] 50
x54208:	mov byte [bp + 15], 50	; 4: 198 70 15 50

strtoul_test$189:	; Assign text[8] 51
x54212:	mov byte [bp + 16], 51	; 4: 198 70 16 51

strtoul_test$190:	; Assign text[9] 65
x54216:	mov byte [bp + 17], 65	; 4: 198 70 17 65

strtoul_test$191:	; Assign text[10] 66
x54220:	mov byte [bp + 18], 66	; 4: 198 70 18 66

strtoul_test$192:	; Assign text[11] 67
x54224:	mov byte [bp + 19], 67	; 4: 198 70 19 67

strtoul_test$193:	; Assign text[12] 0
x54228:	mov byte [bp + 20], 0	; 4: 198 70 20 0

strtoul_test$194:	; CallHeader 23 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$195:	; Parameter 23 text 6
x54232:	mov [bp + 29], bp	; 3: 137 110 29
x54235:	add word [bp + 29], 8	; 4: 131 70 29 8

strtoul_test$196:	; address £temporary2798 pointer
x54239:	mov si, bp	; 2: 137 238
x54241:	add si, 21	; 3: 131 198 21

strtoul_test$197:	; Parameter 23 £temporary2798 8
x54244:	mov [bp + 31], si	; 3: 137 118 31

strtoul_test$198:	; Parameter 23 base 10
x54247:	mov ax, [bp + 6]	; 3: 139 70 6
x54250:	mov [bp + 33], ax	; 3: 137 70 33

strtoul_test$199:	; Call 23 strtoul 0
x54253:	mov word [bp + 23], strtoul_test$200	; 5: 199 70 23 251 211
x54258:	mov [bp + 25], bp	; 3: 137 110 25
x54261:	add bp, 23	; 3: 131 197 23
x54264:	jmp strtoul	; 3: 233 207 7

strtoul_test$200:	; PostCall 23

strtoul_test$201:	; GetReturnValue £temporary2799

strtoul_test$202:	; Assign value £temporary2799
x54267:	mov [bp + 23], ebx	; 4: 102 137 94 23

strtoul_test$203:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$204:	; Parameter 27 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x54271:	mov word [bp + 33], @6474$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 33 194 218

strtoul_test$205:	; Parameter 27 text 8
x54276:	mov [bp + 35], bp	; 3: 137 110 35
x54279:	add word [bp + 35], 8	; 4: 131 70 35 8

strtoul_test$206:	; Parameter 27 value 10
x54283:	mov eax, [bp + 23]	; 4: 102 139 70 23
x54287:	mov [bp + 37], eax	; 4: 102 137 70 37

strtoul_test$207:	; Parameter 27 pointer 14
x54291:	mov ax, [bp + 21]	; 3: 139 70 21
x54294:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$208:	; Parameter 27 base 16
x54297:	mov ax, [bp + 6]	; 3: 139 70 6
x54300:	mov [bp + 43], ax	; 3: 137 70 43

strtoul_test$209:	; Call 27 printf 0
x54303:	mov word [bp + 27], strtoul_test$210	; 5: 199 70 27 50 212
x54308:	mov [bp + 29], bp	; 3: 137 110 29
x54311:	add bp, 27	; 3: 131 197 27
x54314:	mov di, bp	; 2: 137 239
x54316:	add di, 10	; 3: 131 199 10
x54319:	jmp printf	; 3: 233 210 56

strtoul_test$210:	; PostCall 27

strtoul_test$211:	; Assign base 0
x54322:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtoul_test$212:	; Assign text[0] 32
x54327:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$213:	; Assign text[1] 32
x54331:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$214:	; Assign text[2] 32
x54335:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$215:	; Assign text[3] 45
x54339:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtoul_test$216:	; Assign text[4] 48
x54343:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtoul_test$217:	; Assign text[5] 88
x54347:	mov byte [bp + 13], 88	; 4: 198 70 13 88

strtoul_test$218:	; Assign text[6] 49
x54351:	mov byte [bp + 14], 49	; 4: 198 70 14 49

strtoul_test$219:	; Assign text[7] 50
x54355:	mov byte [bp + 15], 50	; 4: 198 70 15 50

strtoul_test$220:	; Assign text[8] 51
x54359:	mov byte [bp + 16], 51	; 4: 198 70 16 51

strtoul_test$221:	; Assign text[9] 97
x54363:	mov byte [bp + 17], 97	; 4: 198 70 17 97

strtoul_test$222:	; Assign text[10] 98
x54367:	mov byte [bp + 18], 98	; 4: 198 70 18 98

strtoul_test$223:	; Assign text[11] 99
x54371:	mov byte [bp + 19], 99	; 4: 198 70 19 99

strtoul_test$224:	; Assign text[12] 0
x54375:	mov byte [bp + 20], 0	; 4: 198 70 20 0

strtoul_test$225:	; CallHeader 23 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$226:	; Parameter 23 text 6
x54379:	mov [bp + 29], bp	; 3: 137 110 29
x54382:	add word [bp + 29], 8	; 4: 131 70 29 8

strtoul_test$227:	; address £temporary2814 pointer
x54386:	mov si, bp	; 2: 137 238
x54388:	add si, 21	; 3: 131 198 21

strtoul_test$228:	; Parameter 23 £temporary2814 8
x54391:	mov [bp + 31], si	; 3: 137 118 31

strtoul_test$229:	; Parameter 23 base 10
x54394:	mov ax, [bp + 6]	; 3: 139 70 6
x54397:	mov [bp + 33], ax	; 3: 137 70 33

strtoul_test$230:	; Call 23 strtoul 0
x54400:	mov word [bp + 23], strtoul_test$231	; 5: 199 70 23 142 212
x54405:	mov [bp + 25], bp	; 3: 137 110 25
x54408:	add bp, 23	; 3: 131 197 23
x54411:	jmp strtoul	; 3: 233 60 7

strtoul_test$231:	; PostCall 23

strtoul_test$232:	; GetReturnValue £temporary2815

strtoul_test$233:	; Assign value £temporary2815
x54414:	mov [bp + 23], ebx	; 4: 102 137 94 23

strtoul_test$234:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$235:	; Parameter 27 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x54418:	mov word [bp + 33], @6524$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 33 216 218

strtoul_test$236:	; Parameter 27 text 8
x54423:	mov [bp + 35], bp	; 3: 137 110 35
x54426:	add word [bp + 35], 8	; 4: 131 70 35 8

strtoul_test$237:	; Parameter 27 value 10
x54430:	mov eax, [bp + 23]	; 4: 102 139 70 23
x54434:	mov [bp + 37], eax	; 4: 102 137 70 37

strtoul_test$238:	; Parameter 27 pointer 14
x54438:	mov ax, [bp + 21]	; 3: 139 70 21
x54441:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$239:	; Parameter 27 base 16
x54444:	mov ax, [bp + 6]	; 3: 139 70 6
x54447:	mov [bp + 43], ax	; 3: 137 70 43

strtoul_test$240:	; Call 27 printf 0
x54450:	mov word [bp + 27], strtoul_test$241	; 5: 199 70 27 197 212
x54455:	mov [bp + 29], bp	; 3: 137 110 29
x54458:	add bp, 27	; 3: 131 197 27
x54461:	mov di, bp	; 2: 137 239
x54463:	add di, 10	; 3: 131 199 10
x54466:	jmp printf	; 3: 233 63 56

strtoul_test$241:	; PostCall 27

strtoul_test$242:	; Assign base 9
x54469:	mov word [bp + 6], 9	; 5: 199 70 6 9 0

strtoul_test$243:	; Assign text[0] 32
x54474:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$244:	; Assign text[1] 32
x54478:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$245:	; Assign text[2] 32
x54482:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$246:	; Assign text[3] 43
x54486:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtoul_test$247:	; Assign text[4] 49
x54490:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$248:	; Assign text[5] 50
x54494:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$249:	; Assign text[6] 51
x54498:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$250:	; Assign text[7] 97
x54502:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$251:	; Assign text[8] 98
x54506:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$252:	; Assign text[9] 99
x54510:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$253:	; Assign text[10] 0
x54514:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$254:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$255:	; Parameter 21 text 6
x54518:	mov [bp + 27], bp	; 3: 137 110 27
x54521:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$256:	; address £temporary2828 pointer
x54525:	mov si, bp	; 2: 137 238
x54527:	add si, 19	; 3: 131 198 19

strtoul_test$257:	; Parameter 21 £temporary2828 8
x54530:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$258:	; Parameter 21 base 10
x54533:	mov ax, [bp + 6]	; 3: 139 70 6
x54536:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$259:	; Call 21 strtoul 0
x54539:	mov word [bp + 21], strtoul_test$260	; 5: 199 70 21 25 213
x54544:	mov [bp + 23], bp	; 3: 137 110 23
x54547:	add bp, 21	; 3: 131 197 21
x54550:	jmp strtoul	; 3: 233 177 6

strtoul_test$260:	; PostCall 21

strtoul_test$261:	; GetReturnValue £temporary2829

strtoul_test$262:	; Assign value £temporary2829
x54553:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$263:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$264:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x54557:	mov word [bp + 31], @6568$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 238 218

strtoul_test$265:	; Parameter 25 text 8
x54562:	mov [bp + 33], bp	; 3: 137 110 33
x54565:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$266:	; Parameter 25 value 10
x54569:	mov eax, [bp + 21]	; 4: 102 139 70 21
x54573:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$267:	; Parameter 25 pointer 14
x54577:	mov ax, [bp + 19]	; 3: 139 70 19
x54580:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$268:	; Parameter 25 base 16
x54583:	mov ax, [bp + 6]	; 3: 139 70 6
x54586:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$269:	; Call 25 printf 0
x54589:	mov word [bp + 25], strtoul_test$270	; 5: 199 70 25 80 213
x54594:	mov [bp + 27], bp	; 3: 137 110 27
x54597:	add bp, 25	; 3: 131 197 25
x54600:	mov di, bp	; 2: 137 239
x54602:	add di, 10	; 3: 131 199 10
x54605:	jmp printf	; 3: 233 180 55

strtoul_test$270:	; PostCall 25

strtoul_test$271:	; Assign base 10
x54608:	mov word [bp + 6], 10	; 5: 199 70 6 10 0

strtoul_test$272:	; Assign text[0] 32
x54613:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$273:	; Assign text[1] 32
x54617:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$274:	; Assign text[2] 32
x54621:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$275:	; Assign text[3] 43
x54625:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtoul_test$276:	; Assign text[4] 49
x54629:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$277:	; Assign text[5] 50
x54633:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$278:	; Assign text[6] 51
x54637:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$279:	; Assign text[7] 97
x54641:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$280:	; Assign text[8] 98
x54645:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$281:	; Assign text[9] 99
x54649:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$282:	; Assign text[10] 0
x54653:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$283:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$284:	; Parameter 21 text 6
x54657:	mov [bp + 27], bp	; 3: 137 110 27
x54660:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$285:	; address £temporary2842 pointer
x54664:	mov si, bp	; 2: 137 238
x54666:	add si, 19	; 3: 131 198 19

strtoul_test$286:	; Parameter 21 £temporary2842 8
x54669:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$287:	; Parameter 21 base 10
x54672:	mov ax, [bp + 6]	; 3: 139 70 6
x54675:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$288:	; Call 21 strtoul 0
x54678:	mov word [bp + 21], strtoul_test$289	; 5: 199 70 21 164 213
x54683:	mov [bp + 23], bp	; 3: 137 110 23
x54686:	add bp, 21	; 3: 131 197 21
x54689:	jmp strtoul	; 3: 233 38 6

strtoul_test$289:	; PostCall 21

strtoul_test$290:	; GetReturnValue £temporary2843

strtoul_test$291:	; Assign value £temporary2843
x54692:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$292:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$293:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x54696:	mov word [bp + 31], @6612$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 4 219

strtoul_test$294:	; Parameter 25 text 8
x54701:	mov [bp + 33], bp	; 3: 137 110 33
x54704:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$295:	; Parameter 25 value 10
x54708:	mov eax, [bp + 21]	; 4: 102 139 70 21
x54712:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$296:	; Parameter 25 pointer 14
x54716:	mov ax, [bp + 19]	; 3: 139 70 19
x54719:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$297:	; Parameter 25 base 16
x54722:	mov ax, [bp + 6]	; 3: 139 70 6
x54725:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$298:	; Call 25 printf 0
x54728:	mov word [bp + 25], strtoul_test$299	; 5: 199 70 25 219 213
x54733:	mov [bp + 27], bp	; 3: 137 110 27
x54736:	add bp, 25	; 3: 131 197 25
x54739:	mov di, bp	; 2: 137 239
x54741:	add di, 10	; 3: 131 199 10
x54744:	jmp printf	; 3: 233 41 55

strtoul_test$299:	; PostCall 25

strtoul_test$300:	; Assign base 11
x54747:	mov word [bp + 6], 11	; 5: 199 70 6 11 0

strtoul_test$301:	; Assign text[0] 32
x54752:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$302:	; Assign text[1] 32
x54756:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$303:	; Assign text[2] 32
x54760:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$304:	; Assign text[3] 43
x54764:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtoul_test$305:	; Assign text[4] 49
x54768:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$306:	; Assign text[5] 50
x54772:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$307:	; Assign text[6] 51
x54776:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$308:	; Assign text[7] 97
x54780:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$309:	; Assign text[8] 98
x54784:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$310:	; Assign text[9] 99
x54788:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$311:	; Assign text[10] 0
x54792:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$312:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$313:	; Parameter 21 text 6
x54796:	mov [bp + 27], bp	; 3: 137 110 27
x54799:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$314:	; address £temporary2856 pointer
x54803:	mov si, bp	; 2: 137 238
x54805:	add si, 19	; 3: 131 198 19

strtoul_test$315:	; Parameter 21 £temporary2856 8
x54808:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$316:	; Parameter 21 base 10
x54811:	mov ax, [bp + 6]	; 3: 139 70 6
x54814:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$317:	; Call 21 strtoul 0
x54817:	mov word [bp + 21], strtoul_test$318	; 5: 199 70 21 47 214
x54822:	mov [bp + 23], bp	; 3: 137 110 23
x54825:	add bp, 21	; 3: 131 197 21
x54828:	jmp strtoul	; 3: 233 155 5

strtoul_test$318:	; PostCall 21

strtoul_test$319:	; GetReturnValue £temporary2857

strtoul_test$320:	; Assign value £temporary2857
x54831:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$321:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$322:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x54835:	mov word [bp + 31], @6656$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 26 219

strtoul_test$323:	; Parameter 25 text 8
x54840:	mov [bp + 33], bp	; 3: 137 110 33
x54843:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$324:	; Parameter 25 value 10
x54847:	mov eax, [bp + 21]	; 4: 102 139 70 21
x54851:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$325:	; Parameter 25 pointer 14
x54855:	mov ax, [bp + 19]	; 3: 139 70 19
x54858:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$326:	; Parameter 25 base 16
x54861:	mov ax, [bp + 6]	; 3: 139 70 6
x54864:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$327:	; Call 25 printf 0
x54867:	mov word [bp + 25], strtoul_test$328	; 5: 199 70 25 102 214
x54872:	mov [bp + 27], bp	; 3: 137 110 27
x54875:	add bp, 25	; 3: 131 197 25
x54878:	mov di, bp	; 2: 137 239
x54880:	add di, 10	; 3: 131 199 10
x54883:	jmp printf	; 3: 233 158 54

strtoul_test$328:	; PostCall 25

strtoul_test$329:	; Assign base 12
x54886:	mov word [bp + 6], 12	; 5: 199 70 6 12 0

strtoul_test$330:	; Assign text[0] 32
x54891:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$331:	; Assign text[1] 32
x54895:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$332:	; Assign text[2] 32
x54899:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$333:	; Assign text[3] 43
x54903:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtoul_test$334:	; Assign text[4] 49
x54907:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$335:	; Assign text[5] 50
x54911:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$336:	; Assign text[6] 51
x54915:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$337:	; Assign text[7] 65
x54919:	mov byte [bp + 15], 65	; 4: 198 70 15 65

strtoul_test$338:	; Assign text[8] 66
x54923:	mov byte [bp + 16], 66	; 4: 198 70 16 66

strtoul_test$339:	; Assign text[9] 67
x54927:	mov byte [bp + 17], 67	; 4: 198 70 17 67

strtoul_test$340:	; Assign text[10] 0
x54931:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$341:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$342:	; Parameter 21 text 6
x54935:	mov [bp + 27], bp	; 3: 137 110 27
x54938:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$343:	; address £temporary2870 pointer
x54942:	mov si, bp	; 2: 137 238
x54944:	add si, 19	; 3: 131 198 19

strtoul_test$344:	; Parameter 21 £temporary2870 8
x54947:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$345:	; Parameter 21 base 10
x54950:	mov ax, [bp + 6]	; 3: 139 70 6
x54953:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$346:	; Call 21 strtoul 0
x54956:	mov word [bp + 21], strtoul_test$347	; 5: 199 70 21 186 214
x54961:	mov [bp + 23], bp	; 3: 137 110 23
x54964:	add bp, 21	; 3: 131 197 21
x54967:	jmp strtoul	; 3: 233 16 5

strtoul_test$347:	; PostCall 21

strtoul_test$348:	; GetReturnValue £temporary2871

strtoul_test$349:	; Assign value £temporary2871
x54970:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$350:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$351:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x54974:	mov word [bp + 31], @6700$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 48 219

strtoul_test$352:	; Parameter 25 text 8
x54979:	mov [bp + 33], bp	; 3: 137 110 33
x54982:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$353:	; Parameter 25 value 10
x54986:	mov eax, [bp + 21]	; 4: 102 139 70 21
x54990:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$354:	; Parameter 25 pointer 14
x54994:	mov ax, [bp + 19]	; 3: 139 70 19
x54997:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$355:	; Parameter 25 base 16
x55000:	mov ax, [bp + 6]	; 3: 139 70 6
x55003:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$356:	; Call 25 printf 0
x55006:	mov word [bp + 25], strtoul_test$357	; 5: 199 70 25 241 214
x55011:	mov [bp + 27], bp	; 3: 137 110 27
x55014:	add bp, 25	; 3: 131 197 25
x55017:	mov di, bp	; 2: 137 239
x55019:	add di, 10	; 3: 131 199 10
x55022:	jmp printf	; 3: 233 19 54

strtoul_test$357:	; PostCall 25

strtoul_test$358:	; Assign base 13
x55025:	mov word [bp + 6], 13	; 5: 199 70 6 13 0

strtoul_test$359:	; Assign text[0] 32
x55030:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$360:	; Assign text[1] 32
x55034:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$361:	; Assign text[2] 32
x55038:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$362:	; Assign text[3] 43
x55042:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtoul_test$363:	; Assign text[4] 49
x55046:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$364:	; Assign text[5] 50
x55050:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$365:	; Assign text[6] 51
x55054:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$366:	; Assign text[7] 97
x55058:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$367:	; Assign text[8] 98
x55062:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$368:	; Assign text[9] 99
x55066:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$369:	; Assign text[10] 0
x55070:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$370:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$371:	; Parameter 21 text 6
x55074:	mov [bp + 27], bp	; 3: 137 110 27
x55077:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$372:	; address £temporary2884 pointer
x55081:	mov si, bp	; 2: 137 238
x55083:	add si, 19	; 3: 131 198 19

strtoul_test$373:	; Parameter 21 £temporary2884 8
x55086:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$374:	; Parameter 21 base 10
x55089:	mov ax, [bp + 6]	; 3: 139 70 6
x55092:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$375:	; Call 21 strtoul 0
x55095:	mov word [bp + 21], strtoul_test$376	; 5: 199 70 21 69 215
x55100:	mov [bp + 23], bp	; 3: 137 110 23
x55103:	add bp, 21	; 3: 131 197 21
x55106:	jmp strtoul	; 3: 233 133 4

strtoul_test$376:	; PostCall 21

strtoul_test$377:	; GetReturnValue £temporary2885

strtoul_test$378:	; Assign value £temporary2885
x55109:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$379:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$380:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x55113:	mov word [bp + 31], @6744$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 70 219

strtoul_test$381:	; Parameter 25 text 8
x55118:	mov [bp + 33], bp	; 3: 137 110 33
x55121:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$382:	; Parameter 25 value 10
x55125:	mov eax, [bp + 21]	; 4: 102 139 70 21
x55129:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$383:	; Parameter 25 pointer 14
x55133:	mov ax, [bp + 19]	; 3: 139 70 19
x55136:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$384:	; Parameter 25 base 16
x55139:	mov ax, [bp + 6]	; 3: 139 70 6
x55142:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$385:	; Call 25 printf 0
x55145:	mov word [bp + 25], strtoul_test$386	; 5: 199 70 25 124 215
x55150:	mov [bp + 27], bp	; 3: 137 110 27
x55153:	add bp, 25	; 3: 131 197 25
x55156:	mov di, bp	; 2: 137 239
x55158:	add di, 10	; 3: 131 199 10
x55161:	jmp printf	; 3: 233 136 53

strtoul_test$386:	; PostCall 25

strtoul_test$387:	; Assign base 9
x55164:	mov word [bp + 6], 9	; 5: 199 70 6 9 0

strtoul_test$388:	; Assign text[0] 32
x55169:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$389:	; Assign text[1] 32
x55173:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$390:	; Assign text[2] 32
x55177:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$391:	; Assign text[3] 45
x55181:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtoul_test$392:	; Assign text[4] 49
x55185:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$393:	; Assign text[5] 50
x55189:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$394:	; Assign text[6] 51
x55193:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$395:	; Assign text[7] 97
x55197:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$396:	; Assign text[8] 98
x55201:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$397:	; Assign text[9] 99
x55205:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$398:	; Assign text[10] 0
x55209:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$399:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$400:	; Parameter 21 text 6
x55213:	mov [bp + 27], bp	; 3: 137 110 27
x55216:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$401:	; address £temporary2898 pointer
x55220:	mov si, bp	; 2: 137 238
x55222:	add si, 19	; 3: 131 198 19

strtoul_test$402:	; Parameter 21 £temporary2898 8
x55225:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$403:	; Parameter 21 base 10
x55228:	mov ax, [bp + 6]	; 3: 139 70 6
x55231:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$404:	; Call 21 strtoul 0
x55234:	mov word [bp + 21], strtoul_test$405	; 5: 199 70 21 208 215
x55239:	mov [bp + 23], bp	; 3: 137 110 23
x55242:	add bp, 21	; 3: 131 197 21
x55245:	jmp strtoul	; 3: 233 250 3

strtoul_test$405:	; PostCall 21

strtoul_test$406:	; GetReturnValue £temporary2899

strtoul_test$407:	; Assign value £temporary2899
x55248:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$408:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$409:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x55252:	mov word [bp + 31], @6788$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 92 219

strtoul_test$410:	; Parameter 25 text 8
x55257:	mov [bp + 33], bp	; 3: 137 110 33
x55260:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$411:	; Parameter 25 value 10
x55264:	mov eax, [bp + 21]	; 4: 102 139 70 21
x55268:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$412:	; Parameter 25 pointer 14
x55272:	mov ax, [bp + 19]	; 3: 139 70 19
x55275:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$413:	; Parameter 25 base 16
x55278:	mov ax, [bp + 6]	; 3: 139 70 6
x55281:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$414:	; Call 25 printf 0
x55284:	mov word [bp + 25], strtoul_test$415	; 5: 199 70 25 7 216
x55289:	mov [bp + 27], bp	; 3: 137 110 27
x55292:	add bp, 25	; 3: 131 197 25
x55295:	mov di, bp	; 2: 137 239
x55297:	add di, 10	; 3: 131 199 10
x55300:	jmp printf	; 3: 233 253 52

strtoul_test$415:	; PostCall 25

strtoul_test$416:	; Assign base 10
x55303:	mov word [bp + 6], 10	; 5: 199 70 6 10 0

strtoul_test$417:	; Assign text[0] 32
x55308:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$418:	; Assign text[1] 32
x55312:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$419:	; Assign text[2] 32
x55316:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$420:	; Assign text[3] 45
x55320:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtoul_test$421:	; Assign text[4] 49
x55324:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$422:	; Assign text[5] 50
x55328:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$423:	; Assign text[6] 51
x55332:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$424:	; Assign text[7] 97
x55336:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$425:	; Assign text[8] 98
x55340:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$426:	; Assign text[9] 99
x55344:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$427:	; Assign text[10] 0
x55348:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$428:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$429:	; Parameter 21 text 6
x55352:	mov [bp + 27], bp	; 3: 137 110 27
x55355:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$430:	; address £temporary2912 pointer
x55359:	mov si, bp	; 2: 137 238
x55361:	add si, 19	; 3: 131 198 19

strtoul_test$431:	; Parameter 21 £temporary2912 8
x55364:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$432:	; Parameter 21 base 10
x55367:	mov ax, [bp + 6]	; 3: 139 70 6
x55370:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$433:	; Call 21 strtoul 0
x55373:	mov word [bp + 21], strtoul_test$434	; 5: 199 70 21 91 216
x55378:	mov [bp + 23], bp	; 3: 137 110 23
x55381:	add bp, 21	; 3: 131 197 21
x55384:	jmp strtoul	; 3: 233 111 3

strtoul_test$434:	; PostCall 21

strtoul_test$435:	; GetReturnValue £temporary2913

strtoul_test$436:	; Assign value £temporary2913
x55387:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$437:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$438:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x55391:	mov word [bp + 31], @6832$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 114 219

strtoul_test$439:	; Parameter 25 text 8
x55396:	mov [bp + 33], bp	; 3: 137 110 33
x55399:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$440:	; Parameter 25 value 10
x55403:	mov eax, [bp + 21]	; 4: 102 139 70 21
x55407:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$441:	; Parameter 25 pointer 14
x55411:	mov ax, [bp + 19]	; 3: 139 70 19
x55414:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$442:	; Parameter 25 base 16
x55417:	mov ax, [bp + 6]	; 3: 139 70 6
x55420:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$443:	; Call 25 printf 0
x55423:	mov word [bp + 25], strtoul_test$444	; 5: 199 70 25 146 216
x55428:	mov [bp + 27], bp	; 3: 137 110 27
x55431:	add bp, 25	; 3: 131 197 25
x55434:	mov di, bp	; 2: 137 239
x55436:	add di, 10	; 3: 131 199 10
x55439:	jmp printf	; 3: 233 114 52

strtoul_test$444:	; PostCall 25

strtoul_test$445:	; Assign base 11
x55442:	mov word [bp + 6], 11	; 5: 199 70 6 11 0

strtoul_test$446:	; Assign text[0] 32
x55447:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$447:	; Assign text[1] 32
x55451:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$448:	; Assign text[2] 32
x55455:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$449:	; Assign text[3] 45
x55459:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtoul_test$450:	; Assign text[4] 49
x55463:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$451:	; Assign text[5] 50
x55467:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$452:	; Assign text[6] 51
x55471:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$453:	; Assign text[7] 97
x55475:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$454:	; Assign text[8] 98
x55479:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$455:	; Assign text[9] 99
x55483:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$456:	; Assign text[10] 0
x55487:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$457:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$458:	; Parameter 21 text 6
x55491:	mov [bp + 27], bp	; 3: 137 110 27
x55494:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$459:	; address £temporary2926 pointer
x55498:	mov si, bp	; 2: 137 238
x55500:	add si, 19	; 3: 131 198 19

strtoul_test$460:	; Parameter 21 £temporary2926 8
x55503:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$461:	; Parameter 21 base 10
x55506:	mov ax, [bp + 6]	; 3: 139 70 6
x55509:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$462:	; Call 21 strtoul 0
x55512:	mov word [bp + 21], strtoul_test$463	; 5: 199 70 21 230 216
x55517:	mov [bp + 23], bp	; 3: 137 110 23
x55520:	add bp, 21	; 3: 131 197 21
x55523:	jmp strtoul	; 3: 233 228 2

strtoul_test$463:	; PostCall 21

strtoul_test$464:	; GetReturnValue £temporary2927

strtoul_test$465:	; Assign value £temporary2927
x55526:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$466:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$467:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x55530:	mov word [bp + 31], @6876$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 136 219

strtoul_test$468:	; Parameter 25 text 8
x55535:	mov [bp + 33], bp	; 3: 137 110 33
x55538:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$469:	; Parameter 25 value 10
x55542:	mov eax, [bp + 21]	; 4: 102 139 70 21
x55546:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$470:	; Parameter 25 pointer 14
x55550:	mov ax, [bp + 19]	; 3: 139 70 19
x55553:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$471:	; Parameter 25 base 16
x55556:	mov ax, [bp + 6]	; 3: 139 70 6
x55559:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$472:	; Call 25 printf 0
x55562:	mov word [bp + 25], strtoul_test$473	; 5: 199 70 25 29 217
x55567:	mov [bp + 27], bp	; 3: 137 110 27
x55570:	add bp, 25	; 3: 131 197 25
x55573:	mov di, bp	; 2: 137 239
x55575:	add di, 10	; 3: 131 199 10
x55578:	jmp printf	; 3: 233 231 51

strtoul_test$473:	; PostCall 25

strtoul_test$474:	; Assign base 12
x55581:	mov word [bp + 6], 12	; 5: 199 70 6 12 0

strtoul_test$475:	; Assign text[0] 32
x55586:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$476:	; Assign text[1] 32
x55590:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$477:	; Assign text[2] 32
x55594:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$478:	; Assign text[3] 45
x55598:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtoul_test$479:	; Assign text[4] 49
x55602:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$480:	; Assign text[5] 50
x55606:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$481:	; Assign text[6] 51
x55610:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$482:	; Assign text[7] 65
x55614:	mov byte [bp + 15], 65	; 4: 198 70 15 65

strtoul_test$483:	; Assign text[8] 66
x55618:	mov byte [bp + 16], 66	; 4: 198 70 16 66

strtoul_test$484:	; Assign text[9] 67
x55622:	mov byte [bp + 17], 67	; 4: 198 70 17 67

strtoul_test$485:	; Assign text[10] 0
x55626:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$486:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$487:	; Parameter 21 text 6
x55630:	mov [bp + 27], bp	; 3: 137 110 27
x55633:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$488:	; address £temporary2940 pointer
x55637:	mov si, bp	; 2: 137 238
x55639:	add si, 19	; 3: 131 198 19

strtoul_test$489:	; Parameter 21 £temporary2940 8
x55642:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$490:	; Parameter 21 base 10
x55645:	mov ax, [bp + 6]	; 3: 139 70 6
x55648:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$491:	; Call 21 strtoul 0
x55651:	mov word [bp + 21], strtoul_test$492	; 5: 199 70 21 113 217
x55656:	mov [bp + 23], bp	; 3: 137 110 23
x55659:	add bp, 21	; 3: 131 197 21
x55662:	jmp strtoul	; 3: 233 89 2

strtoul_test$492:	; PostCall 21

strtoul_test$493:	; GetReturnValue £temporary2941

strtoul_test$494:	; Assign value £temporary2941
x55665:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$495:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$496:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x55669:	mov word [bp + 31], @6920$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 158 219

strtoul_test$497:	; Parameter 25 text 8
x55674:	mov [bp + 33], bp	; 3: 137 110 33
x55677:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$498:	; Parameter 25 value 10
x55681:	mov eax, [bp + 21]	; 4: 102 139 70 21
x55685:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$499:	; Parameter 25 pointer 14
x55689:	mov ax, [bp + 19]	; 3: 139 70 19
x55692:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$500:	; Parameter 25 base 16
x55695:	mov ax, [bp + 6]	; 3: 139 70 6
x55698:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$501:	; Call 25 printf 0
x55701:	mov word [bp + 25], strtoul_test$502	; 5: 199 70 25 168 217
x55706:	mov [bp + 27], bp	; 3: 137 110 27
x55709:	add bp, 25	; 3: 131 197 25
x55712:	mov di, bp	; 2: 137 239
x55714:	add di, 10	; 3: 131 199 10
x55717:	jmp printf	; 3: 233 92 51

strtoul_test$502:	; PostCall 25

strtoul_test$503:	; Assign base 13
x55720:	mov word [bp + 6], 13	; 5: 199 70 6 13 0

strtoul_test$504:	; Assign text[0] 32
x55725:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$505:	; Assign text[1] 32
x55729:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$506:	; Assign text[2] 32
x55733:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$507:	; Assign text[3] 45
x55737:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtoul_test$508:	; Assign text[4] 49
x55741:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$509:	; Assign text[5] 50
x55745:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$510:	; Assign text[6] 51
x55749:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$511:	; Assign text[7] 97
x55753:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$512:	; Assign text[8] 98
x55757:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$513:	; Assign text[9] 99
x55761:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$514:	; Assign text[10] 0
x55765:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$515:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$516:	; Parameter 21 text 6
x55769:	mov [bp + 27], bp	; 3: 137 110 27
x55772:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$517:	; address £temporary2954 pointer
x55776:	mov si, bp	; 2: 137 238
x55778:	add si, 19	; 3: 131 198 19

strtoul_test$518:	; Parameter 21 £temporary2954 8
x55781:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$519:	; Parameter 21 base 10
x55784:	mov ax, [bp + 6]	; 3: 139 70 6
x55787:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$520:	; Call 21 strtoul 0
x55790:	mov word [bp + 21], strtoul_test$521	; 5: 199 70 21 252 217
x55795:	mov [bp + 23], bp	; 3: 137 110 23
x55798:	add bp, 21	; 3: 131 197 21
x55801:	jmp strtoul	; 3: 233 206 1

strtoul_test$521:	; PostCall 21

strtoul_test$522:	; GetReturnValue £temporary2955

strtoul_test$523:	; Assign value £temporary2955
x55804:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$524:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$525:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x55808:	mov word [bp + 31], @6964$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 180 219

strtoul_test$526:	; Parameter 25 text 8
x55813:	mov [bp + 33], bp	; 3: 137 110 33
x55816:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$527:	; Parameter 25 value 10
x55820:	mov eax, [bp + 21]	; 4: 102 139 70 21
x55824:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$528:	; Parameter 25 pointer 14
x55828:	mov ax, [bp + 19]	; 3: 139 70 19
x55831:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$529:	; Parameter 25 base 16
x55834:	mov ax, [bp + 6]	; 3: 139 70 6
x55837:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$530:	; Call 25 printf 0
x55840:	mov word [bp + 25], strtoul_test$531	; 5: 199 70 25 51 218
x55845:	mov [bp + 27], bp	; 3: 137 110 27
x55848:	add bp, 25	; 3: 131 197 25
x55851:	mov di, bp	; 2: 137 239
x55853:	add di, 10	; 3: 131 199 10
x55856:	jmp printf	; 3: 233 209 50

strtoul_test$531:	; PostCall 25

strtoul_test$532:	; Return 0
x55859:	mov ax, [bp]	; 3: 139 70 0
x55862:	mov di, [bp + 4]	; 3: 139 126 4
x55865:	mov bp, [bp + 2]	; 3: 139 110 2
x55868:	jmp ax	; 2: 255 224

strtoul_test$533:	; FunctionEnd strtoul_test

@6186$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x55870:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6233$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x55892:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6283$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x55914:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6333$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x55936:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6377$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x55958:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6424$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x55980:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6474$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x56002:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6524$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x56024:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6568$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x56046:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6612$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x56068:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6656$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x56090:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6700$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x56112:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6744$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x56134:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6788$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x56156:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6832$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x56178:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6876$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x56200:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6920$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x56222:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6964$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x56244:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

strtoul:	; Assign g_inStatus 1
x56266:	mov word [g_inStatus], 1	; 6: 199 6 202 95 1 0

strtoul$1:	; Assign g_inDevice s
x56272:	mov ax, [bp + 6]	; 3: 139 70 6
x56275:	mov [g_inDevice], ax	; 3: 163 204 95

strtoul$2:	; Assign g_inChars 0
x56278:	mov word [g_inChars], 0	; 6: 199 6 239 100 0 0

strtoul$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul$4:	; Parameter 12 base 6
x56284:	mov ax, [bp + 10]	; 3: 139 70 10
x56287:	mov [bp + 18], ax	; 3: 137 70 18

strtoul$5:	; Call 12 scanUnsignedLongInt 0
x56290:	mov word [bp + 12], strtoul$6	; 5: 199 70 12 240 219
x56295:	mov [bp + 14], bp	; 3: 137 110 14
x56298:	add bp, 12	; 3: 131 197 12
x56301:	jmp scanUnsignedLongInt	; 3: 233 46 144

strtoul$6:	; PostCall 12

strtoul$7:	; GetReturnValue £temporary2251

strtoul$8:	; Assign unsignedLongValue £temporary2251
x56304:	mov [bp + 12], ebx	; 4: 102 137 94 12

strtoul$9:	; Equal 12 endp 0
x56308:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x56312:	je strtoul$12	; 2: 116 12

strtoul$10:	; Deref £temporary2253 -> endp endp 0
x56314:	mov si, [bp + 8]	; 3: 139 118 8

strtoul$11:	; BinaryAdd £temporary2253 -> endp s g_inChars
x56317:	mov ax, [bp + 6]	; 3: 139 70 6
x56320:	add ax, [g_inChars]	; 4: 3 6 239 100
x56324:	mov [si], ax	; 2: 137 4

strtoul$12:	; SetReturnValue unsignedLongValue
x56326:	mov ebx, [bp + 12]	; 4: 102 139 94 12

strtoul$13:	; Return unsignedLongValue
x56330:	mov ax, [bp]	; 3: 139 70 0
x56333:	mov di, [bp + 4]	; 3: 139 126 4
x56336:	mov bp, [bp + 2]	; 3: 139 110 2
x56339:	jmp ax	; 2: 255 224

strtoul$14:	; FunctionEnd strtoul

character_test:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_test$1:	; Parameter 6 97 6
x56341:	mov byte [bp + 12], 97	; 4: 198 70 12 97

character_test$2:	; Call 6 character_testX 0
x56345:	mov word [bp + 6], character_test$3	; 5: 199 70 6 39 220
x56350:	mov [bp + 8], bp	; 3: 137 110 8
x56353:	add bp, 6	; 3: 131 197 6
x56356:	nop	; 1: 144
x56357:	jmp character_testX	; 2: 235 119

character_test$3:	; PostCall 6

character_test$4:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_test$5:	; Parameter 6 66 6
x56359:	mov byte [bp + 12], 66	; 4: 198 70 12 66

character_test$6:	; Call 6 character_testX 0
x56363:	mov word [bp + 6], character_test$7	; 5: 199 70 6 57 220
x56368:	mov [bp + 8], bp	; 3: 137 110 8
x56371:	add bp, 6	; 3: 131 197 6
x56374:	nop	; 1: 144
x56375:	jmp character_testX	; 2: 235 101

character_test$7:	; PostCall 6

character_test$8:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_test$9:	; Parameter 6 49 6
x56377:	mov byte [bp + 12], 49	; 4: 198 70 12 49

character_test$10:	; Call 6 character_testX 0
x56381:	mov word [bp + 6], character_test$11	; 5: 199 70 6 75 220
x56386:	mov [bp + 8], bp	; 3: 137 110 8
x56389:	add bp, 6	; 3: 131 197 6
x56392:	nop	; 1: 144
x56393:	jmp character_testX	; 2: 235 83

character_test$11:	; PostCall 6

character_test$12:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_test$13:	; Parameter 6 46 6
x56395:	mov byte [bp + 12], 46	; 4: 198 70 12 46

character_test$14:	; Call 6 character_testX 0
x56399:	mov word [bp + 6], character_test$15	; 5: 199 70 6 93 220
x56404:	mov [bp + 8], bp	; 3: 137 110 8
x56407:	add bp, 6	; 3: 131 197 6
x56410:	nop	; 1: 144
x56411:	jmp character_testX	; 2: 235 65

character_test$15:	; PostCall 6

character_test$16:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_test$17:	; Parameter 6 10 6
x56413:	mov byte [bp + 12], 10	; 4: 198 70 12 10

character_test$18:	; Call 6 character_testX 0
x56417:	mov word [bp + 6], character_test$19	; 5: 199 70 6 111 220
x56422:	mov [bp + 8], bp	; 3: 137 110 8
x56425:	add bp, 6	; 3: 131 197 6
x56428:	nop	; 1: 144
x56429:	jmp character_testX	; 2: 235 47

character_test$19:	; PostCall 6

character_test$20:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_test$21:	; Parameter 6 102 6
x56431:	mov byte [bp + 12], 102	; 4: 198 70 12 102

character_test$22:	; Call 6 character_testX 0
x56435:	mov word [bp + 6], character_test$23	; 5: 199 70 6 129 220
x56440:	mov [bp + 8], bp	; 3: 137 110 8
x56443:	add bp, 6	; 3: 131 197 6
x56446:	nop	; 1: 144
x56447:	jmp character_testX	; 2: 235 29

character_test$23:	; PostCall 6

character_test$24:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_test$25:	; Parameter 6 103 6
x56449:	mov byte [bp + 12], 103	; 4: 198 70 12 103

character_test$26:	; Call 6 character_testX 0
x56453:	mov word [bp + 6], character_test$27	; 5: 199 70 6 147 220
x56458:	mov [bp + 8], bp	; 3: 137 110 8
x56461:	add bp, 6	; 3: 131 197 6
x56464:	nop	; 1: 144
x56465:	jmp character_testX	; 2: 235 11

character_test$27:	; PostCall 6

character_test$28:	; Return 0
x56467:	mov ax, [bp]	; 3: 139 70 0
x56470:	mov di, [bp + 4]	; 3: 139 126 4
x56473:	mov bp, [bp + 2]	; 3: 139 110 2
x56476:	jmp ax	; 2: 255 224

character_test$29:	; FunctionEnd character_test

character_testX:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$1:	; Parameter 7 string_ascii2025i0A# 6
x56478:	mov word [bp + 13], @9185$string_ascii2025i0A#	; 5: 199 70 13 92 225

character_testX$2:	; IntegralToIntegral £temporary4042 c
x56483:	mov al, [bp + 6]	; 3: 138 70 6
x56486:	and ax, 255	; 3: 37 255 0
x56489:	cmp al, 0	; 2: 60 0
x56491:	jge character_testX$3	; 2: 125 4
x56493:	neg al	; 2: 246 216
x56495:	neg ax	; 2: 247 216

character_testX$3:	; Parameter 7 £temporary4042 8
x56497:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$4:	; Call 7 printf 0
x56500:	mov word [bp + 7], character_testX$5	; 5: 199 70 7 199 220
x56505:	mov [bp + 9], bp	; 3: 137 110 9
x56508:	add bp, 7	; 3: 131 197 7
x56511:	mov di, bp	; 2: 137 239
x56513:	add di, 2	; 3: 131 199 2
x56516:	jmp printf	; 3: 233 61 48

character_testX$5:	; PostCall 7

character_testX$6:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$7:	; Parameter 7 string_islower282725c2729203D2025s0A# 6
x56519:	mov word [bp + 13], @9188$string_islower282725c2729203D2025s0A#	; 5: 199 70 13 102 225

character_testX$8:	; IntegralToIntegral £temporary4044 c
x56524:	mov al, [bp + 6]	; 3: 138 70 6
x56527:	and ax, 255	; 3: 37 255 0
x56530:	cmp al, 0	; 2: 60 0
x56532:	jge character_testX$9	; 2: 125 4
x56534:	neg al	; 2: 246 216
x56536:	neg ax	; 2: 247 216

character_testX$9:	; Parameter 7 £temporary4044 8
x56538:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$10:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$11:	; IntegralToIntegral £temporary4045 c
x56541:	mov al, [bp + 6]	; 3: 138 70 6
x56544:	and ax, 255	; 3: 37 255 0
x56547:	cmp al, 0	; 2: 60 0
x56549:	jge character_testX$12	; 2: 125 4
x56551:	neg al	; 2: 246 216
x56553:	neg ax	; 2: 247 216

character_testX$12:	; Parameter 7 £temporary4045 16
x56555:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$13:	; Call 7 islower 10
x56558:	mov word [bp + 17], character_testX$14	; 5: 199 70 17 252 220
x56563:	mov [bp + 19], bp	; 3: 137 110 19
x56566:	add bp, 17	; 3: 131 197 17
x56569:	jmp islower	; 3: 233 185 141

character_testX$14:	; PostCall 7

character_testX$15:	; GetReturnValue £temporary4046

character_testX$16:	; Equal 19 £temporary4046 0
x56572:	cmp bx, 0	; 3: 131 251 0
x56575:	je character_testX$19	; 2: 116 5

character_testX$17:	; Assign £temporary4051 string_Yes#
x56577:	mov ax, @9195$string_Yes#	; 3: 184 122 225

character_testX$18:	; Goto 20
x56580:	jmp character_testX$20	; 2: 235 3

character_testX$19:	; Assign £temporary4051 string_No#
x56582:	mov ax, @9196$string_No#	; 3: 184 126 225

character_testX$20:	; Parameter 7 £temporary4051 10
x56585:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$21:	; Call 7 printf 0
x56588:	mov word [bp + 7], character_testX$22	; 5: 199 70 7 31 221
x56593:	mov [bp + 9], bp	; 3: 137 110 9
x56596:	add bp, 7	; 3: 131 197 7
x56599:	mov di, bp	; 2: 137 239
x56601:	add di, 4	; 3: 131 199 4
x56604:	jmp printf	; 3: 233 229 47

character_testX$22:	; PostCall 7

character_testX$23:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$24:	; Parameter 7 string_isupper282725c2729203D2025s0A# 6
x56607:	mov word [bp + 13], @9204$string_isupper282725c2729203D2025s0A#	; 5: 199 70 13 129 225

character_testX$25:	; IntegralToIntegral £temporary4053 c
x56612:	mov al, [bp + 6]	; 3: 138 70 6
x56615:	and ax, 255	; 3: 37 255 0
x56618:	cmp al, 0	; 2: 60 0
x56620:	jge character_testX$26	; 2: 125 4
x56622:	neg al	; 2: 246 216
x56624:	neg ax	; 2: 247 216

character_testX$26:	; Parameter 7 £temporary4053 8
x56626:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$27:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$28:	; IntegralToIntegral £temporary4054 c
x56629:	mov al, [bp + 6]	; 3: 138 70 6
x56632:	and ax, 255	; 3: 37 255 0
x56635:	cmp al, 0	; 2: 60 0
x56637:	jge character_testX$29	; 2: 125 4
x56639:	neg al	; 2: 246 216
x56641:	neg ax	; 2: 247 216

character_testX$29:	; Parameter 7 £temporary4054 16
x56643:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$30:	; Call 7 isupper 10
x56646:	mov word [bp + 17], character_testX$31	; 5: 199 70 17 84 221
x56651:	mov [bp + 19], bp	; 3: 137 110 19
x56654:	add bp, 17	; 3: 131 197 17
x56657:	jmp isupper	; 3: 233 185 64

character_testX$31:	; PostCall 7

character_testX$32:	; GetReturnValue £temporary4055

character_testX$33:	; Equal 36 £temporary4055 0
x56660:	cmp bx, 0	; 3: 131 251 0
x56663:	je character_testX$36	; 2: 116 5

character_testX$34:	; Assign £temporary4060 string_Yes#
x56665:	mov ax, @9211$string_Yes#	; 3: 184 149 225

character_testX$35:	; Goto 37
x56668:	jmp character_testX$37	; 2: 235 3

character_testX$36:	; Assign £temporary4060 string_No#
x56670:	mov ax, @9212$string_No#	; 3: 184 153 225

character_testX$37:	; Parameter 7 £temporary4060 10
x56673:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$38:	; Call 7 printf 0
x56676:	mov word [bp + 7], character_testX$39	; 5: 199 70 7 119 221
x56681:	mov [bp + 9], bp	; 3: 137 110 9
x56684:	add bp, 7	; 3: 131 197 7
x56687:	mov di, bp	; 2: 137 239
x56689:	add di, 4	; 3: 131 199 4
x56692:	jmp printf	; 3: 233 141 47

character_testX$39:	; PostCall 7

character_testX$40:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$41:	; Parameter 7 string_isalpha282725c2729203D2025s0A# 6
x56695:	mov word [bp + 13], @9220$string_isalpha282725c2729203D2025s0A#	; 5: 199 70 13 156 225

character_testX$42:	; IntegralToIntegral £temporary4062 c
x56700:	mov al, [bp + 6]	; 3: 138 70 6
x56703:	and ax, 255	; 3: 37 255 0
x56706:	cmp al, 0	; 2: 60 0
x56708:	jge character_testX$43	; 2: 125 4
x56710:	neg al	; 2: 246 216
x56712:	neg ax	; 2: 247 216

character_testX$43:	; Parameter 7 £temporary4062 8
x56714:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$44:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$45:	; IntegralToIntegral £temporary4063 c
x56717:	mov al, [bp + 6]	; 3: 138 70 6
x56720:	and ax, 255	; 3: 37 255 0
x56723:	cmp al, 0	; 2: 60 0
x56725:	jge character_testX$46	; 2: 125 4
x56727:	neg al	; 2: 246 216
x56729:	neg ax	; 2: 247 216

character_testX$46:	; Parameter 7 £temporary4063 16
x56731:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$47:	; Call 7 isalpha 10
x56734:	mov word [bp + 17], character_testX$48	; 5: 199 70 17 172 221
x56739:	mov [bp + 19], bp	; 3: 137 110 19
x56742:	add bp, 17	; 3: 131 197 17
x56745:	jmp isalpha	; 3: 233 17 5

character_testX$48:	; PostCall 7

character_testX$49:	; GetReturnValue £temporary4064

character_testX$50:	; Equal 53 £temporary4064 0
x56748:	cmp bx, 0	; 3: 131 251 0
x56751:	je character_testX$53	; 2: 116 5

character_testX$51:	; Assign £temporary4069 string_Yes#
x56753:	mov ax, @9227$string_Yes#	; 3: 184 176 225

character_testX$52:	; Goto 54
x56756:	jmp character_testX$54	; 2: 235 3

character_testX$53:	; Assign £temporary4069 string_No#
x56758:	mov ax, @9228$string_No#	; 3: 184 180 225

character_testX$54:	; Parameter 7 £temporary4069 10
x56761:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$55:	; Call 7 printf 0
x56764:	mov word [bp + 7], character_testX$56	; 5: 199 70 7 207 221
x56769:	mov [bp + 9], bp	; 3: 137 110 9
x56772:	add bp, 7	; 3: 131 197 7
x56775:	mov di, bp	; 2: 137 239
x56777:	add di, 4	; 3: 131 199 4
x56780:	jmp printf	; 3: 233 53 47

character_testX$56:	; PostCall 7

character_testX$57:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$58:	; Parameter 7 string_isdigit282725c2729203D2025s0A# 6
x56783:	mov word [bp + 13], @9236$string_isdigit282725c2729203D2025s0A#	; 5: 199 70 13 183 225

character_testX$59:	; IntegralToIntegral £temporary4071 c
x56788:	mov al, [bp + 6]	; 3: 138 70 6
x56791:	and ax, 255	; 3: 37 255 0
x56794:	cmp al, 0	; 2: 60 0
x56796:	jge character_testX$60	; 2: 125 4
x56798:	neg al	; 2: 246 216
x56800:	neg ax	; 2: 247 216

character_testX$60:	; Parameter 7 £temporary4071 8
x56802:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$61:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$62:	; IntegralToIntegral £temporary4072 c
x56805:	mov al, [bp + 6]	; 3: 138 70 6
x56808:	and ax, 255	; 3: 37 255 0
x56811:	cmp al, 0	; 2: 60 0
x56813:	jge character_testX$63	; 2: 125 4
x56815:	neg al	; 2: 246 216
x56817:	neg ax	; 2: 247 216

character_testX$63:	; Parameter 7 £temporary4072 16
x56819:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$64:	; Call 7 isdigit 10
x56822:	mov word [bp + 17], character_testX$65	; 5: 199 70 17 4 222
x56827:	mov [bp + 19], bp	; 3: 137 110 19
x56830:	add bp, 17	; 3: 131 197 17
x56833:	jmp isdigit	; 3: 233 104 77

character_testX$65:	; PostCall 7

character_testX$66:	; GetReturnValue £temporary4073

character_testX$67:	; Equal 70 £temporary4073 0
x56836:	cmp bx, 0	; 3: 131 251 0
x56839:	je character_testX$70	; 2: 116 5

character_testX$68:	; Assign £temporary4078 string_Yes#
x56841:	mov ax, @9243$string_Yes#	; 3: 184 203 225

character_testX$69:	; Goto 71
x56844:	jmp character_testX$71	; 2: 235 3

character_testX$70:	; Assign £temporary4078 string_No#
x56846:	mov ax, @9244$string_No#	; 3: 184 207 225

character_testX$71:	; Parameter 7 £temporary4078 10
x56849:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$72:	; Call 7 printf 0
x56852:	mov word [bp + 7], character_testX$73	; 5: 199 70 7 39 222
x56857:	mov [bp + 9], bp	; 3: 137 110 9
x56860:	add bp, 7	; 3: 131 197 7
x56863:	mov di, bp	; 2: 137 239
x56865:	add di, 4	; 3: 131 199 4
x56868:	jmp printf	; 3: 233 221 46

character_testX$73:	; PostCall 7

character_testX$74:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$75:	; Parameter 7 string_isalnum282725c2729203D2025s0A# 6
x56871:	mov word [bp + 13], @9252$string_isalnum282725c2729203D2025s0A#	; 5: 199 70 13 210 225

character_testX$76:	; IntegralToIntegral £temporary4080 c
x56876:	mov al, [bp + 6]	; 3: 138 70 6
x56879:	and ax, 255	; 3: 37 255 0
x56882:	cmp al, 0	; 2: 60 0
x56884:	jge character_testX$77	; 2: 125 4
x56886:	neg al	; 2: 246 216
x56888:	neg ax	; 2: 247 216

character_testX$77:	; Parameter 7 £temporary4080 8
x56890:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$78:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$79:	; IntegralToIntegral £temporary4081 c
x56893:	mov al, [bp + 6]	; 3: 138 70 6
x56896:	and ax, 255	; 3: 37 255 0
x56899:	cmp al, 0	; 2: 60 0
x56901:	jge character_testX$80	; 2: 125 4
x56903:	neg al	; 2: 246 216
x56905:	neg ax	; 2: 247 216

character_testX$80:	; Parameter 7 £temporary4081 16
x56907:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$81:	; Call 7 isalnum 10
x56910:	mov word [bp + 17], character_testX$82	; 5: 199 70 17 92 222
x56915:	mov [bp + 19], bp	; 3: 137 110 19
x56918:	add bp, 17	; 3: 131 197 17
x56921:	jmp isalnum	; 3: 233 166 4

character_testX$82:	; PostCall 7

character_testX$83:	; GetReturnValue £temporary4082

character_testX$84:	; Equal 87 £temporary4082 0
x56924:	cmp bx, 0	; 3: 131 251 0
x56927:	je character_testX$87	; 2: 116 5

character_testX$85:	; Assign £temporary4087 string_Yes#
x56929:	mov ax, @9259$string_Yes#	; 3: 184 230 225

character_testX$86:	; Goto 88
x56932:	jmp character_testX$88	; 2: 235 3

character_testX$87:	; Assign £temporary4087 string_No#
x56934:	mov ax, @9260$string_No#	; 3: 184 234 225

character_testX$88:	; Parameter 7 £temporary4087 10
x56937:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$89:	; Call 7 printf 0
x56940:	mov word [bp + 7], character_testX$90	; 5: 199 70 7 127 222
x56945:	mov [bp + 9], bp	; 3: 137 110 9
x56948:	add bp, 7	; 3: 131 197 7
x56951:	mov di, bp	; 2: 137 239
x56953:	add di, 4	; 3: 131 199 4
x56956:	jmp printf	; 3: 233 133 46

character_testX$90:	; PostCall 7

character_testX$91:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$92:	; Parameter 7 string_isxdigit282725c2729203D2025s0A# 6
x56959:	mov word [bp + 13], @9268$string_isxdigit282725c2729203D2025s0A#	; 5: 199 70 13 237 225

character_testX$93:	; IntegralToIntegral £temporary4089 c
x56964:	mov al, [bp + 6]	; 3: 138 70 6
x56967:	and ax, 255	; 3: 37 255 0
x56970:	cmp al, 0	; 2: 60 0
x56972:	jge character_testX$94	; 2: 125 4
x56974:	neg al	; 2: 246 216
x56976:	neg ax	; 2: 247 216

character_testX$94:	; Parameter 7 £temporary4089 8
x56978:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$95:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$96:	; IntegralToIntegral £temporary4090 c
x56981:	mov al, [bp + 6]	; 3: 138 70 6
x56984:	and ax, 255	; 3: 37 255 0
x56987:	cmp al, 0	; 2: 60 0
x56989:	jge character_testX$97	; 2: 125 4
x56991:	neg al	; 2: 246 216
x56993:	neg ax	; 2: 247 216

character_testX$97:	; Parameter 7 £temporary4090 16
x56995:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$98:	; Call 7 isxdigit 10
x56998:	mov word [bp + 17], character_testX$99	; 5: 199 70 17 180 222
x57003:	mov [bp + 19], bp	; 3: 137 110 19
x57006:	add bp, 17	; 3: 131 197 17
x57009:	jmp isxdigit	; 3: 233 147 4

character_testX$99:	; PostCall 7

character_testX$100:	; GetReturnValue £temporary4091

character_testX$101:	; Equal 104 £temporary4091 0
x57012:	cmp bx, 0	; 3: 131 251 0
x57015:	je character_testX$104	; 2: 116 5

character_testX$102:	; Assign £temporary4096 string_Yes#
x57017:	mov ax, @9275$string_Yes#	; 3: 184 2 226

character_testX$103:	; Goto 105
x57020:	jmp character_testX$105	; 2: 235 3

character_testX$104:	; Assign £temporary4096 string_No#
x57022:	mov ax, @9276$string_No#	; 3: 184 6 226

character_testX$105:	; Parameter 7 £temporary4096 10
x57025:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$106:	; Call 7 printf 0
x57028:	mov word [bp + 7], character_testX$107	; 5: 199 70 7 215 222
x57033:	mov [bp + 9], bp	; 3: 137 110 9
x57036:	add bp, 7	; 3: 131 197 7
x57039:	mov di, bp	; 2: 137 239
x57041:	add di, 4	; 3: 131 199 4
x57044:	jmp printf	; 3: 233 45 46

character_testX$107:	; PostCall 7

character_testX$108:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$109:	; Parameter 7 string_isgraph282725c2729203D2025s0A# 6
x57047:	mov word [bp + 13], @9284$string_isgraph282725c2729203D2025s0A#	; 5: 199 70 13 9 226

character_testX$110:	; IntegralToIntegral £temporary4098 c
x57052:	mov al, [bp + 6]	; 3: 138 70 6
x57055:	and ax, 255	; 3: 37 255 0
x57058:	cmp al, 0	; 2: 60 0
x57060:	jge character_testX$111	; 2: 125 4
x57062:	neg al	; 2: 246 216
x57064:	neg ax	; 2: 247 216

character_testX$111:	; Parameter 7 £temporary4098 8
x57066:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$112:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$113:	; IntegralToIntegral £temporary4099 c
x57069:	mov al, [bp + 6]	; 3: 138 70 6
x57072:	and ax, 255	; 3: 37 255 0
x57075:	cmp al, 0	; 2: 60 0
x57077:	jge character_testX$114	; 2: 125 4
x57079:	neg al	; 2: 246 216
x57081:	neg ax	; 2: 247 216

character_testX$114:	; Parameter 7 £temporary4099 16
x57083:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$115:	; Call 7 isgraph 10
x57086:	mov word [bp + 17], character_testX$116	; 5: 199 70 17 12 223
x57091:	mov [bp + 19], bp	; 3: 137 110 19
x57094:	add bp, 17	; 3: 131 197 17
x57097:	jmp isgraph	; 3: 233 127 4

character_testX$116:	; PostCall 7

character_testX$117:	; GetReturnValue £temporary4100

character_testX$118:	; Equal 121 £temporary4100 0
x57100:	cmp bx, 0	; 3: 131 251 0
x57103:	je character_testX$121	; 2: 116 5

character_testX$119:	; Assign £temporary4105 string_Yes#
x57105:	mov ax, @9291$string_Yes#	; 3: 184 29 226

character_testX$120:	; Goto 122
x57108:	jmp character_testX$122	; 2: 235 3

character_testX$121:	; Assign £temporary4105 string_No#
x57110:	mov ax, @9292$string_No#	; 3: 184 33 226

character_testX$122:	; Parameter 7 £temporary4105 10
x57113:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$123:	; Call 7 printf 0
x57116:	mov word [bp + 7], character_testX$124	; 5: 199 70 7 47 223
x57121:	mov [bp + 9], bp	; 3: 137 110 9
x57124:	add bp, 7	; 3: 131 197 7
x57127:	mov di, bp	; 2: 137 239
x57129:	add di, 4	; 3: 131 199 4
x57132:	jmp printf	; 3: 233 213 45

character_testX$124:	; PostCall 7

character_testX$125:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$126:	; Parameter 7 string_isprint282725c2729203D2025s0A# 6
x57135:	mov word [bp + 13], @9300$string_isprint282725c2729203D2025s0A#	; 5: 199 70 13 36 226

character_testX$127:	; IntegralToIntegral £temporary4107 c
x57140:	mov al, [bp + 6]	; 3: 138 70 6
x57143:	and ax, 255	; 3: 37 255 0
x57146:	cmp al, 0	; 2: 60 0
x57148:	jge character_testX$128	; 2: 125 4
x57150:	neg al	; 2: 246 216
x57152:	neg ax	; 2: 247 216

character_testX$128:	; Parameter 7 £temporary4107 8
x57154:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$129:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$130:	; IntegralToIntegral £temporary4108 c
x57157:	mov al, [bp + 6]	; 3: 138 70 6
x57160:	and ax, 255	; 3: 37 255 0
x57163:	cmp al, 0	; 2: 60 0
x57165:	jge character_testX$131	; 2: 125 4
x57167:	neg al	; 2: 246 216
x57169:	neg ax	; 2: 247 216

character_testX$131:	; Parameter 7 £temporary4108 16
x57171:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$132:	; Call 7 isprint 10
x57174:	mov word [bp + 17], character_testX$133	; 5: 199 70 17 100 223
x57179:	mov [bp + 19], bp	; 3: 137 110 19
x57182:	add bp, 17	; 3: 131 197 17
x57185:	jmp isprint	; 3: 233 70 4

character_testX$133:	; PostCall 7

character_testX$134:	; GetReturnValue £temporary4109

character_testX$135:	; Equal 138 £temporary4109 0
x57188:	cmp bx, 0	; 3: 131 251 0
x57191:	je character_testX$138	; 2: 116 5

character_testX$136:	; Assign £temporary4114 string_Yes#
x57193:	mov ax, @9307$string_Yes#	; 3: 184 56 226

character_testX$137:	; Goto 139
x57196:	jmp character_testX$139	; 2: 235 3

character_testX$138:	; Assign £temporary4114 string_No#
x57198:	mov ax, @9308$string_No#	; 3: 184 60 226

character_testX$139:	; Parameter 7 £temporary4114 10
x57201:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$140:	; Call 7 printf 0
x57204:	mov word [bp + 7], character_testX$141	; 5: 199 70 7 135 223
x57209:	mov [bp + 9], bp	; 3: 137 110 9
x57212:	add bp, 7	; 3: 131 197 7
x57215:	mov di, bp	; 2: 137 239
x57217:	add di, 4	; 3: 131 199 4
x57220:	jmp printf	; 3: 233 125 45

character_testX$141:	; PostCall 7

character_testX$142:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$143:	; Parameter 7 string_ispunct282725c2729203D2025s0A# 6
x57223:	mov word [bp + 13], @9316$string_ispunct282725c2729203D2025s0A#	; 5: 199 70 13 63 226

character_testX$144:	; IntegralToIntegral £temporary4116 c
x57228:	mov al, [bp + 6]	; 3: 138 70 6
x57231:	and ax, 255	; 3: 37 255 0
x57234:	cmp al, 0	; 2: 60 0
x57236:	jge character_testX$145	; 2: 125 4
x57238:	neg al	; 2: 246 216
x57240:	neg ax	; 2: 247 216

character_testX$145:	; Parameter 7 £temporary4116 8
x57242:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$146:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$147:	; IntegralToIntegral £temporary4117 c
x57245:	mov al, [bp + 6]	; 3: 138 70 6
x57248:	and ax, 255	; 3: 37 255 0
x57251:	cmp al, 0	; 2: 60 0
x57253:	jge character_testX$148	; 2: 125 4
x57255:	neg al	; 2: 246 216
x57257:	neg ax	; 2: 247 216

character_testX$148:	; Parameter 7 £temporary4117 16
x57259:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$149:	; Call 7 ispunct 10
x57262:	mov word [bp + 17], character_testX$150	; 5: 199 70 17 188 223
x57267:	mov [bp + 19], bp	; 3: 137 110 19
x57270:	add bp, 17	; 3: 131 197 17
x57273:	jmp ispunct	; 3: 233 32 4

character_testX$150:	; PostCall 7

character_testX$151:	; GetReturnValue £temporary4118

character_testX$152:	; Equal 155 £temporary4118 0
x57276:	cmp bx, 0	; 3: 131 251 0
x57279:	je character_testX$155	; 2: 116 5

character_testX$153:	; Assign £temporary4123 string_Yes#
x57281:	mov ax, @9323$string_Yes#	; 3: 184 83 226

character_testX$154:	; Goto 156
x57284:	jmp character_testX$156	; 2: 235 3

character_testX$155:	; Assign £temporary4123 string_No#
x57286:	mov ax, @9324$string_No#	; 3: 184 87 226

character_testX$156:	; Parameter 7 £temporary4123 10
x57289:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$157:	; Call 7 printf 0
x57292:	mov word [bp + 7], character_testX$158	; 5: 199 70 7 223 223
x57297:	mov [bp + 9], bp	; 3: 137 110 9
x57300:	add bp, 7	; 3: 131 197 7
x57303:	mov di, bp	; 2: 137 239
x57305:	add di, 4	; 3: 131 199 4
x57308:	jmp printf	; 3: 233 37 45

character_testX$158:	; PostCall 7

character_testX$159:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$160:	; Parameter 7 string_iscntrl282725c2729203D2025s0A# 6
x57311:	mov word [bp + 13], @9332$string_iscntrl282725c2729203D2025s0A#	; 5: 199 70 13 90 226

character_testX$161:	; IntegralToIntegral £temporary4125 c
x57316:	mov al, [bp + 6]	; 3: 138 70 6
x57319:	and ax, 255	; 3: 37 255 0
x57322:	cmp al, 0	; 2: 60 0
x57324:	jge character_testX$162	; 2: 125 4
x57326:	neg al	; 2: 246 216
x57328:	neg ax	; 2: 247 216

character_testX$162:	; Parameter 7 £temporary4125 8
x57330:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$163:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$164:	; IntegralToIntegral £temporary4126 c
x57333:	mov al, [bp + 6]	; 3: 138 70 6
x57336:	and ax, 255	; 3: 37 255 0
x57339:	cmp al, 0	; 2: 60 0
x57341:	jge character_testX$165	; 2: 125 4
x57343:	neg al	; 2: 246 216
x57345:	neg ax	; 2: 247 216

character_testX$165:	; Parameter 7 £temporary4126 16
x57347:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$166:	; Call 7 iscntrl 10
x57350:	mov word [bp + 17], character_testX$167	; 5: 199 70 17 20 224
x57355:	mov [bp + 19], bp	; 3: 137 110 19
x57358:	add bp, 17	; 3: 131 197 17
x57361:	jmp iscntrl	; 3: 233 13 4

character_testX$167:	; PostCall 7

character_testX$168:	; GetReturnValue £temporary4127

character_testX$169:	; Equal 172 £temporary4127 0
x57364:	cmp bx, 0	; 3: 131 251 0
x57367:	je character_testX$172	; 2: 116 5

character_testX$170:	; Assign £temporary4132 string_Yes#
x57369:	mov ax, @9339$string_Yes#	; 3: 184 110 226

character_testX$171:	; Goto 173
x57372:	jmp character_testX$173	; 2: 235 3

character_testX$172:	; Assign £temporary4132 string_No#
x57374:	mov ax, @9340$string_No#	; 3: 184 114 226

character_testX$173:	; Parameter 7 £temporary4132 10
x57377:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$174:	; Call 7 printf 0
x57380:	mov word [bp + 7], character_testX$175	; 5: 199 70 7 55 224
x57385:	mov [bp + 9], bp	; 3: 137 110 9
x57388:	add bp, 7	; 3: 131 197 7
x57391:	mov di, bp	; 2: 137 239
x57393:	add di, 4	; 3: 131 199 4
x57396:	jmp printf	; 3: 233 205 44

character_testX$175:	; PostCall 7

character_testX$176:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$177:	; Parameter 7 string_isspace282725c2729203D2025s0A# 6
x57399:	mov word [bp + 13], @9348$string_isspace282725c2729203D2025s0A#	; 5: 199 70 13 117 226

character_testX$178:	; IntegralToIntegral £temporary4134 c
x57404:	mov al, [bp + 6]	; 3: 138 70 6
x57407:	and ax, 255	; 3: 37 255 0
x57410:	cmp al, 0	; 2: 60 0
x57412:	jge character_testX$179	; 2: 125 4
x57414:	neg al	; 2: 246 216
x57416:	neg ax	; 2: 247 216

character_testX$179:	; Parameter 7 £temporary4134 8
x57418:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$180:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$181:	; IntegralToIntegral £temporary4135 c
x57421:	mov al, [bp + 6]	; 3: 138 70 6
x57424:	and ax, 255	; 3: 37 255 0
x57427:	cmp al, 0	; 2: 60 0
x57429:	jge character_testX$182	; 2: 125 4
x57431:	neg al	; 2: 246 216
x57433:	neg ax	; 2: 247 216

character_testX$182:	; Parameter 7 £temporary4135 16
x57435:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$183:	; Call 7 isspace 10
x57438:	mov word [bp + 17], character_testX$184	; 5: 199 70 17 108 224
x57443:	mov [bp + 19], bp	; 3: 137 110 19
x57446:	add bp, 17	; 3: 131 197 17
x57449:	jmp isspace	; 3: 233 65 135

character_testX$184:	; PostCall 7

character_testX$185:	; GetReturnValue £temporary4136

character_testX$186:	; Equal 189 £temporary4136 0
x57452:	cmp bx, 0	; 3: 131 251 0
x57455:	je character_testX$189	; 2: 116 5

character_testX$187:	; Assign £temporary4141 string_Yes#
x57457:	mov ax, @9355$string_Yes#	; 3: 184 137 226

character_testX$188:	; Goto 190
x57460:	jmp character_testX$190	; 2: 235 3

character_testX$189:	; Assign £temporary4141 string_No#
x57462:	mov ax, @9356$string_No#	; 3: 184 141 226

character_testX$190:	; Parameter 7 £temporary4141 10
x57465:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$191:	; Call 7 printf 0
x57468:	mov word [bp + 7], character_testX$192	; 5: 199 70 7 143 224
x57473:	mov [bp + 9], bp	; 3: 137 110 9
x57476:	add bp, 7	; 3: 131 197 7
x57479:	mov di, bp	; 2: 137 239
x57481:	add di, 4	; 3: 131 199 4
x57484:	jmp printf	; 3: 233 117 44

character_testX$192:	; PostCall 7

character_testX$193:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$194:	; Parameter 7 string_tolower282725c2729203D202725c270A# 6
x57487:	mov word [bp + 13], @9364$string_tolower282725c2729203D202725c270A#	; 5: 199 70 13 144 226

character_testX$195:	; IntegralToIntegral £temporary4143 c
x57492:	mov al, [bp + 6]	; 3: 138 70 6
x57495:	and ax, 255	; 3: 37 255 0
x57498:	cmp al, 0	; 2: 60 0
x57500:	jge character_testX$196	; 2: 125 4
x57502:	neg al	; 2: 246 216
x57504:	neg ax	; 2: 247 216

character_testX$196:	; Parameter 7 £temporary4143 8
x57506:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$197:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$198:	; IntegralToIntegral £temporary4144 c
x57509:	mov al, [bp + 6]	; 3: 138 70 6
x57512:	and ax, 255	; 3: 37 255 0
x57515:	cmp al, 0	; 2: 60 0
x57517:	jge character_testX$199	; 2: 125 4
x57519:	neg al	; 2: 246 216
x57521:	neg ax	; 2: 247 216

character_testX$199:	; Parameter 7 £temporary4144 16
x57523:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$200:	; Call 7 tolower 10
x57526:	mov word [bp + 17], character_testX$201	; 5: 199 70 17 196 224
x57531:	mov [bp + 19], bp	; 3: 137 110 19
x57534:	add bp, 17	; 3: 131 197 17
x57537:	jmp tolower	; 3: 233 91 68

character_testX$201:	; PostCall 7

character_testX$202:	; GetReturnValue £temporary4145

character_testX$203:	; IntegralToIntegral £temporary4146 £temporary4145
x57540:	cmp bx, 0	; 3: 131 251 0
x57543:	jge character_testX$204	; 2: 125 4
x57545:	neg bx	; 2: 247 219
x57547:	neg bl	; 2: 246 219

character_testX$204:	; IntegralToIntegral £temporary4147 £temporary4146
x57549:	and bx, 255	; 4: 129 227 255 0
x57553:	cmp bl, 0	; 3: 128 251 0
x57556:	jge character_testX$205	; 2: 125 4
x57558:	neg bl	; 2: 246 219
x57560:	neg bx	; 2: 247 219

character_testX$205:	; Parameter 7 £temporary4147 10
x57562:	mov [bp + 17], bx	; 3: 137 94 17

character_testX$206:	; Call 7 printf 0
x57565:	mov word [bp + 7], character_testX$207	; 5: 199 70 7 240 224
x57570:	mov [bp + 9], bp	; 3: 137 110 9
x57573:	add bp, 7	; 3: 131 197 7
x57576:	mov di, bp	; 2: 137 239
x57578:	add di, 4	; 3: 131 199 4
x57581:	jmp printf	; 3: 233 20 44

character_testX$207:	; PostCall 7

character_testX$208:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$209:	; Parameter 7 string_toupper282725c2729203D202725c270A0A# 6
x57584:	mov word [bp + 13], @9371$string_toupper282725c2729203D202725c270A0A#	; 5: 199 70 13 166 226

character_testX$210:	; IntegralToIntegral £temporary4149 c
x57589:	mov al, [bp + 6]	; 3: 138 70 6
x57592:	and ax, 255	; 3: 37 255 0
x57595:	cmp al, 0	; 2: 60 0
x57597:	jge character_testX$211	; 2: 125 4
x57599:	neg al	; 2: 246 216
x57601:	neg ax	; 2: 247 216

character_testX$211:	; Parameter 7 £temporary4149 8
x57603:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$212:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$213:	; IntegralToIntegral £temporary4150 c
x57606:	mov al, [bp + 6]	; 3: 138 70 6
x57609:	and ax, 255	; 3: 37 255 0
x57612:	cmp al, 0	; 2: 60 0
x57614:	jge character_testX$214	; 2: 125 4
x57616:	neg al	; 2: 246 216
x57618:	neg ax	; 2: 247 216

character_testX$214:	; Parameter 7 £temporary4150 16
x57620:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$215:	; Call 7 toupper 10
x57623:	mov word [bp + 17], character_testX$216	; 5: 199 70 17 37 225
x57628:	mov [bp + 19], bp	; 3: 137 110 19
x57631:	add bp, 17	; 3: 131 197 17
x57634:	jmp toupper	; 3: 233 40 3

character_testX$216:	; PostCall 7

character_testX$217:	; GetReturnValue £temporary4151

character_testX$218:	; IntegralToIntegral £temporary4152 £temporary4151
x57637:	cmp bx, 0	; 3: 131 251 0
x57640:	jge character_testX$219	; 2: 125 4
x57642:	neg bx	; 2: 247 219
x57644:	neg bl	; 2: 246 219

character_testX$219:	; IntegralToIntegral £temporary4153 £temporary4152
x57646:	and bx, 255	; 4: 129 227 255 0
x57650:	cmp bl, 0	; 3: 128 251 0
x57653:	jge character_testX$220	; 2: 125 4
x57655:	neg bl	; 2: 246 219
x57657:	neg bx	; 2: 247 219

character_testX$220:	; Parameter 7 £temporary4153 10
x57659:	mov [bp + 17], bx	; 3: 137 94 17

character_testX$221:	; Call 7 printf 0
x57662:	mov word [bp + 7], character_testX$222	; 5: 199 70 7 81 225
x57667:	mov [bp + 9], bp	; 3: 137 110 9
x57670:	add bp, 7	; 3: 131 197 7
x57673:	mov di, bp	; 2: 137 239
x57675:	add di, 4	; 3: 131 199 4
x57678:	jmp printf	; 3: 233 179 43

character_testX$222:	; PostCall 7

character_testX$223:	; Return 0
x57681:	mov ax, [bp]	; 3: 139 70 0
x57684:	mov di, [bp + 4]	; 3: 139 126 4
x57687:	mov bp, [bp + 2]	; 3: 139 110 2
x57690:	jmp ax	; 2: 255 224

character_testX$224:	; FunctionEnd character_testX

@9185$string_ascii2025i0A#:
x57692:	db "ascii %i", 10, 0	; 10: 97 115 99 105 105 32 37 105 10 0

@9188$string_islower282725c2729203D2025s0A#:
x57702:	db "islower(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 108 111 119 101 114 40 39 37 99 39 41 32 61 32 37 115 10 0

@9195$string_Yes#:
x57722:	db "Yes", 0	; 4: 89 101 115 0

@9196$string_No#:
x57726:	db "No", 0	; 3: 78 111 0

@9204$string_isupper282725c2729203D2025s0A#:
x57729:	db "isupper(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 117 112 112 101 114 40 39 37 99 39 41 32 61 32 37 115 10 0

@9211$string_Yes#:
x57749:	db "Yes", 0	; 4: 89 101 115 0

@9212$string_No#:
x57753:	db "No", 0	; 3: 78 111 0

@9220$string_isalpha282725c2729203D2025s0A#:
x57756:	db "isalpha(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 97 108 112 104 97 40 39 37 99 39 41 32 61 32 37 115 10 0

@9227$string_Yes#:
x57776:	db "Yes", 0	; 4: 89 101 115 0

@9228$string_No#:
x57780:	db "No", 0	; 3: 78 111 0

@9236$string_isdigit282725c2729203D2025s0A#:
x57783:	db "isdigit(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 100 105 103 105 116 40 39 37 99 39 41 32 61 32 37 115 10 0

@9243$string_Yes#:
x57803:	db "Yes", 0	; 4: 89 101 115 0

@9244$string_No#:
x57807:	db "No", 0	; 3: 78 111 0

@9252$string_isalnum282725c2729203D2025s0A#:
x57810:	db "isalnum(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 97 108 110 117 109 40 39 37 99 39 41 32 61 32 37 115 10 0

@9259$string_Yes#:
x57830:	db "Yes", 0	; 4: 89 101 115 0

@9260$string_No#:
x57834:	db "No", 0	; 3: 78 111 0

@9268$string_isxdigit282725c2729203D2025s0A#:
x57837:	db "isxdigit(", 39, "%c", 39, ") = %s", 10, 0	; 21: 105 115 120 100 105 103 105 116 40 39 37 99 39 41 32 61 32 37 115 10 0

@9275$string_Yes#:
x57858:	db "Yes", 0	; 4: 89 101 115 0

@9276$string_No#:
x57862:	db "No", 0	; 3: 78 111 0

@9284$string_isgraph282725c2729203D2025s0A#:
x57865:	db "isgraph(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 103 114 97 112 104 40 39 37 99 39 41 32 61 32 37 115 10 0

@9291$string_Yes#:
x57885:	db "Yes", 0	; 4: 89 101 115 0

@9292$string_No#:
x57889:	db "No", 0	; 3: 78 111 0

@9300$string_isprint282725c2729203D2025s0A#:
x57892:	db "isprint(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 112 114 105 110 116 40 39 37 99 39 41 32 61 32 37 115 10 0

@9307$string_Yes#:
x57912:	db "Yes", 0	; 4: 89 101 115 0

@9308$string_No#:
x57916:	db "No", 0	; 3: 78 111 0

@9316$string_ispunct282725c2729203D2025s0A#:
x57919:	db "ispunct(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 112 117 110 99 116 40 39 37 99 39 41 32 61 32 37 115 10 0

@9323$string_Yes#:
x57939:	db "Yes", 0	; 4: 89 101 115 0

@9324$string_No#:
x57943:	db "No", 0	; 3: 78 111 0

@9332$string_iscntrl282725c2729203D2025s0A#:
x57946:	db "iscntrl(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 99 110 116 114 108 40 39 37 99 39 41 32 61 32 37 115 10 0

@9339$string_Yes#:
x57966:	db "Yes", 0	; 4: 89 101 115 0

@9340$string_No#:
x57970:	db "No", 0	; 3: 78 111 0

@9348$string_isspace282725c2729203D2025s0A#:
x57973:	db "isspace(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 115 112 97 99 101 40 39 37 99 39 41 32 61 32 37 115 10 0

@9355$string_Yes#:
x57993:	db "Yes", 0	; 4: 89 101 115 0

@9356$string_No#:
x57997:	db "No", 0	; 3: 78 111 0

@9364$string_tolower282725c2729203D202725c270A#:
x58000:	db "tolower(", 39, "%c", 39, ") = ", 39, "%c", 39, 10, 0	; 22: 116 111 108 111 119 101 114 40 39 37 99 39 41 32 61 32 39 37 99 39 10 0

@9371$string_toupper282725c2729203D202725c270A0A#:
x58022:	db "toupper(", 39, "%c", 39, ") = ", 39, "%c", 39, 10, 10, 0	; 23: 116 111 117 112 112 101 114 40 39 37 99 39 41 32 61 32 39 37 99 39 10 10 0

isalpha:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

isalpha$1:	; Parameter 8 c 6
x58045:	mov ax, [bp + 6]	; 3: 139 70 6
x58048:	mov [bp + 14], ax	; 3: 137 70 14

isalpha$2:	; Call 8 islower 0
x58051:	mov word [bp + 8], isalpha$3	; 5: 199 70 8 209 226
x58056:	mov [bp + 10], bp	; 3: 137 110 10
x58059:	add bp, 8	; 3: 131 197 8
x58062:	jmp islower	; 3: 233 228 135

isalpha$3:	; PostCall 8

isalpha$4:	; GetReturnValue £temporary184

isalpha$5:	; NotEqual 12 £temporary184 0
x58065:	cmp bx, 0	; 3: 131 251 0
x58068:	jne isalpha$12	; 2: 117 25

isalpha$6:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

isalpha$7:	; Parameter 8 c 6
x58070:	mov ax, [bp + 6]	; 3: 139 70 6
x58073:	mov [bp + 14], ax	; 3: 137 70 14

isalpha$8:	; Call 8 isupper 0
x58076:	mov word [bp + 8], isalpha$9	; 5: 199 70 8 234 226
x58081:	mov [bp + 10], bp	; 3: 137 110 10
x58084:	add bp, 8	; 3: 131 197 8
x58087:	jmp isupper	; 3: 233 35 59

isalpha$9:	; PostCall 8

isalpha$10:	; GetReturnValue £temporary185

isalpha$11:	; Equal 14 £temporary185 0
x58090:	cmp bx, 0	; 3: 131 251 0
x58093:	je isalpha$14	; 2: 116 5

isalpha$12:	; Assign £temporary189 1
x58095:	mov bx, 1	; 3: 187 1 0

isalpha$13:	; Goto 15
x58098:	jmp isalpha$15	; 2: 235 3

isalpha$14:	; Assign £temporary189 0
x58100:	mov bx, 0	; 3: 187 0 0

isalpha$15:	; SetReturnValue £temporary189

isalpha$16:	; Return £temporary189
x58103:	mov ax, [bp]	; 3: 139 70 0
x58106:	mov di, [bp + 4]	; 3: 139 126 4
x58109:	mov bp, [bp + 2]	; 3: 139 110 2
x58112:	jmp ax	; 2: 255 224

isalpha$17:	; FunctionEnd isalpha

isalnum:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

isalnum$1:	; Parameter 8 c 6
x58114:	mov ax, [bp + 6]	; 3: 139 70 6
x58117:	mov [bp + 14], ax	; 3: 137 70 14

isalnum$2:	; Call 8 isalpha 0
x58120:	mov word [bp + 8], isalnum$3	; 5: 199 70 8 22 227
x58125:	mov [bp + 10], bp	; 3: 137 110 10
x58128:	add bp, 8	; 3: 131 197 8
x58131:	nop	; 1: 144
x58132:	jmp isalpha	; 2: 235 167

isalnum$3:	; PostCall 8

isalnum$4:	; GetReturnValue £temporary196

isalnum$5:	; NotEqual 12 £temporary196 0
x58134:	cmp bx, 0	; 3: 131 251 0
x58137:	jne isalnum$12	; 2: 117 25

isalnum$6:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

isalnum$7:	; Parameter 8 c 6
x58139:	mov ax, [bp + 6]	; 3: 139 70 6
x58142:	mov [bp + 14], ax	; 3: 137 70 14

isalnum$8:	; Call 8 isdigit 0
x58145:	mov word [bp + 8], isalnum$9	; 5: 199 70 8 47 227
x58150:	mov [bp + 10], bp	; 3: 137 110 10
x58153:	add bp, 8	; 3: 131 197 8
x58156:	jmp isdigit	; 3: 233 61 72

isalnum$9:	; PostCall 8

isalnum$10:	; GetReturnValue £temporary197

isalnum$11:	; Equal 14 £temporary197 0
x58159:	cmp bx, 0	; 3: 131 251 0
x58162:	je isalnum$14	; 2: 116 5

isalnum$12:	; Assign £temporary201 1
x58164:	mov bx, 1	; 3: 187 1 0

isalnum$13:	; Goto 15
x58167:	jmp isalnum$15	; 2: 235 3

isalnum$14:	; Assign £temporary201 0
x58169:	mov bx, 0	; 3: 187 0 0

isalnum$15:	; SetReturnValue £temporary201

isalnum$16:	; Return £temporary201
x58172:	mov ax, [bp]	; 3: 139 70 0
x58175:	mov di, [bp + 4]	; 3: 139 126 4
x58178:	mov bp, [bp + 2]	; 3: 139 110 2
x58181:	jmp ax	; 2: 255 224

isalnum$17:	; FunctionEnd isalnum

isxdigit:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

isxdigit$1:	; Parameter 8 c 6
x58183:	mov ax, [bp + 6]	; 3: 139 70 6
x58186:	mov [bp + 14], ax	; 3: 137 70 14

isxdigit$2:	; Call 8 isdigit 0
x58189:	mov word [bp + 8], isxdigit$3	; 5: 199 70 8 91 227
x58194:	mov [bp + 10], bp	; 3: 137 110 10
x58197:	add bp, 8	; 3: 131 197 8
x58200:	jmp isdigit	; 3: 233 17 72

isxdigit$3:	; PostCall 8

isxdigit$4:	; GetReturnValue £temporary204

isxdigit$5:	; NotEqual 10 £temporary204 0
x58203:	cmp bx, 0	; 3: 131 251 0
x58206:	jne isxdigit$10	; 2: 117 24

isxdigit$6:	; SignedLessThan 8 c 97
x58208:	cmp word [bp + 6], 97	; 4: 131 126 6 97
x58212:	jl isxdigit$8	; 2: 124 6

isxdigit$7:	; SignedLessThanEqual 10 c 102
x58214:	cmp word [bp + 6], 102	; 4: 131 126 6 102
x58218:	jle isxdigit$10	; 2: 126 12

isxdigit$8:	; SignedLessThan 12 c 65
x58220:	cmp word [bp + 6], 65	; 4: 131 126 6 65
x58224:	jl isxdigit$12	; 2: 124 11

isxdigit$9:	; SignedGreaterThan 12 c 70
x58226:	cmp word [bp + 6], 70	; 4: 131 126 6 70
x58230:	jg isxdigit$12	; 2: 127 5

isxdigit$10:	; Assign £temporary214 1
x58232:	mov bx, 1	; 3: 187 1 0

isxdigit$11:	; Goto 13
x58235:	jmp isxdigit$13	; 2: 235 3

isxdigit$12:	; Assign £temporary214 0
x58237:	mov bx, 0	; 3: 187 0 0

isxdigit$13:	; SetReturnValue £temporary214

isxdigit$14:	; Return £temporary214
x58240:	mov ax, [bp]	; 3: 139 70 0
x58243:	mov di, [bp + 4]	; 3: 139 126 4
x58246:	mov bp, [bp + 2]	; 3: 139 110 2
x58249:	jmp ax	; 2: 255 224

isxdigit$15:	; FunctionEnd isxdigit

isgraph:	; SignedLessThan 4 c 32
x58251:	cmp word [bp + 6], 32	; 4: 131 126 6 32
x58255:	jl isgraph$4	; 2: 124 11

isgraph$1:	; SignedGreaterThan 4 c 126
x58257:	cmp word [bp + 6], 126	; 4: 131 126 6 126
x58261:	jg isgraph$4	; 2: 127 5

isgraph$2:	; Assign £temporary219 1
x58263:	mov bx, 1	; 3: 187 1 0

isgraph$3:	; Goto 5
x58266:	jmp isgraph$5	; 2: 235 3

isgraph$4:	; Assign £temporary219 0
x58268:	mov bx, 0	; 3: 187 0 0

isgraph$5:	; SetReturnValue £temporary219

isgraph$6:	; Return £temporary219
x58271:	mov ax, [bp]	; 3: 139 70 0
x58274:	mov di, [bp + 4]	; 3: 139 126 4
x58277:	mov bp, [bp + 2]	; 3: 139 110 2
x58280:	jmp ax	; 2: 255 224

isgraph$7:	; FunctionEnd isgraph

isprint:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

isprint$1:	; Parameter 8 c 6
x58282:	mov ax, [bp + 6]	; 3: 139 70 6
x58285:	mov [bp + 14], ax	; 3: 137 70 14

isprint$2:	; Call 8 isgraph 0
x58288:	mov word [bp + 8], isprint$3	; 5: 199 70 8 190 227
x58293:	mov [bp + 10], bp	; 3: 137 110 10
x58296:	add bp, 8	; 3: 131 197 8
x58299:	nop	; 1: 144
x58300:	jmp isgraph	; 2: 235 205

isprint$3:	; PostCall 8

isprint$4:	; GetReturnValue £temporary220

isprint$5:	; Equal 9 £temporary220 0
x58302:	cmp bx, 0	; 3: 131 251 0
x58305:	je isprint$9	; 2: 116 11

isprint$6:	; Equal 9 c 32
x58307:	cmp word [bp + 6], 32	; 4: 131 126 6 32
x58311:	je isprint$9	; 2: 116 5

isprint$7:	; Assign £temporary224 1
x58313:	mov bx, 1	; 3: 187 1 0

isprint$8:	; Goto 10
x58316:	jmp isprint$10	; 2: 235 3

isprint$9:	; Assign £temporary224 0
x58318:	mov bx, 0	; 3: 187 0 0

isprint$10:	; SetReturnValue £temporary224

isprint$11:	; Return £temporary224
x58321:	mov ax, [bp]	; 3: 139 70 0
x58324:	mov di, [bp + 4]	; 3: 139 126 4
x58327:	mov bp, [bp + 2]	; 3: 139 110 2
x58330:	jmp ax	; 2: 255 224

isprint$12:	; FunctionEnd isprint

ispunct:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

ispunct$1:	; Parameter 8 c 6
x58332:	mov ax, [bp + 6]	; 3: 139 70 6
x58335:	mov [bp + 14], ax	; 3: 137 70 14

ispunct$2:	; Call 8 isgraph 0
x58338:	mov word [bp + 8], ispunct$3	; 5: 199 70 8 240 227
x58343:	mov [bp + 10], bp	; 3: 137 110 10
x58346:	add bp, 8	; 3: 131 197 8
x58349:	nop	; 1: 144
x58350:	jmp isgraph	; 2: 235 155

ispunct$3:	; PostCall 8

ispunct$4:	; GetReturnValue £temporary226

ispunct$5:	; Equal 14 £temporary226 0
x58352:	cmp bx, 0	; 3: 131 251 0
x58355:	je ispunct$14	; 2: 116 30

ispunct$6:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

ispunct$7:	; Parameter 8 c 6
x58357:	mov ax, [bp + 6]	; 3: 139 70 6
x58360:	mov [bp + 14], ax	; 3: 137 70 14

ispunct$8:	; Call 8 isalnum 0
x58363:	mov word [bp + 8], ispunct$9	; 5: 199 70 8 9 228
x58368:	mov [bp + 10], bp	; 3: 137 110 10
x58371:	add bp, 8	; 3: 131 197 8
x58374:	jmp isalnum	; 3: 233 249 254

ispunct$9:	; PostCall 8

ispunct$10:	; GetReturnValue £temporary227

ispunct$11:	; NotEqual 14 £temporary227 0
x58377:	cmp bx, 0	; 3: 131 251 0
x58380:	jne ispunct$14	; 2: 117 5

ispunct$12:	; Assign £temporary232 1
x58382:	mov bx, 1	; 3: 187 1 0

ispunct$13:	; Goto 15
x58385:	jmp ispunct$15	; 2: 235 3

ispunct$14:	; Assign £temporary232 0
x58387:	mov bx, 0	; 3: 187 0 0

ispunct$15:	; SetReturnValue £temporary232

ispunct$16:	; Return £temporary232
x58390:	mov ax, [bp]	; 3: 139 70 0
x58393:	mov di, [bp + 4]	; 3: 139 126 4
x58396:	mov bp, [bp + 2]	; 3: 139 110 2
x58399:	jmp ax	; 2: 255 224

ispunct$17:	; FunctionEnd ispunct

iscntrl:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

iscntrl$1:	; Parameter 8 c 6
x58401:	mov ax, [bp + 6]	; 3: 139 70 6
x58404:	mov [bp + 14], ax	; 3: 137 70 14

iscntrl$2:	; Call 8 isprint 0
x58407:	mov word [bp + 8], iscntrl$3	; 5: 199 70 8 53 228
x58412:	mov [bp + 10], bp	; 3: 137 110 10
x58415:	add bp, 8	; 3: 131 197 8
x58418:	jmp isprint	; 3: 233 117 255

iscntrl$3:	; PostCall 8

iscntrl$4:	; GetReturnValue £temporary235

iscntrl$5:	; NotEqual 8 £temporary235 0
x58421:	cmp bx, 0	; 3: 131 251 0
x58424:	jne iscntrl$8	; 2: 117 5

iscntrl$6:	; Assign £temporary238 1
x58426:	mov bx, 1	; 3: 187 1 0

iscntrl$7:	; Goto 9
x58429:	jmp iscntrl$9	; 2: 235 3

iscntrl$8:	; Assign £temporary238 0
x58431:	mov bx, 0	; 3: 187 0 0

iscntrl$9:	; SetReturnValue £temporary238

iscntrl$10:	; Return £temporary238
x58434:	mov ax, [bp]	; 3: 139 70 0
x58437:	mov di, [bp + 4]	; 3: 139 126 4
x58440:	mov bp, [bp + 2]	; 3: 139 110 2
x58443:	jmp ax	; 2: 255 224

iscntrl$11:	; FunctionEnd iscntrl

toupper:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

toupper$1:	; Parameter 8 c 6
x58445:	mov ax, [bp + 6]	; 3: 139 70 6
x58448:	mov [bp + 14], ax	; 3: 137 70 14

toupper$2:	; Call 8 islower 0
x58451:	mov word [bp + 8], toupper$3	; 5: 199 70 8 97 228
x58456:	mov [bp + 10], bp	; 3: 137 110 10
x58459:	add bp, 8	; 3: 131 197 8
x58462:	jmp islower	; 3: 233 84 134

toupper$3:	; PostCall 8

toupper$4:	; GetReturnValue £temporary267

toupper$5:	; Equal 31 £temporary267 0
x58465:	cmp bx, 0	; 3: 131 251 0
x58468:	je toupper$31	; 2: 116 122

toupper$6:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

toupper$7:	; Call 8 localeconv 0
x58470:	mov word [bp + 8], toupper$8	; 5: 199 70 8 116 228
x58475:	mov [bp + 10], bp	; 3: 137 110 10
x58478:	add bp, 8	; 3: 131 197 8
x58481:	jmp localeconv	; 3: 233 4 58

toupper$8:	; PostCall 8

toupper$9:	; GetReturnValue £temporary268

toupper$10:	; Assign localeConvPtr £temporary268
x58484:	mov [bp + 8], bx	; 3: 137 94 8

toupper$11:	; Equal 28 localeConvPtr 0
x58487:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x58491:	je toupper$28	; 2: 116 82

toupper$12:	; Deref £temporary270 -> localeConvPtr localeConvPtr 12
x58493:	mov si, [bp + 8]	; 3: 139 118 8

toupper$13:	; Assign lowerCase £temporary270 -> localeConvPtr
x58496:	mov ax, [si + 12]	; 3: 139 68 12
x58499:	mov [bp + 10], ax	; 3: 137 70 10

toupper$14:	; Deref £temporary271 -> localeConvPtr localeConvPtr 14
x58502:	mov si, [bp + 8]	; 3: 139 118 8

toupper$15:	; Assign upperCase £temporary271 -> localeConvPtr
x58505:	mov ax, [si + 14]	; 3: 139 68 14
x58508:	mov [bp + 12], ax	; 3: 137 70 12

toupper$16:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

toupper$17:	; Parameter 14 lowerCase 6
x58511:	mov ax, [bp + 10]	; 3: 139 70 10
x58514:	mov [bp + 20], ax	; 3: 137 70 20

toupper$18:	; Parameter 14 c 8
x58517:	mov ax, [bp + 6]	; 3: 139 70 6
x58520:	mov [bp + 22], ax	; 3: 137 70 22

toupper$19:	; Call 14 strchr 0
x58523:	mov word [bp + 14], toupper$20	; 5: 199 70 14 169 228
x58528:	mov [bp + 16], bp	; 3: 137 110 16
x58531:	add bp, 14	; 3: 131 197 14
x58534:	jmp strchr	; 3: 233 21 61

toupper$20:	; PostCall 14

toupper$21:	; GetReturnValue £temporary272

toupper$22:	; BinarySubtract index £temporary272 lowerCase
x58537:	sub bx, [bp + 10]	; 3: 43 94 10
x58540:	mov [bp + 14], bx	; 3: 137 94 14

toupper$23:	; BinaryAdd £temporary275 upperCase index
x58543:	mov si, [bp + 12]	; 3: 139 118 12
x58546:	add si, [bp + 14]	; 3: 3 118 14

toupper$24:	; Deref £temporary274 -> £temporary275 £temporary275 0

toupper$25:	; IntegralToIntegral £temporary276 £temporary274 -> £temporary275
x58549:	mov bl, [si]	; 2: 138 28
x58551:	and bx, 255	; 4: 129 227 255 0
x58555:	cmp bl, 0	; 3: 128 251 0
x58558:	jge toupper$26	; 2: 125 4
x58560:	neg bl	; 2: 246 219
x58562:	neg bx	; 2: 247 219

toupper$26:	; SetReturnValue £temporary276

toupper$27:	; Return £temporary276
x58564:	mov ax, [bp]	; 3: 139 70 0
x58567:	mov di, [bp + 4]	; 3: 139 126 4
x58570:	mov bp, [bp + 2]	; 3: 139 110 2
x58573:	jmp ax	; 2: 255 224

toupper$28:	; BinarySubtract £temporary277 c 32
x58575:	mov bx, [bp + 6]	; 3: 139 94 6
x58578:	sub bx, 32	; 3: 131 235 32

toupper$29:	; SetReturnValue £temporary277

toupper$30:	; Return £temporary277
x58581:	mov ax, [bp]	; 3: 139 70 0
x58584:	mov di, [bp + 4]	; 3: 139 126 4
x58587:	mov bp, [bp + 2]	; 3: 139 110 2
x58590:	jmp ax	; 2: 255 224

toupper$31:	; SetReturnValue c
x58592:	mov bx, [bp + 6]	; 3: 139 94 6

toupper$32:	; Return c
x58595:	mov ax, [bp]	; 3: 139 70 0
x58598:	mov di, [bp + 4]	; 3: 139 126 4
x58601:	mov bp, [bp + 2]	; 3: 139 110 2
x58604:	jmp ax	; 2: 255 224

toupper$33:	; FunctionEnd toupper

locale_test:	; Empty

locale_test$1:	; Return 0
x58606:	mov ax, [bp]	; 3: 139 70 0
x58609:	mov di, [bp + 4]	; 3: 139 126 4
x58612:	mov bp, [bp + 2]	; 3: 139 110 2
x58615:	jmp ax	; 2: 255 224

locale_test$2:	; FunctionEnd locale_test

$StackTop:
x58617:
