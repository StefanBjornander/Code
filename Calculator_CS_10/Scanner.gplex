%namespace Calculator
//%option noparser, verbose

%{
  // Empty.
%}

LINE_COMMENT \/\/.*
BLOCK_COMMENT \/\*.*\*\/
TEXT \"[^\"]*\"
NAME [a-zA-Z_][a-zA-Z0-9_]*
VALUE [0-9]+|([0-9]+\.[0-9]+)
WHITE_SPACE [ \t\r\n\f]

%%

"assign"  { return ((int) Tokens.ASSIGN);  }
"read"    { return ((int) Tokens.READ);    }
"write"   { return ((int) Tokens.WRITE);   }
"newline" { return ((int) Tokens.NEWLINE); }
"sin"     { return ((int) Tokens.SIN);     }
"cos"     { return ((int) Tokens.COS);     }
"tan"     { return ((int) Tokens.TAN);     }
"log"     { return ((int) Tokens.LOG);     }
"exp"     { return ((int) Tokens.EXP);     }
"log10"   { return ((int) Tokens.LOG10);   }
"exp10"   { return ((int) Tokens.EXP10);   }
"sqrt"    { return ((int) Tokens.SQRT);    }

"=" { return ((int) Tokens.EQUAL);       }
"+" { return ((int) Tokens.PLUS);        }
"-" { return ((int) Tokens.MINUS);       }
"*" { return ((int) Tokens.TIMES);       }
"/" { return ((int) Tokens.DIVIDE);      }
"(" { return ((int) Tokens.LEFT_PAREN);  }
")" { return ((int) Tokens.RIGHT_PAREN); }
"," { return ((int) Tokens.COMMA);       }
";" { return ((int) Tokens.SEMICOLON);   }

{NAME} {
  yylval.name = yytext;
  return ((int) Tokens.NAME);
}

{TEXT} {
  yylval.text = yytext.Substring(1, yytext.Length - 2);
  return ((int) Tokens.TEXT);
}

{VALUE} {
  yylval.value = Double.Parse(yytext);
//  yylval.value = Double.Parse(yytext, NumberStyles.Any, CultureInfo.InvariantCulture);
  return ((int) Tokens.VALUE);
}

{LINE_COMMENT} {
  // Empty.
}

{BLOCK_COMMENT} {
  // Empty.
}

{WHITE_SPACE} {
  // Empty.
}

<<EOF>> {
  return ((int) Tokens.EOF);
}

. {
  Console.Error.WriteLine("Unknown character: \'" + yytext + "\'.");
  Environment.Exit(-1);
}