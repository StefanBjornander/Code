%namespace Calculator
%partial

%{
  // Empty.
%}

%token ASSIGN READ WRITE NEWLINE EQUAL PLUS MINUS TIMES DIVIDE SIN COS TAN LOG EXP LOG10 EXP10 SQRT LEFT_PAREN RIGHT_PAREN COMMA SEMICOLON

%union {
  public string name;
  public string text;
  public double value;
  public List<string> nameList;
  public List<double> valueList;
}

%token <text> TEXT
%token <name> NAME
%token <value> VALUE

%type <nameList> name_list
%type <valueList> expression_list
%type <value> expression binary_expression unary_expression primary_expression

%%

statement_list:
    statement
  | statement statement_list;

statement:
    ASSIGN NAME EQUAL expression SEMICOLON {
      MainX.VariableMap[$2] = $4;
    }

  | READ optional_output name_list SEMICOLON {
      try {
        string buffer = Console.In.ReadLine();
        string[] textArray = buffer.Split(',');

        if ($3.Count != textArray.Length) {
          Console.Error.WriteLine("Invalid number of values.");
          Environment.Exit(-1);
        }
      
        for (int index = 0; index < $3.Count; ++index) {
          string name = $3[index], text = textArray[index];
          double value = double.Parse(text);
//          double value = double.Parse(text, NumberStyles.Any, CultureInfo.InvariantCulture);
          MainX.VariableMap[name] = value;
        }
      }
      catch (Exception exception) {
        Console.Error.WriteLine("Invalid input: " + exception.ToString());
        Environment.Exit(-1);
      }
    }

  | WRITE optional_output expression_list SEMICOLON {
      bool first = true;
      foreach (double value in $3) {
        Console.Out.Write((first ? "" : ", ") + value);
        first = false;
      }

      Console.Out.WriteLine();
    }

  | NEWLINE SEMICOLON {
      Console.Out.WriteLine();
    };

optional_output:
    /* Empty. */
  | TEXT COMMA {
      Console.Out.Write($1);
    };

name_list:
    NAME {
      $$ = new List<string>();
      $$.Add($1);
    }
  | name_list COMMA NAME {
      $$ = $1;
      $$.Add($3);
    };

expression_list:
    expression {
      $$ = new List<double>();
      $$.Add($1);
    }
  | expression_list COMMA expression {
      $$ = $1;
      $$.Add($3);
    };

expression:
    binary_expression {
      $$ = $1;
    }
  | expression PLUS binary_expression {
      $$ = $1 + $3;
    }
  | expression MINUS binary_expression {
      $$ = $1 - $3;
    };

binary_expression:
    unary_expression {
      $$ = $1;
    }
  | binary_expression TIMES unary_expression {
      $$ = $1 * $3;
    }
  | binary_expression DIVIDE unary_expression {
      if ($3 == 0) {
        Console.Error.WriteLine("Division by Zero.");
        Environment.Exit(-1);
      }

      $$ = $1 / $3;
    };

unary_expression:
    primary_expression {
      $$ = $1;
    }
  | PLUS unary_expression {
      $$ = $2;
    }
  | MINUS unary_expression {
      $$ = -$2;
    }
  | SIN unary_expression {
      $$ = Math.Sin($2);
    }
  | COS unary_expression {
      $$ = Math.Cos($2);
    }
  | TAN unary_expression {
      $$ = Math.Tan($2);
    }
  | LOG unary_expression {
      if ($2 <= 0) {
        Console.Error.WriteLine("Logarithm of Non-Positive Value.");
        Environment.Exit(-1);
      }

      $$ = Math.Log($2);
    }
  | EXP unary_expression {
      $$ = Math.Exp($2);
    }
  | LOG10 unary_expression {
      if ($2 <= 0) {
        Console.Error.WriteLine("Logarithm of Non-Positive Value.");
        Environment.Exit(-1);
      }

      $$ = Math.Log10($2);
    }
  | EXP10 unary_expression {
      $$ = Math.Pow(10, $2);
    }
  | SQRT unary_expression {
      if ($2 < 0) {
        Console.Error.WriteLine("Square Root of Negativ Value.");
        Environment.Exit(-1);
      }

      $$ = Math.Sqrt($2);
    };

primary_expression:
    LEFT_PAREN expression RIGHT_PAREN {
      $$ = $2;
    }
  | NAME {
      if (MainX.VariableMap.ContainsKey($1)) {
        $$ = MainX.VariableMap[$1];
      }
      else {
        Console.Error.WriteLine("Unknown Name: \"" + $1 + "\".");
        Environment.Exit(-1);
      }
    }
  | VALUE {
      $$ = $1;
    };

%%
