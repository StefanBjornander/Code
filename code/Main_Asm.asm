	org 100h
	; Initialize Stack Pointer
x256:	mov bp, $StackTop	; 3: 189 239 228
	; Initialize Heap Pointer
x259:	mov word [65534], 65534	; 6: 199 6 254 255 254 255
	; Initialize FPU Control Word, truncate mode => set bit 10 and 11.
x265:	fstcw [bp]	; 4: 155 217 126 0
x269:	or word [bp], 3072	; 5: 129 78 0 0 12
x274:	fldcw [bp]	; 3: 217 110 0
x277:	mov word [$StackTop], 0	; 6: 199 6 239 228 0 0

main:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$1:	; Call 6 math_test 0
x283:	mov word [bp + 6], main$2	; 5: 199 70 6 41 1
x288:	mov [bp + 8], bp	; 3: 137 110 8
x291:	add bp, 6	; 3: 131 197 6
x294:	jmp math_test	; 3: 233 247 0

main$2:	; PostCall 6

main$3:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$4:	; Call 6 file_test 0
x297:	mov word [bp + 6], main$5	; 5: 199 70 6 55 1
x302:	mov [bp + 8], bp	; 3: 137 110 8
x305:	add bp, 6	; 3: 131 197 6
x308:	jmp file_test	; 3: 233 16 55

main$5:	; PostCall 6

main$6:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$7:	; Call 6 time_test 0
x311:	mov word [bp + 6], main$8	; 5: 199 70 6 69 1
x316:	mov [bp + 8], bp	; 3: 137 110 8
x319:	add bp, 6	; 3: 131 197 6
x322:	jmp time_test	; 3: 233 80 117

main$8:	; PostCall 6

main$9:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$10:	; Call 6 assert_test 0
x325:	mov word [bp + 6], main$11	; 5: 199 70 6 83 1
x330:	mov [bp + 8], bp	; 3: 137 110 8
x333:	add bp, 6	; 3: 131 197 6
x336:	jmp assert_test	; 3: 233 40 140

main$11:	; PostCall 6

main$12:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$13:	; Call 6 malloc_test 0
x339:	mov word [bp + 6], main$14	; 5: 199 70 6 97 1
x344:	mov [bp + 8], bp	; 3: 137 110 8
x347:	add bp, 6	; 3: 131 197 6
x350:	jmp malloc_test	; 3: 233 226 140

main$14:	; PostCall 6

main$15:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$16:	; Call 6 print_test 0
x353:	mov word [bp + 6], main$17	; 5: 199 70 6 111 1
x358:	mov [bp + 8], bp	; 3: 137 110 8
x361:	add bp, 6	; 3: 131 197 6
x364:	jmp print_test	; 3: 233 109 145

main$17:	; PostCall 6

main$18:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$19:	; Call 6 limits_test 0
x367:	mov word [bp + 6], main$20	; 5: 199 70 6 125 1
x372:	mov [bp + 8], bp	; 3: 137 110 8
x375:	add bp, 6	; 3: 131 197 6
x378:	jmp limits_test	; 3: 233 194 149

main$20:	; PostCall 6

main$21:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$22:	; Call 6 float_test 0
x381:	mov word [bp + 6], main$23	; 5: 199 70 6 139 1
x386:	mov [bp + 8], bp	; 3: 137 110 8
x389:	add bp, 6	; 3: 131 197 6
x392:	jmp float_test	; 3: 233 110 152

main$23:	; PostCall 6

main$24:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$25:	; Call 6 setjmp_test 0
x395:	mov word [bp + 6], main$26	; 5: 199 70 6 153 1
x400:	mov [bp + 8], bp	; 3: 137 110 8
x403:	add bp, 6	; 3: 131 197 6
x406:	jmp setjmp_test	; 3: 233 107 152

main$26:	; PostCall 6

main$27:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$28:	; Call 6 stdio_test 0
x409:	mov word [bp + 6], main$29	; 5: 199 70 6 167 1
x414:	mov [bp + 8], bp	; 3: 137 110 8
x417:	add bp, 6	; 3: 131 197 6
x420:	jmp stdio_test	; 3: 233 25 154

main$29:	; PostCall 6

main$30:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$31:	; Call 6 string_test 0
x423:	mov word [bp + 6], main$32	; 5: 199 70 6 181 1
x428:	mov [bp + 8], bp	; 3: 137 110 8
x431:	add bp, 6	; 3: 131 197 6
x434:	jmp string_test	; 3: 233 137 169

main$32:	; PostCall 6

main$33:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$34:	; Call 6 stdio_test 0
x437:	mov word [bp + 6], main$35	; 5: 199 70 6 195 1
x442:	mov [bp + 8], bp	; 3: 137 110 8
x445:	add bp, 6	; 3: 131 197 6
x448:	jmp stdio_test	; 3: 233 253 153

main$35:	; PostCall 6

main$36:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$37:	; Call 6 stdlib_test 0
x451:	mov word [bp + 6], main$38	; 5: 199 70 6 209 1
x456:	mov [bp + 8], bp	; 3: 137 110 8
x459:	add bp, 6	; 3: 131 197 6
x462:	jmp stdlib_test	; 3: 233 41 183

main$38:	; PostCall 6

main$39:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$40:	; Call 6 strtol_test 0
x465:	mov word [bp + 6], main$41	; 5: 199 70 6 223 1
x470:	mov [bp + 8], bp	; 3: 137 110 8
x473:	add bp, 6	; 3: 131 197 6
x476:	jmp strtol_test	; 3: 233 140 194

main$41:	; PostCall 6

main$42:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$43:	; Call 6 strtoul_test 0
x479:	mov word [bp + 6], main$44	; 5: 199 70 6 237 1
x484:	mov [bp + 8], bp	; 3: 137 110 8
x487:	add bp, 6	; 3: 131 197 6
x490:	jmp strtoul_test	; 3: 233 78 206

main$44:	; PostCall 6

main$45:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$46:	; Call 6 character_test 0
x493:	mov word [bp + 6], main$47	; 5: 199 70 6 251 1
x498:	mov [bp + 8], bp	; 3: 137 110 8
x501:	add bp, 6	; 3: 131 197 6
x504:	jmp character_test	; 3: 233 16 218

main$47:	; PostCall 6

main$48:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

main$49:	; Call 6 locale_test 0
x507:	mov word [bp + 6], main$50	; 5: 199 70 6 9 2
x512:	mov [bp + 8], bp	; 3: 137 110 8
x515:	add bp, 6	; 3: 131 197 6
x518:	jmp locale_test	; 3: 233 219 226

main$50:	; PostCall 6

main$51:	; Return 0
x521:	cmp word [bp], 0	; 4: 131 126 0 0
x525:	je return_label$0	; 2: 116 11
x527:	mov ax, [bp]	; 3: 139 70 0
x530:	mov di, [bp + 4]	; 3: 139 126 4
x533:	mov bp, [bp + 2]	; 3: 139 110 2
x536:	jmp ax	; 2: 255 224

return_label$0:
x538:	mov al, 0	; 2: 176 0
x540:	mov ah, 76	; 2: 180 76
x542:	int 33	; 2: 205 33

main$52:	; FunctionEnd main

math_test:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$1:	; PushFloat 0.333333333
x544:	fld qword [@10215$float8$0.333333333#]	; 4: 221 6 174 4

math_test$2:	; Parameter 6 0.333333333 6
x548:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$3:	; Call 6 math_test_1 0
x551:	mov word [bp + 6], math_test$4	; 5: 199 70 6 53 2
x556:	mov [bp + 8], bp	; 3: 137 110 8
x559:	add bp, 6	; 3: 131 197 6
x562:	jmp math_test_1	; 3: 233 89 3

math_test$4:	; PostCall 6

math_test$5:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$6:	; PushFloat 0.75
x565:	fld qword [@10219$float8$0.75#]	; 4: 221 6 182 4

math_test$7:	; Parameter 6 0.75 6
x569:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$8:	; Call 6 math_test_1 0
x572:	mov word [bp + 6], math_test$9	; 5: 199 70 6 74 2
x577:	mov [bp + 8], bp	; 3: 137 110 8
x580:	add bp, 6	; 3: 131 197 6
x583:	jmp math_test_1	; 3: 233 68 3

math_test$9:	; PostCall 6

math_test$10:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$11:	; PushFloat 1.000010
x586:	fld qword [@10223$float8$1.000010#]	; 4: 221 6 190 4

math_test$12:	; Parameter 6 1.000010 6
x590:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$13:	; Call 6 math_test_1 0
x593:	mov word [bp + 6], math_test$14	; 5: 199 70 6 95 2
x598:	mov [bp + 8], bp	; 3: 137 110 8
x601:	add bp, 6	; 3: 131 197 6
x604:	jmp math_test_1	; 3: 233 47 3

math_test$14:	; PostCall 6

math_test$15:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$16:	; PushFloat 1.0
x607:	fld1	; 2: 217 232

math_test$17:	; Parameter 6 1.0 6
x609:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$18:	; Call 6 math_test_1 0
x612:	mov word [bp + 6], math_test$19	; 5: 199 70 6 114 2
x617:	mov [bp + 8], bp	; 3: 137 110 8
x620:	add bp, 6	; 3: 131 197 6
x623:	jmp math_test_1	; 3: 233 28 3

math_test$19:	; PostCall 6

math_test$20:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$21:	; PushFloat 0.999999
x626:	fld qword [@10231$float8$0.999999#]	; 4: 221 6 198 4

math_test$22:	; Parameter 6 0.999999 6
x630:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$23:	; Call 6 math_test_1 0
x633:	mov word [bp + 6], math_test$24	; 5: 199 70 6 135 2
x638:	mov [bp + 8], bp	; 3: 137 110 8
x641:	add bp, 6	; 3: 131 197 6
x644:	jmp math_test_1	; 3: 233 7 3

math_test$24:	; PostCall 6

math_test$25:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$26:	; PushFloat 0.000010
x647:	fld qword [@10235$float8$0.000010#]	; 4: 221 6 206 4

math_test$27:	; Parameter 6 0.000010 6
x651:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$28:	; Call 6 math_test_1 0
x654:	mov word [bp + 6], math_test$29	; 5: 199 70 6 156 2
x659:	mov [bp + 8], bp	; 3: 137 110 8
x662:	add bp, 6	; 3: 131 197 6
x665:	jmp math_test_1	; 3: 233 242 2

math_test$29:	; PostCall 6

math_test$30:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$31:	; PushZero
x668:	fldz	; 2: 217 238

math_test$32:	; Parameter 6 0 6
x670:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$33:	; Call 6 math_test_1 0
x673:	mov word [bp + 6], math_test$34	; 5: 199 70 6 175 2
x678:	mov [bp + 8], bp	; 3: 137 110 8
x681:	add bp, 6	; 3: 131 197 6
x684:	jmp math_test_1	; 3: 233 223 2

math_test$34:	; PostCall 6

math_test$35:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$36:	; PushFloat -0.000010
x687:	fld qword [@10243$float8$minus0.000010#]	; 4: 221 6 214 4

math_test$37:	; Parameter 6 -0.000010 6
x691:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$38:	; Call 6 math_test_1 0
x694:	mov word [bp + 6], math_test$39	; 5: 199 70 6 196 2
x699:	mov [bp + 8], bp	; 3: 137 110 8
x702:	add bp, 6	; 3: 131 197 6
x705:	jmp math_test_1	; 3: 233 202 2

math_test$39:	; PostCall 6

math_test$40:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$41:	; PushFloat -0.999999
x708:	fld qword [@10247$float8$minus0.999999#]	; 4: 221 6 222 4

math_test$42:	; Parameter 6 -0.999999 6
x712:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$43:	; Call 6 math_test_1 0
x715:	mov word [bp + 6], math_test$44	; 5: 199 70 6 217 2
x720:	mov [bp + 8], bp	; 3: 137 110 8
x723:	add bp, 6	; 3: 131 197 6
x726:	jmp math_test_1	; 3: 233 181 2

math_test$44:	; PostCall 6

math_test$45:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$46:	; PushFloat -1.0
x729:	fld qword [@10251$float8$minus1.0#]	; 4: 221 6 230 4

math_test$47:	; Parameter 6 -1.0 6
x733:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$48:	; Call 6 math_test_1 0
x736:	mov word [bp + 6], math_test$49	; 5: 199 70 6 238 2
x741:	mov [bp + 8], bp	; 3: 137 110 8
x744:	add bp, 6	; 3: 131 197 6
x747:	jmp math_test_1	; 3: 233 160 2

math_test$49:	; PostCall 6

math_test$50:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$51:	; PushFloat -1.000010
x750:	fld qword [@10255$float8$minus1.000010#]	; 4: 221 6 238 4

math_test$52:	; Parameter 6 -1.000010 6
x754:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$53:	; Call 6 math_test_1 0
x757:	mov word [bp + 6], math_test$54	; 5: 199 70 6 3 3
x762:	mov [bp + 8], bp	; 3: 137 110 8
x765:	add bp, 6	; 3: 131 197 6
x768:	jmp math_test_1	; 3: 233 139 2

math_test$54:	; PostCall 6

math_test$55:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$56:	; PushFloat 6.28
x771:	fld qword [@10261$float8$6.28#]	; 4: 221 6 246 4

math_test$57:	; Parameter 6 6.28 6
x775:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$58:	; Call 6 math_test_1 0
x778:	mov word [bp + 6], math_test$59	; 5: 199 70 6 24 3
x783:	mov [bp + 8], bp	; 3: 137 110 8
x786:	add bp, 6	; 3: 131 197 6
x789:	jmp math_test_1	; 3: 233 118 2

math_test$59:	; PostCall 6

math_test$60:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$61:	; PushFloat 3.14
x792:	fld qword [@10265$float8$3.14#]	; 4: 221 6 254 4

math_test$62:	; Parameter 6 3.14 6
x796:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$63:	; Call 6 math_test_1 0
x799:	mov word [bp + 6], math_test$64	; 5: 199 70 6 45 3
x804:	mov [bp + 8], bp	; 3: 137 110 8
x807:	add bp, 6	; 3: 131 197 6
x810:	jmp math_test_1	; 3: 233 97 2

math_test$64:	; PostCall 6

math_test$65:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$66:	; PushFloat 1.57
x813:	fld qword [@10271$float8$1.57#]	; 4: 221 6 6 5

math_test$67:	; Parameter 6 1.57 6
x817:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$68:	; Call 6 math_test_1 0
x820:	mov word [bp + 6], math_test$69	; 5: 199 70 6 66 3
x825:	mov [bp + 8], bp	; 3: 137 110 8
x828:	add bp, 6	; 3: 131 197 6
x831:	jmp math_test_1	; 3: 233 76 2

math_test$69:	; PostCall 6

math_test$70:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$71:	; PushFloat -1.57
x834:	fld qword [@10278$float8$minus1.57#]	; 4: 221 6 14 5

math_test$72:	; Parameter 6 -1.57 6
x838:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$73:	; Call 6 math_test_1 0
x841:	mov word [bp + 6], math_test$74	; 5: 199 70 6 87 3
x846:	mov [bp + 8], bp	; 3: 137 110 8
x849:	add bp, 6	; 3: 131 197 6
x852:	jmp math_test_1	; 3: 233 55 2

math_test$74:	; PostCall 6

math_test$75:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$76:	; PushFloat -3.14
x855:	fld qword [@10283$float8$minus3.14#]	; 4: 221 6 22 5

math_test$77:	; Parameter 6 -3.14 6
x859:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$78:	; Call 6 math_test_1 0
x862:	mov word [bp + 6], math_test$79	; 5: 199 70 6 108 3
x867:	mov [bp + 8], bp	; 3: 137 110 8
x870:	add bp, 6	; 3: 131 197 6
x873:	jmp math_test_1	; 3: 233 34 2

math_test$79:	; PostCall 6

math_test$80:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$81:	; PushFloat -6.28
x876:	fld qword [@10289$float8$minus6.28#]	; 4: 221 6 30 5

math_test$82:	; Parameter 6 -6.28 6
x880:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$83:	; Call 6 math_test_1 0
x883:	mov word [bp + 6], math_test$84	; 5: 199 70 6 129 3
x888:	mov [bp + 8], bp	; 3: 137 110 8
x891:	add bp, 6	; 3: 131 197 6
x894:	jmp math_test_1	; 3: 233 13 2

math_test$84:	; PostCall 6

math_test$85:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$86:	; PushFloat 1.0
x897:	fld1	; 2: 217 232

math_test$87:	; Parameter 6 1.0 6
x899:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$88:	; PushFloat 2.0
x902:	fld qword [@10295$float8$2.0#]	; 4: 221 6 38 5

math_test$89:	; Parameter 6 2.0 14
x906:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$90:	; Call 6 math_test_2 0
x909:	mov word [bp + 6], math_test$91	; 5: 199 70 6 155 3
x914:	mov [bp + 8], bp	; 3: 137 110 8
x917:	add bp, 6	; 3: 131 197 6
x920:	jmp math_test_2	; 3: 233 77 49

math_test$91:	; PostCall 6

math_test$92:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$93:	; PushFloat 3.0
x923:	fld qword [@10300$float8$3.0#]	; 4: 221 6 46 5

math_test$94:	; Parameter 6 3.0 6
x927:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$95:	; PushFloat 4.0
x930:	fld qword [@10302$float8$4.0#]	; 4: 221 6 54 5

math_test$96:	; Parameter 6 4.0 14
x934:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$97:	; Call 6 math_test_2 0
x937:	mov word [bp + 6], math_test$98	; 5: 199 70 6 183 3
x942:	mov [bp + 8], bp	; 3: 137 110 8
x945:	add bp, 6	; 3: 131 197 6
x948:	jmp math_test_2	; 3: 233 49 49

math_test$98:	; PostCall 6

math_test$99:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$100:	; PushZero
x951:	fldz	; 2: 217 238

math_test$101:	; Parameter 6 0 6
x953:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$102:	; PushFloat 2.0
x956:	fld qword [@10309$float8$2.0#]	; 4: 221 6 62 5

math_test$103:	; Parameter 6 2.0 14
x960:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$104:	; Call 6 math_test_2 0
x963:	mov word [bp + 6], math_test$105	; 5: 199 70 6 209 3
x968:	mov [bp + 8], bp	; 3: 137 110 8
x971:	add bp, 6	; 3: 131 197 6
x974:	jmp math_test_2	; 3: 233 23 49

math_test$105:	; PostCall 6

math_test$106:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$107:	; PushZero
x977:	fldz	; 2: 217 238

math_test$108:	; Parameter 6 0 6
x979:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$109:	; PushFloat -2.0
x982:	fld qword [@10316$float8$minus2.0#]	; 4: 221 6 70 5

math_test$110:	; Parameter 6 -2.0 14
x986:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$111:	; Call 6 math_test_2 0
x989:	mov word [bp + 6], math_test$112	; 5: 199 70 6 235 3
x994:	mov [bp + 8], bp	; 3: 137 110 8
x997:	add bp, 6	; 3: 131 197 6
x1000:	jmp math_test_2	; 3: 233 253 48

math_test$112:	; PostCall 6

math_test$113:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$114:	; PushOne
x1003:	fld1	; 2: 217 232

math_test$115:	; Parameter 6 1 6
x1005:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$116:	; PushFloat 2.0
x1008:	fld qword [@10323$float8$2.0#]	; 4: 221 6 78 5

math_test$117:	; Parameter 6 2.0 14
x1012:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$118:	; Call 6 math_test_2 0
x1015:	mov word [bp + 6], math_test$119	; 5: 199 70 6 5 4
x1020:	mov [bp + 8], bp	; 3: 137 110 8
x1023:	add bp, 6	; 3: 131 197 6
x1026:	jmp math_test_2	; 3: 233 227 48

math_test$119:	; PostCall 6

math_test$120:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$121:	; PushOne
x1029:	fld1	; 2: 217 232

math_test$122:	; Parameter 6 1 6
x1031:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$123:	; PushFloat -2.0
x1034:	fld qword [@10330$float8$minus2.0#]	; 4: 221 6 86 5

math_test$124:	; Parameter 6 -2.0 14
x1038:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$125:	; Call 6 math_test_2 0
x1041:	mov word [bp + 6], math_test$126	; 5: 199 70 6 31 4
x1046:	mov [bp + 8], bp	; 3: 137 110 8
x1049:	add bp, 6	; 3: 131 197 6
x1052:	jmp math_test_2	; 3: 233 201 48

math_test$126:	; PostCall 6

math_test$127:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$128:	; PushZero
x1055:	fldz	; 2: 217 238

math_test$129:	; Parameter 6 0 6
x1057:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$130:	; PushZero
x1060:	fldz	; 2: 217 238

math_test$131:	; Parameter 6 0 14
x1062:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$132:	; Call 6 math_test_2 0
x1065:	mov word [bp + 6], math_test$133	; 5: 199 70 6 55 4
x1070:	mov [bp + 8], bp	; 3: 137 110 8
x1073:	add bp, 6	; 3: 131 197 6
x1076:	jmp math_test_2	; 3: 233 177 48

math_test$133:	; PostCall 6

math_test$134:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$135:	; PushFloat 2
x1079:	fld qword [@10343$float8$2#]	; 4: 221 6 94 5

math_test$136:	; Parameter 6 2 6
x1083:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$137:	; PushZero
x1086:	fldz	; 2: 217 238

math_test$138:	; Parameter 6 0 14
x1088:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$139:	; Call 6 math_test_2 0
x1091:	mov word [bp + 6], math_test$140	; 5: 199 70 6 81 4
x1096:	mov [bp + 8], bp	; 3: 137 110 8
x1099:	add bp, 6	; 3: 131 197 6
x1102:	jmp math_test_2	; 3: 233 151 48

math_test$140:	; PostCall 6

math_test$141:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$142:	; PushFloat -2
x1105:	fld qword [@10350$float8$minus2#]	; 4: 221 6 102 5

math_test$143:	; Parameter 6 -2 6
x1109:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$144:	; PushZero
x1112:	fldz	; 2: 217 238

math_test$145:	; Parameter 6 0 14
x1114:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$146:	; Call 6 math_test_2 0
x1117:	mov word [bp + 6], math_test$147	; 5: 199 70 6 107 4
x1122:	mov [bp + 8], bp	; 3: 137 110 8
x1125:	add bp, 6	; 3: 131 197 6
x1128:	jmp math_test_2	; 3: 233 125 48

math_test$147:	; PostCall 6

math_test$148:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$149:	; PushFloat -1.0
x1131:	fld qword [@10356$float8$minus1.0#]	; 4: 221 6 110 5

math_test$150:	; Parameter 6 -1.0 6
x1135:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$151:	; PushFloat -1.0
x1138:	fld qword [@10358$float8$minus1.0#]	; 4: 221 6 118 5

math_test$152:	; Parameter 6 -1.0 14
x1142:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$153:	; Call 6 math_test_2 0
x1145:	mov word [bp + 6], math_test$154	; 5: 199 70 6 135 4
x1150:	mov [bp + 8], bp	; 3: 137 110 8
x1153:	add bp, 6	; 3: 131 197 6
x1156:	jmp math_test_2	; 3: 233 97 48

math_test$154:	; PostCall 6

math_test$155:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test$156:	; PushFloat -2.0
x1159:	fld qword [@10363$float8$minus2.0#]	; 4: 221 6 126 5

math_test$157:	; Parameter 6 -2.0 6
x1163:	fstp qword [bp + 12]	; 3: 221 94 12

math_test$158:	; PushFloat -4.0
x1166:	fld qword [@10365$float8$minus4.0#]	; 4: 221 6 134 5

math_test$159:	; Parameter 6 -4.0 14
x1170:	fstp qword [bp + 20]	; 3: 221 94 20

math_test$160:	; Call 6 math_test_2 0
x1173:	mov word [bp + 6], math_test$161	; 5: 199 70 6 163 4
x1178:	mov [bp + 8], bp	; 3: 137 110 8
x1181:	add bp, 6	; 3: 131 197 6
x1184:	jmp math_test_2	; 3: 233 69 48

math_test$161:	; PostCall 6

math_test$162:	; Return 0
x1187:	mov ax, [bp]	; 3: 139 70 0
x1190:	mov di, [bp + 4]	; 3: 139 126 4
x1193:	mov bp, [bp + 2]	; 3: 139 110 2
x1196:	jmp ax	; 2: 255 224

math_test$163:	; FunctionEnd math_test

@10215$float8$0.333333333#:
x1198:	dq 0.333333333	; 8: 22 181 249 84 85 85 213 63

@10219$float8$0.75#:
x1206:	dq 0.75	; 8: 0 0 0 0 0 0 232 63

@10223$float8$1.000010#:
x1214:	dq 1.000010	; 8: 114 196 90 124 10 0 240 63

@10231$float8$0.999999#:
x1222:	dq 0.999999	; 8: 233 11 33 231 253 255 239 63

@10235$float8$0.000010#:
x1230:	dq 0.000010	; 8: 241 104 227 136 181 248 228 62

@10243$float8$minus0.000010#:
x1238:	dq -0.000010	; 8: 241 104 227 136 181 248 228 190

@10247$float8$minus0.999999#:
x1246:	dq -0.999999	; 8: 233 11 33 231 253 255 239 191

@10251$float8$minus1.0#:
x1254:	dq -1.0	; 8: 0 0 0 0 0 0 240 191

@10255$float8$minus1.000010#:
x1262:	dq -1.000010	; 8: 114 196 90 124 10 0 240 191

@10261$float8$6.28#:
x1270:	dq 6.28	; 8: 31 133 235 81 184 30 25 64

@10265$float8$3.14#:
x1278:	dq 3.14	; 8: 31 133 235 81 184 30 9 64

@10271$float8$1.57#:
x1286:	dq 1.57	; 8: 31 133 235 81 184 30 249 63

@10278$float8$minus1.57#:
x1294:	dq -1.57	; 8: 31 133 235 81 184 30 249 191

@10283$float8$minus3.14#:
x1302:	dq -3.14	; 8: 31 133 235 81 184 30 9 192

@10289$float8$minus6.28#:
x1310:	dq -6.28	; 8: 31 133 235 81 184 30 25 192

@10295$float8$2.0#:
x1318:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

@10300$float8$3.0#:
x1326:	dq 3.0	; 8: 0 0 0 0 0 0 8 64

@10302$float8$4.0#:
x1334:	dq 4.0	; 8: 0 0 0 0 0 0 16 64

@10309$float8$2.0#:
x1342:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

@10316$float8$minus2.0#:
x1350:	dq -2.0	; 8: 0 0 0 0 0 0 0 192

@10323$float8$2.0#:
x1358:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

@10330$float8$minus2.0#:
x1366:	dq -2.0	; 8: 0 0 0 0 0 0 0 192

@10343$float8$2#:
x1374:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

@10350$float8$minus2#:
x1382:	dq -2.0	; 8: 0 0 0 0 0 0 0 192

@10356$float8$minus1.0#:
x1390:	dq -1.0	; 8: 0 0 0 0 0 0 240 191

@10358$float8$minus1.0#:
x1398:	dq -1.0	; 8: 0 0 0 0 0 0 240 191

@10363$float8$minus2.0#:
x1406:	dq -2.0	; 8: 0 0 0 0 0 0 0 192

@10365$float8$minus4.0#:
x1414:	dq -4.0	; 8: 0 0 0 0 0 0 16 192

math_test_1:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$1:	; Parameter 14 string_3C25f3E0A# 6
x1422:	mov word [bp + 20], @10410$string_3C25f3E0A#	; 5: 199 70 20 196 10

math_test_1$2:	; PushFloat x
x1427:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$3:	; Parameter 14 x 8
x1430:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$4:	; Call 14 printf 0
x1433:	mov word [bp + 14], math_test_1$5	; 5: 199 70 14 172 5
x1438:	mov [bp + 16], bp	; 3: 137 110 16
x1441:	add bp, 14	; 3: 131 197 14
x1444:	mov di, bp	; 2: 137 239
x1446:	add di, 8	; 3: 131 199 8
x1449:	jmp printf	; 3: 233 88 7

math_test_1$5:	; PostCall 14

math_test_1$6:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$7:	; Parameter 14 string_2020sin2825f29203D2025f2C20errno203D2025i0A# 6
x1452:	mov word [bp + 20], @10412$string_2020sin2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 202 10

math_test_1$8:	; PushFloat x
x1457:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$9:	; Parameter 14 x 8
x1460:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$10:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$11:	; PushFloat x
x1463:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$12:	; Parameter 14 x 22
x1466:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$13:	; Call 14 sin 16
x1469:	mov word [bp + 30], math_test_1$14	; 5: 199 70 30 203 5
x1474:	mov [bp + 32], bp	; 3: 137 110 32
x1477:	add bp, 30	; 3: 131 197 30
x1480:	jmp sin	; 3: 233 189 37

math_test_1$14:	; PostCall 14

math_test_1$15:	; GetReturnValue £temporary4632

math_test_1$16:	; Parameter 14 £temporary4632 16
x1483:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$17:	; Parameter 14 errno 24
x1486:	mov ax, [errno]	; 3: 161 230 10
x1489:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$18:	; Call 14 printf 0
x1492:	mov word [bp + 14], math_test_1$19	; 5: 199 70 14 231 5
x1497:	mov [bp + 16], bp	; 3: 137 110 16
x1500:	add bp, 14	; 3: 131 197 14
x1503:	mov di, bp	; 2: 137 239
x1505:	add di, 18	; 3: 131 199 18
x1508:	jmp printf	; 3: 233 29 7

math_test_1$19:	; PostCall 14

math_test_1$20:	; Assign errno 0
x1511:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$21:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$22:	; Parameter 14 string_2020cos2825f29203D2025f2C20errno203D2025i0A# 6
x1517:	mov word [bp + 20], @10417$string_2020cos2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 232 10

math_test_1$23:	; PushFloat x
x1522:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$24:	; Parameter 14 x 8
x1525:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$25:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$26:	; PushFloat x
x1528:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$27:	; Parameter 14 x 22
x1531:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$28:	; Call 14 cos 16
x1534:	mov word [bp + 30], math_test_1$29	; 5: 199 70 30 12 6
x1539:	mov [bp + 32], bp	; 3: 137 110 32
x1542:	add bp, 30	; 3: 131 197 30
x1545:	jmp cos	; 3: 233 237 38

math_test_1$29:	; PostCall 14

math_test_1$30:	; GetReturnValue £temporary4634

math_test_1$31:	; Parameter 14 £temporary4634 16
x1548:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$32:	; Parameter 14 errno 24
x1551:	mov ax, [errno]	; 3: 161 230 10
x1554:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$33:	; Call 14 printf 0
x1557:	mov word [bp + 14], math_test_1$34	; 5: 199 70 14 40 6
x1562:	mov [bp + 16], bp	; 3: 137 110 16
x1565:	add bp, 14	; 3: 131 197 14
x1568:	mov di, bp	; 2: 137 239
x1570:	add di, 18	; 3: 131 199 18
x1573:	jmp printf	; 3: 233 220 6

math_test_1$34:	; PostCall 14

math_test_1$35:	; Assign errno 0
x1576:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$36:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$37:	; Parameter 14 string_2020tan2825f29203D2025f2C20errno203D2025i0A# 6
x1582:	mov word [bp + 20], @10422$string_2020tan2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 4 11

math_test_1$38:	; PushFloat x
x1587:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$39:	; Parameter 14 x 8
x1590:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$40:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$41:	; PushFloat x
x1593:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$42:	; Parameter 14 x 22
x1596:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$43:	; Call 14 tan 16
x1599:	mov word [bp + 30], math_test_1$44	; 5: 199 70 30 77 6
x1604:	mov [bp + 32], bp	; 3: 137 110 32
x1607:	add bp, 30	; 3: 131 197 30
x1610:	jmp tan	; 3: 233 166 39

math_test_1$44:	; PostCall 14

math_test_1$45:	; GetReturnValue £temporary4636

math_test_1$46:	; Parameter 14 £temporary4636 16
x1613:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$47:	; Parameter 14 errno 24
x1616:	mov ax, [errno]	; 3: 161 230 10
x1619:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$48:	; Call 14 printf 0
x1622:	mov word [bp + 14], math_test_1$49	; 5: 199 70 14 105 6
x1627:	mov [bp + 16], bp	; 3: 137 110 16
x1630:	add bp, 14	; 3: 131 197 14
x1633:	mov di, bp	; 2: 137 239
x1635:	add di, 18	; 3: 131 199 18
x1638:	jmp printf	; 3: 233 155 6

math_test_1$49:	; PostCall 14

math_test_1$50:	; Assign errno 0
x1641:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$51:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$52:	; Parameter 14 string_2020asin2825f29203D2025f2C20errno203D2025i0A# 6
x1647:	mov word [bp + 20], @10427$string_2020asin2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 32 11

math_test_1$53:	; PushFloat x
x1652:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$54:	; Parameter 14 x 8
x1655:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$55:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$56:	; PushFloat x
x1658:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$57:	; Parameter 14 x 22
x1661:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$58:	; Call 14 asin 16
x1664:	mov word [bp + 30], math_test_1$59	; 5: 199 70 30 142 6
x1669:	mov [bp + 32], bp	; 3: 137 110 32
x1672:	add bp, 30	; 3: 131 197 30
x1675:	jmp asin	; 3: 233 192 39

math_test_1$59:	; PostCall 14

math_test_1$60:	; GetReturnValue £temporary4638

math_test_1$61:	; Parameter 14 £temporary4638 16
x1678:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$62:	; Parameter 14 errno 24
x1681:	mov ax, [errno]	; 3: 161 230 10
x1684:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$63:	; Call 14 printf 0
x1687:	mov word [bp + 14], math_test_1$64	; 5: 199 70 14 170 6
x1692:	mov [bp + 16], bp	; 3: 137 110 16
x1695:	add bp, 14	; 3: 131 197 14
x1698:	mov di, bp	; 2: 137 239
x1700:	add di, 18	; 3: 131 199 18
x1703:	jmp printf	; 3: 233 90 6

math_test_1$64:	; PostCall 14

math_test_1$65:	; Assign errno 0
x1706:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$66:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$67:	; Parameter 14 string_2020acos2825f29203D2025f2C20errno203D2025i0A# 6
x1712:	mov word [bp + 20], @10432$string_2020acos2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 61 11

math_test_1$68:	; PushFloat x
x1717:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$69:	; Parameter 14 x 8
x1720:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$70:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$71:	; PushFloat x
x1723:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$72:	; Parameter 14 x 22
x1726:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$73:	; Call 14 acos 16
x1729:	mov word [bp + 30], math_test_1$74	; 5: 199 70 30 207 6
x1734:	mov [bp + 32], bp	; 3: 137 110 32
x1737:	add bp, 30	; 3: 131 197 30
x1740:	jmp acos	; 3: 233 82 42

math_test_1$74:	; PostCall 14

math_test_1$75:	; GetReturnValue £temporary4640

math_test_1$76:	; Parameter 14 £temporary4640 16
x1743:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$77:	; Parameter 14 errno 24
x1746:	mov ax, [errno]	; 3: 161 230 10
x1749:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$78:	; Call 14 printf 0
x1752:	mov word [bp + 14], math_test_1$79	; 5: 199 70 14 235 6
x1757:	mov [bp + 16], bp	; 3: 137 110 16
x1760:	add bp, 14	; 3: 131 197 14
x1763:	mov di, bp	; 2: 137 239
x1765:	add di, 18	; 3: 131 199 18
x1768:	jmp printf	; 3: 233 25 6

math_test_1$79:	; PostCall 14

math_test_1$80:	; Assign errno 0
x1771:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$81:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$82:	; Parameter 14 string_2020atan2825f29203D2025f2C20errno203D2025i0A# 6
x1777:	mov word [bp + 20], @10437$string_2020atan2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 90 11

math_test_1$83:	; PushFloat x
x1782:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$84:	; Parameter 14 x 8
x1785:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$85:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$86:	; PushFloat x
x1788:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$87:	; Parameter 14 x 22
x1791:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$88:	; Call 14 atan 16
x1794:	mov word [bp + 30], math_test_1$89	; 5: 199 70 30 16 7
x1799:	mov [bp + 32], bp	; 3: 137 110 32
x1802:	add bp, 30	; 3: 131 197 30
x1805:	jmp atan	; 3: 233 128 40

math_test_1$89:	; PostCall 14

math_test_1$90:	; GetReturnValue £temporary4642

math_test_1$91:	; Parameter 14 £temporary4642 16
x1808:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$92:	; Parameter 14 errno 24
x1811:	mov ax, [errno]	; 3: 161 230 10
x1814:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$93:	; Call 14 printf 0
x1817:	mov word [bp + 14], math_test_1$94	; 5: 199 70 14 44 7
x1822:	mov [bp + 16], bp	; 3: 137 110 16
x1825:	add bp, 14	; 3: 131 197 14
x1828:	mov di, bp	; 2: 137 239
x1830:	add di, 18	; 3: 131 199 18
x1833:	jmp printf	; 3: 233 216 5

math_test_1$94:	; PostCall 14

math_test_1$95:	; Assign errno 0
x1836:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$96:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$97:	; Parameter 14 string_2020exp2825f29203D2025f2C20errno203D2025i0A# 6
x1842:	mov word [bp + 20], @10442$string_2020exp2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 119 11

math_test_1$98:	; PushFloat x
x1847:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$99:	; Parameter 14 x 8
x1850:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$100:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$101:	; PushFloat x
x1853:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$102:	; Parameter 14 x 22
x1856:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$103:	; Call 14 exp 16
x1859:	mov word [bp + 30], math_test_1$104	; 5: 199 70 30 81 7
x1864:	mov [bp + 32], bp	; 3: 137 110 32
x1867:	add bp, 30	; 3: 131 197 30
x1870:	jmp exp	; 3: 233 240 34

math_test_1$104:	; PostCall 14

math_test_1$105:	; GetReturnValue £temporary4644

math_test_1$106:	; Parameter 14 £temporary4644 16
x1873:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$107:	; Parameter 14 errno 24
x1876:	mov ax, [errno]	; 3: 161 230 10
x1879:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$108:	; Call 14 printf 0
x1882:	mov word [bp + 14], math_test_1$109	; 5: 199 70 14 109 7
x1887:	mov [bp + 16], bp	; 3: 137 110 16
x1890:	add bp, 14	; 3: 131 197 14
x1893:	mov di, bp	; 2: 137 239
x1895:	add di, 18	; 3: 131 199 18
x1898:	jmp printf	; 3: 233 151 5

math_test_1$109:	; PostCall 14

math_test_1$110:	; Assign errno 0
x1901:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$111:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$112:	; Parameter 14 string_2020log2825f29203D2025f2C20errno203D2025i0A# 6
x1907:	mov word [bp + 20], @10447$string_2020log2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 147 11

math_test_1$113:	; PushFloat x
x1912:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$114:	; Parameter 14 x 8
x1915:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$115:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$116:	; PushFloat x
x1918:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$117:	; Parameter 14 x 22
x1921:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$118:	; Call 14 log 16
x1924:	mov word [bp + 30], math_test_1$119	; 5: 199 70 30 146 7
x1929:	mov [bp + 32], bp	; 3: 137 110 32
x1932:	add bp, 30	; 3: 131 197 30
x1935:	jmp log	; 3: 233 199 31

math_test_1$119:	; PostCall 14

math_test_1$120:	; GetReturnValue £temporary4646

math_test_1$121:	; Parameter 14 £temporary4646 16
x1938:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$122:	; Parameter 14 errno 24
x1941:	mov ax, [errno]	; 3: 161 230 10
x1944:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$123:	; Call 14 printf 0
x1947:	mov word [bp + 14], math_test_1$124	; 5: 199 70 14 174 7
x1952:	mov [bp + 16], bp	; 3: 137 110 16
x1955:	add bp, 14	; 3: 131 197 14
x1958:	mov di, bp	; 2: 137 239
x1960:	add di, 18	; 3: 131 199 18
x1963:	jmp printf	; 3: 233 86 5

math_test_1$124:	; PostCall 14

math_test_1$125:	; Assign errno 0
x1966:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$126:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$127:	; Parameter 14 string_2020log102825f29203D2025f2C20errno203D2025i0A# 6
x1972:	mov word [bp + 20], @10452$string_2020log102825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 175 11

math_test_1$128:	; PushFloat x
x1977:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$129:	; Parameter 14 x 8
x1980:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$130:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$131:	; PushFloat x
x1983:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$132:	; Parameter 14 x 22
x1986:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$133:	; Call 14 log10 16
x1989:	mov word [bp + 30], math_test_1$134	; 5: 199 70 30 211 7
x1994:	mov [bp + 32], bp	; 3: 137 110 32
x1997:	add bp, 30	; 3: 131 197 30
x2000:	jmp log10	; 3: 233 89 31

math_test_1$134:	; PostCall 14

math_test_1$135:	; GetReturnValue £temporary4648

math_test_1$136:	; Parameter 14 £temporary4648 16
x2003:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$137:	; Parameter 14 errno 24
x2006:	mov ax, [errno]	; 3: 161 230 10
x2009:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$138:	; Call 14 printf 0
x2012:	mov word [bp + 14], math_test_1$139	; 5: 199 70 14 239 7
x2017:	mov [bp + 16], bp	; 3: 137 110 16
x2020:	add bp, 14	; 3: 131 197 14
x2023:	mov di, bp	; 2: 137 239
x2025:	add di, 18	; 3: 131 199 18
x2028:	jmp printf	; 3: 233 21 5

math_test_1$139:	; PostCall 14

math_test_1$140:	; Assign errno 0
x2031:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$141:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$142:	; Parameter 14 string_2020sinh2825f29203D2025f2C20errno203D2025i0A# 6
x2037:	mov word [bp + 20], @10457$string_2020sinh2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 205 11

math_test_1$143:	; PushFloat x
x2042:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$144:	; Parameter 14 x 8
x2045:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$145:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$146:	; PushFloat x
x2048:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$147:	; Parameter 14 x 22
x2051:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$148:	; Call 14 sinh 16
x2054:	mov word [bp + 30], math_test_1$149	; 5: 199 70 30 20 8
x2059:	mov [bp + 32], bp	; 3: 137 110 32
x2062:	add bp, 30	; 3: 131 197 30
x2065:	jmp sinh	; 3: 233 215 41

math_test_1$149:	; PostCall 14

math_test_1$150:	; GetReturnValue £temporary4650

math_test_1$151:	; Parameter 14 £temporary4650 16
x2068:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$152:	; Parameter 14 errno 24
x2071:	mov ax, [errno]	; 3: 161 230 10
x2074:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$153:	; Call 14 printf 0
x2077:	mov word [bp + 14], math_test_1$154	; 5: 199 70 14 48 8
x2082:	mov [bp + 16], bp	; 3: 137 110 16
x2085:	add bp, 14	; 3: 131 197 14
x2088:	mov di, bp	; 2: 137 239
x2090:	add di, 18	; 3: 131 199 18
x2093:	jmp printf	; 3: 233 212 4

math_test_1$154:	; PostCall 14

math_test_1$155:	; Assign errno 0
x2096:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$156:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$157:	; Parameter 14 string_2020cosh2825f29203D2025f2C20errno203D2025i0A# 6
x2102:	mov word [bp + 20], @10462$string_2020cosh2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 234 11

math_test_1$158:	; PushFloat x
x2107:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$159:	; Parameter 14 x 8
x2110:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$160:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$161:	; PushFloat x
x2113:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$162:	; Parameter 14 x 22
x2116:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$163:	; Call 14 cosh 16
x2119:	mov word [bp + 30], math_test_1$164	; 5: 199 70 30 85 8
x2124:	mov [bp + 32], bp	; 3: 137 110 32
x2127:	add bp, 30	; 3: 131 197 30
x2130:	jmp cosh	; 3: 233 231 41

math_test_1$164:	; PostCall 14

math_test_1$165:	; GetReturnValue £temporary4652

math_test_1$166:	; Parameter 14 £temporary4652 16
x2133:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$167:	; Parameter 14 errno 24
x2136:	mov ax, [errno]	; 3: 161 230 10
x2139:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$168:	; Call 14 printf 0
x2142:	mov word [bp + 14], math_test_1$169	; 5: 199 70 14 113 8
x2147:	mov [bp + 16], bp	; 3: 137 110 16
x2150:	add bp, 14	; 3: 131 197 14
x2153:	mov di, bp	; 2: 137 239
x2155:	add di, 18	; 3: 131 199 18
x2158:	jmp printf	; 3: 233 147 4

math_test_1$169:	; PostCall 14

math_test_1$170:	; Assign errno 0
x2161:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$171:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$172:	; Parameter 14 string_2020tanh2825f29203D2025f2C20errno203D2025i0A# 6
x2167:	mov word [bp + 20], @10467$string_2020tanh2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 7 12

math_test_1$173:	; PushFloat x
x2172:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$174:	; Parameter 14 x 8
x2175:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$175:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$176:	; PushFloat x
x2178:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$177:	; Parameter 14 x 22
x2181:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$178:	; Call 14 tanh 16
x2184:	mov word [bp + 30], math_test_1$179	; 5: 199 70 30 150 8
x2189:	mov [bp + 32], bp	; 3: 137 110 32
x2192:	add bp, 30	; 3: 131 197 30
x2195:	jmp tanh	; 3: 233 247 41

math_test_1$179:	; PostCall 14

math_test_1$180:	; GetReturnValue £temporary4654

math_test_1$181:	; Parameter 14 £temporary4654 16
x2198:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$182:	; Parameter 14 errno 24
x2201:	mov ax, [errno]	; 3: 161 230 10
x2204:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$183:	; Call 14 printf 0
x2207:	mov word [bp + 14], math_test_1$184	; 5: 199 70 14 178 8
x2212:	mov [bp + 16], bp	; 3: 137 110 16
x2215:	add bp, 14	; 3: 131 197 14
x2218:	mov di, bp	; 2: 137 239
x2220:	add di, 18	; 3: 131 199 18
x2223:	jmp printf	; 3: 233 82 4

math_test_1$184:	; PostCall 14

math_test_1$185:	; Assign errno 0
x2226:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$186:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$187:	; Parameter 14 string_2020sqrt2825f29203D2025f2C20errno203D2025i0A# 6
x2232:	mov word [bp + 20], @10472$string_2020sqrt2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 36 12

math_test_1$188:	; PushFloat x
x2237:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$189:	; Parameter 14 x 8
x2240:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$190:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$191:	; PushFloat x
x2243:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$192:	; Parameter 14 x 22
x2246:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$193:	; Call 14 sqrt 16
x2249:	mov word [bp + 30], math_test_1$194	; 5: 199 70 30 215 8
x2254:	mov [bp + 32], bp	; 3: 137 110 32
x2257:	add bp, 30	; 3: 131 197 30
x2260:	jmp sqrt	; 3: 233 53 38

math_test_1$194:	; PostCall 14

math_test_1$195:	; GetReturnValue £temporary4656

math_test_1$196:	; Parameter 14 £temporary4656 16
x2263:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$197:	; Parameter 14 errno 24
x2266:	mov ax, [errno]	; 3: 161 230 10
x2269:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$198:	; Call 14 printf 0
x2272:	mov word [bp + 14], math_test_1$199	; 5: 199 70 14 243 8
x2277:	mov [bp + 16], bp	; 3: 137 110 16
x2280:	add bp, 14	; 3: 131 197 14
x2283:	mov di, bp	; 2: 137 239
x2285:	add di, 18	; 3: 131 199 18
x2288:	jmp printf	; 3: 233 17 4

math_test_1$199:	; PostCall 14

math_test_1$200:	; Assign errno 0
x2291:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$201:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$202:	; Parameter 14 string_2020floor2825f29203D2025f2C20errno203D2025i0A# 6
x2297:	mov word [bp + 20], @10477$string_2020floor2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 65 12

math_test_1$203:	; PushFloat x
x2302:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$204:	; Parameter 14 x 8
x2305:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$205:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$206:	; PushFloat x
x2308:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$207:	; Parameter 14 x 22
x2311:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$208:	; Call 14 floor 16
x2314:	mov word [bp + 30], math_test_1$209	; 5: 199 70 30 24 9
x2319:	mov [bp + 32], bp	; 3: 137 110 32
x2322:	add bp, 30	; 3: 131 197 30
x2325:	jmp floor	; 3: 233 167 33

math_test_1$209:	; PostCall 14

math_test_1$210:	; GetReturnValue £temporary4658

math_test_1$211:	; Parameter 14 £temporary4658 16
x2328:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$212:	; Parameter 14 errno 24
x2331:	mov ax, [errno]	; 3: 161 230 10
x2334:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$213:	; Call 14 printf 0
x2337:	mov word [bp + 14], math_test_1$214	; 5: 199 70 14 52 9
x2342:	mov [bp + 16], bp	; 3: 137 110 16
x2345:	add bp, 14	; 3: 131 197 14
x2348:	mov di, bp	; 2: 137 239
x2350:	add di, 18	; 3: 131 199 18
x2353:	jmp printf	; 3: 233 208 3

math_test_1$214:	; PostCall 14

math_test_1$215:	; Assign errno 0
x2356:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$216:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$217:	; Parameter 14 string_2020ceil2825f29203D2025f2C20errno203D2025i0A# 6
x2362:	mov word [bp + 20], @10482$string_2020ceil2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 95 12

math_test_1$218:	; PushFloat x
x2367:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$219:	; Parameter 14 x 8
x2370:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$220:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$221:	; PushFloat x
x2373:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$222:	; Parameter 14 x 22
x2376:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$223:	; Call 14 ceil 16
x2379:	mov word [bp + 30], math_test_1$224	; 5: 199 70 30 89 9
x2384:	mov [bp + 32], bp	; 3: 137 110 32
x2387:	add bp, 30	; 3: 131 197 30
x2390:	jmp ceil	; 3: 233 180 33

math_test_1$224:	; PostCall 14

math_test_1$225:	; GetReturnValue £temporary4660

math_test_1$226:	; Parameter 14 £temporary4660 16
x2393:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$227:	; Parameter 14 errno 24
x2396:	mov ax, [errno]	; 3: 161 230 10
x2399:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$228:	; Call 14 printf 0
x2402:	mov word [bp + 14], math_test_1$229	; 5: 199 70 14 117 9
x2407:	mov [bp + 16], bp	; 3: 137 110 16
x2410:	add bp, 14	; 3: 131 197 14
x2413:	mov di, bp	; 2: 137 239
x2415:	add di, 18	; 3: 131 199 18
x2418:	jmp printf	; 3: 233 143 3

math_test_1$229:	; PostCall 14

math_test_1$230:	; Assign errno 0
x2421:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$231:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$232:	; Parameter 14 string_2020fabs2825f29203D2025f2C20errno203D2025i0A# 6
x2427:	mov word [bp + 20], @10487$string_2020fabs2825f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 20 124 12

math_test_1$233:	; PushFloat x
x2432:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$234:	; Parameter 14 x 8
x2435:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$235:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$236:	; PushFloat x
x2438:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$237:	; Parameter 14 x 22
x2441:	fstp qword [bp + 36]	; 3: 221 94 36

math_test_1$238:	; Call 14 fabs 16
x2444:	mov word [bp + 30], math_test_1$239	; 5: 199 70 30 154 9
x2449:	mov [bp + 32], bp	; 3: 137 110 32
x2452:	add bp, 30	; 3: 131 197 30
x2455:	jmp fabs	; 3: 233 96 27

math_test_1$239:	; PostCall 14

math_test_1$240:	; GetReturnValue £temporary4662

math_test_1$241:	; Parameter 14 £temporary4662 16
x2458:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_1$242:	; Parameter 14 errno 24
x2461:	mov ax, [errno]	; 3: 161 230 10
x2464:	mov [bp + 38], ax	; 3: 137 70 38

math_test_1$243:	; Call 14 printf 0
x2467:	mov word [bp + 14], math_test_1$244	; 5: 199 70 14 182 9
x2472:	mov [bp + 16], bp	; 3: 137 110 16
x2475:	add bp, 14	; 3: 131 197 14
x2478:	mov di, bp	; 2: 137 239
x2480:	add di, 18	; 3: 131 199 18
x2483:	jmp printf	; 3: 233 78 3

math_test_1$244:	; PostCall 14

math_test_1$245:	; Assign errno 0
x2486:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$246:	; Assign j 0
x2492:	mov word [bp + 14], 0	; 5: 199 70 14 0 0

math_test_1$247:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$248:	; PushFloat x
x2497:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$249:	; Parameter 16 x 6
x2500:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$250:	; address £temporary4664 j
x2503:	mov si, bp	; 2: 137 238
x2505:	add si, 14	; 3: 131 198 14

math_test_1$251:	; Parameter 16 £temporary4664 14
x2508:	mov [bp + 30], si	; 3: 137 118 30

math_test_1$252:	; Call 16 frexp 0
x2511:	mov word [bp + 16], math_test_1$253	; 5: 199 70 16 221 9
x2516:	mov [bp + 18], bp	; 3: 137 110 18
x2519:	add bp, 16	; 3: 131 197 16
x2522:	jmp frexp	; 3: 233 241 40

math_test_1$253:	; PostCall 16

math_test_1$254:	; GetReturnValue £temporary4665

math_test_1$255:	; PopFloat z
x2525:	fstp qword [bp + 16]	; 3: 221 94 16

math_test_1$256:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$257:	; Parameter 24 string_frexp202825f2C20p29203D202825f2C2025i292C20errno203D2025i0A# 6
x2528:	mov word [bp + 30], @10498$string_frexp202825f2C20p29203D202825f2C2025i292C20errno203D2025i0A#	; 5: 199 70 30 153 12

math_test_1$258:	; PushFloat x
x2533:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$259:	; Parameter 24 x 8
x2536:	fstp qword [bp + 32]	; 3: 221 94 32

math_test_1$260:	; PushFloat z
x2539:	fld qword [bp + 16]	; 3: 221 70 16

math_test_1$261:	; Parameter 24 z 16
x2542:	fstp qword [bp + 40]	; 3: 221 94 40

math_test_1$262:	; Parameter 24 j 24
x2545:	mov ax, [bp + 14]	; 3: 139 70 14
x2548:	mov [bp + 48], ax	; 3: 137 70 48

math_test_1$263:	; Parameter 24 errno 26
x2551:	mov ax, [errno]	; 3: 161 230 10
x2554:	mov [bp + 50], ax	; 3: 137 70 50

math_test_1$264:	; Call 24 printf 0
x2557:	mov word [bp + 24], math_test_1$265	; 5: 199 70 24 16 10
x2562:	mov [bp + 26], bp	; 3: 137 110 26
x2565:	add bp, 24	; 3: 131 197 24
x2568:	mov di, bp	; 2: 137 239
x2570:	add di, 20	; 3: 131 199 20
x2573:	jmp printf	; 3: 233 244 2

math_test_1$265:	; PostCall 24

math_test_1$266:	; Equal 272 errno 0
x2576:	cmp word [errno], 0	; 5: 131 62 230 10 0
x2581:	je math_test_1$272	; 2: 116 25

math_test_1$267:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$268:	; Parameter 24 string_Error20message3A# 6
x2583:	mov word [bp + 30], @10503$string_Error20message3A#	; 5: 199 70 30 191 12

math_test_1$269:	; Call 24 perror 0
x2588:	mov word [bp + 24], math_test_1$270	; 5: 199 70 24 42 10
x2593:	mov [bp + 26], bp	; 3: 137 110 26
x2596:	add bp, 24	; 3: 131 197 24
x2599:	jmp perror	; 3: 233 168 41

math_test_1$270:	; PostCall 24

math_test_1$271:	; Assign errno 0
x2602:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$272:	; PushZero
x2608:	fldz	; 2: 217 238

math_test_1$273:	; PopFloat w
x2610:	fstp qword [bp + 14]	; 3: 221 94 14

math_test_1$274:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$275:	; PushFloat x
x2613:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$276:	; Parameter 22 x 6
x2616:	fstp qword [bp + 28]	; 3: 221 94 28

math_test_1$277:	; address £temporary4669 w
x2619:	mov si, bp	; 2: 137 238
x2621:	add si, 14	; 3: 131 198 14

math_test_1$278:	; Parameter 22 £temporary4669 14
x2624:	mov [bp + 36], si	; 3: 137 118 36

math_test_1$279:	; Call 22 modf 0
x2627:	mov word [bp + 22], math_test_1$280	; 5: 199 70 22 81 10
x2632:	mov [bp + 24], bp	; 3: 137 110 24
x2635:	add bp, 22	; 3: 131 197 22
x2638:	jmp modf	; 3: 233 27 42

math_test_1$280:	; PostCall 22

math_test_1$281:	; GetReturnValue £temporary4670

math_test_1$282:	; PopFloat z
x2641:	fstp qword [bp + 22]	; 3: 221 94 22

math_test_1$283:	; CallHeader 30 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$284:	; Parameter 30 string_modf202825f2C20p29203D202825f2C2025f292C20errno203D2025i0A# 6
x2644:	mov word [bp + 36], @10513$string_modf202825f2C20p29203D202825f2C2025f292C20errno203D2025i0A#	; 5: 199 70 36 206 12

math_test_1$285:	; PushFloat x
x2649:	fld qword [bp + 6]	; 3: 221 70 6

math_test_1$286:	; Parameter 30 x 8
x2652:	fstp qword [bp + 38]	; 3: 221 94 38

math_test_1$287:	; PushFloat z
x2655:	fld qword [bp + 22]	; 3: 221 70 22

math_test_1$288:	; Parameter 30 z 16
x2658:	fstp qword [bp + 46]	; 3: 221 94 46

math_test_1$289:	; PushFloat w
x2661:	fld qword [bp + 14]	; 3: 221 70 14

math_test_1$290:	; Parameter 30 w 24
x2664:	fstp qword [bp + 54]	; 3: 221 94 54

math_test_1$291:	; Parameter 30 errno 32
x2667:	mov ax, [errno]	; 3: 161 230 10
x2670:	mov [bp + 62], ax	; 3: 137 70 62

math_test_1$292:	; Call 30 printf 0
x2673:	mov word [bp + 30], math_test_1$293	; 5: 199 70 30 132 10
x2678:	mov [bp + 32], bp	; 3: 137 110 32
x2681:	add bp, 30	; 3: 131 197 30
x2684:	mov di, bp	; 2: 137 239
x2686:	add di, 26	; 3: 131 199 26
x2689:	jmp printf	; 3: 233 128 2

math_test_1$293:	; PostCall 30

math_test_1$294:	; Equal 300 errno 0
x2692:	cmp word [errno], 0	; 5: 131 62 230 10 0
x2697:	je math_test_1$300	; 2: 116 25

math_test_1$295:	; CallHeader 30 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$296:	; Parameter 30 string_Error20message3A# 6
x2699:	mov word [bp + 36], @10518$string_Error20message3A#	; 5: 199 70 36 243 12

math_test_1$297:	; Call 30 perror 0
x2704:	mov word [bp + 30], math_test_1$298	; 5: 199 70 30 158 10
x2709:	mov [bp + 32], bp	; 3: 137 110 32
x2712:	add bp, 30	; 3: 131 197 30
x2715:	jmp perror	; 3: 233 52 41

math_test_1$298:	; PostCall 30

math_test_1$299:	; Assign errno 0
x2718:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_1$300:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_1$301:	; Parameter 14 string_0A# 6
x2724:	mov word [bp + 20], @10522$string_0A#	; 5: 199 70 20 2 13

math_test_1$302:	; Call 14 printf 0
x2729:	mov word [bp + 14], math_test_1$303	; 5: 199 70 14 185 10
x2734:	mov [bp + 16], bp	; 3: 137 110 16
x2737:	add bp, 14	; 3: 131 197 14
x2740:	mov di, bp	; 2: 137 239
x2742:	jmp printf	; 3: 233 75 2

math_test_1$303:	; PostCall 14

math_test_1$304:	; Return 0
x2745:	mov ax, [bp]	; 3: 139 70 0
x2748:	mov di, [bp + 4]	; 3: 139 126 4
x2751:	mov bp, [bp + 2]	; 3: 139 110 2
x2754:	jmp ax	; 2: 255 224

math_test_1$305:	; FunctionEnd math_test_1

@10410$string_3C25f3E0A#:
x2756:	db "<%f>", 10, 0	; 6: 60 37 102 62 10 0

@10412$string_2020sin2825f29203D2025f2C20errno203D2025i0A#:
x2762:	db "  sin(%f) = %f, errno = %i", 10, 0	; 28: 32 32 115 105 110 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

errno:
x2790:	dw 0	; 2: 0 0

@10417$string_2020cos2825f29203D2025f2C20errno203D2025i0A#:
x2792:	db "  cos(%f) = %f, errno = %i", 10, 0	; 28: 32 32 99 111 115 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10422$string_2020tan2825f29203D2025f2C20errno203D2025i0A#:
x2820:	db "  tan(%f) = %f, errno = %i", 10, 0	; 28: 32 32 116 97 110 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10427$string_2020asin2825f29203D2025f2C20errno203D2025i0A#:
x2848:	db "  asin(%f) = %f, errno = %i", 10, 0	; 29: 32 32 97 115 105 110 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10432$string_2020acos2825f29203D2025f2C20errno203D2025i0A#:
x2877:	db "  acos(%f) = %f, errno = %i", 10, 0	; 29: 32 32 97 99 111 115 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10437$string_2020atan2825f29203D2025f2C20errno203D2025i0A#:
x2906:	db "  atan(%f) = %f, errno = %i", 10, 0	; 29: 32 32 97 116 97 110 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10442$string_2020exp2825f29203D2025f2C20errno203D2025i0A#:
x2935:	db "  exp(%f) = %f, errno = %i", 10, 0	; 28: 32 32 101 120 112 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10447$string_2020log2825f29203D2025f2C20errno203D2025i0A#:
x2963:	db "  log(%f) = %f, errno = %i", 10, 0	; 28: 32 32 108 111 103 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10452$string_2020log102825f29203D2025f2C20errno203D2025i0A#:
x2991:	db "  log10(%f) = %f, errno = %i", 10, 0	; 30: 32 32 108 111 103 49 48 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10457$string_2020sinh2825f29203D2025f2C20errno203D2025i0A#:
x3021:	db "  sinh(%f) = %f, errno = %i", 10, 0	; 29: 32 32 115 105 110 104 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10462$string_2020cosh2825f29203D2025f2C20errno203D2025i0A#:
x3050:	db "  cosh(%f) = %f, errno = %i", 10, 0	; 29: 32 32 99 111 115 104 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10467$string_2020tanh2825f29203D2025f2C20errno203D2025i0A#:
x3079:	db "  tanh(%f) = %f, errno = %i", 10, 0	; 29: 32 32 116 97 110 104 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10472$string_2020sqrt2825f29203D2025f2C20errno203D2025i0A#:
x3108:	db "  sqrt(%f) = %f, errno = %i", 10, 0	; 29: 32 32 115 113 114 116 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10477$string_2020floor2825f29203D2025f2C20errno203D2025i0A#:
x3137:	db "  floor(%f) = %f, errno = %i", 10, 0	; 30: 32 32 102 108 111 111 114 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10482$string_2020ceil2825f29203D2025f2C20errno203D2025i0A#:
x3167:	db "  ceil(%f) = %f, errno = %i", 10, 0	; 29: 32 32 99 101 105 108 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10487$string_2020fabs2825f29203D2025f2C20errno203D2025i0A#:
x3196:	db "  fabs(%f) = %f, errno = %i", 10, 0	; 29: 32 32 102 97 98 115 40 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10498$string_frexp202825f2C20p29203D202825f2C2025i292C20errno203D2025i0A#:
x3225:	db "frexp (%f, p) = (%f, %i), errno = %i", 10, 0	; 38: 102 114 101 120 112 32 40 37 102 44 32 112 41 32 61 32 40 37 102 44 32 37 105 41 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10503$string_Error20message3A#:
x3263:	db "Error message:", 0	; 15: 69 114 114 111 114 32 109 101 115 115 97 103 101 58 0

@10513$string_modf202825f2C20p29203D202825f2C2025f292C20errno203D2025i0A#:
x3278:	db "modf (%f, p) = (%f, %f), errno = %i", 10, 0	; 37: 109 111 100 102 32 40 37 102 44 32 112 41 32 61 32 40 37 102 44 32 37 102 41 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10518$string_Error20message3A#:
x3315:	db "Error message:", 0	; 15: 69 114 114 111 114 32 109 101 115 115 97 103 101 58 0

@10522$string_0A#:
x3330:	db 10, 0	; 2: 10 0

printf:	; address £temporary2202 format
x3332:	mov si, bp	; 2: 137 238
x3334:	add si, 6	; 3: 131 198 6

printf$1:	; IntegralToIntegral £temporary2203 £temporary2202

printf$2:	; BinaryAdd arg_list £temporary2203 2
x3337:	add si, 2	; 3: 131 198 2
x3340:	mov [di + 8], si	; 3: 137 117 8

printf$3:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printf$4:	; Parameter 10 format 6
x3343:	mov ax, [bp + 6]	; 3: 139 70 6
x3346:	mov [di + 16], ax	; 3: 137 69 16

printf$5:	; Parameter 10 arg_list 8
x3349:	mov ax, [di + 8]	; 3: 139 69 8
x3352:	mov [di + 18], ax	; 3: 137 69 18

printf$6:	; Call 10 vprintf 0
x3355:	mov word [di + 10], printf$7	; 5: 199 69 10 46 13
x3360:	mov [di + 12], bp	; 3: 137 109 12
x3363:	mov [di + 14], di	; 3: 137 125 14
x3366:	add di, 10	; 3: 131 199 10
x3369:	mov bp, di	; 2: 137 253
x3371:	nop	; 1: 144
x3372:	jmp vprintf	; 2: 235 11

printf$7:	; PostCall 10

printf$8:	; GetReturnValue £temporary2205

printf$9:	; SetReturnValue £temporary2205

printf$10:	; Return £temporary2205
x3374:	mov ax, [bp]	; 3: 139 70 0
x3377:	mov di, [bp + 4]	; 3: 139 126 4
x3380:	mov bp, [bp + 2]	; 3: 139 110 2
x3383:	jmp ax	; 2: 255 224

printf$11:	; FunctionEnd printf

vprintf:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

vprintf$1:	; Parameter 10 stdout 6
x3385:	mov ax, [stdout]	; 3: 161 100 13
x3388:	mov [bp + 16], ax	; 3: 137 70 16

vprintf$2:	; Parameter 10 format 8
x3391:	mov ax, [bp + 6]	; 3: 139 70 6
x3394:	mov [bp + 18], ax	; 3: 137 70 18

vprintf$3:	; Parameter 10 arg_list 10
x3397:	mov ax, [bp + 8]	; 3: 139 70 8
x3400:	mov [bp + 20], ax	; 3: 137 70 20

vprintf$4:	; Call 10 vfprintf 0
x3403:	mov word [bp + 10], vprintf$5	; 5: 199 70 10 89 13
x3408:	mov [bp + 12], bp	; 3: 137 110 12
x3411:	add bp, 10	; 3: 131 197 10
x3414:	jmp vfprintf	; 3: 233 81 2

vprintf$5:	; PostCall 10

vprintf$6:	; GetReturnValue £temporary2209

vprintf$7:	; SetReturnValue £temporary2209

vprintf$8:	; Return £temporary2209
x3417:	mov ax, [bp]	; 3: 139 70 0
x3420:	mov di, [bp + 4]	; 3: 139 126 4
x3423:	mov bp, [bp + 2]	; 3: 139 110 2
x3426:	jmp ax	; 2: 255 224

vprintf$9:	; FunctionEnd vprintf

stdout:
x3428:	dw g_fileArray + 29	; 2: 131 13

g_fileArray:
x3430:	dw 1	; 2: 1 0
x3432:	dw 0	; 2: 0 0
x3434:	db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0	; 25: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
x3459:	dw 1	; 2: 1 0
x3461:	dw 1	; 2: 1 0
x3463:	db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0	; 25: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
x3488:	dw 1	; 2: 1 0
x3490:	dw 2	; 2: 2 0
x3492:	db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0	; 25: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
x3517:	db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0	; 493: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

vfprintf:	; Assign g_outStatus 0
x4010:	mov word [g_outStatus], 0	; 6: 199 6 219 15 0 0

vfprintf$1:	; IntegralToIntegral £temporary2221 outStream
x4016:	mov ax, [bp + 6]	; 3: 139 70 6

vfprintf$2:	; Assign g_outDevice £temporary2221
x4019:	mov [g_outDevice], ax	; 3: 163 221 15

vfprintf$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

vfprintf$4:	; Parameter 12 format 6
x4022:	mov ax, [bp + 8]	; 3: 139 70 8
x4025:	mov [bp + 18], ax	; 3: 137 70 18

vfprintf$5:	; Parameter 12 arg_list 8
x4028:	mov ax, [bp + 10]	; 3: 139 70 10
x4031:	mov [bp + 20], ax	; 3: 137 70 20

vfprintf$6:	; Call 12 printFormat 0
x4034:	mov word [bp + 12], vfprintf$7	; 5: 199 70 12 208 15
x4039:	mov [bp + 14], bp	; 3: 137 110 14
x4042:	add bp, 12	; 3: 131 197 12
x4045:	nop	; 1: 144
x4046:	jmp printFormat	; 2: 235 15

vfprintf$7:	; PostCall 12

vfprintf$8:	; GetReturnValue £temporary2222

vfprintf$9:	; SetReturnValue £temporary2222

vfprintf$10:	; Return £temporary2222
x4048:	mov ax, [bp]	; 3: 139 70 0
x4051:	mov di, [bp + 4]	; 3: 139 126 4
x4054:	mov bp, [bp + 2]	; 3: 139 110 2
x4057:	jmp ax	; 2: 255 224

vfprintf$11:	; FunctionEnd vfprintf

g_outStatus:
x4059:	db 0, 0	; 2: 0 0

g_outDevice:
x4061:	db 0, 0	; 2: 0 0

printFormat:	; Assign width 0
x4063:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

printFormat$1:	; Assign precision 0
x4068:	mov word [bp + 14], 0	; 5: 199 70 14 0 0

printFormat$2:	; Assign percent 0
x4073:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

printFormat$3:	; Assign plus 0
x4078:	mov word [bp + 18], 0	; 5: 199 70 18 0 0

printFormat$4:	; Assign minus 0
x4083:	mov word [bp + 20], 0	; 5: 199 70 20 0 0

printFormat$5:	; Assign space 0
x4088:	mov word [bp + 22], 0	; 5: 199 70 22 0 0

printFormat$6:	; Assign zero 0
x4093:	mov word [bp + 24], 0	; 5: 199 70 24 0 0

printFormat$7:	; Assign grid 0
x4098:	mov word [bp + 26], 0	; 5: 199 70 26 0 0

printFormat$8:	; Assign widthStar 0
x4103:	mov word [bp + 28], 0	; 5: 199 70 28 0 0

printFormat$9:	; Assign period 0
x4108:	mov word [bp + 30], 0	; 5: 199 70 30 0 0

printFormat$10:	; Assign precisionStar 0
x4113:	mov word [bp + 32], 0	; 5: 199 70 32 0 0

printFormat$11:	; Assign shortInt 0
x4118:	mov word [bp + 34], 0	; 5: 199 70 34 0 0

printFormat$12:	; Assign longInt 0
x4123:	mov word [bp + 36], 0	; 5: 199 70 36 0 0

printFormat$13:	; Assign longDouble 0
x4128:	mov word [bp + 38], 0	; 5: 199 70 38 0 0

printFormat$14:	; Assign g_outChars 0
x4133:	mov word [g_outChars], 0	; 6: 199 6 55 21 0 0

printFormat$15:	; Assign index 0
x4139:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

printFormat$16:	; BinaryAdd £temporary2053 format index
x4144:	mov si, [bp + 6]	; 3: 139 118 6
x4147:	add si, [bp + 10]	; 3: 3 118 10

printFormat$17:	; Deref £temporary2052 -> £temporary2053 £temporary2053 0

printFormat$18:	; Equal 284 £temporary2052 -> £temporary2053 0
x4150:	cmp byte [si], 0	; 3: 128 60 0
x4153:	je printFormat$284	; 4: 15 132 212 4

printFormat$19:	; BinaryAdd £temporary2057 format index
x4157:	mov si, [bp + 6]	; 3: 139 118 6
x4160:	add si, [bp + 10]	; 3: 3 118 10

printFormat$20:	; Deref £temporary2056 -> £temporary2057 £temporary2057 0

printFormat$21:	; Assign c £temporary2056 -> £temporary2057
x4163:	mov al, [si]	; 2: 138 4
x4165:	mov [bp + 40], al	; 3: 136 70 40

printFormat$22:	; Equal 262 percent 0
x4168:	cmp word [bp + 16], 0	; 4: 131 126 16 0
x4172:	je printFormat$262	; 4: 15 132 89 4

printFormat$23:	; Case 52 c 43
x4176:	mov al, [bp + 40]	; 3: 138 70 40
x4179:	cmp al, 43	; 2: 60 43
x4181:	je printFormat$52	; 4: 15 132 143 0

printFormat$24:	; Case 54 c 45
x4185:	cmp al, 45	; 2: 60 45
x4187:	je printFormat$54	; 4: 15 132 145 0

printFormat$25:	; Case 56 c 32
x4191:	cmp al, 32	; 2: 60 32
x4193:	je printFormat$56	; 4: 15 132 147 0

printFormat$26:	; Case 58 c 48
x4197:	cmp al, 48	; 2: 60 48
x4199:	je printFormat$58	; 4: 15 132 149 0

printFormat$27:	; Case 60 c 35
x4203:	cmp al, 35	; 2: 60 35
x4205:	je printFormat$60	; 4: 15 132 151 0

printFormat$28:	; Case 62 c 46
x4209:	cmp al, 46	; 2: 60 46
x4211:	je printFormat$62	; 4: 15 132 153 0

printFormat$29:	; Case 64 c 42
x4215:	cmp al, 42	; 2: 60 42
x4217:	je printFormat$64	; 4: 15 132 155 0

printFormat$30:	; Case 69 c 104
x4221:	cmp al, 104	; 2: 60 104
x4223:	je printFormat$69	; 4: 15 132 171 0

printFormat$31:	; Case 71 c 108
x4227:	cmp al, 108	; 2: 60 108
x4229:	je printFormat$71	; 4: 15 132 173 0

printFormat$32:	; Case 73 c 76
x4233:	cmp al, 76	; 2: 60 76
x4235:	je printFormat$73	; 4: 15 132 175 0

printFormat$33:	; Case 75 c 37
x4239:	cmp al, 37	; 2: 60 37
x4241:	je printFormat$75	; 4: 15 132 177 0

printFormat$34:	; Case 75 c 110
x4245:	cmp al, 110	; 2: 60 110
x4247:	je printFormat$75	; 4: 15 132 171 0

printFormat$35:	; Case 75 c 112
x4251:	cmp al, 112	; 2: 60 112
x4253:	je printFormat$75	; 4: 15 132 165 0

printFormat$36:	; Case 75 c 71
x4257:	cmp al, 71	; 2: 60 71
x4259:	je printFormat$75	; 4: 15 132 159 0

printFormat$37:	; Case 75 c 103
x4263:	cmp al, 103	; 2: 60 103
x4265:	je printFormat$75	; 4: 15 132 153 0

printFormat$38:	; Case 75 c 69
x4269:	cmp al, 69	; 2: 60 69
x4271:	je printFormat$75	; 4: 15 132 147 0

printFormat$39:	; Case 75 c 101
x4275:	cmp al, 101	; 2: 60 101
x4277:	je printFormat$75	; 4: 15 132 141 0

printFormat$40:	; Case 75 c 102
x4281:	cmp al, 102	; 2: 60 102
x4283:	je printFormat$75	; 4: 15 132 135 0

printFormat$41:	; Case 75 c 115
x4287:	cmp al, 115	; 2: 60 115
x4289:	je printFormat$75	; 4: 15 132 129 0

printFormat$42:	; Case 75 c 99
x4293:	cmp al, 99	; 2: 60 99
x4295:	je printFormat$75	; 2: 116 125

printFormat$43:	; Case 75 c 88
x4297:	cmp al, 88	; 2: 60 88
x4299:	je printFormat$75	; 2: 116 121

printFormat$44:	; Case 75 c 120
x4301:	cmp al, 120	; 2: 60 120
x4303:	je printFormat$75	; 2: 116 117

printFormat$45:	; Case 75 c 111
x4305:	cmp al, 111	; 2: 60 111
x4307:	je printFormat$75	; 2: 116 113

printFormat$46:	; Case 75 c 98
x4309:	cmp al, 98	; 2: 60 98
x4311:	je printFormat$75	; 2: 116 109

printFormat$47:	; Case 75 c 117
x4313:	cmp al, 117	; 2: 60 117
x4315:	je printFormat$75	; 2: 116 105

printFormat$48:	; Case 75 c 100
x4317:	cmp al, 100	; 2: 60 100
x4319:	je printFormat$75	; 2: 116 101

printFormat$49:	; Case 75 c 105
x4321:	cmp al, 105	; 2: 60 105
x4323:	je printFormat$75	; 2: 116 97

printFormat$50:	; CaseEnd c

printFormat$51:	; Goto 239
x4325:	jmp printFormat$239	; 3: 233 78 3

printFormat$52:	; Assign plus 1
x4328:	mov word [bp + 18], 1	; 5: 199 70 18 1 0

printFormat$53:	; Goto 282
x4333:	jmp printFormat$282	; 3: 233 27 4

printFormat$54:	; Assign minus 1
x4336:	mov word [bp + 20], 1	; 5: 199 70 20 1 0

printFormat$55:	; Goto 282
x4341:	jmp printFormat$282	; 3: 233 19 4

printFormat$56:	; Assign space 1
x4344:	mov word [bp + 22], 1	; 5: 199 70 22 1 0

printFormat$57:	; Goto 282
x4349:	jmp printFormat$282	; 3: 233 11 4

printFormat$58:	; Assign zero 1
x4352:	mov word [bp + 24], 1	; 5: 199 70 24 1 0

printFormat$59:	; Goto 282
x4357:	jmp printFormat$282	; 3: 233 3 4

printFormat$60:	; Assign grid 1
x4360:	mov word [bp + 26], 1	; 5: 199 70 26 1 0

printFormat$61:	; Goto 282
x4365:	jmp printFormat$282	; 3: 233 251 3

printFormat$62:	; Assign period 1
x4368:	mov word [bp + 30], 1	; 5: 199 70 30 1 0

printFormat$63:	; Goto 282
x4373:	jmp printFormat$282	; 3: 233 243 3

printFormat$64:	; NotEqual 67 period 0
x4376:	cmp word [bp + 30], 0	; 4: 131 126 30 0
x4380:	jne printFormat$67	; 2: 117 8

printFormat$65:	; Assign width -1
x4382:	mov word [bp + 12], -1	; 5: 199 70 12 255 255

printFormat$66:	; Goto 282
x4387:	jmp printFormat$282	; 3: 233 229 3

printFormat$67:	; Assign precision -1
x4390:	mov word [bp + 14], -1	; 5: 199 70 14 255 255

printFormat$68:	; Goto 282
x4395:	jmp printFormat$282	; 3: 233 221 3

printFormat$69:	; Assign shortInt 1
x4398:	mov word [bp + 34], 1	; 5: 199 70 34 1 0

printFormat$70:	; Goto 282
x4403:	jmp printFormat$282	; 3: 233 213 3

printFormat$71:	; Assign longInt 1
x4406:	mov word [bp + 36], 1	; 5: 199 70 36 1 0

printFormat$72:	; Goto 282
x4411:	jmp printFormat$282	; 3: 233 205 3

printFormat$73:	; Assign longDouble 1
x4414:	mov word [bp + 38], 1	; 5: 199 70 38 1 0

printFormat$74:	; Goto 282
x4419:	jmp printFormat$282	; 3: 233 197 3

printFormat$75:	; Equal 107 minus 0
x4422:	cmp word [bp + 20], 0	; 4: 131 126 20 0
x4426:	je printFormat$107	; 4: 15 132 140 0

printFormat$76:	; Assign startChars g_outChars
x4430:	mov ax, [g_outChars]	; 3: 161 55 21
x4433:	mov [bp + 41], ax	; 3: 137 70 41

printFormat$77:	; CallHeader 43 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$78:	; BinaryAdd £temporary2061 format index
x4436:	mov si, [bp + 6]	; 3: 139 118 6
x4439:	add si, [bp + 10]	; 3: 3 118 10

printFormat$79:	; Deref £temporary2060 -> £temporary2061 £temporary2061 0

printFormat$80:	; address £temporary2062 £temporary2060 -> £temporary2061

printFormat$81:	; Parameter 43 £temporary2062 6
x4442:	mov [bp + 49], si	; 3: 137 118 49

printFormat$82:	; Parameter 43 arg_list 8
x4445:	mov ax, [bp + 8]	; 3: 139 70 8
x4448:	mov [bp + 51], ax	; 3: 137 70 51

printFormat$83:	; Parameter 43 plus 10
x4451:	mov ax, [bp + 18]	; 3: 139 70 18
x4454:	mov [bp + 53], ax	; 3: 137 70 53

printFormat$84:	; Parameter 43 space 12
x4457:	mov ax, [bp + 22]	; 3: 139 70 22
x4460:	mov [bp + 55], ax	; 3: 137 70 55

printFormat$85:	; Parameter 43 grid 14
x4463:	mov ax, [bp + 26]	; 3: 139 70 26
x4466:	mov [bp + 57], ax	; 3: 137 70 57

printFormat$86:	; address £temporary2063 width
x4469:	mov si, bp	; 2: 137 238
x4471:	add si, 12	; 3: 131 198 12

printFormat$87:	; Parameter 43 £temporary2063 16
x4474:	mov [bp + 59], si	; 3: 137 118 59

printFormat$88:	; Parameter 43 precision 18
x4477:	mov ax, [bp + 14]	; 3: 139 70 14
x4480:	mov [bp + 61], ax	; 3: 137 70 61

printFormat$89:	; Parameter 43 shortInt 20
x4483:	mov ax, [bp + 34]	; 3: 139 70 34
x4486:	mov [bp + 63], ax	; 3: 137 70 63

printFormat$90:	; Parameter 43 longInt 22
x4489:	mov ax, [bp + 36]	; 3: 139 70 36
x4492:	mov [bp + 65], ax	; 3: 137 70 65

printFormat$91:	; Parameter 43 longDouble 24
x4495:	mov ax, [bp + 38]	; 3: 139 70 38
x4498:	mov [bp + 67], ax	; 3: 137 70 67

printFormat$92:	; Parameter 43 1 26
x4501:	mov word [bp + 69], 1	; 5: 199 70 69 1 0

printFormat$93:	; Parameter 43 0 28
x4506:	mov word [bp + 71], 0	; 5: 199 70 71 0 0

printFormat$94:	; Call 43 printArgument 0
x4511:	mov word [bp + 43], printFormat$95	; 5: 199 70 43 173 17
x4516:	mov [bp + 45], bp	; 3: 137 110 45
x4519:	add bp, 43	; 3: 131 197 43
x4522:	jmp printArgument	; 3: 233 142 3

printFormat$95:	; PostCall 43

printFormat$96:	; GetReturnValue £temporary2064

printFormat$97:	; Assign arg_list £temporary2064
x4525:	mov [bp + 8], bx	; 3: 137 94 8

printFormat$98:	; BinarySubtract field g_outChars startChars
x4528:	mov ax, [g_outChars]	; 3: 161 55 21
x4531:	sub ax, [bp + 41]	; 3: 43 70 41
x4534:	mov [bp + 43], ax	; 3: 137 70 43

printFormat$99:	; Assign £temporary2066 field
x4537:	mov ax, [bp + 43]	; 3: 139 70 43

printFormat$100:	; Increment field
x4540:	inc word [bp + 43]	; 3: 255 70 43

printFormat$101:	; SignedGreaterThanEqual 237 £temporary2066 width
x4543:	cmp ax, [bp + 12]	; 3: 59 70 12
x4546:	jge printFormat$237	; 4: 15 141 104 2

printFormat$102:	; CallHeader 45 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$103:	; Parameter 45 32 6
x4550:	mov byte [bp + 51], 32	; 4: 198 70 51 32

printFormat$104:	; Call 45 printChar 0
x4554:	mov word [bp + 45], printFormat$105	; 5: 199 70 45 216 17
x4559:	mov [bp + 47], bp	; 3: 137 110 47
x4562:	add bp, 45	; 3: 131 197 45
x4565:	jmp printChar	; 3: 233 118 10

printFormat$105:	; PostCall 45

printFormat$106:	; Goto 99
x4568:	jmp printFormat$99	; 2: 235 223

printFormat$107:	; Equal 184 zero 0
x4570:	cmp word [bp + 24], 0	; 4: 131 126 24 0
x4574:	je printFormat$184	; 4: 15 132 84 1

printFormat$108:	; Assign startChars g_outChars
x4578:	mov ax, [g_outChars]	; 3: 161 55 21
x4581:	mov [bp + 41], ax	; 3: 137 70 41

printFormat$109:	; Assign oldOutStatus g_outStatus
x4584:	mov ax, [g_outStatus]	; 3: 161 219 15
x4587:	mov [bp + 43], ax	; 3: 137 70 43

printFormat$110:	; Assign negative 0
x4590:	mov word [bp + 45], 0	; 5: 199 70 45 0 0

printFormat$111:	; Assign g_outStatus 2
x4595:	mov word [g_outStatus], 2	; 6: 199 6 219 15 2 0

printFormat$112:	; CallHeader 47 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$113:	; BinaryAdd £temporary2071 format index
x4601:	mov si, [bp + 6]	; 3: 139 118 6
x4604:	add si, [bp + 10]	; 3: 3 118 10

printFormat$114:	; Deref £temporary2070 -> £temporary2071 £temporary2071 0

printFormat$115:	; address £temporary2072 £temporary2070 -> £temporary2071

printFormat$116:	; Parameter 47 £temporary2072 6
x4607:	mov [bp + 53], si	; 3: 137 118 53

printFormat$117:	; Parameter 47 arg_list 8
x4610:	mov ax, [bp + 8]	; 3: 139 70 8
x4613:	mov [bp + 55], ax	; 3: 137 70 55

printFormat$118:	; Parameter 47 0 10
x4616:	mov word [bp + 57], 0	; 5: 199 70 57 0 0

printFormat$119:	; Parameter 47 0 12
x4621:	mov word [bp + 59], 0	; 5: 199 70 59 0 0

printFormat$120:	; Parameter 47 grid 14
x4626:	mov ax, [bp + 26]	; 3: 139 70 26
x4629:	mov [bp + 61], ax	; 3: 137 70 61

printFormat$121:	; address £temporary2073 width
x4632:	mov si, bp	; 2: 137 238
x4634:	add si, 12	; 3: 131 198 12

printFormat$122:	; Parameter 47 £temporary2073 16
x4637:	mov [bp + 63], si	; 3: 137 118 63

printFormat$123:	; Parameter 47 precision 18
x4640:	mov ax, [bp + 14]	; 3: 139 70 14
x4643:	mov [bp + 65], ax	; 3: 137 70 65

printFormat$124:	; Parameter 47 shortInt 20
x4646:	mov ax, [bp + 34]	; 3: 139 70 34
x4649:	mov [bp + 67], ax	; 3: 137 70 67

printFormat$125:	; Parameter 47 longInt 22
x4652:	mov ax, [bp + 36]	; 3: 139 70 36
x4655:	mov [bp + 69], ax	; 3: 137 70 69

printFormat$126:	; Parameter 47 longDouble 24
x4658:	mov ax, [bp + 38]	; 3: 139 70 38
x4661:	mov [bp + 71], ax	; 3: 137 70 71

printFormat$127:	; Parameter 47 0 26
x4664:	mov word [bp + 73], 0	; 5: 199 70 73 0 0

printFormat$128:	; address £temporary2074 negative
x4669:	mov si, bp	; 2: 137 238
x4671:	add si, 45	; 3: 131 198 45

printFormat$129:	; Parameter 47 £temporary2074 28
x4674:	mov [bp + 75], si	; 3: 137 118 75

printFormat$130:	; Call 47 printArgument 0
x4677:	mov word [bp + 47], printFormat$131	; 5: 199 70 47 83 18
x4682:	mov [bp + 49], bp	; 3: 137 110 49
x4685:	add bp, 47	; 3: 131 197 47
x4688:	jmp printArgument	; 3: 233 232 2

printFormat$131:	; PostCall 47

printFormat$132:	; Assign g_outStatus oldOutStatus
x4691:	mov ax, [bp + 43]	; 3: 139 70 43
x4694:	mov [g_outStatus], ax	; 3: 163 219 15

printFormat$133:	; BinarySubtract field g_outChars startChars
x4697:	mov ax, [g_outChars]	; 3: 161 55 21
x4700:	sub ax, [bp + 41]	; 3: 43 70 41
x4703:	mov [bp + 47], ax	; 3: 137 70 47

printFormat$134:	; Assign g_outChars startChars
x4706:	mov ax, [bp + 41]	; 3: 139 70 41
x4709:	mov [g_outChars], ax	; 3: 163 55 21

printFormat$135:	; Equal 142 negative 0
x4712:	cmp word [bp + 45], 0	; 4: 131 126 45 0
x4716:	je printFormat$142	; 2: 116 23

printFormat$136:	; CallHeader 49 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$137:	; Parameter 49 45 6
x4718:	mov byte [bp + 55], 45	; 4: 198 70 55 45

printFormat$138:	; Call 49 printChar 0
x4722:	mov word [bp + 49], printFormat$139	; 5: 199 70 49 128 18
x4727:	mov [bp + 51], bp	; 3: 137 110 51
x4730:	add bp, 49	; 3: 131 197 49
x4733:	jmp printChar	; 3: 233 206 9

printFormat$139:	; PostCall 49

printFormat$140:	; Increment field
x4736:	inc word [bp + 47]	; 3: 255 70 47

printFormat$141:	; Goto 155
x4739:	jmp printFormat$155	; 2: 235 56

printFormat$142:	; Equal 149 plus 0
x4741:	cmp word [bp + 18], 0	; 4: 131 126 18 0
x4745:	je printFormat$149	; 2: 116 23

printFormat$143:	; CallHeader 49 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$144:	; Parameter 49 43 6
x4747:	mov byte [bp + 55], 43	; 4: 198 70 55 43

printFormat$145:	; Call 49 printChar 0
x4751:	mov word [bp + 49], printFormat$146	; 5: 199 70 49 157 18
x4756:	mov [bp + 51], bp	; 3: 137 110 51
x4759:	add bp, 49	; 3: 131 197 49
x4762:	jmp printChar	; 3: 233 177 9

printFormat$146:	; PostCall 49

printFormat$147:	; Increment field
x4765:	inc word [bp + 47]	; 3: 255 70 47

printFormat$148:	; Goto 155
x4768:	jmp printFormat$155	; 2: 235 27

printFormat$149:	; Equal 155 space 0
x4770:	cmp word [bp + 22], 0	; 4: 131 126 22 0
x4774:	je printFormat$155	; 2: 116 21

printFormat$150:	; CallHeader 49 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$151:	; Parameter 49 32 6
x4776:	mov byte [bp + 55], 32	; 4: 198 70 55 32

printFormat$152:	; Call 49 printChar 0
x4780:	mov word [bp + 49], printFormat$153	; 5: 199 70 49 186 18
x4785:	mov [bp + 51], bp	; 3: 137 110 51
x4788:	add bp, 49	; 3: 131 197 49
x4791:	jmp printChar	; 3: 233 148 9

printFormat$153:	; PostCall 49

printFormat$154:	; Increment field
x4794:	inc word [bp + 47]	; 3: 255 70 47

printFormat$155:	; Assign £temporary2086 field
x4797:	mov ax, [bp + 47]	; 3: 139 70 47

printFormat$156:	; Increment field
x4800:	inc word [bp + 47]	; 3: 255 70 47

printFormat$157:	; SignedGreaterThanEqual 163 £temporary2086 width
x4803:	cmp ax, [bp + 12]	; 3: 59 70 12
x4806:	jge printFormat$163	; 2: 125 20

printFormat$158:	; CallHeader 49 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$159:	; Parameter 49 48 6
x4808:	mov byte [bp + 55], 48	; 4: 198 70 55 48

printFormat$160:	; Call 49 printChar 0
x4812:	mov word [bp + 49], printFormat$161	; 5: 199 70 49 218 18
x4817:	mov [bp + 51], bp	; 3: 137 110 51
x4820:	add bp, 49	; 3: 131 197 49
x4823:	jmp printChar	; 3: 233 116 9

printFormat$161:	; PostCall 49

printFormat$162:	; Goto 155
x4826:	jmp printFormat$155	; 2: 235 225

printFormat$163:	; CallHeader 49 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$164:	; BinaryAdd £temporary2091 format index
x4828:	mov si, [bp + 6]	; 3: 139 118 6
x4831:	add si, [bp + 10]	; 3: 3 118 10

printFormat$165:	; Deref £temporary2090 -> £temporary2091 £temporary2091 0

printFormat$166:	; address £temporary2092 £temporary2090 -> £temporary2091

printFormat$167:	; Parameter 49 £temporary2092 6
x4834:	mov [bp + 55], si	; 3: 137 118 55

printFormat$168:	; Parameter 49 arg_list 8
x4837:	mov ax, [bp + 8]	; 3: 139 70 8
x4840:	mov [bp + 57], ax	; 3: 137 70 57

printFormat$169:	; Parameter 49 0 10
x4843:	mov word [bp + 59], 0	; 5: 199 70 59 0 0

printFormat$170:	; Parameter 49 0 12
x4848:	mov word [bp + 61], 0	; 5: 199 70 61 0 0

printFormat$171:	; Parameter 49 grid 14
x4853:	mov ax, [bp + 26]	; 3: 139 70 26
x4856:	mov [bp + 63], ax	; 3: 137 70 63

printFormat$172:	; Parameter 49 0 16
x4859:	mov word [bp + 65], 0	; 5: 199 70 65 0 0

printFormat$173:	; Parameter 49 precision 18
x4864:	mov ax, [bp + 14]	; 3: 139 70 14
x4867:	mov [bp + 67], ax	; 3: 137 70 67

printFormat$174:	; Parameter 49 shortInt 20
x4870:	mov ax, [bp + 34]	; 3: 139 70 34
x4873:	mov [bp + 69], ax	; 3: 137 70 69

printFormat$175:	; Parameter 49 longInt 22
x4876:	mov ax, [bp + 36]	; 3: 139 70 36
x4879:	mov [bp + 71], ax	; 3: 137 70 71

printFormat$176:	; Parameter 49 longDouble 24
x4882:	mov ax, [bp + 38]	; 3: 139 70 38
x4885:	mov [bp + 73], ax	; 3: 137 70 73

printFormat$177:	; Parameter 49 0 26
x4888:	mov word [bp + 75], 0	; 5: 199 70 75 0 0

printFormat$178:	; Parameter 49 0 28
x4893:	mov word [bp + 77], 0	; 5: 199 70 77 0 0

printFormat$179:	; Call 49 printArgument 0
x4898:	mov word [bp + 49], printFormat$180	; 5: 199 70 49 48 19
x4903:	mov [bp + 51], bp	; 3: 137 110 51
x4906:	add bp, 49	; 3: 131 197 49
x4909:	jmp printArgument	; 3: 233 11 2

printFormat$180:	; PostCall 49

printFormat$181:	; GetReturnValue £temporary2093

printFormat$182:	; Assign arg_list £temporary2093
x4912:	mov [bp + 8], bx	; 3: 137 94 8

printFormat$183:	; Goto 237
x4915:	jmp printFormat$237	; 3: 233 248 0

printFormat$184:	; Assign startChars g_outChars
x4918:	mov ax, [g_outChars]	; 3: 161 55 21
x4921:	mov [bp + 41], ax	; 3: 137 70 41

printFormat$185:	; Assign oldOutStatus g_outStatus
x4924:	mov ax, [g_outStatus]	; 3: 161 219 15
x4927:	mov [bp + 43], ax	; 3: 137 70 43

printFormat$186:	; Assign g_outStatus 2
x4930:	mov word [g_outStatus], 2	; 6: 199 6 219 15 2 0

printFormat$187:	; CallHeader 45 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$188:	; BinaryAdd £temporary2095 format index
x4936:	mov si, [bp + 6]	; 3: 139 118 6
x4939:	add si, [bp + 10]	; 3: 3 118 10

printFormat$189:	; Deref £temporary2094 -> £temporary2095 £temporary2095 0

printFormat$190:	; address £temporary2096 £temporary2094 -> £temporary2095

printFormat$191:	; Parameter 45 £temporary2096 6
x4942:	mov [bp + 51], si	; 3: 137 118 51

printFormat$192:	; Parameter 45 arg_list 8
x4945:	mov ax, [bp + 8]	; 3: 139 70 8
x4948:	mov [bp + 53], ax	; 3: 137 70 53

printFormat$193:	; Parameter 45 plus 10
x4951:	mov ax, [bp + 18]	; 3: 139 70 18
x4954:	mov [bp + 55], ax	; 3: 137 70 55

printFormat$194:	; Parameter 45 space 12
x4957:	mov ax, [bp + 22]	; 3: 139 70 22
x4960:	mov [bp + 57], ax	; 3: 137 70 57

printFormat$195:	; Parameter 45 grid 14
x4963:	mov ax, [bp + 26]	; 3: 139 70 26
x4966:	mov [bp + 59], ax	; 3: 137 70 59

printFormat$196:	; address £temporary2097 width
x4969:	mov si, bp	; 2: 137 238
x4971:	add si, 12	; 3: 131 198 12

printFormat$197:	; Parameter 45 £temporary2097 16
x4974:	mov [bp + 61], si	; 3: 137 118 61

printFormat$198:	; Parameter 45 precision 18
x4977:	mov ax, [bp + 14]	; 3: 139 70 14
x4980:	mov [bp + 63], ax	; 3: 137 70 63

printFormat$199:	; Parameter 45 shortInt 20
x4983:	mov ax, [bp + 34]	; 3: 139 70 34
x4986:	mov [bp + 65], ax	; 3: 137 70 65

printFormat$200:	; Parameter 45 longInt 22
x4989:	mov ax, [bp + 36]	; 3: 139 70 36
x4992:	mov [bp + 67], ax	; 3: 137 70 67

printFormat$201:	; Parameter 45 longDouble 24
x4995:	mov ax, [bp + 38]	; 3: 139 70 38
x4998:	mov [bp + 69], ax	; 3: 137 70 69

printFormat$202:	; Parameter 45 1 26
x5001:	mov word [bp + 71], 1	; 5: 199 70 71 1 0

printFormat$203:	; Parameter 45 0 28
x5006:	mov word [bp + 73], 0	; 5: 199 70 73 0 0

printFormat$204:	; Call 45 printArgument 0
x5011:	mov word [bp + 45], printFormat$205	; 5: 199 70 45 161 19
x5016:	mov [bp + 47], bp	; 3: 137 110 47
x5019:	add bp, 45	; 3: 131 197 45
x5022:	jmp printArgument	; 3: 233 154 1

printFormat$205:	; PostCall 45

printFormat$206:	; Assign g_outStatus oldOutStatus
x5025:	mov ax, [bp + 43]	; 3: 139 70 43
x5028:	mov [g_outStatus], ax	; 3: 163 219 15

printFormat$207:	; BinarySubtract field g_outChars startChars
x5031:	mov ax, [g_outChars]	; 3: 161 55 21
x5034:	sub ax, [bp + 41]	; 3: 43 70 41
x5037:	mov [bp + 45], ax	; 3: 137 70 45

printFormat$208:	; Assign g_outChars startChars
x5040:	mov ax, [bp + 41]	; 3: 139 70 41
x5043:	mov [g_outChars], ax	; 3: 163 55 21

printFormat$209:	; Assign £temporary2100 field
x5046:	mov ax, [bp + 45]	; 3: 139 70 45

printFormat$210:	; Increment field
x5049:	inc word [bp + 45]	; 3: 255 70 45

printFormat$211:	; SignedGreaterThanEqual 217 £temporary2100 width
x5052:	cmp ax, [bp + 12]	; 3: 59 70 12
x5055:	jge printFormat$217	; 2: 125 20

printFormat$212:	; CallHeader 47 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$213:	; Parameter 47 32 6
x5057:	mov byte [bp + 53], 32	; 4: 198 70 53 32

printFormat$214:	; Call 47 printChar 0
x5061:	mov word [bp + 47], printFormat$215	; 5: 199 70 47 211 19
x5066:	mov [bp + 49], bp	; 3: 137 110 49
x5069:	add bp, 47	; 3: 131 197 47
x5072:	jmp printChar	; 3: 233 123 8

printFormat$215:	; PostCall 47

printFormat$216:	; Goto 209
x5075:	jmp printFormat$209	; 2: 235 225

printFormat$217:	; CallHeader 47 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$218:	; BinaryAdd £temporary2105 format index
x5077:	mov si, [bp + 6]	; 3: 139 118 6
x5080:	add si, [bp + 10]	; 3: 3 118 10

printFormat$219:	; Deref £temporary2104 -> £temporary2105 £temporary2105 0

printFormat$220:	; address £temporary2106 £temporary2104 -> £temporary2105

printFormat$221:	; Parameter 47 £temporary2106 6
x5083:	mov [bp + 53], si	; 3: 137 118 53

printFormat$222:	; Parameter 47 arg_list 8
x5086:	mov ax, [bp + 8]	; 3: 139 70 8
x5089:	mov [bp + 55], ax	; 3: 137 70 55

printFormat$223:	; Parameter 47 plus 10
x5092:	mov ax, [bp + 18]	; 3: 139 70 18
x5095:	mov [bp + 57], ax	; 3: 137 70 57

printFormat$224:	; Parameter 47 space 12
x5098:	mov ax, [bp + 22]	; 3: 139 70 22
x5101:	mov [bp + 59], ax	; 3: 137 70 59

printFormat$225:	; Parameter 47 grid 14
x5104:	mov ax, [bp + 26]	; 3: 139 70 26
x5107:	mov [bp + 61], ax	; 3: 137 70 61

printFormat$226:	; Parameter 47 0 16
x5110:	mov word [bp + 63], 0	; 5: 199 70 63 0 0

printFormat$227:	; Parameter 47 precision 18
x5115:	mov ax, [bp + 14]	; 3: 139 70 14
x5118:	mov [bp + 65], ax	; 3: 137 70 65

printFormat$228:	; Parameter 47 shortInt 20
x5121:	mov ax, [bp + 34]	; 3: 139 70 34
x5124:	mov [bp + 67], ax	; 3: 137 70 67

printFormat$229:	; Parameter 47 longInt 22
x5127:	mov ax, [bp + 36]	; 3: 139 70 36
x5130:	mov [bp + 69], ax	; 3: 137 70 69

printFormat$230:	; Parameter 47 longDouble 24
x5133:	mov ax, [bp + 38]	; 3: 139 70 38
x5136:	mov [bp + 71], ax	; 3: 137 70 71

printFormat$231:	; Parameter 47 1 26
x5139:	mov word [bp + 73], 1	; 5: 199 70 73 1 0

printFormat$232:	; Parameter 47 0 28
x5144:	mov word [bp + 75], 0	; 5: 199 70 75 0 0

printFormat$233:	; Call 47 printArgument 0
x5149:	mov word [bp + 47], printFormat$234	; 5: 199 70 47 43 20
x5154:	mov [bp + 49], bp	; 3: 137 110 49
x5157:	add bp, 47	; 3: 131 197 47
x5160:	jmp printArgument	; 3: 233 16 1

printFormat$234:	; PostCall 47

printFormat$235:	; GetReturnValue £temporary2107

printFormat$236:	; Assign arg_list £temporary2107
x5163:	mov [bp + 8], bx	; 3: 137 94 8

printFormat$237:	; Assign percent 0
x5166:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

printFormat$238:	; Goto 282
x5171:	jmp printFormat$282	; 3: 233 213 0

printFormat$239:	; Assign value 0
x5174:	mov word [bp + 41], 0	; 5: 199 70 41 0 0

printFormat$240:	; CallHeader 43 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$241:	; IntegralToIntegral £temporary2110 c
x5179:	mov al, [bp + 40]	; 3: 138 70 40
x5182:	and ax, 255	; 3: 37 255 0
x5185:	cmp al, 0	; 2: 60 0
x5187:	jge printFormat$242	; 2: 125 4
x5189:	neg al	; 2: 246 216
x5191:	neg ax	; 2: 247 216

printFormat$242:	; Parameter 43 £temporary2110 6
x5193:	mov [bp + 49], ax	; 3: 137 70 49

printFormat$243:	; Call 43 isdigit 0
x5196:	mov word [bp + 43], printFormat$244	; 5: 199 70 43 90 20
x5201:	mov [bp + 45], bp	; 3: 137 110 45
x5204:	add bp, 43	; 3: 131 197 43
x5207:	jmp isdigit	; 3: 233 15 23

printFormat$244:	; PostCall 43

printFormat$245:	; GetReturnValue £temporary2111

printFormat$246:	; Equal 256 £temporary2111 0
x5210:	cmp bx, 0	; 3: 131 251 0
x5213:	je printFormat$256	; 2: 116 49

printFormat$247:	; SignedMultiply £temporary2112 value 10
x5215:	mov ax, [bp + 41]	; 3: 139 70 41
x5218:	xor dx, dx	; 2: 49 210
x5220:	imul word [@4839$int2$10#]	; 4: 247 46 57 21

printFormat$248:	; BinarySubtract £temporary2113 c 48
x5224:	mov bl, [bp + 40]	; 3: 138 94 40
x5227:	sub bl, 48	; 3: 128 235 48

printFormat$249:	; IntegralToIntegral £temporary2114 £temporary2113
x5230:	and bx, 255	; 4: 129 227 255 0
x5234:	cmp bl, 0	; 3: 128 251 0
x5237:	jge printFormat$250	; 2: 125 4
x5239:	neg bl	; 2: 246 219
x5241:	neg bx	; 2: 247 219

printFormat$250:	; BinaryAdd value £temporary2112 £temporary2114
x5243:	add ax, bx	; 2: 1 216
x5245:	mov [bp + 41], ax	; 3: 137 70 41

printFormat$251:	; Increment index
x5248:	inc word [bp + 10]	; 3: 255 70 10

printFormat$252:	; BinaryAdd £temporary2118 format index
x5251:	mov si, [bp + 6]	; 3: 139 118 6
x5254:	add si, [bp + 10]	; 3: 3 118 10

printFormat$253:	; Deref £temporary2117 -> £temporary2118 £temporary2118 0

printFormat$254:	; Assign c £temporary2117 -> £temporary2118
x5257:	mov al, [si]	; 2: 138 4
x5259:	mov [bp + 40], al	; 3: 136 70 40

printFormat$255:	; Goto 240
x5262:	jmp printFormat$240	; 2: 235 171

printFormat$256:	; Decrement index
x5264:	dec word [bp + 10]	; 3: 255 78 10

printFormat$257:	; NotEqual 260 period 0
x5267:	cmp word [bp + 30], 0	; 4: 131 126 30 0
x5271:	jne printFormat$260	; 2: 117 8

printFormat$258:	; Assign width value
x5273:	mov ax, [bp + 41]	; 3: 139 70 41
x5276:	mov [bp + 12], ax	; 3: 137 70 12

printFormat$259:	; Goto 282
x5279:	jmp printFormat$282	; 2: 235 106

printFormat$260:	; Assign precision value
x5281:	mov ax, [bp + 41]	; 3: 139 70 41
x5284:	mov [bp + 14], ax	; 3: 137 70 14

printFormat$261:	; Goto 282
x5287:	jmp printFormat$282	; 2: 235 98

printFormat$262:	; NotEqual 278 c 37
x5289:	cmp byte [bp + 40], 37	; 4: 128 126 40 37
x5293:	jne printFormat$278	; 2: 117 72

printFormat$263:	; Assign percent 1
x5295:	mov word [bp + 16], 1	; 5: 199 70 16 1 0

printFormat$264:	; Assign plus 0
x5300:	mov word [bp + 18], 0	; 5: 199 70 18 0 0

printFormat$265:	; Assign minus 0
x5305:	mov word [bp + 20], 0	; 5: 199 70 20 0 0

printFormat$266:	; Assign space 0
x5310:	mov word [bp + 22], 0	; 5: 199 70 22 0 0

printFormat$267:	; Assign zero 0
x5315:	mov word [bp + 24], 0	; 5: 199 70 24 0 0

printFormat$268:	; Assign grid 0
x5320:	mov word [bp + 26], 0	; 5: 199 70 26 0 0

printFormat$269:	; Assign widthStar 0
x5325:	mov word [bp + 28], 0	; 5: 199 70 28 0 0

printFormat$270:	; Assign period 0
x5330:	mov word [bp + 30], 0	; 5: 199 70 30 0 0

printFormat$271:	; Assign precisionStar 0
x5335:	mov word [bp + 32], 0	; 5: 199 70 32 0 0

printFormat$272:	; Assign shortInt 0
x5340:	mov word [bp + 34], 0	; 5: 199 70 34 0 0

printFormat$273:	; Assign longInt 0
x5345:	mov word [bp + 36], 0	; 5: 199 70 36 0 0

printFormat$274:	; Assign longDouble 0
x5350:	mov word [bp + 38], 0	; 5: 199 70 38 0 0

printFormat$275:	; Assign width 0
x5355:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

printFormat$276:	; Assign precision 0
x5360:	mov word [bp + 14], 0	; 5: 199 70 14 0 0

printFormat$277:	; Goto 282
x5365:	jmp printFormat$282	; 2: 235 20

printFormat$278:	; CallHeader 41 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printFormat$279:	; Parameter 41 c 6
x5367:	mov al, [bp + 40]	; 3: 138 70 40
x5370:	mov [bp + 47], al	; 3: 136 70 47

printFormat$280:	; Call 41 printChar 0
x5373:	mov word [bp + 41], printFormat$281	; 5: 199 70 41 11 21
x5378:	mov [bp + 43], bp	; 3: 137 110 43
x5381:	add bp, 41	; 3: 131 197 41
x5384:	jmp printChar	; 3: 233 67 7

printFormat$281:	; PostCall 41

printFormat$282:	; Increment index
x5387:	inc word [bp + 10]	; 3: 255 70 10

printFormat$283:	; Goto 16
x5390:	jmp printFormat$16	; 3: 233 31 251

printFormat$284:	; NotEqual 290 g_outStatus 1
x5393:	cmp word [g_outStatus], 1	; 5: 131 62 219 15 1
x5398:	jne printFormat$290	; 2: 117 16

printFormat$285:	; IntegralToIntegral £temporary2127 g_outDevice
x5400:	mov ax, [g_outDevice]	; 3: 161 221 15

printFormat$286:	; Assign outString £temporary2127
x5403:	mov [bp + 40], ax	; 3: 137 70 40

printFormat$287:	; BinaryAdd £temporary2129 outString g_outChars
x5406:	mov si, [bp + 40]	; 3: 139 118 40
x5409:	add si, [g_outChars]	; 4: 3 54 55 21

printFormat$288:	; Deref £temporary2128 -> £temporary2129 £temporary2129 0

printFormat$289:	; Assign £temporary2128 -> £temporary2129 0
x5413:	mov byte [si], 0	; 3: 198 4 0

printFormat$290:	; SetReturnValue g_outChars
x5416:	mov bx, [g_outChars]	; 4: 139 30 55 21

printFormat$291:	; Return g_outChars
x5420:	mov ax, [bp]	; 3: 139 70 0
x5423:	mov di, [bp + 4]	; 3: 139 126 4
x5426:	mov bp, [bp + 2]	; 3: 139 110 2
x5429:	jmp ax	; 2: 255 224

printFormat$292:	; FunctionEnd printFormat

g_outChars:
x5431:	db 0, 0	; 2: 0 0

@4839$int2$10#:
x5433:	dw 10	; 2: 10 0

printArgument:	; Deref £temporary1825 -> format format 0
x5435:	mov si, [bp + 6]	; 3: 139 118 6

printArgument$1:	; Assign c £temporary1825 -> format
x5438:	mov al, [si]	; 2: 138 4
x5440:	mov [bp + 30], al	; 3: 136 70 30

printArgument$2:	; Case 21 c 100
x5443:	mov al, [bp + 30]	; 3: 138 70 30
x5446:	cmp al, 100	; 2: 60 100
x5448:	je printArgument$21	; 2: 116 97

printArgument$3:	; Case 21 c 105
x5450:	cmp al, 105	; 2: 60 105
x5452:	je printArgument$21	; 2: 116 93

printArgument$4:	; Case 73 c 99
x5454:	cmp al, 99	; 2: 60 99
x5456:	je printArgument$73	; 4: 15 132 68 1

printArgument$5:	; Case 93 c 115
x5460:	cmp al, 115	; 2: 60 115
x5462:	je printArgument$93	; 4: 15 132 146 1

printArgument$6:	; Case 113 c 88
x5466:	cmp al, 88	; 2: 60 88
x5468:	je printArgument$113	; 4: 15 132 221 1

printArgument$7:	; Case 113 c 120
x5472:	cmp al, 120	; 2: 60 120
x5474:	je printArgument$113	; 4: 15 132 215 1

printArgument$8:	; Case 113 c 98
x5478:	cmp al, 98	; 2: 60 98
x5480:	je printArgument$113	; 4: 15 132 209 1

printArgument$9:	; Case 113 c 111
x5484:	cmp al, 111	; 2: 60 111
x5486:	je printArgument$113	; 4: 15 132 203 1

printArgument$10:	; Case 113 c 117
x5490:	cmp al, 117	; 2: 60 117
x5492:	je printArgument$113	; 4: 15 132 197 1

printArgument$11:	; Case 173 c 71
x5496:	cmp al, 71	; 2: 60 71
x5498:	je printArgument$173	; 4: 15 132 186 2

printArgument$12:	; Case 173 c 103
x5502:	cmp al, 103	; 2: 60 103
x5504:	je printArgument$173	; 4: 15 132 180 2

printArgument$13:	; Case 173 c 69
x5508:	cmp al, 69	; 2: 60 69
x5510:	je printArgument$173	; 4: 15 132 174 2

printArgument$14:	; Case 173 c 101
x5514:	cmp al, 101	; 2: 60 101
x5516:	je printArgument$173	; 4: 15 132 168 2

printArgument$15:	; Case 173 c 102
x5520:	cmp al, 102	; 2: 60 102
x5522:	je printArgument$173	; 4: 15 132 162 2

printArgument$16:	; Case 299 c 112
x5526:	cmp al, 112	; 2: 60 112
x5528:	je printArgument$299	; 4: 15 132 177 4

printArgument$17:	; Case 325 c 110
x5532:	cmp al, 110	; 2: 60 110
x5534:	je printArgument$325	; 4: 15 132 25 5

printArgument$18:	; Case 347 c 37
x5538:	cmp al, 37	; 2: 60 37
x5540:	je printArgument$347	; 4: 15 132 96 5

printArgument$19:	; CaseEnd c

printArgument$20:	; Goto 360
x5544:	jmp printArgument$360	; 3: 233 148 5

printArgument$21:	; Equal 30 shortInt 0
x5547:	cmp word [bp + 20], 0	; 4: 131 126 20 0
x5551:	je printArgument$30	; 2: 116 42

printArgument$22:	; BinaryAdd arg_list arg_list 2
x5553:	add word [bp + 8], 2	; 4: 131 70 8 2

printArgument$23:	; BinarySubtract £temporary1827 arg_list 2
x5557:	mov si, [bp + 8]	; 3: 139 118 8
x5560:	sub si, 2	; 3: 131 238 2

printArgument$24:	; IntegralToIntegral £temporary1828 £temporary1827

printArgument$25:	; Deref £temporary1829 -> £temporary1828 £temporary1828 0

printArgument$26:	; IntegralToIntegral £temporary1830 £temporary1829 -> £temporary1828
x5563:	mov ax, [si]	; 2: 139 4
x5565:	cmp ax, 0	; 3: 131 248 0
x5568:	jge printArgument$27	; 2: 125 4
x5570:	neg ax	; 2: 247 216
x5572:	neg al	; 2: 246 216

printArgument$27:	; IntegralToIntegral £temporary1831 £temporary1830
x5574:	and eax, 255	; 6: 102 37 255 0 0 0
x5580:	cmp al, 0	; 2: 60 0
x5582:	jge printArgument$28	; 2: 125 5
x5584:	neg al	; 2: 246 216
x5586:	neg eax	; 3: 102 247 216

printArgument$28:	; Assign longValue £temporary1831
x5589:	mov [bp + 44], eax	; 4: 102 137 70 44

printArgument$29:	; Goto 43
x5593:	jmp printArgument$43	; 2: 235 57

printArgument$30:	; Equal 37 longInt 0
x5595:	cmp word [bp + 22], 0	; 4: 131 126 22 0
x5599:	je printArgument$37	; 2: 116 19

printArgument$31:	; BinaryAdd arg_list arg_list 4
x5601:	add word [bp + 8], 4	; 4: 131 70 8 4

printArgument$32:	; BinarySubtract £temporary1833 arg_list 4
x5605:	mov si, [bp + 8]	; 3: 139 118 8
x5608:	sub si, 4	; 3: 131 238 4

printArgument$33:	; IntegralToIntegral £temporary1834 £temporary1833

printArgument$34:	; Deref £temporary1835 -> £temporary1834 £temporary1834 0

printArgument$35:	; Assign longValue £temporary1835 -> £temporary1834
x5611:	mov eax, [si]	; 3: 102 139 4
x5614:	mov [bp + 44], eax	; 4: 102 137 70 44

printArgument$36:	; Goto 43
x5618:	jmp printArgument$43	; 2: 235 32

printArgument$37:	; BinaryAdd arg_list arg_list 2
x5620:	add word [bp + 8], 2	; 4: 131 70 8 2

printArgument$38:	; BinarySubtract £temporary1837 arg_list 2
x5624:	mov si, [bp + 8]	; 3: 139 118 8
x5627:	sub si, 2	; 3: 131 238 2

printArgument$39:	; IntegralToIntegral £temporary1838 £temporary1837

printArgument$40:	; Deref £temporary1839 -> £temporary1838 £temporary1838 0

printArgument$41:	; IntegralToIntegral £temporary1840 £temporary1839 -> £temporary1838
x5630:	mov ax, [si]	; 2: 139 4
x5632:	and eax, 65535	; 6: 102 37 255 255 0 0
x5638:	cmp ax, 0	; 3: 131 248 0
x5641:	jge printArgument$42	; 2: 125 5
x5643:	neg ax	; 2: 247 216
x5645:	neg eax	; 3: 102 247 216

printArgument$42:	; Assign longValue £temporary1840
x5648:	mov [bp + 44], eax	; 4: 102 137 70 44

printArgument$43:	; Equal 50 negativePtr 0
x5652:	cmp word [bp + 28], 0	; 4: 131 126 28 0
x5656:	je printArgument$50	; 2: 116 20

printArgument$44:	; Deref £temporary1844 -> negativePtr negativePtr 0
x5658:	mov si, [bp + 28]	; 3: 139 118 28

printArgument$45:	; SignedGreaterThanEqual 48 longValue 0
x5661:	cmp dword [bp + 44], 0	; 5: 102 131 126 44 0
x5666:	jge printArgument$48	; 2: 125 5

printArgument$46:	; Assign £temporary1846 1
x5668:	mov ax, 1	; 3: 184 1 0

printArgument$47:	; Goto 49
x5671:	jmp printArgument$49	; 2: 235 3

printArgument$48:	; Assign £temporary1846 0
x5673:	mov ax, 0	; 3: 184 0 0

printArgument$49:	; Assign £temporary1844 -> negativePtr £temporary1846
x5676:	mov [si], ax	; 2: 137 4

printArgument$50:	; NotEqual 57 sign 0
x5678:	cmp word [bp + 26], 0	; 4: 131 126 26 0
x5682:	jne printArgument$57	; 2: 117 26

printArgument$51:	; CallHeader 48 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$52:	; Parameter 48 longValue 6
x5684:	mov eax, [bp + 44]	; 4: 102 139 70 44
x5688:	mov [bp + 54], eax	; 4: 102 137 70 54

printArgument$53:	; Call 48 labs 0
x5692:	mov word [bp + 48], printArgument$54	; 5: 199 70 48 74 22
x5697:	mov [bp + 50], bp	; 3: 137 110 50
x5700:	add bp, 48	; 3: 131 197 48
x5703:	jmp labs	; 3: 233 5 5

printArgument$54:	; PostCall 48

printArgument$55:	; GetReturnValue £temporary1849

printArgument$56:	; Assign longValue £temporary1849
x5706:	mov [bp + 44], ebx	; 4: 102 137 94 44

printArgument$57:	; CallHeader 48 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$58:	; Parameter 48 arg_list 6
x5710:	mov ax, [bp + 8]	; 3: 139 70 8
x5713:	mov [bp + 54], ax	; 3: 137 70 54

printArgument$59:	; Parameter 48 widthPtr 8
x5716:	mov ax, [bp + 16]	; 3: 139 70 16
x5719:	mov [bp + 56], ax	; 3: 137 70 56

printArgument$60:	; address £temporary1850 precision
x5722:	mov si, bp	; 2: 137 238
x5724:	add si, 18	; 3: 131 198 18

printArgument$61:	; Parameter 48 £temporary1850 10
x5727:	mov [bp + 58], si	; 3: 137 118 58

printArgument$62:	; Call 48 checkWidthAndPrecision 0
x5730:	mov word [bp + 48], printArgument$63	; 5: 199 70 48 112 22
x5735:	mov [bp + 50], bp	; 3: 137 110 50
x5738:	add bp, 48	; 3: 131 197 48
x5741:	jmp checkWidthAndPrecision	; 3: 233 254 4

printArgument$63:	; PostCall 48

printArgument$64:	; GetReturnValue £temporary1851

printArgument$65:	; Assign arg_list £temporary1851
x5744:	mov [bp + 8], bx	; 3: 137 94 8

printArgument$66:	; CallHeader 48 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$67:	; Parameter 48 longValue 6
x5747:	mov eax, [bp + 44]	; 4: 102 139 70 44
x5751:	mov [bp + 54], eax	; 4: 102 137 70 54

printArgument$68:	; Parameter 48 plus 10
x5755:	mov ax, [bp + 10]	; 3: 139 70 10
x5758:	mov [bp + 58], ax	; 3: 137 70 58

printArgument$69:	; Parameter 48 space 12
x5761:	mov ax, [bp + 12]	; 3: 139 70 12
x5764:	mov [bp + 60], ax	; 3: 137 70 60

printArgument$70:	; Call 48 printLongInt 0
x5767:	mov word [bp + 48], printArgument$71	; 5: 199 70 48 149 22
x5772:	mov [bp + 50], bp	; 3: 137 110 50
x5775:	add bp, 48	; 3: 131 197 48
x5778:	jmp printLongInt	; 3: 233 37 5

printArgument$71:	; PostCall 48

printArgument$72:	; Goto 360
x5781:	jmp printArgument$360	; 3: 233 167 4

printArgument$73:	; BinaryAdd arg_list arg_list 2
x5784:	add word [bp + 8], 2	; 4: 131 70 8 2

printArgument$74:	; BinarySubtract £temporary1854 arg_list 2
x5788:	mov si, [bp + 8]	; 3: 139 118 8
x5791:	sub si, 2	; 3: 131 238 2

printArgument$75:	; IntegralToIntegral £temporary1855 £temporary1854

printArgument$76:	; Deref £temporary1856 -> £temporary1855 £temporary1855 0

printArgument$77:	; IntegralToIntegral £temporary1857 £temporary1856 -> £temporary1855
x5794:	mov ax, [si]	; 2: 139 4
x5796:	cmp ax, 0	; 3: 131 248 0
x5799:	jge printArgument$78	; 2: 125 4
x5801:	neg ax	; 2: 247 216
x5803:	neg al	; 2: 246 216

printArgument$78:	; Assign charValue £temporary1857
x5805:	mov [bp + 31], al	; 3: 136 70 31

printArgument$79:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$80:	; Parameter 44 arg_list 6
x5808:	mov ax, [bp + 8]	; 3: 139 70 8
x5811:	mov [bp + 50], ax	; 3: 137 70 50

printArgument$81:	; Parameter 44 widthPtr 8
x5814:	mov ax, [bp + 16]	; 3: 139 70 16
x5817:	mov [bp + 52], ax	; 3: 137 70 52

printArgument$82:	; address £temporary1858 precision
x5820:	mov si, bp	; 2: 137 238
x5822:	add si, 18	; 3: 131 198 18

printArgument$83:	; Parameter 44 £temporary1858 10
x5825:	mov [bp + 54], si	; 3: 137 118 54

printArgument$84:	; Call 44 checkWidthAndPrecision 0
x5828:	mov word [bp + 44], printArgument$85	; 5: 199 70 44 210 22
x5833:	mov [bp + 46], bp	; 3: 137 110 46
x5836:	add bp, 44	; 3: 131 197 44
x5839:	jmp checkWidthAndPrecision	; 3: 233 156 4

printArgument$85:	; PostCall 44

printArgument$86:	; GetReturnValue £temporary1859

printArgument$87:	; Assign arg_list £temporary1859
x5842:	mov [bp + 8], bx	; 3: 137 94 8

printArgument$88:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$89:	; Parameter 44 charValue 6
x5845:	mov al, [bp + 31]	; 3: 138 70 31
x5848:	mov [bp + 50], al	; 3: 136 70 50

printArgument$90:	; Call 44 printChar 0
x5851:	mov word [bp + 44], printArgument$91	; 5: 199 70 44 233 22
x5856:	mov [bp + 46], bp	; 3: 137 110 46
x5859:	add bp, 44	; 3: 131 197 44
x5862:	jmp printChar	; 3: 233 101 5

printArgument$91:	; PostCall 44

printArgument$92:	; Goto 360
x5865:	jmp printArgument$360	; 3: 233 83 4

printArgument$93:	; BinaryAdd arg_list arg_list 2
x5868:	add word [bp + 8], 2	; 4: 131 70 8 2

printArgument$94:	; BinarySubtract £temporary1862 arg_list 2
x5872:	mov si, [bp + 8]	; 3: 139 118 8
x5875:	sub si, 2	; 3: 131 238 2

printArgument$95:	; IntegralToIntegral £temporary1863 £temporary1862

printArgument$96:	; Deref £temporary1864 -> £temporary1863 £temporary1863 0

printArgument$97:	; Assign stringValue £temporary1864 -> £temporary1863
x5878:	mov ax, [si]	; 2: 139 4
x5880:	mov [bp + 44], ax	; 3: 137 70 44

printArgument$98:	; CallHeader 46 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$99:	; Parameter 46 arg_list 6
x5883:	mov ax, [bp + 8]	; 3: 139 70 8
x5886:	mov [bp + 52], ax	; 3: 137 70 52

printArgument$100:	; Parameter 46 widthPtr 8
x5889:	mov ax, [bp + 16]	; 3: 139 70 16
x5892:	mov [bp + 54], ax	; 3: 137 70 54

printArgument$101:	; address £temporary1865 precision
x5895:	mov si, bp	; 2: 137 238
x5897:	add si, 18	; 3: 131 198 18

printArgument$102:	; Parameter 46 £temporary1865 10
x5900:	mov [bp + 56], si	; 3: 137 118 56

printArgument$103:	; Call 46 checkWidthAndPrecision 0
x5903:	mov word [bp + 46], printArgument$104	; 5: 199 70 46 29 23
x5908:	mov [bp + 48], bp	; 3: 137 110 48
x5911:	add bp, 46	; 3: 131 197 46
x5914:	jmp checkWidthAndPrecision	; 3: 233 81 4

printArgument$104:	; PostCall 46

printArgument$105:	; GetReturnValue £temporary1866

printArgument$106:	; Assign arg_list £temporary1866
x5917:	mov [bp + 8], bx	; 3: 137 94 8

printArgument$107:	; CallHeader 46 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$108:	; Parameter 46 stringValue 6
x5920:	mov ax, [bp + 44]	; 3: 139 70 44
x5923:	mov [bp + 52], ax	; 3: 137 70 52

printArgument$109:	; Parameter 46 precision 8
x5926:	mov ax, [bp + 18]	; 3: 139 70 18
x5929:	mov [bp + 54], ax	; 3: 137 70 54

printArgument$110:	; Call 46 printString 0
x5932:	mov word [bp + 46], printArgument$111	; 5: 199 70 46 58 23
x5937:	mov [bp + 48], bp	; 3: 137 110 48
x5940:	add bp, 46	; 3: 131 197 46
x5943:	jmp printString	; 3: 233 224 5

printArgument$111:	; PostCall 46

printArgument$112:	; Goto 360
x5946:	jmp printArgument$360	; 3: 233 2 4

printArgument$113:	; NotEqual 116 c 117
x5949:	cmp byte [bp + 30], 117	; 4: 128 126 30 117
x5953:	jne printArgument$116	; 2: 117 8

printArgument$114:	; Assign £temporary1882 10
x5955:	mov eax, 10	; 6: 102 184 10 0 0 0

printArgument$115:	; Goto 125
x5961:	jmp printArgument$125	; 2: 235 34

printArgument$116:	; NotEqual 119 c 111
x5963:	cmp byte [bp + 30], 111	; 4: 128 126 30 111
x5967:	jne printArgument$119	; 2: 117 8

printArgument$117:	; Assign £temporary1878 8
x5969:	mov eax, 8	; 6: 102 184 8 0 0 0

printArgument$118:	; Goto 124
x5975:	jmp printArgument$124	; 2: 235 20

printArgument$119:	; NotEqual 122 c 98
x5977:	cmp byte [bp + 30], 98	; 4: 128 126 30 98
x5981:	jne printArgument$122	; 2: 117 8

printArgument$120:	; Assign £temporary1874 2
x5983:	mov eax, 2	; 6: 102 184 2 0 0 0

printArgument$121:	; Goto 123
x5989:	jmp printArgument$123	; 2: 235 6

printArgument$122:	; Assign £temporary1874 16
x5991:	mov eax, 16	; 6: 102 184 16 0 0 0

printArgument$123:	; Assign £temporary1878 £temporary1874

printArgument$124:	; Assign £temporary1882 £temporary1878

printArgument$125:	; Assign base £temporary1882
x5997:	mov [bp + 44], eax	; 4: 102 137 70 44

printArgument$126:	; Equal 135 shortInt 0
x6001:	cmp word [bp + 20], 0	; 4: 131 126 20 0
x6005:	je printArgument$135	; 2: 116 24

printArgument$127:	; BinaryAdd arg_list arg_list 2
x6007:	add word [bp + 8], 2	; 4: 131 70 8 2

printArgument$128:	; BinarySubtract £temporary1884 arg_list 2
x6011:	mov si, [bp + 8]	; 3: 139 118 8
x6014:	sub si, 2	; 3: 131 238 2

printArgument$129:	; IntegralToIntegral £temporary1885 £temporary1884

printArgument$130:	; Deref £temporary1886 -> £temporary1885 £temporary1885 0

printArgument$131:	; IntegralToIntegral £temporary1887 £temporary1886 -> £temporary1885
x6017:	mov ax, [si]	; 2: 139 4

printArgument$132:	; IntegralToIntegral £temporary1888 £temporary1887
x6019:	and eax, 255	; 6: 102 37 255 0 0 0

printArgument$133:	; Assign value £temporary1888
x6025:	mov [bp + 48], eax	; 4: 102 137 70 48

printArgument$134:	; Goto 148
x6029:	jmp printArgument$148	; 2: 235 47

printArgument$135:	; Equal 142 longInt 0
x6031:	cmp word [bp + 22], 0	; 4: 131 126 22 0
x6035:	je printArgument$142	; 2: 116 19

printArgument$136:	; BinaryAdd arg_list arg_list 4
x6037:	add word [bp + 8], 4	; 4: 131 70 8 4

printArgument$137:	; BinarySubtract £temporary1890 arg_list 4
x6041:	mov si, [bp + 8]	; 3: 139 118 8
x6044:	sub si, 4	; 3: 131 238 4

printArgument$138:	; IntegralToIntegral £temporary1891 £temporary1890

printArgument$139:	; Deref £temporary1892 -> £temporary1891 £temporary1891 0

printArgument$140:	; Assign value £temporary1892 -> £temporary1891
x6047:	mov eax, [si]	; 3: 102 139 4
x6050:	mov [bp + 48], eax	; 4: 102 137 70 48

printArgument$141:	; Goto 148
x6054:	jmp printArgument$148	; 2: 235 22

printArgument$142:	; BinaryAdd arg_list arg_list 2
x6056:	add word [bp + 8], 2	; 4: 131 70 8 2

printArgument$143:	; BinarySubtract £temporary1894 arg_list 2
x6060:	mov si, [bp + 8]	; 3: 139 118 8
x6063:	sub si, 2	; 3: 131 238 2

printArgument$144:	; IntegralToIntegral £temporary1895 £temporary1894

printArgument$145:	; Deref £temporary1896 -> £temporary1895 £temporary1895 0

printArgument$146:	; IntegralToIntegral £temporary1897 £temporary1896 -> £temporary1895
x6066:	mov ax, [si]	; 2: 139 4
x6068:	and eax, 65535	; 6: 102 37 255 255 0 0

printArgument$147:	; Assign value £temporary1897
x6074:	mov [bp + 48], eax	; 4: 102 137 70 48

printArgument$148:	; CallHeader 52 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$149:	; Parameter 52 arg_list 6
x6078:	mov ax, [bp + 8]	; 3: 139 70 8
x6081:	mov [bp + 58], ax	; 3: 137 70 58

printArgument$150:	; Parameter 52 widthPtr 8
x6084:	mov ax, [bp + 16]	; 3: 139 70 16
x6087:	mov [bp + 60], ax	; 3: 137 70 60

printArgument$151:	; address £temporary1900 precision
x6090:	mov si, bp	; 2: 137 238
x6092:	add si, 18	; 3: 131 198 18

printArgument$152:	; Parameter 52 £temporary1900 10
x6095:	mov [bp + 62], si	; 3: 137 118 62

printArgument$153:	; Call 52 checkWidthAndPrecision 0
x6098:	mov word [bp + 52], printArgument$154	; 5: 199 70 52 224 23
x6103:	mov [bp + 54], bp	; 3: 137 110 54
x6106:	add bp, 52	; 3: 131 197 52
x6109:	jmp checkWidthAndPrecision	; 3: 233 142 3

printArgument$154:	; PostCall 52

printArgument$155:	; GetReturnValue £temporary1901

printArgument$156:	; Assign arg_list £temporary1901
x6112:	mov [bp + 8], bx	; 3: 137 94 8

printArgument$157:	; CallHeader 52 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$158:	; Parameter 52 value 6
x6115:	mov eax, [bp + 48]	; 4: 102 139 70 48
x6119:	mov [bp + 58], eax	; 4: 102 137 70 58

printArgument$159:	; Parameter 52 plus 10
x6123:	mov ax, [bp + 10]	; 3: 139 70 10
x6126:	mov [bp + 62], ax	; 3: 137 70 62

printArgument$160:	; Parameter 52 space 12
x6129:	mov ax, [bp + 12]	; 3: 139 70 12
x6132:	mov [bp + 64], ax	; 3: 137 70 64

printArgument$161:	; Parameter 52 grid 14
x6135:	mov ax, [bp + 14]	; 3: 139 70 14
x6138:	mov [bp + 66], ax	; 3: 137 70 66

printArgument$162:	; Parameter 52 base 16
x6141:	mov eax, [bp + 44]	; 4: 102 139 70 44
x6145:	mov [bp + 68], eax	; 4: 102 137 70 68

printArgument$163:	; CallHeader 52 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$164:	; IntegralToIntegral £temporary1902 c
x6149:	mov al, [bp + 30]	; 3: 138 70 30
x6152:	and ax, 255	; 3: 37 255 0
x6155:	cmp al, 0	; 2: 60 0
x6157:	jge printArgument$165	; 2: 125 4
x6159:	neg al	; 2: 246 216
x6161:	neg ax	; 2: 247 216

printArgument$165:	; Parameter 52 £temporary1902 26
x6163:	mov [bp + 78], ax	; 3: 137 70 78

printArgument$166:	; Call 52 isupper 20
x6166:	mov word [bp + 72], printArgument$167	; 5: 199 70 72 36 24
x6171:	mov [bp + 74], bp	; 3: 137 110 74
x6174:	add bp, 72	; 3: 131 197 72
x6177:	jmp isupper	; 3: 233 230 5

printArgument$167:	; PostCall 52

printArgument$168:	; GetReturnValue £temporary1903

printArgument$169:	; Parameter 52 £temporary1903 20
x6180:	mov [bp + 72], bx	; 3: 137 94 72

printArgument$170:	; Call 52 printUnsignedLong 0
x6183:	mov word [bp + 52], printArgument$171	; 5: 199 70 52 53 24
x6188:	mov [bp + 54], bp	; 3: 137 110 54
x6191:	add bp, 52	; 3: 131 197 52
x6194:	jmp printUnsignedLong	; 3: 233 214 9

printArgument$171:	; PostCall 52

printArgument$172:	; Goto 360
x6197:	jmp printArgument$360	; 3: 233 7 3

printArgument$173:	; Equal 190 longDouble 0
x6200:	cmp word [bp + 24], 0	; 4: 131 126 24 0
x6204:	je printArgument$190	; 2: 116 57

printArgument$174:	; BinaryAdd arg_list arg_list 8
x6206:	add word [bp + 8], 8	; 4: 131 70 8 8

printArgument$175:	; BinarySubtract £temporary1906 arg_list 8
x6210:	mov si, [bp + 8]	; 3: 139 118 8
x6213:	sub si, 8	; 3: 131 238 8

printArgument$176:	; IntegralToIntegral £temporary1907 £temporary1906

printArgument$177:	; Deref £temporary1908 -> £temporary1907 £temporary1907 0

printArgument$178:	; PushFloat £temporary1908 -> £temporary1907
x6216:	fld qword [si]	; 2: 221 4

printArgument$179:	; PopFloat longDoubleValue
x6218:	fstp qword [bp + 34]	; 3: 221 94 34

printArgument$180:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$181:	; PushFloat longDoubleValue
x6221:	fld qword [bp + 34]	; 3: 221 70 34

printArgument$182:	; Parameter 44 longDoubleValue 6
x6224:	fstp qword [bp + 50]	; 3: 221 94 50

printArgument$183:	; Parameter 44 0 14
x6227:	mov word [bp + 58], 0	; 5: 199 70 58 0 0

printArgument$184:	; Parameter 44 0 16
x6232:	mov word [bp + 60], 0	; 5: 199 70 60 0 0

printArgument$185:	; Parameter 44 0 18
x6237:	mov word [bp + 62], 0	; 5: 199 70 62 0 0

printArgument$186:	; Parameter 44 3 20
x6242:	mov word [bp + 64], 3	; 5: 199 70 64 3 0

printArgument$187:	; Call 44 printLongDoublePlain 0
x6247:	mov word [bp + 44], printArgument$188	; 5: 199 70 44 117 24
x6252:	mov [bp + 46], bp	; 3: 137 110 46
x6255:	add bp, 44	; 3: 131 197 44
x6258:	jmp printLongDoublePlain	; 3: 233 65 11

printArgument$188:	; PostCall 44

printArgument$189:	; Goto 196
x6261:	jmp printArgument$196	; 2: 235 15

printArgument$190:	; BinaryAdd arg_list arg_list 8
x6263:	add word [bp + 8], 8	; 4: 131 70 8 8

printArgument$191:	; BinarySubtract £temporary1911 arg_list 8
x6267:	mov si, [bp + 8]	; 3: 139 118 8
x6270:	sub si, 8	; 3: 131 238 8

printArgument$192:	; IntegralToIntegral £temporary1912 £temporary1911

printArgument$193:	; Deref £temporary1913 -> £temporary1912 £temporary1912 0

printArgument$194:	; PushFloat £temporary1913 -> £temporary1912
x6273:	fld qword [si]	; 2: 221 4

printArgument$195:	; PopFloat longDoubleValue
x6275:	fstp qword [bp + 34]	; 3: 221 94 34

printArgument$196:	; Equal 205 negativePtr 0
x6278:	cmp word [bp + 28], 0	; 4: 131 126 28 0
x6282:	je printArgument$205	; 2: 116 26

printArgument$197:	; Deref £temporary1917 -> negativePtr negativePtr 0
x6284:	mov si, [bp + 28]	; 3: 139 118 28

printArgument$198:	; PushFloat longDoubleValue
x6287:	fld qword [bp + 34]	; 3: 221 70 34

printArgument$199:	; PushZero
x6290:	fldz	; 2: 217 238

printArgument$200:	; SignedGreaterThanEqual 203 longDoubleValue 0
x6292:	fcompp	; 2: 222 217
x6294:	fstsw ax	; 3: 155 223 224
x6297:	sahf	; 1: 158
x6298:	jbe printArgument$203	; 2: 118 5

printArgument$201:	; Assign £temporary1919 1
x6300:	mov ax, 1	; 3: 184 1 0

printArgument$202:	; Goto 204
x6303:	jmp printArgument$204	; 2: 235 3

printArgument$203:	; Assign £temporary1919 0
x6305:	mov ax, 0	; 3: 184 0 0

printArgument$204:	; Assign £temporary1917 -> negativePtr £temporary1919
x6308:	mov [si], ax	; 2: 137 4

printArgument$205:	; NotEqual 213 sign 0
x6310:	cmp word [bp + 26], 0	; 4: 131 126 26 0
x6314:	jne printArgument$213	; 2: 117 23

printArgument$206:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$207:	; PushFloat longDoubleValue
x6316:	fld qword [bp + 34]	; 3: 221 70 34

printArgument$208:	; Parameter 44 longDoubleValue 6
x6319:	fstp qword [bp + 50]	; 3: 221 94 50

printArgument$209:	; Call 44 fabs 0
x6322:	mov word [bp + 44], printArgument$210	; 5: 199 70 44 192 24
x6327:	mov [bp + 46], bp	; 3: 137 110 46
x6330:	add bp, 44	; 3: 131 197 44
x6333:	jmp fabs	; 3: 233 58 12

printArgument$210:	; PostCall 44

printArgument$211:	; GetReturnValue £temporary1922

printArgument$212:	; PopFloat longDoubleValue
x6336:	fstp qword [bp + 34]	; 3: 221 94 34

printArgument$213:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$214:	; Parameter 44 arg_list 6
x6339:	mov ax, [bp + 8]	; 3: 139 70 8
x6342:	mov [bp + 50], ax	; 3: 137 70 50

printArgument$215:	; Parameter 44 widthPtr 8
x6345:	mov ax, [bp + 16]	; 3: 139 70 16
x6348:	mov [bp + 52], ax	; 3: 137 70 52

printArgument$216:	; address £temporary1923 precision
x6351:	mov si, bp	; 2: 137 238
x6353:	add si, 18	; 3: 131 198 18

printArgument$217:	; Parameter 44 £temporary1923 10
x6356:	mov [bp + 54], si	; 3: 137 118 54

printArgument$218:	; Call 44 checkWidthAndPrecision 0
x6359:	mov word [bp + 44], printArgument$219	; 5: 199 70 44 229 24
x6364:	mov [bp + 46], bp	; 3: 137 110 46
x6367:	add bp, 44	; 3: 131 197 44
x6370:	jmp checkWidthAndPrecision	; 3: 233 137 2

printArgument$219:	; PostCall 44

printArgument$220:	; GetReturnValue £temporary1924

printArgument$221:	; Assign arg_list £temporary1924
x6373:	mov [bp + 8], bx	; 3: 137 94 8

printArgument$222:	; NotEqual 233 c 102
x6376:	cmp byte [bp + 30], 102	; 4: 128 126 30 102
x6380:	jne printArgument$233	; 2: 117 47

printArgument$223:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$224:	; PushFloat longDoubleValue
x6382:	fld qword [bp + 34]	; 3: 221 70 34

printArgument$225:	; Parameter 44 longDoubleValue 6
x6385:	fstp qword [bp + 50]	; 3: 221 94 50

printArgument$226:	; Parameter 44 plus 14
x6388:	mov ax, [bp + 10]	; 3: 139 70 10
x6391:	mov [bp + 58], ax	; 3: 137 70 58

printArgument$227:	; Parameter 44 space 16
x6394:	mov ax, [bp + 12]	; 3: 139 70 12
x6397:	mov [bp + 60], ax	; 3: 137 70 60

printArgument$228:	; Parameter 44 grid 18
x6400:	mov ax, [bp + 14]	; 3: 139 70 14
x6403:	mov [bp + 62], ax	; 3: 137 70 62

printArgument$229:	; Parameter 44 precision 20
x6406:	mov ax, [bp + 18]	; 3: 139 70 18
x6409:	mov [bp + 64], ax	; 3: 137 70 64

printArgument$230:	; Call 44 printLongDoublePlain 0
x6412:	mov word [bp + 44], printArgument$231	; 5: 199 70 44 26 25
x6417:	mov [bp + 46], bp	; 3: 137 110 46
x6420:	add bp, 44	; 3: 131 197 44
x6423:	jmp printLongDoublePlain	; 3: 233 156 10

printArgument$231:	; PostCall 44

printArgument$232:	; Goto 360
x6426:	jmp printArgument$360	; 3: 233 34 2

printArgument$233:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$234:	; IntegralToIntegral £temporary1927 c
x6429:	mov al, [bp + 30]	; 3: 138 70 30
x6432:	and ax, 255	; 3: 37 255 0
x6435:	cmp al, 0	; 2: 60 0
x6437:	jge printArgument$235	; 2: 125 4
x6439:	neg al	; 2: 246 216
x6441:	neg ax	; 2: 247 216

printArgument$235:	; Parameter 44 £temporary1927 6
x6443:	mov [bp + 50], ax	; 3: 137 70 50

printArgument$236:	; Call 44 tolower 0
x6446:	mov word [bp + 44], printArgument$237	; 5: 199 70 44 60 25
x6451:	mov [bp + 46], bp	; 3: 137 110 46
x6454:	add bp, 44	; 3: 131 197 44
x6457:	jmp tolower	; 3: 233 224 11

printArgument$237:	; PostCall 44

printArgument$238:	; GetReturnValue £temporary1928

printArgument$239:	; NotEqual 257 £temporary1928 101
x6460:	cmp bx, 101	; 3: 131 251 101
x6463:	jne printArgument$257	; 2: 117 81

printArgument$240:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$241:	; PushFloat longDoubleValue
x6465:	fld qword [bp + 34]	; 3: 221 70 34

printArgument$242:	; Parameter 44 longDoubleValue 6
x6468:	fstp qword [bp + 50]	; 3: 221 94 50

printArgument$243:	; Parameter 44 plus 14
x6471:	mov ax, [bp + 10]	; 3: 139 70 10
x6474:	mov [bp + 58], ax	; 3: 137 70 58

printArgument$244:	; Parameter 44 space 16
x6477:	mov ax, [bp + 12]	; 3: 139 70 12
x6480:	mov [bp + 60], ax	; 3: 137 70 60

printArgument$245:	; Parameter 44 grid 18
x6483:	mov ax, [bp + 14]	; 3: 139 70 14
x6486:	mov [bp + 62], ax	; 3: 137 70 62

printArgument$246:	; Parameter 44 precision 20
x6489:	mov ax, [bp + 18]	; 3: 139 70 18
x6492:	mov [bp + 64], ax	; 3: 137 70 64

printArgument$247:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$248:	; IntegralToIntegral £temporary1930 c
x6495:	mov al, [bp + 30]	; 3: 138 70 30
x6498:	and ax, 255	; 3: 37 255 0
x6501:	cmp al, 0	; 2: 60 0
x6503:	jge printArgument$249	; 2: 125 4
x6505:	neg al	; 2: 246 216
x6507:	neg ax	; 2: 247 216

printArgument$249:	; Parameter 44 £temporary1930 28
x6509:	mov [bp + 72], ax	; 3: 137 70 72

printArgument$250:	; Call 44 isupper 22
x6512:	mov word [bp + 66], printArgument$251	; 5: 199 70 66 126 25
x6517:	mov [bp + 68], bp	; 3: 137 110 68
x6520:	add bp, 66	; 3: 131 197 66
x6523:	jmp isupper	; 3: 233 140 4

printArgument$251:	; PostCall 44

printArgument$252:	; GetReturnValue £temporary1931

printArgument$253:	; Parameter 44 £temporary1931 22
x6526:	mov [bp + 66], bx	; 3: 137 94 66

printArgument$254:	; Call 44 printLongDoubleExpo 0
x6529:	mov word [bp + 44], printArgument$255	; 5: 199 70 44 143 25
x6534:	mov [bp + 46], bp	; 3: 137 110 46
x6537:	add bp, 44	; 3: 131 197 44
x6540:	jmp printLongDoubleExpo	; 3: 233 46 12

printArgument$255:	; PostCall 44

printArgument$256:	; Goto 360
x6543:	jmp printArgument$360	; 3: 233 173 1

printArgument$257:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$258:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$259:	; PushFloat longDoubleValue
x6546:	fld qword [bp + 34]	; 3: 221 70 34

printArgument$260:	; Parameter 44 longDoubleValue 6
x6549:	fstp qword [bp + 50]	; 3: 221 94 50

printArgument$261:	; Call 44 fabs 0
x6552:	mov word [bp + 44], printArgument$262	; 5: 199 70 44 166 25
x6557:	mov [bp + 46], bp	; 3: 137 110 46
x6560:	add bp, 44	; 3: 131 197 44
x6563:	jmp fabs	; 3: 233 84 11

printArgument$262:	; PostCall 44

printArgument$263:	; GetReturnValue £temporary1933

printArgument$264:	; Parameter 44 £temporary1933 6
x6566:	fstp qword [bp + 50]	; 3: 221 94 50

printArgument$265:	; Call 44 log10 0
x6569:	mov word [bp + 44], printArgument$266	; 5: 199 70 44 183 25
x6574:	mov [bp + 46], bp	; 3: 137 110 46
x6577:	add bp, 44	; 3: 131 197 44
x6580:	jmp log10	; 3: 233 117 13

printArgument$266:	; PostCall 44

printArgument$267:	; GetReturnValue £temporary1934

printArgument$268:	; FloatingToIntegral £temporary1935 £temporary1934
x6583:	fistp word [container2bytes#]	; 4: 223 30 77 27
x6587:	mov ax, [container2bytes#]	; 3: 161 77 27

printArgument$269:	; Assign expo £temporary1935
x6590:	mov [bp + 44], ax	; 3: 137 70 44

printArgument$270:	; SignedLessThan 282 expo -3
x6593:	cmp word [bp + 44], -3	; 4: 131 126 44 253
x6597:	jl printArgument$282	; 2: 124 53

printArgument$271:	; SignedGreaterThan 282 expo 2
x6599:	cmp word [bp + 44], 2	; 4: 131 126 44 2
x6603:	jg printArgument$282	; 2: 127 47

printArgument$272:	; CallHeader 46 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$273:	; PushFloat longDoubleValue
x6605:	fld qword [bp + 34]	; 3: 221 70 34

printArgument$274:	; Parameter 46 longDoubleValue 6
x6608:	fstp qword [bp + 52]	; 3: 221 94 52

printArgument$275:	; Parameter 46 plus 14
x6611:	mov ax, [bp + 10]	; 3: 139 70 10
x6614:	mov [bp + 60], ax	; 3: 137 70 60

printArgument$276:	; Parameter 46 space 16
x6617:	mov ax, [bp + 12]	; 3: 139 70 12
x6620:	mov [bp + 62], ax	; 3: 137 70 62

printArgument$277:	; Parameter 46 grid 18
x6623:	mov ax, [bp + 14]	; 3: 139 70 14
x6626:	mov [bp + 64], ax	; 3: 137 70 64

printArgument$278:	; Parameter 46 precision 20
x6629:	mov ax, [bp + 18]	; 3: 139 70 18
x6632:	mov [bp + 66], ax	; 3: 137 70 66

printArgument$279:	; Call 46 printLongDoublePlain 0
x6635:	mov word [bp + 46], printArgument$280	; 5: 199 70 46 249 25
x6640:	mov [bp + 48], bp	; 3: 137 110 48
x6643:	add bp, 46	; 3: 131 197 46
x6646:	jmp printLongDoublePlain	; 3: 233 189 9

printArgument$280:	; PostCall 46

printArgument$281:	; Goto 360
x6649:	jmp printArgument$360	; 3: 233 67 1

printArgument$282:	; CallHeader 46 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$283:	; PushFloat longDoubleValue
x6652:	fld qword [bp + 34]	; 3: 221 70 34

printArgument$284:	; Parameter 46 longDoubleValue 6
x6655:	fstp qword [bp + 52]	; 3: 221 94 52

printArgument$285:	; Parameter 46 plus 14
x6658:	mov ax, [bp + 10]	; 3: 139 70 10
x6661:	mov [bp + 60], ax	; 3: 137 70 60

printArgument$286:	; Parameter 46 space 16
x6664:	mov ax, [bp + 12]	; 3: 139 70 12
x6667:	mov [bp + 62], ax	; 3: 137 70 62

printArgument$287:	; Parameter 46 grid 18
x6670:	mov ax, [bp + 14]	; 3: 139 70 14
x6673:	mov [bp + 64], ax	; 3: 137 70 64

printArgument$288:	; Parameter 46 precision 20
x6676:	mov ax, [bp + 18]	; 3: 139 70 18
x6679:	mov [bp + 66], ax	; 3: 137 70 66

printArgument$289:	; CallHeader 46 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$290:	; IntegralToIntegral £temporary1940 c
x6682:	mov al, [bp + 30]	; 3: 138 70 30
x6685:	and ax, 255	; 3: 37 255 0
x6688:	cmp al, 0	; 2: 60 0
x6690:	jge printArgument$291	; 2: 125 4
x6692:	neg al	; 2: 246 216
x6694:	neg ax	; 2: 247 216

printArgument$291:	; Parameter 46 £temporary1940 28
x6696:	mov [bp + 74], ax	; 3: 137 70 74

printArgument$292:	; Call 46 isupper 22
x6699:	mov word [bp + 68], printArgument$293	; 5: 199 70 68 57 26
x6704:	mov [bp + 70], bp	; 3: 137 110 70
x6707:	add bp, 68	; 3: 131 197 68
x6710:	jmp isupper	; 3: 233 209 3

printArgument$293:	; PostCall 46

printArgument$294:	; GetReturnValue £temporary1941

printArgument$295:	; Parameter 46 £temporary1941 22
x6713:	mov [bp + 68], bx	; 3: 137 94 68

printArgument$296:	; Call 46 printLongDoubleExpo 0
x6716:	mov word [bp + 46], printArgument$297	; 5: 199 70 46 74 26
x6721:	mov [bp + 48], bp	; 3: 137 110 48
x6724:	add bp, 46	; 3: 131 197 46
x6727:	jmp printLongDoubleExpo	; 3: 233 115 11

printArgument$297:	; PostCall 46

printArgument$298:	; Goto 360
x6730:	jmp printArgument$360	; 3: 233 242 0

printArgument$299:	; BinaryAdd arg_list arg_list 2
x6733:	add word [bp + 8], 2	; 4: 131 70 8 2

printArgument$300:	; BinarySubtract £temporary1944 arg_list 2
x6737:	mov si, [bp + 8]	; 3: 139 118 8
x6740:	sub si, 2	; 3: 131 238 2

printArgument$301:	; IntegralToIntegral £temporary1945 £temporary1944

printArgument$302:	; Deref £temporary1946 -> £temporary1945 £temporary1945 0

printArgument$303:	; Assign ptrValue £temporary1946 -> £temporary1945
x6743:	mov ax, [si]	; 2: 139 4
x6745:	mov [bp + 42], ax	; 3: 137 70 42

printArgument$304:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$305:	; Parameter 44 arg_list 6
x6748:	mov ax, [bp + 8]	; 3: 139 70 8
x6751:	mov [bp + 50], ax	; 3: 137 70 50

printArgument$306:	; Parameter 44 widthPtr 8
x6754:	mov ax, [bp + 16]	; 3: 139 70 16
x6757:	mov [bp + 52], ax	; 3: 137 70 52

printArgument$307:	; address £temporary1947 precision
x6760:	mov si, bp	; 2: 137 238
x6762:	add si, 18	; 3: 131 198 18

printArgument$308:	; Parameter 44 £temporary1947 10
x6765:	mov [bp + 54], si	; 3: 137 118 54

printArgument$309:	; Call 44 checkWidthAndPrecision 0
x6768:	mov word [bp + 44], printArgument$310	; 5: 199 70 44 126 26
x6773:	mov [bp + 46], bp	; 3: 137 110 46
x6776:	add bp, 44	; 3: 131 197 44
x6779:	jmp checkWidthAndPrecision	; 3: 233 240 0

printArgument$310:	; PostCall 44

printArgument$311:	; GetReturnValue £temporary1948

printArgument$312:	; Assign arg_list £temporary1948
x6782:	mov [bp + 8], bx	; 3: 137 94 8

printArgument$313:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$314:	; IntegralToIntegral £temporary1949 ptrValue
x6785:	mov ax, [bp + 42]	; 3: 139 70 42

printArgument$315:	; IntegralToIntegral £temporary1950 £temporary1949
x6788:	and eax, 65535	; 6: 102 37 255 255 0 0

printArgument$316:	; Parameter 44 £temporary1950 6
x6794:	mov [bp + 50], eax	; 4: 102 137 70 50

printArgument$317:	; Parameter 44 0 10
x6798:	mov word [bp + 54], 0	; 5: 199 70 54 0 0

printArgument$318:	; Parameter 44 0 12
x6803:	mov word [bp + 56], 0	; 5: 199 70 56 0 0

printArgument$319:	; Parameter 44 0 14
x6808:	mov word [bp + 58], 0	; 5: 199 70 58 0 0

printArgument$320:	; Parameter 44 10 16
x6813:	mov dword [bp + 60], 10	; 8: 102 199 70 60 10 0 0 0

printArgument$321:	; Parameter 44 0 20
x6821:	mov word [bp + 64], 0	; 5: 199 70 64 0 0

printArgument$322:	; Call 44 printUnsignedLong 0
x6826:	mov word [bp + 44], printArgument$323	; 5: 199 70 44 184 26
x6831:	mov [bp + 46], bp	; 3: 137 110 46
x6834:	add bp, 44	; 3: 131 197 44
x6837:	jmp printUnsignedLong	; 3: 233 83 7

printArgument$323:	; PostCall 44

printArgument$324:	; Goto 360
x6840:	jmp printArgument$360	; 3: 233 132 0

printArgument$325:	; BinaryAdd arg_list arg_list 2
x6843:	add word [bp + 8], 2	; 4: 131 70 8 2

printArgument$326:	; BinarySubtract £temporary1953 arg_list 2
x6847:	mov si, [bp + 8]	; 3: 139 118 8
x6850:	sub si, 2	; 3: 131 238 2

printArgument$327:	; IntegralToIntegral £temporary1954 £temporary1953

printArgument$328:	; Deref £temporary1955 -> £temporary1954 £temporary1954 0

printArgument$329:	; Assign ptrValue £temporary1955 -> £temporary1954
x6853:	mov ax, [si]	; 2: 139 4
x6855:	mov [bp + 42], ax	; 3: 137 70 42

printArgument$330:	; BinaryAdd arg_list arg_list 2
x6858:	add word [bp + 8], 2	; 4: 131 70 8 2

printArgument$331:	; BinarySubtract £temporary1957 arg_list 2
x6862:	mov si, [bp + 8]	; 3: 139 118 8
x6865:	sub si, 2	; 3: 131 238 2

printArgument$332:	; IntegralToIntegral £temporary1958 £temporary1957

printArgument$333:	; Deref £temporary1959 -> £temporary1958 £temporary1958 0

printArgument$334:	; Assign intPtr £temporary1959 -> £temporary1958
x6868:	mov ax, [si]	; 2: 139 4
x6870:	mov [bp + 32], ax	; 3: 137 70 32

printArgument$335:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$336:	; Parameter 44 arg_list 6
x6873:	mov ax, [bp + 8]	; 3: 139 70 8
x6876:	mov [bp + 50], ax	; 3: 137 70 50

printArgument$337:	; Parameter 44 widthPtr 8
x6879:	mov ax, [bp + 16]	; 3: 139 70 16
x6882:	mov [bp + 52], ax	; 3: 137 70 52

printArgument$338:	; address £temporary1960 precision
x6885:	mov si, bp	; 2: 137 238
x6887:	add si, 18	; 3: 131 198 18

printArgument$339:	; Parameter 44 £temporary1960 10
x6890:	mov [bp + 54], si	; 3: 137 118 54

printArgument$340:	; Call 44 checkWidthAndPrecision 0
x6893:	mov word [bp + 44], printArgument$341	; 5: 199 70 44 251 26
x6898:	mov [bp + 46], bp	; 3: 137 110 46
x6901:	add bp, 44	; 3: 131 197 44
x6904:	nop	; 1: 144
x6905:	jmp checkWidthAndPrecision	; 2: 235 115

printArgument$341:	; PostCall 44

printArgument$342:	; GetReturnValue £temporary1961

printArgument$343:	; Assign arg_list £temporary1961
x6907:	mov [bp + 8], bx	; 3: 137 94 8

printArgument$344:	; Deref £temporary1962 -> intPtr intPtr 0
x6910:	mov si, [bp + 32]	; 3: 139 118 32

printArgument$345:	; Assign £temporary1962 -> intPtr g_outChars
x6913:	mov ax, [g_outChars]	; 3: 161 55 21
x6916:	mov [si], ax	; 2: 137 4

printArgument$346:	; Goto 360
x6918:	jmp printArgument$360	; 2: 235 55

printArgument$347:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$348:	; Parameter 44 arg_list 6
x6920:	mov ax, [bp + 8]	; 3: 139 70 8
x6923:	mov [bp + 50], ax	; 3: 137 70 50

printArgument$349:	; Parameter 44 widthPtr 8
x6926:	mov ax, [bp + 16]	; 3: 139 70 16
x6929:	mov [bp + 52], ax	; 3: 137 70 52

printArgument$350:	; address £temporary1963 precision
x6932:	mov si, bp	; 2: 137 238
x6934:	add si, 18	; 3: 131 198 18

printArgument$351:	; Parameter 44 £temporary1963 10
x6937:	mov [bp + 54], si	; 3: 137 118 54

printArgument$352:	; Call 44 checkWidthAndPrecision 0
x6940:	mov word [bp + 44], printArgument$353	; 5: 199 70 44 42 27
x6945:	mov [bp + 46], bp	; 3: 137 110 46
x6948:	add bp, 44	; 3: 131 197 44
x6951:	nop	; 1: 144
x6952:	jmp checkWidthAndPrecision	; 2: 235 68

printArgument$353:	; PostCall 44

printArgument$354:	; GetReturnValue £temporary1964

printArgument$355:	; Assign arg_list £temporary1964
x6954:	mov [bp + 8], bx	; 3: 137 94 8

printArgument$356:	; CallHeader 44 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printArgument$357:	; Parameter 44 37 6
x6957:	mov byte [bp + 50], 37	; 4: 198 70 50 37

printArgument$358:	; Call 44 printChar 0
x6961:	mov word [bp + 44], printArgument$359	; 5: 199 70 44 63 27
x6966:	mov [bp + 46], bp	; 3: 137 110 46
x6969:	add bp, 44	; 3: 131 197 44
x6972:	jmp printChar	; 3: 233 15 1

printArgument$359:	; PostCall 44

printArgument$360:	; SetReturnValue arg_list
x6975:	mov bx, [bp + 8]	; 3: 139 94 8

printArgument$361:	; Return arg_list
x6978:	mov ax, [bp]	; 3: 139 70 0
x6981:	mov di, [bp + 4]	; 3: 139 126 4
x6984:	mov bp, [bp + 2]	; 3: 139 110 2
x6987:	jmp ax	; 2: 255 224

printArgument$362:	; FunctionEnd printArgument

container2bytes#:
x6989:	db 0, 0	; 2: 0 0

labs:	; SignedGreaterThanEqual 4 value 0
x6991:	cmp dword [bp + 6], 0	; 5: 102 131 126 6 0
x6996:	jge labs$4	; 2: 125 9

labs$1:	; UnarySubtract £temporary3215 value
x6998:	mov ebx, [bp + 6]	; 4: 102 139 94 6
x7002:	neg ebx	; 3: 102 247 219

labs$2:	; Assign £temporary3219 £temporary3215

labs$3:	; Goto 5
x7005:	jmp labs$5	; 2: 235 4

labs$4:	; Assign £temporary3219 value
x7007:	mov ebx, [bp + 6]	; 4: 102 139 94 6

labs$5:	; SetReturnValue £temporary3219

labs$6:	; Return £temporary3219
x7011:	mov ax, [bp]	; 3: 139 70 0
x7014:	mov di, [bp + 4]	; 3: 139 126 4
x7017:	mov bp, [bp + 2]	; 3: 139 110 2
x7020:	jmp ax	; 2: 255 224

labs$7:	; FunctionEnd labs

checkWidthAndPrecision:	; Equal 9 widthPtr 0
x7022:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x7026:	je checkWidthAndPrecision$9	; 2: 116 25

checkWidthAndPrecision$1:	; Deref £temporary1808 -> widthPtr widthPtr 0
x7028:	mov si, [bp + 8]	; 3: 139 118 8

checkWidthAndPrecision$2:	; NotEqual 9 £temporary1808 -> widthPtr -1
x7031:	cmp word [si], -1	; 3: 131 60 255
x7034:	jne checkWidthAndPrecision$9	; 2: 117 17

checkWidthAndPrecision$3:	; Deref £temporary1811 -> widthPtr widthPtr 0
x7036:	mov si, [bp + 8]	; 3: 139 118 8

checkWidthAndPrecision$4:	; BinaryAdd arg_list arg_list 2
x7039:	add word [bp + 6], 2	; 4: 131 70 6 2

checkWidthAndPrecision$5:	; BinarySubtract £temporary1813 arg_list 2
x7043:	mov di, [bp + 6]	; 3: 139 126 6
x7046:	sub di, 2	; 3: 131 239 2

checkWidthAndPrecision$6:	; IntegralToIntegral £temporary1814 £temporary1813

checkWidthAndPrecision$7:	; Deref £temporary1815 -> £temporary1814 £temporary1814 0

checkWidthAndPrecision$8:	; Assign £temporary1811 -> widthPtr £temporary1815 -> £temporary1814
x7049:	mov ax, [di]	; 2: 139 5
x7051:	mov [si], ax	; 2: 137 4

checkWidthAndPrecision$9:	; Equal 18 precisionPtr 0
x7053:	cmp word [bp + 10], 0	; 4: 131 126 10 0
x7057:	je checkWidthAndPrecision$18	; 2: 116 25

checkWidthAndPrecision$10:	; Deref £temporary1817 -> precisionPtr precisionPtr 0
x7059:	mov si, [bp + 10]	; 3: 139 118 10

checkWidthAndPrecision$11:	; NotEqual 18 £temporary1817 -> precisionPtr -1
x7062:	cmp word [si], -1	; 3: 131 60 255
x7065:	jne checkWidthAndPrecision$18	; 2: 117 17

checkWidthAndPrecision$12:	; Deref £temporary1820 -> precisionPtr precisionPtr 0
x7067:	mov si, [bp + 10]	; 3: 139 118 10

checkWidthAndPrecision$13:	; BinaryAdd arg_list arg_list 2
x7070:	add word [bp + 6], 2	; 4: 131 70 6 2

checkWidthAndPrecision$14:	; BinarySubtract £temporary1822 arg_list 2
x7074:	mov di, [bp + 6]	; 3: 139 126 6
x7077:	sub di, 2	; 3: 131 239 2

checkWidthAndPrecision$15:	; IntegralToIntegral £temporary1823 £temporary1822

checkWidthAndPrecision$16:	; Deref £temporary1824 -> £temporary1823 £temporary1823 0

checkWidthAndPrecision$17:	; Assign £temporary1820 -> precisionPtr £temporary1824 -> £temporary1823
x7080:	mov ax, [di]	; 2: 139 5
x7082:	mov [si], ax	; 2: 137 4

checkWidthAndPrecision$18:	; SetReturnValue arg_list
x7084:	mov bx, [bp + 6]	; 3: 139 94 6

checkWidthAndPrecision$19:	; Return arg_list
x7087:	mov ax, [bp]	; 3: 139 70 0
x7090:	mov di, [bp + 4]	; 3: 139 126 4
x7093:	mov bp, [bp + 2]	; 3: 139 110 2
x7096:	jmp ax	; 2: 255 224

checkWidthAndPrecision$20:	; FunctionEnd checkWidthAndPrecision

printLongInt:	; SignedGreaterThanEqual 8 longValue 0
x7098:	cmp dword [bp + 6], 0	; 5: 102 131 126 6 0
x7103:	jge printLongInt$8	; 2: 125 31

printLongInt$1:	; UnarySubtract £temporary1662 longValue
x7105:	mov eax, [bp + 6]	; 4: 102 139 70 6
x7109:	neg eax	; 3: 102 247 216

printLongInt$2:	; Assign longValue £temporary1662
x7112:	mov [bp + 6], eax	; 4: 102 137 70 6

printLongInt$3:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongInt$4:	; Parameter 14 45 6
x7116:	mov byte [bp + 20], 45	; 4: 198 70 20 45

printLongInt$5:	; Call 14 printChar 0
x7120:	mov word [bp + 14], printLongInt$6	; 5: 199 70 14 222 27
x7125:	mov [bp + 16], bp	; 3: 137 110 16
x7128:	add bp, 14	; 3: 131 197 14
x7131:	nop	; 1: 144
x7132:	jmp printChar	; 2: 235 112

printLongInt$6:	; PostCall 14

printLongInt$7:	; Goto 19
x7134:	jmp printLongInt$19	; 2: 235 50

printLongInt$8:	; Equal 14 space 0
x7136:	cmp word [bp + 12], 0	; 4: 131 126 12 0
x7140:	je printLongInt$14	; 2: 116 20

printLongInt$9:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongInt$10:	; Parameter 14 32 6
x7142:	mov byte [bp + 20], 32	; 4: 198 70 20 32

printLongInt$11:	; Call 14 printChar 0
x7146:	mov word [bp + 14], printLongInt$12	; 5: 199 70 14 248 27
x7151:	mov [bp + 16], bp	; 3: 137 110 16
x7154:	add bp, 14	; 3: 131 197 14
x7157:	nop	; 1: 144
x7158:	jmp printChar	; 2: 235 86

printLongInt$12:	; PostCall 14

printLongInt$13:	; Goto 19
x7160:	jmp printLongInt$19	; 2: 235 24

printLongInt$14:	; Equal 19 plus 0
x7162:	cmp word [bp + 10], 0	; 4: 131 126 10 0
x7166:	je printLongInt$19	; 2: 116 18

printLongInt$15:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongInt$16:	; Parameter 14 43 6
x7168:	mov byte [bp + 20], 43	; 4: 198 70 20 43

printLongInt$17:	; Call 14 printChar 0
x7172:	mov word [bp + 14], printLongInt$18	; 5: 199 70 14 18 28
x7177:	mov [bp + 16], bp	; 3: 137 110 16
x7180:	add bp, 14	; 3: 131 197 14
x7183:	nop	; 1: 144
x7184:	jmp printChar	; 2: 235 60

printLongInt$18:	; PostCall 14

printLongInt$19:	; NotEqual 25 longValue 0
x7186:	cmp dword [bp + 6], 0	; 5: 102 131 126 6 0
x7191:	jne printLongInt$25	; 2: 117 20

printLongInt$20:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongInt$21:	; Parameter 14 48 6
x7193:	mov byte [bp + 20], 48	; 4: 198 70 20 48

printLongInt$22:	; Call 14 printChar 0
x7197:	mov word [bp + 14], printLongInt$23	; 5: 199 70 14 43 28
x7202:	mov [bp + 16], bp	; 3: 137 110 16
x7205:	add bp, 14	; 3: 131 197 14
x7208:	nop	; 1: 144
x7209:	jmp printChar	; 2: 235 35

printLongInt$23:	; PostCall 14

printLongInt$24:	; Goto 29
x7211:	jmp printLongInt$29	; 2: 235 22

printLongInt$25:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongInt$26:	; Parameter 14 longValue 6
x7213:	mov eax, [bp + 6]	; 4: 102 139 70 6
x7217:	mov [bp + 20], eax	; 4: 102 137 70 20

printLongInt$27:	; Call 14 printLongIntRec 0
x7221:	mov word [bp + 14], printLongInt$28	; 5: 199 70 14 67 28
x7226:	mov [bp + 16], bp	; 3: 137 110 16
x7229:	add bp, 14	; 3: 131 197 14
x7232:	nop	; 1: 144
x7233:	jmp printLongIntRec	; 2: 235 101

printLongInt$28:	; PostCall 14

printLongInt$29:	; Return 0
x7235:	mov ax, [bp]	; 3: 139 70 0
x7238:	mov di, [bp + 4]	; 3: 139 126 4
x7241:	mov bp, [bp + 2]	; 3: 139 110 2
x7244:	jmp ax	; 2: 255 224

printLongInt$30:	; FunctionEnd printLongInt

printChar:	; Case 5 g_outStatus 0
x7246:	mov ax, [g_outStatus]	; 3: 161 219 15
x7249:	cmp ax, 0	; 3: 131 248 0
x7252:	je printChar$5	; 2: 116 12

printChar$1:	; Case 16 g_outStatus 1
x7254:	cmp ax, 1	; 3: 131 248 1
x7257:	je printChar$16	; 2: 116 37

printChar$2:	; Case 24 g_outStatus 2
x7259:	cmp ax, 2	; 3: 131 248 2
x7262:	je printChar$24	; 2: 116 57

printChar$3:	; CaseEnd g_outStatus

printChar$4:	; Goto 25
x7264:	jmp printChar$25	; 2: 235 59

printChar$5:	; IntegralToIntegral £temporary1601 g_outDevice
x7266:	mov ax, [g_outDevice]	; 3: 161 221 15

printChar$6:	; Assign stream £temporary1601
x7269:	mov [bp + 11], ax	; 3: 137 70 11

printChar$7:	; AssignRegister ah 64
x7272:	mov ah, 64	; 2: 180 64

printChar$8:	; Deref £temporary1604 -> stream stream 2
x7274:	mov si, [bp + 11]	; 3: 139 118 11

printChar$9:	; AssignRegister bx £temporary1604 -> stream
x7277:	mov bx, [si + 2]	; 3: 139 92 2

printChar$10:	; AssignRegister cx 1
x7280:	mov cx, 1	; 3: 185 1 0

printChar$11:	; address £temporary1607 c
x7283:	mov dx, bp	; 2: 137 234
x7285:	add dx, 6	; 3: 131 194 6

printChar$12:	; AssignRegister dx £temporary1607

printChar$13:	; Interrupt 33
x7288:	int 33	; 2: 205 33

printChar$14:	; Increment g_outChars
x7290:	inc word [g_outChars]	; 4: 255 6 55 21

printChar$15:	; Goto 25
x7294:	jmp printChar$25	; 2: 235 29

printChar$16:	; IntegralToIntegral £temporary1609 g_outDevice
x7296:	mov ax, [g_outDevice]	; 3: 161 221 15

printChar$17:	; Assign outString £temporary1609
x7299:	mov [bp + 9], ax	; 3: 137 70 9

printChar$18:	; Assign £temporary1610 g_outChars
x7302:	mov ax, [g_outChars]	; 3: 161 55 21

printChar$19:	; Increment g_outChars
x7305:	inc word [g_outChars]	; 4: 255 6 55 21

printChar$20:	; BinaryAdd £temporary1613 outString £temporary1610
x7309:	mov si, [bp + 9]	; 3: 139 118 9
x7312:	add si, ax	; 2: 1 198

printChar$21:	; Deref £temporary1612 -> £temporary1613 £temporary1613 0

printChar$22:	; Assign £temporary1612 -> £temporary1613 c
x7314:	mov al, [bp + 6]	; 3: 138 70 6
x7317:	mov [si], al	; 2: 136 4

printChar$23:	; Goto 25
x7319:	jmp printChar$25	; 2: 235 4

printChar$24:	; Increment g_outChars
x7321:	inc word [g_outChars]	; 4: 255 6 55 21

printChar$25:	; Return 0
x7325:	mov ax, [bp]	; 3: 139 70 0
x7328:	mov di, [bp + 4]	; 3: 139 126 4
x7331:	mov bp, [bp + 2]	; 3: 139 110 2
x7334:	jmp ax	; 2: 255 224

printChar$26:	; FunctionEnd printChar

printLongIntRec:	; Equal 15 longValue 0
x7336:	cmp dword [bp + 6], 0	; 5: 102 131 126 6 0
x7341:	je printLongIntRec$15	; 2: 116 88

printLongIntRec$1:	; SignedModulo £temporary1652 longValue 10
x7343:	mov eax, [bp + 6]	; 4: 102 139 70 6
x7347:	xor edx, edx	; 3: 102 49 210
x7350:	idiv dword [@3780$int4$10#]	; 5: 102 247 62 18 29

printLongIntRec$2:	; IntegralToIntegral £temporary1653 £temporary1652
x7355:	cmp edx, 0	; 4: 102 131 250 0
x7359:	jge printLongIntRec$3	; 2: 125 5
x7361:	neg edx	; 3: 102 247 218
x7364:	neg dx	; 2: 247 218

printLongIntRec$3:	; Assign digit £temporary1653
x7366:	mov [bp + 10], dx	; 3: 137 86 10

printLongIntRec$4:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongIntRec$5:	; SignedDivide £temporary1654 longValue 10
x7369:	mov eax, [bp + 6]	; 4: 102 139 70 6
x7373:	xor edx, edx	; 3: 102 49 210
x7376:	idiv dword [@3785$int4$10#]	; 5: 102 247 62 22 29

printLongIntRec$6:	; Parameter 12 £temporary1654 6
x7381:	mov [bp + 18], eax	; 4: 102 137 70 18

printLongIntRec$7:	; Call 12 printLongIntRec 0
x7385:	mov word [bp + 12], printLongIntRec$8	; 5: 199 70 12 231 28
x7390:	mov [bp + 14], bp	; 3: 137 110 14
x7393:	add bp, 12	; 3: 131 197 12
x7396:	nop	; 1: 144
x7397:	jmp printLongIntRec	; 2: 235 193

printLongIntRec$8:	; PostCall 12

printLongIntRec$9:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongIntRec$10:	; BinaryAdd £temporary1656 digit 48
x7399:	mov ax, [bp + 10]	; 3: 139 70 10
x7402:	add ax, 48	; 3: 131 192 48

printLongIntRec$11:	; IntegralToIntegral £temporary1657 £temporary1656
x7405:	cmp ax, 0	; 3: 131 248 0
x7408:	jge printLongIntRec$12	; 2: 125 4
x7410:	neg ax	; 2: 247 216
x7412:	neg al	; 2: 246 216

printLongIntRec$12:	; Parameter 12 £temporary1657 6
x7414:	mov [bp + 18], al	; 3: 136 70 18

printLongIntRec$13:	; Call 12 printChar 0
x7417:	mov word [bp + 12], printLongIntRec$14	; 5: 199 70 12 7 29
x7422:	mov [bp + 14], bp	; 3: 137 110 14
x7425:	add bp, 12	; 3: 131 197 12
x7428:	jmp printChar	; 3: 233 71 255

printLongIntRec$14:	; PostCall 12

printLongIntRec$15:	; Return 0
x7431:	mov ax, [bp]	; 3: 139 70 0
x7434:	mov di, [bp + 4]	; 3: 139 126 4
x7437:	mov bp, [bp + 2]	; 3: 139 110 2
x7440:	jmp ax	; 2: 255 224

printLongIntRec$16:	; FunctionEnd printLongIntRec

@3780$int4$10#:
x7442:	dd 10	; 4: 10 0 0 0

@3785$int4$10#:
x7446:	dd 10	; 4: 10 0 0 0

printString:	; Equal 29 s 0
x7450:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x7454:	je printString$29	; 2: 116 115

printString$1:	; NotEqual 14 precision 0
x7456:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x7460:	jne printString$14	; 2: 117 48

printString$2:	; Assign index 0
x7462:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

printString$3:	; BinaryAdd £temporary1620 s index
x7467:	mov si, [bp + 6]	; 3: 139 118 6
x7470:	add si, [bp + 10]	; 3: 3 118 10

printString$4:	; Deref £temporary1619 -> £temporary1620 £temporary1620 0

printString$5:	; Equal 53 £temporary1619 -> £temporary1620 0
x7473:	cmp byte [si], 0	; 3: 128 60 0
x7476:	je printString$53	; 4: 15 132 199 0

printString$6:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printString$7:	; BinaryAdd £temporary1624 s index
x7480:	mov si, [bp + 6]	; 3: 139 118 6
x7483:	add si, [bp + 10]	; 3: 3 118 10

printString$8:	; Deref £temporary1623 -> £temporary1624 £temporary1624 0

printString$9:	; Parameter 12 £temporary1623 -> £temporary1624 6
x7486:	mov al, [si]	; 2: 138 4
x7488:	mov [bp + 18], al	; 3: 136 70 18

printString$10:	; Call 12 printChar 0
x7491:	mov word [bp + 12], printString$11	; 5: 199 70 12 81 29
x7496:	mov [bp + 14], bp	; 3: 137 110 14
x7499:	add bp, 12	; 3: 131 197 12
x7502:	jmp printChar	; 3: 233 253 254

printString$11:	; PostCall 12

printString$12:	; Increment index
x7505:	inc word [bp + 10]	; 3: 255 70 10

printString$13:	; Goto 3
x7508:	jmp printString$3	; 2: 235 213

printString$14:	; Assign index 0
x7510:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

printString$15:	; Assign £temporary1626 precision
x7515:	mov ax, [bp + 8]	; 3: 139 70 8

printString$16:	; Decrement precision
x7518:	dec word [bp + 8]	; 3: 255 78 8

printString$17:	; SignedLessThanEqual 53 £temporary1626 0
x7521:	cmp ax, 0	; 3: 131 248 0
x7524:	jle printString$53	; 4: 15 142 151 0

printString$18:	; BinaryAdd £temporary1630 s index
x7528:	mov si, [bp + 6]	; 3: 139 118 6
x7531:	add si, [bp + 10]	; 3: 3 118 10

printString$19:	; Deref £temporary1629 -> £temporary1630 £temporary1630 0

printString$20:	; Equal 53 £temporary1629 -> £temporary1630 0
x7534:	cmp byte [si], 0	; 3: 128 60 0
x7537:	je printString$53	; 4: 15 132 138 0

printString$21:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printString$22:	; BinaryAdd £temporary1635 s index
x7541:	mov si, [bp + 6]	; 3: 139 118 6
x7544:	add si, [bp + 10]	; 3: 3 118 10

printString$23:	; Deref £temporary1634 -> £temporary1635 £temporary1635 0

printString$24:	; Parameter 12 £temporary1634 -> £temporary1635 6
x7547:	mov al, [si]	; 2: 138 4
x7549:	mov [bp + 18], al	; 3: 136 70 18

printString$25:	; Call 12 printChar 0
x7552:	mov word [bp + 12], printString$26	; 5: 199 70 12 142 29
x7557:	mov [bp + 14], bp	; 3: 137 110 14
x7560:	add bp, 12	; 3: 131 197 12
x7563:	jmp printChar	; 3: 233 192 254

printString$26:	; PostCall 12

printString$27:	; Increment index
x7566:	inc word [bp + 10]	; 3: 255 70 10

printString$28:	; Goto 15
x7569:	jmp printString$15	; 2: 235 200

printString$29:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printString$30:	; Parameter 10 60 6
x7571:	mov byte [bp + 16], 60	; 4: 198 70 16 60

printString$31:	; Call 10 printChar 0
x7575:	mov word [bp + 10], printString$32	; 5: 199 70 10 165 29
x7580:	mov [bp + 12], bp	; 3: 137 110 12
x7583:	add bp, 10	; 3: 131 197 10
x7586:	jmp printChar	; 3: 233 169 254

printString$32:	; PostCall 10

printString$33:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printString$34:	; Parameter 10 78 6
x7589:	mov byte [bp + 16], 78	; 4: 198 70 16 78

printString$35:	; Call 10 printChar 0
x7593:	mov word [bp + 10], printString$36	; 5: 199 70 10 183 29
x7598:	mov [bp + 12], bp	; 3: 137 110 12
x7601:	add bp, 10	; 3: 131 197 10
x7604:	jmp printChar	; 3: 233 151 254

printString$36:	; PostCall 10

printString$37:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printString$38:	; Parameter 10 85 6
x7607:	mov byte [bp + 16], 85	; 4: 198 70 16 85

printString$39:	; Call 10 printChar 0
x7611:	mov word [bp + 10], printString$40	; 5: 199 70 10 201 29
x7616:	mov [bp + 12], bp	; 3: 137 110 12
x7619:	add bp, 10	; 3: 131 197 10
x7622:	jmp printChar	; 3: 233 133 254

printString$40:	; PostCall 10

printString$41:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printString$42:	; Parameter 10 76 6
x7625:	mov byte [bp + 16], 76	; 4: 198 70 16 76

printString$43:	; Call 10 printChar 0
x7629:	mov word [bp + 10], printString$44	; 5: 199 70 10 219 29
x7634:	mov [bp + 12], bp	; 3: 137 110 12
x7637:	add bp, 10	; 3: 131 197 10
x7640:	jmp printChar	; 3: 233 115 254

printString$44:	; PostCall 10

printString$45:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printString$46:	; Parameter 10 76 6
x7643:	mov byte [bp + 16], 76	; 4: 198 70 16 76

printString$47:	; Call 10 printChar 0
x7647:	mov word [bp + 10], printString$48	; 5: 199 70 10 237 29
x7652:	mov [bp + 12], bp	; 3: 137 110 12
x7655:	add bp, 10	; 3: 131 197 10
x7658:	jmp printChar	; 3: 233 97 254

printString$48:	; PostCall 10

printString$49:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printString$50:	; Parameter 10 62 6
x7661:	mov byte [bp + 16], 62	; 4: 198 70 16 62

printString$51:	; Call 10 printChar 0
x7665:	mov word [bp + 10], printString$52	; 5: 199 70 10 255 29
x7670:	mov [bp + 12], bp	; 3: 137 110 12
x7673:	add bp, 10	; 3: 131 197 10
x7676:	jmp printChar	; 3: 233 79 254

printString$52:	; PostCall 10

printString$53:	; Return 0
x7679:	mov ax, [bp]	; 3: 139 70 0
x7682:	mov di, [bp + 4]	; 3: 139 126 4
x7685:	mov bp, [bp + 2]	; 3: 139 110 2
x7688:	jmp ax	; 2: 255 224

printString$54:	; FunctionEnd printString

isupper:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

isupper$1:	; Call 8 localeconv 0
x7690:	mov word [bp + 8], isupper$2	; 5: 199 70 8 24 30
x7695:	mov [bp + 10], bp	; 3: 137 110 10
x7698:	add bp, 8	; 3: 131 197 8
x7701:	nop	; 1: 144
x7702:	jmp localeconv	; 2: 235 93

isupper$2:	; PostCall 8

isupper$3:	; GetReturnValue £temporary172

isupper$4:	; Assign localeConvPtr £temporary172
x7704:	mov [bp + 8], bx	; 3: 137 94 8

isupper$5:	; Equal 19 localeConvPtr 0
x7707:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x7711:	je isupper$19	; 2: 116 53

isupper$6:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

isupper$7:	; Deref £temporary174 -> localeConvPtr localeConvPtr 14
x7713:	mov si, [bp + 8]	; 3: 139 118 8

isupper$8:	; Parameter 10 £temporary174 -> localeConvPtr 6
x7716:	mov ax, [si + 14]	; 3: 139 68 14
x7719:	mov [bp + 16], ax	; 3: 137 70 16

isupper$9:	; Parameter 10 c 8
x7722:	mov ax, [bp + 6]	; 3: 139 70 6
x7725:	mov [bp + 18], ax	; 3: 137 70 18

isupper$10:	; Call 10 strchr 0
x7728:	mov word [bp + 10], isupper$11	; 5: 199 70 10 62 30
x7733:	mov [bp + 12], bp	; 3: 137 110 12
x7736:	add bp, 10	; 3: 131 197 10
x7739:	jmp strchr	; 3: 233 125 3

isupper$11:	; PostCall 10

isupper$12:	; GetReturnValue £temporary175

isupper$13:	; Equal 16 £temporary175 0
x7742:	cmp bx, 0	; 3: 131 251 0
x7745:	je isupper$16	; 2: 116 5

isupper$14:	; Assign £temporary177 1
x7747:	mov bx, 1	; 3: 187 1 0

isupper$15:	; Goto 17
x7750:	jmp isupper$17	; 2: 235 3

isupper$16:	; Assign £temporary177 0
x7752:	mov bx, 0	; 3: 187 0 0

isupper$17:	; SetReturnValue £temporary177

isupper$18:	; Return £temporary177
x7755:	mov ax, [bp]	; 3: 139 70 0
x7758:	mov di, [bp + 4]	; 3: 139 126 4
x7761:	mov bp, [bp + 2]	; 3: 139 110 2
x7764:	jmp ax	; 2: 255 224

isupper$19:	; SignedLessThan 23 c 65
x7766:	cmp word [bp + 6], 65	; 4: 131 126 6 65
x7770:	jl isupper$23	; 2: 124 11

isupper$20:	; SignedGreaterThan 23 c 90
x7772:	cmp word [bp + 6], 90	; 4: 131 126 6 90
x7776:	jg isupper$23	; 2: 127 5

isupper$21:	; Assign £temporary181 1
x7778:	mov bx, 1	; 3: 187 1 0

isupper$22:	; Goto 24
x7781:	jmp isupper$24	; 2: 235 3

isupper$23:	; Assign £temporary181 0
x7783:	mov bx, 0	; 3: 187 0 0

isupper$24:	; SetReturnValue £temporary181

isupper$25:	; Return £temporary181
x7786:	mov ax, [bp]	; 3: 139 70 0
x7789:	mov di, [bp + 4]	; 3: 139 126 4
x7792:	mov bp, [bp + 2]	; 3: 139 110 2
x7795:	jmp ax	; 2: 255 224

isupper$26:	; FunctionEnd isupper

localeconv:	; Equal 4 g_currStructPtr 0
x7797:	cmp word [@771$g_currStructPtr], 0	; 5: 131 62 147 30 0
x7802:	je localeconv$4	; 2: 116 9

localeconv$1:	; Deref £temporary305 -> g_currStructPtr g_currStructPtr 2
x7804:	mov si, [@771$g_currStructPtr]	; 4: 139 54 147 30

localeconv$2:	; Assign £temporary309 £temporary305 -> g_currStructPtr
x7808:	mov bx, [si + 2]	; 3: 139 92 2

localeconv$3:	; Goto 5
x7811:	jmp localeconv$5	; 2: 235 3

localeconv$4:	; Assign £temporary309 0
x7813:	mov bx, 0	; 3: 187 0 0

localeconv$5:	; SetReturnValue £temporary309

localeconv$6:	; Return £temporary309
x7816:	mov ax, [bp]	; 3: 139 70 0
x7819:	mov di, [bp + 4]	; 3: 139 126 4
x7822:	mov bp, [bp + 2]	; 3: 139 110 2
x7825:	jmp ax	; 2: 255 224

localeconv$7:	; FunctionEnd localeconv

@771$g_currStructPtr:
x7827:	dw @762$g_sArray	; 2: 149 30

@762$g_sArray:
x7829:	dw @756$string_# ; 2: 161 30
x7831:	dw @751$en_US_utf8	; 2: 162 30
x7833:	dw @758$string_C# ; 2: 182 33
x7835:	dw @751$en_US_utf8	; 2: 162 30
x7837:	dw @760$string_US# ; 2: 184 33
x7839:	dw @751$en_US_utf8	; 2: 162 30

@756$string_#:
x7841:	db 0	; 1: 0

@751$en_US_utf8:
x7842:	dw 1	; 2: 1 0
x7844:	dw 1	; 2: 1 0
x7846:	dw @692$enShortDayList ; 2: 180 30
x7848:	dw @700$enLongDayList ; 2: 222 30
x7850:	dw @713$enShortMonthList ; 2: 37 31
x7852:	dw @726$enLongMonthList ; 2: 109 31
x7854:	dw @749$string_abcdefghijklmnopqrstuvwxyz# ; 2: 219 31
x7856:	dw @750$string_ABCDEFGHIJKLMNOPQRSTUVWXYZ# ; 2: 246 31
x7858:	dw enMessageList ; 2: 17 32

@692$enShortDayList:
x7860:	dw @685$string_Sun# ; 2: 194 30
x7862:	dw @686$string_Mon# ; 2: 198 30
x7864:	dw @687$string_Tue# ; 2: 202 30
x7866:	dw @688$string_Wed# ; 2: 206 30
x7868:	dw @689$string_Thu# ; 2: 210 30
x7870:	dw @690$string_Fri# ; 2: 214 30
x7872:	dw @691$string_Sat# ; 2: 218 30

@685$string_Sun#:
x7874:	db "Sun", 0	; 4: 83 117 110 0

@686$string_Mon#:
x7878:	db "Mon", 0	; 4: 77 111 110 0

@687$string_Tue#:
x7882:	db "Tue", 0	; 4: 84 117 101 0

@688$string_Wed#:
x7886:	db "Wed", 0	; 4: 87 101 100 0

@689$string_Thu#:
x7890:	db "Thu", 0	; 4: 84 104 117 0

@690$string_Fri#:
x7894:	db "Fri", 0	; 4: 70 114 105 0

@691$string_Sat#:
x7898:	db "Sat", 0	; 4: 83 97 116 0

@700$enLongDayList:
x7902:	dw @693$string_Sunday# ; 2: 236 30
x7904:	dw @694$string_Monday# ; 2: 243 30
x7906:	dw @695$string_Tuesday# ; 2: 250 30
x7908:	dw @696$string_Wednesday# ; 2: 2 31
x7910:	dw @697$string_Thursday# ; 2: 12 31
x7912:	dw @698$string_Friday# ; 2: 21 31
x7914:	dw @699$string_Saturday# ; 2: 28 31

@693$string_Sunday#:
x7916:	db "Sunday", 0	; 7: 83 117 110 100 97 121 0

@694$string_Monday#:
x7923:	db "Monday", 0	; 7: 77 111 110 100 97 121 0

@695$string_Tuesday#:
x7930:	db "Tuesday", 0	; 8: 84 117 101 115 100 97 121 0

@696$string_Wednesday#:
x7938:	db "Wednesday", 0	; 10: 87 101 100 110 101 115 100 97 121 0

@697$string_Thursday#:
x7948:	db "Thursday", 0	; 9: 84 104 117 114 115 100 97 121 0

@698$string_Friday#:
x7957:	db "Friday", 0	; 7: 70 114 105 100 97 121 0

@699$string_Saturday#:
x7964:	db "Saturday", 0	; 9: 83 97 116 117 114 100 97 121 0

@713$enShortMonthList:
x7973:	dw @701$string_Jan# ; 2: 61 31
x7975:	dw @702$string_Feb# ; 2: 65 31
x7977:	dw @703$string_Mar# ; 2: 69 31
x7979:	dw @704$string_Apr# ; 2: 73 31
x7981:	dw @705$string_May# ; 2: 77 31
x7983:	dw @706$string_Jun# ; 2: 81 31
x7985:	dw @707$string_Jul# ; 2: 85 31
x7987:	dw @708$string_Aug# ; 2: 89 31
x7989:	dw @709$string_Sep# ; 2: 93 31
x7991:	dw @710$string_Oct# ; 2: 97 31
x7993:	dw @711$string_Nov# ; 2: 101 31
x7995:	dw @712$string_Dec# ; 2: 105 31

@701$string_Jan#:
x7997:	db "Jan", 0	; 4: 74 97 110 0

@702$string_Feb#:
x8001:	db "Feb", 0	; 4: 70 101 98 0

@703$string_Mar#:
x8005:	db "Mar", 0	; 4: 77 97 114 0

@704$string_Apr#:
x8009:	db "Apr", 0	; 4: 65 112 114 0

@705$string_May#:
x8013:	db "May", 0	; 4: 77 97 121 0

@706$string_Jun#:
x8017:	db "Jun", 0	; 4: 74 117 110 0

@707$string_Jul#:
x8021:	db "Jul", 0	; 4: 74 117 108 0

@708$string_Aug#:
x8025:	db "Aug", 0	; 4: 65 117 103 0

@709$string_Sep#:
x8029:	db "Sep", 0	; 4: 83 101 112 0

@710$string_Oct#:
x8033:	db "Oct", 0	; 4: 79 99 116 0

@711$string_Nov#:
x8037:	db "Nov", 0	; 4: 78 111 118 0

@712$string_Dec#:
x8041:	db "Dec", 0	; 4: 68 101 99 0

@726$enLongMonthList:
x8045:	dw @714$string_January# ; 2: 133 31
x8047:	dw @715$string_February# ; 2: 141 31
x8049:	dw @716$string_March# ; 2: 150 31
x8051:	dw @717$string_April# ; 2: 156 31
x8053:	dw @718$string_May# ; 2: 162 31
x8055:	dw @719$string_June# ; 2: 166 31
x8057:	dw @720$string_July# ; 2: 171 31
x8059:	dw @721$string_August# ; 2: 176 31
x8061:	dw @722$string_September# ; 2: 183 31
x8063:	dw @723$string_October# ; 2: 193 31
x8065:	dw @724$string_November# ; 2: 201 31
x8067:	dw @725$string_December# ; 2: 210 31

@714$string_January#:
x8069:	db "January", 0	; 8: 74 97 110 117 97 114 121 0

@715$string_February#:
x8077:	db "February", 0	; 9: 70 101 98 114 117 97 114 121 0

@716$string_March#:
x8086:	db "March", 0	; 6: 77 97 114 99 104 0

@717$string_April#:
x8092:	db "April", 0	; 6: 65 112 114 105 108 0

@718$string_May#:
x8098:	db "May", 0	; 4: 77 97 121 0

@719$string_June#:
x8102:	db "June", 0	; 5: 74 117 110 101 0

@720$string_July#:
x8107:	db "July", 0	; 5: 74 117 108 121 0

@721$string_August#:
x8112:	db "August", 0	; 7: 65 117 103 117 115 116 0

@722$string_September#:
x8119:	db "September", 0	; 10: 83 101 112 116 101 109 98 101 114 0

@723$string_October#:
x8129:	db "October", 0	; 8: 79 99 116 111 98 101 114 0

@724$string_November#:
x8137:	db "November", 0	; 9: 78 111 118 101 109 98 101 114 0

@725$string_December#:
x8146:	db "December", 0	; 9: 68 101 99 101 109 98 101 114 0

@749$string_abcdefghijklmnopqrstuvwxyz#:
x8155:	db "abcdefghijklmnopqrstuvwxyz", 0	; 27: 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 0

@750$string_ABCDEFGHIJKLMNOPQRSTUVWXYZ#:
x8182:	db "ABCDEFGHIJKLMNOPQRSTUVWXYZ", 0	; 27: 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 0

enMessageList:
x8209:	dw @727$string_no20error# ; 2: 57 32
x8211:	dw @728$string_function20number20invalid# ; 2: 66 32
x8213:	dw @729$string_file20not20found# ; 2: 90 32
x8215:	dw @730$string_path20not20found# ; 2: 105 32
x8217:	dw @731$string_no20handle20available# ; 2: 120 32
x8219:	dw @732$string_access20denied# ; 2: 140 32
x8221:	dw @733$string_out20of20domain# ; 2: 154 32
x8223:	dw @734$string_out20of20range# ; 2: 168 32
x8225:	dw @735$string_invalid20multibyte20sequence# ; 2: 181 32
x8227:	dw @736$string_error20while20opening# ; 2: 208 32
x8229:	dw @737$string_error20while20flushing# ; 2: 228 32
x8231:	dw @738$string_error20while20closing# ; 2: 249 32
x8233:	dw @739$string_open20mode20invalid# ; 2: 13 33
x8235:	dw @740$string_error20while20writing# ; 2: 31 33
x8237:	dw @741$string_error20while20reading# ; 2: 51 33
x8239:	dw @742$string_error20while20seeking# ; 2: 71 33
x8241:	dw @743$string_error20while20telling# ; 2: 91 33
x8243:	dw @744$string_error20while20sizing# ; 2: 111 33
x8245:	dw @745$string_error20while20removing20file# ; 2: 130 33
x8247:	dw @746$string_error20while20renaming20file# ; 2: 156 33

@727$string_no20error#:
x8249:	db "no error", 0	; 9: 110 111 32 101 114 114 111 114 0

@728$string_function20number20invalid#:
x8258:	db "function number invalid", 0	; 24: 102 117 110 99 116 105 111 110 32 110 117 109 98 101 114 32 105 110 118 97 108 105 100 0

@729$string_file20not20found#:
x8282:	db "file not found", 0	; 15: 102 105 108 101 32 110 111 116 32 102 111 117 110 100 0

@730$string_path20not20found#:
x8297:	db "path not found", 0	; 15: 112 97 116 104 32 110 111 116 32 102 111 117 110 100 0

@731$string_no20handle20available#:
x8312:	db "no handle available", 0	; 20: 110 111 32 104 97 110 100 108 101 32 97 118 97 105 108 97 98 108 101 0

@732$string_access20denied#:
x8332:	db "access denied", 0	; 14: 97 99 99 101 115 115 32 100 101 110 105 101 100 0

@733$string_out20of20domain#:
x8346:	db "out of domain", 0	; 14: 111 117 116 32 111 102 32 100 111 109 97 105 110 0

@734$string_out20of20range#:
x8360:	db "out of range", 0	; 13: 111 117 116 32 111 102 32 114 97 110 103 101 0

@735$string_invalid20multibyte20sequence#:
x8373:	db "invalid multibyte sequence", 0	; 27: 105 110 118 97 108 105 100 32 109 117 108 116 105 98 121 116 101 32 115 101 113 117 101 110 99 101 0

@736$string_error20while20opening#:
x8400:	db "error while opening", 0	; 20: 101 114 114 111 114 32 119 104 105 108 101 32 111 112 101 110 105 110 103 0

@737$string_error20while20flushing#:
x8420:	db "error while flushing", 0	; 21: 101 114 114 111 114 32 119 104 105 108 101 32 102 108 117 115 104 105 110 103 0

@738$string_error20while20closing#:
x8441:	db "error while closing", 0	; 20: 101 114 114 111 114 32 119 104 105 108 101 32 99 108 111 115 105 110 103 0

@739$string_open20mode20invalid#:
x8461:	db "open mode invalid", 0	; 18: 111 112 101 110 32 109 111 100 101 32 105 110 118 97 108 105 100 0

@740$string_error20while20writing#:
x8479:	db "error while writing", 0	; 20: 101 114 114 111 114 32 119 104 105 108 101 32 119 114 105 116 105 110 103 0

@741$string_error20while20reading#:
x8499:	db "error while reading", 0	; 20: 101 114 114 111 114 32 119 104 105 108 101 32 114 101 97 100 105 110 103 0

@742$string_error20while20seeking#:
x8519:	db "error while seeking", 0	; 20: 101 114 114 111 114 32 119 104 105 108 101 32 115 101 101 107 105 110 103 0

@743$string_error20while20telling#:
x8539:	db "error while telling", 0	; 20: 101 114 114 111 114 32 119 104 105 108 101 32 116 101 108 108 105 110 103 0

@744$string_error20while20sizing#:
x8559:	db "error while sizing", 0	; 19: 101 114 114 111 114 32 119 104 105 108 101 32 115 105 122 105 110 103 0

@745$string_error20while20removing20file#:
x8578:	db "error while removing file", 0	; 26: 101 114 114 111 114 32 119 104 105 108 101 32 114 101 109 111 118 105 110 103 32 102 105 108 101 0

@746$string_error20while20renaming20file#:
x8604:	db "error while renaming file", 0	; 26: 101 114 114 111 114 32 119 104 105 108 101 32 114 101 110 97 109 105 110 103 32 102 105 108 101 0

@758$string_C#:
x8630:	db "C", 0	; 2: 67 0

@760$string_US#:
x8632:	db "US", 0	; 3: 85 83 0

strchr:	; IntegralToIntegral £temporary3791 i
x8635:	mov ax, [bp + 8]	; 3: 139 70 8
x8638:	cmp ax, 0	; 3: 131 248 0
x8641:	jge strchr$1	; 2: 125 4
x8643:	neg ax	; 2: 247 216
x8645:	neg al	; 2: 246 216

strchr$1:	; Assign c £temporary3791
x8647:	mov [bp + 12], al	; 3: 136 70 12

strchr$2:	; Assign index 0
x8650:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strchr$3:	; BinaryAdd £temporary3793 text index
x8655:	mov si, [bp + 6]	; 3: 139 118 6
x8658:	add si, [bp + 10]	; 3: 3 118 10

strchr$4:	; Deref £temporary3792 -> £temporary3793 £temporary3793 0

strchr$5:	; Equal 16 £temporary3792 -> £temporary3793 0
x8661:	cmp byte [si], 0	; 3: 128 60 0
x8664:	je strchr$16	; 2: 116 35

strchr$6:	; BinaryAdd £temporary3797 text index
x8666:	mov si, [bp + 6]	; 3: 139 118 6
x8669:	add si, [bp + 10]	; 3: 3 118 10

strchr$7:	; Deref £temporary3796 -> £temporary3797 £temporary3797 0

strchr$8:	; NotEqual 14 £temporary3796 -> £temporary3797 c
x8672:	mov al, [bp + 12]	; 3: 138 70 12
x8675:	cmp [si], al	; 2: 56 4
x8677:	jne strchr$14	; 2: 117 17

strchr$9:	; BinaryAdd £temporary3800 text index
x8679:	mov bx, [bp + 6]	; 3: 139 94 6
x8682:	add bx, [bp + 10]	; 3: 3 94 10

strchr$10:	; Deref £temporary3799 -> £temporary3800 £temporary3800 0

strchr$11:	; address £temporary3801 £temporary3799 -> £temporary3800

strchr$12:	; SetReturnValue £temporary3801

strchr$13:	; Return £temporary3801
x8685:	mov ax, [bp]	; 3: 139 70 0
x8688:	mov di, [bp + 4]	; 3: 139 126 4
x8691:	mov bp, [bp + 2]	; 3: 139 110 2
x8694:	jmp ax	; 2: 255 224

strchr$14:	; Increment index
x8696:	inc word [bp + 10]	; 3: 255 70 10

strchr$15:	; Goto 3
x8699:	jmp strchr$3	; 2: 235 210

strchr$16:	; SetReturnValue 0
x8701:	mov bx, 0	; 3: 187 0 0

strchr$17:	; Return 0
x8704:	mov ax, [bp]	; 3: 139 70 0
x8707:	mov di, [bp + 4]	; 3: 139 126 4
x8710:	mov bp, [bp + 2]	; 3: 139 110 2
x8713:	jmp ax	; 2: 255 224

strchr$18:	; FunctionEnd strchr

printUnsignedLong:	; Equal 5 plus 0
x8715:	cmp word [bp + 10], 0	; 4: 131 126 10 0
x8719:	je printUnsignedLong$5	; 2: 116 18

printUnsignedLong$1:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLong$2:	; Parameter 22 43 6
x8721:	mov byte [bp + 28], 43	; 4: 198 70 28 43

printUnsignedLong$3:	; Call 22 printChar 0
x8725:	mov word [bp + 22], printUnsignedLong$4	; 5: 199 70 22 35 34
x8730:	mov [bp + 24], bp	; 3: 137 110 24
x8733:	add bp, 22	; 3: 131 197 22
x8736:	jmp printChar	; 3: 233 43 250

printUnsignedLong$4:	; PostCall 22

printUnsignedLong$5:	; Equal 10 space 0
x8739:	cmp word [bp + 12], 0	; 4: 131 126 12 0
x8743:	je printUnsignedLong$10	; 2: 116 18

printUnsignedLong$6:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLong$7:	; Parameter 22 32 6
x8745:	mov byte [bp + 28], 32	; 4: 198 70 28 32

printUnsignedLong$8:	; Call 22 printChar 0
x8749:	mov word [bp + 22], printUnsignedLong$9	; 5: 199 70 22 59 34
x8754:	mov [bp + 24], bp	; 3: 137 110 24
x8757:	add bp, 22	; 3: 131 197 22
x8760:	jmp printChar	; 3: 233 19 250

printUnsignedLong$9:	; PostCall 22

printUnsignedLong$10:	; Equal 29 grid 0
x8763:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x8767:	je printUnsignedLong$29	; 2: 116 79

printUnsignedLong$11:	; NotEqual 16 base 8
x8769:	cmp dword [bp + 16], 8	; 5: 102 131 126 16 8
x8774:	jne printUnsignedLong$16	; 2: 117 18

printUnsignedLong$12:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLong$13:	; Parameter 22 48 6
x8776:	mov byte [bp + 28], 48	; 4: 198 70 28 48

printUnsignedLong$14:	; Call 22 printChar 0
x8780:	mov word [bp + 22], printUnsignedLong$15	; 5: 199 70 22 90 34
x8785:	mov [bp + 24], bp	; 3: 137 110 24
x8788:	add bp, 22	; 3: 131 197 22
x8791:	jmp printChar	; 3: 233 244 249

printUnsignedLong$15:	; PostCall 22

printUnsignedLong$16:	; NotEqual 29 base 16
x8794:	cmp dword [bp + 16], 16	; 5: 102 131 126 16 16
x8799:	jne printUnsignedLong$29	; 2: 117 47

printUnsignedLong$17:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLong$18:	; Parameter 22 48 6
x8801:	mov byte [bp + 28], 48	; 4: 198 70 28 48

printUnsignedLong$19:	; Call 22 printChar 0
x8805:	mov word [bp + 22], printUnsignedLong$20	; 5: 199 70 22 115 34
x8810:	mov [bp + 24], bp	; 3: 137 110 24
x8813:	add bp, 22	; 3: 131 197 22
x8816:	jmp printChar	; 3: 233 219 249

printUnsignedLong$20:	; PostCall 22

printUnsignedLong$21:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLong$22:	; Equal 25 capital 0
x8819:	cmp word [bp + 20], 0	; 4: 131 126 20 0
x8823:	je printUnsignedLong$25	; 2: 116 4

printUnsignedLong$23:	; Assign £temporary1711 88
x8825:	mov al, 88	; 2: 176 88

printUnsignedLong$24:	; Goto 26
x8827:	jmp printUnsignedLong$26	; 2: 235 2

printUnsignedLong$25:	; Assign £temporary1711 120
x8829:	mov al, 120	; 2: 176 120

printUnsignedLong$26:	; Parameter 22 £temporary1711 6
x8831:	mov [bp + 28], al	; 3: 136 70 28

printUnsignedLong$27:	; Call 22 printChar 0
x8834:	mov word [bp + 22], printUnsignedLong$28	; 5: 199 70 22 144 34
x8839:	mov [bp + 24], bp	; 3: 137 110 24
x8842:	add bp, 22	; 3: 131 197 22
x8845:	jmp printChar	; 3: 233 190 249

printUnsignedLong$28:	; PostCall 22

printUnsignedLong$29:	; NotEqual 35 unsignedValue 0
x8848:	cmp dword [bp + 6], 0	; 5: 102 131 126 6 0
x8853:	jne printUnsignedLong$35	; 2: 117 20

printUnsignedLong$30:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLong$31:	; Parameter 22 48 6
x8855:	mov byte [bp + 28], 48	; 4: 198 70 28 48

printUnsignedLong$32:	; Call 22 printChar 0
x8859:	mov word [bp + 22], printUnsignedLong$33	; 5: 199 70 22 169 34
x8864:	mov [bp + 24], bp	; 3: 137 110 24
x8867:	add bp, 22	; 3: 131 197 22
x8870:	jmp printChar	; 3: 233 165 249

printUnsignedLong$33:	; PostCall 22

printUnsignedLong$34:	; Goto 41
x8873:	jmp printUnsignedLong$41	; 2: 235 36

printUnsignedLong$35:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLong$36:	; Parameter 22 unsignedValue 6
x8875:	mov eax, [bp + 6]	; 4: 102 139 70 6
x8879:	mov [bp + 28], eax	; 4: 102 137 70 28

printUnsignedLong$37:	; Parameter 22 base 10
x8883:	mov eax, [bp + 16]	; 4: 102 139 70 16
x8887:	mov [bp + 32], eax	; 4: 102 137 70 32

printUnsignedLong$38:	; Parameter 22 capital 14
x8891:	mov ax, [bp + 20]	; 3: 139 70 20
x8894:	mov [bp + 36], ax	; 3: 137 70 36

printUnsignedLong$39:	; Call 22 printUnsignedLongRec 0
x8897:	mov word [bp + 22], printUnsignedLong$40	; 5: 199 70 22 207 34
x8902:	mov [bp + 24], bp	; 3: 137 110 24
x8905:	add bp, 22	; 3: 131 197 22
x8908:	nop	; 1: 144
x8909:	jmp printUnsignedLongRec	; 2: 235 11

printUnsignedLong$40:	; PostCall 22

printUnsignedLong$41:	; Return 0
x8911:	mov ax, [bp]	; 3: 139 70 0
x8914:	mov di, [bp + 4]	; 3: 139 126 4
x8917:	mov bp, [bp + 2]	; 3: 139 110 2
x8920:	jmp ax	; 2: 255 224

printUnsignedLong$42:	; FunctionEnd printUnsignedLong

printUnsignedLongRec:	; UnsignedLessThanEqual 22 unsignedValue 0
x8922:	cmp dword [bp + 6], 0	; 5: 102 131 126 6 0
x8927:	jbe printUnsignedLongRec$22	; 2: 118 106

printUnsignedLongRec$1:	; UnsignedModulo £temporary1687 unsignedValue base
x8929:	mov eax, [bp + 6]	; 4: 102 139 70 6
x8933:	xor edx, edx	; 3: 102 49 210
x8936:	div dword [bp + 10]	; 4: 102 247 118 10

printUnsignedLongRec$2:	; IntegralToIntegral £temporary1688 £temporary1687

printUnsignedLongRec$3:	; Assign digit £temporary1688
x8940:	mov [bp + 16], dx	; 3: 137 86 16

printUnsignedLongRec$4:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLongRec$5:	; UnsignedDivide £temporary1689 unsignedValue base
x8943:	mov eax, [bp + 6]	; 4: 102 139 70 6
x8947:	xor edx, edx	; 3: 102 49 210
x8950:	div dword [bp + 10]	; 4: 102 247 118 10

printUnsignedLongRec$6:	; Parameter 18 £temporary1689 6
x8954:	mov [bp + 24], eax	; 4: 102 137 70 24

printUnsignedLongRec$7:	; Parameter 18 base 10
x8958:	mov eax, [bp + 10]	; 4: 102 139 70 10
x8962:	mov [bp + 28], eax	; 4: 102 137 70 28

printUnsignedLongRec$8:	; Parameter 18 capital 14
x8966:	mov ax, [bp + 14]	; 3: 139 70 14
x8969:	mov [bp + 32], ax	; 3: 137 70 32

printUnsignedLongRec$9:	; Call 18 printUnsignedLongRec 0
x8972:	mov word [bp + 18], printUnsignedLongRec$10	; 5: 199 70 18 26 35
x8977:	mov [bp + 20], bp	; 3: 137 110 20
x8980:	add bp, 18	; 3: 131 197 18
x8983:	nop	; 1: 144
x8984:	jmp printUnsignedLongRec	; 2: 235 192

printUnsignedLongRec$10:	; PostCall 18

printUnsignedLongRec$11:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLongRec$12:	; Parameter 18 digit 6
x8986:	mov ax, [bp + 16]	; 3: 139 70 16
x8989:	mov [bp + 24], ax	; 3: 137 70 24

printUnsignedLongRec$13:	; Parameter 18 capital 8
x8992:	mov ax, [bp + 14]	; 3: 139 70 14
x8995:	mov [bp + 26], ax	; 3: 137 70 26

printUnsignedLongRec$14:	; Call 18 digitToChar 0
x8998:	mov word [bp + 18], printUnsignedLongRec$15	; 5: 199 70 18 52 35
x9003:	mov [bp + 20], bp	; 3: 137 110 20
x9006:	add bp, 18	; 3: 131 197 18
x9009:	nop	; 1: 144
x9010:	jmp digitToChar	; 2: 235 34

printUnsignedLongRec$15:	; PostCall 18

printUnsignedLongRec$16:	; GetReturnValue £temporary1691

printUnsignedLongRec$17:	; Assign c £temporary1691
x9012:	mov [bp + 18], bl	; 3: 136 94 18

printUnsignedLongRec$18:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printUnsignedLongRec$19:	; Parameter 19 c 6
x9015:	mov al, [bp + 18]	; 3: 138 70 18
x9018:	mov [bp + 25], al	; 3: 136 70 25

printUnsignedLongRec$20:	; Call 19 printChar 0
x9021:	mov word [bp + 19], printUnsignedLongRec$21	; 5: 199 70 19 75 35
x9026:	mov [bp + 21], bp	; 3: 137 110 21
x9029:	add bp, 19	; 3: 131 197 19
x9032:	jmp printChar	; 3: 233 3 249

printUnsignedLongRec$21:	; PostCall 19

printUnsignedLongRec$22:	; Return 0
x9035:	mov ax, [bp]	; 3: 139 70 0
x9038:	mov di, [bp + 4]	; 3: 139 126 4
x9041:	mov bp, [bp + 2]	; 3: 139 110 2
x9044:	jmp ax	; 2: 255 224

printUnsignedLongRec$23:	; FunctionEnd printUnsignedLongRec

digitToChar:	; SignedGreaterThanEqual 5 digit 10
x9046:	cmp word [bp + 6], 10	; 4: 131 126 6 10
x9050:	jge digitToChar$5	; 2: 125 26

digitToChar$1:	; BinaryAdd £temporary1677 digit 48
x9052:	mov bx, [bp + 6]	; 3: 139 94 6
x9055:	add bx, 48	; 3: 131 195 48

digitToChar$2:	; IntegralToIntegral £temporary1678 £temporary1677
x9058:	cmp bx, 0	; 3: 131 251 0
x9061:	jge digitToChar$3	; 2: 125 4
x9063:	neg bx	; 2: 247 219
x9065:	neg bl	; 2: 246 219

digitToChar$3:	; SetReturnValue £temporary1678

digitToChar$4:	; Return £temporary1678
x9067:	mov ax, [bp]	; 3: 139 70 0
x9070:	mov di, [bp + 4]	; 3: 139 126 4
x9073:	mov bp, [bp + 2]	; 3: 139 110 2
x9076:	jmp ax	; 2: 255 224

digitToChar$5:	; Equal 11 capital 0
x9078:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x9082:	je digitToChar$11	; 2: 116 29

digitToChar$6:	; BinarySubtract £temporary1679 digit 10
x9084:	mov bx, [bp + 6]	; 3: 139 94 6
x9087:	sub bx, 10	; 3: 131 235 10

digitToChar$7:	; BinaryAdd £temporary1680 £temporary1679 65
x9090:	add bx, 65	; 3: 131 195 65

digitToChar$8:	; IntegralToIntegral £temporary1681 £temporary1680
x9093:	cmp bx, 0	; 3: 131 251 0
x9096:	jge digitToChar$9	; 2: 125 4
x9098:	neg bx	; 2: 247 219
x9100:	neg bl	; 2: 246 219

digitToChar$9:	; SetReturnValue £temporary1681

digitToChar$10:	; Return £temporary1681
x9102:	mov ax, [bp]	; 3: 139 70 0
x9105:	mov di, [bp + 4]	; 3: 139 126 4
x9108:	mov bp, [bp + 2]	; 3: 139 110 2
x9111:	jmp ax	; 2: 255 224

digitToChar$11:	; BinarySubtract £temporary1682 digit 10
x9113:	mov bx, [bp + 6]	; 3: 139 94 6
x9116:	sub bx, 10	; 3: 131 235 10

digitToChar$12:	; BinaryAdd £temporary1683 £temporary1682 97
x9119:	add bx, 97	; 3: 131 195 97

digitToChar$13:	; IntegralToIntegral £temporary1684 £temporary1683
x9122:	cmp bx, 0	; 3: 131 251 0
x9125:	jge digitToChar$14	; 2: 125 4
x9127:	neg bx	; 2: 247 219
x9129:	neg bl	; 2: 246 219

digitToChar$14:	; SetReturnValue £temporary1684

digitToChar$15:	; Return £temporary1684
x9131:	mov ax, [bp]	; 3: 139 70 0
x9134:	mov di, [bp + 4]	; 3: 139 126 4
x9137:	mov bp, [bp + 2]	; 3: 139 110 2
x9140:	jmp ax	; 2: 255 224

digitToChar$16:	; FunctionEnd digitToChar

printLongDoublePlain:	; PushFloat longDoubleValue
x9142:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoublePlain$1:	; PushFloat 0.0
x9145:	fldz	; 2: 217 238

printLongDoublePlain$2:	; SignedGreaterThanEqual 12 longDoubleValue 0.0
x9147:	fcompp	; 2: 222 217
x9149:	fstsw ax	; 3: 155 223 224
x9152:	sahf	; 1: 158
x9153:	jbe printLongDoublePlain$12	; 2: 118 36

printLongDoublePlain$3:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoublePlain$4:	; Parameter 22 45 6
x9155:	mov byte [bp + 28], 45	; 4: 198 70 28 45

printLongDoublePlain$5:	; Call 22 printChar 0
x9159:	mov word [bp + 22], printLongDoublePlain$6	; 5: 199 70 22 213 35
x9164:	mov [bp + 24], bp	; 3: 137 110 24
x9167:	add bp, 22	; 3: 131 197 22
x9170:	jmp printChar	; 3: 233 121 248

printLongDoublePlain$6:	; PostCall 22

printLongDoublePlain$7:	; PushFloat longDoubleValue
x9173:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoublePlain$8:	; UnarySubtract £temporary1748 longDoubleValue
x9176:	fchs	; 2: 217 224

printLongDoublePlain$9:	; PopFloat longDoubleValue
x9178:	fstp qword [bp + 6]	; 3: 221 94 6

printLongDoublePlain$10:	; Assign plus 0
x9181:	mov word [bp + 14], 0	; 5: 199 70 14 0 0

printLongDoublePlain$11:	; Assign space 0
x9186:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

printLongDoublePlain$12:	; PushFloat longDoubleValue
x9191:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoublePlain$13:	; FloatingToIntegral £temporary1749 longDoubleValue
x9194:	fistp dword [container4bytes#]	; 4: 219 30 78 36
x9198:	mov eax, [container4bytes#]	; 4: 102 161 78 36

printLongDoublePlain$14:	; Assign longValue £temporary1749
x9202:	mov [bp + 22], eax	; 4: 102 137 70 22

printLongDoublePlain$15:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoublePlain$16:	; Parameter 26 longValue 6
x9206:	mov eax, [bp + 22]	; 4: 102 139 70 22
x9210:	mov [bp + 32], eax	; 4: 102 137 70 32

printLongDoublePlain$17:	; Parameter 26 plus 10
x9214:	mov ax, [bp + 14]	; 3: 139 70 14
x9217:	mov [bp + 36], ax	; 3: 137 70 36

printLongDoublePlain$18:	; Parameter 26 space 12
x9220:	mov ax, [bp + 16]	; 3: 139 70 16
x9223:	mov [bp + 38], ax	; 3: 137 70 38

printLongDoublePlain$19:	; Call 26 printLongInt 0
x9226:	mov word [bp + 26], printLongDoublePlain$20	; 5: 199 70 26 24 36
x9231:	mov [bp + 28], bp	; 3: 137 110 28
x9234:	add bp, 26	; 3: 131 197 26
x9237:	jmp printLongInt	; 3: 233 162 247

printLongDoublePlain$20:	; PostCall 26

printLongDoublePlain$21:	; PushFloat longDoubleValue
x9240:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoublePlain$22:	; IntegralToFloating £temporary1751 longValue
x9243:	fild dword [bp + 22]	; 3: 219 70 22

printLongDoublePlain$23:	; BinarySubtract £temporary1752 longDoubleValue £temporary1751
x9246:	fsub	; 2: 222 233

printLongDoublePlain$24:	; PopFloat longDoubleValue
x9248:	fstp qword [bp + 6]	; 3: 221 94 6

printLongDoublePlain$25:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoublePlain$26:	; PushFloat longDoubleValue
x9251:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoublePlain$27:	; Parameter 26 longDoubleValue 6
x9254:	fstp qword [bp + 32]	; 3: 221 94 32

printLongDoublePlain$28:	; Parameter 26 grid 14
x9257:	mov ax, [bp + 18]	; 3: 139 70 18
x9260:	mov [bp + 40], ax	; 3: 137 70 40

printLongDoublePlain$29:	; Parameter 26 precision 16
x9263:	mov ax, [bp + 20]	; 3: 139 70 20
x9266:	mov [bp + 42], ax	; 3: 137 70 42

printLongDoublePlain$30:	; Call 26 printLongDoubleFraction 0
x9269:	mov word [bp + 26], printLongDoublePlain$31	; 5: 199 70 26 67 36
x9274:	mov [bp + 28], bp	; 3: 137 110 28
x9277:	add bp, 26	; 3: 131 197 26
x9280:	nop	; 1: 144
x9281:	jmp printLongDoubleFraction	; 2: 235 15

printLongDoublePlain$31:	; PostCall 26

printLongDoublePlain$32:	; Return 0
x9283:	mov ax, [bp]	; 3: 139 70 0
x9286:	mov di, [bp + 4]	; 3: 139 126 4
x9289:	mov bp, [bp + 2]	; 3: 139 110 2
x9292:	jmp ax	; 2: 255 224

printLongDoublePlain$33:	; FunctionEnd printLongDoublePlain

container4bytes#:
x9294:	db 0, 0, 0, 0	; 4: 0 0 0 0

printLongDoubleFraction:	; PushFloat longDoubleValue
x9298:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoubleFraction$1:	; PushFloat longDoubleValue
x9301:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoubleFraction$2:	; FloatingToIntegral £temporary1726 longDoubleValue
x9304:	fistp dword [container4bytes#]	; 4: 219 30 78 36
x9308:	mov eax, [container4bytes#]	; 4: 102 161 78 36

printLongDoubleFraction$3:	; IntegralToFloating £temporary1727 £temporary1726
x9312:	mov [container4bytes#], eax	; 4: 102 163 78 36
x9316:	fild dword [container4bytes#]	; 4: 219 6 78 36

printLongDoubleFraction$4:	; BinarySubtract £temporary1728 longDoubleValue £temporary1727
x9320:	fsub	; 2: 222 233

printLongDoubleFraction$5:	; PopFloat longDoubleValue
x9322:	fstp qword [bp + 6]	; 3: 221 94 6

printLongDoubleFraction$6:	; NotEqual 8 precision 0
x9325:	cmp word [bp + 16], 0	; 4: 131 126 16 0
x9329:	jne printLongDoubleFraction$8	; 2: 117 5

printLongDoubleFraction$7:	; Assign precision 6
x9331:	mov word [bp + 16], 6	; 5: 199 70 16 6 0

printLongDoubleFraction$8:	; NotEqual 10 grid 0
x9336:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x9340:	jne printLongDoubleFraction$10	; 2: 117 6

printLongDoubleFraction$9:	; SignedLessThanEqual 14 precision 0
x9342:	cmp word [bp + 16], 0	; 4: 131 126 16 0
x9346:	jle printLongDoubleFraction$14	; 2: 126 18

printLongDoubleFraction$10:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleFraction$11:	; Parameter 18 46 6
x9348:	mov byte [bp + 24], 46	; 4: 198 70 24 46

printLongDoubleFraction$12:	; Call 18 printChar 0
x9352:	mov word [bp + 18], printLongDoubleFraction$13	; 5: 199 70 18 150 36
x9357:	mov [bp + 20], bp	; 3: 137 110 20
x9360:	add bp, 18	; 3: 131 197 18
x9363:	jmp printChar	; 3: 233 184 247

printLongDoubleFraction$13:	; PostCall 18

printLongDoubleFraction$14:	; Assign £temporary1734 precision
x9366:	mov ax, [bp + 16]	; 3: 139 70 16

printLongDoubleFraction$15:	; Decrement precision
x9369:	dec word [bp + 16]	; 3: 255 78 16

printLongDoubleFraction$16:	; SignedLessThanEqual 35 £temporary1734 0
x9372:	cmp ax, 0	; 3: 131 248 0
x9375:	jle printLongDoubleFraction$35	; 2: 126 70

printLongDoubleFraction$17:	; PushFloat 10.0
x9377:	fld qword [@3956$float8$10.0#]	; 4: 221 6 242 36

printLongDoubleFraction$18:	; PushFloat longDoubleValue
x9381:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoubleFraction$19:	; SignedMultiply £temporary1737 10.0 longDoubleValue
x9384:	fmul	; 2: 222 201

printLongDoubleFraction$20:	; PopFloat longDoubleValue10
x9386:	fstp qword [bp + 18]	; 3: 221 94 18

printLongDoubleFraction$21:	; PushFloat longDoubleValue10
x9389:	fld qword [bp + 18]	; 3: 221 70 18

printLongDoubleFraction$22:	; FloatingToIntegral £temporary1738 longDoubleValue10
x9392:	fistp word [container2bytes#]	; 4: 223 30 77 27
x9396:	mov ax, [container2bytes#]	; 3: 161 77 27

printLongDoubleFraction$23:	; Assign digitValue £temporary1738
x9399:	mov [bp + 26], ax	; 3: 137 70 26

printLongDoubleFraction$24:	; CallHeader 28 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleFraction$25:	; BinaryAdd £temporary1739 digitValue 48
x9402:	mov ax, [bp + 26]	; 3: 139 70 26
x9405:	add ax, 48	; 3: 131 192 48

printLongDoubleFraction$26:	; IntegralToIntegral £temporary1740 £temporary1739
x9408:	cmp ax, 0	; 3: 131 248 0
x9411:	jge printLongDoubleFraction$27	; 2: 125 4
x9413:	neg ax	; 2: 247 216
x9415:	neg al	; 2: 246 216

printLongDoubleFraction$27:	; Parameter 28 £temporary1740 6
x9417:	mov [bp + 34], al	; 3: 136 70 34

printLongDoubleFraction$28:	; Call 28 printChar 0
x9420:	mov word [bp + 28], printLongDoubleFraction$29	; 5: 199 70 28 218 36
x9425:	mov [bp + 30], bp	; 3: 137 110 30
x9428:	add bp, 28	; 3: 131 197 28
x9431:	jmp printChar	; 3: 233 116 247

printLongDoubleFraction$29:	; PostCall 28

printLongDoubleFraction$30:	; PushFloat longDoubleValue10
x9434:	fld qword [bp + 18]	; 3: 221 70 18

printLongDoubleFraction$31:	; IntegralToFloating £temporary1742 digitValue
x9437:	fild word [bp + 26]	; 3: 223 70 26

printLongDoubleFraction$32:	; BinarySubtract £temporary1743 longDoubleValue10 £temporary1742
x9440:	fsub	; 2: 222 233

printLongDoubleFraction$33:	; PopFloat longDoubleValue
x9442:	fstp qword [bp + 6]	; 3: 221 94 6

printLongDoubleFraction$34:	; Goto 14
x9445:	jmp printLongDoubleFraction$14	; 2: 235 175

printLongDoubleFraction$35:	; Return 0
x9447:	mov ax, [bp]	; 3: 139 70 0
x9450:	mov di, [bp + 4]	; 3: 139 126 4
x9453:	mov bp, [bp + 2]	; 3: 139 110 2
x9456:	jmp ax	; 2: 255 224

printLongDoubleFraction$36:	; FunctionEnd printLongDoubleFraction

@3956$float8$10.0#:
x9458:	dq 10.0	; 8: 0 0 0 0 0 0 36 64

fabs:	; PushFloat x
x9466:	fld qword [bp + 6]	; 3: 221 70 6

fabs$1:	; PushZero
x9469:	fldz	; 2: 217 238

fabs$2:	; SignedGreaterThanEqual 7 x 0
x9471:	fcompp	; 2: 222 217
x9473:	fstsw ax	; 3: 155 223 224
x9476:	sahf	; 1: 158
x9477:	jbe fabs$7	; 2: 118 7

fabs$3:	; PushFloat x
x9479:	fld qword [bp + 6]	; 3: 221 70 6

fabs$4:	; UnarySubtract £temporary623 x
x9482:	fchs	; 2: 217 224

fabs$5:	; DecreaseStack

fabs$6:	; Goto 8
x9484:	jmp fabs$8	; 2: 235 3

fabs$7:	; PushFloat x
x9486:	fld qword [bp + 6]	; 3: 221 70 6

fabs$8:	; SetReturnValue £temporary627

fabs$9:	; Return £temporary627
x9489:	mov ax, [bp]	; 3: 139 70 0
x9492:	mov di, [bp + 4]	; 3: 139 126 4
x9495:	mov bp, [bp + 2]	; 3: 139 110 2
x9498:	jmp ax	; 2: 255 224

fabs$10:	; FunctionEnd fabs

tolower:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

tolower$1:	; Parameter 8 c 6
x9500:	mov ax, [bp + 6]	; 3: 139 70 6
x9503:	mov [bp + 14], ax	; 3: 137 70 14

tolower$2:	; Call 8 isupper 0
x9506:	mov word [bp + 8], tolower$3	; 5: 199 70 8 48 37
x9511:	mov [bp + 10], bp	; 3: 137 110 10
x9514:	add bp, 8	; 3: 131 197 8
x9517:	jmp isupper	; 3: 233 218 248

tolower$3:	; PostCall 8

tolower$4:	; GetReturnValue £temporary252

tolower$5:	; Equal 31 £temporary252 0
x9520:	cmp bx, 0	; 3: 131 251 0
x9523:	je tolower$31	; 2: 116 122

tolower$6:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

tolower$7:	; Call 8 localeconv 0
x9525:	mov word [bp + 8], tolower$8	; 5: 199 70 8 67 37
x9530:	mov [bp + 10], bp	; 3: 137 110 10
x9533:	add bp, 8	; 3: 131 197 8
x9536:	jmp localeconv	; 3: 233 50 249

tolower$8:	; PostCall 8

tolower$9:	; GetReturnValue £temporary253

tolower$10:	; Assign localeConvPtr £temporary253
x9539:	mov [bp + 8], bx	; 3: 137 94 8

tolower$11:	; Equal 28 localeConvPtr 0
x9542:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x9546:	je tolower$28	; 2: 116 82

tolower$12:	; Deref £temporary255 -> localeConvPtr localeConvPtr 12
x9548:	mov si, [bp + 8]	; 3: 139 118 8

tolower$13:	; Assign lowerCase £temporary255 -> localeConvPtr
x9551:	mov ax, [si + 12]	; 3: 139 68 12
x9554:	mov [bp + 10], ax	; 3: 137 70 10

tolower$14:	; Deref £temporary256 -> localeConvPtr localeConvPtr 14
x9557:	mov si, [bp + 8]	; 3: 139 118 8

tolower$15:	; Assign upperCase £temporary256 -> localeConvPtr
x9560:	mov ax, [si + 14]	; 3: 139 68 14
x9563:	mov [bp + 12], ax	; 3: 137 70 12

tolower$16:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

tolower$17:	; Parameter 14 upperCase 6
x9566:	mov ax, [bp + 12]	; 3: 139 70 12
x9569:	mov [bp + 20], ax	; 3: 137 70 20

tolower$18:	; Parameter 14 c 8
x9572:	mov ax, [bp + 6]	; 3: 139 70 6
x9575:	mov [bp + 22], ax	; 3: 137 70 22

tolower$19:	; Call 14 strchr 0
x9578:	mov word [bp + 14], tolower$20	; 5: 199 70 14 120 37
x9583:	mov [bp + 16], bp	; 3: 137 110 16
x9586:	add bp, 14	; 3: 131 197 14
x9589:	jmp strchr	; 3: 233 67 252

tolower$20:	; PostCall 14

tolower$21:	; GetReturnValue £temporary257

tolower$22:	; BinarySubtract index £temporary257 upperCase
x9592:	sub bx, [bp + 12]	; 3: 43 94 12
x9595:	mov [bp + 14], bx	; 3: 137 94 14

tolower$23:	; BinaryAdd £temporary260 lowerCase index
x9598:	mov si, [bp + 10]	; 3: 139 118 10
x9601:	add si, [bp + 14]	; 3: 3 118 14

tolower$24:	; Deref £temporary259 -> £temporary260 £temporary260 0

tolower$25:	; IntegralToIntegral £temporary261 £temporary259 -> £temporary260
x9604:	mov bl, [si]	; 2: 138 28
x9606:	and bx, 255	; 4: 129 227 255 0
x9610:	cmp bl, 0	; 3: 128 251 0
x9613:	jge tolower$26	; 2: 125 4
x9615:	neg bl	; 2: 246 219
x9617:	neg bx	; 2: 247 219

tolower$26:	; SetReturnValue £temporary261

tolower$27:	; Return £temporary261
x9619:	mov ax, [bp]	; 3: 139 70 0
x9622:	mov di, [bp + 4]	; 3: 139 126 4
x9625:	mov bp, [bp + 2]	; 3: 139 110 2
x9628:	jmp ax	; 2: 255 224

tolower$28:	; BinaryAdd £temporary262 c 32
x9630:	mov bx, [bp + 6]	; 3: 139 94 6
x9633:	add bx, 32	; 3: 131 195 32

tolower$29:	; SetReturnValue £temporary262

tolower$30:	; Return £temporary262
x9636:	mov ax, [bp]	; 3: 139 70 0
x9639:	mov di, [bp + 4]	; 3: 139 126 4
x9642:	mov bp, [bp + 2]	; 3: 139 110 2
x9645:	jmp ax	; 2: 255 224

tolower$31:	; SetReturnValue c
x9647:	mov bx, [bp + 6]	; 3: 139 94 6

tolower$32:	; Return c
x9650:	mov ax, [bp]	; 3: 139 70 0
x9653:	mov di, [bp + 4]	; 3: 139 126 4
x9656:	mov bp, [bp + 2]	; 3: 139 110 2
x9659:	jmp ax	; 2: 255 224

tolower$33:	; FunctionEnd tolower

printLongDoubleExpo:	; PushFloat value
x9661:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoubleExpo$1:	; PushFloat 0.0
x9664:	fldz	; 2: 217 238

printLongDoubleExpo$2:	; NotEqual 27 value 0.0
x9666:	fcompp	; 2: 222 217
x9668:	fstsw ax	; 3: 155 223 224
x9671:	sahf	; 1: 158
x9672:	jne printLongDoubleExpo$27	; 2: 117 99

printLongDoubleExpo$3:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleExpo$4:	; Parameter 24 48 6
x9674:	mov byte [bp + 30], 48	; 4: 198 70 30 48

printLongDoubleExpo$5:	; Call 24 printChar 0
x9678:	mov word [bp + 24], printLongDoubleExpo$6	; 5: 199 70 24 220 37
x9683:	mov [bp + 26], bp	; 3: 137 110 26
x9686:	add bp, 24	; 3: 131 197 24
x9689:	jmp printChar	; 3: 233 114 246

printLongDoubleExpo$6:	; PostCall 24

printLongDoubleExpo$7:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleExpo$8:	; PushFloat 0.0
x9692:	fldz	; 2: 217 238

printLongDoubleExpo$9:	; Parameter 24 0.0 6
x9694:	fstp qword [bp + 30]	; 3: 221 94 30

printLongDoubleExpo$10:	; Parameter 24 precision 14
x9697:	mov ax, [bp + 20]	; 3: 139 70 20
x9700:	mov [bp + 38], ax	; 3: 137 70 38

printLongDoubleExpo$11:	; Parameter 24 grid 16
x9703:	mov ax, [bp + 18]	; 3: 139 70 18
x9706:	mov [bp + 40], ax	; 3: 137 70 40

printLongDoubleExpo$12:	; Call 24 printLongDoubleFraction 0
x9709:	mov word [bp + 24], printLongDoubleExpo$13	; 5: 199 70 24 251 37
x9714:	mov [bp + 26], bp	; 3: 137 110 26
x9717:	add bp, 24	; 3: 131 197 24
x9720:	jmp printLongDoubleFraction	; 3: 233 87 254

printLongDoubleExpo$13:	; PostCall 24

printLongDoubleExpo$14:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleExpo$15:	; Equal 18 capital 0
x9723:	cmp word [bp + 22], 0	; 4: 131 126 22 0
x9727:	je printLongDoubleExpo$18	; 2: 116 4

printLongDoubleExpo$16:	; Assign £temporary1768 69
x9729:	mov al, 69	; 2: 176 69

printLongDoubleExpo$17:	; Goto 19
x9731:	jmp printLongDoubleExpo$19	; 2: 235 2

printLongDoubleExpo$18:	; Assign £temporary1768 101
x9733:	mov al, 101	; 2: 176 101

printLongDoubleExpo$19:	; Parameter 24 £temporary1768 6
x9735:	mov [bp + 30], al	; 3: 136 70 30

printLongDoubleExpo$20:	; Call 24 printChar 0
x9738:	mov word [bp + 24], printLongDoubleExpo$21	; 5: 199 70 24 24 38
x9743:	mov [bp + 26], bp	; 3: 137 110 26
x9746:	add bp, 24	; 3: 131 197 24
x9749:	jmp printChar	; 3: 233 54 246

printLongDoubleExpo$21:	; PostCall 24

printLongDoubleExpo$22:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleExpo$23:	; Parameter 24 48 6
x9752:	mov byte [bp + 30], 48	; 4: 198 70 30 48

printLongDoubleExpo$24:	; Call 24 printChar 0
x9756:	mov word [bp + 24], printLongDoubleExpo$25	; 5: 199 70 24 42 38
x9761:	mov [bp + 26], bp	; 3: 137 110 26
x9764:	add bp, 24	; 3: 131 197 24
x9767:	jmp printChar	; 3: 233 36 246

printLongDoubleExpo$25:	; PostCall 24

printLongDoubleExpo$26:	; Goto 80
x9770:	jmp printLongDoubleExpo$80	; 3: 233 236 0

printLongDoubleExpo$27:	; PushFloat value
x9773:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoubleExpo$28:	; PushFloat 0.0
x9776:	fldz	; 2: 217 238

printLongDoubleExpo$29:	; SignedGreaterThanEqual 37 value 0.0
x9778:	fcompp	; 2: 222 217
x9780:	fstsw ax	; 3: 155 223 224
x9783:	sahf	; 1: 158
x9784:	jbe printLongDoubleExpo$37	; 2: 118 26

printLongDoubleExpo$30:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleExpo$31:	; Parameter 24 45 6
x9786:	mov byte [bp + 30], 45	; 4: 198 70 30 45

printLongDoubleExpo$32:	; Call 24 printChar 0
x9790:	mov word [bp + 24], printLongDoubleExpo$33	; 5: 199 70 24 76 38
x9795:	mov [bp + 26], bp	; 3: 137 110 26
x9798:	add bp, 24	; 3: 131 197 24
x9801:	jmp printChar	; 3: 233 2 246

printLongDoubleExpo$33:	; PostCall 24

printLongDoubleExpo$34:	; PushFloat value
x9804:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoubleExpo$35:	; UnarySubtract £temporary1773 value
x9807:	fchs	; 2: 217 224

printLongDoubleExpo$36:	; PopFloat value
x9809:	fstp qword [bp + 6]	; 3: 221 94 6

printLongDoubleExpo$37:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleExpo$38:	; PushFloat value
x9812:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoubleExpo$39:	; Parameter 24 value 6
x9815:	fstp qword [bp + 30]	; 3: 221 94 30

printLongDoubleExpo$40:	; Call 24 log10 0
x9818:	mov word [bp + 24], printLongDoubleExpo$41	; 5: 199 70 24 104 38
x9823:	mov [bp + 26], bp	; 3: 137 110 26
x9826:	add bp, 24	; 3: 131 197 24
x9829:	jmp log10	; 3: 233 196 0

printLongDoubleExpo$41:	; PostCall 24

printLongDoubleExpo$42:	; GetReturnValue £temporary1774

printLongDoubleExpo$43:	; FloatingToIntegral £temporary1775 £temporary1774
x9832:	fistp word [container2bytes#]	; 4: 223 30 77 27
x9836:	mov ax, [container2bytes#]	; 3: 161 77 27

printLongDoubleExpo$44:	; Assign expo £temporary1775
x9839:	mov [bp + 24], ax	; 3: 137 70 24

printLongDoubleExpo$45:	; PushFloat value
x9842:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoubleExpo$46:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x9845:	fstp qword [bp + 26]	; 3: 221 94 26

printLongDoubleExpo$47:	; PushFloat 10.0
x9848:	fld qword [@4037$float8$10.0#]	; 4: 221 6 36 39

printLongDoubleExpo$48:	; Parameter 26 10.0 6
x9852:	fstp qword [bp + 40]	; 3: 221 94 40

printLongDoubleExpo$49:	; IntegralToFloating £temporary1776 expo
x9855:	fild word [bp + 24]	; 3: 223 70 24

printLongDoubleExpo$50:	; Parameter 26 £temporary1776 14
x9858:	fstp qword [bp + 48]	; 3: 221 94 48

printLongDoubleExpo$51:	; Call 26 pow 0
x9861:	mov word [bp + 34], printLongDoubleExpo$52	; 5: 199 70 34 147 38
x9866:	mov [bp + 36], bp	; 3: 137 110 36
x9869:	add bp, 34	; 3: 131 197 34
x9872:	jmp pow	; 3: 233 5 2

printLongDoubleExpo$52:	; PostCall 26
x9875:	fstp qword [bp + 34]	; 3: 221 94 34
x9878:	fld qword [bp + 26]	; 3: 221 70 26
x9881:	fld qword [bp + 34]	; 3: 221 70 34

printLongDoubleExpo$53:	; GetReturnValue £temporary1777

printLongDoubleExpo$54:	; SignedDivide £temporary1778 value £temporary1777
x9884:	fdiv	; 2: 222 249

printLongDoubleExpo$55:	; PopFloat value
x9886:	fstp qword [bp + 6]	; 3: 221 94 6

printLongDoubleExpo$56:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleExpo$57:	; PushFloat value
x9889:	fld qword [bp + 6]	; 3: 221 70 6

printLongDoubleExpo$58:	; Parameter 26 value 6
x9892:	fstp qword [bp + 32]	; 3: 221 94 32

printLongDoubleExpo$59:	; Parameter 26 plus 14
x9895:	mov ax, [bp + 14]	; 3: 139 70 14
x9898:	mov [bp + 40], ax	; 3: 137 70 40

printLongDoubleExpo$60:	; Parameter 26 space 16
x9901:	mov ax, [bp + 16]	; 3: 139 70 16
x9904:	mov [bp + 42], ax	; 3: 137 70 42

printLongDoubleExpo$61:	; Parameter 26 grid 18
x9907:	mov ax, [bp + 18]	; 3: 139 70 18
x9910:	mov [bp + 44], ax	; 3: 137 70 44

printLongDoubleExpo$62:	; Parameter 26 precision 20
x9913:	mov ax, [bp + 20]	; 3: 139 70 20
x9916:	mov [bp + 46], ax	; 3: 137 70 46

printLongDoubleExpo$63:	; Call 26 printLongDoublePlain 0
x9919:	mov word [bp + 26], printLongDoubleExpo$64	; 5: 199 70 26 205 38
x9924:	mov [bp + 28], bp	; 3: 137 110 28
x9927:	add bp, 26	; 3: 131 197 26
x9930:	jmp printLongDoublePlain	; 3: 233 233 252

printLongDoubleExpo$64:	; PostCall 26

printLongDoubleExpo$65:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleExpo$66:	; Equal 69 capital 0
x9933:	cmp word [bp + 22], 0	; 4: 131 126 22 0
x9937:	je printLongDoubleExpo$69	; 2: 116 4

printLongDoubleExpo$67:	; Assign £temporary1784 69
x9939:	mov al, 69	; 2: 176 69

printLongDoubleExpo$68:	; Goto 70
x9941:	jmp printLongDoubleExpo$70	; 2: 235 2

printLongDoubleExpo$69:	; Assign £temporary1784 101
x9943:	mov al, 101	; 2: 176 101

printLongDoubleExpo$70:	; Parameter 26 £temporary1784 6
x9945:	mov [bp + 32], al	; 3: 136 70 32

printLongDoubleExpo$71:	; Call 26 printChar 0
x9948:	mov word [bp + 26], printLongDoubleExpo$72	; 5: 199 70 26 234 38
x9953:	mov [bp + 28], bp	; 3: 137 110 28
x9956:	add bp, 26	; 3: 131 197 26
x9959:	jmp printChar	; 3: 233 100 245

printLongDoubleExpo$72:	; PostCall 26

printLongDoubleExpo$73:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

printLongDoubleExpo$74:	; IntegralToIntegral £temporary1786 expo
x9962:	mov ax, [bp + 24]	; 3: 139 70 24
x9965:	and eax, 65535	; 6: 102 37 255 255 0 0
x9971:	cmp ax, 0	; 3: 131 248 0
x9974:	jge printLongDoubleExpo$75	; 2: 125 5
x9976:	neg ax	; 2: 247 216
x9978:	neg eax	; 3: 102 247 216

printLongDoubleExpo$75:	; Parameter 26 £temporary1786 6
x9981:	mov [bp + 32], eax	; 4: 102 137 70 32

printLongDoubleExpo$76:	; Parameter 26 1 10
x9985:	mov word [bp + 36], 1	; 5: 199 70 36 1 0

printLongDoubleExpo$77:	; Parameter 26 0 12
x9990:	mov word [bp + 38], 0	; 5: 199 70 38 0 0

printLongDoubleExpo$78:	; Call 26 printLongInt 0
x9995:	mov word [bp + 26], printLongDoubleExpo$79	; 5: 199 70 26 25 39
x10000:	mov [bp + 28], bp	; 3: 137 110 28
x10003:	add bp, 26	; 3: 131 197 26
x10006:	jmp printLongInt	; 3: 233 161 244

printLongDoubleExpo$79:	; PostCall 26

printLongDoubleExpo$80:	; Return 0
x10009:	mov ax, [bp]	; 3: 139 70 0
x10012:	mov di, [bp + 4]	; 3: 139 126 4
x10015:	mov bp, [bp + 2]	; 3: 139 110 2
x10018:	jmp ax	; 2: 255 224

printLongDoubleExpo$81:	; FunctionEnd printLongDoubleExpo

@4037$float8$10.0#:
x10020:	dq 10.0	; 8: 0 0 0 0 0 0 36 64

log10:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

log10$1:	; PushFloat x
x10028:	fld qword [bp + 6]	; 3: 221 70 6

log10$2:	; Parameter 14 x 6
x10031:	fstp qword [bp + 20]	; 3: 221 94 20

log10$3:	; Call 14 log 0
x10034:	mov word [bp + 14], log10$4	; 5: 199 70 14 64 39
x10039:	mov [bp + 16], bp	; 3: 137 110 16
x10042:	add bp, 14	; 3: 131 197 14
x10045:	nop	; 1: 144
x10046:	jmp log	; 2: 235 25

log10$4:	; PostCall 14

log10$5:	; GetReturnValue £temporary340

log10$6:	; PushFloat 2.30
x10048:	fld qword [@926$float8$2.30#]	; 4: 221 6 81 39

log10$7:	; SignedDivide £temporary341 £temporary340 2.30
x10052:	fdiv	; 2: 222 249

log10$8:	; SetReturnValue £temporary341

log10$9:	; Return £temporary341
x10054:	mov ax, [bp]	; 3: 139 70 0
x10057:	mov di, [bp + 4]	; 3: 139 126 4
x10060:	mov bp, [bp + 2]	; 3: 139 110 2
x10063:	jmp ax	; 2: 255 224

log10$10:	; FunctionEnd log10

@926$float8$2.30#:
x10065:	dq 2.30	; 8: 102 102 102 102 102 102 2 64

log:	; PushFloat x
x10073:	fld qword [bp + 6]	; 3: 221 70 6

log$1:	; PushZero
x10076:	fldz	; 2: 217 238

log$2:	; SignedLessThanEqual 75 x 0
x10078:	fcompp	; 2: 222 217
x10080:	fstsw ax	; 3: 155 223 224
x10083:	sahf	; 1: 158
x10084:	jae log$75	; 4: 15 131 237 0

log$3:	; Assign n 0
x10088:	mov word [bp + 14], 0	; 5: 199 70 14 0 0

log$4:	; PushFloat x
x10093:	fld qword [bp + 6]	; 3: 221 70 6

log$5:	; PushOne
x10096:	fld1	; 2: 217 232

log$6:	; SignedLessThanEqual 16 x 1
x10098:	fcompp	; 2: 222 217
x10100:	fstsw ax	; 3: 155 223 224
x10103:	sahf	; 1: 158
x10104:	jae log$16	; 2: 115 30

log$7:	; PushFloat x
x10106:	fld qword [bp + 6]	; 3: 221 70 6

log$8:	; PushOne
x10109:	fld1	; 2: 217 232

log$9:	; SignedLessThanEqual 28 x 1
x10111:	fcompp	; 2: 222 217
x10113:	fstsw ax	; 3: 155 223 224
x10116:	sahf	; 1: 158
x10117:	jae log$28	; 2: 115 64

log$10:	; PushFloat x
x10119:	fld qword [bp + 6]	; 3: 221 70 6

log$11:	; PushFloat 2.71
x10122:	fld qword [@872$float8$2.71#]	; 4: 221 6 104 40

log$12:	; SignedDivide £temporary322 x 2.71
x10126:	fdiv	; 2: 222 249

log$13:	; PopFloat x
x10128:	fstp qword [bp + 6]	; 3: 221 94 6

log$14:	; Increment n
x10131:	inc word [bp + 14]	; 3: 255 70 14

log$15:	; Goto 7
x10134:	jmp log$7	; 2: 235 226

log$16:	; PushFloat x
x10136:	fld qword [bp + 6]	; 3: 221 70 6

log$17:	; PushFloat 0.368
x10139:	fld qword [@878$float8$0.368#]	; 4: 221 6 112 40

log$18:	; SignedGreaterThanEqual 28 x 0.368
x10143:	fcompp	; 2: 222 217
x10145:	fstsw ax	; 3: 155 223 224
x10148:	sahf	; 1: 158
x10149:	jbe log$28	; 2: 118 32

log$19:	; PushFloat x
x10151:	fld qword [bp + 6]	; 3: 221 70 6

log$20:	; PushFloat 0.368
x10154:	fld qword [@881$float8$0.368#]	; 4: 221 6 120 40

log$21:	; SignedGreaterThanEqual 28 x 0.368
x10158:	fcompp	; 2: 222 217
x10160:	fstsw ax	; 3: 155 223 224
x10163:	sahf	; 1: 158
x10164:	jbe log$28	; 2: 118 17

log$22:	; PushFloat x
x10166:	fld qword [bp + 6]	; 3: 221 70 6

log$23:	; PushFloat 2.71
x10169:	fld qword [@884$float8$2.71#]	; 4: 221 6 128 40

log$24:	; SignedMultiply £temporary326 x 2.71
x10173:	fmul	; 2: 222 201

log$25:	; PopFloat x
x10175:	fstp qword [bp + 6]	; 3: 221 94 6

log$26:	; Decrement n
x10178:	dec word [bp + 14]	; 3: 255 78 14

log$27:	; Goto 19
x10181:	jmp log$19	; 2: 235 224

log$28:	; PushOne
x10183:	fld1	; 2: 217 232

log$29:	; PopFloat index
x10185:	fstp qword [bp + 16]	; 3: 221 94 16

log$30:	; PushZero
x10188:	fldz	; 2: 217 238

log$31:	; PopFloat sum
x10190:	fstp qword [bp + 32]	; 3: 221 94 32

log$32:	; PushOne
x10193:	fld1	; 2: 217 232

log$33:	; PopFloat sign
x10195:	fstp qword [bp + 40]	; 3: 221 94 40

log$34:	; PushFloat x
x10198:	fld qword [bp + 6]	; 3: 221 70 6

log$35:	; PushOne
x10201:	fld1	; 2: 217 232

log$36:	; BinarySubtract £temporary328 x 1
x10203:	fsub	; 2: 222 233

log$37:	; PopFloat x_minus_1
x10205:	fstp qword [bp + 48]	; 3: 221 94 48

log$38:	; PushFloat x_minus_1
x10208:	fld qword [bp + 48]	; 3: 221 70 48

log$39:	; PopFloat power
x10211:	fstp qword [bp + 56]	; 3: 221 94 56

log$40:	; PushFloat sign
x10214:	fld qword [bp + 40]	; 3: 221 70 40

log$41:	; PushFloat power
x10217:	fld qword [bp + 56]	; 3: 221 70 56

log$42:	; SignedMultiply £temporary329 sign power
x10220:	fmul	; 2: 222 201

log$43:	; PushFloat index
x10222:	fld qword [bp + 16]	; 3: 221 70 16

log$44:	; PushFloat index
x10225:	fld qword [bp + 16]	; 3: 221 70 16

log$45:	; PushOne
x10228:	fld1	; 2: 217 232

log$46:	; BinaryAdd index index 1
x10230:	fadd	; 2: 222 193

log$47:	; PopFloat index
x10232:	fstp qword [bp + 16]	; 3: 221 94 16

log$48:	; SignedDivide £temporary331 £temporary329 £temporary330
x10235:	fdiv	; 2: 222 249

log$49:	; PopFloat term
x10237:	fstp qword [bp + 24]	; 3: 221 94 24

log$50:	; PushFloat sum
x10240:	fld qword [bp + 32]	; 3: 221 70 32

log$51:	; PushFloat term
x10243:	fld qword [bp + 24]	; 3: 221 70 24

log$52:	; BinaryAdd £temporary332 sum term
x10246:	fadd	; 2: 222 193

log$53:	; PopFloat sum
x10248:	fstp qword [bp + 32]	; 3: 221 94 32

log$54:	; PushFloat power
x10251:	fld qword [bp + 56]	; 3: 221 70 56

log$55:	; PushFloat x_minus_1
x10254:	fld qword [bp + 48]	; 3: 221 70 48

log$56:	; SignedMultiply £temporary333 power x_minus_1
x10257:	fmul	; 2: 222 201

log$57:	; PopFloat power
x10259:	fstp qword [bp + 56]	; 3: 221 94 56

log$58:	; PushFloat sign
x10262:	fld qword [bp + 40]	; 3: 221 70 40

log$59:	; PushFloat -1.0
x10265:	fld qword [@911$float8$minus1.0#]	; 4: 221 6 136 40

log$60:	; SignedMultiply £temporary334 sign -1.0
x10269:	fmul	; 2: 222 201

log$61:	; PopFloat sign
x10271:	fstp qword [bp + 40]	; 3: 221 94 40

log$62:	; CallHeader 64 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

log$63:	; PushFloat term
x10274:	fld qword [bp + 24]	; 3: 221 70 24

log$64:	; Parameter 64 term 6
x10277:	fstp qword [bp + 70]	; 3: 221 94 70

log$65:	; Call 64 fabs 0
x10280:	mov word [bp + 64], log$66	; 5: 199 70 64 54 40
x10285:	mov [bp + 66], bp	; 3: 137 110 66
x10288:	add bp, 64	; 3: 131 197 64
x10291:	jmp fabs	; 3: 233 196 252

log$66:	; PostCall 64

log$67:	; GetReturnValue £temporary335

log$68:	; PushFloat 0.000000001
x10294:	fld qword [@915$float8$0.000000001#]	; 4: 221 6 144 40

log$69:	; SignedGreaterThanEqual 40 £temporary335 0.000000001
x10298:	fcompp	; 2: 222 217
x10300:	fstsw ax	; 3: 155 223 224
x10303:	sahf	; 1: 158
x10304:	jbe log$40	; 2: 118 164

log$70:	; PushFloat sum
x10306:	fld qword [bp + 32]	; 3: 221 70 32

log$71:	; IntegralToFloating £temporary337 n
x10309:	fild word [bp + 14]	; 3: 223 70 14

log$72:	; BinaryAdd £temporary338 sum £temporary337
x10312:	fadd	; 2: 222 193

log$73:	; SetReturnValue £temporary338

log$74:	; Return £temporary338
x10314:	mov ax, [bp]	; 3: 139 70 0
x10317:	mov di, [bp + 4]	; 3: 139 126 4
x10320:	mov bp, [bp + 2]	; 3: 139 110 2
x10323:	jmp ax	; 2: 255 224

log$75:	; Assign errno 6
x10325:	mov word [errno], 6	; 6: 199 6 230 10 6 0

log$76:	; PushZero
x10331:	fldz	; 2: 217 238

log$77:	; SetReturnValue 0

log$78:	; Return 0
x10333:	mov ax, [bp]	; 3: 139 70 0
x10336:	mov di, [bp + 4]	; 3: 139 126 4
x10339:	mov bp, [bp + 2]	; 3: 139 110 2
x10342:	jmp ax	; 2: 255 224

log$79:	; FunctionEnd log

@872$float8$2.71#:
x10344:	dq 2.71	; 8: 174 71 225 122 20 174 5 64

@878$float8$0.368#:
x10352:	dq 0.368	; 8: 90 100 59 223 79 141 215 63

@881$float8$0.368#:
x10360:	dq 0.368	; 8: 90 100 59 223 79 141 215 63

@884$float8$2.71#:
x10368:	dq 2.71	; 8: 174 71 225 122 20 174 5 64

@911$float8$minus1.0#:
x10376:	dq -1.0	; 8: 0 0 0 0 0 0 240 191

@915$float8$0.000000001#:
x10384:	dq 0.000000001	; 8: 149 214 38 232 11 46 17 62

pow:	; PushFloat x
x10392:	fld qword [bp + 6]	; 3: 221 70 6

pow$1:	; PushZero
x10395:	fldz	; 2: 217 238

pow$2:	; SignedLessThanEqual 18 x 0
x10397:	fcompp	; 2: 222 217
x10399:	fstsw ax	; 3: 155 223 224
x10402:	sahf	; 1: 158
x10403:	jae pow$18	; 2: 115 65

pow$3:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

pow$4:	; PushFloat y
x10405:	fld qword [bp + 14]	; 3: 221 70 14

pow$5:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x10408:	fstp qword [bp + 22]	; 3: 221 94 22

pow$6:	; PushFloat x
x10411:	fld qword [bp + 6]	; 3: 221 70 6

pow$7:	; Parameter 22 x 6
x10414:	fstp qword [bp + 36]	; 3: 221 94 36

pow$8:	; Call 22 log 0
x10417:	mov word [bp + 30], pow$9	; 5: 199 70 30 191 40
x10422:	mov [bp + 32], bp	; 3: 137 110 32
x10425:	add bp, 30	; 3: 131 197 30
x10428:	jmp log	; 3: 233 154 254

pow$9:	; PostCall 22
x10431:	fstp qword [bp + 30]	; 3: 221 94 30
x10434:	fld qword [bp + 22]	; 3: 221 70 22
x10437:	fld qword [bp + 30]	; 3: 221 70 30

pow$10:	; GetReturnValue £temporary344

pow$11:	; SignedMultiply £temporary345 y £temporary344
x10440:	fmul	; 2: 222 201

pow$12:	; Parameter 22 £temporary345 6
x10442:	fstp qword [bp + 28]	; 3: 221 94 28

pow$13:	; Call 22 exp 0
x10445:	mov word [bp + 22], pow$14	; 5: 199 70 22 219 40
x10450:	mov [bp + 24], bp	; 3: 137 110 24
x10453:	add bp, 22	; 3: 131 197 22
x10456:	jmp exp	; 3: 233 102 1

pow$14:	; PostCall 22

pow$15:	; GetReturnValue £temporary346

pow$16:	; SetReturnValue £temporary346

pow$17:	; Return £temporary346
x10459:	mov ax, [bp]	; 3: 139 70 0
x10462:	mov di, [bp + 4]	; 3: 139 126 4
x10465:	mov bp, [bp + 2]	; 3: 139 110 2
x10468:	jmp ax	; 2: 255 224

pow$18:	; PushFloat x
x10470:	fld qword [bp + 6]	; 3: 221 70 6

pow$19:	; PushZero
x10473:	fldz	; 2: 217 238

pow$20:	; NotEqual 27 x 0
x10475:	fcompp	; 2: 222 217
x10477:	fstsw ax	; 3: 155 223 224
x10480:	sahf	; 1: 158
x10481:	jne pow$27	; 2: 117 26

pow$21:	; PushFloat y
x10483:	fld qword [bp + 14]	; 3: 221 70 14

pow$22:	; PushZero
x10486:	fldz	; 2: 217 238

pow$23:	; NotEqual 27 y 0
x10488:	fcompp	; 2: 222 217
x10490:	fstsw ax	; 3: 155 223 224
x10493:	sahf	; 1: 158
x10494:	jne pow$27	; 2: 117 13

pow$24:	; PushOne
x10496:	fld1	; 2: 217 232

pow$25:	; SetReturnValue 1

pow$26:	; Return 1
x10498:	mov ax, [bp]	; 3: 139 70 0
x10501:	mov di, [bp + 4]	; 3: 139 126 4
x10504:	mov bp, [bp + 2]	; 3: 139 110 2
x10507:	jmp ax	; 2: 255 224

pow$27:	; PushFloat x
x10509:	fld qword [bp + 6]	; 3: 221 70 6

pow$28:	; PushZero
x10512:	fldz	; 2: 217 238

pow$29:	; NotEqual 36 x 0
x10514:	fcompp	; 2: 222 217
x10516:	fstsw ax	; 3: 155 223 224
x10519:	sahf	; 1: 158
x10520:	jne pow$36	; 2: 117 26

pow$30:	; PushFloat y
x10522:	fld qword [bp + 14]	; 3: 221 70 14

pow$31:	; PushZero
x10525:	fldz	; 2: 217 238

pow$32:	; SignedLessThanEqual 36 y 0
x10527:	fcompp	; 2: 222 217
x10529:	fstsw ax	; 3: 155 223 224
x10532:	sahf	; 1: 158
x10533:	jae pow$36	; 2: 115 13

pow$33:	; PushZero
x10535:	fldz	; 2: 217 238

pow$34:	; SetReturnValue 0

pow$35:	; Return 0
x10537:	mov ax, [bp]	; 3: 139 70 0
x10540:	mov di, [bp + 4]	; 3: 139 126 4
x10543:	mov bp, [bp + 2]	; 3: 139 110 2
x10546:	jmp ax	; 2: 255 224

pow$36:	; PushFloat x
x10548:	fld qword [bp + 6]	; 3: 221 70 6

pow$37:	; PushZero
x10551:	fldz	; 2: 217 238

pow$38:	; SignedGreaterThanEqual 90 x 0
x10553:	fcompp	; 2: 222 217
x10555:	fstsw ax	; 3: 155 223 224
x10558:	sahf	; 1: 158
x10559:	jbe pow$90	; 4: 15 134 231 0

pow$39:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

pow$40:	; PushFloat y
x10563:	fld qword [bp + 14]	; 3: 221 70 14

pow$41:	; Parameter 22 y 6
x10566:	fstp qword [bp + 28]	; 3: 221 94 28

pow$42:	; Call 22 floor 0
x10569:	mov word [bp + 22], pow$43	; 5: 199 70 22 87 41
x10574:	mov [bp + 24], bp	; 3: 137 110 24
x10577:	add bp, 22	; 3: 131 197 22
x10580:	jmp floor	; 3: 233 104 1

pow$43:	; PostCall 22

pow$44:	; GetReturnValue £temporary354

pow$45:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x10583:	fstp qword [bp + 22]	; 3: 221 94 22

pow$46:	; PushFloat y
x10586:	fld qword [bp + 14]	; 3: 221 70 14

pow$47:	; Parameter 22 y 6
x10589:	fstp qword [bp + 36]	; 3: 221 94 36

pow$48:	; Call 22 ceil 0
x10592:	mov word [bp + 30], pow$49	; 5: 199 70 30 110 41
x10597:	mov [bp + 32], bp	; 3: 137 110 32
x10600:	add bp, 30	; 3: 131 197 30
x10603:	jmp ceil	; 3: 233 159 1

pow$49:	; PostCall 22
x10606:	fstp qword [bp + 30]	; 3: 221 94 30
x10609:	fld qword [bp + 22]	; 3: 221 70 22
x10612:	fld qword [bp + 30]	; 3: 221 70 30

pow$50:	; GetReturnValue £temporary355

pow$51:	; NotEqual 90 £temporary354 £temporary355
x10615:	fcompp	; 2: 222 217
x10617:	fstsw ax	; 3: 155 223 224
x10620:	sahf	; 1: 158
x10621:	jne pow$90	; 4: 15 133 169 0

pow$52:	; PushFloat y
x10625:	fld qword [bp + 14]	; 3: 221 70 14

pow$53:	; FloatingToIntegral £temporary358 y
x10628:	fistp dword [container4bytes#]	; 4: 219 30 78 36
x10632:	mov eax, [container4bytes#]	; 4: 102 161 78 36

pow$54:	; Assign long_y £temporary358
x10636:	mov [bp + 22], eax	; 4: 102 137 70 22

pow$55:	; SignedModulo £temporary359 long_y 2
x10640:	mov eax, [bp + 22]	; 4: 102 139 70 22
x10644:	xor edx, edx	; 3: 102 49 210
x10647:	idiv dword [@965$int4$2#]	; 5: 102 247 62 61 42

pow$56:	; NotEqual 73 £temporary359 0
x10652:	cmp edx, 0	; 4: 102 131 250 0
x10656:	jne pow$73	; 2: 117 67

pow$57:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

pow$58:	; PushFloat y
x10658:	fld qword [bp + 14]	; 3: 221 70 14

pow$59:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x10661:	fstp qword [bp + 26]	; 3: 221 94 26

pow$60:	; PushFloat x
x10664:	fld qword [bp + 6]	; 3: 221 70 6

pow$61:	; UnarySubtract £temporary361 x
x10667:	fchs	; 2: 217 224

pow$62:	; Parameter 26 £temporary361 6
x10669:	fstp qword [bp + 40]	; 3: 221 94 40

pow$63:	; Call 26 log 0
x10672:	mov word [bp + 34], pow$64	; 5: 199 70 34 190 41
x10677:	mov [bp + 36], bp	; 3: 137 110 36
x10680:	add bp, 34	; 3: 131 197 34
x10683:	jmp log	; 3: 233 155 253

pow$64:	; PostCall 26
x10686:	fstp qword [bp + 34]	; 3: 221 94 34
x10689:	fld qword [bp + 26]	; 3: 221 70 26
x10692:	fld qword [bp + 34]	; 3: 221 70 34

pow$65:	; GetReturnValue £temporary362

pow$66:	; SignedMultiply £temporary363 y £temporary362
x10695:	fmul	; 2: 222 201

pow$67:	; Parameter 26 £temporary363 6
x10697:	fstp qword [bp + 32]	; 3: 221 94 32

pow$68:	; Call 26 exp 0
x10700:	mov word [bp + 26], pow$69	; 5: 199 70 26 218 41
x10705:	mov [bp + 28], bp	; 3: 137 110 28
x10708:	add bp, 26	; 3: 131 197 26
x10711:	nop	; 1: 144
x10712:	jmp exp	; 2: 235 103

pow$69:	; PostCall 26

pow$70:	; GetReturnValue £temporary364

pow$71:	; SetReturnValue £temporary364

pow$72:	; Return £temporary364
x10714:	mov ax, [bp]	; 3: 139 70 0
x10717:	mov di, [bp + 4]	; 3: 139 126 4
x10720:	mov bp, [bp + 2]	; 3: 139 110 2
x10723:	jmp ax	; 2: 255 224

pow$73:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

pow$74:	; PushFloat y
x10725:	fld qword [bp + 14]	; 3: 221 70 14

pow$75:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x10728:	fstp qword [bp + 26]	; 3: 221 94 26

pow$76:	; PushFloat x
x10731:	fld qword [bp + 6]	; 3: 221 70 6

pow$77:	; UnarySubtract £temporary365 x
x10734:	fchs	; 2: 217 224

pow$78:	; Parameter 26 £temporary365 6
x10736:	fstp qword [bp + 40]	; 3: 221 94 40

pow$79:	; Call 26 log 0
x10739:	mov word [bp + 34], pow$80	; 5: 199 70 34 1 42
x10744:	mov [bp + 36], bp	; 3: 137 110 36
x10747:	add bp, 34	; 3: 131 197 34
x10750:	jmp log	; 3: 233 88 253

pow$80:	; PostCall 26
x10753:	fstp qword [bp + 34]	; 3: 221 94 34
x10756:	fld qword [bp + 26]	; 3: 221 70 26
x10759:	fld qword [bp + 34]	; 3: 221 70 34

pow$81:	; GetReturnValue £temporary366

pow$82:	; SignedMultiply £temporary367 y £temporary366
x10762:	fmul	; 2: 222 201

pow$83:	; Parameter 26 £temporary367 6
x10764:	fstp qword [bp + 32]	; 3: 221 94 32

pow$84:	; Call 26 exp 0
x10767:	mov word [bp + 26], pow$85	; 5: 199 70 26 29 42
x10772:	mov [bp + 28], bp	; 3: 137 110 28
x10775:	add bp, 26	; 3: 131 197 26
x10778:	nop	; 1: 144
x10779:	jmp exp	; 2: 235 36

pow$85:	; PostCall 26

pow$86:	; GetReturnValue £temporary368

pow$87:	; UnarySubtract £temporary369 £temporary368
x10781:	fchs	; 2: 217 224

pow$88:	; SetReturnValue £temporary369

pow$89:	; Return £temporary369
x10783:	mov ax, [bp]	; 3: 139 70 0
x10786:	mov di, [bp + 4]	; 3: 139 126 4
x10789:	mov bp, [bp + 2]	; 3: 139 110 2
x10792:	jmp ax	; 2: 255 224

pow$90:	; Assign errno 6
x10794:	mov word [errno], 6	; 6: 199 6 230 10 6 0

pow$91:	; PushZero
x10800:	fldz	; 2: 217 238

pow$92:	; SetReturnValue 0

pow$93:	; Return 0
x10802:	mov ax, [bp]	; 3: 139 70 0
x10805:	mov di, [bp + 4]	; 3: 139 126 4
x10808:	mov bp, [bp + 2]	; 3: 139 110 2
x10811:	jmp ax	; 2: 255 224

pow$94:	; FunctionEnd pow

@965$int4$2#:
x10813:	dd 2	; 4: 2 0 0 0

exp:	; PushOne
x10817:	fld1	; 2: 217 232

exp$1:	; PopFloat index
x10819:	fstp qword [bp + 14]	; 3: 221 94 14

exp$2:	; PushOne
x10822:	fld1	; 2: 217 232

exp$3:	; PopFloat sum
x10824:	fstp qword [bp + 30]	; 3: 221 94 30

exp$4:	; PushOne
x10827:	fld1	; 2: 217 232

exp$5:	; PopFloat faculty
x10829:	fstp qword [bp + 38]	; 3: 221 94 38

exp$6:	; PushFloat x
x10832:	fld qword [bp + 6]	; 3: 221 70 6

exp$7:	; PopFloat power
x10835:	fstp qword [bp + 46]	; 3: 221 94 46

exp$8:	; PushFloat power
x10838:	fld qword [bp + 46]	; 3: 221 70 46

exp$9:	; PushFloat faculty
x10841:	fld qword [bp + 38]	; 3: 221 70 38

exp$10:	; SignedDivide £temporary310 power faculty
x10844:	fdiv	; 2: 222 249

exp$11:	; PopFloat term
x10846:	fstp qword [bp + 22]	; 3: 221 94 22

exp$12:	; PushFloat sum
x10849:	fld qword [bp + 30]	; 3: 221 70 30

exp$13:	; PushFloat term
x10852:	fld qword [bp + 22]	; 3: 221 70 22

exp$14:	; BinaryAdd £temporary311 sum term
x10855:	fadd	; 2: 222 193

exp$15:	; PopFloat sum
x10857:	fstp qword [bp + 30]	; 3: 221 94 30

exp$16:	; PushFloat power
x10860:	fld qword [bp + 46]	; 3: 221 70 46

exp$17:	; PushFloat x
x10863:	fld qword [bp + 6]	; 3: 221 70 6

exp$18:	; SignedMultiply £temporary312 power x
x10866:	fmul	; 2: 222 201

exp$19:	; PopFloat power
x10868:	fstp qword [bp + 46]	; 3: 221 94 46

exp$20:	; PushFloat faculty
x10871:	fld qword [bp + 38]	; 3: 221 70 38

exp$21:	; PushFloat index
x10874:	fld qword [bp + 14]	; 3: 221 70 14

exp$22:	; PushOne
x10877:	fld1	; 2: 217 232

exp$23:	; BinaryAdd £temporary314 index £temporary313
x10879:	fadd	; 2: 222 193

exp$24:	; TopFloat index
x10881:	fst qword [bp + 14]	; 3: 221 86 14

exp$25:	; SignedMultiply £temporary315 faculty index
x10884:	fmul	; 2: 222 201

exp$26:	; PopFloat faculty
x10886:	fstp qword [bp + 38]	; 3: 221 94 38

exp$27:	; CallHeader 54 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

exp$28:	; PushFloat term
x10889:	fld qword [bp + 22]	; 3: 221 70 22

exp$29:	; Parameter 54 term 6
x10892:	fstp qword [bp + 60]	; 3: 221 94 60

exp$30:	; Call 54 fabs 0
x10895:	mov word [bp + 54], exp$31	; 5: 199 70 54 157 42
x10900:	mov [bp + 56], bp	; 3: 137 110 56
x10903:	add bp, 54	; 3: 131 197 54
x10906:	jmp fabs	; 3: 233 93 250

exp$31:	; PostCall 54

exp$32:	; GetReturnValue £temporary316

exp$33:	; PushFloat 0.000000001
x10909:	fld qword [@855$float8$0.000000001#]	; 4: 221 6 183 42

exp$34:	; SignedGreaterThanEqual 8 £temporary316 0.000000001
x10913:	fcompp	; 2: 222 217
x10915:	fstsw ax	; 3: 155 223 224
x10918:	sahf	; 1: 158
x10919:	jbe exp$8	; 2: 118 173

exp$35:	; PushFloat sum
x10921:	fld qword [bp + 30]	; 3: 221 70 30

exp$36:	; SetReturnValue sum

exp$37:	; Return sum
x10924:	mov ax, [bp]	; 3: 139 70 0
x10927:	mov di, [bp + 4]	; 3: 139 126 4
x10930:	mov bp, [bp + 2]	; 3: 139 110 2
x10933:	jmp ax	; 2: 255 224

exp$38:	; FunctionEnd exp

@855$float8$0.000000001#:
x10935:	dq 0.000000001	; 8: 149 214 38 232 11 46 17 62

floor:	; PushFloat x
x10943:	fld qword [bp + 6]	; 3: 221 70 6

floor$1:	; PushZero
x10946:	fldz	; 2: 217 238

floor$2:	; SignedGreaterThanEqual 13 x 0
x10948:	fcompp	; 2: 222 217
x10950:	fstsw ax	; 3: 155 223 224
x10953:	sahf	; 1: 158
x10954:	jbe floor$13	; 2: 118 35

floor$3:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

floor$4:	; PushFloat x
x10956:	fld qword [bp + 6]	; 3: 221 70 6

floor$5:	; UnarySubtract £temporary599 x
x10959:	fchs	; 2: 217 224

floor$6:	; Parameter 14 £temporary599 6
x10961:	fstp qword [bp + 20]	; 3: 221 94 20

floor$7:	; Call 14 ceil 0
x10964:	mov word [bp + 14], floor$8	; 5: 199 70 14 226 42
x10969:	mov [bp + 16], bp	; 3: 137 110 16
x10972:	add bp, 14	; 3: 131 197 14
x10975:	nop	; 1: 144
x10976:	jmp ceil	; 2: 235 43

floor$8:	; PostCall 14

floor$9:	; GetReturnValue £temporary600

floor$10:	; UnarySubtract £temporary601 £temporary600
x10978:	fchs	; 2: 217 224

floor$11:	; SetReturnValue £temporary601

floor$12:	; Return £temporary601
x10980:	mov ax, [bp]	; 3: 139 70 0
x10983:	mov di, [bp + 4]	; 3: 139 126 4
x10986:	mov bp, [bp + 2]	; 3: 139 110 2
x10989:	jmp ax	; 2: 255 224

floor$13:	; PushFloat x
x10991:	fld qword [bp + 6]	; 3: 221 70 6

floor$14:	; FloatingToIntegral £temporary602 x
x10994:	fistp dword [container4bytes#]	; 4: 219 30 78 36
x10998:	mov eax, [container4bytes#]	; 4: 102 161 78 36

floor$15:	; IntegralToFloating £temporary603 £temporary602
x11002:	mov [container4bytes#], eax	; 4: 102 163 78 36
x11006:	fild dword [container4bytes#]	; 4: 219 6 78 36

floor$16:	; SetReturnValue £temporary603

floor$17:	; Return £temporary603
x11010:	mov ax, [bp]	; 3: 139 70 0
x11013:	mov di, [bp + 4]	; 3: 139 126 4
x11016:	mov bp, [bp + 2]	; 3: 139 110 2
x11019:	jmp ax	; 2: 255 224

floor$18:	; FunctionEnd floor

ceil:	; PushFloat x
x11021:	fld qword [bp + 6]	; 3: 221 70 6

ceil$1:	; PushZero
x11024:	fldz	; 2: 217 238

ceil$2:	; SignedGreaterThanEqual 13 x 0
x11026:	fcompp	; 2: 222 217
x11028:	fstsw ax	; 3: 155 223 224
x11031:	sahf	; 1: 158
x11032:	jbe ceil$13	; 2: 118 35

ceil$3:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

ceil$4:	; PushFloat x
x11034:	fld qword [bp + 6]	; 3: 221 70 6

ceil$5:	; UnarySubtract £temporary606 x
x11037:	fchs	; 2: 217 224

ceil$6:	; Parameter 14 £temporary606 6
x11039:	fstp qword [bp + 20]	; 3: 221 94 20

ceil$7:	; Call 14 floor 0
x11042:	mov word [bp + 14], ceil$8	; 5: 199 70 14 48 43
x11047:	mov [bp + 16], bp	; 3: 137 110 16
x11050:	add bp, 14	; 3: 131 197 14
x11053:	nop	; 1: 144
x11054:	jmp floor	; 2: 235 143

ceil$8:	; PostCall 14

ceil$9:	; GetReturnValue £temporary607

ceil$10:	; UnarySubtract £temporary608 £temporary607
x11056:	fchs	; 2: 217 224

ceil$11:	; SetReturnValue £temporary608

ceil$12:	; Return £temporary608
x11058:	mov ax, [bp]	; 3: 139 70 0
x11061:	mov di, [bp + 4]	; 3: 139 126 4
x11064:	mov bp, [bp + 2]	; 3: 139 110 2
x11067:	jmp ax	; 2: 255 224

ceil$13:	; PushFloat x
x11069:	fld qword [bp + 6]	; 3: 221 70 6

ceil$14:	; PushFloat 0.999999999999
x11072:	fld qword [@1467$float8$0.999999999999#]	; 4: 221 6 97 43

ceil$15:	; BinaryAdd £temporary609 x 0.999999999999
x11076:	fadd	; 2: 222 193

ceil$16:	; FloatingToIntegral £temporary610 £temporary609
x11078:	fistp dword [container4bytes#]	; 4: 219 30 78 36
x11082:	mov eax, [container4bytes#]	; 4: 102 161 78 36

ceil$17:	; IntegralToFloating £temporary611 £temporary610
x11086:	mov [container4bytes#], eax	; 4: 102 163 78 36
x11090:	fild dword [container4bytes#]	; 4: 219 6 78 36

ceil$18:	; SetReturnValue £temporary611

ceil$19:	; Return £temporary611
x11094:	mov ax, [bp]	; 3: 139 70 0
x11097:	mov di, [bp + 4]	; 3: 139 126 4
x11100:	mov bp, [bp + 2]	; 3: 139 110 2
x11103:	jmp ax	; 2: 255 224

ceil$20:	; FunctionEnd ceil

@1467$float8$0.999999999999#:
x11105:	dq 0.999999999999	; 8: 209 220 255 255 255 255 239 63

isdigit:	; SignedLessThan 4 c 48
x11113:	cmp word [bp + 6], 48	; 4: 131 126 6 48
x11117:	jl isdigit$4	; 2: 124 11

isdigit$1:	; SignedGreaterThan 4 c 57
x11119:	cmp word [bp + 6], 57	; 4: 131 126 6 57
x11123:	jg isdigit$4	; 2: 127 5

isdigit$2:	; Assign £temporary195 1
x11125:	mov bx, 1	; 3: 187 1 0

isdigit$3:	; Goto 5
x11128:	jmp isdigit$5	; 2: 235 3

isdigit$4:	; Assign £temporary195 0
x11130:	mov bx, 0	; 3: 187 0 0

isdigit$5:	; SetReturnValue £temporary195

isdigit$6:	; Return £temporary195
x11133:	mov ax, [bp]	; 3: 139 70 0
x11136:	mov di, [bp + 4]	; 3: 139 126 4
x11139:	mov bp, [bp + 2]	; 3: 139 110 2
x11142:	jmp ax	; 2: 255 224

isdigit$7:	; FunctionEnd isdigit

sin:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

sin$1:	; PushFloat x
x11144:	fld qword [bp + 6]	; 3: 221 70 6

sin$2:	; Parameter 14 x 6
x11147:	fstp qword [bp + 20]	; 3: 221 94 20

sin$3:	; Call 14 fabs 0
x11150:	mov word [bp + 14], sin$4	; 5: 199 70 14 156 43
x11155:	mov [bp + 16], bp	; 3: 137 110 16
x11158:	add bp, 14	; 3: 131 197 14
x11161:	jmp fabs	; 3: 233 94 249

sin$4:	; PostCall 14

sin$5:	; GetReturnValue £temporary449

sin$6:	; PushFloat 6.28
x11164:	fld qword [@1129$float8$6.28#]	; 4: 221 6 99 44

sin$7:	; SignedLessThanEqual 17 £temporary449 6.28
x11168:	fcompp	; 2: 222 217
x11170:	fstsw ax	; 3: 155 223 224
x11173:	sahf	; 1: 158
x11174:	jae sin$17	; 2: 115 30

sin$8:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

sin$9:	; PushFloat x
x11176:	fld qword [bp + 6]	; 3: 221 70 6

sin$10:	; Parameter 14 x 6
x11179:	fstp qword [bp + 20]	; 3: 221 94 20

sin$11:	; PushFloat 6.28
x11182:	fld qword [@1134$float8$6.28#]	; 4: 221 6 107 44

sin$12:	; Parameter 14 6.28 14
x11186:	fstp qword [bp + 28]	; 3: 221 94 28

sin$13:	; Call 14 fmod 0
x11189:	mov word [bp + 14], sin$14	; 5: 199 70 14 195 43
x11194:	mov [bp + 16], bp	; 3: 137 110 16
x11197:	add bp, 14	; 3: 131 197 14
x11200:	jmp fmod	; 3: 233 192 0

sin$14:	; PostCall 14

sin$15:	; GetReturnValue £temporary451

sin$16:	; PopFloat x
x11203:	fstp qword [bp + 6]	; 3: 221 94 6

sin$17:	; PushOne
x11206:	fld1	; 2: 217 232

sin$18:	; PopFloat index
x11208:	fstp qword [bp + 14]	; 3: 221 94 14

sin$19:	; PushZero
x11211:	fldz	; 2: 217 238

sin$20:	; PopFloat sum
x11213:	fstp qword [bp + 30]	; 3: 221 94 30

sin$21:	; PushOne
x11216:	fld1	; 2: 217 232

sin$22:	; PopFloat sign
x11218:	fstp qword [bp + 38]	; 3: 221 94 38

sin$23:	; PushFloat x
x11221:	fld qword [bp + 6]	; 3: 221 70 6

sin$24:	; PopFloat power
x11224:	fstp qword [bp + 46]	; 3: 221 94 46

sin$25:	; PushOne
x11227:	fld1	; 2: 217 232

sin$26:	; PopFloat faculty
x11229:	fstp qword [bp + 54]	; 3: 221 94 54

sin$27:	; PushFloat sign
x11232:	fld qword [bp + 38]	; 3: 221 70 38

sin$28:	; PushFloat power
x11235:	fld qword [bp + 46]	; 3: 221 70 46

sin$29:	; SignedMultiply £temporary452 sign power
x11238:	fmul	; 2: 222 201

sin$30:	; PushFloat faculty
x11240:	fld qword [bp + 54]	; 3: 221 70 54

sin$31:	; SignedDivide £temporary453 £temporary452 faculty
x11243:	fdiv	; 2: 222 249

sin$32:	; PopFloat term
x11245:	fstp qword [bp + 22]	; 3: 221 94 22

sin$33:	; PushFloat sum
x11248:	fld qword [bp + 30]	; 3: 221 70 30

sin$34:	; PushFloat term
x11251:	fld qword [bp + 22]	; 3: 221 70 22

sin$35:	; BinaryAdd £temporary454 sum term
x11254:	fadd	; 2: 222 193

sin$36:	; PopFloat sum
x11256:	fstp qword [bp + 30]	; 3: 221 94 30

sin$37:	; PushFloat sign
x11259:	fld qword [bp + 38]	; 3: 221 70 38

sin$38:	; PushFloat -1
x11262:	fld qword [@1156$float8$minus1#]	; 4: 221 6 115 44

sin$39:	; SignedMultiply £temporary455 sign -1
x11266:	fmul	; 2: 222 201

sin$40:	; PopFloat sign
x11268:	fstp qword [bp + 38]	; 3: 221 94 38

sin$41:	; PushFloat power
x11271:	fld qword [bp + 46]	; 3: 221 70 46

sin$42:	; PushFloat x
x11274:	fld qword [bp + 6]	; 3: 221 70 6

sin$43:	; PushFloat x
x11277:	fld qword [bp + 6]	; 3: 221 70 6

sin$44:	; SignedMultiply £temporary456 x x
x11280:	fmul	; 2: 222 201

sin$45:	; SignedMultiply £temporary457 power £temporary456
x11282:	fmul	; 2: 222 201

sin$46:	; PopFloat power
x11284:	fstp qword [bp + 46]	; 3: 221 94 46

sin$47:	; PushFloat faculty
x11287:	fld qword [bp + 54]	; 3: 221 70 54

sin$48:	; PushFloat index
x11290:	fld qword [bp + 14]	; 3: 221 70 14

sin$49:	; PushOne
x11293:	fld1	; 2: 217 232

sin$50:	; BinaryAdd £temporary459 index £temporary458
x11295:	fadd	; 2: 222 193

sin$51:	; TopFloat index
x11297:	fst qword [bp + 14]	; 3: 221 86 14

sin$52:	; PushFloat index
x11300:	fld qword [bp + 14]	; 3: 221 70 14

sin$53:	; PushOne
x11303:	fld1	; 2: 217 232

sin$54:	; BinaryAdd £temporary461 index £temporary460
x11305:	fadd	; 2: 222 193

sin$55:	; TopFloat index
x11307:	fst qword [bp + 14]	; 3: 221 86 14

sin$56:	; SignedMultiply £temporary462 index index
x11310:	fmul	; 2: 222 201

sin$57:	; SignedMultiply £temporary463 faculty £temporary462
x11312:	fmul	; 2: 222 201

sin$58:	; PopFloat faculty
x11314:	fstp qword [bp + 54]	; 3: 221 94 54

sin$59:	; CallHeader 62 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

sin$60:	; PushFloat term
x11317:	fld qword [bp + 22]	; 3: 221 70 22

sin$61:	; Parameter 62 term 6
x11320:	fstp qword [bp + 68]	; 3: 221 94 68

sin$62:	; Call 62 fabs 0
x11323:	mov word [bp + 62], sin$63	; 5: 199 70 62 73 44
x11328:	mov [bp + 64], bp	; 3: 137 110 64
x11331:	add bp, 62	; 3: 131 197 62
x11334:	jmp fabs	; 3: 233 177 248

sin$63:	; PostCall 62

sin$64:	; GetReturnValue £temporary464

sin$65:	; PushFloat 0.000000001
x11337:	fld qword [@1167$float8$0.000000001#]	; 4: 221 6 123 44

sin$66:	; SignedGreaterThanEqual 27 £temporary464 0.000000001
x11341:	fcompp	; 2: 222 217
x11343:	fstsw ax	; 3: 155 223 224
x11346:	sahf	; 1: 158
x11347:	jbe sin$27	; 2: 118 139

sin$67:	; PushFloat sum
x11349:	fld qword [bp + 30]	; 3: 221 70 30

sin$68:	; SetReturnValue sum

sin$69:	; Return sum
x11352:	mov ax, [bp]	; 3: 139 70 0
x11355:	mov di, [bp + 4]	; 3: 139 126 4
x11358:	mov bp, [bp + 2]	; 3: 139 110 2
x11361:	jmp ax	; 2: 255 224

sin$70:	; FunctionEnd sin

@1129$float8$6.28#:
x11363:	dq 6.28	; 8: 31 133 235 81 184 30 25 64

@1134$float8$6.28#:
x11371:	dq 6.28	; 8: 31 133 235 81 184 30 25 64

@1156$float8$minus1#:
x11379:	dq -1.0	; 8: 0 0 0 0 0 0 240 191

@1167$float8$0.000000001#:
x11387:	dq 0.000000001	; 8: 149 214 38 232 11 46 17 62

fmod:	; PushFloat y
x11395:	fld qword [bp + 14]	; 3: 221 70 14

fmod$1:	; PushZero
x11398:	fldz	; 2: 217 238

fmod$2:	; Equal 28 y 0
x11400:	fcompp	; 2: 222 217
x11402:	fstsw ax	; 3: 155 223 224
x11405:	sahf	; 1: 158
x11406:	je fmod$28	; 2: 116 86

fmod$3:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

fmod$4:	; PushFloat x
x11408:	fld qword [bp + 6]	; 3: 221 70 6

fmod$5:	; PushFloat y
x11411:	fld qword [bp + 14]	; 3: 221 70 14

fmod$6:	; PushFloat x
x11414:	fld qword [bp + 6]	; 3: 221 70 6

fmod$7:	; PushFloat y
x11417:	fld qword [bp + 14]	; 3: 221 70 14

fmod$8:	; SignedDivide £temporary436 x y
x11420:	fdiv	; 2: 222 249

fmod$9:	; FloatingToIntegral £temporary437 £temporary436
x11422:	fistp word [container2bytes#]	; 4: 223 30 77 27
x11426:	mov ax, [container2bytes#]	; 3: 161 77 27

fmod$10:	; IntegralToFloating £temporary438 £temporary437
x11429:	mov [container2bytes#], ax	; 3: 163 77 27
x11432:	fild word [container2bytes#]	; 4: 223 6 77 27

fmod$11:	; SignedMultiply £temporary439 y £temporary438
x11436:	fmul	; 2: 222 201

fmod$12:	; BinarySubtract £temporary440 x £temporary439
x11438:	fsub	; 2: 222 233

fmod$13:	; Parameter 22 £temporary440 6
x11440:	fstp qword [bp + 28]	; 3: 221 94 28

fmod$14:	; Call 22 fabs 0
x11443:	mov word [bp + 22], fmod$15	; 5: 199 70 22 193 44
x11448:	mov [bp + 24], bp	; 3: 137 110 24
x11451:	add bp, 22	; 3: 131 197 22
x11454:	jmp fabs	; 3: 233 57 248

fmod$15:	; PostCall 22

fmod$16:	; GetReturnValue £temporary441

fmod$17:	; PopFloat remainder
x11457:	fstp qword [bp + 22]	; 3: 221 94 22

fmod$18:	; PushFloat x
x11460:	fld qword [bp + 6]	; 3: 221 70 6

fmod$19:	; PushZero
x11463:	fldz	; 2: 217 238

fmod$20:	; SignedLessThanEqual 24 x 0
x11465:	fcompp	; 2: 222 217
x11467:	fstsw ax	; 3: 155 223 224
x11470:	sahf	; 1: 158
x11471:	jae fmod$24	; 2: 115 5

fmod$21:	; PushFloat remainder
x11473:	fld qword [bp + 22]	; 3: 221 70 22

fmod$22:	; DecreaseStack

fmod$23:	; Goto 26
x11476:	jmp fmod$26	; 2: 235 5

fmod$24:	; PushFloat remainder
x11478:	fld qword [bp + 22]	; 3: 221 70 22

fmod$25:	; UnarySubtract £temporary443 remainder
x11481:	fchs	; 2: 217 224

fmod$26:	; SetReturnValue £temporary447

fmod$27:	; Return £temporary447
x11483:	mov ax, [bp]	; 3: 139 70 0
x11486:	mov di, [bp + 4]	; 3: 139 126 4
x11489:	mov bp, [bp + 2]	; 3: 139 110 2
x11492:	jmp ax	; 2: 255 224

fmod$28:	; Assign errno 6
x11494:	mov word [errno], 6	; 6: 199 6 230 10 6 0

fmod$29:	; PushZero
x11500:	fldz	; 2: 217 238

fmod$30:	; SetReturnValue 0

fmod$31:	; Return 0
x11502:	mov ax, [bp]	; 3: 139 70 0
x11505:	mov di, [bp + 4]	; 3: 139 126 4
x11508:	mov bp, [bp + 2]	; 3: 139 110 2
x11511:	jmp ax	; 2: 255 224

fmod$32:	; FunctionEnd fmod

cos:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

cos$1:	; PushFloat x
x11513:	fld qword [bp + 6]	; 3: 221 70 6

cos$2:	; Parameter 14 x 6
x11516:	fstp qword [bp + 20]	; 3: 221 94 20

cos$3:	; Call 14 fabs 0
x11519:	mov word [bp + 14], cos$4	; 5: 199 70 14 13 45
x11524:	mov [bp + 16], bp	; 3: 137 110 16
x11527:	add bp, 14	; 3: 131 197 14
x11530:	jmp fabs	; 3: 233 237 247

cos$4:	; PostCall 14

cos$5:	; GetReturnValue £temporary470

cos$6:	; PushFloat 6.28
x11533:	fld qword [@1178$float8$6.28#]	; 4: 221 6 211 45

cos$7:	; SignedLessThanEqual 17 £temporary470 6.28
x11537:	fcompp	; 2: 222 217
x11539:	fstsw ax	; 3: 155 223 224
x11542:	sahf	; 1: 158
x11543:	jae cos$17	; 2: 115 30

cos$8:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

cos$9:	; PushFloat x
x11545:	fld qword [bp + 6]	; 3: 221 70 6

cos$10:	; Parameter 14 x 6
x11548:	fstp qword [bp + 20]	; 3: 221 94 20

cos$11:	; PushFloat 6.28
x11551:	fld qword [@1183$float8$6.28#]	; 4: 221 6 219 45

cos$12:	; Parameter 14 6.28 14
x11555:	fstp qword [bp + 28]	; 3: 221 94 28

cos$13:	; Call 14 fmod 0
x11558:	mov word [bp + 14], cos$14	; 5: 199 70 14 52 45
x11563:	mov [bp + 16], bp	; 3: 137 110 16
x11566:	add bp, 14	; 3: 131 197 14
x11569:	jmp fmod	; 3: 233 79 255

cos$14:	; PostCall 14

cos$15:	; GetReturnValue £temporary472

cos$16:	; PopFloat x
x11572:	fstp qword [bp + 6]	; 3: 221 94 6

cos$17:	; PushZero
x11575:	fldz	; 2: 217 238

cos$18:	; PopFloat index
x11577:	fstp qword [bp + 14]	; 3: 221 94 14

cos$19:	; PushZero
x11580:	fldz	; 2: 217 238

cos$20:	; PopFloat sum
x11582:	fstp qword [bp + 30]	; 3: 221 94 30

cos$21:	; PushOne
x11585:	fld1	; 2: 217 232

cos$22:	; PopFloat sign
x11587:	fstp qword [bp + 38]	; 3: 221 94 38

cos$23:	; PushOne
x11590:	fld1	; 2: 217 232

cos$24:	; PopFloat power
x11592:	fstp qword [bp + 46]	; 3: 221 94 46

cos$25:	; PushOne
x11595:	fld1	; 2: 217 232

cos$26:	; PopFloat faculty
x11597:	fstp qword [bp + 54]	; 3: 221 94 54

cos$27:	; PushFloat sign
x11600:	fld qword [bp + 38]	; 3: 221 70 38

cos$28:	; PushFloat power
x11603:	fld qword [bp + 46]	; 3: 221 70 46

cos$29:	; SignedMultiply £temporary473 sign power
x11606:	fmul	; 2: 222 201

cos$30:	; PushFloat faculty
x11608:	fld qword [bp + 54]	; 3: 221 70 54

cos$31:	; SignedDivide £temporary474 £temporary473 faculty
x11611:	fdiv	; 2: 222 249

cos$32:	; PopFloat term
x11613:	fstp qword [bp + 22]	; 3: 221 94 22

cos$33:	; PushFloat sum
x11616:	fld qword [bp + 30]	; 3: 221 70 30

cos$34:	; PushFloat term
x11619:	fld qword [bp + 22]	; 3: 221 70 22

cos$35:	; BinaryAdd £temporary475 sum term
x11622:	fadd	; 2: 222 193

cos$36:	; PopFloat sum
x11624:	fstp qword [bp + 30]	; 3: 221 94 30

cos$37:	; PushFloat sign
x11627:	fld qword [bp + 38]	; 3: 221 70 38

cos$38:	; PushFloat -1
x11630:	fld qword [@1207$float8$minus1#]	; 4: 221 6 227 45

cos$39:	; SignedMultiply £temporary476 sign -1
x11634:	fmul	; 2: 222 201

cos$40:	; PopFloat sign
x11636:	fstp qword [bp + 38]	; 3: 221 94 38

cos$41:	; PushFloat power
x11639:	fld qword [bp + 46]	; 3: 221 70 46

cos$42:	; PushFloat x
x11642:	fld qword [bp + 6]	; 3: 221 70 6

cos$43:	; PushFloat x
x11645:	fld qword [bp + 6]	; 3: 221 70 6

cos$44:	; SignedMultiply £temporary477 x x
x11648:	fmul	; 2: 222 201

cos$45:	; SignedMultiply £temporary478 power £temporary477
x11650:	fmul	; 2: 222 201

cos$46:	; PopFloat power
x11652:	fstp qword [bp + 46]	; 3: 221 94 46

cos$47:	; PushFloat faculty
x11655:	fld qword [bp + 54]	; 3: 221 70 54

cos$48:	; PushFloat index
x11658:	fld qword [bp + 14]	; 3: 221 70 14

cos$49:	; PushOne
x11661:	fld1	; 2: 217 232

cos$50:	; BinaryAdd £temporary480 index £temporary479
x11663:	fadd	; 2: 222 193

cos$51:	; TopFloat index
x11665:	fst qword [bp + 14]	; 3: 221 86 14

cos$52:	; PushFloat index
x11668:	fld qword [bp + 14]	; 3: 221 70 14

cos$53:	; PushOne
x11671:	fld1	; 2: 217 232

cos$54:	; BinaryAdd £temporary482 index £temporary481
x11673:	fadd	; 2: 222 193

cos$55:	; TopFloat index
x11675:	fst qword [bp + 14]	; 3: 221 86 14

cos$56:	; SignedMultiply £temporary483 index index
x11678:	fmul	; 2: 222 201

cos$57:	; SignedMultiply £temporary484 faculty £temporary483
x11680:	fmul	; 2: 222 201

cos$58:	; PopFloat faculty
x11682:	fstp qword [bp + 54]	; 3: 221 94 54

cos$59:	; CallHeader 62 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

cos$60:	; PushFloat term
x11685:	fld qword [bp + 22]	; 3: 221 70 22

cos$61:	; Parameter 62 term 6
x11688:	fstp qword [bp + 68]	; 3: 221 94 68

cos$62:	; Call 62 fabs 0
x11691:	mov word [bp + 62], cos$63	; 5: 199 70 62 185 45
x11696:	mov [bp + 64], bp	; 3: 137 110 64
x11699:	add bp, 62	; 3: 131 197 62
x11702:	jmp fabs	; 3: 233 65 247

cos$63:	; PostCall 62

cos$64:	; GetReturnValue £temporary485

cos$65:	; PushFloat 0.000000001
x11705:	fld qword [@1218$float8$0.000000001#]	; 4: 221 6 235 45

cos$66:	; SignedGreaterThanEqual 27 £temporary485 0.000000001
x11709:	fcompp	; 2: 222 217
x11711:	fstsw ax	; 3: 155 223 224
x11714:	sahf	; 1: 158
x11715:	jbe cos$27	; 2: 118 139

cos$67:	; PushFloat sum
x11717:	fld qword [bp + 30]	; 3: 221 70 30

cos$68:	; SetReturnValue sum

cos$69:	; Return sum
x11720:	mov ax, [bp]	; 3: 139 70 0
x11723:	mov di, [bp + 4]	; 3: 139 126 4
x11726:	mov bp, [bp + 2]	; 3: 139 110 2
x11729:	jmp ax	; 2: 255 224

cos$70:	; FunctionEnd cos

@1178$float8$6.28#:
x11731:	dq 6.28	; 8: 31 133 235 81 184 30 25 64

@1183$float8$6.28#:
x11739:	dq 6.28	; 8: 31 133 235 81 184 30 25 64

@1207$float8$minus1#:
x11747:	dq -1.0	; 8: 0 0 0 0 0 0 240 191

@1218$float8$0.000000001#:
x11755:	dq 0.000000001	; 8: 149 214 38 232 11 46 17 62

tan:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

tan$1:	; PushFloat x
x11763:	fld qword [bp + 6]	; 3: 221 70 6

tan$2:	; Parameter 14 x 6
x11766:	fstp qword [bp + 20]	; 3: 221 94 20

tan$3:	; Call 14 cos 0
x11769:	mov word [bp + 14], tan$4	; 5: 199 70 14 7 46
x11774:	mov [bp + 16], bp	; 3: 137 110 16
x11777:	add bp, 14	; 3: 131 197 14
x11780:	jmp cos	; 3: 233 242 254

tan$4:	; PostCall 14

tan$5:	; GetReturnValue £temporary491

tan$6:	; PopFloat cos_of_x
x11783:	fstp qword [bp + 14]	; 3: 221 94 14

tan$7:	; PushFloat cos_of_x
x11786:	fld qword [bp + 14]	; 3: 221 70 14

tan$8:	; PushZero
x11789:	fldz	; 2: 217 238

tan$9:	; Equal 20 cos_of_x 0
x11791:	fcompp	; 2: 222 217
x11793:	fstsw ax	; 3: 155 223 224
x11796:	sahf	; 1: 158
x11797:	je tan$20	; 2: 116 36

tan$10:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

tan$11:	; PushFloat x
x11799:	fld qword [bp + 6]	; 3: 221 70 6

tan$12:	; Parameter 22 x 6
x11802:	fstp qword [bp + 28]	; 3: 221 94 28

tan$13:	; Call 22 sin 0
x11805:	mov word [bp + 22], tan$14	; 5: 199 70 22 43 46
x11810:	mov [bp + 24], bp	; 3: 137 110 24
x11813:	add bp, 22	; 3: 131 197 22
x11816:	jmp sin	; 3: 233 93 253

tan$14:	; PostCall 22

tan$15:	; GetReturnValue £temporary493

tan$16:	; PushFloat cos_of_x
x11819:	fld qword [bp + 14]	; 3: 221 70 14

tan$17:	; SignedDivide £temporary494 £temporary493 cos_of_x
x11822:	fdiv	; 2: 222 249

tan$18:	; SetReturnValue £temporary494

tan$19:	; Return £temporary494
x11824:	mov ax, [bp]	; 3: 139 70 0
x11827:	mov di, [bp + 4]	; 3: 139 126 4
x11830:	mov bp, [bp + 2]	; 3: 139 110 2
x11833:	jmp ax	; 2: 255 224

tan$20:	; Assign errno 6
x11835:	mov word [errno], 6	; 6: 199 6 230 10 6 0

tan$21:	; PushZero
x11841:	fldz	; 2: 217 238

tan$22:	; SetReturnValue 0

tan$23:	; Return 0
x11843:	mov ax, [bp]	; 3: 139 70 0
x11846:	mov di, [bp + 4]	; 3: 139 126 4
x11849:	mov bp, [bp + 2]	; 3: 139 110 2
x11852:	jmp ax	; 2: 255 224

tan$24:	; FunctionEnd tan

asin:	; PushFloat x
x11854:	fld qword [bp + 6]	; 3: 221 70 6

asin$1:	; PushOne
x11857:	fld1	; 2: 217 232

asin$2:	; NotEqual 6 x 1
x11859:	fcompp	; 2: 222 217
x11861:	fstsw ax	; 3: 155 223 224
x11864:	sahf	; 1: 158
x11865:	jne asin$6	; 2: 117 15

asin$3:	; PushFloat 1.57
x11867:	fld qword [@1244$float8$1.57#]	; 4: 221 6 4 47

asin$4:	; SetReturnValue 1.57

asin$5:	; Return 1.57
x11871:	mov ax, [bp]	; 3: 139 70 0
x11874:	mov di, [bp + 4]	; 3: 139 126 4
x11877:	mov bp, [bp + 2]	; 3: 139 110 2
x11880:	jmp ax	; 2: 255 224

asin$6:	; PushFloat x
x11882:	fld qword [bp + 6]	; 3: 221 70 6

asin$7:	; PushZero
x11885:	fldz	; 2: 217 238

asin$8:	; SignedGreaterThanEqual 19 x 0
x11887:	fcompp	; 2: 222 217
x11889:	fstsw ax	; 3: 155 223 224
x11892:	sahf	; 1: 158
x11893:	jbe asin$19	; 2: 118 35

asin$9:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

asin$10:	; PushFloat x
x11895:	fld qword [bp + 6]	; 3: 221 70 6

asin$11:	; UnarySubtract £temporary499 x
x11898:	fchs	; 2: 217 224

asin$12:	; Parameter 14 £temporary499 6
x11900:	fstp qword [bp + 20]	; 3: 221 94 20

asin$13:	; Call 14 asin 0
x11903:	mov word [bp + 14], asin$14	; 5: 199 70 14 141 46
x11908:	mov [bp + 16], bp	; 3: 137 110 16
x11911:	add bp, 14	; 3: 131 197 14
x11914:	nop	; 1: 144
x11915:	jmp asin	; 2: 235 193

asin$14:	; PostCall 14

asin$15:	; GetReturnValue £temporary500

asin$16:	; UnarySubtract £temporary501 £temporary500
x11917:	fchs	; 2: 217 224

asin$17:	; SetReturnValue £temporary501

asin$18:	; Return £temporary501
x11919:	mov ax, [bp]	; 3: 139 70 0
x11922:	mov di, [bp + 4]	; 3: 139 126 4
x11925:	mov bp, [bp + 2]	; 3: 139 110 2
x11928:	jmp ax	; 2: 255 224

asin$19:	; PushFloat x
x11930:	fld qword [bp + 6]	; 3: 221 70 6

asin$20:	; PushOne
x11933:	fld1	; 2: 217 232

asin$21:	; SignedGreaterThanEqual 41 x 1
x11935:	fcompp	; 2: 222 217
x11937:	fstsw ax	; 3: 155 223 224
x11940:	sahf	; 1: 158
x11941:	jbe asin$41	; 2: 118 74

asin$22:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

asin$23:	; PushFloat x
x11943:	fld qword [bp + 6]	; 3: 221 70 6

asin$24:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x11946:	fstp qword [bp + 14]	; 3: 221 94 14

asin$25:	; PushOne
x11949:	fld1	; 2: 217 232

asin$26:	; PushFloat x
x11951:	fld qword [bp + 6]	; 3: 221 70 6

asin$27:	; PushFloat x
x11954:	fld qword [bp + 6]	; 3: 221 70 6

asin$28:	; SignedMultiply £temporary503 x x
x11957:	fmul	; 2: 222 201

asin$29:	; BinarySubtract £temporary504 1 £temporary503
x11959:	fsub	; 2: 222 233

asin$30:	; Parameter 14 £temporary504 6
x11961:	fstp qword [bp + 28]	; 3: 221 94 28

asin$31:	; Call 14 sqrt 0
x11964:	mov word [bp + 22], asin$32	; 5: 199 70 22 202 46
x11969:	mov [bp + 24], bp	; 3: 137 110 24
x11972:	add bp, 22	; 3: 131 197 22
x11975:	nop	; 1: 144
x11976:	jmp sqrt	; 2: 235 66

asin$32:	; PostCall 14
x11978:	fstp qword [bp + 22]	; 3: 221 94 22
x11981:	fld qword [bp + 14]	; 3: 221 70 14
x11984:	fld qword [bp + 22]	; 3: 221 70 22

asin$33:	; GetReturnValue £temporary505

asin$34:	; SignedDivide £temporary506 x £temporary505
x11987:	fdiv	; 2: 222 249

asin$35:	; Parameter 14 £temporary506 6
x11989:	fstp qword [bp + 20]	; 3: 221 94 20

asin$36:	; Call 14 atan 0
x11992:	mov word [bp + 14], asin$37	; 5: 199 70 14 230 46
x11997:	mov [bp + 16], bp	; 3: 137 110 16
x12000:	add bp, 14	; 3: 131 197 14
x12003:	jmp atan	; 3: 233 170 0

asin$37:	; PostCall 14

asin$38:	; GetReturnValue £temporary507

asin$39:	; SetReturnValue £temporary507

asin$40:	; Return £temporary507
x12006:	mov ax, [bp]	; 3: 139 70 0
x12009:	mov di, [bp + 4]	; 3: 139 126 4
x12012:	mov bp, [bp + 2]	; 3: 139 110 2
x12015:	jmp ax	; 2: 255 224

asin$41:	; Assign errno 6
x12017:	mov word [errno], 6	; 6: 199 6 230 10 6 0

asin$42:	; PushZero
x12023:	fldz	; 2: 217 238

asin$43:	; SetReturnValue 0

asin$44:	; Return 0
x12025:	mov ax, [bp]	; 3: 139 70 0
x12028:	mov di, [bp + 4]	; 3: 139 126 4
x12031:	mov bp, [bp + 2]	; 3: 139 110 2
x12034:	jmp ax	; 2: 255 224

asin$45:	; FunctionEnd asin

@1244$float8$1.57#:
x12036:	dq 1.57	; 8: 31 133 235 81 184 30 249 63

sqrt:	; PushFloat x
x12044:	fld qword [bp + 6]	; 3: 221 70 6

sqrt$1:	; PushZero
x12047:	fldz	; 2: 217 238

sqrt$2:	; SignedLessThan 28 x 0
x12049:	fcompp	; 2: 222 217
x12051:	fstsw ax	; 3: 155 223 224
x12054:	sahf	; 1: 158
x12055:	ja sqrt$28	; 2: 119 84

sqrt$3:	; PushOne
x12057:	fld1	; 2: 217 232

sqrt$4:	; PopFloat root_i_plus_1
x12059:	fstp qword [bp + 22]	; 3: 221 94 22

sqrt$5:	; PushFloat root_i_plus_1
x12062:	fld qword [bp + 22]	; 3: 221 70 22

sqrt$6:	; PopFloat root_i
x12065:	fstp qword [bp + 14]	; 3: 221 94 14

sqrt$7:	; PushFloat root_i
x12068:	fld qword [bp + 14]	; 3: 221 70 14

sqrt$8:	; PushFloat x
x12071:	fld qword [bp + 6]	; 3: 221 70 6

sqrt$9:	; PushFloat root_i
x12074:	fld qword [bp + 14]	; 3: 221 70 14

sqrt$10:	; SignedDivide £temporary409 x root_i
x12077:	fdiv	; 2: 222 249

sqrt$11:	; BinaryAdd £temporary410 root_i £temporary409
x12079:	fadd	; 2: 222 193

sqrt$12:	; PushFloat 2
x12081:	fld qword [@1061$float8$2#]	; 4: 221 6 128 47

sqrt$13:	; SignedDivide £temporary411 £temporary410 2
x12085:	fdiv	; 2: 222 249

sqrt$14:	; PopFloat root_i_plus_1
x12087:	fstp qword [bp + 22]	; 3: 221 94 22

sqrt$15:	; CallHeader 30 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

sqrt$16:	; PushFloat root_i_plus_1
x12090:	fld qword [bp + 22]	; 3: 221 70 22

sqrt$17:	; PushFloat root_i
x12093:	fld qword [bp + 14]	; 3: 221 70 14

sqrt$18:	; BinarySubtract £temporary412 root_i_plus_1 root_i
x12096:	fsub	; 2: 222 233

sqrt$19:	; Parameter 30 £temporary412 6
x12098:	fstp qword [bp + 36]	; 3: 221 94 36

sqrt$20:	; Call 30 fabs 0
x12101:	mov word [bp + 30], sqrt$21	; 5: 199 70 30 83 47
x12106:	mov [bp + 32], bp	; 3: 137 110 32
x12109:	add bp, 30	; 3: 131 197 30
x12112:	jmp fabs	; 3: 233 167 245

sqrt$21:	; PostCall 30

sqrt$22:	; GetReturnValue £temporary413

sqrt$23:	; PushFloat 0.000000001
x12115:	fld qword [@1065$float8$0.000000001#]	; 4: 221 6 136 47

sqrt$24:	; SignedGreaterThanEqual 5 £temporary413 0.000000001
x12119:	fcompp	; 2: 222 217
x12121:	fstsw ax	; 3: 155 223 224
x12124:	sahf	; 1: 158
x12125:	jbe sqrt$5	; 2: 118 191

sqrt$25:	; PushFloat root_i_plus_1
x12127:	fld qword [bp + 22]	; 3: 221 70 22

sqrt$26:	; SetReturnValue root_i_plus_1

sqrt$27:	; Return root_i_plus_1
x12130:	mov ax, [bp]	; 3: 139 70 0
x12133:	mov di, [bp + 4]	; 3: 139 126 4
x12136:	mov bp, [bp + 2]	; 3: 139 110 2
x12139:	jmp ax	; 2: 255 224

sqrt$28:	; Assign errno 6
x12141:	mov word [errno], 6	; 6: 199 6 230 10 6 0

sqrt$29:	; PushZero
x12147:	fldz	; 2: 217 238

sqrt$30:	; SetReturnValue 0

sqrt$31:	; Return 0
x12149:	mov ax, [bp]	; 3: 139 70 0
x12152:	mov di, [bp + 4]	; 3: 139 126 4
x12155:	mov bp, [bp + 2]	; 3: 139 110 2
x12158:	jmp ax	; 2: 255 224

sqrt$32:	; FunctionEnd sqrt

@1061$float8$2#:
x12160:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

@1065$float8$0.000000001#:
x12168:	dq 0.000000001	; 8: 149 214 38 232 11 46 17 62

atan:	; PushFloat x
x12176:	fld qword [bp + 6]	; 3: 221 70 6

atan$1:	; PushZero
x12179:	fldz	; 2: 217 238

atan$2:	; SignedGreaterThanEqual 13 x 0
x12181:	fcompp	; 2: 222 217
x12183:	fstsw ax	; 3: 155 223 224
x12186:	sahf	; 1: 158
x12187:	jbe atan$13	; 2: 118 35

atan$3:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

atan$4:	; PushFloat x
x12189:	fld qword [bp + 6]	; 3: 221 70 6

atan$5:	; UnarySubtract £temporary526 x
x12192:	fchs	; 2: 217 224

atan$6:	; Parameter 14 £temporary526 6
x12194:	fstp qword [bp + 20]	; 3: 221 94 20

atan$7:	; Call 14 atan 0
x12197:	mov word [bp + 14], atan$8	; 5: 199 70 14 179 47
x12202:	mov [bp + 16], bp	; 3: 137 110 16
x12205:	add bp, 14	; 3: 131 197 14
x12208:	nop	; 1: 144
x12209:	jmp atan	; 2: 235 221

atan$8:	; PostCall 14

atan$9:	; GetReturnValue £temporary527

atan$10:	; UnarySubtract £temporary528 £temporary527
x12211:	fchs	; 2: 217 224

atan$11:	; SetReturnValue £temporary528

atan$12:	; Return £temporary528
x12213:	mov ax, [bp]	; 3: 139 70 0
x12216:	mov di, [bp + 4]	; 3: 139 126 4
x12219:	mov bp, [bp + 2]	; 3: 139 110 2
x12222:	jmp ax	; 2: 255 224

atan$13:	; PushFloat x
x12224:	fld qword [bp + 6]	; 3: 221 70 6

atan$14:	; PushOne
x12227:	fld1	; 2: 217 232

atan$15:	; SignedLessThanEqual 28 x 1
x12229:	fcompp	; 2: 222 217
x12231:	fstsw ax	; 3: 155 223 224
x12234:	sahf	; 1: 158
x12235:	jae atan$28	; 2: 115 53

atan$16:	; PushFloat 1.57
x12237:	fld qword [@1312$float8$1.57#]	; 4: 221 6 249 48

atan$17:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x12241:	fstp qword [bp + 14]	; 3: 221 94 14

atan$18:	; PushOne
x12244:	fld1	; 2: 217 232

atan$19:	; PushFloat x
x12246:	fld qword [bp + 6]	; 3: 221 70 6

atan$20:	; SignedDivide £temporary530 1 x
x12249:	fdiv	; 2: 222 249

atan$21:	; Parameter 14 £temporary530 6
x12251:	fstp qword [bp + 28]	; 3: 221 94 28

atan$22:	; Call 14 atan 0
x12254:	mov word [bp + 22], atan$23	; 5: 199 70 22 236 47
x12259:	mov [bp + 24], bp	; 3: 137 110 24
x12262:	add bp, 22	; 3: 131 197 22
x12265:	nop	; 1: 144
x12266:	jmp atan	; 2: 235 164

atan$23:	; PostCall 14
x12268:	fstp qword [bp + 22]	; 3: 221 94 22
x12271:	fld qword [bp + 14]	; 3: 221 70 14
x12274:	fld qword [bp + 22]	; 3: 221 70 22

atan$24:	; GetReturnValue £temporary531

atan$25:	; BinarySubtract £temporary532 1.57 £temporary531
x12277:	fsub	; 2: 222 233

atan$26:	; SetReturnValue £temporary532

atan$27:	; Return £temporary532
x12279:	mov ax, [bp]	; 3: 139 70 0
x12282:	mov di, [bp + 4]	; 3: 139 126 4
x12285:	mov bp, [bp + 2]	; 3: 139 110 2
x12288:	jmp ax	; 2: 255 224

atan$28:	; PushFloat x
x12290:	fld qword [bp + 6]	; 3: 221 70 6

atan$29:	; PushFloat 0.5
x12293:	fld qword [@1319$float8$0.5#]	; 4: 221 6 1 49

atan$30:	; SignedLessThanEqual 54 x 0.5
x12297:	fcompp	; 2: 222 217
x12299:	fstsw ax	; 3: 155 223 224
x12302:	sahf	; 1: 158
x12303:	jae atan$54	; 2: 115 102

atan$31:	; PushFloat 2
x12305:	fld qword [@1333$float8$2#]	; 4: 221 6 9 49

atan$32:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x12309:	fstp qword [bp + 14]	; 3: 221 94 14

atan$33:	; PushFloat x
x12312:	fld qword [bp + 6]	; 3: 221 70 6

atan$34:	; PushOne
x12315:	fld1	; 2: 217 232

atan$35:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 3
x12317:	fstp qword [bp + 22]	; 3: 221 94 22
x12320:	fstp qword [bp + 30]	; 3: 221 94 30

atan$36:	; PushOne
x12323:	fld1	; 2: 217 232

atan$37:	; PushFloat x
x12325:	fld qword [bp + 6]	; 3: 221 70 6

atan$38:	; PushFloat x
x12328:	fld qword [bp + 6]	; 3: 221 70 6

atan$39:	; SignedMultiply £temporary534 x x
x12331:	fmul	; 2: 222 201

atan$40:	; BinaryAdd £temporary535 1 £temporary534
x12333:	fadd	; 2: 222 193

atan$41:	; Parameter 14 £temporary535 14
x12335:	fstp qword [bp + 52]	; 3: 221 94 52

atan$42:	; Call 14 sqrt 0
x12338:	mov word [bp + 46], atan$43	; 5: 199 70 46 64 48
x12343:	mov [bp + 48], bp	; 3: 137 110 48
x12346:	add bp, 46	; 3: 131 197 46
x12349:	jmp sqrt	; 3: 233 204 254

atan$43:	; PostCall 14
x12352:	fstp qword [bp + 38]	; 3: 221 94 38
x12355:	fld qword [bp + 30]	; 3: 221 70 30
x12358:	fld qword [bp + 22]	; 3: 221 70 22
x12361:	fld qword [bp + 38]	; 3: 221 70 38

atan$44:	; GetReturnValue £temporary536

atan$45:	; BinaryAdd £temporary537 1 £temporary536
x12364:	fadd	; 2: 222 193

atan$46:	; SignedDivide £temporary538 x £temporary537
x12366:	fdiv	; 2: 222 249

atan$47:	; Parameter 14 £temporary538 6
x12368:	fstp qword [bp + 28]	; 3: 221 94 28

atan$48:	; Call 14 atan 0
x12371:	mov word [bp + 22], atan$49	; 5: 199 70 22 97 48
x12376:	mov [bp + 24], bp	; 3: 137 110 24
x12379:	add bp, 22	; 3: 131 197 22
x12382:	jmp atan	; 3: 233 47 255

atan$49:	; PostCall 14
x12385:	fstp qword [bp + 22]	; 3: 221 94 22
x12388:	fld qword [bp + 14]	; 3: 221 70 14
x12391:	fld qword [bp + 22]	; 3: 221 70 22

atan$50:	; GetReturnValue £temporary539

atan$51:	; SignedMultiply £temporary540 2 £temporary539
x12394:	fmul	; 2: 222 201

atan$52:	; SetReturnValue £temporary540

atan$53:	; Return £temporary540
x12396:	mov ax, [bp]	; 3: 139 70 0
x12399:	mov di, [bp + 4]	; 3: 139 126 4
x12402:	mov bp, [bp + 2]	; 3: 139 110 2
x12405:	jmp ax	; 2: 255 224

atan$54:	; PushZero
x12407:	fldz	; 2: 217 238

atan$55:	; PopFloat sum
x12409:	fstp qword [bp + 22]	; 3: 221 94 22

atan$56:	; PushOne
x12412:	fld1	; 2: 217 232

atan$57:	; PopFloat sign
x12414:	fstp qword [bp + 30]	; 3: 221 94 30

atan$58:	; PushOne
x12417:	fld1	; 2: 217 232

atan$59:	; PopFloat denominator
x12419:	fstp qword [bp + 38]	; 3: 221 94 38

atan$60:	; PushFloat x
x12422:	fld qword [bp + 6]	; 3: 221 70 6

atan$61:	; PopFloat product
x12425:	fstp qword [bp + 46]	; 3: 221 94 46

atan$62:	; PushFloat sign
x12428:	fld qword [bp + 30]	; 3: 221 70 30

atan$63:	; PushFloat product
x12431:	fld qword [bp + 46]	; 3: 221 70 46

atan$64:	; SignedMultiply £temporary541 sign product
x12434:	fmul	; 2: 222 201

atan$65:	; PushFloat denominator
x12436:	fld qword [bp + 38]	; 3: 221 70 38

atan$66:	; SignedDivide £temporary542 £temporary541 denominator
x12439:	fdiv	; 2: 222 249

atan$67:	; PopFloat term
x12441:	fstp qword [bp + 14]	; 3: 221 94 14

atan$68:	; PushFloat sum
x12444:	fld qword [bp + 22]	; 3: 221 70 22

atan$69:	; PushFloat term
x12447:	fld qword [bp + 14]	; 3: 221 70 14

atan$70:	; BinaryAdd £temporary543 sum term
x12450:	fadd	; 2: 222 193

atan$71:	; PopFloat sum
x12452:	fstp qword [bp + 22]	; 3: 221 94 22

atan$72:	; PushFloat sign
x12455:	fld qword [bp + 30]	; 3: 221 70 30

atan$73:	; UnarySubtract £temporary544 sign
x12458:	fchs	; 2: 217 224

atan$74:	; PopFloat sign
x12460:	fstp qword [bp + 30]	; 3: 221 94 30

atan$75:	; PushFloat product
x12463:	fld qword [bp + 46]	; 3: 221 70 46

atan$76:	; PushFloat x
x12466:	fld qword [bp + 6]	; 3: 221 70 6

atan$77:	; PushFloat x
x12469:	fld qword [bp + 6]	; 3: 221 70 6

atan$78:	; SignedMultiply £temporary545 x x
x12472:	fmul	; 2: 222 201

atan$79:	; SignedMultiply £temporary546 product £temporary545
x12474:	fmul	; 2: 222 201

atan$80:	; PopFloat product
x12476:	fstp qword [bp + 46]	; 3: 221 94 46

atan$81:	; PushFloat denominator
x12479:	fld qword [bp + 38]	; 3: 221 70 38

atan$82:	; PushFloat 2
x12482:	fld qword [@1353$float8$2#]	; 4: 221 6 17 49

atan$83:	; BinaryAdd £temporary547 denominator 2
x12486:	fadd	; 2: 222 193

atan$84:	; PopFloat denominator
x12488:	fstp qword [bp + 38]	; 3: 221 94 38

atan$85:	; CallHeader 54 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

atan$86:	; PushFloat term
x12491:	fld qword [bp + 14]	; 3: 221 70 14

atan$87:	; Parameter 54 term 6
x12494:	fstp qword [bp + 60]	; 3: 221 94 60

atan$88:	; Call 54 fabs 0
x12497:	mov word [bp + 54], atan$89	; 5: 199 70 54 223 48
x12502:	mov [bp + 56], bp	; 3: 137 110 56
x12505:	add bp, 54	; 3: 131 197 54
x12508:	jmp fabs	; 3: 233 27 244

atan$89:	; PostCall 54

atan$90:	; GetReturnValue £temporary548

atan$91:	; PushFloat 0.000000001
x12511:	fld qword [@1356$float8$0.000000001#]	; 4: 221 6 25 49

atan$92:	; SignedGreaterThanEqual 62 £temporary548 0.000000001
x12515:	fcompp	; 2: 222 217
x12517:	fstsw ax	; 3: 155 223 224
x12520:	sahf	; 1: 158
x12521:	jbe atan$62	; 2: 118 161

atan$93:	; PushFloat sum
x12523:	fld qword [bp + 22]	; 3: 221 70 22

atan$94:	; SetReturnValue sum

atan$95:	; Return sum
x12526:	mov ax, [bp]	; 3: 139 70 0
x12529:	mov di, [bp + 4]	; 3: 139 126 4
x12532:	mov bp, [bp + 2]	; 3: 139 110 2
x12535:	jmp ax	; 2: 255 224

atan$96:	; FunctionEnd atan

@1312$float8$1.57#:
x12537:	dq 1.57	; 8: 31 133 235 81 184 30 249 63

@1319$float8$0.5#:
x12545:	dq 0.5	; 8: 0 0 0 0 0 0 224 63

@1333$float8$2#:
x12553:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

@1353$float8$2#:
x12561:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

@1356$float8$0.000000001#:
x12569:	dq 0.000000001	; 8: 149 214 38 232 11 46 17 62

acos:	; PushFloat x
x12577:	fld qword [bp + 6]	; 3: 221 70 6

acos$1:	; PushZero
x12580:	fldz	; 2: 217 238

acos$2:	; NotEqual 6 x 0
x12582:	fcompp	; 2: 222 217
x12584:	fstsw ax	; 3: 155 223 224
x12587:	sahf	; 1: 158
x12588:	jne acos$6	; 2: 117 15

acos$3:	; PushFloat 1.57
x12590:	fld qword [@1274$float8$1.57#]	; 4: 221 6 219 49

acos$4:	; SetReturnValue 1.57

acos$5:	; Return 1.57
x12594:	mov ax, [bp]	; 3: 139 70 0
x12597:	mov di, [bp + 4]	; 3: 139 126 4
x12600:	mov bp, [bp + 2]	; 3: 139 110 2
x12603:	jmp ax	; 2: 255 224

acos$6:	; PushFloat x
x12605:	fld qword [bp + 6]	; 3: 221 70 6

acos$7:	; PushZero
x12608:	fldz	; 2: 217 238

acos$8:	; SignedGreaterThanEqual 20 x 0
x12610:	fcompp	; 2: 222 217
x12612:	fstsw ax	; 3: 155 223 224
x12615:	sahf	; 1: 158
x12616:	jbe acos$20	; 2: 118 51

acos$9:	; PushFloat 3.14
x12618:	fld qword [@1279$float8$3.14#]	; 4: 221 6 227 49

acos$10:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x12622:	fstp qword [bp + 14]	; 3: 221 94 14

acos$11:	; PushFloat x
x12625:	fld qword [bp + 6]	; 3: 221 70 6

acos$12:	; UnarySubtract £temporary513 x
x12628:	fchs	; 2: 217 224

acos$13:	; Parameter 14 £temporary513 6
x12630:	fstp qword [bp + 28]	; 3: 221 94 28

acos$14:	; Call 14 acos 0
x12633:	mov word [bp + 22], acos$15	; 5: 199 70 22 103 49
x12638:	mov [bp + 24], bp	; 3: 137 110 24
x12641:	add bp, 22	; 3: 131 197 22
x12644:	nop	; 1: 144
x12645:	jmp acos	; 2: 235 186

acos$15:	; PostCall 14
x12647:	fstp qword [bp + 22]	; 3: 221 94 22
x12650:	fld qword [bp + 14]	; 3: 221 70 14
x12653:	fld qword [bp + 22]	; 3: 221 70 22

acos$16:	; GetReturnValue £temporary514

acos$17:	; BinarySubtract £temporary515 3.14 £temporary514
x12656:	fsub	; 2: 222 233

acos$18:	; SetReturnValue £temporary515

acos$19:	; Return £temporary515
x12658:	mov ax, [bp]	; 3: 139 70 0
x12661:	mov di, [bp + 4]	; 3: 139 126 4
x12664:	mov bp, [bp + 2]	; 3: 139 110 2
x12667:	jmp ax	; 2: 255 224

acos$20:	; PushFloat x
x12669:	fld qword [bp + 6]	; 3: 221 70 6

acos$21:	; PushOne
x12672:	fld1	; 2: 217 232

acos$22:	; SignedGreaterThan 42 x 1
x12674:	fcompp	; 2: 222 217
x12676:	fstsw ax	; 3: 155 223 224
x12679:	sahf	; 1: 158
x12680:	jb acos$42	; 2: 114 62

acos$23:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

acos$24:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

acos$25:	; PushOne
x12682:	fld1	; 2: 217 232

acos$26:	; PushFloat x
x12684:	fld qword [bp + 6]	; 3: 221 70 6

acos$27:	; PushFloat x
x12687:	fld qword [bp + 6]	; 3: 221 70 6

acos$28:	; SignedMultiply £temporary517 x x
x12690:	fmul	; 2: 222 201

acos$29:	; BinarySubtract £temporary518 1 £temporary517
x12692:	fsub	; 2: 222 233

acos$30:	; Parameter 14 £temporary518 6
x12694:	fstp qword [bp + 20]	; 3: 221 94 20

acos$31:	; Call 14 sqrt 0
x12697:	mov word [bp + 14], acos$32	; 5: 199 70 14 167 49
x12702:	mov [bp + 16], bp	; 3: 137 110 16
x12705:	add bp, 14	; 3: 131 197 14
x12708:	jmp sqrt	; 3: 233 101 253

acos$32:	; PostCall 14

acos$33:	; GetReturnValue £temporary519

acos$34:	; PushFloat x
x12711:	fld qword [bp + 6]	; 3: 221 70 6

acos$35:	; SignedDivide £temporary520 £temporary519 x
x12714:	fdiv	; 2: 222 249

acos$36:	; Parameter 14 £temporary520 6
x12716:	fstp qword [bp + 20]	; 3: 221 94 20

acos$37:	; Call 14 atan 0
x12719:	mov word [bp + 14], acos$38	; 5: 199 70 14 189 49
x12724:	mov [bp + 16], bp	; 3: 137 110 16
x12727:	add bp, 14	; 3: 131 197 14
x12730:	jmp atan	; 3: 233 211 253

acos$38:	; PostCall 14

acos$39:	; GetReturnValue £temporary521

acos$40:	; SetReturnValue £temporary521

acos$41:	; Return £temporary521
x12733:	mov ax, [bp]	; 3: 139 70 0
x12736:	mov di, [bp + 4]	; 3: 139 126 4
x12739:	mov bp, [bp + 2]	; 3: 139 110 2
x12742:	jmp ax	; 2: 255 224

acos$42:	; Assign errno 6
x12744:	mov word [errno], 6	; 6: 199 6 230 10 6 0

acos$43:	; PushZero
x12750:	fldz	; 2: 217 238

acos$44:	; SetReturnValue 0

acos$45:	; Return 0
x12752:	mov ax, [bp]	; 3: 139 70 0
x12755:	mov di, [bp + 4]	; 3: 139 126 4
x12758:	mov bp, [bp + 2]	; 3: 139 110 2
x12761:	jmp ax	; 2: 255 224

acos$46:	; FunctionEnd acos

@1274$float8$1.57#:
x12763:	dq 1.57	; 8: 31 133 235 81 184 30 249 63

@1279$float8$3.14#:
x12771:	dq 3.14	; 8: 31 133 235 81 184 30 9 64

sinh:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

sinh$1:	; PushFloat x
x12779:	fld qword [bp + 6]	; 3: 221 70 6

sinh$2:	; Parameter 14 x 6
x12782:	fstp qword [bp + 20]	; 3: 221 94 20

sinh$3:	; Call 14 exp 0
x12785:	mov word [bp + 14], sinh$4	; 5: 199 70 14 255 49
x12790:	mov [bp + 16], bp	; 3: 137 110 16
x12793:	add bp, 14	; 3: 131 197 14
x12796:	jmp exp	; 3: 233 66 248

sinh$4:	; PostCall 14

sinh$5:	; GetReturnValue £temporary579

sinh$6:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x12799:	fstp qword [bp + 14]	; 3: 221 94 14

sinh$7:	; PushFloat x
x12802:	fld qword [bp + 6]	; 3: 221 70 6

sinh$8:	; UnarySubtract £temporary580 x
x12805:	fchs	; 2: 217 224

sinh$9:	; Parameter 14 £temporary580 6
x12807:	fstp qword [bp + 28]	; 3: 221 94 28

sinh$10:	; Call 14 exp 0
x12810:	mov word [bp + 22], sinh$11	; 5: 199 70 22 24 50
x12815:	mov [bp + 24], bp	; 3: 137 110 24
x12818:	add bp, 22	; 3: 131 197 22
x12821:	jmp exp	; 3: 233 41 248

sinh$11:	; PostCall 14
x12824:	fstp qword [bp + 22]	; 3: 221 94 22
x12827:	fld qword [bp + 14]	; 3: 221 70 14
x12830:	fld qword [bp + 22]	; 3: 221 70 22

sinh$12:	; GetReturnValue £temporary581

sinh$13:	; BinarySubtract £temporary582 £temporary579 £temporary581
x12833:	fsub	; 2: 222 233

sinh$14:	; PushFloat 2
x12835:	fld qword [@1430$float8$2#]	; 4: 221 6 52 50

sinh$15:	; SignedDivide £temporary583 £temporary582 2
x12839:	fdiv	; 2: 222 249

sinh$16:	; SetReturnValue £temporary583

sinh$17:	; Return £temporary583
x12841:	mov ax, [bp]	; 3: 139 70 0
x12844:	mov di, [bp + 4]	; 3: 139 126 4
x12847:	mov bp, [bp + 2]	; 3: 139 110 2
x12850:	jmp ax	; 2: 255 224

sinh$18:	; FunctionEnd sinh

@1430$float8$2#:
x12852:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

cosh:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

cosh$1:	; PushFloat x
x12860:	fld qword [bp + 6]	; 3: 221 70 6

cosh$2:	; Parameter 14 x 6
x12863:	fstp qword [bp + 20]	; 3: 221 94 20

cosh$3:	; Call 14 exp 0
x12866:	mov word [bp + 14], cosh$4	; 5: 199 70 14 80 50
x12871:	mov [bp + 16], bp	; 3: 137 110 16
x12874:	add bp, 14	; 3: 131 197 14
x12877:	jmp exp	; 3: 233 241 247

cosh$4:	; PostCall 14

cosh$5:	; GetReturnValue £temporary586

cosh$6:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x12880:	fstp qword [bp + 14]	; 3: 221 94 14

cosh$7:	; PushFloat x
x12883:	fld qword [bp + 6]	; 3: 221 70 6

cosh$8:	; UnarySubtract £temporary587 x
x12886:	fchs	; 2: 217 224

cosh$9:	; Parameter 14 £temporary587 6
x12888:	fstp qword [bp + 28]	; 3: 221 94 28

cosh$10:	; Call 14 exp 0
x12891:	mov word [bp + 22], cosh$11	; 5: 199 70 22 105 50
x12896:	mov [bp + 24], bp	; 3: 137 110 24
x12899:	add bp, 22	; 3: 131 197 22
x12902:	jmp exp	; 3: 233 216 247

cosh$11:	; PostCall 14
x12905:	fstp qword [bp + 22]	; 3: 221 94 22
x12908:	fld qword [bp + 14]	; 3: 221 70 14
x12911:	fld qword [bp + 22]	; 3: 221 70 22

cosh$12:	; GetReturnValue £temporary588

cosh$13:	; BinaryAdd £temporary589 £temporary586 £temporary588
x12914:	fadd	; 2: 222 193

cosh$14:	; PushFloat 2
x12916:	fld qword [@1440$float8$2#]	; 4: 221 6 133 50

cosh$15:	; SignedDivide £temporary590 £temporary589 2
x12920:	fdiv	; 2: 222 249

cosh$16:	; SetReturnValue £temporary590

cosh$17:	; Return £temporary590
x12922:	mov ax, [bp]	; 3: 139 70 0
x12925:	mov di, [bp + 4]	; 3: 139 126 4
x12928:	mov bp, [bp + 2]	; 3: 139 110 2
x12931:	jmp ax	; 2: 255 224

cosh$18:	; FunctionEnd cosh

@1440$float8$2#:
x12933:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

tanh:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

tanh$1:	; PushFloat x
x12941:	fld qword [bp + 6]	; 3: 221 70 6

tanh$2:	; Parameter 14 x 6
x12944:	fstp qword [bp + 20]	; 3: 221 94 20

tanh$3:	; Call 14 sinh 0
x12947:	mov word [bp + 14], tanh$4	; 5: 199 70 14 161 50
x12952:	mov [bp + 16], bp	; 3: 137 110 16
x12955:	add bp, 14	; 3: 131 197 14
x12958:	jmp sinh	; 3: 233 74 255

tanh$4:	; PostCall 14

tanh$5:	; GetReturnValue £temporary593

tanh$6:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x12961:	fstp qword [bp + 14]	; 3: 221 94 14

tanh$7:	; PushFloat x
x12964:	fld qword [bp + 6]	; 3: 221 70 6

tanh$8:	; Parameter 14 x 6
x12967:	fstp qword [bp + 28]	; 3: 221 94 28

tanh$9:	; Call 14 cosh 0
x12970:	mov word [bp + 22], tanh$10	; 5: 199 70 22 184 50
x12975:	mov [bp + 24], bp	; 3: 137 110 24
x12978:	add bp, 22	; 3: 131 197 22
x12981:	nop	; 1: 144
x12982:	jmp cosh	; 2: 235 132

tanh$10:	; PostCall 14
x12984:	fstp qword [bp + 22]	; 3: 221 94 22
x12987:	fld qword [bp + 14]	; 3: 221 70 14
x12990:	fld qword [bp + 22]	; 3: 221 70 22

tanh$11:	; GetReturnValue £temporary594

tanh$12:	; SignedDivide £temporary595 £temporary593 £temporary594
x12993:	fdiv	; 2: 222 249

tanh$13:	; SetReturnValue £temporary595

tanh$14:	; Return £temporary595
x12995:	mov ax, [bp]	; 3: 139 70 0
x12998:	mov di, [bp + 4]	; 3: 139 126 4
x13001:	mov bp, [bp + 2]	; 3: 139 110 2
x13004:	jmp ax	; 2: 255 224

tanh$15:	; FunctionEnd tanh

frexp:	; PushFloat x
x13006:	fld qword [bp + 6]	; 3: 221 70 6

frexp$1:	; PushZero
x13009:	fldz	; 2: 217 238

frexp$2:	; Equal 42 x 0
x13011:	fcompp	; 2: 222 217
x13013:	fstsw ax	; 3: 155 223 224
x13016:	sahf	; 1: 158
x13017:	je frexp$42	; 4: 15 132 150 0

frexp$3:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

frexp$4:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

frexp$5:	; PushFloat x
x13021:	fld qword [bp + 6]	; 3: 221 70 6

frexp$6:	; Parameter 16 x 6
x13024:	fstp qword [bp + 22]	; 3: 221 94 22

frexp$7:	; Call 16 fabs 0
x13027:	mov word [bp + 16], frexp$8	; 5: 199 70 16 241 50
x13032:	mov [bp + 18], bp	; 3: 137 110 18
x13035:	add bp, 16	; 3: 131 197 16
x13038:	jmp fabs	; 3: 233 9 242

frexp$8:	; PostCall 16

frexp$9:	; GetReturnValue £temporary388

frexp$10:	; Parameter 16 £temporary388 6
x13041:	fstp qword [bp + 22]	; 3: 221 94 22

frexp$11:	; Call 16 log2 0
x13044:	mov word [bp + 16], frexp$12	; 5: 199 70 16 2 51
x13049:	mov [bp + 18], bp	; 3: 137 110 18
x13052:	add bp, 16	; 3: 131 197 16
x13055:	jmp @1000$log2	; 3: 233 155 0

frexp$12:	; PostCall 16

frexp$13:	; GetReturnValue £temporary389

frexp$14:	; IntegralToIntegral £temporary390 £temporary389

frexp$15:	; Assign exponent £temporary390
x13058:	mov [bp + 16], bx	; 3: 137 94 16

frexp$16:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

frexp$17:	; PushFloat 2
x13061:	fld qword [@1016$float8$2#]	; 4: 221 6 141 51

frexp$18:	; Parameter 18 2 6
x13065:	fstp qword [bp + 24]	; 3: 221 94 24

frexp$19:	; IntegralToFloating £temporary391 exponent
x13068:	fild word [bp + 16]	; 3: 223 70 16

frexp$20:	; Parameter 18 £temporary391 14
x13071:	fstp qword [bp + 32]	; 3: 221 94 32

frexp$21:	; Call 18 pow 0
x13074:	mov word [bp + 18], frexp$22	; 5: 199 70 18 32 51
x13079:	mov [bp + 20], bp	; 3: 137 110 20
x13082:	add bp, 18	; 3: 131 197 18
x13085:	jmp pow	; 3: 233 120 245

frexp$22:	; PostCall 18

frexp$23:	; GetReturnValue £temporary392

frexp$24:	; PushFloat x
x13088:	fld qword [bp + 6]	; 3: 221 70 6

frexp$25:	; SignedGreaterThanEqual 27 £temporary392 x
x13091:	fcompp	; 2: 222 217
x13093:	fstsw ax	; 3: 155 223 224
x13096:	sahf	; 1: 158
x13097:	jbe frexp$27	; 2: 118 3

frexp$26:	; Increment exponent
x13099:	inc word [bp + 16]	; 3: 255 70 16

frexp$27:	; Equal 30 p 0
x13102:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x13106:	je frexp$30	; 2: 116 8

frexp$28:	; Deref £temporary396 -> p p 0
x13108:	mov si, [bp + 14]	; 3: 139 118 14

frexp$29:	; Assign £temporary396 -> p exponent
x13111:	mov ax, [bp + 16]	; 3: 139 70 16
x13114:	mov [si], ax	; 2: 137 4

frexp$30:	; PushFloat x
x13116:	fld qword [bp + 6]	; 3: 221 70 6

frexp$31:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x13119:	fstp qword [bp + 18]	; 3: 221 94 18

frexp$32:	; PushFloat 2
x13122:	fld qword [@1030$float8$2#]	; 4: 221 6 149 51

frexp$33:	; Parameter 18 2 6
x13126:	fstp qword [bp + 32]	; 3: 221 94 32

frexp$34:	; IntegralToFloating £temporary397 exponent
x13129:	fild word [bp + 16]	; 3: 223 70 16

frexp$35:	; Parameter 18 £temporary397 14
x13132:	fstp qword [bp + 40]	; 3: 221 94 40

frexp$36:	; Call 18 pow 0
x13135:	mov word [bp + 26], frexp$37	; 5: 199 70 26 93 51
x13140:	mov [bp + 28], bp	; 3: 137 110 28
x13143:	add bp, 26	; 3: 131 197 26
x13146:	jmp pow	; 3: 233 59 245

frexp$37:	; PostCall 18
x13149:	fstp qword [bp + 26]	; 3: 221 94 26
x13152:	fld qword [bp + 18]	; 3: 221 70 18
x13155:	fld qword [bp + 26]	; 3: 221 70 26

frexp$38:	; GetReturnValue £temporary398

frexp$39:	; SignedDivide £temporary399 x £temporary398
x13158:	fdiv	; 2: 222 249

frexp$40:	; SetReturnValue £temporary399

frexp$41:	; Return £temporary399
x13160:	mov ax, [bp]	; 3: 139 70 0
x13163:	mov di, [bp + 4]	; 3: 139 126 4
x13166:	mov bp, [bp + 2]	; 3: 139 110 2
x13169:	jmp ax	; 2: 255 224

frexp$42:	; Equal 45 p 0
x13171:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x13175:	je frexp$45	; 2: 116 7

frexp$43:	; Deref £temporary401 -> p p 0
x13177:	mov si, [bp + 14]	; 3: 139 118 14

frexp$44:	; Assign £temporary401 -> p 0
x13180:	mov word [si], 0	; 4: 199 4 0 0

frexp$45:	; PushZero
x13184:	fldz	; 2: 217 238

frexp$46:	; SetReturnValue 0

frexp$47:	; Return 0
x13186:	mov ax, [bp]	; 3: 139 70 0
x13189:	mov di, [bp + 4]	; 3: 139 126 4
x13192:	mov bp, [bp + 2]	; 3: 139 110 2
x13195:	jmp ax	; 2: 255 224

frexp$48:	; FunctionEnd frexp

@1016$float8$2#:
x13197:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

@1030$float8$2#:
x13205:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

@1000$log2:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

@1000$log2$1:	; PushFloat x
x13213:	fld qword [bp + 6]	; 3: 221 70 6

@1000$log2$2:	; Parameter 14 x 6
x13216:	fstp qword [bp + 20]	; 3: 221 94 20

@1000$log2$3:	; Call 14 log 0
x13219:	mov word [bp + 14], @1000$log2$4	; 5: 199 70 14 177 51
x13224:	mov [bp + 16], bp	; 3: 137 110 16
x13227:	add bp, 14	; 3: 131 197 14
x13230:	jmp log	; 3: 233 168 243

@1000$log2$4:	; PostCall 14

@1000$log2$5:	; GetReturnValue £temporary383

@1000$log2$6:	; PushFloat 0.693
x13233:	fld qword [@1002$float8$0.693#]	; 4: 221 6 202 51

@1000$log2$7:	; SignedDivide £temporary384 £temporary383 0.693
x13237:	fdiv	; 2: 222 249

@1000$log2$8:	; FloatingToIntegral £temporary385 £temporary384
x13239:	fistp word [container2bytes#]	; 4: 223 30 77 27
x13243:	mov bx, [container2bytes#]	; 4: 139 30 77 27

@1000$log2$9:	; SetReturnValue £temporary385

@1000$log2$10:	; Return £temporary385
x13247:	mov ax, [bp]	; 3: 139 70 0
x13250:	mov di, [bp + 4]	; 3: 139 126 4
x13253:	mov bp, [bp + 2]	; 3: 139 110 2
x13256:	jmp ax	; 2: 255 224

@1000$log2$11:	; FunctionEnd log2

@1002$float8$0.693#:
x13258:	dq 0.693	; 8: 147 24 4 86 14 45 230 63

perror:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

perror$1:	; Parameter 8 string_25s3A2025s2E0A# 6
x13266:	mov word [bp + 14], @2309$string_25s3A2025s2E0A#	; 5: 199 70 14 18 52

perror$2:	; Parameter 8 s 8
x13271:	mov ax, [bp + 6]	; 3: 139 70 6
x13274:	mov [bp + 16], ax	; 3: 137 70 16

perror$3:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

perror$4:	; Parameter 8 errno 16
x13277:	mov ax, [errno]	; 3: 161 230 10
x13280:	mov [bp + 24], ax	; 3: 137 70 24

perror$5:	; Call 8 strerror 10
x13283:	mov word [bp + 18], perror$6	; 5: 199 70 18 241 51
x13288:	mov [bp + 20], bp	; 3: 137 110 20
x13291:	add bp, 18	; 3: 131 197 18
x13294:	nop	; 1: 144
x13295:	jmp strerror	; 2: 235 42

perror$6:	; PostCall 8

perror$7:	; GetReturnValue £temporary983

perror$8:	; Parameter 8 £temporary983 10
x13297:	mov [bp + 18], bx	; 3: 137 94 18

perror$9:	; Call 8 printf 0
x13300:	mov word [bp + 8], perror$10	; 5: 199 70 8 7 52
x13305:	mov [bp + 10], bp	; 3: 137 110 10
x13308:	add bp, 8	; 3: 131 197 8
x13311:	mov di, bp	; 2: 137 239
x13313:	add di, 4	; 3: 131 199 4
x13316:	jmp printf	; 3: 233 253 216

perror$10:	; PostCall 8

perror$11:	; Return 0
x13319:	mov ax, [bp]	; 3: 139 70 0
x13322:	mov di, [bp + 4]	; 3: 139 126 4
x13325:	mov bp, [bp + 2]	; 3: 139 110 2
x13328:	jmp ax	; 2: 255 224

perror$12:	; FunctionEnd perror

@2309$string_25s3A2025s2E0A#:
x13330:	db "%s: %s.", 10, 0	; 9: 37 115 58 32 37 115 46 10 0

strerror:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strerror$1:	; Call 8 localeconv 0
x13339:	mov word [bp + 8], strerror$2	; 5: 199 70 8 41 52
x13344:	mov [bp + 10], bp	; 3: 137 110 10
x13347:	add bp, 8	; 3: 131 197 8
x13350:	jmp localeconv	; 3: 233 76 234

strerror$2:	; PostCall 8

strerror$3:	; GetReturnValue £temporary3868

strerror$4:	; Assign localeConvPtr £temporary3868
x13353:	mov [bp + 8], bx	; 3: 137 94 8

strerror$5:	; Equal 14 localeConvPtr 0
x13356:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x13360:	je strerror$14	; 2: 116 42

strerror$6:	; Deref £temporary3870 -> localeConvPtr localeConvPtr 16
x13362:	mov si, [bp + 8]	; 3: 139 118 8

strerror$7:	; Assign messageList £temporary3870 -> localeConvPtr
x13365:	mov ax, [si + 16]	; 3: 139 68 16
x13368:	mov [bp + 10], ax	; 3: 137 70 10

strerror$8:	; Equal 14 messageList 0
x13371:	cmp word [bp + 10], 0	; 4: 131 126 10 0
x13375:	je strerror$14	; 2: 116 27

strerror$9:	; SignedMultiply £temporary3873 errno 2
x13377:	mov ax, [bp + 6]	; 3: 139 70 6
x13380:	xor dx, dx	; 2: 49 210
x13382:	imul word [@8772$int2$2#]	; 4: 247 46 106 52

strerror$10:	; BinaryAdd £temporary3874 messageList £temporary3873
x13386:	mov si, [bp + 10]	; 3: 139 118 10
x13389:	add si, ax	; 2: 1 198

strerror$11:	; Deref £temporary3872 -> £temporary3874 £temporary3874 0

strerror$12:	; SetReturnValue £temporary3872 -> £temporary3874
x13391:	mov bx, [si]	; 2: 139 28

strerror$13:	; Return £temporary3872 -> £temporary3874
x13393:	mov ax, [bp]	; 3: 139 70 0
x13396:	mov di, [bp + 4]	; 3: 139 126 4
x13399:	mov bp, [bp + 2]	; 3: 139 110 2
x13402:	jmp ax	; 2: 255 224

strerror$14:	; SetReturnValue 0
x13404:	mov bx, 0	; 3: 187 0 0

strerror$15:	; Return 0
x13407:	mov ax, [bp]	; 3: 139 70 0
x13410:	mov di, [bp + 4]	; 3: 139 126 4
x13413:	mov bp, [bp + 2]	; 3: 139 110 2
x13416:	jmp ax	; 2: 255 224

strerror$16:	; FunctionEnd strerror

@8772$int2$2#:
x13418:	dw 2	; 2: 2 0

modf:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

modf$1:	; PushFloat x
x13420:	fld qword [bp + 6]	; 3: 221 70 6

modf$2:	; Parameter 16 x 6
x13423:	fstp qword [bp + 22]	; 3: 221 94 22

modf$3:	; Call 16 fabs 0
x13426:	mov word [bp + 16], modf$4	; 5: 199 70 16 128 52
x13431:	mov [bp + 18], bp	; 3: 137 110 18
x13434:	add bp, 16	; 3: 131 197 16
x13437:	jmp fabs	; 3: 233 122 240

modf$4:	; PostCall 16

modf$5:	; GetReturnValue £temporary416

modf$6:	; PopFloat abs_x
x13440:	fstp qword [bp + 16]	; 3: 221 94 16

modf$7:	; PushFloat abs_x
x13443:	fld qword [bp + 16]	; 3: 221 70 16

modf$8:	; FloatingToIntegral £temporary417 abs_x
x13446:	fistp dword [container4bytes#]	; 4: 219 30 78 36
x13450:	mov eax, [container4bytes#]	; 4: 102 161 78 36

modf$9:	; IntegralToFloating £temporary418 £temporary417
x13454:	mov [container4bytes#], eax	; 4: 102 163 78 36
x13458:	fild dword [container4bytes#]	; 4: 219 6 78 36

modf$10:	; PopFloat integral
x13462:	fstp qword [bp + 24]	; 3: 221 94 24

modf$11:	; PushFloat abs_x
x13465:	fld qword [bp + 16]	; 3: 221 70 16

modf$12:	; PushFloat integral
x13468:	fld qword [bp + 24]	; 3: 221 70 24

modf$13:	; BinarySubtract £temporary419 abs_x integral
x13471:	fsub	; 2: 222 233

modf$14:	; PopFloat fractional
x13473:	fstp qword [bp + 32]	; 3: 221 94 32

modf$15:	; Equal 26 p 0
x13476:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x13480:	je modf$26	; 2: 116 28

modf$16:	; Deref £temporary421 -> p p 0
x13482:	mov si, [bp + 14]	; 3: 139 118 14

modf$17:	; PushFloat x
x13485:	fld qword [bp + 6]	; 3: 221 70 6

modf$18:	; PushZero
x13488:	fldz	; 2: 217 238

modf$19:	; SignedLessThanEqual 23 x 0
x13490:	fcompp	; 2: 222 217
x13492:	fstsw ax	; 3: 155 223 224
x13495:	sahf	; 1: 158
x13496:	jae modf$23	; 2: 115 5

modf$20:	; PushFloat integral
x13498:	fld qword [bp + 24]	; 3: 221 70 24

modf$21:	; DecreaseStack

modf$22:	; Goto 25
x13501:	jmp modf$25	; 2: 235 5

modf$23:	; PushFloat integral
x13503:	fld qword [bp + 24]	; 3: 221 70 24

modf$24:	; UnarySubtract £temporary423 integral
x13506:	fchs	; 2: 217 224

modf$25:	; PopFloat £temporary421 -> p
x13508:	fstp qword [si]	; 2: 221 28

modf$26:	; PushFloat x
x13510:	fld qword [bp + 6]	; 3: 221 70 6

modf$27:	; PushZero
x13513:	fldz	; 2: 217 238

modf$28:	; SignedLessThanEqual 32 x 0
x13515:	fcompp	; 2: 222 217
x13517:	fstsw ax	; 3: 155 223 224
x13520:	sahf	; 1: 158
x13521:	jae modf$32	; 2: 115 5

modf$29:	; PushFloat fractional
x13523:	fld qword [bp + 32]	; 3: 221 70 32

modf$30:	; DecreaseStack

modf$31:	; Goto 34
x13526:	jmp modf$34	; 2: 235 5

modf$32:	; PushFloat fractional
x13528:	fld qword [bp + 32]	; 3: 221 70 32

modf$33:	; UnarySubtract £temporary429 fractional
x13531:	fchs	; 2: 217 224

modf$34:	; SetReturnValue £temporary433

modf$35:	; Return £temporary433
x13533:	mov ax, [bp]	; 3: 139 70 0
x13536:	mov di, [bp + 4]	; 3: 139 126 4
x13539:	mov bp, [bp + 2]	; 3: 139 110 2
x13542:	jmp ax	; 2: 255 224

modf$36:	; FunctionEnd modf

math_test_2:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_2$1:	; Parameter 22 string_fmod2825f2C2025f29203D2025f2C20errno203D2025i0A# 6
x13544:	mov word [bp + 28], @10626$string_fmod2825f2C2025f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 28 62 54

math_test_2$2:	; PushFloat x
x13549:	fld qword [bp + 6]	; 3: 221 70 6

math_test_2$3:	; Parameter 22 x 8
x13552:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_2$4:	; PushFloat y
x13555:	fld qword [bp + 14]	; 3: 221 70 14

math_test_2$5:	; Parameter 22 y 16
x13558:	fstp qword [bp + 38]	; 3: 221 94 38

math_test_2$6:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_2$7:	; PushFloat x
x13561:	fld qword [bp + 6]	; 3: 221 70 6

math_test_2$8:	; Parameter 22 x 30
x13564:	fstp qword [bp + 52]	; 3: 221 94 52

math_test_2$9:	; PushFloat y
x13567:	fld qword [bp + 14]	; 3: 221 70 14

math_test_2$10:	; Parameter 22 y 38
x13570:	fstp qword [bp + 60]	; 3: 221 94 60

math_test_2$11:	; Call 22 fmod 24
x13573:	mov word [bp + 46], math_test_2$12	; 5: 199 70 46 19 53
x13578:	mov [bp + 48], bp	; 3: 137 110 48
x13581:	add bp, 46	; 3: 131 197 46
x13584:	jmp fmod	; 3: 233 112 247

math_test_2$12:	; PostCall 22

math_test_2$13:	; GetReturnValue £temporary4776

math_test_2$14:	; Parameter 22 £temporary4776 24
x13587:	fstp qword [bp + 46]	; 3: 221 94 46

math_test_2$15:	; Parameter 22 errno 32
x13590:	mov ax, [errno]	; 3: 161 230 10
x13593:	mov [bp + 54], ax	; 3: 137 70 54

math_test_2$16:	; Call 22 printf 0
x13596:	mov word [bp + 22], math_test_2$17	; 5: 199 70 22 47 53
x13601:	mov [bp + 24], bp	; 3: 137 110 24
x13604:	add bp, 22	; 3: 131 197 22
x13607:	mov di, bp	; 2: 137 239
x13609:	add di, 26	; 3: 131 199 26
x13612:	jmp printf	; 3: 233 213 215

math_test_2$17:	; PostCall 22

math_test_2$18:	; Assign errno 0
x13615:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_2$19:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_2$20:	; Parameter 22 string_atan22825f2C2025f29203D2025f2C20errno203D2025i0A# 6
x13621:	mov word [bp + 28], @10631$string_atan22825f2C2025f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 28 93 54

math_test_2$21:	; PushFloat x
x13626:	fld qword [bp + 6]	; 3: 221 70 6

math_test_2$22:	; Parameter 22 x 8
x13629:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_2$23:	; PushFloat y
x13632:	fld qword [bp + 14]	; 3: 221 70 14

math_test_2$24:	; Parameter 22 y 16
x13635:	fstp qword [bp + 38]	; 3: 221 94 38

math_test_2$25:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_2$26:	; PushFloat x
x13638:	fld qword [bp + 6]	; 3: 221 70 6

math_test_2$27:	; Parameter 22 x 30
x13641:	fstp qword [bp + 52]	; 3: 221 94 52

math_test_2$28:	; PushFloat y
x13644:	fld qword [bp + 14]	; 3: 221 70 14

math_test_2$29:	; Parameter 22 y 38
x13647:	fstp qword [bp + 60]	; 3: 221 94 60

math_test_2$30:	; Call 22 atan2 24
x13650:	mov word [bp + 46], math_test_2$31	; 5: 199 70 46 96 53
x13655:	mov [bp + 48], bp	; 3: 137 110 48
x13658:	add bp, 46	; 3: 131 197 46
x13661:	jmp atan2	; 3: 233 82 1

math_test_2$31:	; PostCall 22

math_test_2$32:	; GetReturnValue £temporary4778

math_test_2$33:	; Parameter 22 £temporary4778 24
x13664:	fstp qword [bp + 46]	; 3: 221 94 46

math_test_2$34:	; Parameter 22 errno 32
x13667:	mov ax, [errno]	; 3: 161 230 10
x13670:	mov [bp + 54], ax	; 3: 137 70 54

math_test_2$35:	; Call 22 printf 0
x13673:	mov word [bp + 22], math_test_2$36	; 5: 199 70 22 124 53
x13678:	mov [bp + 24], bp	; 3: 137 110 24
x13681:	add bp, 22	; 3: 131 197 22
x13684:	mov di, bp	; 2: 137 239
x13686:	add di, 26	; 3: 131 199 26
x13689:	jmp printf	; 3: 233 136 215

math_test_2$36:	; PostCall 22

math_test_2$37:	; Assign errno 0
x13692:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_2$38:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_2$39:	; Parameter 22 string_pow2825f2C2025f29203D2025f2C20errno203D2025i0A# 6
x13698:	mov word [bp + 28], @10636$string_pow2825f2C2025f29203D2025f2C20errno203D2025i0A#	; 5: 199 70 28 125 54

math_test_2$40:	; PushFloat x
x13703:	fld qword [bp + 6]	; 3: 221 70 6

math_test_2$41:	; Parameter 22 x 8
x13706:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_2$42:	; PushFloat y
x13709:	fld qword [bp + 14]	; 3: 221 70 14

math_test_2$43:	; Parameter 22 y 16
x13712:	fstp qword [bp + 38]	; 3: 221 94 38

math_test_2$44:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_2$45:	; PushFloat x
x13715:	fld qword [bp + 6]	; 3: 221 70 6

math_test_2$46:	; Parameter 22 x 30
x13718:	fstp qword [bp + 52]	; 3: 221 94 52

math_test_2$47:	; PushFloat y
x13721:	fld qword [bp + 14]	; 3: 221 70 14

math_test_2$48:	; Parameter 22 y 38
x13724:	fstp qword [bp + 60]	; 3: 221 94 60

math_test_2$49:	; Call 22 pow 24
x13727:	mov word [bp + 46], math_test_2$50	; 5: 199 70 46 173 53
x13732:	mov [bp + 48], bp	; 3: 137 110 48
x13735:	add bp, 46	; 3: 131 197 46
x13738:	jmp pow	; 3: 233 235 242

math_test_2$50:	; PostCall 22

math_test_2$51:	; GetReturnValue £temporary4780

math_test_2$52:	; Parameter 22 £temporary4780 24
x13741:	fstp qword [bp + 46]	; 3: 221 94 46

math_test_2$53:	; Parameter 22 errno 32
x13744:	mov ax, [errno]	; 3: 161 230 10
x13747:	mov [bp + 54], ax	; 3: 137 70 54

math_test_2$54:	; Call 22 printf 0
x13750:	mov word [bp + 22], math_test_2$55	; 5: 199 70 22 201 53
x13755:	mov [bp + 24], bp	; 3: 137 110 24
x13758:	add bp, 22	; 3: 131 197 22
x13761:	mov di, bp	; 2: 137 239
x13763:	add di, 26	; 3: 131 199 26
x13766:	jmp printf	; 3: 233 59 215

math_test_2$55:	; PostCall 22

math_test_2$56:	; Assign errno 0
x13769:	mov word [errno], 0	; 6: 199 6 230 10 0 0

math_test_2$57:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_2$58:	; Parameter 22 string_0A# 6
x13775:	mov word [bp + 28], @10641$string_0A#	; 5: 199 70 28 155 54

math_test_2$59:	; Call 22 printf 0
x13780:	mov word [bp + 22], math_test_2$60	; 5: 199 70 22 228 53
x13785:	mov [bp + 24], bp	; 3: 137 110 24
x13788:	add bp, 22	; 3: 131 197 22
x13791:	mov di, bp	; 2: 137 239
x13793:	jmp printf	; 3: 233 32 215

math_test_2$60:	; PostCall 22

math_test_2$61:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_2$62:	; Parameter 22 string_ldexp2825f2C2025i29203D2025f0A0A# 6
x13796:	mov word [bp + 28], @10643$string_ldexp2825f2C2025i29203D2025f0A0A#	; 5: 199 70 28 157 54

math_test_2$63:	; PushFloat x
x13801:	fld qword [bp + 6]	; 3: 221 70 6

math_test_2$64:	; Parameter 22 x 8
x13804:	fstp qword [bp + 30]	; 3: 221 94 30

math_test_2$65:	; PushFloat y
x13807:	fld qword [bp + 14]	; 3: 221 70 14

math_test_2$66:	; FloatingToIntegral £temporary4783 y
x13810:	fistp word [container2bytes#]	; 4: 223 30 77 27
x13814:	mov ax, [container2bytes#]	; 3: 161 77 27

math_test_2$67:	; Parameter 22 £temporary4783 16
x13817:	mov [bp + 38], ax	; 3: 137 70 38

math_test_2$68:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

math_test_2$69:	; PushFloat x
x13820:	fld qword [bp + 6]	; 3: 221 70 6

math_test_2$70:	; Parameter 22 x 24
x13823:	fstp qword [bp + 46]	; 3: 221 94 46

math_test_2$71:	; PushFloat y
x13826:	fld qword [bp + 14]	; 3: 221 70 14

math_test_2$72:	; FloatingToIntegral £temporary4784 y
x13829:	fistp word [container2bytes#]	; 4: 223 30 77 27
x13833:	mov ax, [container2bytes#]	; 3: 161 77 27

math_test_2$73:	; Parameter 22 £temporary4784 32
x13836:	mov [bp + 54], ax	; 3: 137 70 54

math_test_2$74:	; Call 22 ldexp 18
x13839:	mov word [bp + 40], math_test_2$75	; 5: 199 70 40 29 54
x13844:	mov [bp + 42], bp	; 3: 137 110 42
x13847:	add bp, 40	; 3: 131 197 40
x13850:	jmp ldexp	; 3: 233 235 1

math_test_2$75:	; PostCall 22

math_test_2$76:	; GetReturnValue £temporary4785

math_test_2$77:	; Parameter 22 £temporary4785 18
x13853:	fstp qword [bp + 40]	; 3: 221 94 40

math_test_2$78:	; Call 22 printf 0
x13856:	mov word [bp + 22], math_test_2$79	; 5: 199 70 22 51 54
x13861:	mov [bp + 24], bp	; 3: 137 110 24
x13864:	add bp, 22	; 3: 131 197 22
x13867:	mov di, bp	; 2: 137 239
x13869:	add di, 18	; 3: 131 199 18
x13872:	jmp printf	; 3: 233 209 214

math_test_2$79:	; PostCall 22

math_test_2$80:	; Return 0
x13875:	mov ax, [bp]	; 3: 139 70 0
x13878:	mov di, [bp + 4]	; 3: 139 126 4
x13881:	mov bp, [bp + 2]	; 3: 139 110 2
x13884:	jmp ax	; 2: 255 224

math_test_2$81:	; FunctionEnd math_test_2

@10626$string_fmod2825f2C2025f29203D2025f2C20errno203D2025i0A#:
x13886:	db "fmod(%f, %f) = %f, errno = %i", 10, 0	; 31: 102 109 111 100 40 37 102 44 32 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10631$string_atan22825f2C2025f29203D2025f2C20errno203D2025i0A#:
x13917:	db "atan2(%f, %f) = %f, errno = %i", 10, 0	; 32: 97 116 97 110 50 40 37 102 44 32 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10636$string_pow2825f2C2025f29203D2025f2C20errno203D2025i0A#:
x13949:	db "pow(%f, %f) = %f, errno = %i", 10, 0	; 30: 112 111 119 40 37 102 44 32 37 102 41 32 61 32 37 102 44 32 101 114 114 110 111 32 61 32 37 105 10 0

@10641$string_0A#:
x13979:	db 10, 0	; 2: 10 0

@10643$string_ldexp2825f2C2025i29203D2025f0A0A#:
x13981:	db "ldexp(%f, %i) = %f", 10, 10, 0	; 21: 108 100 101 120 112 40 37 102 44 32 37 105 41 32 61 32 37 102 10 10 0

atan2:	; PushFloat y
x14002:	fld qword [bp + 14]	; 3: 221 70 14

atan2$1:	; PushZero
x14005:	fldz	; 2: 217 238

atan2$2:	; SignedLessThanEqual 13 y 0
x14007:	fcompp	; 2: 222 217
x14009:	fstsw ax	; 3: 155 223 224
x14012:	sahf	; 1: 158
x14013:	jae atan2$13	; 2: 115 36

atan2$3:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

atan2$4:	; PushFloat x
x14015:	fld qword [bp + 6]	; 3: 221 70 6

atan2$5:	; PushFloat y
x14018:	fld qword [bp + 14]	; 3: 221 70 14

atan2$6:	; SignedDivide £temporary556 x y
x14021:	fdiv	; 2: 222 249

atan2$7:	; Parameter 22 £temporary556 6
x14023:	fstp qword [bp + 28]	; 3: 221 94 28

atan2$8:	; Call 22 atan 0
x14026:	mov word [bp + 22], atan2$9	; 5: 199 70 22 216 54
x14031:	mov [bp + 24], bp	; 3: 137 110 24
x14034:	add bp, 22	; 3: 131 197 22
x14037:	jmp atan	; 3: 233 184 248

atan2$9:	; PostCall 22

atan2$10:	; GetReturnValue £temporary557

atan2$11:	; SetReturnValue £temporary557

atan2$12:	; Return £temporary557
x14040:	mov ax, [bp]	; 3: 139 70 0
x14043:	mov di, [bp + 4]	; 3: 139 126 4
x14046:	mov bp, [bp + 2]	; 3: 139 110 2
x14049:	jmp ax	; 2: 255 224

atan2$13:	; PushFloat x
x14051:	fld qword [bp + 6]	; 3: 221 70 6

atan2$14:	; PushZero
x14054:	fldz	; 2: 217 238

atan2$15:	; SignedLessThan 31 x 0
x14056:	fcompp	; 2: 222 217
x14058:	fstsw ax	; 3: 155 223 224
x14061:	sahf	; 1: 158
x14062:	ja atan2$31	; 2: 119 67

atan2$16:	; PushFloat y
x14064:	fld qword [bp + 14]	; 3: 221 70 14

atan2$17:	; PushZero
x14067:	fldz	; 2: 217 238

atan2$18:	; SignedGreaterThanEqual 31 y 0
x14069:	fcompp	; 2: 222 217
x14071:	fstsw ax	; 3: 155 223 224
x14074:	sahf	; 1: 158
x14075:	jbe atan2$31	; 2: 118 54

atan2$19:	; PushFloat 3.14
x14077:	fld qword [@1377$float8$3.14#]	; 4: 221 6 232 55

atan2$20:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x14081:	fstp qword [bp + 22]	; 3: 221 94 22

atan2$21:	; PushFloat x
x14084:	fld qword [bp + 6]	; 3: 221 70 6

atan2$22:	; PushFloat y
x14087:	fld qword [bp + 14]	; 3: 221 70 14

atan2$23:	; SignedDivide £temporary561 x y
x14090:	fdiv	; 2: 222 249

atan2$24:	; Parameter 22 £temporary561 6
x14092:	fstp qword [bp + 36]	; 3: 221 94 36

atan2$25:	; Call 22 atan 0
x14095:	mov word [bp + 30], atan2$26	; 5: 199 70 30 29 55
x14100:	mov [bp + 32], bp	; 3: 137 110 32
x14103:	add bp, 30	; 3: 131 197 30
x14106:	jmp atan	; 3: 233 115 248

atan2$26:	; PostCall 22
x14109:	fstp qword [bp + 30]	; 3: 221 94 30
x14112:	fld qword [bp + 22]	; 3: 221 70 22
x14115:	fld qword [bp + 30]	; 3: 221 70 30

atan2$27:	; GetReturnValue £temporary562

atan2$28:	; BinaryAdd £temporary563 3.14 £temporary562
x14118:	fadd	; 2: 222 193

atan2$29:	; SetReturnValue £temporary563

atan2$30:	; Return £temporary563
x14120:	mov ax, [bp]	; 3: 139 70 0
x14123:	mov di, [bp + 4]	; 3: 139 126 4
x14126:	mov bp, [bp + 2]	; 3: 139 110 2
x14129:	jmp ax	; 2: 255 224

atan2$31:	; PushFloat x
x14131:	fld qword [bp + 6]	; 3: 221 70 6

atan2$32:	; PushZero
x14134:	fldz	; 2: 217 238

atan2$33:	; SignedGreaterThanEqual 49 x 0
x14136:	fcompp	; 2: 222 217
x14138:	fstsw ax	; 3: 155 223 224
x14141:	sahf	; 1: 158
x14142:	jbe atan2$49	; 2: 118 67

atan2$34:	; PushFloat y
x14144:	fld qword [bp + 14]	; 3: 221 70 14

atan2$35:	; PushZero
x14147:	fldz	; 2: 217 238

atan2$36:	; SignedGreaterThanEqual 49 y 0
x14149:	fcompp	; 2: 222 217
x14151:	fstsw ax	; 3: 155 223 224
x14154:	sahf	; 1: 158
x14155:	jbe atan2$49	; 2: 118 54

atan2$37:	; PushFloat -3.14
x14157:	fld qword [@1390$float8$minus3.14#]	; 4: 221 6 240 55

atan2$38:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x14161:	fstp qword [bp + 22]	; 3: 221 94 22

atan2$39:	; PushFloat x
x14164:	fld qword [bp + 6]	; 3: 221 70 6

atan2$40:	; PushFloat y
x14167:	fld qword [bp + 14]	; 3: 221 70 14

atan2$41:	; SignedDivide £temporary567 x y
x14170:	fdiv	; 2: 222 249

atan2$42:	; Parameter 22 £temporary567 6
x14172:	fstp qword [bp + 36]	; 3: 221 94 36

atan2$43:	; Call 22 atan 0
x14175:	mov word [bp + 30], atan2$44	; 5: 199 70 30 109 55
x14180:	mov [bp + 32], bp	; 3: 137 110 32
x14183:	add bp, 30	; 3: 131 197 30
x14186:	jmp atan	; 3: 233 35 248

atan2$44:	; PostCall 22
x14189:	fstp qword [bp + 30]	; 3: 221 94 30
x14192:	fld qword [bp + 22]	; 3: 221 70 22
x14195:	fld qword [bp + 30]	; 3: 221 70 30

atan2$45:	; GetReturnValue £temporary568

atan2$46:	; BinaryAdd £temporary569 -3.14 £temporary568
x14198:	fadd	; 2: 222 193

atan2$47:	; SetReturnValue £temporary569

atan2$48:	; Return £temporary569
x14200:	mov ax, [bp]	; 3: 139 70 0
x14203:	mov di, [bp + 4]	; 3: 139 126 4
x14206:	mov bp, [bp + 2]	; 3: 139 110 2
x14209:	jmp ax	; 2: 255 224

atan2$49:	; PushFloat x
x14211:	fld qword [bp + 6]	; 3: 221 70 6

atan2$50:	; PushZero
x14214:	fldz	; 2: 217 238

atan2$51:	; SignedLessThanEqual 58 x 0
x14216:	fcompp	; 2: 222 217
x14218:	fstsw ax	; 3: 155 223 224
x14221:	sahf	; 1: 158
x14222:	jae atan2$58	; 2: 115 28

atan2$52:	; PushFloat y
x14224:	fld qword [bp + 14]	; 3: 221 70 14

atan2$53:	; PushZero
x14227:	fldz	; 2: 217 238

atan2$54:	; NotEqual 58 y 0
x14229:	fcompp	; 2: 222 217
x14231:	fstsw ax	; 3: 155 223 224
x14234:	sahf	; 1: 158
x14235:	jne atan2$58	; 2: 117 15

atan2$55:	; PushFloat 1.57
x14237:	fld qword [@1404$float8$1.57#]	; 4: 221 6 248 55

atan2$56:	; SetReturnValue 1.57

atan2$57:	; Return 1.57
x14241:	mov ax, [bp]	; 3: 139 70 0
x14244:	mov di, [bp + 4]	; 3: 139 126 4
x14247:	mov bp, [bp + 2]	; 3: 139 110 2
x14250:	jmp ax	; 2: 255 224

atan2$58:	; PushFloat x
x14252:	fld qword [bp + 6]	; 3: 221 70 6

atan2$59:	; PushZero
x14255:	fldz	; 2: 217 238

atan2$60:	; SignedGreaterThanEqual 67 x 0
x14257:	fcompp	; 2: 222 217
x14259:	fstsw ax	; 3: 155 223 224
x14262:	sahf	; 1: 158
x14263:	jbe atan2$67	; 2: 118 28

atan2$61:	; PushFloat y
x14265:	fld qword [bp + 14]	; 3: 221 70 14

atan2$62:	; PushZero
x14268:	fldz	; 2: 217 238

atan2$63:	; NotEqual 67 y 0
x14270:	fcompp	; 2: 222 217
x14272:	fstsw ax	; 3: 155 223 224
x14275:	sahf	; 1: 158
x14276:	jne atan2$67	; 2: 117 15

atan2$64:	; PushFloat -1.57
x14278:	fld qword [@1416$float8$minus1.57#]	; 4: 221 6 0 56

atan2$65:	; SetReturnValue -1.57

atan2$66:	; Return -1.57
x14282:	mov ax, [bp]	; 3: 139 70 0
x14285:	mov di, [bp + 4]	; 3: 139 126 4
x14288:	mov bp, [bp + 2]	; 3: 139 110 2
x14291:	jmp ax	; 2: 255 224

atan2$67:	; Assign errno 6
x14293:	mov word [errno], 6	; 6: 199 6 230 10 6 0

atan2$68:	; PushZero
x14299:	fldz	; 2: 217 238

atan2$69:	; SetReturnValue 0

atan2$70:	; Return 0
x14301:	mov ax, [bp]	; 3: 139 70 0
x14304:	mov di, [bp + 4]	; 3: 139 126 4
x14307:	mov bp, [bp + 2]	; 3: 139 110 2
x14310:	jmp ax	; 2: 255 224

atan2$71:	; FunctionEnd atan2

@1377$float8$3.14#:
x14312:	dq 3.14	; 8: 31 133 235 81 184 30 9 64

@1390$float8$minus3.14#:
x14320:	dq -3.14	; 8: 31 133 235 81 184 30 9 192

@1404$float8$1.57#:
x14328:	dq 1.57	; 8: 31 133 235 81 184 30 249 63

@1416$float8$minus1.57#:
x14336:	dq -1.57	; 8: 31 133 235 81 184 30 249 191

ldexp:	; PushFloat x
x14344:	fld qword [bp + 6]	; 3: 221 70 6

ldexp$1:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x14347:	fstp qword [bp + 16]	; 3: 221 94 16

ldexp$2:	; PushFloat 2
x14350:	fld qword [@992$float8$2#]	; 4: 221 6 63 56

ldexp$3:	; Parameter 16 2 6
x14354:	fstp qword [bp + 30]	; 3: 221 94 30

ldexp$4:	; IntegralToFloating £temporary378 n
x14357:	fild word [bp + 14]	; 3: 223 70 14

ldexp$5:	; Parameter 16 £temporary378 14
x14360:	fstp qword [bp + 38]	; 3: 221 94 38

ldexp$6:	; Call 16 pow 0
x14363:	mov word [bp + 24], ldexp$7	; 5: 199 70 24 41 56
x14368:	mov [bp + 26], bp	; 3: 137 110 26
x14371:	add bp, 24	; 3: 131 197 24
x14374:	jmp pow	; 3: 233 111 240

ldexp$7:	; PostCall 16
x14377:	fstp qword [bp + 24]	; 3: 221 94 24
x14380:	fld qword [bp + 16]	; 3: 221 70 16
x14383:	fld qword [bp + 24]	; 3: 221 70 24

ldexp$8:	; GetReturnValue £temporary379

ldexp$9:	; SignedMultiply £temporary380 x £temporary379
x14386:	fmul	; 2: 222 201

ldexp$10:	; SetReturnValue £temporary380

ldexp$11:	; Return £temporary380
x14388:	mov ax, [bp]	; 3: 139 70 0
x14391:	mov di, [bp + 4]	; 3: 139 126 4
x14394:	mov bp, [bp + 2]	; 3: 139 110 2
x14397:	jmp ax	; 2: 255 224

ldexp$12:	; FunctionEnd ldexp

@992$float8$2#:
x14399:	dq 2.0	; 8: 0 0 0 0 0 0 0 64

file_test:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1:	; Parameter 6 string_in2Etxt# 6
x14407:	mov word [bp + 12], @10693$string_in2Etxt#	; 5: 199 70 12 116 77

file_test$2:	; Parameter 6 string_r# 8
x14412:	mov word [bp + 14], @10694$string_r#	; 5: 199 70 14 123 77

file_test$3:	; Call 6 fopen 0
x14417:	mov word [bp + 6], file_test$4	; 5: 199 70 6 95 56
x14422:	mov [bp + 8], bp	; 3: 137 110 8
x14425:	add bp, 6	; 3: 131 197 6
x14428:	jmp fopen	; 3: 233 130 33

file_test$4:	; PostCall 6

file_test$5:	; GetReturnValue £temporary4815

file_test$6:	; Assign inFilePtr £temporary4815
x14431:	mov [bp + 6], bx	; 3: 137 94 6

file_test$7:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$8:	; Parameter 8 string_outX2Etxt# 6
x14434:	mov word [bp + 14], @10697$string_outX2Etxt#	; 5: 199 70 14 125 77

file_test$9:	; Parameter 8 string_w# 8
x14439:	mov word [bp + 16], @10698$string_w#	; 5: 199 70 16 134 77

file_test$10:	; Call 8 fopen 0
x14444:	mov word [bp + 8], file_test$11	; 5: 199 70 8 122 56
x14449:	mov [bp + 10], bp	; 3: 137 110 10
x14452:	add bp, 8	; 3: 131 197 8
x14455:	jmp fopen	; 3: 233 103 33

file_test$11:	; PostCall 8

file_test$12:	; GetReturnValue £temporary4816

file_test$13:	; Assign outFilePtr £temporary4816
x14458:	mov [bp + 8], bx	; 3: 137 94 8

file_test$14:	; NotEqual 26 inFilePtr 0
x14461:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x14465:	jne file_test$26	; 2: 117 59

file_test$15:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$16:	; Parameter 10 stderr 6
x14467:	mov ax, [stderr]	; 3: 161 136 77
x14470:	mov [bp + 16], ax	; 3: 137 70 16

file_test$17:	; Parameter 10 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x14473:	mov word [bp + 18], @10706$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 18 138 77

file_test$18:	; Parameter 10 string_inFilePtr20213D20NULL# 10
x14478:	mov word [bp + 20], @10707$string_inFilePtr20213D20NULL#	; 5: 199 70 20 184 77

file_test$19:	; Parameter 10 string_C3A5CUsers5Cstefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x14483:	mov word [bp + 22], @10708$string_C3A5CUsers5Cstefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 22 202 77

file_test$20:	; Parameter 10 14 14
x14488:	mov word [bp + 24], 14	; 5: 199 70 24 14 0

file_test$21:	; Call 10 fprintf 0
x14493:	mov word [bp + 10], file_test$22	; 5: 199 70 10 176 56
x14498:	mov [bp + 12], bp	; 3: 137 110 12
x14501:	add bp, 10	; 3: 131 197 10
x14504:	mov di, bp	; 2: 137 239
x14506:	add di, 6	; 3: 131 199 6
x14509:	jmp fprintf	; 3: 233 202 37

file_test$22:	; PostCall 10

file_test$23:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$24:	; Call 10 abort 0
x14512:	mov word [bp + 10], file_test$25	; 5: 199 70 10 190 56
x14517:	mov [bp + 12], bp	; 3: 137 110 12
x14520:	add bp, 10	; 3: 131 197 10
x14523:	jmp abort	; 3: 233 247 37

file_test$25:	; PostCall 10

file_test$26:	; NotEqual 38 outFilePtr 0
x14526:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x14530:	jne file_test$38	; 2: 117 59

file_test$27:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$28:	; Parameter 10 stderr 6
x14532:	mov ax, [stderr]	; 3: 161 136 77
x14535:	mov [bp + 16], ax	; 3: 137 70 16

file_test$29:	; Parameter 10 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x14538:	mov word [bp + 18], @10718$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 18 10 78

file_test$30:	; Parameter 10 string_outFilePtr20213D20NULL# 10
x14543:	mov word [bp + 20], @10719$string_outFilePtr20213D20NULL#	; 5: 199 70 20 56 78

file_test$31:	; Parameter 10 string_C3A5CUsers5Cstefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x14548:	mov word [bp + 22], @10720$string_C3A5CUsers5Cstefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 22 75 78

file_test$32:	; Parameter 10 15 14
x14553:	mov word [bp + 24], 15	; 5: 199 70 24 15 0

file_test$33:	; Call 10 fprintf 0
x14558:	mov word [bp + 10], file_test$34	; 5: 199 70 10 241 56
x14563:	mov [bp + 12], bp	; 3: 137 110 12
x14566:	add bp, 10	; 3: 131 197 10
x14569:	mov di, bp	; 2: 137 239
x14571:	add di, 6	; 3: 131 199 6
x14574:	jmp fprintf	; 3: 233 137 37

file_test$34:	; PostCall 10

file_test$35:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$36:	; Call 10 abort 0
x14577:	mov word [bp + 10], file_test$37	; 5: 199 70 10 255 56
x14582:	mov [bp + 12], bp	; 3: 137 110 12
x14585:	add bp, 10	; 3: 131 197 10
x14588:	jmp abort	; 3: 233 182 37

file_test$37:	; PostCall 10

file_test$38:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$39:	; Parameter 10 inFilePtr 6
x14591:	mov ax, [bp + 6]	; 3: 139 70 6
x14594:	mov [bp + 16], ax	; 3: 137 70 16

file_test$40:	; Call 10 feof 0
x14597:	mov word [bp + 10], file_test$41	; 5: 199 70 10 19 57
x14602:	mov [bp + 12], bp	; 3: 137 110 12
x14605:	add bp, 10	; 3: 131 197 10
x14608:	jmp feof	; 3: 233 179 37

file_test$41:	; PostCall 10

file_test$42:	; GetReturnValue £temporary4825

file_test$43:	; NotEqual 75 £temporary4825 0
x14611:	cmp bx, 0	; 3: 131 251 0
x14614:	jne file_test$75	; 4: 15 133 141 0

file_test$44:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$45:	; Parameter 18 inFilePtr 6
x14618:	mov ax, [bp + 6]	; 3: 139 70 6
x14621:	mov [bp + 24], ax	; 3: 137 70 24

file_test$46:	; Parameter 18 string_25lf# 8
x14624:	mov word [bp + 26], @10730$string_25lf#	; 5: 199 70 26 139 78

file_test$47:	; address £temporary4828 value
x14629:	mov si, bp	; 2: 137 238
x14631:	add si, 10	; 3: 131 198 10

file_test$48:	; Parameter 18 £temporary4828 10
x14634:	mov [bp + 28], si	; 3: 137 118 28

file_test$49:	; Call 18 fscanf 0
x14637:	mov word [bp + 18], file_test$50	; 5: 199 70 18 64 57
x14642:	mov [bp + 20], bp	; 3: 137 110 20
x14645:	add bp, 18	; 3: 131 197 18
x14648:	mov di, bp	; 2: 137 239
x14650:	add di, 2	; 3: 131 199 2
x14653:	jmp fscanf	; 3: 233 27 38

file_test$50:	; PostCall 18

file_test$51:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$52:	; Parameter 18 string_X12025f0A# 6
x14656:	mov word [bp + 24], @10733$string_X12025f0A#	; 5: 199 70 24 143 78

file_test$53:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$54:	; PushFloat value
x14661:	fld qword [bp + 10]	; 3: 221 70 10

file_test$55:	; Parameter 18 value 14
x14664:	fstp qword [bp + 32]	; 3: 221 94 32

file_test$56:	; Call 18 sqrt 8
x14667:	mov word [bp + 26], file_test$57	; 5: 199 70 26 89 57
x14672:	mov [bp + 28], bp	; 3: 137 110 28
x14675:	add bp, 26	; 3: 131 197 26
x14678:	jmp sqrt	; 3: 233 179 245

file_test$57:	; PostCall 18

file_test$58:	; GetReturnValue £temporary4830

file_test$59:	; Parameter 18 £temporary4830 8
x14681:	fstp qword [bp + 26]	; 3: 221 94 26

file_test$60:	; Call 18 printf 0
x14684:	mov word [bp + 18], file_test$61	; 5: 199 70 18 111 57
x14689:	mov [bp + 20], bp	; 3: 137 110 20
x14692:	add bp, 18	; 3: 131 197 18
x14695:	mov di, bp	; 2: 137 239
x14697:	add di, 8	; 3: 131 199 8
x14700:	jmp printf	; 3: 233 149 211

file_test$61:	; PostCall 18

file_test$62:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$63:	; Parameter 18 outFilePtr 6
x14703:	mov ax, [bp + 8]	; 3: 139 70 8
x14706:	mov [bp + 24], ax	; 3: 137 70 24

file_test$64:	; Parameter 18 string_X22025f0A# 8
x14709:	mov word [bp + 26], @10736$string_X22025f0A#	; 5: 199 70 26 150 78

file_test$65:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$66:	; PushFloat value
x14714:	fld qword [bp + 10]	; 3: 221 70 10

file_test$67:	; Parameter 18 value 16
x14717:	fstp qword [bp + 34]	; 3: 221 94 34

file_test$68:	; Call 18 sqrt 10
x14720:	mov word [bp + 28], file_test$69	; 5: 199 70 28 142 57
x14725:	mov [bp + 30], bp	; 3: 137 110 30
x14728:	add bp, 28	; 3: 131 197 28
x14731:	jmp sqrt	; 3: 233 126 245

file_test$69:	; PostCall 18

file_test$70:	; GetReturnValue £temporary4832

file_test$71:	; Parameter 18 £temporary4832 10
x14734:	fstp qword [bp + 28]	; 3: 221 94 28

file_test$72:	; Call 18 fprintf 0
x14737:	mov word [bp + 18], file_test$73	; 5: 199 70 18 164 57
x14742:	mov [bp + 20], bp	; 3: 137 110 20
x14745:	add bp, 18	; 3: 131 197 18
x14748:	mov di, bp	; 2: 137 239
x14750:	add di, 8	; 3: 131 199 8
x14753:	jmp fprintf	; 3: 233 214 36

file_test$73:	; PostCall 18

file_test$74:	; Goto 38
x14756:	jmp file_test$38	; 3: 233 88 255

file_test$75:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$76:	; Parameter 10 string_0A# 6
x14759:	mov word [bp + 16], @10739$string_0A#	; 5: 199 70 16 157 78

file_test$77:	; Call 10 printf 0
x14764:	mov word [bp + 10], file_test$78	; 5: 199 70 10 188 57
x14769:	mov [bp + 12], bp	; 3: 137 110 12
x14772:	add bp, 10	; 3: 131 197 10
x14775:	mov di, bp	; 2: 137 239
x14777:	jmp printf	; 3: 233 72 211

file_test$78:	; PostCall 10

file_test$79:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$80:	; Parameter 10 inFilePtr 6
x14780:	mov ax, [bp + 6]	; 3: 139 70 6
x14783:	mov [bp + 16], ax	; 3: 137 70 16

file_test$81:	; Call 10 fclose 0
x14786:	mov word [bp + 10], file_test$82	; 5: 199 70 10 208 57
x14791:	mov [bp + 12], bp	; 3: 137 110 12
x14794:	add bp, 10	; 3: 131 197 10
x14797:	jmp fclose	; 3: 233 186 55

file_test$82:	; PostCall 10

file_test$83:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$84:	; Parameter 10 outFilePtr 6
x14800:	mov ax, [bp + 8]	; 3: 139 70 8
x14803:	mov [bp + 16], ax	; 3: 137 70 16

file_test$85:	; Call 10 fclose 0
x14806:	mov word [bp + 10], file_test$86	; 5: 199 70 10 228 57
x14811:	mov [bp + 12], bp	; 3: 137 110 12
x14814:	add bp, 10	; 3: 131 197 10
x14817:	jmp fclose	; 3: 233 166 55

file_test$86:	; PostCall 10

file_test$87:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$88:	; Parameter 6 string_in2Etxt# 6
x14820:	mov word [bp + 12], @10743$string_in2Etxt#	; 5: 199 70 12 159 78

file_test$89:	; Parameter 6 string_r# 8
x14825:	mov word [bp + 14], @10744$string_r#	; 5: 199 70 14 166 78

file_test$90:	; Call 6 fopen 0
x14830:	mov word [bp + 6], file_test$91	; 5: 199 70 6 252 57
x14835:	mov [bp + 8], bp	; 3: 137 110 8
x14838:	add bp, 6	; 3: 131 197 6
x14841:	jmp fopen	; 3: 233 229 31

file_test$91:	; PostCall 6

file_test$92:	; GetReturnValue £temporary4837

file_test$93:	; Assign inFilePtr £temporary4837
x14844:	mov [bp + 6], bx	; 3: 137 94 6

file_test$94:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$95:	; Parameter 8 string_outY2Etxt# 6
x14847:	mov word [bp + 14], @10747$string_outY2Etxt#	; 5: 199 70 14 168 78

file_test$96:	; Parameter 8 string_w# 8
x14852:	mov word [bp + 16], @10748$string_w#	; 5: 199 70 16 177 78

file_test$97:	; Call 8 fopen 0
x14857:	mov word [bp + 8], file_test$98	; 5: 199 70 8 23 58
x14862:	mov [bp + 10], bp	; 3: 137 110 10
x14865:	add bp, 8	; 3: 131 197 8
x14868:	jmp fopen	; 3: 233 202 31

file_test$98:	; PostCall 8

file_test$99:	; GetReturnValue £temporary4838

file_test$100:	; Assign outFilePtr £temporary4838
x14871:	mov [bp + 8], bx	; 3: 137 94 8

file_test$101:	; NotEqual 113 inFilePtr 0
x14874:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x14878:	jne file_test$113	; 2: 117 59

file_test$102:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$103:	; Parameter 10 stderr 6
x14880:	mov ax, [stderr]	; 3: 161 136 77
x14883:	mov [bp + 16], ax	; 3: 137 70 16

file_test$104:	; Parameter 10 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x14886:	mov word [bp + 18], @10756$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 18 179 78

file_test$105:	; Parameter 10 string_inFilePtr20213D20NULL# 10
x14891:	mov word [bp + 20], @10757$string_inFilePtr20213D20NULL#	; 5: 199 70 20 225 78

file_test$106:	; Parameter 10 string_C3A5CUsers5Cstefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x14896:	mov word [bp + 22], @10758$string_C3A5CUsers5Cstefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 22 243 78

file_test$107:	; Parameter 10 34 14
x14901:	mov word [bp + 24], 34	; 5: 199 70 24 34 0

file_test$108:	; Call 10 fprintf 0
x14906:	mov word [bp + 10], file_test$109	; 5: 199 70 10 77 58
x14911:	mov [bp + 12], bp	; 3: 137 110 12
x14914:	add bp, 10	; 3: 131 197 10
x14917:	mov di, bp	; 2: 137 239
x14919:	add di, 6	; 3: 131 199 6
x14922:	jmp fprintf	; 3: 233 45 36

file_test$109:	; PostCall 10

file_test$110:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$111:	; Call 10 abort 0
x14925:	mov word [bp + 10], file_test$112	; 5: 199 70 10 91 58
x14930:	mov [bp + 12], bp	; 3: 137 110 12
x14933:	add bp, 10	; 3: 131 197 10
x14936:	jmp abort	; 3: 233 90 36

file_test$112:	; PostCall 10

file_test$113:	; NotEqual 125 outFilePtr 0
x14939:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x14943:	jne file_test$125	; 2: 117 59

file_test$114:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$115:	; Parameter 10 stderr 6
x14945:	mov ax, [stderr]	; 3: 161 136 77
x14948:	mov [bp + 16], ax	; 3: 137 70 16

file_test$116:	; Parameter 10 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x14951:	mov word [bp + 18], @10768$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 18 51 79

file_test$117:	; Parameter 10 string_outFilePtr20213D20NULL# 10
x14956:	mov word [bp + 20], @10769$string_outFilePtr20213D20NULL#	; 5: 199 70 20 97 79

file_test$118:	; Parameter 10 string_C3A5CUsers5Cstefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x14961:	mov word [bp + 22], @10770$string_C3A5CUsers5Cstefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 22 116 79

file_test$119:	; Parameter 10 35 14
x14966:	mov word [bp + 24], 35	; 5: 199 70 24 35 0

file_test$120:	; Call 10 fprintf 0
x14971:	mov word [bp + 10], file_test$121	; 5: 199 70 10 142 58
x14976:	mov [bp + 12], bp	; 3: 137 110 12
x14979:	add bp, 10	; 3: 131 197 10
x14982:	mov di, bp	; 2: 137 239
x14984:	add di, 6	; 3: 131 199 6
x14987:	jmp fprintf	; 3: 233 236 35

file_test$121:	; PostCall 10

file_test$122:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$123:	; Call 10 abort 0
x14990:	mov word [bp + 10], file_test$124	; 5: 199 70 10 156 58
x14995:	mov [bp + 12], bp	; 3: 137 110 12
x14998:	add bp, 10	; 3: 131 197 10
x15001:	jmp abort	; 3: 233 25 36

file_test$124:	; PostCall 10

file_test$125:	; Assign size 0
x15004:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

file_test$126:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$127:	; Parameter 14 inFilePtr 6
x15009:	mov ax, [bp + 6]	; 3: 139 70 6
x15012:	mov [bp + 20], ax	; 3: 137 70 20

file_test$128:	; Parameter 14 string_25i# 8
x15015:	mov word [bp + 22], @10779$string_25i#	; 5: 199 70 22 180 79

file_test$129:	; address £temporary4847 size
x15020:	mov si, bp	; 2: 137 238
x15022:	add si, 10	; 3: 131 198 10

file_test$130:	; Parameter 14 £temporary4847 10
x15025:	mov [bp + 24], si	; 3: 137 118 24

file_test$131:	; Call 14 fscanf 0
x15028:	mov word [bp + 14], file_test$132	; 5: 199 70 14 199 58
x15033:	mov [bp + 16], bp	; 3: 137 110 16
x15036:	add bp, 14	; 3: 131 197 14
x15039:	mov di, bp	; 2: 137 239
x15041:	add di, 2	; 3: 131 199 2
x15044:	jmp fscanf	; 3: 233 148 36

file_test$132:	; PostCall 14

file_test$133:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$134:	; Parameter 14 string_size2025i0A# 6
x15047:	mov word [bp + 20], @10782$string_size2025i0A#	; 5: 199 70 20 183 79

file_test$135:	; Parameter 14 size 8
x15052:	mov ax, [bp + 10]	; 3: 139 70 10
x15055:	mov [bp + 22], ax	; 3: 137 70 22

file_test$136:	; Call 14 printf 0
x15058:	mov word [bp + 14], file_test$137	; 5: 199 70 14 229 58
x15063:	mov [bp + 16], bp	; 3: 137 110 16
x15066:	add bp, 14	; 3: 131 197 14
x15069:	mov di, bp	; 2: 137 239
x15071:	add di, 2	; 3: 131 199 2
x15074:	jmp printf	; 3: 233 31 210

file_test$137:	; PostCall 14

file_test$138:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$139:	; Parameter 14 outFilePtr 6
x15077:	mov ax, [bp + 8]	; 3: 139 70 8
x15080:	mov [bp + 20], ax	; 3: 137 70 20

file_test$140:	; Parameter 14 string_Y20size2025i0A# 8
x15083:	mov word [bp + 22], @10784$string_Y20size2025i0A#	; 5: 199 70 22 192 79

file_test$141:	; Parameter 14 size 10
x15088:	mov ax, [bp + 10]	; 3: 139 70 10
x15091:	mov [bp + 24], ax	; 3: 137 70 24

file_test$142:	; Call 14 fprintf 0
x15094:	mov word [bp + 14], file_test$143	; 5: 199 70 14 9 59
x15099:	mov [bp + 16], bp	; 3: 137 110 16
x15102:	add bp, 14	; 3: 131 197 14
x15105:	mov di, bp	; 2: 137 239
x15107:	add di, 2	; 3: 131 199 2
x15110:	jmp fprintf	; 3: 233 113 35

file_test$143:	; PostCall 14

file_test$144:	; Assign index 0
x15113:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

file_test$145:	; SignedGreaterThanEqual 178 index size
x15118:	mov ax, [bp + 10]	; 3: 139 70 10
x15121:	cmp [bp + 12], ax	; 3: 57 70 12
x15124:	jge file_test$178	; 4: 15 141 144 0

file_test$146:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$147:	; Parameter 22 inFilePtr 6
x15128:	mov ax, [bp + 6]	; 3: 139 70 6
x15131:	mov [bp + 28], ax	; 3: 137 70 28

file_test$148:	; Parameter 22 string_25lf# 8
x15134:	mov word [bp + 30], @10793$string_25lf#	; 5: 199 70 30 203 79

file_test$149:	; address £temporary4853 value
x15139:	mov si, bp	; 2: 137 238
x15141:	add si, 14	; 3: 131 198 14

file_test$150:	; Parameter 22 £temporary4853 10
x15144:	mov [bp + 32], si	; 3: 137 118 32

file_test$151:	; Call 22 fscanf 0
x15147:	mov word [bp + 22], file_test$152	; 5: 199 70 22 62 59
x15152:	mov [bp + 24], bp	; 3: 137 110 24
x15155:	add bp, 22	; 3: 131 197 22
x15158:	mov di, bp	; 2: 137 239
x15160:	add di, 2	; 3: 131 199 2
x15163:	jmp fscanf	; 3: 233 29 36

file_test$152:	; PostCall 22

file_test$153:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$154:	; Parameter 22 string_Y12025f0A# 6
x15166:	mov word [bp + 28], @10796$string_Y12025f0A#	; 5: 199 70 28 207 79

file_test$155:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$156:	; PushFloat value
x15171:	fld qword [bp + 14]	; 3: 221 70 14

file_test$157:	; Parameter 22 value 14
x15174:	fstp qword [bp + 36]	; 3: 221 94 36

file_test$158:	; Call 22 sqrt 8
x15177:	mov word [bp + 30], file_test$159	; 5: 199 70 30 87 59
x15182:	mov [bp + 32], bp	; 3: 137 110 32
x15185:	add bp, 30	; 3: 131 197 30
x15188:	jmp sqrt	; 3: 233 181 243

file_test$159:	; PostCall 22

file_test$160:	; GetReturnValue £temporary4855

file_test$161:	; Parameter 22 £temporary4855 8
x15191:	fstp qword [bp + 30]	; 3: 221 94 30

file_test$162:	; Call 22 printf 0
x15194:	mov word [bp + 22], file_test$163	; 5: 199 70 22 109 59
x15199:	mov [bp + 24], bp	; 3: 137 110 24
x15202:	add bp, 22	; 3: 131 197 22
x15205:	mov di, bp	; 2: 137 239
x15207:	add di, 8	; 3: 131 199 8
x15210:	jmp printf	; 3: 233 151 209

file_test$163:	; PostCall 22

file_test$164:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$165:	; Parameter 22 outFilePtr 6
x15213:	mov ax, [bp + 8]	; 3: 139 70 8
x15216:	mov [bp + 28], ax	; 3: 137 70 28

file_test$166:	; Parameter 22 string_Y22025f0A# 8
x15219:	mov word [bp + 30], @10799$string_Y22025f0A#	; 5: 199 70 30 214 79

file_test$167:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$168:	; PushFloat value
x15224:	fld qword [bp + 14]	; 3: 221 70 14

file_test$169:	; Parameter 22 value 16
x15227:	fstp qword [bp + 38]	; 3: 221 94 38

file_test$170:	; Call 22 sqrt 10
x15230:	mov word [bp + 32], file_test$171	; 5: 199 70 32 140 59
x15235:	mov [bp + 34], bp	; 3: 137 110 34
x15238:	add bp, 32	; 3: 131 197 32
x15241:	jmp sqrt	; 3: 233 128 243

file_test$171:	; PostCall 22

file_test$172:	; GetReturnValue £temporary4857

file_test$173:	; Parameter 22 £temporary4857 10
x15244:	fstp qword [bp + 32]	; 3: 221 94 32

file_test$174:	; Call 22 fprintf 0
x15247:	mov word [bp + 22], file_test$175	; 5: 199 70 22 162 59
x15252:	mov [bp + 24], bp	; 3: 137 110 24
x15255:	add bp, 22	; 3: 131 197 22
x15258:	mov di, bp	; 2: 137 239
x15260:	add di, 8	; 3: 131 199 8
x15263:	jmp fprintf	; 3: 233 216 34

file_test$175:	; PostCall 22

file_test$176:	; Increment index
x15266:	inc word [bp + 12]	; 3: 255 70 12

file_test$177:	; Goto 145
x15269:	jmp file_test$145	; 3: 233 102 255

file_test$178:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$179:	; Parameter 14 string_0A# 6
x15272:	mov word [bp + 20], @10802$string_0A#	; 5: 199 70 20 221 79

file_test$180:	; Call 14 printf 0
x15277:	mov word [bp + 14], file_test$181	; 5: 199 70 14 189 59
x15282:	mov [bp + 16], bp	; 3: 137 110 16
x15285:	add bp, 14	; 3: 131 197 14
x15288:	mov di, bp	; 2: 137 239
x15290:	jmp printf	; 3: 233 71 209

file_test$181:	; PostCall 14

file_test$182:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$183:	; Parameter 10 inFilePtr 6
x15293:	mov ax, [bp + 6]	; 3: 139 70 6
x15296:	mov [bp + 16], ax	; 3: 137 70 16

file_test$184:	; Call 10 fclose 0
x15299:	mov word [bp + 10], file_test$185	; 5: 199 70 10 209 59
x15304:	mov [bp + 12], bp	; 3: 137 110 12
x15307:	add bp, 10	; 3: 131 197 10
x15310:	jmp fclose	; 3: 233 185 53

file_test$185:	; PostCall 10

file_test$186:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$187:	; Parameter 10 outFilePtr 6
x15313:	mov ax, [bp + 8]	; 3: 139 70 8
x15316:	mov [bp + 16], ax	; 3: 137 70 16

file_test$188:	; Call 10 fclose 0
x15319:	mov word [bp + 10], file_test$189	; 5: 199 70 10 229 59
x15324:	mov [bp + 12], bp	; 3: 137 110 12
x15327:	add bp, 10	; 3: 131 197 10
x15330:	jmp fclose	; 3: 233 165 53

file_test$189:	; PostCall 10

file_test$190:	; Assign sourceFile string_Y#
x15333:	mov word [bp + 6], @10806$string_Y#	; 5: 199 70 6 223 79

file_test$191:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$192:	; Parameter 8 sourceFile 6
x15338:	mov ax, [bp + 6]	; 3: 139 70 6
x15341:	mov [bp + 14], ax	; 3: 137 70 14

file_test$193:	; Call 8 remove 0
x15344:	mov word [bp + 8], file_test$194	; 5: 199 70 8 254 59
x15349:	mov [bp + 10], bp	; 3: 137 110 10
x15352:	add bp, 8	; 3: 131 197 8
x15355:	jmp remove	; 3: 233 79 54

file_test$194:	; PostCall 8

file_test$195:	; GetReturnValue £temporary4862

file_test$196:	; NotEqual 203 £temporary4862 0
x15358:	cmp bx, 0	; 3: 131 251 0
x15361:	jne file_test$203	; 2: 117 32

file_test$197:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$198:	; Parameter 8 string_2225s2220has20been20removed0A# 6
x15363:	mov word [bp + 14], @10812$string_2225s2220has20been20removed0A#	; 5: 199 70 14 225 79

file_test$199:	; Parameter 8 sourceFile 8
x15368:	mov ax, [bp + 6]	; 3: 139 70 6
x15371:	mov [bp + 16], ax	; 3: 137 70 16

file_test$200:	; Call 8 printf 0
x15374:	mov word [bp + 8], file_test$201	; 5: 199 70 8 33 60
x15379:	mov [bp + 10], bp	; 3: 137 110 10
x15382:	add bp, 8	; 3: 131 197 8
x15385:	mov di, bp	; 2: 137 239
x15387:	add di, 2	; 3: 131 199 2
x15390:	jmp printf	; 3: 233 227 208

file_test$201:	; PostCall 8

file_test$202:	; Goto 215
x15393:	jmp file_test$215	; 2: 235 59

file_test$203:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$204:	; Parameter 8 string_Error202225s222025i3A2025s2E0A# 6
x15395:	mov word [bp + 14], @10814$string_Error202225s222025i3A2025s2E0A#	; 5: 199 70 14 248 79

file_test$205:	; Parameter 8 sourceFile 8
x15400:	mov ax, [bp + 6]	; 3: 139 70 6
x15403:	mov [bp + 16], ax	; 3: 137 70 16

file_test$206:	; Parameter 8 errno 10
x15406:	mov ax, [errno]	; 3: 161 230 10
x15409:	mov [bp + 18], ax	; 3: 137 70 18

file_test$207:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$208:	; Parameter 8 errno 18
x15412:	mov ax, [errno]	; 3: 161 230 10
x15415:	mov [bp + 26], ax	; 3: 137 70 26

file_test$209:	; Call 8 strerror 12
x15418:	mov word [bp + 20], file_test$210	; 5: 199 70 20 72 60
x15423:	mov [bp + 22], bp	; 3: 137 110 22
x15426:	add bp, 20	; 3: 131 197 20
x15429:	jmp strerror	; 3: 233 211 247

file_test$210:	; PostCall 8

file_test$211:	; GetReturnValue £temporary4865

file_test$212:	; Parameter 8 £temporary4865 12
x15432:	mov [bp + 20], bx	; 3: 137 94 20

file_test$213:	; Call 8 printf 0
x15435:	mov word [bp + 8], file_test$214	; 5: 199 70 8 94 60
x15440:	mov [bp + 10], bp	; 3: 137 110 10
x15443:	add bp, 8	; 3: 131 197 8
x15446:	mov di, bp	; 2: 137 239
x15448:	add di, 6	; 3: 131 199 6
x15451:	jmp printf	; 3: 233 166 208

file_test$214:	; PostCall 8

file_test$215:	; Assign sourceFile string_X#
x15454:	mov word [bp + 6], @10817$string_X#	; 5: 199 70 6 12 80

file_test$216:	; Assign targetFile string_Y#
x15459:	mov word [bp + 8], @10819$string_Y#	; 5: 199 70 8 14 80

file_test$217:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$218:	; Parameter 10 sourceFile 6
x15464:	mov ax, [bp + 6]	; 3: 139 70 6
x15467:	mov [bp + 16], ax	; 3: 137 70 16

file_test$219:	; Parameter 10 string_w# 8
x15470:	mov word [bp + 18], @10821$string_w#	; 5: 199 70 18 16 80

file_test$220:	; Call 10 fopen 0
x15475:	mov word [bp + 10], file_test$221	; 5: 199 70 10 129 60
x15480:	mov [bp + 12], bp	; 3: 137 110 12
x15483:	add bp, 10	; 3: 131 197 10
x15486:	jmp fopen	; 3: 233 96 29

file_test$221:	; PostCall 10

file_test$222:	; GetReturnValue £temporary4867

file_test$223:	; Assign filePtr £temporary4867
x15489:	mov [bp + 10], bx	; 3: 137 94 10

file_test$224:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$225:	; Parameter 12 filePtr 6
x15492:	mov ax, [bp + 10]	; 3: 139 70 10
x15495:	mov [bp + 18], ax	; 3: 137 70 18

file_test$226:	; Parameter 12 string_Hello20X# 8
x15498:	mov word [bp + 20], @10824$string_Hello20X#	; 5: 199 70 20 18 80

file_test$227:	; Call 12 fprintf 0
x15503:	mov word [bp + 12], file_test$228	; 5: 199 70 12 159 60
x15508:	mov [bp + 14], bp	; 3: 137 110 14
x15511:	add bp, 12	; 3: 131 197 12
x15514:	mov di, bp	; 2: 137 239
x15516:	jmp fprintf	; 3: 233 219 33

file_test$228:	; PostCall 12

file_test$229:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$230:	; Parameter 12 filePtr 6
x15519:	mov ax, [bp + 10]	; 3: 139 70 10
x15522:	mov [bp + 18], ax	; 3: 137 70 18

file_test$231:	; Call 12 fclose 0
x15525:	mov word [bp + 12], file_test$232	; 5: 199 70 12 179 60
x15530:	mov [bp + 14], bp	; 3: 137 110 14
x15533:	add bp, 12	; 3: 131 197 12
x15536:	jmp fclose	; 3: 233 215 52

file_test$232:	; PostCall 12

file_test$233:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$234:	; Parameter 12 sourceFile 6
x15539:	mov ax, [bp + 6]	; 3: 139 70 6
x15542:	mov [bp + 18], ax	; 3: 137 70 18

file_test$235:	; Parameter 12 targetFile 8
x15545:	mov ax, [bp + 8]	; 3: 139 70 8
x15548:	mov [bp + 20], ax	; 3: 137 70 20

file_test$236:	; Call 12 rename 0
x15551:	mov word [bp + 12], file_test$237	; 5: 199 70 12 205 60
x15556:	mov [bp + 14], bp	; 3: 137 110 14
x15559:	add bp, 12	; 3: 131 197 12
x15562:	jmp rename	; 3: 233 173 53

file_test$237:	; PostCall 12

file_test$238:	; GetReturnValue £temporary4870

file_test$239:	; NotEqual 247 £temporary4870 0
x15565:	cmp bx, 0	; 3: 131 251 0
x15568:	jne file_test$247	; 2: 117 38

file_test$240:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$241:	; Parameter 12 string_2225s2220has20been20renamed20to202225s222E0A# 6
x15570:	mov word [bp + 18], @10831$string_2225s2220has20been20renamed20to202225s222E0A#	; 5: 199 70 18 26 80

file_test$242:	; Parameter 12 sourceFile 8
x15575:	mov ax, [bp + 6]	; 3: 139 70 6
x15578:	mov [bp + 20], ax	; 3: 137 70 20

file_test$243:	; Parameter 12 targetFile 10
x15581:	mov ax, [bp + 8]	; 3: 139 70 8
x15584:	mov [bp + 22], ax	; 3: 137 70 22

file_test$244:	; Call 12 printf 0
x15587:	mov word [bp + 12], file_test$245	; 5: 199 70 12 246 60
x15592:	mov [bp + 14], bp	; 3: 137 110 14
x15595:	add bp, 12	; 3: 131 197 12
x15598:	mov di, bp	; 2: 137 239
x15600:	add di, 4	; 3: 131 199 4
x15603:	jmp printf	; 3: 233 14 208

file_test$245:	; PostCall 12

file_test$246:	; Goto 260
x15606:	jmp file_test$260	; 2: 235 65

file_test$247:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$248:	; Parameter 12 string_Error202225s22202225s222025i3A2025s2E0A# 6
x15608:	mov word [bp + 18], @10833$string_Error202225s22202225s222025i3A2025s2E0A#	; 5: 199 70 18 58 80

file_test$249:	; Parameter 12 sourceFile 8
x15613:	mov ax, [bp + 6]	; 3: 139 70 6
x15616:	mov [bp + 20], ax	; 3: 137 70 20

file_test$250:	; Parameter 12 targetFile 10
x15619:	mov ax, [bp + 8]	; 3: 139 70 8
x15622:	mov [bp + 22], ax	; 3: 137 70 22

file_test$251:	; Parameter 12 errno 12
x15625:	mov ax, [errno]	; 3: 161 230 10
x15628:	mov [bp + 24], ax	; 3: 137 70 24

file_test$252:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$253:	; Parameter 12 errno 20
x15631:	mov ax, [errno]	; 3: 161 230 10
x15634:	mov [bp + 32], ax	; 3: 137 70 32

file_test$254:	; Call 12 strerror 14
x15637:	mov word [bp + 26], file_test$255	; 5: 199 70 26 35 61
x15642:	mov [bp + 28], bp	; 3: 137 110 28
x15645:	add bp, 26	; 3: 131 197 26
x15648:	jmp strerror	; 3: 233 248 246

file_test$255:	; PostCall 12

file_test$256:	; GetReturnValue £temporary4873

file_test$257:	; Parameter 12 £temporary4873 14
x15651:	mov [bp + 26], bx	; 3: 137 94 26

file_test$258:	; Call 12 printf 0
x15654:	mov word [bp + 12], file_test$259	; 5: 199 70 12 57 61
x15659:	mov [bp + 14], bp	; 3: 137 110 14
x15662:	add bp, 12	; 3: 131 197 12
x15665:	mov di, bp	; 2: 137 239
x15667:	add di, 8	; 3: 131 199 8
x15670:	jmp printf	; 3: 233 203 207

file_test$259:	; PostCall 12

file_test$260:	; Assign sourceFile string_X2#
x15673:	mov word [bp + 6], @10836$string_X2#	; 5: 199 70 6 83 80

file_test$261:	; Assign targetFile string_Y2#
x15678:	mov word [bp + 8], @10838$string_Y2#	; 5: 199 70 8 86 80

file_test$262:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$263:	; Parameter 10 sourceFile 6
x15683:	mov ax, [bp + 6]	; 3: 139 70 6
x15686:	mov [bp + 16], ax	; 3: 137 70 16

file_test$264:	; Parameter 10 targetFile 8
x15689:	mov ax, [bp + 8]	; 3: 139 70 8
x15692:	mov [bp + 18], ax	; 3: 137 70 18

file_test$265:	; Call 10 rename 0
x15695:	mov word [bp + 10], file_test$266	; 5: 199 70 10 93 61
x15700:	mov [bp + 12], bp	; 3: 137 110 12
x15703:	add bp, 10	; 3: 131 197 10
x15706:	jmp rename	; 3: 233 29 53

file_test$266:	; PostCall 10

file_test$267:	; GetReturnValue £temporary4875

file_test$268:	; NotEqual 276 £temporary4875 0
x15709:	cmp bx, 0	; 3: 131 251 0
x15712:	jne file_test$276	; 2: 117 38

file_test$269:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$270:	; Parameter 10 string_2225s2220has20been20renamed20to202225s222E0A# 6
x15714:	mov word [bp + 16], @10844$string_2225s2220has20been20renamed20to202225s222E0A#	; 5: 199 70 16 89 80

file_test$271:	; Parameter 10 sourceFile 8
x15719:	mov ax, [bp + 6]	; 3: 139 70 6
x15722:	mov [bp + 18], ax	; 3: 137 70 18

file_test$272:	; Parameter 10 targetFile 10
x15725:	mov ax, [bp + 8]	; 3: 139 70 8
x15728:	mov [bp + 20], ax	; 3: 137 70 20

file_test$273:	; Call 10 printf 0
x15731:	mov word [bp + 10], file_test$274	; 5: 199 70 10 134 61
x15736:	mov [bp + 12], bp	; 3: 137 110 12
x15739:	add bp, 10	; 3: 131 197 10
x15742:	mov di, bp	; 2: 137 239
x15744:	add di, 4	; 3: 131 199 4
x15747:	jmp printf	; 3: 233 126 207

file_test$274:	; PostCall 10

file_test$275:	; Goto 289
x15750:	jmp file_test$289	; 2: 235 65

file_test$276:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$277:	; Parameter 10 string_Error202225s22202225s222025i3A2025s2E0A# 6
x15752:	mov word [bp + 16], @10846$string_Error202225s22202225s222025i3A2025s2E0A#	; 5: 199 70 16 121 80

file_test$278:	; Parameter 10 sourceFile 8
x15757:	mov ax, [bp + 6]	; 3: 139 70 6
x15760:	mov [bp + 18], ax	; 3: 137 70 18

file_test$279:	; Parameter 10 targetFile 10
x15763:	mov ax, [bp + 8]	; 3: 139 70 8
x15766:	mov [bp + 20], ax	; 3: 137 70 20

file_test$280:	; Parameter 10 errno 12
x15769:	mov ax, [errno]	; 3: 161 230 10
x15772:	mov [bp + 22], ax	; 3: 137 70 22

file_test$281:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$282:	; Parameter 10 errno 20
x15775:	mov ax, [errno]	; 3: 161 230 10
x15778:	mov [bp + 30], ax	; 3: 137 70 30

file_test$283:	; Call 10 strerror 14
x15781:	mov word [bp + 24], file_test$284	; 5: 199 70 24 179 61
x15786:	mov [bp + 26], bp	; 3: 137 110 26
x15789:	add bp, 24	; 3: 131 197 24
x15792:	jmp strerror	; 3: 233 104 246

file_test$284:	; PostCall 10

file_test$285:	; GetReturnValue £temporary4878

file_test$286:	; Parameter 10 £temporary4878 14
x15795:	mov [bp + 24], bx	; 3: 137 94 24

file_test$287:	; Call 10 printf 0
x15798:	mov word [bp + 10], file_test$288	; 5: 199 70 10 201 61
x15803:	mov [bp + 12], bp	; 3: 137 110 12
x15806:	add bp, 10	; 3: 131 197 10
x15809:	mov di, bp	; 2: 137 239
x15811:	add di, 8	; 3: 131 199 8
x15814:	jmp printf	; 3: 233 59 207

file_test$288:	; PostCall 10

file_test$289:	; Assign targetFile string_Z#
x15817:	mov word [bp + 6], @10849$string_Z#	; 5: 199 70 6 146 80

file_test$290:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$291:	; Parameter 8 targetFile 6
x15822:	mov ax, [bp + 6]	; 3: 139 70 6
x15825:	mov [bp + 14], ax	; 3: 137 70 14

file_test$292:	; Parameter 8 string_w# 8
x15828:	mov word [bp + 16], @10851$string_w#	; 5: 199 70 16 148 80

file_test$293:	; Call 8 fopen 0
x15833:	mov word [bp + 8], file_test$294	; 5: 199 70 8 231 61
x15838:	mov [bp + 10], bp	; 3: 137 110 10
x15841:	add bp, 8	; 3: 131 197 8
x15844:	jmp fopen	; 3: 233 250 27

file_test$294:	; PostCall 8

file_test$295:	; GetReturnValue £temporary4880

file_test$296:	; Assign filePtr £temporary4880
x15847:	mov [bp + 8], bx	; 3: 137 94 8

file_test$297:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$298:	; Parameter 10 filePtr 6
x15850:	mov ax, [bp + 8]	; 3: 139 70 8
x15853:	mov [bp + 16], ax	; 3: 137 70 16

file_test$299:	; Parameter 10 string_Hello20Z# 8
x15856:	mov word [bp + 18], @10854$string_Hello20Z#	; 5: 199 70 18 150 80

file_test$300:	; Call 10 fprintf 0
x15861:	mov word [bp + 10], file_test$301	; 5: 199 70 10 5 62
x15866:	mov [bp + 12], bp	; 3: 137 110 12
x15869:	add bp, 10	; 3: 131 197 10
x15872:	mov di, bp	; 2: 137 239
x15874:	jmp fprintf	; 3: 233 117 32

file_test$301:	; PostCall 10

file_test$302:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$303:	; Parameter 10 filePtr 6
x15877:	mov ax, [bp + 8]	; 3: 139 70 8
x15880:	mov [bp + 16], ax	; 3: 137 70 16

file_test$304:	; Call 10 fclose 0
x15883:	mov word [bp + 10], file_test$305	; 5: 199 70 10 25 62
x15888:	mov [bp + 12], bp	; 3: 137 110 12
x15891:	add bp, 10	; 3: 131 197 10
x15894:	jmp fclose	; 3: 233 113 51

file_test$305:	; PostCall 10

file_test$306:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$307:	; Parameter 10 targetFile 6
x15897:	mov ax, [bp + 6]	; 3: 139 70 6
x15900:	mov [bp + 16], ax	; 3: 137 70 16

file_test$308:	; Call 10 remove 0
x15903:	mov word [bp + 10], file_test$309	; 5: 199 70 10 45 62
x15908:	mov [bp + 12], bp	; 3: 137 110 12
x15911:	add bp, 10	; 3: 131 197 10
x15914:	jmp remove	; 3: 233 32 52

file_test$309:	; PostCall 10

file_test$310:	; GetReturnValue £temporary4883

file_test$311:	; NotEqual 318 £temporary4883 0
x15917:	cmp bx, 0	; 3: 131 251 0
x15920:	jne file_test$318	; 2: 117 32

file_test$312:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$313:	; Parameter 10 string_2225s2220has20been20removed2E0A# 6
x15922:	mov word [bp + 16], @10861$string_2225s2220has20been20removed2E0A#	; 5: 199 70 16 158 80

file_test$314:	; Parameter 10 targetFile 8
x15927:	mov ax, [bp + 6]	; 3: 139 70 6
x15930:	mov [bp + 18], ax	; 3: 137 70 18

file_test$315:	; Call 10 printf 0
x15933:	mov word [bp + 10], file_test$316	; 5: 199 70 10 80 62
x15938:	mov [bp + 12], bp	; 3: 137 110 12
x15941:	add bp, 10	; 3: 131 197 10
x15944:	mov di, bp	; 2: 137 239
x15946:	add di, 2	; 3: 131 199 2
x15949:	jmp printf	; 3: 233 180 206

file_test$316:	; PostCall 10

file_test$317:	; Goto 330
x15952:	jmp file_test$330	; 2: 235 59

file_test$318:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$319:	; Parameter 10 string_Error202225s222025i3A2025s2E0A# 6
x15954:	mov word [bp + 16], @10863$string_Error202225s222025i3A2025s2E0A#	; 5: 199 70 16 182 80

file_test$320:	; Parameter 10 targetFile 8
x15959:	mov ax, [bp + 6]	; 3: 139 70 6
x15962:	mov [bp + 18], ax	; 3: 137 70 18

file_test$321:	; Parameter 10 errno 10
x15965:	mov ax, [errno]	; 3: 161 230 10
x15968:	mov [bp + 20], ax	; 3: 137 70 20

file_test$322:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$323:	; Parameter 10 errno 18
x15971:	mov ax, [errno]	; 3: 161 230 10
x15974:	mov [bp + 28], ax	; 3: 137 70 28

file_test$324:	; Call 10 strerror 12
x15977:	mov word [bp + 22], file_test$325	; 5: 199 70 22 119 62
x15982:	mov [bp + 24], bp	; 3: 137 110 24
x15985:	add bp, 22	; 3: 131 197 22
x15988:	jmp strerror	; 3: 233 164 245

file_test$325:	; PostCall 10

file_test$326:	; GetReturnValue £temporary4886

file_test$327:	; Parameter 10 £temporary4886 12
x15991:	mov [bp + 22], bx	; 3: 137 94 22

file_test$328:	; Call 10 printf 0
x15994:	mov word [bp + 10], file_test$329	; 5: 199 70 10 141 62
x15999:	mov [bp + 12], bp	; 3: 137 110 12
x16002:	add bp, 10	; 3: 131 197 10
x16005:	mov di, bp	; 2: 137 239
x16007:	add di, 6	; 3: 131 199 6
x16010:	jmp printf	; 3: 233 119 206

file_test$329:	; PostCall 10

file_test$330:	; Assign targetFile string_Z2#
x16013:	mov word [bp + 6], @10866$string_Z2#	; 5: 199 70 6 202 80

file_test$331:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$332:	; Parameter 8 targetFile 6
x16018:	mov ax, [bp + 6]	; 3: 139 70 6
x16021:	mov [bp + 14], ax	; 3: 137 70 14

file_test$333:	; Call 8 remove 0
x16024:	mov word [bp + 8], file_test$334	; 5: 199 70 8 166 62
x16029:	mov [bp + 10], bp	; 3: 137 110 10
x16032:	add bp, 8	; 3: 131 197 8
x16035:	jmp remove	; 3: 233 167 51

file_test$334:	; PostCall 8

file_test$335:	; GetReturnValue £temporary4888

file_test$336:	; NotEqual 343 £temporary4888 0
x16038:	cmp bx, 0	; 3: 131 251 0
x16041:	jne file_test$343	; 2: 117 32

file_test$337:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$338:	; Parameter 8 string_2225s2220has20been20removed2E0A# 6
x16043:	mov word [bp + 14], @10872$string_2225s2220has20been20removed2E0A#	; 5: 199 70 14 205 80

file_test$339:	; Parameter 8 targetFile 8
x16048:	mov ax, [bp + 6]	; 3: 139 70 6
x16051:	mov [bp + 16], ax	; 3: 137 70 16

file_test$340:	; Call 8 printf 0
x16054:	mov word [bp + 8], file_test$341	; 5: 199 70 8 201 62
x16059:	mov [bp + 10], bp	; 3: 137 110 10
x16062:	add bp, 8	; 3: 131 197 8
x16065:	mov di, bp	; 2: 137 239
x16067:	add di, 2	; 3: 131 199 2
x16070:	jmp printf	; 3: 233 59 206

file_test$341:	; PostCall 8

file_test$342:	; Goto 355
x16073:	jmp file_test$355	; 2: 235 59

file_test$343:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$344:	; Parameter 8 string_Error202225s222025i3A2025s2E0A# 6
x16075:	mov word [bp + 14], @10874$string_Error202225s222025i3A2025s2E0A#	; 5: 199 70 14 229 80

file_test$345:	; Parameter 8 targetFile 8
x16080:	mov ax, [bp + 6]	; 3: 139 70 6
x16083:	mov [bp + 16], ax	; 3: 137 70 16

file_test$346:	; Parameter 8 errno 10
x16086:	mov ax, [errno]	; 3: 161 230 10
x16089:	mov [bp + 18], ax	; 3: 137 70 18

file_test$347:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$348:	; Parameter 8 errno 18
x16092:	mov ax, [errno]	; 3: 161 230 10
x16095:	mov [bp + 26], ax	; 3: 137 70 26

file_test$349:	; Call 8 strerror 12
x16098:	mov word [bp + 20], file_test$350	; 5: 199 70 20 240 62
x16103:	mov [bp + 22], bp	; 3: 137 110 22
x16106:	add bp, 20	; 3: 131 197 20
x16109:	jmp strerror	; 3: 233 43 245

file_test$350:	; PostCall 8

file_test$351:	; GetReturnValue £temporary4891

file_test$352:	; Parameter 8 £temporary4891 12
x16112:	mov [bp + 20], bx	; 3: 137 94 20

file_test$353:	; Call 8 printf 0
x16115:	mov word [bp + 8], file_test$354	; 5: 199 70 8 6 63
x16120:	mov [bp + 10], bp	; 3: 137 110 10
x16123:	add bp, 8	; 3: 131 197 8
x16126:	mov di, bp	; 2: 137 239
x16128:	add di, 6	; 3: 131 199 6
x16131:	jmp printf	; 3: 233 254 205

file_test$354:	; PostCall 8

file_test$355:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$356:	; Parameter 6 string_PBook2Etxt# 6
x16134:	mov word [bp + 12], @10877$string_PBook2Etxt#	; 5: 199 70 12 249 80

file_test$357:	; Parameter 6 string_r# 8
x16139:	mov word [bp + 14], @10878$string_r#	; 5: 199 70 14 3 81

file_test$358:	; Call 6 fopen 0
x16144:	mov word [bp + 6], file_test$359	; 5: 199 70 6 30 63
x16149:	mov [bp + 8], bp	; 3: 137 110 8
x16152:	add bp, 6	; 3: 131 197 6
x16155:	jmp fopen	; 3: 233 195 26

file_test$359:	; PostCall 6

file_test$360:	; GetReturnValue £temporary4893

file_test$361:	; Assign inFilePtr £temporary4893
x16158:	mov [bp + 6], bx	; 3: 137 94 6

file_test$362:	; NotEqual 374 inFilePtr 0
x16161:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x16165:	jne file_test$374	; 2: 117 59

file_test$363:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$364:	; Parameter 8 stderr 6
x16167:	mov ax, [stderr]	; 3: 161 136 77
x16170:	mov [bp + 14], ax	; 3: 137 70 14

file_test$365:	; Parameter 8 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x16173:	mov word [bp + 16], @10886$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 16 5 81

file_test$366:	; Parameter 8 string_inFilePtr20213D20NULL# 10
x16178:	mov word [bp + 18], @10887$string_inFilePtr20213D20NULL#	; 5: 199 70 18 51 81

file_test$367:	; Parameter 8 string_C3A5CUsers5Cstefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x16183:	mov word [bp + 20], @10888$string_C3A5CUsers5Cstefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 20 69 81

file_test$368:	; Parameter 8 119 14
x16188:	mov word [bp + 22], 119	; 5: 199 70 22 119 0

file_test$369:	; Call 8 fprintf 0
x16193:	mov word [bp + 8], file_test$370	; 5: 199 70 8 84 63
x16198:	mov [bp + 10], bp	; 3: 137 110 10
x16201:	add bp, 8	; 3: 131 197 8
x16204:	mov di, bp	; 2: 137 239
x16206:	add di, 6	; 3: 131 199 6
x16209:	jmp fprintf	; 3: 233 38 31

file_test$370:	; PostCall 8

file_test$371:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$372:	; Call 8 abort 0
x16212:	mov word [bp + 8], file_test$373	; 5: 199 70 8 98 63
x16217:	mov [bp + 10], bp	; 3: 137 110 10
x16220:	add bp, 8	; 3: 131 197 8
x16223:	jmp abort	; 3: 233 83 31

file_test$373:	; PostCall 8

file_test$374:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$375:	; Parameter 8 string_0A252D24s20252D24s0A# 6
x16226:	mov word [bp + 14], @10893$string_0A252D24s20252D24s0A#	; 5: 199 70 14 133 81

file_test$376:	; Parameter 8 string_Name# 8
x16231:	mov word [bp + 16], @10894$string_Name#	; 5: 199 70 16 147 81

file_test$377:	; Parameter 8 string_Phone# 10
x16236:	mov word [bp + 18], @10895$string_Phone#	; 5: 199 70 18 152 81

file_test$378:	; Call 8 printf 0
x16241:	mov word [bp + 8], file_test$379	; 5: 199 70 8 132 63
x16246:	mov [bp + 10], bp	; 3: 137 110 10
x16249:	add bp, 8	; 3: 131 197 8
x16252:	mov di, bp	; 2: 137 239
x16254:	add di, 4	; 3: 131 199 4
x16257:	jmp printf	; 3: 233 128 205

file_test$379:	; PostCall 8

file_test$380:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$381:	; Parameter 8 string_252D24s20252D24s0A# 6
x16260:	mov word [bp + 14], @10897$string_252D24s20252D24s0A#	; 5: 199 70 14 158 81

file_test$382:	; Parameter 8 string_3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D# 8
x16265:	mov word [bp + 16], @10898$string_3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D#	; 5: 199 70 16 171 81

file_test$383:	; Parameter 8 string_3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D# 10
x16270:	mov word [bp + 18], @10899$string_3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D#	; 5: 199 70 18 196 81

file_test$384:	; Call 8 printf 0
x16275:	mov word [bp + 8], file_test$385	; 5: 199 70 8 166 63
x16280:	mov [bp + 10], bp	; 3: 137 110 10
x16283:	add bp, 8	; 3: 131 197 8
x16286:	mov di, bp	; 2: 137 239
x16288:	add di, 4	; 3: 131 199 4
x16291:	jmp printf	; 3: 233 94 205

file_test$385:	; PostCall 8

file_test$386:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$387:	; Parameter 12 inFilePtr 6
x16294:	mov ax, [bp + 6]	; 3: 139 70 6
x16297:	mov [bp + 18], ax	; 3: 137 70 18

file_test$388:	; Parameter 12 string_25i# 8
x16300:	mov word [bp + 20], @10903$string_25i#	; 5: 199 70 20 221 81

file_test$389:	; address £temporary4900 size
x16305:	mov si, bp	; 2: 137 238
x16307:	add si, 10	; 3: 131 198 10

file_test$390:	; Parameter 12 £temporary4900 10
x16310:	mov [bp + 22], si	; 3: 137 118 22

file_test$391:	; Call 12 fscanf 0
x16313:	mov word [bp + 12], file_test$392	; 5: 199 70 12 204 63
x16318:	mov [bp + 14], bp	; 3: 137 110 14
x16321:	add bp, 12	; 3: 131 197 12
x16324:	mov di, bp	; 2: 137 239
x16326:	add di, 2	; 3: 131 199 2
x16329:	jmp fscanf	; 3: 233 143 31

file_test$392:	; PostCall 12

file_test$393:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$394:	; Parameter 12 string_size2025i0A# 6
x16332:	mov word [bp + 18], @10906$string_size2025i0A#	; 5: 199 70 18 224 81

file_test$395:	; Parameter 12 size 8
x16337:	mov ax, [bp + 10]	; 3: 139 70 10
x16340:	mov [bp + 20], ax	; 3: 137 70 20

file_test$396:	; Call 12 printf 0
x16343:	mov word [bp + 12], file_test$397	; 5: 199 70 12 234 63
x16348:	mov [bp + 14], bp	; 3: 137 110 14
x16351:	add bp, 12	; 3: 131 197 12
x16354:	mov di, bp	; 2: 137 239
x16356:	add di, 2	; 3: 131 199 2
x16359:	jmp printf	; 3: 233 26 205

file_test$397:	; PostCall 12

file_test$398:	; Assign count 0
x16362:	mov word [bp + 8], 0	; 5: 199 70 8 0 0

file_test$399:	; SignedGreaterThanEqual 415 count size
x16367:	mov ax, [bp + 10]	; 3: 139 70 10
x16370:	cmp [bp + 8], ax	; 3: 57 70 8
x16373:	jge file_test$415	; 2: 125 87

file_test$400:	; CallHeader 52 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$401:	; Parameter 52 inFilePtr 6
x16375:	mov ax, [bp + 6]	; 3: 139 70 6
x16378:	mov [bp + 58], ax	; 3: 137 70 58

file_test$402:	; Parameter 52 string_25s25s# 8
x16381:	mov word [bp + 60], @10920$string_25s25s#	; 5: 199 70 60 233 81

file_test$403:	; Parameter 52 name 10
x16386:	mov [bp + 62], bp	; 3: 137 110 62
x16389:	add word [bp + 62], 12	; 4: 131 70 62 12

file_test$404:	; Parameter 52 phone 12
x16393:	mov [bp + 64], bp	; 3: 137 110 64
x16396:	add word [bp + 64], 32	; 4: 131 70 64 32

file_test$405:	; Call 52 fscanf 0
x16400:	mov word [bp + 52], file_test$406	; 5: 199 70 52 35 64
x16405:	mov [bp + 54], bp	; 3: 137 110 54
x16408:	add bp, 52	; 3: 131 197 52
x16411:	mov di, bp	; 2: 137 239
x16413:	add di, 4	; 3: 131 199 4
x16416:	jmp fscanf	; 3: 233 56 31

file_test$406:	; PostCall 52

file_test$407:	; CallHeader 52 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$408:	; Parameter 52 string_252D24s20252D24s0A# 6
x16419:	mov word [bp + 58], @10922$string_252D24s20252D24s0A#	; 5: 199 70 58 238 81

file_test$409:	; Parameter 52 name 8
x16424:	mov [bp + 60], bp	; 3: 137 110 60
x16427:	add word [bp + 60], 12	; 4: 131 70 60 12

file_test$410:	; Parameter 52 phone 10
x16431:	mov [bp + 62], bp	; 3: 137 110 62
x16434:	add word [bp + 62], 32	; 4: 131 70 62 32

file_test$411:	; Call 52 printf 0
x16438:	mov word [bp + 52], file_test$412	; 5: 199 70 52 73 64
x16443:	mov [bp + 54], bp	; 3: 137 110 54
x16446:	add bp, 52	; 3: 131 197 52
x16449:	mov di, bp	; 2: 137 239
x16451:	add di, 4	; 3: 131 199 4
x16454:	jmp printf	; 3: 233 187 204

file_test$412:	; PostCall 52

file_test$413:	; Increment count
x16457:	inc word [bp + 8]	; 3: 255 70 8

file_test$414:	; Goto 399
x16460:	jmp file_test$399	; 2: 235 161

file_test$415:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$416:	; Parameter 8 string_0A# 6
x16462:	mov word [bp + 14], @10924$string_0A#	; 5: 199 70 14 251 81

file_test$417:	; Call 8 printf 0
x16467:	mov word [bp + 8], file_test$418	; 5: 199 70 8 99 64
x16472:	mov [bp + 10], bp	; 3: 137 110 10
x16475:	add bp, 8	; 3: 131 197 8
x16478:	mov di, bp	; 2: 137 239
x16480:	jmp printf	; 3: 233 161 204

file_test$418:	; PostCall 8

file_test$419:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$420:	; Parameter 8 inFilePtr 6
x16483:	mov ax, [bp + 6]	; 3: 139 70 6
x16486:	mov [bp + 14], ax	; 3: 137 70 14

file_test$421:	; Call 8 fclose 0
x16489:	mov word [bp + 8], file_test$422	; 5: 199 70 8 119 64
x16494:	mov [bp + 10], bp	; 3: 137 110 10
x16497:	add bp, 8	; 3: 131 197 8
x16500:	jmp fclose	; 3: 233 19 49

file_test$422:	; PostCall 8

file_test$423:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$424:	; Parameter 6 string_TestX2Ebin# 6
x16503:	mov word [bp + 12], @10927$string_TestX2Ebin#	; 5: 199 70 12 253 81

file_test$425:	; Parameter 6 string_w# 8
x16508:	mov word [bp + 14], @10928$string_w#	; 5: 199 70 14 7 82

file_test$426:	; Call 6 fopen 0
x16513:	mov word [bp + 6], file_test$427	; 5: 199 70 6 143 64
x16518:	mov [bp + 8], bp	; 3: 137 110 8
x16521:	add bp, 6	; 3: 131 197 6
x16524:	jmp fopen	; 3: 233 82 25

file_test$427:	; PostCall 6

file_test$428:	; GetReturnValue £temporary4909

file_test$429:	; Assign outFilePtr £temporary4909
x16527:	mov [bp + 6], bx	; 3: 137 94 6

file_test$430:	; NotEqual 442 outFilePtr 0
x16530:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x16534:	jne file_test$442	; 2: 117 59

file_test$431:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$432:	; Parameter 8 stderr 6
x16536:	mov ax, [stderr]	; 3: 161 136 77
x16539:	mov [bp + 14], ax	; 3: 137 70 14

file_test$433:	; Parameter 8 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x16542:	mov word [bp + 16], @10936$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 16 9 82

file_test$434:	; Parameter 8 string_outFilePtr20213D20NULL# 10
x16547:	mov word [bp + 18], @10937$string_outFilePtr20213D20NULL#	; 5: 199 70 18 55 82

file_test$435:	; Parameter 8 string_C3A5CUsers5Cstefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x16552:	mov word [bp + 20], @10938$string_C3A5CUsers5Cstefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 20 74 82

file_test$436:	; Parameter 8 171 14
x16557:	mov word [bp + 22], 171	; 5: 199 70 22 171 0

file_test$437:	; Call 8 fprintf 0
x16562:	mov word [bp + 8], file_test$438	; 5: 199 70 8 197 64
x16567:	mov [bp + 10], bp	; 3: 137 110 10
x16570:	add bp, 8	; 3: 131 197 8
x16573:	mov di, bp	; 2: 137 239
x16575:	add di, 6	; 3: 131 199 6
x16578:	jmp fprintf	; 3: 233 181 29

file_test$438:	; PostCall 8

file_test$439:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$440:	; Call 8 abort 0
x16581:	mov word [bp + 8], file_test$441	; 5: 199 70 8 211 64
x16586:	mov [bp + 10], bp	; 3: 137 110 10
x16589:	add bp, 8	; 3: 131 197 8
x16592:	jmp abort	; 3: 233 226 29

file_test$441:	; PostCall 8

file_test$442:	; Assign size 10
x16595:	mov word [bp + 8], 10	; 5: 199 70 8 10 0

file_test$443:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$444:	; address £temporary4914 size
x16600:	mov si, bp	; 2: 137 238
x16602:	add si, 8	; 3: 131 198 8

file_test$445:	; Parameter 12 £temporary4914 6
x16605:	mov [bp + 18], si	; 3: 137 118 18

file_test$446:	; Parameter 12 2 8
x16608:	mov word [bp + 20], 2	; 5: 199 70 20 2 0

file_test$447:	; Parameter 12 1 10
x16613:	mov word [bp + 22], 1	; 5: 199 70 22 1 0

file_test$448:	; Parameter 12 outFilePtr 12
x16618:	mov ax, [bp + 6]	; 3: 139 70 6
x16621:	mov [bp + 24], ax	; 3: 137 70 24

file_test$449:	; Call 12 fwrite 0
x16624:	mov word [bp + 12], file_test$450	; 5: 199 70 12 254 64
x16629:	mov [bp + 14], bp	; 3: 137 110 14
x16632:	add bp, 12	; 3: 131 197 12
x16635:	jmp fwrite	; 3: 233 172 49

file_test$450:	; PostCall 12

file_test$451:	; Assign index 0
x16638:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

file_test$452:	; SignedGreaterThanEqual 466 index size
x16643:	mov ax, [bp + 8]	; 3: 139 70 8
x16646:	cmp [bp + 10], ax	; 3: 57 70 10
x16649:	jge file_test$466	; 2: 125 61

file_test$453:	; SignedMultiply £temporary4918 index index
x16651:	mov ax, [bp + 10]	; 3: 139 70 10
x16654:	xor dx, dx	; 2: 49 210
x16656:	imul word [bp + 10]	; 3: 247 110 10

file_test$454:	; IntegralToFloating £temporary4919 £temporary4918
x16659:	mov [container2bytes#], ax	; 3: 163 77 27
x16662:	fild word [container2bytes#]	; 4: 223 6 77 27

file_test$455:	; PopFloat value
x16666:	fstp qword [bp + 12]	; 3: 221 94 12

file_test$456:	; CallHeader 20 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$457:	; address £temporary4920 value
x16669:	mov si, bp	; 2: 137 238
x16671:	add si, 12	; 3: 131 198 12

file_test$458:	; Parameter 20 £temporary4920 6
x16674:	mov [bp + 26], si	; 3: 137 118 26

file_test$459:	; Parameter 20 8 8
x16677:	mov word [bp + 28], 8	; 5: 199 70 28 8 0

file_test$460:	; Parameter 20 1 10
x16682:	mov word [bp + 30], 1	; 5: 199 70 30 1 0

file_test$461:	; Parameter 20 outFilePtr 12
x16687:	mov ax, [bp + 6]	; 3: 139 70 6
x16690:	mov [bp + 32], ax	; 3: 137 70 32

file_test$462:	; Call 20 fwrite 0
x16693:	mov word [bp + 20], file_test$463	; 5: 199 70 20 67 65
x16698:	mov [bp + 22], bp	; 3: 137 110 22
x16701:	add bp, 20	; 3: 131 197 20
x16704:	jmp fwrite	; 3: 233 103 49

file_test$463:	; PostCall 20

file_test$464:	; Increment index
x16707:	inc word [bp + 10]	; 3: 255 70 10

file_test$465:	; Goto 452
x16710:	jmp file_test$452	; 2: 235 187

file_test$466:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$467:	; Parameter 12 outFilePtr 6
x16712:	mov ax, [bp + 6]	; 3: 139 70 6
x16715:	mov [bp + 18], ax	; 3: 137 70 18

file_test$468:	; Call 12 fclose 0
x16718:	mov word [bp + 12], file_test$469	; 5: 199 70 12 92 65
x16723:	mov [bp + 14], bp	; 3: 137 110 14
x16726:	add bp, 12	; 3: 131 197 12
x16729:	jmp fclose	; 3: 233 46 48

file_test$469:	; PostCall 12

file_test$470:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$471:	; Parameter 6 string_TestX2Ebin# 6
x16732:	mov word [bp + 12], @10973$string_TestX2Ebin#	; 5: 199 70 12 138 82

file_test$472:	; Parameter 6 string_r# 8
x16737:	mov word [bp + 14], @10974$string_r#	; 5: 199 70 14 148 82

file_test$473:	; Call 6 fopen 0
x16742:	mov word [bp + 6], file_test$474	; 5: 199 70 6 116 65
x16747:	mov [bp + 8], bp	; 3: 137 110 8
x16750:	add bp, 6	; 3: 131 197 6
x16753:	jmp fopen	; 3: 233 109 24

file_test$474:	; PostCall 6

file_test$475:	; GetReturnValue £temporary4923

file_test$476:	; Assign inFilePtr £temporary4923
x16756:	mov [bp + 6], bx	; 3: 137 94 6

file_test$477:	; NotEqual 489 inFilePtr 0
x16759:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x16763:	jne file_test$489	; 2: 117 59

file_test$478:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$479:	; Parameter 12 stderr 6
x16765:	mov ax, [stderr]	; 3: 161 136 77
x16768:	mov [bp + 18], ax	; 3: 137 70 18

file_test$480:	; Parameter 12 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x16771:	mov word [bp + 20], @10984$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 20 150 82

file_test$481:	; Parameter 12 string_inFilePtr20213D20NULL# 10
x16776:	mov word [bp + 22], @10985$string_inFilePtr20213D20NULL#	; 5: 199 70 22 196 82

file_test$482:	; Parameter 12 string_C3A5CUsers5Cstefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x16781:	mov word [bp + 24], @10986$string_C3A5CUsers5Cstefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 24 214 82

file_test$483:	; Parameter 12 188 14
x16786:	mov word [bp + 26], 188	; 5: 199 70 26 188 0

file_test$484:	; Call 12 fprintf 0
x16791:	mov word [bp + 12], file_test$485	; 5: 199 70 12 170 65
x16796:	mov [bp + 14], bp	; 3: 137 110 14
x16799:	add bp, 12	; 3: 131 197 12
x16802:	mov di, bp	; 2: 137 239
x16804:	add di, 6	; 3: 131 199 6
x16807:	jmp fprintf	; 3: 233 208 28

file_test$485:	; PostCall 12

file_test$486:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$487:	; Call 12 abort 0
x16810:	mov word [bp + 12], file_test$488	; 5: 199 70 12 184 65
x16815:	mov [bp + 14], bp	; 3: 137 110 14
x16818:	add bp, 12	; 3: 131 197 12
x16821:	jmp abort	; 3: 233 253 28

file_test$488:	; PostCall 12

file_test$489:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$490:	; address £temporary4928 size
x16824:	mov si, bp	; 2: 137 238
x16826:	add si, 8	; 3: 131 198 8

file_test$491:	; Parameter 12 £temporary4928 6
x16829:	mov [bp + 18], si	; 3: 137 118 18

file_test$492:	; Parameter 12 2 8
x16832:	mov word [bp + 20], 2	; 5: 199 70 20 2 0

file_test$493:	; Parameter 12 1 10
x16837:	mov word [bp + 22], 1	; 5: 199 70 22 1 0

file_test$494:	; Parameter 12 inFilePtr 12
x16842:	mov ax, [bp + 6]	; 3: 139 70 6
x16845:	mov [bp + 24], ax	; 3: 137 70 24

file_test$495:	; Call 12 fread 0
x16848:	mov word [bp + 12], file_test$496	; 5: 199 70 12 222 65
x16853:	mov [bp + 14], bp	; 3: 137 110 14
x16856:	add bp, 12	; 3: 131 197 12
x16859:	jmp fread	; 3: 233 15 49

file_test$496:	; PostCall 12

file_test$497:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$498:	; Parameter 12 string_size13A2025i0A# 6
x16862:	mov word [bp + 18], @10999$string_size13A2025i0A#	; 5: 199 70 18 22 83

file_test$499:	; Parameter 12 size 8
x16867:	mov ax, [bp + 8]	; 3: 139 70 8
x16870:	mov [bp + 20], ax	; 3: 137 70 20

file_test$500:	; Call 12 printf 0
x16873:	mov word [bp + 12], file_test$501	; 5: 199 70 12 252 65
x16878:	mov [bp + 14], bp	; 3: 137 110 14
x16881:	add bp, 12	; 3: 131 197 12
x16884:	mov di, bp	; 2: 137 239
x16886:	add di, 2	; 3: 131 199 2
x16889:	jmp printf	; 3: 233 8 203

file_test$501:	; PostCall 12

file_test$502:	; Assign index 0
x16892:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

file_test$503:	; SignedGreaterThanEqual 521 index size
x16897:	mov ax, [bp + 8]	; 3: 139 70 8
x16900:	cmp [bp + 10], ax	; 3: 57 70 10
x16903:	jge file_test$521	; 2: 125 79

file_test$504:	; CallHeader 20 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$505:	; address £temporary4933 value
x16905:	mov si, bp	; 2: 137 238
x16907:	add si, 12	; 3: 131 198 12

file_test$506:	; Parameter 20 £temporary4933 6
x16910:	mov [bp + 26], si	; 3: 137 118 26

file_test$507:	; Parameter 20 8 8
x16913:	mov word [bp + 28], 8	; 5: 199 70 28 8 0

file_test$508:	; Parameter 20 1 10
x16918:	mov word [bp + 30], 1	; 5: 199 70 30 1 0

file_test$509:	; Parameter 20 inFilePtr 12
x16923:	mov ax, [bp + 6]	; 3: 139 70 6
x16926:	mov [bp + 32], ax	; 3: 137 70 32

file_test$510:	; Call 20 fread 0
x16929:	mov word [bp + 20], file_test$511	; 5: 199 70 20 47 66
x16934:	mov [bp + 22], bp	; 3: 137 110 22
x16937:	add bp, 20	; 3: 131 197 20
x16940:	jmp fread	; 3: 233 190 48

file_test$511:	; PostCall 20

file_test$512:	; CallHeader 20 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$513:	; Parameter 20 string_index13A2025i3A20value2025f0A# 6
x16943:	mov word [bp + 26], @11016$string_index13A2025i3A20value2025f0A#	; 5: 199 70 26 33 83

file_test$514:	; Parameter 20 index 8
x16948:	mov ax, [bp + 10]	; 3: 139 70 10
x16951:	mov [bp + 28], ax	; 3: 137 70 28

file_test$515:	; PushFloat value
x16954:	fld qword [bp + 12]	; 3: 221 70 12

file_test$516:	; Parameter 20 value 10
x16957:	fstp qword [bp + 30]	; 3: 221 94 30

file_test$517:	; Call 20 printf 0
x16960:	mov word [bp + 20], file_test$518	; 5: 199 70 20 83 66
x16965:	mov [bp + 22], bp	; 3: 137 110 22
x16968:	add bp, 20	; 3: 131 197 20
x16971:	mov di, bp	; 2: 137 239
x16973:	add di, 10	; 3: 131 199 10
x16976:	jmp printf	; 3: 233 177 202

file_test$518:	; PostCall 20

file_test$519:	; Increment index
x16979:	inc word [bp + 10]	; 3: 255 70 10

file_test$520:	; Goto 503
x16982:	jmp file_test$503	; 2: 235 169

file_test$521:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$522:	; Parameter 12 string_0A# 6
x16984:	mov word [bp + 18], @11018$string_0A#	; 5: 199 70 18 55 83

file_test$523:	; Call 12 printf 0
x16989:	mov word [bp + 12], file_test$524	; 5: 199 70 12 109 66
x16994:	mov [bp + 14], bp	; 3: 137 110 14
x16997:	add bp, 12	; 3: 131 197 12
x17000:	mov di, bp	; 2: 137 239
x17002:	jmp printf	; 3: 233 151 202

file_test$524:	; PostCall 12

file_test$525:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$526:	; Parameter 12 inFilePtr 6
x17005:	mov ax, [bp + 6]	; 3: 139 70 6
x17008:	mov [bp + 18], ax	; 3: 137 70 18

file_test$527:	; Call 12 fclose 0
x17011:	mov word [bp + 12], file_test$528	; 5: 199 70 12 129 66
x17016:	mov [bp + 14], bp	; 3: 137 110 14
x17019:	add bp, 12	; 3: 131 197 12
x17022:	jmp fclose	; 3: 233 9 47

file_test$528:	; PostCall 12

file_test$529:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$530:	; Parameter 6 string_TestY2Ebin# 6
x17025:	mov word [bp + 12], @11021$string_TestY2Ebin#	; 5: 199 70 12 57 83

file_test$531:	; Parameter 6 string_w# 8
x17030:	mov word [bp + 14], @11022$string_w#	; 5: 199 70 14 67 83

file_test$532:	; Call 6 fopen 0
x17035:	mov word [bp + 6], file_test$533	; 5: 199 70 6 153 66
x17040:	mov [bp + 8], bp	; 3: 137 110 8
x17043:	add bp, 6	; 3: 131 197 6
x17046:	jmp fopen	; 3: 233 72 23

file_test$533:	; PostCall 6

file_test$534:	; GetReturnValue £temporary4938

file_test$535:	; Assign outFilePtr £temporary4938
x17049:	mov [bp + 6], bx	; 3: 137 94 6

file_test$536:	; NotEqual 548 outFilePtr 0
x17052:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x17056:	jne file_test$548	; 2: 117 59

file_test$537:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$538:	; Parameter 8 stderr 6
x17058:	mov ax, [stderr]	; 3: 161 136 77
x17061:	mov [bp + 14], ax	; 3: 137 70 14

file_test$539:	; Parameter 8 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x17064:	mov word [bp + 16], @11030$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 16 69 83

file_test$540:	; Parameter 8 string_outFilePtr20213D20NULL# 10
x17069:	mov word [bp + 18], @11031$string_outFilePtr20213D20NULL#	; 5: 199 70 18 115 83

file_test$541:	; Parameter 8 string_C3A5CUsers5Cstefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x17074:	mov word [bp + 20], @11032$string_C3A5CUsers5Cstefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 20 134 83

file_test$542:	; Parameter 8 203 14
x17079:	mov word [bp + 22], 203	; 5: 199 70 22 203 0

file_test$543:	; Call 8 fprintf 0
x17084:	mov word [bp + 8], file_test$544	; 5: 199 70 8 207 66
x17089:	mov [bp + 10], bp	; 3: 137 110 10
x17092:	add bp, 8	; 3: 131 197 8
x17095:	mov di, bp	; 2: 137 239
x17097:	add di, 6	; 3: 131 199 6
x17100:	jmp fprintf	; 3: 233 171 27

file_test$544:	; PostCall 8

file_test$545:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$546:	; Call 8 abort 0
x17103:	mov word [bp + 8], file_test$547	; 5: 199 70 8 221 66
x17108:	mov [bp + 10], bp	; 3: 137 110 10
x17111:	add bp, 8	; 3: 131 197 8
x17114:	jmp abort	; 3: 233 216 27

file_test$547:	; PostCall 8

file_test$548:	; Assign size 10
x17117:	mov word [bp + 8], 10	; 5: 199 70 8 10 0

file_test$549:	; Assign index 0
x17122:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

file_test$550:	; SignedGreaterThanEqual 564 index size
x17127:	mov ax, [bp + 8]	; 3: 139 70 8
x17130:	cmp [bp + 10], ax	; 3: 57 70 10
x17133:	jge file_test$564	; 2: 125 61

file_test$551:	; SignedMultiply £temporary4945 index index
x17135:	mov ax, [bp + 10]	; 3: 139 70 10
x17138:	xor dx, dx	; 2: 49 210
x17140:	imul word [bp + 10]	; 3: 247 110 10

file_test$552:	; IntegralToFloating £temporary4946 £temporary4945
x17143:	mov [container2bytes#], ax	; 3: 163 77 27
x17146:	fild word [container2bytes#]	; 4: 223 6 77 27

file_test$553:	; PopFloat value
x17150:	fstp qword [bp + 12]	; 3: 221 94 12

file_test$554:	; CallHeader 20 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$555:	; address £temporary4947 value
x17153:	mov si, bp	; 2: 137 238
x17155:	add si, 12	; 3: 131 198 12

file_test$556:	; Parameter 20 £temporary4947 6
x17158:	mov [bp + 26], si	; 3: 137 118 26

file_test$557:	; Parameter 20 8 8
x17161:	mov word [bp + 28], 8	; 5: 199 70 28 8 0

file_test$558:	; Parameter 20 1 10
x17166:	mov word [bp + 30], 1	; 5: 199 70 30 1 0

file_test$559:	; Parameter 20 outFilePtr 12
x17171:	mov ax, [bp + 6]	; 3: 139 70 6
x17174:	mov [bp + 32], ax	; 3: 137 70 32

file_test$560:	; Call 20 fwrite 0
x17177:	mov word [bp + 20], file_test$561	; 5: 199 70 20 39 67
x17182:	mov [bp + 22], bp	; 3: 137 110 22
x17185:	add bp, 20	; 3: 131 197 20
x17188:	jmp fwrite	; 3: 233 131 47

file_test$561:	; PostCall 20

file_test$562:	; Increment index
x17191:	inc word [bp + 10]	; 3: 255 70 10

file_test$563:	; Goto 550
x17194:	jmp file_test$550	; 2: 235 187

file_test$564:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$565:	; Parameter 12 outFilePtr 6
x17196:	mov ax, [bp + 6]	; 3: 139 70 6
x17199:	mov [bp + 18], ax	; 3: 137 70 18

file_test$566:	; Call 12 fclose 0
x17202:	mov word [bp + 12], file_test$567	; 5: 199 70 12 64 67
x17207:	mov [bp + 14], bp	; 3: 137 110 14
x17210:	add bp, 12	; 3: 131 197 12
x17213:	jmp fclose	; 3: 233 74 46

file_test$567:	; PostCall 12

file_test$568:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$569:	; Parameter 6 string_TestY2Ebin# 6
x17216:	mov word [bp + 12], @11059$string_TestY2Ebin#	; 5: 199 70 12 198 83

file_test$570:	; Parameter 6 string_r# 8
x17221:	mov word [bp + 14], @11060$string_r#	; 5: 199 70 14 208 83

file_test$571:	; Call 6 fopen 0
x17226:	mov word [bp + 6], file_test$572	; 5: 199 70 6 88 67
x17231:	mov [bp + 8], bp	; 3: 137 110 8
x17234:	add bp, 6	; 3: 131 197 6
x17237:	jmp fopen	; 3: 233 137 22

file_test$572:	; PostCall 6

file_test$573:	; GetReturnValue £temporary4950

file_test$574:	; Assign inFilePtr £temporary4950
x17240:	mov [bp + 6], bx	; 3: 137 94 6

file_test$575:	; NotEqual 587 inFilePtr 0
x17243:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x17247:	jne file_test$587	; 2: 117 59

file_test$576:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$577:	; Parameter 8 stderr 6
x17249:	mov ax, [stderr]	; 3: 161 136 77
x17252:	mov [bp + 14], ax	; 3: 137 70 14

file_test$578:	; Parameter 8 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x17255:	mov word [bp + 16], @11068$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 16 210 83

file_test$579:	; Parameter 8 string_inFilePtr20213D20NULL# 10
x17260:	mov word [bp + 18], @11069$string_inFilePtr20213D20NULL#	; 5: 199 70 18 0 84

file_test$580:	; Parameter 8 string_C3A5CUsers5Cstefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x17265:	mov word [bp + 20], @11070$string_C3A5CUsers5Cstefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 20 18 84

file_test$581:	; Parameter 8 217 14
x17270:	mov word [bp + 22], 217	; 5: 199 70 22 217 0

file_test$582:	; Call 8 fprintf 0
x17275:	mov word [bp + 8], file_test$583	; 5: 199 70 8 142 67
x17280:	mov [bp + 10], bp	; 3: 137 110 10
x17283:	add bp, 8	; 3: 131 197 8
x17286:	mov di, bp	; 2: 137 239
x17288:	add di, 6	; 3: 131 199 6
x17291:	jmp fprintf	; 3: 233 236 26

file_test$583:	; PostCall 8

file_test$584:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$585:	; Call 8 abort 0
x17294:	mov word [bp + 8], file_test$586	; 5: 199 70 8 156 67
x17299:	mov [bp + 10], bp	; 3: 137 110 10
x17302:	add bp, 8	; 3: 131 197 8
x17305:	jmp abort	; 3: 233 25 27

file_test$586:	; PostCall 8

file_test$587:	; Assign index 0
x17308:	mov word [bp + 8], 0	; 5: 199 70 8 0 0

file_test$588:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$589:	; address £temporary4955 value
x17313:	mov si, bp	; 2: 137 238
x17315:	add si, 10	; 3: 131 198 10

file_test$590:	; Parameter 18 £temporary4955 6
x17318:	mov [bp + 24], si	; 3: 137 118 24

file_test$591:	; Parameter 18 8 8
x17321:	mov word [bp + 26], 8	; 5: 199 70 26 8 0

file_test$592:	; Parameter 18 1 10
x17326:	mov word [bp + 28], 1	; 5: 199 70 28 1 0

file_test$593:	; Parameter 18 inFilePtr 12
x17331:	mov ax, [bp + 6]	; 3: 139 70 6
x17334:	mov [bp + 30], ax	; 3: 137 70 30

file_test$594:	; Call 18 fread 0
x17337:	mov word [bp + 18], file_test$595	; 5: 199 70 18 199 67
x17342:	mov [bp + 20], bp	; 3: 137 110 20
x17345:	add bp, 18	; 3: 131 197 18
x17348:	jmp fread	; 3: 233 38 47

file_test$595:	; PostCall 18

file_test$596:	; GetReturnValue £temporary4956

file_test$597:	; SignedLessThanEqual 608 £temporary4956 0
x17351:	cmp bx, 0	; 3: 131 251 0
x17354:	jle file_test$608	; 2: 126 41

file_test$598:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$599:	; Parameter 18 string_index23A2025i3A20value2025f0A# 6
x17356:	mov word [bp + 24], @11090$string_index23A2025i3A20value2025f0A#	; 5: 199 70 24 82 84

file_test$600:	; Assign £temporary4958 index
x17361:	mov ax, [bp + 8]	; 3: 139 70 8

file_test$601:	; Increment index
x17364:	inc word [bp + 8]	; 3: 255 70 8

file_test$602:	; Parameter 18 £temporary4958 8
x17367:	mov [bp + 26], ax	; 3: 137 70 26

file_test$603:	; PushFloat value
x17370:	fld qword [bp + 10]	; 3: 221 70 10

file_test$604:	; Parameter 18 value 10
x17373:	fstp qword [bp + 28]	; 3: 221 94 28

file_test$605:	; Call 18 printf 0
x17376:	mov word [bp + 18], file_test$606	; 5: 199 70 18 243 67
x17381:	mov [bp + 20], bp	; 3: 137 110 20
x17384:	add bp, 18	; 3: 131 197 18
x17387:	mov di, bp	; 2: 137 239
x17389:	add di, 10	; 3: 131 199 10
x17392:	jmp printf	; 3: 233 17 201

file_test$606:	; PostCall 18

file_test$607:	; Goto 588
x17395:	jmp file_test$588	; 2: 235 172

file_test$608:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$609:	; Parameter 8 string_0A# 6
x17397:	mov word [bp + 14], @11096$string_0A#	; 5: 199 70 14 104 84

file_test$610:	; Call 8 printf 0
x17402:	mov word [bp + 8], file_test$611	; 5: 199 70 8 10 68
x17407:	mov [bp + 10], bp	; 3: 137 110 10
x17410:	add bp, 8	; 3: 131 197 8
x17413:	mov di, bp	; 2: 137 239
x17415:	jmp printf	; 3: 233 250 200

file_test$611:	; PostCall 8

file_test$612:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$613:	; Parameter 8 inFilePtr 6
x17418:	mov ax, [bp + 6]	; 3: 139 70 6
x17421:	mov [bp + 14], ax	; 3: 137 70 14

file_test$614:	; Call 8 fclose 0
x17424:	mov word [bp + 8], file_test$615	; 5: 199 70 8 30 68
x17429:	mov [bp + 10], bp	; 3: 137 110 10
x17432:	add bp, 8	; 3: 131 197 8
x17435:	jmp fclose	; 3: 233 108 45

file_test$615:	; PostCall 8

file_test$616:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$617:	; Parameter 6 string_TestY2Ebin# 6
x17438:	mov word [bp + 12], @11099$string_TestY2Ebin#	; 5: 199 70 12 106 84

file_test$618:	; Parameter 6 string_r# 8
x17443:	mov word [bp + 14], @11100$string_r#	; 5: 199 70 14 116 84

file_test$619:	; Call 6 fopen 0
x17448:	mov word [bp + 6], file_test$620	; 5: 199 70 6 54 68
x17453:	mov [bp + 8], bp	; 3: 137 110 8
x17456:	add bp, 6	; 3: 131 197 6
x17459:	jmp fopen	; 3: 233 171 21

file_test$620:	; PostCall 6

file_test$621:	; GetReturnValue £temporary4963

file_test$622:	; Assign inFilePtr £temporary4963
x17462:	mov [bp + 6], bx	; 3: 137 94 6

file_test$623:	; NotEqual 635 inFilePtr 0
x17465:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x17469:	jne file_test$635	; 2: 117 59

file_test$624:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$625:	; Parameter 8 stderr 6
x17471:	mov ax, [stderr]	; 3: 161 136 77
x17474:	mov [bp + 14], ax	; 3: 137 70 14

file_test$626:	; Parameter 8 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x17477:	mov word [bp + 16], @11108$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 16 118 84

file_test$627:	; Parameter 8 string_inFilePtr20213D20NULL# 10
x17482:	mov word [bp + 18], @11109$string_inFilePtr20213D20NULL#	; 5: 199 70 18 164 84

file_test$628:	; Parameter 8 string_C3A5CUsers5Cstefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x17487:	mov word [bp + 20], @11110$string_C3A5CUsers5Cstefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 20 182 84

file_test$629:	; Parameter 8 232 14
x17492:	mov word [bp + 22], 232	; 5: 199 70 22 232 0

file_test$630:	; Call 8 fprintf 0
x17497:	mov word [bp + 8], file_test$631	; 5: 199 70 8 108 68
x17502:	mov [bp + 10], bp	; 3: 137 110 10
x17505:	add bp, 8	; 3: 131 197 8
x17508:	mov di, bp	; 2: 137 239
x17510:	add di, 6	; 3: 131 199 6
x17513:	jmp fprintf	; 3: 233 14 26

file_test$631:	; PostCall 8

file_test$632:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$633:	; Call 8 abort 0
x17516:	mov word [bp + 8], file_test$634	; 5: 199 70 8 122 68
x17521:	mov [bp + 10], bp	; 3: 137 110 10
x17524:	add bp, 8	; 3: 131 197 8
x17527:	jmp abort	; 3: 233 59 26

file_test$634:	; PostCall 8

file_test$635:	; Assign index 0
x17530:	mov word [bp + 8], 0	; 5: 199 70 8 0 0

file_test$636:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$637:	; Parameter 10 inFilePtr 6
x17535:	mov ax, [bp + 6]	; 3: 139 70 6
x17538:	mov [bp + 16], ax	; 3: 137 70 16

file_test$638:	; Call 10 feof 0
x17541:	mov word [bp + 10], file_test$639	; 5: 199 70 10 147 68
x17546:	mov [bp + 12], bp	; 3: 137 110 12
x17549:	add bp, 10	; 3: 131 197 10
x17552:	jmp feof	; 3: 233 51 26

file_test$639:	; PostCall 10

file_test$640:	; GetReturnValue £temporary4968

file_test$641:	; NotEqual 660 £temporary4968 0
x17555:	cmp bx, 0	; 3: 131 251 0
x17558:	jne file_test$660	; 2: 117 79

file_test$642:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$643:	; address £temporary4971 value
x17560:	mov si, bp	; 2: 137 238
x17562:	add si, 10	; 3: 131 198 10

file_test$644:	; Parameter 18 £temporary4971 6
x17565:	mov [bp + 24], si	; 3: 137 118 24

file_test$645:	; Parameter 18 8 8
x17568:	mov word [bp + 26], 8	; 5: 199 70 26 8 0

file_test$646:	; Parameter 18 1 10
x17573:	mov word [bp + 28], 1	; 5: 199 70 28 1 0

file_test$647:	; Parameter 18 inFilePtr 12
x17578:	mov ax, [bp + 6]	; 3: 139 70 6
x17581:	mov [bp + 30], ax	; 3: 137 70 30

file_test$648:	; Call 18 fread 0
x17584:	mov word [bp + 18], file_test$649	; 5: 199 70 18 190 68
x17589:	mov [bp + 20], bp	; 3: 137 110 20
x17592:	add bp, 18	; 3: 131 197 18
x17595:	jmp fread	; 3: 233 47 46

file_test$649:	; PostCall 18

file_test$650:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$651:	; Parameter 18 string_index33A2025i3A20value2025f0A# 6
x17598:	mov word [bp + 24], @11131$string_index33A2025i3A20value2025f0A#	; 5: 199 70 24 246 84

file_test$652:	; Assign £temporary4973 index
x17603:	mov ax, [bp + 8]	; 3: 139 70 8

file_test$653:	; Increment index
x17606:	inc word [bp + 8]	; 3: 255 70 8

file_test$654:	; Parameter 18 £temporary4973 8
x17609:	mov [bp + 26], ax	; 3: 137 70 26

file_test$655:	; PushFloat value
x17612:	fld qword [bp + 10]	; 3: 221 70 10

file_test$656:	; Parameter 18 value 10
x17615:	fstp qword [bp + 28]	; 3: 221 94 28

file_test$657:	; Call 18 printf 0
x17618:	mov word [bp + 18], file_test$658	; 5: 199 70 18 229 68
x17623:	mov [bp + 20], bp	; 3: 137 110 20
x17626:	add bp, 18	; 3: 131 197 18
x17629:	mov di, bp	; 2: 137 239
x17631:	add di, 10	; 3: 131 199 10
x17634:	jmp printf	; 3: 233 31 200

file_test$658:	; PostCall 18

file_test$659:	; Goto 636
x17637:	jmp file_test$636	; 2: 235 152

file_test$660:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$661:	; Parameter 8 string_0A# 6
x17639:	mov word [bp + 14], @11137$string_0A#	; 5: 199 70 14 12 85

file_test$662:	; Call 8 printf 0
x17644:	mov word [bp + 8], file_test$663	; 5: 199 70 8 252 68
x17649:	mov [bp + 10], bp	; 3: 137 110 10
x17652:	add bp, 8	; 3: 131 197 8
x17655:	mov di, bp	; 2: 137 239
x17657:	jmp printf	; 3: 233 8 200

file_test$663:	; PostCall 8

file_test$664:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$665:	; Parameter 8 inFilePtr 6
x17660:	mov ax, [bp + 6]	; 3: 139 70 6
x17663:	mov [bp + 14], ax	; 3: 137 70 14

file_test$666:	; Call 8 fclose 0
x17666:	mov word [bp + 8], file_test$667	; 5: 199 70 8 16 69
x17671:	mov [bp + 10], bp	; 3: 137 110 10
x17674:	add bp, 8	; 3: 131 197 8
x17677:	jmp fclose	; 3: 233 122 44

file_test$667:	; PostCall 8

file_test$668:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$669:	; Parameter 6 string_TestX2Ebin# 6
x17680:	mov word [bp + 12], @11140$string_TestX2Ebin#	; 5: 199 70 12 14 85

file_test$670:	; Parameter 6 string_r# 8
x17685:	mov word [bp + 14], @11141$string_r#	; 5: 199 70 14 24 85

file_test$671:	; Call 6 fopen 0
x17690:	mov word [bp + 6], file_test$672	; 5: 199 70 6 40 69
x17695:	mov [bp + 8], bp	; 3: 137 110 8
x17698:	add bp, 6	; 3: 131 197 6
x17701:	jmp fopen	; 3: 233 185 20

file_test$672:	; PostCall 6

file_test$673:	; GetReturnValue £temporary4978

file_test$674:	; Assign inFilePtr £temporary4978
x17704:	mov [bp + 6], bx	; 3: 137 94 6

file_test$675:	; NotEqual 687 inFilePtr 0
x17707:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x17711:	jne file_test$687	; 2: 117 59

file_test$676:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$677:	; Parameter 10 stderr 6
x17713:	mov ax, [stderr]	; 3: 161 136 77
x17716:	mov [bp + 16], ax	; 3: 137 70 16

file_test$678:	; Parameter 10 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x17719:	mov word [bp + 18], @11150$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 18 26 85

file_test$679:	; Parameter 10 string_inFilePtr20213D20NULL# 10
x17724:	mov word [bp + 20], @11151$string_inFilePtr20213D20NULL#	; 5: 199 70 20 72 85

file_test$680:	; Parameter 10 string_C3A5CUsers5Cstefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x17729:	mov word [bp + 22], @11152$string_C3A5CUsers5Cstefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 22 90 85

file_test$681:	; Parameter 10 250 14
x17734:	mov word [bp + 24], 250	; 5: 199 70 24 250 0

file_test$682:	; Call 10 fprintf 0
x17739:	mov word [bp + 10], file_test$683	; 5: 199 70 10 94 69
x17744:	mov [bp + 12], bp	; 3: 137 110 12
x17747:	add bp, 10	; 3: 131 197 10
x17750:	mov di, bp	; 2: 137 239
x17752:	add di, 6	; 3: 131 199 6
x17755:	jmp fprintf	; 3: 233 28 25

file_test$683:	; PostCall 10

file_test$684:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$685:	; Call 10 abort 0
x17758:	mov word [bp + 10], file_test$686	; 5: 199 70 10 108 69
x17763:	mov [bp + 12], bp	; 3: 137 110 12
x17766:	add bp, 10	; 3: 131 197 10
x17769:	jmp abort	; 3: 233 73 25

file_test$686:	; PostCall 10

file_test$687:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$688:	; address £temporary4983 size
x17772:	mov si, bp	; 2: 137 238
x17774:	add si, 8	; 3: 131 198 8

file_test$689:	; Parameter 10 £temporary4983 6
x17777:	mov [bp + 16], si	; 3: 137 118 16

file_test$690:	; Parameter 10 2 8
x17780:	mov word [bp + 18], 2	; 5: 199 70 18 2 0

file_test$691:	; Parameter 10 1 10
x17785:	mov word [bp + 20], 1	; 5: 199 70 20 1 0

file_test$692:	; Parameter 10 inFilePtr 12
x17790:	mov ax, [bp + 6]	; 3: 139 70 6
x17793:	mov [bp + 22], ax	; 3: 137 70 22

file_test$693:	; Call 10 fread 0
x17796:	mov word [bp + 10], file_test$694	; 5: 199 70 10 146 69
x17801:	mov [bp + 12], bp	; 3: 137 110 12
x17804:	add bp, 10	; 3: 131 197 10
x17807:	jmp fread	; 3: 233 91 45

file_test$694:	; PostCall 10

file_test$695:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$696:	; Parameter 10 string_size43A2025i20total2025i0A# 6
x17810:	mov word [bp + 16], @11165$string_size43A2025i20total2025i0A#	; 5: 199 70 16 154 85

file_test$697:	; Parameter 10 size 8
x17815:	mov ax, [bp + 8]	; 3: 139 70 8
x17818:	mov [bp + 18], ax	; 3: 137 70 18

file_test$698:	; SignedMultiply £temporary4985 size 8
x17821:	mov ax, [bp + 8]	; 3: 139 70 8
x17824:	xor dx, dx	; 2: 49 210
x17826:	imul word [@11167$int2$8#]	; 4: 247 46 174 85

file_test$699:	; Parameter 10 £temporary4985 10
x17830:	mov [bp + 20], ax	; 3: 137 70 20

file_test$700:	; Call 10 printf 0
x17833:	mov word [bp + 10], file_test$701	; 5: 199 70 10 188 69
x17838:	mov [bp + 12], bp	; 3: 137 110 12
x17841:	add bp, 10	; 3: 131 197 10
x17844:	mov di, bp	; 2: 137 239
x17846:	add di, 4	; 3: 131 199 4
x17849:	jmp printf	; 3: 233 72 199

file_test$701:	; PostCall 10

file_test$702:	; SignedMultiply total size 8
x17852:	mov ax, [bp + 8]	; 3: 139 70 8
x17855:	xor dx, dx	; 2: 49 210
x17857:	imul word [@11171$int2$8#]	; 4: 247 46 176 85
x17861:	mov [bp + 10], ax	; 3: 137 70 10

file_test$703:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$704:	; Parameter 14 total 6
x17864:	mov ax, [bp + 10]	; 3: 139 70 10
x17867:	mov [bp + 20], ax	; 3: 137 70 20

file_test$705:	; Call 14 malloc 0
x17870:	mov word [bp + 14], file_test$706	; 5: 199 70 14 220 69
x17875:	mov [bp + 16], bp	; 3: 137 110 16
x17878:	add bp, 14	; 3: 131 197 14
x17881:	jmp malloc	; 3: 233 84 45

file_test$706:	; PostCall 14

file_test$707:	; GetReturnValue £temporary4988

file_test$708:	; Assign p £temporary4988
x17884:	mov [bp + 14], bx	; 3: 137 94 14

file_test$709:	; SignedMultiply £temporary4989 size 8
x17887:	mov ax, [bp + 8]	; 3: 139 70 8
x17890:	xor dx, dx	; 2: 49 210
x17892:	imul word [@11178$int2$8#]	; 4: 247 46 178 85

file_test$710:	; BinaryAdd endPtr p £temporary4989
x17896:	mov bx, [bp + 14]	; 3: 139 94 14
x17899:	add bx, ax	; 2: 1 195
x17901:	mov [bp + 16], bx	; 3: 137 94 16

file_test$711:	; NotEqual 723 p 0
x17904:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x17908:	jne file_test$723	; 2: 117 59

file_test$712:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$713:	; Parameter 18 stderr 6
x17910:	mov ax, [stderr]	; 3: 161 136 77
x17913:	mov [bp + 24], ax	; 3: 137 70 24

file_test$714:	; Parameter 18 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x17916:	mov word [bp + 26], @11186$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 26 180 85

file_test$715:	; Parameter 18 string_p20213D20NULL# 10
x17921:	mov word [bp + 28], @11187$string_p20213D20NULL#	; 5: 199 70 28 226 85

file_test$716:	; Parameter 18 string_C3A5CUsers5Cstefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x17926:	mov word [bp + 30], @11188$string_C3A5CUsers5Cstefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 30 236 85

file_test$717:	; Parameter 18 257 14
x17931:	mov word [bp + 32], 257	; 5: 199 70 32 1 1

file_test$718:	; Call 18 fprintf 0
x17936:	mov word [bp + 18], file_test$719	; 5: 199 70 18 35 70
x17941:	mov [bp + 20], bp	; 3: 137 110 20
x17944:	add bp, 18	; 3: 131 197 18
x17947:	mov di, bp	; 2: 137 239
x17949:	add di, 6	; 3: 131 199 6
x17952:	jmp fprintf	; 3: 233 87 24

file_test$719:	; PostCall 18

file_test$720:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$721:	; Call 18 abort 0
x17955:	mov word [bp + 18], file_test$722	; 5: 199 70 18 49 70
x17960:	mov [bp + 20], bp	; 3: 137 110 20
x17963:	add bp, 18	; 3: 131 197 18
x17966:	jmp abort	; 3: 233 132 24

file_test$722:	; PostCall 18

file_test$723:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$724:	; Parameter 18 string_malloc43A2025u2025u2025u0A# 6
x17969:	mov word [bp + 24], @11193$string_malloc43A2025u2025u2025u0A#	; 5: 199 70 24 44 86

file_test$725:	; Parameter 18 p 8
x17974:	mov ax, [bp + 14]	; 3: 139 70 14
x17977:	mov [bp + 26], ax	; 3: 137 70 26

file_test$726:	; Parameter 18 total 10
x17980:	mov ax, [bp + 10]	; 3: 139 70 10
x17983:	mov [bp + 28], ax	; 3: 137 70 28

file_test$727:	; Parameter 18 endPtr 12
x17986:	mov ax, [bp + 16]	; 3: 139 70 16
x17989:	mov [bp + 30], ax	; 3: 137 70 30

file_test$728:	; Call 18 printf 0
x17992:	mov word [bp + 18], file_test$729	; 5: 199 70 18 91 70
x17997:	mov [bp + 20], bp	; 3: 137 110 20
x18000:	add bp, 18	; 3: 131 197 18
x18003:	mov di, bp	; 2: 137 239
x18005:	add di, 6	; 3: 131 199 6
x18008:	jmp printf	; 3: 233 169 198

file_test$729:	; PostCall 18

file_test$730:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$731:	; Parameter 18 p 6
x18011:	mov ax, [bp + 14]	; 3: 139 70 14
x18014:	mov [bp + 24], ax	; 3: 137 70 24

file_test$732:	; Parameter 18 total 8
x18017:	mov ax, [bp + 10]	; 3: 139 70 10
x18020:	mov [bp + 26], ax	; 3: 137 70 26

file_test$733:	; Parameter 18 1 10
x18023:	mov word [bp + 28], 1	; 5: 199 70 28 1 0

file_test$734:	; Parameter 18 inFilePtr 12
x18028:	mov ax, [bp + 6]	; 3: 139 70 6
x18031:	mov [bp + 30], ax	; 3: 137 70 30

file_test$735:	; Call 18 fread 0
x18034:	mov word [bp + 18], file_test$736	; 5: 199 70 18 128 70
x18039:	mov [bp + 20], bp	; 3: 137 110 20
x18042:	add bp, 18	; 3: 131 197 18
x18045:	jmp fread	; 3: 233 109 44

file_test$736:	; PostCall 18

file_test$737:	; Assign index 0
x18048:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

file_test$738:	; SignedGreaterThanEqual 751 index size
x18053:	mov ax, [bp + 8]	; 3: 139 70 8
x18056:	cmp [bp + 12], ax	; 3: 57 70 12
x18059:	jge file_test$751	; 2: 125 54

file_test$739:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$740:	; Parameter 18 string_index43A2025i3A20value2025f0A# 6
x18061:	mov word [bp + 24], @11205$string_index43A2025i3A20value2025f0A#	; 5: 199 70 24 63 86

file_test$741:	; Parameter 18 index 8
x18066:	mov ax, [bp + 12]	; 3: 139 70 12
x18069:	mov [bp + 26], ax	; 3: 137 70 26

file_test$742:	; SignedMultiply £temporary5000 index 8
x18072:	mov ax, [bp + 12]	; 3: 139 70 12
x18075:	xor dx, dx	; 2: 49 210
x18077:	imul word [@11207$int2$8#]	; 4: 247 46 85 86

file_test$743:	; BinaryAdd £temporary5001 p £temporary5000
x18081:	mov si, [bp + 14]	; 3: 139 118 14
x18084:	add si, ax	; 2: 1 198

file_test$744:	; Deref £temporary4999 -> £temporary5001 £temporary5001 0

file_test$745:	; PushFloat £temporary4999 -> £temporary5001
x18086:	fld qword [si]	; 2: 221 4

file_test$746:	; Parameter 18 £temporary4999 -> £temporary5001 10
x18088:	fstp qword [bp + 28]	; 3: 221 94 28

file_test$747:	; Call 18 printf 0
x18091:	mov word [bp + 18], file_test$748	; 5: 199 70 18 190 70
x18096:	mov [bp + 20], bp	; 3: 137 110 20
x18099:	add bp, 18	; 3: 131 197 18
x18102:	mov di, bp	; 2: 137 239
x18104:	add di, 10	; 3: 131 199 10
x18107:	jmp printf	; 3: 233 70 198

file_test$748:	; PostCall 18

file_test$749:	; Increment index
x18110:	inc word [bp + 12]	; 3: 255 70 12

file_test$750:	; Goto 738
x18113:	jmp file_test$738	; 2: 235 194

file_test$751:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$752:	; Parameter 18 string_0A# 6
x18115:	mov word [bp + 24], @11211$string_0A#	; 5: 199 70 24 87 86

file_test$753:	; Call 18 printf 0
x18120:	mov word [bp + 18], file_test$754	; 5: 199 70 18 216 70
x18125:	mov [bp + 20], bp	; 3: 137 110 20
x18128:	add bp, 18	; 3: 131 197 18
x18131:	mov di, bp	; 2: 137 239
x18133:	jmp printf	; 3: 233 44 198

file_test$754:	; PostCall 18

file_test$755:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$756:	; Parameter 18 p 6
x18136:	mov ax, [bp + 14]	; 3: 139 70 14
x18139:	mov [bp + 24], ax	; 3: 137 70 24

file_test$757:	; Call 18 free 0
x18142:	mov word [bp + 18], file_test$758	; 5: 199 70 18 236 70
x18147:	mov [bp + 20], bp	; 3: 137 110 20
x18150:	add bp, 18	; 3: 131 197 18
x18153:	jmp free	; 3: 233 80 46

file_test$758:	; PostCall 18

file_test$759:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$760:	; Parameter 10 inFilePtr 6
x18156:	mov ax, [bp + 6]	; 3: 139 70 6
x18159:	mov [bp + 16], ax	; 3: 137 70 16

file_test$761:	; Call 10 fclose 0
x18162:	mov word [bp + 10], file_test$762	; 5: 199 70 10 0 71
x18167:	mov [bp + 12], bp	; 3: 137 110 12
x18170:	add bp, 10	; 3: 131 197 10
x18173:	jmp fclose	; 3: 233 138 42

file_test$762:	; PostCall 10

file_test$763:	; Assign personVector[0]$name[0] 65
x18176:	mov byte [bp + 6], 65	; 4: 198 70 6 65

file_test$764:	; Assign personVector[0]$name[1] 100
x18180:	mov byte [bp + 7], 100	; 4: 198 70 7 100

file_test$765:	; Assign personVector[0]$name[2] 97
x18184:	mov byte [bp + 8], 97	; 4: 198 70 8 97

file_test$766:	; Assign personVector[0]$name[3] 109
x18188:	mov byte [bp + 9], 109	; 4: 198 70 9 109

file_test$767:	; Assign personVector[0]$name[4] 32
x18192:	mov byte [bp + 10], 32	; 4: 198 70 10 32

file_test$768:	; Assign personVector[0]$name[5] 66
x18196:	mov byte [bp + 11], 66	; 4: 198 70 11 66

file_test$769:	; Assign personVector[0]$name[6] 101
x18200:	mov byte [bp + 12], 101	; 4: 198 70 12 101

file_test$770:	; Assign personVector[0]$name[7] 114
x18204:	mov byte [bp + 13], 114	; 4: 198 70 13 114

file_test$771:	; Assign personVector[0]$name[8] 116
x18208:	mov byte [bp + 14], 116	; 4: 198 70 14 116

file_test$772:	; Assign personVector[0]$name[9] 105
x18212:	mov byte [bp + 15], 105	; 4: 198 70 15 105

file_test$773:	; Assign personVector[0]$name[10] 108
x18216:	mov byte [bp + 16], 108	; 4: 198 70 16 108

file_test$774:	; Assign personVector[0]$name[11] 115
x18220:	mov byte [bp + 17], 115	; 4: 198 70 17 115

file_test$775:	; Assign personVector[0]$name[12] 115
x18224:	mov byte [bp + 18], 115	; 4: 198 70 18 115

file_test$776:	; Assign personVector[0]$name[13] 111
x18228:	mov byte [bp + 19], 111	; 4: 198 70 19 111

file_test$777:	; Assign personVector[0]$name[14] 110
x18232:	mov byte [bp + 20], 110	; 4: 198 70 20 110

file_test$778:	; Assign personVector[0]$name[15] 0
x18236:	mov byte [bp + 21], 0	; 4: 198 70 21 0

file_test$779:	; Assign personVector[0]$phone 12345
x18240:	mov word [bp + 54], 12345	; 5: 199 70 54 57 48

file_test$780:	; Assign personVector[1]$name[0] 66
x18245:	mov byte [bp + 56], 66	; 4: 198 70 56 66

file_test$781:	; Assign personVector[1]$name[1] 101
x18249:	mov byte [bp + 57], 101	; 4: 198 70 57 101

file_test$782:	; Assign personVector[1]$name[2] 114
x18253:	mov byte [bp + 58], 114	; 4: 198 70 58 114

file_test$783:	; Assign personVector[1]$name[3] 116
x18257:	mov byte [bp + 59], 116	; 4: 198 70 59 116

file_test$784:	; Assign personVector[1]$name[4] 105
x18261:	mov byte [bp + 60], 105	; 4: 198 70 60 105

file_test$785:	; Assign personVector[1]$name[5] 108
x18265:	mov byte [bp + 61], 108	; 4: 198 70 61 108

file_test$786:	; Assign personVector[1]$name[6] 32
x18269:	mov byte [bp + 62], 32	; 4: 198 70 62 32

file_test$787:	; Assign personVector[1]$name[7] 67
x18273:	mov byte [bp + 63], 67	; 4: 198 70 63 67

file_test$788:	; Assign personVector[1]$name[8] 101
x18277:	mov byte [bp + 64], 101	; 4: 198 70 64 101

file_test$789:	; Assign personVector[1]$name[9] 97
x18281:	mov byte [bp + 65], 97	; 4: 198 70 65 97

file_test$790:	; Assign personVector[1]$name[10] 115
x18285:	mov byte [bp + 66], 115	; 4: 198 70 66 115

file_test$791:	; Assign personVector[1]$name[11] 97
x18289:	mov byte [bp + 67], 97	; 4: 198 70 67 97

file_test$792:	; Assign personVector[1]$name[12] 114
x18293:	mov byte [bp + 68], 114	; 4: 198 70 68 114

file_test$793:	; Assign personVector[1]$name[13] 115
x18297:	mov byte [bp + 69], 115	; 4: 198 70 69 115

file_test$794:	; Assign personVector[1]$name[14] 115
x18301:	mov byte [bp + 70], 115	; 4: 198 70 70 115

file_test$795:	; Assign personVector[1]$name[15] 111
x18305:	mov byte [bp + 71], 111	; 4: 198 70 71 111

file_test$796:	; Assign personVector[1]$name[16] 110
x18309:	mov byte [bp + 72], 110	; 4: 198 70 72 110

file_test$797:	; Assign personVector[1]$name[17] 0
x18313:	mov byte [bp + 73], 0	; 4: 198 70 73 0

file_test$798:	; Assign personVector[1]$phone 23456
x18317:	mov word [bp + 104], 23456	; 5: 199 70 104 160 91

file_test$799:	; Assign personVector[2]$name[0] 67
x18322:	mov byte [bp + 106], 67	; 4: 198 70 106 67

file_test$800:	; Assign personVector[2]$name[1] 101
x18326:	mov byte [bp + 107], 101	; 4: 198 70 107 101

file_test$801:	; Assign personVector[2]$name[2] 97
x18330:	mov byte [bp + 108], 97	; 4: 198 70 108 97

file_test$802:	; Assign personVector[2]$name[3] 115
x18334:	mov byte [bp + 109], 115	; 4: 198 70 109 115

file_test$803:	; Assign personVector[2]$name[4] 97
x18338:	mov byte [bp + 110], 97	; 4: 198 70 110 97

file_test$804:	; Assign personVector[2]$name[5] 114
x18342:	mov byte [bp + 111], 114	; 4: 198 70 111 114

file_test$805:	; Assign personVector[2]$name[6] 32
x18346:	mov byte [bp + 112], 32	; 4: 198 70 112 32

file_test$806:	; Assign personVector[2]$name[7] 68
x18350:	mov byte [bp + 113], 68	; 4: 198 70 113 68

file_test$807:	; Assign personVector[2]$name[8] 97
x18354:	mov byte [bp + 114], 97	; 4: 198 70 114 97

file_test$808:	; Assign personVector[2]$name[9] 118
x18358:	mov byte [bp + 115], 118	; 4: 198 70 115 118

file_test$809:	; Assign personVector[2]$name[10] 105
x18362:	mov byte [bp + 116], 105	; 4: 198 70 116 105

file_test$810:	; Assign personVector[2]$name[11] 100
x18366:	mov byte [bp + 117], 100	; 4: 198 70 117 100

file_test$811:	; Assign personVector[2]$name[12] 115
x18370:	mov byte [bp + 118], 115	; 4: 198 70 118 115

file_test$812:	; Assign personVector[2]$name[13] 115
x18374:	mov byte [bp + 119], 115	; 4: 198 70 119 115

file_test$813:	; Assign personVector[2]$name[14] 111
x18378:	mov byte [bp + 120], 111	; 4: 198 70 120 111

file_test$814:	; Assign personVector[2]$name[15] 110
x18382:	mov byte [bp + 121], 110	; 4: 198 70 121 110

file_test$815:	; Assign personVector[2]$name[16] 0
x18386:	mov byte [bp + 122], 0	; 4: 198 70 122 0

file_test$816:	; Assign personVector[2]$phone 24567
x18390:	mov word [bp + 154], 24567	; 6: 199 134 154 0 247 95

file_test$817:	; CallHeader 206 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$818:	; Parameter 206 string_Block2Ebin# 6
x18396:	mov word [bp + 212], @11392$string_Block2Ebin#	; 6: 199 134 212 0 89 86

file_test$819:	; Parameter 206 string_w# 8
x18402:	mov word [bp + 214], @11393$string_w#	; 6: 199 134 214 0 99 86

file_test$820:	; Call 206 fopen 0
x18408:	mov word [bp + 206], file_test$821	; 6: 199 134 206 0 249 71
x18414:	mov [bp + 208], bp	; 4: 137 174 208 0
x18418:	add bp, 206	; 4: 129 197 206 0
x18422:	jmp fopen	; 3: 233 232 17

file_test$821:	; PostCall 206

file_test$822:	; GetReturnValue £temporary5066

file_test$823:	; Assign outFilePtr £temporary5066
x18425:	mov [bp + 206], bx	; 4: 137 158 206 0

file_test$824:	; CallHeader 208 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$825:	; Parameter 208 string_Block2Ebin# 6
x18429:	mov word [bp + 214], @11396$string_Block2Ebin#	; 6: 199 134 214 0 101 86

file_test$826:	; Parameter 208 string_r# 8
x18435:	mov word [bp + 216], @11397$string_r#	; 6: 199 134 216 0 111 86

file_test$827:	; Call 208 fopen 0
x18441:	mov word [bp + 208], file_test$828	; 6: 199 134 208 0 26 72
x18447:	mov [bp + 210], bp	; 4: 137 174 210 0
x18451:	add bp, 208	; 4: 129 197 208 0
x18455:	jmp fopen	; 3: 233 199 17

file_test$828:	; PostCall 208

file_test$829:	; GetReturnValue £temporary5067

file_test$830:	; Assign inFilePtr £temporary5067
x18458:	mov [bp + 208], bx	; 4: 137 158 208 0

file_test$831:	; NotEqual 843 outFilePtr 0
x18462:	cmp word [bp + 206], 0	; 5: 131 190 206 0 0
x18467:	jne file_test$843	; 2: 117 70

file_test$832:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$833:	; Parameter 210 stderr 6
x18469:	mov ax, [stderr]	; 3: 161 136 77
x18472:	mov [bp + 216], ax	; 4: 137 134 216 0

file_test$834:	; Parameter 210 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x18476:	mov word [bp + 218], @11405$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 6: 199 134 218 0 113 86

file_test$835:	; Parameter 210 string_outFilePtr20213D20NULL# 10
x18482:	mov word [bp + 220], @11406$string_outFilePtr20213D20NULL#	; 6: 199 134 220 0 159 86

file_test$836:	; Parameter 210 string_C3A5CUsers5Cstefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x18488:	mov word [bp + 222], @11407$string_C3A5CUsers5Cstefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 6: 199 134 222 0 178 86

file_test$837:	; Parameter 210 284 14
x18494:	mov word [bp + 224], 284	; 6: 199 134 224 0 28 1

file_test$838:	; Call 210 fprintf 0
x18500:	mov word [bp + 210], file_test$839	; 6: 199 134 210 0 90 72
x18506:	mov [bp + 212], bp	; 4: 137 174 212 0
x18510:	add bp, 210	; 4: 129 197 210 0
x18514:	mov di, bp	; 2: 137 239
x18516:	add di, 6	; 3: 131 199 6
x18519:	jmp fprintf	; 3: 233 32 22

file_test$839:	; PostCall 210

file_test$840:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$841:	; Call 210 abort 0
x18522:	mov word [bp + 210], file_test$842	; 6: 199 134 210 0 107 72
x18528:	mov [bp + 212], bp	; 4: 137 174 212 0
x18532:	add bp, 210	; 4: 129 197 210 0
x18536:	jmp abort	; 3: 233 74 22

file_test$842:	; PostCall 210

file_test$843:	; NotEqual 855 inFilePtr 0
x18539:	cmp word [bp + 208], 0	; 5: 131 190 208 0 0
x18544:	jne file_test$855	; 2: 117 70

file_test$844:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$845:	; Parameter 210 stderr 6
x18546:	mov ax, [stderr]	; 3: 161 136 77
x18549:	mov [bp + 216], ax	; 4: 137 134 216 0

file_test$846:	; Parameter 210 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x18553:	mov word [bp + 218], @11417$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 6: 199 134 218 0 242 86

file_test$847:	; Parameter 210 string_inFilePtr20213D20NULL# 10
x18559:	mov word [bp + 220], @11418$string_inFilePtr20213D20NULL#	; 6: 199 134 220 0 32 87

file_test$848:	; Parameter 210 string_C3A5CUsers5Cstefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x18565:	mov word [bp + 222], @11419$string_C3A5CUsers5Cstefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 6: 199 134 222 0 50 87

file_test$849:	; Parameter 210 285 14
x18571:	mov word [bp + 224], 285	; 6: 199 134 224 0 29 1

file_test$850:	; Call 210 fprintf 0
x18577:	mov word [bp + 210], file_test$851	; 6: 199 134 210 0 167 72
x18583:	mov [bp + 212], bp	; 4: 137 174 212 0
x18587:	add bp, 210	; 4: 129 197 210 0
x18591:	mov di, bp	; 2: 137 239
x18593:	add di, 6	; 3: 131 199 6
x18596:	jmp fprintf	; 3: 233 211 21

file_test$851:	; PostCall 210

file_test$852:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$853:	; Call 210 abort 0
x18599:	mov word [bp + 210], file_test$854	; 6: 199 134 210 0 184 72
x18605:	mov [bp + 212], bp	; 4: 137 174 212 0
x18609:	add bp, 210	; 4: 129 197 210 0
x18613:	jmp abort	; 3: 233 253 21

file_test$854:	; PostCall 210

file_test$855:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$856:	; Parameter 210 personVector 6
x18616:	mov [bp + 216], bp	; 4: 137 174 216 0
x18620:	add word [bp + 216], 6	; 5: 131 134 216 0 6

file_test$857:	; Parameter 210 150 8
x18625:	mov word [bp + 218], 150	; 6: 199 134 218 0 150 0

file_test$858:	; Parameter 210 1 10
x18631:	mov word [bp + 220], 1	; 6: 199 134 220 0 1 0

file_test$859:	; Parameter 210 outFilePtr 12
x18637:	mov ax, [bp + 206]	; 4: 139 134 206 0
x18641:	mov [bp + 222], ax	; 4: 137 134 222 0

file_test$860:	; Call 210 fwrite 0
x18645:	mov word [bp + 210], file_test$861	; 6: 199 134 210 0 230 72
x18651:	mov [bp + 212], bp	; 4: 137 174 212 0
x18655:	add bp, 210	; 4: 129 197 210 0
x18659:	jmp fwrite	; 3: 233 196 41

file_test$861:	; PostCall 210

file_test$862:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$863:	; Parameter 210 outFilePtr 6
x18662:	mov ax, [bp + 206]	; 4: 139 134 206 0
x18666:	mov [bp + 216], ax	; 4: 137 134 216 0

file_test$864:	; Call 210 fclose 0
x18670:	mov word [bp + 210], file_test$865	; 6: 199 134 210 0 255 72
x18676:	mov [bp + 212], bp	; 4: 137 174 212 0
x18680:	add bp, 210	; 4: 129 197 210 0
x18684:	jmp fclose	; 3: 233 139 40

file_test$865:	; PostCall 210

file_test$866:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$867:	; Parameter 210 inFilePtr 6
x18687:	mov ax, [bp + 208]	; 4: 139 134 208 0
x18691:	mov [bp + 216], ax	; 4: 137 134 216 0

file_test$868:	; Call 210 feof 0
x18695:	mov word [bp + 210], file_test$869	; 6: 199 134 210 0 24 73
x18701:	mov [bp + 212], bp	; 4: 137 174 212 0
x18705:	add bp, 210	; 4: 129 197 210 0
x18709:	jmp feof	; 3: 233 174 21

file_test$869:	; PostCall 210

file_test$870:	; GetReturnValue £temporary5078

file_test$871:	; NotEqual 891 £temporary5078 0
x18712:	cmp bx, 0	; 3: 131 251 0
x18715:	jne file_test$891	; 2: 117 124

file_test$872:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$873:	; address £temporary5081 person
x18717:	mov si, bp	; 2: 137 238
x18719:	add si, 156	; 4: 129 198 156 0

file_test$874:	; Parameter 210 £temporary5081 6
x18723:	mov [bp + 216], si	; 4: 137 182 216 0

file_test$875:	; Parameter 210 50 8
x18727:	mov word [bp + 218], 50	; 6: 199 134 218 0 50 0

file_test$876:	; Parameter 210 1 10
x18733:	mov word [bp + 220], 1	; 6: 199 134 220 0 1 0

file_test$877:	; Parameter 210 inFilePtr 12
x18739:	mov ax, [bp + 208]	; 4: 139 134 208 0
x18743:	mov [bp + 222], ax	; 4: 137 134 222 0

file_test$878:	; Call 210 fread 0
x18747:	mov word [bp + 210], file_test$879	; 6: 199 134 210 0 76 73
x18753:	mov [bp + 212], bp	; 4: 137 174 212 0
x18757:	add bp, 210	; 4: 129 197 210 0
x18761:	jmp fread	; 3: 233 161 41

file_test$879:	; PostCall 210

file_test$880:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$881:	; Parameter 210 string_Name20203A2025s0A# 6
x18764:	mov word [bp + 216], @11444$string_Name20203A2025s0A#	; 6: 199 134 216 0 114 87

file_test$882:	; Parameter 210 person$name 8
x18770:	mov [bp + 218], bp	; 4: 137 174 218 0
x18774:	add word [bp + 218], 156	; 6: 129 134 218 0 156 0

file_test$883:	; Call 210 printf 0
x18780:	mov word [bp + 210], file_test$884	; 6: 199 134 210 0 114 73
x18786:	mov [bp + 212], bp	; 4: 137 174 212 0
x18790:	add bp, 210	; 4: 129 197 210 0
x18794:	mov di, bp	; 2: 137 239
x18796:	add di, 2	; 3: 131 199 2
x18799:	jmp printf	; 3: 233 146 195

file_test$884:	; PostCall 210

file_test$885:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$886:	; Parameter 210 string_Phone203A2025d0A# 6
x18802:	mov word [bp + 216], @11447$string_Phone203A2025d0A#	; 6: 199 134 216 0 126 87

file_test$887:	; Parameter 210 person$phone 8
x18808:	mov ax, [bp + 204]	; 4: 139 134 204 0
x18812:	mov [bp + 218], ax	; 4: 137 134 218 0

file_test$888:	; Call 210 printf 0
x18816:	mov word [bp + 210], file_test$889	; 6: 199 134 210 0 150 73
x18822:	mov [bp + 212], bp	; 4: 137 174 212 0
x18826:	add bp, 210	; 4: 129 197 210 0
x18830:	mov di, bp	; 2: 137 239
x18832:	add di, 2	; 3: 131 199 2
x18835:	jmp printf	; 3: 233 110 195

file_test$889:	; PostCall 210

file_test$890:	; Goto 866
x18838:	jmp file_test$866	; 3: 233 102 255

file_test$891:	; CallHeader 210 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$892:	; Parameter 210 inFilePtr 6
x18841:	mov ax, [bp + 208]	; 4: 139 134 208 0
x18845:	mov [bp + 216], ax	; 4: 137 134 216 0

file_test$893:	; Call 210 fclose 0
x18849:	mov word [bp + 210], file_test$894	; 6: 199 134 210 0 178 73
x18855:	mov [bp + 212], bp	; 4: 137 174 212 0
x18859:	add bp, 210	; 4: 129 197 210 0
x18863:	jmp fclose	; 3: 233 216 39

file_test$894:	; PostCall 210

file_test$895:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$896:	; Parameter 6 string_outx2Etxt# 6
x18866:	mov word [bp + 12], @11451$string_outx2Etxt#	; 5: 199 70 12 138 87

file_test$897:	; Parameter 6 string_r# 8
x18871:	mov word [bp + 14], @11452$string_r#	; 5: 199 70 14 147 87

file_test$898:	; Call 6 fopen 0
x18876:	mov word [bp + 6], file_test$899	; 5: 199 70 6 202 73
x18881:	mov [bp + 8], bp	; 3: 137 110 8
x18884:	add bp, 6	; 3: 131 197 6
x18887:	jmp fopen	; 3: 233 23 16

file_test$899:	; PostCall 6

file_test$900:	; GetReturnValue £temporary5088

file_test$901:	; Assign inFilePtr £temporary5088
x18890:	mov [bp + 6], bx	; 3: 137 94 6

file_test$902:	; NotEqual 914 inFilePtr 0
x18893:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x18897:	jne file_test$914	; 2: 117 59

file_test$903:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$904:	; Parameter 8 stderr 6
x18899:	mov ax, [stderr]	; 3: 161 136 77
x18902:	mov [bp + 14], ax	; 3: 137 70 14

file_test$905:	; Parameter 8 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x18905:	mov word [bp + 16], @11460$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 16 149 87

file_test$906:	; Parameter 8 string_inFilePtr20213D20NULL# 10
x18910:	mov word [bp + 18], @11461$string_inFilePtr20213D20NULL#	; 5: 199 70 18 195 87

file_test$907:	; Parameter 8 string_C3A5CUsers5Cstefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec# 12
x18915:	mov word [bp + 20], @11462$string_C3A5CUsers5Cstefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#	; 5: 199 70 20 213 87

file_test$908:	; Parameter 8 301 14
x18920:	mov word [bp + 22], 301	; 5: 199 70 22 45 1

file_test$909:	; Call 8 fprintf 0
x18925:	mov word [bp + 8], file_test$910	; 5: 199 70 8 0 74
x18930:	mov [bp + 10], bp	; 3: 137 110 10
x18933:	add bp, 8	; 3: 131 197 8
x18936:	mov di, bp	; 2: 137 239
x18938:	add di, 6	; 3: 131 199 6
x18941:	jmp fprintf	; 3: 233 122 20

file_test$910:	; PostCall 8

file_test$911:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$912:	; Call 8 abort 0
x18944:	mov word [bp + 8], file_test$913	; 5: 199 70 8 14 74
x18949:	mov [bp + 10], bp	; 3: 137 110 10
x18952:	add bp, 8	; 3: 131 197 8
x18955:	jmp abort	; 3: 233 167 20

file_test$913:	; PostCall 8

file_test$914:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$915:	; Parameter 8 inFilePtr 6
x18958:	mov ax, [bp + 6]	; 3: 139 70 6
x18961:	mov [bp + 14], ax	; 3: 137 70 14

file_test$916:	; Parameter 8 0 8
x18964:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

file_test$917:	; Parameter 8 2 10
x18969:	mov word [bp + 18], 2	; 5: 199 70 18 2 0

file_test$918:	; Call 8 fseek 0
x18974:	mov word [bp + 8], file_test$919	; 5: 199 70 8 44 74
x18979:	mov [bp + 10], bp	; 3: 137 110 10
x18982:	add bp, 8	; 3: 131 197 8
x18985:	jmp fseek	; 3: 233 169 19

file_test$919:	; PostCall 8

file_test$920:	; GetReturnValue £temporary5093

file_test$921:	; Assign size £temporary5093
x18988:	mov [bp + 8], bx	; 3: 137 94 8

file_test$922:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$923:	; Parameter 10 inFilePtr 6
x18991:	mov ax, [bp + 6]	; 3: 139 70 6
x18994:	mov [bp + 16], ax	; 3: 137 70 16

file_test$924:	; Call 10 ftell 0
x18997:	mov word [bp + 10], file_test$925	; 5: 199 70 10 67 74
x19002:	mov [bp + 12], bp	; 3: 137 110 12
x19005:	add bp, 10	; 3: 131 197 10
x19008:	jmp ftell	; 3: 233 154 43

file_test$925:	; PostCall 10

file_test$926:	; GetReturnValue £temporary5094

file_test$927:	; SignedLessThanEqual 945 £temporary5094 1
x19011:	cmp bx, 1	; 3: 131 251 1
x19014:	jle file_test$945	; 2: 126 73

file_test$928:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$929:	; Parameter 10 inFilePtr 6
x19016:	mov ax, [bp + 6]	; 3: 139 70 6
x19019:	mov [bp + 16], ax	; 3: 137 70 16

file_test$930:	; Decrement size
x19022:	dec word [bp + 8]	; 3: 255 78 8

file_test$931:	; Parameter 10 size 8
x19025:	mov ax, [bp + 8]	; 3: 139 70 8
x19028:	mov [bp + 18], ax	; 3: 137 70 18

file_test$932:	; Parameter 10 0 10
x19031:	mov word [bp + 20], 0	; 5: 199 70 20 0 0

file_test$933:	; Call 10 fseek 0
x19036:	mov word [bp + 10], file_test$934	; 5: 199 70 10 106 74
x19041:	mov [bp + 12], bp	; 3: 137 110 12
x19044:	add bp, 10	; 3: 131 197 10
x19047:	jmp fseek	; 3: 233 107 19

file_test$934:	; PostCall 10

file_test$935:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$936:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$937:	; Parameter 10 inFilePtr 6
x19050:	mov ax, [bp + 6]	; 3: 139 70 6
x19053:	mov [bp + 16], ax	; 3: 137 70 16

file_test$938:	; Call 10 fgetc 0
x19056:	mov word [bp + 10], file_test$939	; 5: 199 70 10 126 74
x19061:	mov [bp + 12], bp	; 3: 137 110 12
x19064:	add bp, 10	; 3: 131 197 10
x19067:	jmp fgetc	; 3: 233 136 43

file_test$939:	; PostCall 10

file_test$940:	; GetReturnValue £temporary5098

file_test$941:	; Parameter 10 £temporary5098 6
x19070:	mov [bp + 16], bx	; 3: 137 94 16

file_test$942:	; Call 10 putchar 0
x19073:	mov word [bp + 10], file_test$943	; 5: 199 70 10 143 74
x19078:	mov [bp + 12], bp	; 3: 137 110 12
x19081:	add bp, 10	; 3: 131 197 10
x19084:	jmp putchar	; 3: 233 207 43

file_test$943:	; PostCall 10

file_test$944:	; Goto 922
x19087:	jmp file_test$922	; 2: 235 158

file_test$945:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$946:	; Parameter 8 inFilePtr 6
x19089:	mov ax, [bp + 6]	; 3: 139 70 6
x19092:	mov [bp + 14], ax	; 3: 137 70 14

file_test$947:	; Call 8 fclose 0
x19095:	mov word [bp + 8], file_test$948	; 5: 199 70 8 165 74
x19100:	mov [bp + 10], bp	; 3: 137 110 10
x19103:	add bp, 8	; 3: 131 197 8
x19106:	jmp fclose	; 3: 233 229 38

file_test$948:	; PostCall 8

file_test$949:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$950:	; Parameter 6 string_fileexists2022X223A2025s0A# 6
x19109:	mov word [bp + 12], @11487$string_fileexists2022X223A2025s0A#	; 5: 199 70 12 21 88

file_test$951:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$952:	; Parameter 6 string_X# 14
x19114:	mov word [bp + 20], @11488$string_X#	; 5: 199 70 20 41 88

file_test$953:	; Call 6 fileexists 8
x19119:	mov word [bp + 14], file_test$954	; 5: 199 70 14 189 74
x19124:	mov [bp + 16], bp	; 3: 137 110 16
x19127:	add bp, 14	; 3: 131 197 14
x19130:	jmp fileexists	; 3: 233 99 19

file_test$954:	; PostCall 6

file_test$955:	; GetReturnValue £temporary5101

file_test$956:	; Equal 959 £temporary5101 0
x19133:	cmp bx, 0	; 3: 131 251 0
x19136:	je file_test$959	; 2: 116 5

file_test$957:	; Assign £temporary5106 string_Yes#
x19138:	mov ax, @11490$string_Yes#	; 3: 184 43 88

file_test$958:	; Goto 960
x19141:	jmp file_test$960	; 2: 235 3

file_test$959:	; Assign £temporary5106 string_No#
x19143:	mov ax, @11491$string_No#	; 3: 184 47 88

file_test$960:	; Parameter 6 £temporary5106 8
x19146:	mov [bp + 14], ax	; 3: 137 70 14

file_test$961:	; Call 6 printf 0
x19149:	mov word [bp + 6], file_test$962	; 5: 199 70 6 224 74
x19154:	mov [bp + 8], bp	; 3: 137 110 8
x19157:	add bp, 6	; 3: 131 197 6
x19160:	mov di, bp	; 2: 137 239
x19162:	add di, 2	; 3: 131 199 2
x19165:	jmp printf	; 3: 233 36 194

file_test$962:	; PostCall 6

file_test$963:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$964:	; Parameter 6 string_fileexists2022Y223A2025s0A# 6
x19168:	mov word [bp + 12], @11501$string_fileexists2022Y223A2025s0A#	; 5: 199 70 12 50 88

file_test$965:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$966:	; Parameter 6 string_Y# 14
x19173:	mov word [bp + 20], @11502$string_Y#	; 5: 199 70 20 70 88

file_test$967:	; Call 6 fileexists 8
x19178:	mov word [bp + 14], file_test$968	; 5: 199 70 14 248 74
x19183:	mov [bp + 16], bp	; 3: 137 110 16
x19186:	add bp, 14	; 3: 131 197 14
x19189:	jmp fileexists	; 3: 233 40 19

file_test$968:	; PostCall 6

file_test$969:	; GetReturnValue £temporary5108

file_test$970:	; Equal 973 £temporary5108 0
x19192:	cmp bx, 0	; 3: 131 251 0
x19195:	je file_test$973	; 2: 116 5

file_test$971:	; Assign £temporary5113 string_Yes#
x19197:	mov ax, @11504$string_Yes#	; 3: 184 72 88

file_test$972:	; Goto 974
x19200:	jmp file_test$974	; 2: 235 3

file_test$973:	; Assign £temporary5113 string_No#
x19202:	mov ax, @11505$string_No#	; 3: 184 76 88

file_test$974:	; Parameter 6 £temporary5113 8
x19205:	mov [bp + 14], ax	; 3: 137 70 14

file_test$975:	; Call 6 printf 0
x19208:	mov word [bp + 6], file_test$976	; 5: 199 70 6 27 75
x19213:	mov [bp + 8], bp	; 3: 137 110 8
x19216:	add bp, 6	; 3: 131 197 6
x19219:	mov di, bp	; 2: 137 239
x19221:	add di, 2	; 3: 131 199 2
x19224:	jmp printf	; 3: 233 233 193

file_test$976:	; PostCall 6

file_test$977:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$978:	; Parameter 6 string_fileexists2022Main2Easm223A2025s0A# 6
x19227:	mov word [bp + 12], @11515$string_fileexists2022Main2Easm223A2025s0A#	; 5: 199 70 12 79 88

file_test$979:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$980:	; Parameter 6 string_Main2Easm# 14
x19232:	mov word [bp + 20], @11516$string_Main2Easm#	; 5: 199 70 20 106 88

file_test$981:	; Call 6 fileexists 8
x19237:	mov word [bp + 14], file_test$982	; 5: 199 70 14 51 75
x19242:	mov [bp + 16], bp	; 3: 137 110 16
x19245:	add bp, 14	; 3: 131 197 14
x19248:	jmp fileexists	; 3: 233 237 18

file_test$982:	; PostCall 6

file_test$983:	; GetReturnValue £temporary5115

file_test$984:	; Equal 987 £temporary5115 0
x19251:	cmp bx, 0	; 3: 131 251 0
x19254:	je file_test$987	; 2: 116 5

file_test$985:	; Assign £temporary5120 string_Yes#
x19256:	mov ax, @11518$string_Yes#	; 3: 184 115 88

file_test$986:	; Goto 988
x19259:	jmp file_test$988	; 2: 235 3

file_test$987:	; Assign £temporary5120 string_No#
x19261:	mov ax, @11519$string_No#	; 3: 184 119 88

file_test$988:	; Parameter 6 £temporary5120 8
x19264:	mov [bp + 14], ax	; 3: 137 70 14

file_test$989:	; Call 6 printf 0
x19267:	mov word [bp + 6], file_test$990	; 5: 199 70 6 86 75
x19272:	mov [bp + 8], bp	; 3: 137 110 8
x19275:	add bp, 6	; 3: 131 197 6
x19278:	mov di, bp	; 2: 137 239
x19280:	add di, 2	; 3: 131 199 2
x19283:	jmp printf	; 3: 233 174 193

file_test$990:	; PostCall 6

file_test$991:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$992:	; Parameter 6 string_fileexists2022MainX2Easm223A2025s0A# 6
x19286:	mov word [bp + 12], @11529$string_fileexists2022MainX2Easm223A2025s0A#	; 5: 199 70 12 122 88

file_test$993:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$994:	; Parameter 6 string_MainX2Easm# 14
x19291:	mov word [bp + 20], @11530$string_MainX2Easm#	; 5: 199 70 20 150 88

file_test$995:	; Call 6 fileexists 8
x19296:	mov word [bp + 14], file_test$996	; 5: 199 70 14 110 75
x19301:	mov [bp + 16], bp	; 3: 137 110 16
x19304:	add bp, 14	; 3: 131 197 14
x19307:	jmp fileexists	; 3: 233 178 18

file_test$996:	; PostCall 6

file_test$997:	; GetReturnValue £temporary5122

file_test$998:	; Equal 1001 £temporary5122 0
x19310:	cmp bx, 0	; 3: 131 251 0
x19313:	je file_test$1001	; 2: 116 5

file_test$999:	; Assign £temporary5127 string_Yes#
x19315:	mov ax, @11532$string_Yes#	; 3: 184 160 88

file_test$1000:	; Goto 1002
x19318:	jmp file_test$1002	; 2: 235 3

file_test$1001:	; Assign £temporary5127 string_No#
x19320:	mov ax, @11533$string_No#	; 3: 184 164 88

file_test$1002:	; Parameter 6 £temporary5127 8
x19323:	mov [bp + 14], ax	; 3: 137 70 14

file_test$1003:	; Call 6 printf 0
x19326:	mov word [bp + 6], file_test$1004	; 5: 199 70 6 145 75
x19331:	mov [bp + 8], bp	; 3: 137 110 8
x19334:	add bp, 6	; 3: 131 197 6
x19337:	mov di, bp	; 2: 137 239
x19339:	add di, 2	; 3: 131 199 2
x19342:	jmp printf	; 3: 233 115 193

file_test$1004:	; PostCall 6

file_test$1005:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1006:	; Parameter 6 string_fileexists2022Main2Ec223A2025s0A# 6
x19345:	mov word [bp + 12], @11543$string_fileexists2022Main2Ec223A2025s0A#	; 5: 199 70 12 167 88

file_test$1007:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1008:	; Parameter 6 string_Main2Ec# 14
x19350:	mov word [bp + 20], @11544$string_Main2Ec#	; 5: 199 70 20 192 88

file_test$1009:	; Call 6 fileexists 8
x19355:	mov word [bp + 14], file_test$1010	; 5: 199 70 14 169 75
x19360:	mov [bp + 16], bp	; 3: 137 110 16
x19363:	add bp, 14	; 3: 131 197 14
x19366:	jmp fileexists	; 3: 233 119 18

file_test$1010:	; PostCall 6

file_test$1011:	; GetReturnValue £temporary5129

file_test$1012:	; Equal 1015 £temporary5129 0
x19369:	cmp bx, 0	; 3: 131 251 0
x19372:	je file_test$1015	; 2: 116 5

file_test$1013:	; Assign £temporary5134 string_Yes#
x19374:	mov ax, @11546$string_Yes#	; 3: 184 199 88

file_test$1014:	; Goto 1016
x19377:	jmp file_test$1016	; 2: 235 3

file_test$1015:	; Assign £temporary5134 string_No#
x19379:	mov ax, @11547$string_No#	; 3: 184 203 88

file_test$1016:	; Parameter 6 £temporary5134 8
x19382:	mov [bp + 14], ax	; 3: 137 70 14

file_test$1017:	; Call 6 printf 0
x19385:	mov word [bp + 6], file_test$1018	; 5: 199 70 6 204 75
x19390:	mov [bp + 8], bp	; 3: 137 110 8
x19393:	add bp, 6	; 3: 131 197 6
x19396:	mov di, bp	; 2: 137 239
x19398:	add di, 2	; 3: 131 199 2
x19401:	jmp printf	; 3: 233 56 193

file_test$1018:	; PostCall 6

file_test$1019:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1020:	; Parameter 6 string_fileexists2022MainX2Ec223A2025s0A# 6
x19404:	mov word [bp + 12], @11557$string_fileexists2022MainX2Ec223A2025s0A#	; 5: 199 70 12 206 88

file_test$1021:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1022:	; Parameter 6 string_MainX2Ec# 14
x19409:	mov word [bp + 20], @11558$string_MainX2Ec#	; 5: 199 70 20 232 88

file_test$1023:	; Call 6 fileexists 8
x19414:	mov word [bp + 14], file_test$1024	; 5: 199 70 14 228 75
x19419:	mov [bp + 16], bp	; 3: 137 110 16
x19422:	add bp, 14	; 3: 131 197 14
x19425:	jmp fileexists	; 3: 233 60 18

file_test$1024:	; PostCall 6

file_test$1025:	; GetReturnValue £temporary5136

file_test$1026:	; Equal 1029 £temporary5136 0
x19428:	cmp bx, 0	; 3: 131 251 0
x19431:	je file_test$1029	; 2: 116 5

file_test$1027:	; Assign £temporary5141 string_Yes#
x19433:	mov ax, @11560$string_Yes#	; 3: 184 240 88

file_test$1028:	; Goto 1030
x19436:	jmp file_test$1030	; 2: 235 3

file_test$1029:	; Assign £temporary5141 string_No#
x19438:	mov ax, @11561$string_No#	; 3: 184 244 88

file_test$1030:	; Parameter 6 £temporary5141 8
x19441:	mov [bp + 14], ax	; 3: 137 70 14

file_test$1031:	; Call 6 printf 0
x19444:	mov word [bp + 6], file_test$1032	; 5: 199 70 6 7 76
x19449:	mov [bp + 8], bp	; 3: 137 110 8
x19452:	add bp, 6	; 3: 131 197 6
x19455:	mov di, bp	; 2: 137 239
x19457:	add di, 2	; 3: 131 199 2
x19460:	jmp printf	; 3: 233 253 192

file_test$1032:	; PostCall 6

file_test$1033:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1034:	; Parameter 6 string_fileexists2022File2Ec223A2025s0A# 6
x19463:	mov word [bp + 12], @11571$string_fileexists2022File2Ec223A2025s0A#	; 5: 199 70 12 247 88

file_test$1035:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1036:	; Parameter 6 string_File2Ec# 14
x19468:	mov word [bp + 20], @11572$string_File2Ec#	; 5: 199 70 20 16 89

file_test$1037:	; Call 6 fileexists 8
x19473:	mov word [bp + 14], file_test$1038	; 5: 199 70 14 31 76
x19478:	mov [bp + 16], bp	; 3: 137 110 16
x19481:	add bp, 14	; 3: 131 197 14
x19484:	jmp fileexists	; 3: 233 1 18

file_test$1038:	; PostCall 6

file_test$1039:	; GetReturnValue £temporary5143

file_test$1040:	; Equal 1043 £temporary5143 0
x19487:	cmp bx, 0	; 3: 131 251 0
x19490:	je file_test$1043	; 2: 116 5

file_test$1041:	; Assign £temporary5148 string_Yes#
x19492:	mov ax, @11574$string_Yes#	; 3: 184 23 89

file_test$1042:	; Goto 1044
x19495:	jmp file_test$1044	; 2: 235 3

file_test$1043:	; Assign £temporary5148 string_No#
x19497:	mov ax, @11575$string_No#	; 3: 184 27 89

file_test$1044:	; Parameter 6 £temporary5148 8
x19500:	mov [bp + 14], ax	; 3: 137 70 14

file_test$1045:	; Call 6 printf 0
x19503:	mov word [bp + 6], file_test$1046	; 5: 199 70 6 66 76
x19508:	mov [bp + 8], bp	; 3: 137 110 8
x19511:	add bp, 6	; 3: 131 197 6
x19514:	mov di, bp	; 2: 137 239
x19516:	add di, 2	; 3: 131 199 2
x19519:	jmp printf	; 3: 233 194 192

file_test$1046:	; PostCall 6

file_test$1047:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1048:	; Parameter 6 string_fileexists2022File2Ex223A2025s0A# 6
x19522:	mov word [bp + 12], @11585$string_fileexists2022File2Ex223A2025s0A#	; 5: 199 70 12 30 89

file_test$1049:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1050:	; Parameter 6 string_File2Ex# 14
x19527:	mov word [bp + 20], @11586$string_File2Ex#	; 5: 199 70 20 55 89

file_test$1051:	; Call 6 fileexists 8
x19532:	mov word [bp + 14], file_test$1052	; 5: 199 70 14 90 76
x19537:	mov [bp + 16], bp	; 3: 137 110 16
x19540:	add bp, 14	; 3: 131 197 14
x19543:	jmp fileexists	; 3: 233 198 17

file_test$1052:	; PostCall 6

file_test$1053:	; GetReturnValue £temporary5150

file_test$1054:	; Equal 1057 £temporary5150 0
x19546:	cmp bx, 0	; 3: 131 251 0
x19549:	je file_test$1057	; 2: 116 5

file_test$1055:	; Assign £temporary5155 string_Yes#
x19551:	mov ax, @11588$string_Yes#	; 3: 184 62 89

file_test$1056:	; Goto 1058
x19554:	jmp file_test$1058	; 2: 235 3

file_test$1057:	; Assign £temporary5155 string_No#
x19556:	mov ax, @11589$string_No#	; 3: 184 66 89

file_test$1058:	; Parameter 6 £temporary5155 8
x19559:	mov [bp + 14], ax	; 3: 137 70 14

file_test$1059:	; Call 6 printf 0
x19562:	mov word [bp + 6], file_test$1060	; 5: 199 70 6 125 76
x19567:	mov [bp + 8], bp	; 3: 137 110 8
x19570:	add bp, 6	; 3: 131 197 6
x19573:	mov di, bp	; 2: 137 239
x19575:	add di, 2	; 3: 131 199 2
x19578:	jmp printf	; 3: 233 135 192

file_test$1060:	; PostCall 6

file_test$1061:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1062:	; Parameter 6 string_fileexists2022File2Eh223A2025s0A# 6
x19581:	mov word [bp + 12], @11599$string_fileexists2022File2Eh223A2025s0A#	; 5: 199 70 12 69 89

file_test$1063:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1064:	; Parameter 6 string_File2Eh# 14
x19586:	mov word [bp + 20], @11600$string_File2Eh#	; 5: 199 70 20 94 89

file_test$1065:	; Call 6 fileexists 8
x19591:	mov word [bp + 14], file_test$1066	; 5: 199 70 14 149 76
x19596:	mov [bp + 16], bp	; 3: 137 110 16
x19599:	add bp, 14	; 3: 131 197 14
x19602:	jmp fileexists	; 3: 233 139 17

file_test$1066:	; PostCall 6

file_test$1067:	; GetReturnValue £temporary5157

file_test$1068:	; Equal 1071 £temporary5157 0
x19605:	cmp bx, 0	; 3: 131 251 0
x19608:	je file_test$1071	; 2: 116 5

file_test$1069:	; Assign £temporary5162 string_Yes#
x19610:	mov ax, @11602$string_Yes#	; 3: 184 101 89

file_test$1070:	; Goto 1072
x19613:	jmp file_test$1072	; 2: 235 3

file_test$1071:	; Assign £temporary5162 string_No#
x19615:	mov ax, @11603$string_No#	; 3: 184 105 89

file_test$1072:	; Parameter 6 £temporary5162 8
x19618:	mov [bp + 14], ax	; 3: 137 70 14

file_test$1073:	; Call 6 printf 0
x19621:	mov word [bp + 6], file_test$1074	; 5: 199 70 6 184 76
x19626:	mov [bp + 8], bp	; 3: 137 110 8
x19629:	add bp, 6	; 3: 131 197 6
x19632:	mov di, bp	; 2: 137 239
x19634:	add di, 2	; 3: 131 199 2
x19637:	jmp printf	; 3: 233 76 192

file_test$1074:	; PostCall 6

file_test$1075:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1076:	; Parameter 6 string_fileexists2022File2Ey223A2025s0A# 6
x19640:	mov word [bp + 12], @11613$string_fileexists2022File2Ey223A2025s0A#	; 5: 199 70 12 108 89

file_test$1077:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1078:	; Parameter 6 string_File2Ey# 14
x19645:	mov word [bp + 20], @11614$string_File2Ey#	; 5: 199 70 20 133 89

file_test$1079:	; Call 6 fileexists 8
x19650:	mov word [bp + 14], file_test$1080	; 5: 199 70 14 208 76
x19655:	mov [bp + 16], bp	; 3: 137 110 16
x19658:	add bp, 14	; 3: 131 197 14
x19661:	jmp fileexists	; 3: 233 80 17

file_test$1080:	; PostCall 6

file_test$1081:	; GetReturnValue £temporary5164

file_test$1082:	; Equal 1085 £temporary5164 0
x19664:	cmp bx, 0	; 3: 131 251 0
x19667:	je file_test$1085	; 2: 116 5

file_test$1083:	; Assign £temporary5169 string_Yes#
x19669:	mov ax, @11616$string_Yes#	; 3: 184 140 89

file_test$1084:	; Goto 1086
x19672:	jmp file_test$1086	; 2: 235 3

file_test$1085:	; Assign £temporary5169 string_No#
x19674:	mov ax, @11617$string_No#	; 3: 184 144 89

file_test$1086:	; Parameter 6 £temporary5169 8
x19677:	mov [bp + 14], ax	; 3: 137 70 14

file_test$1087:	; Call 6 printf 0
x19680:	mov word [bp + 6], file_test$1088	; 5: 199 70 6 243 76
x19685:	mov [bp + 8], bp	; 3: 137 110 8
x19688:	add bp, 6	; 3: 131 197 6
x19691:	mov di, bp	; 2: 137 239
x19693:	add di, 2	; 3: 131 199 2
x19696:	jmp printf	; 3: 233 17 192

file_test$1088:	; PostCall 6

file_test$1089:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1090:	; Parameter 6 string_fileexists2022File2Ep223A2025s0A# 6
x19699:	mov word [bp + 12], @11627$string_fileexists2022File2Ep223A2025s0A#	; 5: 199 70 12 147 89

file_test$1091:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1092:	; Parameter 6 string_File2Ep# 14
x19704:	mov word [bp + 20], @11628$string_File2Ep#	; 5: 199 70 20 172 89

file_test$1093:	; Call 6 fileexists 8
x19709:	mov word [bp + 14], file_test$1094	; 5: 199 70 14 11 77
x19714:	mov [bp + 16], bp	; 3: 137 110 16
x19717:	add bp, 14	; 3: 131 197 14
x19720:	jmp fileexists	; 3: 233 21 17

file_test$1094:	; PostCall 6

file_test$1095:	; GetReturnValue £temporary5171

file_test$1096:	; Equal 1099 £temporary5171 0
x19723:	cmp bx, 0	; 3: 131 251 0
x19726:	je file_test$1099	; 2: 116 5

file_test$1097:	; Assign £temporary5176 string_Yes#
x19728:	mov ax, @11630$string_Yes#	; 3: 184 179 89

file_test$1098:	; Goto 1100
x19731:	jmp file_test$1100	; 2: 235 3

file_test$1099:	; Assign £temporary5176 string_No#
x19733:	mov ax, @11631$string_No#	; 3: 184 183 89

file_test$1100:	; Parameter 6 £temporary5176 8
x19736:	mov [bp + 14], ax	; 3: 137 70 14

file_test$1101:	; Call 6 printf 0
x19739:	mov word [bp + 6], file_test$1102	; 5: 199 70 6 46 77
x19744:	mov [bp + 8], bp	; 3: 137 110 8
x19747:	add bp, 6	; 3: 131 197 6
x19750:	mov di, bp	; 2: 137 239
x19752:	add di, 2	; 3: 131 199 2
x19755:	jmp printf	; 3: 233 214 191

file_test$1102:	; PostCall 6

file_test$1103:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1104:	; Parameter 6 string_fileexists2022File2Ez223A2025s0A# 6
x19758:	mov word [bp + 12], @11641$string_fileexists2022File2Ez223A2025s0A#	; 5: 199 70 12 186 89

file_test$1105:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

file_test$1106:	; Parameter 6 string_File2Ez# 14
x19763:	mov word [bp + 20], @11642$string_File2Ez#	; 5: 199 70 20 211 89

file_test$1107:	; Call 6 fileexists 8
x19768:	mov word [bp + 14], file_test$1108	; 5: 199 70 14 70 77
x19773:	mov [bp + 16], bp	; 3: 137 110 16
x19776:	add bp, 14	; 3: 131 197 14
x19779:	jmp fileexists	; 3: 233 218 16

file_test$1108:	; PostCall 6

file_test$1109:	; GetReturnValue £temporary5178

file_test$1110:	; Equal 1113 £temporary5178 0
x19782:	cmp bx, 0	; 3: 131 251 0
x19785:	je file_test$1113	; 2: 116 5

file_test$1111:	; Assign £temporary5183 string_Yes#
x19787:	mov ax, @11644$string_Yes#	; 3: 184 218 89

file_test$1112:	; Goto 1114
x19790:	jmp file_test$1114	; 2: 235 3

file_test$1113:	; Assign £temporary5183 string_No#
x19792:	mov ax, @11645$string_No#	; 3: 184 222 89

file_test$1114:	; Parameter 6 £temporary5183 8
x19795:	mov [bp + 14], ax	; 3: 137 70 14

file_test$1115:	; Call 6 printf 0
x19798:	mov word [bp + 6], file_test$1116	; 5: 199 70 6 105 77
x19803:	mov [bp + 8], bp	; 3: 137 110 8
x19806:	add bp, 6	; 3: 131 197 6
x19809:	mov di, bp	; 2: 137 239
x19811:	add di, 2	; 3: 131 199 2
x19814:	jmp printf	; 3: 233 155 191

file_test$1116:	; PostCall 6

file_test$1117:	; Return 0
x19817:	mov ax, [bp]	; 3: 139 70 0
x19820:	mov di, [bp + 4]	; 3: 139 126 4
x19823:	mov bp, [bp + 2]	; 3: 139 110 2
x19826:	jmp ax	; 2: 255 224

file_test$1118:	; FunctionEnd file_test

@10693$string_in2Etxt#:
x19828:	db "in.txt", 0	; 7: 105 110 46 116 120 116 0

@10694$string_r#:
x19835:	db "r", 0	; 2: 114 0

@10697$string_outX2Etxt#:
x19837:	db "outX.txt", 0	; 9: 111 117 116 88 46 116 120 116 0

@10698$string_w#:
x19846:	db "w", 0	; 2: 119 0

stderr:
x19848:	dw g_fileArray + 58	; 2: 160 13

@10706$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x19850:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@10707$string_inFilePtr20213D20NULL#:
x19896:	db "inFilePtr != NULL", 0	; 18: 105 110 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@10708$string_C3A5CUsers5Cstefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x19914:	db "C:\Users\stefa\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 64: 67 58 92 85 115 101 114 115 92 115 116 101 102 97 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@10718$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x19978:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@10719$string_outFilePtr20213D20NULL#:
x20024:	db "outFilePtr != NULL", 0	; 19: 111 117 116 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@10720$string_C3A5CUsers5Cstefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x20043:	db "C:\Users\stefa\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 64: 67 58 92 85 115 101 114 115 92 115 116 101 102 97 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@10730$string_25lf#:
x20107:	db "%lf", 0	; 4: 37 108 102 0

@10733$string_X12025f0A#:
x20111:	db "X1 %f", 10, 0	; 7: 88 49 32 37 102 10 0

@10736$string_X22025f0A#:
x20118:	db "X2 %f", 10, 0	; 7: 88 50 32 37 102 10 0

@10739$string_0A#:
x20125:	db 10, 0	; 2: 10 0

@10743$string_in2Etxt#:
x20127:	db "in.txt", 0	; 7: 105 110 46 116 120 116 0

@10744$string_r#:
x20134:	db "r", 0	; 2: 114 0

@10747$string_outY2Etxt#:
x20136:	db "outY.txt", 0	; 9: 111 117 116 89 46 116 120 116 0

@10748$string_w#:
x20145:	db "w", 0	; 2: 119 0

@10756$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x20147:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@10757$string_inFilePtr20213D20NULL#:
x20193:	db "inFilePtr != NULL", 0	; 18: 105 110 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@10758$string_C3A5CUsers5Cstefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x20211:	db "C:\Users\stefa\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 64: 67 58 92 85 115 101 114 115 92 115 116 101 102 97 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@10768$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x20275:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@10769$string_outFilePtr20213D20NULL#:
x20321:	db "outFilePtr != NULL", 0	; 19: 111 117 116 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@10770$string_C3A5CUsers5Cstefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x20340:	db "C:\Users\stefa\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 64: 67 58 92 85 115 101 114 115 92 115 116 101 102 97 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@10779$string_25i#:
x20404:	db "%i", 0	; 3: 37 105 0

@10782$string_size2025i0A#:
x20407:	db "size %i", 10, 0	; 9: 115 105 122 101 32 37 105 10 0

@10784$string_Y20size2025i0A#:
x20416:	db "Y size %i", 10, 0	; 11: 89 32 115 105 122 101 32 37 105 10 0

@10793$string_25lf#:
x20427:	db "%lf", 0	; 4: 37 108 102 0

@10796$string_Y12025f0A#:
x20431:	db "Y1 %f", 10, 0	; 7: 89 49 32 37 102 10 0

@10799$string_Y22025f0A#:
x20438:	db "Y2 %f", 10, 0	; 7: 89 50 32 37 102 10 0

@10802$string_0A#:
x20445:	db 10, 0	; 2: 10 0

@10806$string_Y#:
x20447:	db "Y", 0	; 2: 89 0

@10812$string_2225s2220has20been20removed0A#:
x20449:	db 34, "%s", 34, " has been removed", 10, 0	; 23: 34 37 115 34 32 104 97 115 32 98 101 101 110 32 114 101 109 111 118 101 100 10 0

@10814$string_Error202225s222025i3A2025s2E0A#:
x20472:	db "Error ", 34, "%s", 34, " %i: %s.", 10, 0	; 20: 69 114 114 111 114 32 34 37 115 34 32 37 105 58 32 37 115 46 10 0

@10817$string_X#:
x20492:	db "X", 0	; 2: 88 0

@10819$string_Y#:
x20494:	db "Y", 0	; 2: 89 0

@10821$string_w#:
x20496:	db "w", 0	; 2: 119 0

@10824$string_Hello20X#:
x20498:	db "Hello X", 0	; 8: 72 101 108 108 111 32 88 0

@10831$string_2225s2220has20been20renamed20to202225s222E0A#:
x20506:	db 34, "%s", 34, " has been renamed to ", 34, "%s", 34, ".", 10, 0	; 32: 34 37 115 34 32 104 97 115 32 98 101 101 110 32 114 101 110 97 109 101 100 32 116 111 32 34 37 115 34 46 10 0

@10833$string_Error202225s22202225s222025i3A2025s2E0A#:
x20538:	db "Error ", 34, "%s", 34, " ", 34, "%s", 34, " %i: %s.", 10, 0	; 25: 69 114 114 111 114 32 34 37 115 34 32 34 37 115 34 32 37 105 58 32 37 115 46 10 0

@10836$string_X2#:
x20563:	db "X2", 0	; 3: 88 50 0

@10838$string_Y2#:
x20566:	db "Y2", 0	; 3: 89 50 0

@10844$string_2225s2220has20been20renamed20to202225s222E0A#:
x20569:	db 34, "%s", 34, " has been renamed to ", 34, "%s", 34, ".", 10, 0	; 32: 34 37 115 34 32 104 97 115 32 98 101 101 110 32 114 101 110 97 109 101 100 32 116 111 32 34 37 115 34 46 10 0

@10846$string_Error202225s22202225s222025i3A2025s2E0A#:
x20601:	db "Error ", 34, "%s", 34, " ", 34, "%s", 34, " %i: %s.", 10, 0	; 25: 69 114 114 111 114 32 34 37 115 34 32 34 37 115 34 32 37 105 58 32 37 115 46 10 0

@10849$string_Z#:
x20626:	db "Z", 0	; 2: 90 0

@10851$string_w#:
x20628:	db "w", 0	; 2: 119 0

@10854$string_Hello20Z#:
x20630:	db "Hello Z", 0	; 8: 72 101 108 108 111 32 90 0

@10861$string_2225s2220has20been20removed2E0A#:
x20638:	db 34, "%s", 34, " has been removed.", 10, 0	; 24: 34 37 115 34 32 104 97 115 32 98 101 101 110 32 114 101 109 111 118 101 100 46 10 0

@10863$string_Error202225s222025i3A2025s2E0A#:
x20662:	db "Error ", 34, "%s", 34, " %i: %s.", 10, 0	; 20: 69 114 114 111 114 32 34 37 115 34 32 37 105 58 32 37 115 46 10 0

@10866$string_Z2#:
x20682:	db "Z2", 0	; 3: 90 50 0

@10872$string_2225s2220has20been20removed2E0A#:
x20685:	db 34, "%s", 34, " has been removed.", 10, 0	; 24: 34 37 115 34 32 104 97 115 32 98 101 101 110 32 114 101 109 111 118 101 100 46 10 0

@10874$string_Error202225s222025i3A2025s2E0A#:
x20709:	db "Error ", 34, "%s", 34, " %i: %s.", 10, 0	; 20: 69 114 114 111 114 32 34 37 115 34 32 37 105 58 32 37 115 46 10 0

@10877$string_PBook2Etxt#:
x20729:	db "PBook.txt", 0	; 10: 80 66 111 111 107 46 116 120 116 0

@10878$string_r#:
x20739:	db "r", 0	; 2: 114 0

@10886$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x20741:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@10887$string_inFilePtr20213D20NULL#:
x20787:	db "inFilePtr != NULL", 0	; 18: 105 110 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@10888$string_C3A5CUsers5Cstefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x20805:	db "C:\Users\stefa\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 64: 67 58 92 85 115 101 114 115 92 115 116 101 102 97 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@10893$string_0A252D24s20252D24s0A#:
x20869:	db 10, "%-24s %-24s", 10, 0	; 14: 10 37 45 50 52 115 32 37 45 50 52 115 10 0

@10894$string_Name#:
x20883:	db "Name", 0	; 5: 78 97 109 101 0

@10895$string_Phone#:
x20888:	db "Phone", 0	; 6: 80 104 111 110 101 0

@10897$string_252D24s20252D24s0A#:
x20894:	db "%-24s %-24s", 10, 0	; 13: 37 45 50 52 115 32 37 45 50 52 115 10 0

@10898$string_3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D#:
x20907:	db "========================", 0	; 25: 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 0

@10899$string_3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D#:
x20932:	db "========================", 0	; 25: 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 0

@10903$string_25i#:
x20957:	db "%i", 0	; 3: 37 105 0

@10906$string_size2025i0A#:
x20960:	db "size %i", 10, 0	; 9: 115 105 122 101 32 37 105 10 0

@10920$string_25s25s#:
x20969:	db "%s%s", 0	; 5: 37 115 37 115 0

@10922$string_252D24s20252D24s0A#:
x20974:	db "%-24s %-24s", 10, 0	; 13: 37 45 50 52 115 32 37 45 50 52 115 10 0

@10924$string_0A#:
x20987:	db 10, 0	; 2: 10 0

@10927$string_TestX2Ebin#:
x20989:	db "TestX.bin", 0	; 10: 84 101 115 116 88 46 98 105 110 0

@10928$string_w#:
x20999:	db "w", 0	; 2: 119 0

@10936$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x21001:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@10937$string_outFilePtr20213D20NULL#:
x21047:	db "outFilePtr != NULL", 0	; 19: 111 117 116 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@10938$string_C3A5CUsers5Cstefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x21066:	db "C:\Users\stefa\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 64: 67 58 92 85 115 101 114 115 92 115 116 101 102 97 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@10973$string_TestX2Ebin#:
x21130:	db "TestX.bin", 0	; 10: 84 101 115 116 88 46 98 105 110 0

@10974$string_r#:
x21140:	db "r", 0	; 2: 114 0

@10984$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x21142:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@10985$string_inFilePtr20213D20NULL#:
x21188:	db "inFilePtr != NULL", 0	; 18: 105 110 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@10986$string_C3A5CUsers5Cstefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x21206:	db "C:\Users\stefa\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 64: 67 58 92 85 115 101 114 115 92 115 116 101 102 97 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@10999$string_size13A2025i0A#:
x21270:	db "size1: %i", 10, 0	; 11: 115 105 122 101 49 58 32 37 105 10 0

@11016$string_index13A2025i3A20value2025f0A#:
x21281:	db "index1: %i: value %f", 10, 0	; 22: 105 110 100 101 120 49 58 32 37 105 58 32 118 97 108 117 101 32 37 102 10 0

@11018$string_0A#:
x21303:	db 10, 0	; 2: 10 0

@11021$string_TestY2Ebin#:
x21305:	db "TestY.bin", 0	; 10: 84 101 115 116 89 46 98 105 110 0

@11022$string_w#:
x21315:	db "w", 0	; 2: 119 0

@11030$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x21317:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@11031$string_outFilePtr20213D20NULL#:
x21363:	db "outFilePtr != NULL", 0	; 19: 111 117 116 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@11032$string_C3A5CUsers5Cstefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x21382:	db "C:\Users\stefa\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 64: 67 58 92 85 115 101 114 115 92 115 116 101 102 97 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@11059$string_TestY2Ebin#:
x21446:	db "TestY.bin", 0	; 10: 84 101 115 116 89 46 98 105 110 0

@11060$string_r#:
x21456:	db "r", 0	; 2: 114 0

@11068$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x21458:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@11069$string_inFilePtr20213D20NULL#:
x21504:	db "inFilePtr != NULL", 0	; 18: 105 110 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@11070$string_C3A5CUsers5Cstefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x21522:	db "C:\Users\stefa\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 64: 67 58 92 85 115 101 114 115 92 115 116 101 102 97 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@11090$string_index23A2025i3A20value2025f0A#:
x21586:	db "index2: %i: value %f", 10, 0	; 22: 105 110 100 101 120 50 58 32 37 105 58 32 118 97 108 117 101 32 37 102 10 0

@11096$string_0A#:
x21608:	db 10, 0	; 2: 10 0

@11099$string_TestY2Ebin#:
x21610:	db "TestY.bin", 0	; 10: 84 101 115 116 89 46 98 105 110 0

@11100$string_r#:
x21620:	db "r", 0	; 2: 114 0

@11108$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x21622:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@11109$string_inFilePtr20213D20NULL#:
x21668:	db "inFilePtr != NULL", 0	; 18: 105 110 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@11110$string_C3A5CUsers5Cstefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x21686:	db "C:\Users\stefa\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 64: 67 58 92 85 115 101 114 115 92 115 116 101 102 97 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@11131$string_index33A2025i3A20value2025f0A#:
x21750:	db "index3: %i: value %f", 10, 0	; 22: 105 110 100 101 120 51 58 32 37 105 58 32 118 97 108 117 101 32 37 102 10 0

@11137$string_0A#:
x21772:	db 10, 0	; 2: 10 0

@11140$string_TestX2Ebin#:
x21774:	db "TestX.bin", 0	; 10: 84 101 115 116 88 46 98 105 110 0

@11141$string_r#:
x21784:	db "r", 0	; 2: 114 0

@11150$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x21786:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@11151$string_inFilePtr20213D20NULL#:
x21832:	db "inFilePtr != NULL", 0	; 18: 105 110 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@11152$string_C3A5CUsers5Cstefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x21850:	db "C:\Users\stefa\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 64: 67 58 92 85 115 101 114 115 92 115 116 101 102 97 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@11165$string_size43A2025i20total2025i0A#:
x21914:	db "size4: %i total %i", 10, 0	; 20: 115 105 122 101 52 58 32 37 105 32 116 111 116 97 108 32 37 105 10 0

@11167$int2$8#:
x21934:	dw 8	; 2: 8 0

@11171$int2$8#:
x21936:	dw 8	; 2: 8 0

@11178$int2$8#:
x21938:	dw 8	; 2: 8 0

@11186$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x21940:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@11187$string_p20213D20NULL#:
x21986:	db "p != NULL", 0	; 10: 112 32 33 61 32 78 85 76 76 0

@11188$string_C3A5CUsers5Cstefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x21996:	db "C:\Users\stefa\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 64: 67 58 92 85 115 101 114 115 92 115 116 101 102 97 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@11193$string_malloc43A2025u2025u2025u0A#:
x22060:	db "malloc4: %u %u %u", 10, 0	; 19: 109 97 108 108 111 99 52 58 32 37 117 32 37 117 32 37 117 10 0

@11205$string_index43A2025i3A20value2025f0A#:
x22079:	db "index4: %i: value %f", 10, 0	; 22: 105 110 100 101 120 52 58 32 37 105 58 32 118 97 108 117 101 32 37 102 10 0

@11207$int2$8#:
x22101:	dw 8	; 2: 8 0

@11211$string_0A#:
x22103:	db 10, 0	; 2: 10 0

@11392$string_Block2Ebin#:
x22105:	db "Block.bin", 0	; 10: 66 108 111 99 107 46 98 105 110 0

@11393$string_w#:
x22115:	db "w", 0	; 2: 119 0

@11396$string_Block2Ebin#:
x22117:	db "Block.bin", 0	; 10: 66 108 111 99 107 46 98 105 110 0

@11397$string_r#:
x22127:	db "r", 0	; 2: 114 0

@11405$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x22129:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@11406$string_outFilePtr20213D20NULL#:
x22175:	db "outFilePtr != NULL", 0	; 19: 111 117 116 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@11407$string_C3A5CUsers5Cstefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x22194:	db "C:\Users\stefa\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 64: 67 58 92 85 115 101 114 115 92 115 116 101 102 97 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@11417$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x22258:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@11418$string_inFilePtr20213D20NULL#:
x22304:	db "inFilePtr != NULL", 0	; 18: 105 110 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@11419$string_C3A5CUsers5Cstefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x22322:	db "C:\Users\stefa\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 64: 67 58 92 85 115 101 114 115 92 115 116 101 102 97 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@11444$string_Name20203A2025s0A#:
x22386:	db "Name  : %s", 10, 0	; 12: 78 97 109 101 32 32 58 32 37 115 10 0

@11447$string_Phone203A2025d0A#:
x22398:	db "Phone : %d", 10, 0	; 12: 80 104 111 110 101 32 58 32 37 100 10 0

@11451$string_outx2Etxt#:
x22410:	db "outx.txt", 0	; 9: 111 117 116 120 46 116 120 116 0

@11452$string_r#:
x22419:	db "r", 0	; 2: 114 0

@11460$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x22421:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@11461$string_inFilePtr20213D20NULL#:
x22467:	db "inFilePtr != NULL", 0	; 18: 105 110 70 105 108 101 80 116 114 32 33 61 32 78 85 76 76 0

@11462$string_C3A5CUsers5Cstefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CFileTest2Ec#:
x22485:	db "C:\Users\stefa\Documents\vagrant\homestead\code\code\FileTest.c", 0	; 64: 67 58 92 85 115 101 114 115 92 115 116 101 102 97 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 70 105 108 101 84 101 115 116 46 99 0

@11487$string_fileexists2022X223A2025s0A#:
x22549:	db "fileexists ", 34, "X", 34, ": %s", 10, 0	; 20: 102 105 108 101 101 120 105 115 116 115 32 34 88 34 58 32 37 115 10 0

@11488$string_X#:
x22569:	db "X", 0	; 2: 88 0

@11490$string_Yes#:
x22571:	db "Yes", 0	; 4: 89 101 115 0

@11491$string_No#:
x22575:	db "No", 0	; 3: 78 111 0

@11501$string_fileexists2022Y223A2025s0A#:
x22578:	db "fileexists ", 34, "Y", 34, ": %s", 10, 0	; 20: 102 105 108 101 101 120 105 115 116 115 32 34 89 34 58 32 37 115 10 0

@11502$string_Y#:
x22598:	db "Y", 0	; 2: 89 0

@11504$string_Yes#:
x22600:	db "Yes", 0	; 4: 89 101 115 0

@11505$string_No#:
x22604:	db "No", 0	; 3: 78 111 0

@11515$string_fileexists2022Main2Easm223A2025s0A#:
x22607:	db "fileexists ", 34, "Main.asm", 34, ": %s", 10, 0	; 27: 102 105 108 101 101 120 105 115 116 115 32 34 77 97 105 110 46 97 115 109 34 58 32 37 115 10 0

@11516$string_Main2Easm#:
x22634:	db "Main.asm", 0	; 9: 77 97 105 110 46 97 115 109 0

@11518$string_Yes#:
x22643:	db "Yes", 0	; 4: 89 101 115 0

@11519$string_No#:
x22647:	db "No", 0	; 3: 78 111 0

@11529$string_fileexists2022MainX2Easm223A2025s0A#:
x22650:	db "fileexists ", 34, "MainX.asm", 34, ": %s", 10, 0	; 28: 102 105 108 101 101 120 105 115 116 115 32 34 77 97 105 110 88 46 97 115 109 34 58 32 37 115 10 0

@11530$string_MainX2Easm#:
x22678:	db "MainX.asm", 0	; 10: 77 97 105 110 88 46 97 115 109 0

@11532$string_Yes#:
x22688:	db "Yes", 0	; 4: 89 101 115 0

@11533$string_No#:
x22692:	db "No", 0	; 3: 78 111 0

@11543$string_fileexists2022Main2Ec223A2025s0A#:
x22695:	db "fileexists ", 34, "Main.c", 34, ": %s", 10, 0	; 25: 102 105 108 101 101 120 105 115 116 115 32 34 77 97 105 110 46 99 34 58 32 37 115 10 0

@11544$string_Main2Ec#:
x22720:	db "Main.c", 0	; 7: 77 97 105 110 46 99 0

@11546$string_Yes#:
x22727:	db "Yes", 0	; 4: 89 101 115 0

@11547$string_No#:
x22731:	db "No", 0	; 3: 78 111 0

@11557$string_fileexists2022MainX2Ec223A2025s0A#:
x22734:	db "fileexists ", 34, "MainX.c", 34, ": %s", 10, 0	; 26: 102 105 108 101 101 120 105 115 116 115 32 34 77 97 105 110 88 46 99 34 58 32 37 115 10 0

@11558$string_MainX2Ec#:
x22760:	db "MainX.c", 0	; 8: 77 97 105 110 88 46 99 0

@11560$string_Yes#:
x22768:	db "Yes", 0	; 4: 89 101 115 0

@11561$string_No#:
x22772:	db "No", 0	; 3: 78 111 0

@11571$string_fileexists2022File2Ec223A2025s0A#:
x22775:	db "fileexists ", 34, "File.c", 34, ": %s", 10, 0	; 25: 102 105 108 101 101 120 105 115 116 115 32 34 70 105 108 101 46 99 34 58 32 37 115 10 0

@11572$string_File2Ec#:
x22800:	db "File.c", 0	; 7: 70 105 108 101 46 99 0

@11574$string_Yes#:
x22807:	db "Yes", 0	; 4: 89 101 115 0

@11575$string_No#:
x22811:	db "No", 0	; 3: 78 111 0

@11585$string_fileexists2022File2Ex223A2025s0A#:
x22814:	db "fileexists ", 34, "File.x", 34, ": %s", 10, 0	; 25: 102 105 108 101 101 120 105 115 116 115 32 34 70 105 108 101 46 120 34 58 32 37 115 10 0

@11586$string_File2Ex#:
x22839:	db "File.x", 0	; 7: 70 105 108 101 46 120 0

@11588$string_Yes#:
x22846:	db "Yes", 0	; 4: 89 101 115 0

@11589$string_No#:
x22850:	db "No", 0	; 3: 78 111 0

@11599$string_fileexists2022File2Eh223A2025s0A#:
x22853:	db "fileexists ", 34, "File.h", 34, ": %s", 10, 0	; 25: 102 105 108 101 101 120 105 115 116 115 32 34 70 105 108 101 46 104 34 58 32 37 115 10 0

@11600$string_File2Eh#:
x22878:	db "File.h", 0	; 7: 70 105 108 101 46 104 0

@11602$string_Yes#:
x22885:	db "Yes", 0	; 4: 89 101 115 0

@11603$string_No#:
x22889:	db "No", 0	; 3: 78 111 0

@11613$string_fileexists2022File2Ey223A2025s0A#:
x22892:	db "fileexists ", 34, "File.y", 34, ": %s", 10, 0	; 25: 102 105 108 101 101 120 105 115 116 115 32 34 70 105 108 101 46 121 34 58 32 37 115 10 0

@11614$string_File2Ey#:
x22917:	db "File.y", 0	; 7: 70 105 108 101 46 121 0

@11616$string_Yes#:
x22924:	db "Yes", 0	; 4: 89 101 115 0

@11617$string_No#:
x22928:	db "No", 0	; 3: 78 111 0

@11627$string_fileexists2022File2Ep223A2025s0A#:
x22931:	db "fileexists ", 34, "File.p", 34, ": %s", 10, 0	; 25: 102 105 108 101 101 120 105 115 116 115 32 34 70 105 108 101 46 112 34 58 32 37 115 10 0

@11628$string_File2Ep#:
x22956:	db "File.p", 0	; 7: 70 105 108 101 46 112 0

@11630$string_Yes#:
x22963:	db "Yes", 0	; 4: 89 101 115 0

@11631$string_No#:
x22967:	db "No", 0	; 3: 78 111 0

@11641$string_fileexists2022File2Ez223A2025s0A#:
x22970:	db "fileexists ", 34, "File.z", 34, ": %s", 10, 0	; 25: 102 105 108 101 101 120 105 115 116 115 32 34 70 105 108 101 46 122 34 58 32 37 115 10 0

@11642$string_File2Ez#:
x22995:	db "File.z", 0	; 7: 70 105 108 101 46 122 0

@11644$string_Yes#:
x23002:	db "Yes", 0	; 4: 89 101 115 0

@11645$string_No#:
x23006:	db "No", 0	; 3: 78 111 0

fopen:	; Assign index 0
x23009:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

fopen$1:	; SignedGreaterThanEqual 21 index 20
x23014:	cmp word [bp + 10], 20	; 4: 131 126 10 20
x23018:	jge fopen$21	; 2: 125 78

fopen$2:	; SignedMultiply £temporary706 index 29
x23020:	mov ax, [bp + 10]	; 3: 139 70 10
x23023:	xor dx, dx	; 2: 49 210
x23025:	imul word [@1725$int2$29#]	; 4: 247 46 72 90

fopen$3:	; BinaryAdd £temporary707 g_fileArray £temporary706
x23029:	mov si, g_fileArray	; 3: 190 102 13
x23032:	add si, ax	; 2: 1 198

fopen$4:	; Deref £temporary705 -> £temporary707 £temporary707 0

fopen$5:	; NotEqual 19 £temporary705.open$0 -> £temporary707 0
x23034:	cmp word [si], 0	; 3: 131 60 0
x23037:	jne fopen$19	; 2: 117 54

fopen$6:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

fopen$7:	; Parameter 12 name 6
x23039:	mov ax, [bp + 6]	; 3: 139 70 6
x23042:	mov [bp + 18], ax	; 3: 137 70 18

fopen$8:	; Parameter 12 mode 8
x23045:	mov ax, [bp + 8]	; 3: 139 70 8
x23048:	mov [bp + 20], ax	; 3: 137 70 20

fopen$9:	; SignedMultiply £temporary711 index 29
x23051:	mov ax, [bp + 10]	; 3: 139 70 10
x23054:	xor dx, dx	; 2: 49 210
x23056:	imul word [@1733$int2$29#]	; 4: 247 46 74 90

fopen$10:	; BinaryAdd £temporary712 g_fileArray £temporary711
x23060:	mov si, g_fileArray	; 3: 190 102 13
x23063:	add si, ax	; 2: 1 198

fopen$11:	; Deref £temporary710 -> £temporary712 £temporary712 0

fopen$12:	; address £temporary713 £temporary710 -> £temporary712

fopen$13:	; Parameter 12 £temporary713 10
x23065:	mov [bp + 22], si	; 3: 137 118 22

fopen$14:	; Call 12 freopen 0
x23068:	mov word [bp + 12], fopen$15	; 5: 199 70 12 42 90
x23073:	mov [bp + 14], bp	; 3: 137 110 14
x23076:	add bp, 12	; 3: 131 197 12
x23079:	nop	; 1: 144
x23080:	jmp freopen	; 2: 235 34

fopen$15:	; PostCall 12

fopen$16:	; GetReturnValue £temporary714

fopen$17:	; SetReturnValue £temporary714

fopen$18:	; Return £temporary714
x23082:	mov ax, [bp]	; 3: 139 70 0
x23085:	mov di, [bp + 4]	; 3: 139 126 4
x23088:	mov bp, [bp + 2]	; 3: 139 110 2
x23091:	jmp ax	; 2: 255 224

fopen$19:	; Increment index
x23093:	inc word [bp + 10]	; 3: 255 70 10

fopen$20:	; Goto 1
x23096:	jmp fopen$1	; 2: 235 172

fopen$21:	; SetReturnValue 0
x23098:	mov bx, 0	; 3: 187 0 0

fopen$22:	; Return 0
x23101:	mov ax, [bp]	; 3: 139 70 0
x23104:	mov di, [bp + 4]	; 3: 139 126 4
x23107:	mov bp, [bp + 2]	; 3: 139 110 2
x23110:	jmp ax	; 2: 255 224

fopen$23:	; FunctionEnd fopen

@1725$int2$29#:
x23112:	dw 29	; 2: 29 0

@1733$int2$29#:
x23114:	dw 29	; 2: 29 0

freopen:	; Assign handle -1
x23116:	mov word [bp + 12], -1	; 5: 199 70 12 255 255

freopen$1:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$2:	; Parameter 14 mode 6
x23121:	mov ax, [bp + 8]	; 3: 139 70 8
x23124:	mov [bp + 20], ax	; 3: 137 70 20

freopen$3:	; Parameter 14 string_r# 8
x23127:	mov word [bp + 22], @1748$string_r#	; 5: 199 70 22 240 92

freopen$4:	; Call 14 strcmp 0
x23132:	mov word [bp + 14], freopen$5	; 5: 199 70 14 106 90
x23137:	mov [bp + 16], bp	; 3: 137 110 16
x23140:	add bp, 14	; 3: 131 197 14
x23143:	jmp strcmp	; 3: 233 159 2

freopen$5:	; PostCall 14

freopen$6:	; GetReturnValue £temporary718

freopen$7:	; NotEqual 16 £temporary718 0
x23146:	cmp bx, 0	; 3: 131 251 0
x23149:	jne freopen$16	; 2: 117 30

freopen$8:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$9:	; Parameter 14 name 6
x23151:	mov ax, [bp + 6]	; 3: 139 70 6
x23154:	mov [bp + 20], ax	; 3: 137 70 20

freopen$10:	; Parameter 14 64 8
x23157:	mov byte [bp + 22], 64	; 4: 198 70 22 64

freopen$11:	; Call 14 fileopen 0
x23161:	mov word [bp + 14], freopen$12	; 5: 199 70 14 135 90
x23166:	mov [bp + 16], bp	; 3: 137 110 16
x23169:	add bp, 14	; 3: 131 197 14
x23172:	jmp @1702$fileopen	; 3: 233 240 2

freopen$12:	; PostCall 14

freopen$13:	; GetReturnValue £temporary720

freopen$14:	; Assign handle £temporary720
x23175:	mov [bp + 12], bx	; 3: 137 94 12

freopen$15:	; Goto 138
x23178:	jmp freopen$138	; 3: 233 252 1

freopen$16:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$17:	; Parameter 14 mode 6
x23181:	mov ax, [bp + 8]	; 3: 139 70 8
x23184:	mov [bp + 20], ax	; 3: 137 70 20

freopen$18:	; Parameter 14 string_w# 8
x23187:	mov word [bp + 22], @1757$string_w#	; 5: 199 70 22 242 92

freopen$19:	; Call 14 strcmp 0
x23192:	mov word [bp + 14], freopen$20	; 5: 199 70 14 166 90
x23197:	mov [bp + 16], bp	; 3: 137 110 16
x23200:	add bp, 14	; 3: 131 197 14
x23203:	jmp strcmp	; 3: 233 99 2

freopen$20:	; PostCall 14

freopen$21:	; GetReturnValue £temporary721

freopen$22:	; NotEqual 30 £temporary721 0
x23206:	cmp bx, 0	; 3: 131 251 0
x23209:	jne freopen$30	; 2: 117 26

freopen$23:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$24:	; Parameter 14 name 6
x23211:	mov ax, [bp + 6]	; 3: 139 70 6
x23214:	mov [bp + 20], ax	; 3: 137 70 20

freopen$25:	; Call 14 filecreate 0
x23217:	mov word [bp + 14], freopen$26	; 5: 199 70 14 191 90
x23222:	mov [bp + 16], bp	; 3: 137 110 16
x23225:	add bp, 14	; 3: 131 197 14
x23228:	jmp filecreate	; 3: 233 229 2

freopen$26:	; PostCall 14

freopen$27:	; GetReturnValue £temporary723

freopen$28:	; Assign handle £temporary723
x23231:	mov [bp + 12], bx	; 3: 137 94 12

freopen$29:	; Goto 138
x23234:	jmp freopen$138	; 3: 233 196 1

freopen$30:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$31:	; Parameter 14 mode 6
x23237:	mov ax, [bp + 8]	; 3: 139 70 8
x23240:	mov [bp + 20], ax	; 3: 137 70 20

freopen$32:	; Parameter 14 string_a# 8
x23243:	mov word [bp + 22], @1763$string_a#	; 5: 199 70 22 244 92

freopen$33:	; Call 14 strcmp 0
x23248:	mov word [bp + 14], freopen$34	; 5: 199 70 14 222 90
x23253:	mov [bp + 16], bp	; 3: 137 110 16
x23256:	add bp, 14	; 3: 131 197 14
x23259:	jmp strcmp	; 3: 233 43 2

freopen$34:	; PostCall 14

freopen$35:	; GetReturnValue £temporary724

freopen$36:	; NotEqual 59 £temporary724 0
x23262:	cmp bx, 0	; 3: 131 251 0
x23265:	jne freopen$59	; 2: 117 92

freopen$37:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$38:	; Parameter 14 name 6
x23267:	mov ax, [bp + 6]	; 3: 139 70 6
x23270:	mov [bp + 20], ax	; 3: 137 70 20

freopen$39:	; Parameter 14 65 8
x23273:	mov byte [bp + 22], 65	; 4: 198 70 22 65

freopen$40:	; Call 14 fileopen 0
x23277:	mov word [bp + 14], freopen$41	; 5: 199 70 14 251 90
x23282:	mov [bp + 16], bp	; 3: 137 110 16
x23285:	add bp, 14	; 3: 131 197 14
x23288:	jmp @1702$fileopen	; 3: 233 124 2

freopen$41:	; PostCall 14

freopen$42:	; GetReturnValue £temporary726

freopen$43:	; Assign handle £temporary726
x23291:	mov [bp + 12], bx	; 3: 137 94 12

freopen$44:	; Equal 52 handle -1
x23294:	cmp word [bp + 12], -1	; 4: 131 126 12 255
x23298:	je freopen$52	; 2: 116 33

freopen$45:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$46:	; Parameter 14 stream 6
x23300:	mov ax, [bp + 10]	; 3: 139 70 10
x23303:	mov [bp + 20], ax	; 3: 137 70 20

freopen$47:	; Parameter 14 0 8
x23306:	mov word [bp + 22], 0	; 5: 199 70 22 0 0

freopen$48:	; Parameter 14 2 10
x23311:	mov word [bp + 24], 2	; 5: 199 70 24 2 0

freopen$49:	; Call 14 fseek 0
x23316:	mov word [bp + 14], freopen$50	; 5: 199 70 14 34 91
x23321:	mov [bp + 16], bp	; 3: 137 110 16
x23324:	add bp, 14	; 3: 131 197 14
x23327:	jmp fseek	; 3: 233 179 2

freopen$50:	; PostCall 14

freopen$51:	; Goto 138
x23330:	jmp freopen$138	; 3: 233 100 1

freopen$52:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$53:	; Parameter 14 name 6
x23333:	mov ax, [bp + 6]	; 3: 139 70 6
x23336:	mov [bp + 20], ax	; 3: 137 70 20

freopen$54:	; Call 14 filecreate 0
x23339:	mov word [bp + 14], freopen$55	; 5: 199 70 14 57 91
x23344:	mov [bp + 16], bp	; 3: 137 110 16
x23347:	add bp, 14	; 3: 131 197 14
x23350:	jmp filecreate	; 3: 233 107 2

freopen$55:	; PostCall 14

freopen$56:	; GetReturnValue £temporary729

freopen$57:	; Assign handle £temporary729
x23353:	mov [bp + 12], bx	; 3: 137 94 12

freopen$58:	; Goto 138
x23356:	jmp freopen$138	; 3: 233 74 1

freopen$59:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$60:	; Parameter 14 mode 6
x23359:	mov ax, [bp + 8]	; 3: 139 70 8
x23362:	mov [bp + 20], ax	; 3: 137 70 20

freopen$61:	; Parameter 14 string_r2B# 8
x23365:	mov word [bp + 22], @1783$string_r2B#	; 5: 199 70 22 246 92

freopen$62:	; Call 14 strcmp 0
x23370:	mov word [bp + 14], freopen$63	; 5: 199 70 14 88 91
x23375:	mov [bp + 16], bp	; 3: 137 110 16
x23378:	add bp, 14	; 3: 131 197 14
x23381:	jmp strcmp	; 3: 233 177 1

freopen$63:	; PostCall 14

freopen$64:	; GetReturnValue £temporary730

freopen$65:	; NotEqual 82 £temporary730 0
x23384:	cmp bx, 0	; 3: 131 251 0
x23387:	jne freopen$82	; 2: 117 72

freopen$66:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$67:	; Parameter 14 string_r2B10A# 6
x23389:	mov word [bp + 20], @1788$string_r2B10A#	; 5: 199 70 20 249 92

freopen$68:	; Call 14 printf 0
x23394:	mov word [bp + 14], freopen$69	; 5: 199 70 14 114 91
x23399:	mov [bp + 16], bp	; 3: 137 110 16
x23402:	add bp, 14	; 3: 131 197 14
x23405:	mov di, bp	; 2: 137 239
x23407:	jmp printf	; 3: 233 146 177

freopen$69:	; PostCall 14

freopen$70:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$71:	; Parameter 14 name 6
x23410:	mov ax, [bp + 6]	; 3: 139 70 6
x23413:	mov [bp + 20], ax	; 3: 137 70 20

freopen$72:	; Parameter 14 66 8
x23416:	mov byte [bp + 22], 66	; 4: 198 70 22 66

freopen$73:	; Call 14 fileopen 0
x23420:	mov word [bp + 14], freopen$74	; 5: 199 70 14 138 91
x23425:	mov [bp + 16], bp	; 3: 137 110 16
x23428:	add bp, 14	; 3: 131 197 14
x23431:	jmp @1702$fileopen	; 3: 233 237 1

freopen$74:	; PostCall 14

freopen$75:	; GetReturnValue £temporary733

freopen$76:	; Assign handle £temporary733
x23434:	mov [bp + 12], bx	; 3: 137 94 12

freopen$77:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$78:	; Parameter 14 string_r2B20A# 6
x23437:	mov word [bp + 20], @1794$string_r2B20A#	; 5: 199 70 20 254 92

freopen$79:	; Call 14 printf 0
x23442:	mov word [bp + 14], freopen$80	; 5: 199 70 14 162 91
x23447:	mov [bp + 16], bp	; 3: 137 110 16
x23450:	add bp, 14	; 3: 131 197 14
x23453:	mov di, bp	; 2: 137 239
x23455:	jmp printf	; 3: 233 98 177

freopen$80:	; PostCall 14

freopen$81:	; Goto 138
x23458:	jmp freopen$138	; 3: 233 228 0

freopen$82:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$83:	; Parameter 14 mode 6
x23461:	mov ax, [bp + 8]	; 3: 139 70 8
x23464:	mov [bp + 20], ax	; 3: 137 70 20

freopen$84:	; Parameter 14 string_w2B# 8
x23467:	mov word [bp + 22], @1796$string_w2B#	; 5: 199 70 22 3 93

freopen$85:	; Call 14 strcmp 0
x23472:	mov word [bp + 14], freopen$86	; 5: 199 70 14 190 91
x23477:	mov [bp + 16], bp	; 3: 137 110 16
x23480:	add bp, 14	; 3: 131 197 14
x23483:	jmp strcmp	; 3: 233 75 1

freopen$86:	; PostCall 14

freopen$87:	; GetReturnValue £temporary735

freopen$88:	; NotEqual 110 £temporary735 0
x23486:	cmp bx, 0	; 3: 131 251 0
x23489:	jne freopen$110	; 2: 117 80

freopen$89:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$90:	; Parameter 14 name 6
x23491:	mov ax, [bp + 6]	; 3: 139 70 6
x23494:	mov [bp + 20], ax	; 3: 137 70 20

freopen$91:	; Call 14 fileexists 0
x23497:	mov word [bp + 14], freopen$92	; 5: 199 70 14 215 91
x23502:	mov [bp + 16], bp	; 3: 137 110 16
x23505:	add bp, 14	; 3: 131 197 14
x23508:	jmp fileexists	; 3: 233 73 2

freopen$92:	; PostCall 14

freopen$93:	; GetReturnValue £temporary737

freopen$94:	; Equal 103 £temporary737 0
x23511:	cmp bx, 0	; 3: 131 251 0
x23514:	je freopen$103	; 2: 116 30

freopen$95:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$96:	; Parameter 14 name 6
x23516:	mov ax, [bp + 6]	; 3: 139 70 6
x23519:	mov [bp + 20], ax	; 3: 137 70 20

freopen$97:	; Parameter 14 66 8
x23522:	mov byte [bp + 22], 66	; 4: 198 70 22 66

freopen$98:	; Call 14 fileopen 0
x23526:	mov word [bp + 14], freopen$99	; 5: 199 70 14 244 91
x23531:	mov [bp + 16], bp	; 3: 137 110 16
x23534:	add bp, 14	; 3: 131 197 14
x23537:	jmp @1702$fileopen	; 3: 233 131 1

freopen$99:	; PostCall 14

freopen$100:	; GetReturnValue £temporary738

freopen$101:	; Assign handle £temporary738
x23540:	mov [bp + 12], bx	; 3: 137 94 12

freopen$102:	; Goto 138
x23543:	jmp freopen$138	; 3: 233 143 0

freopen$103:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$104:	; Parameter 14 name 6
x23546:	mov ax, [bp + 6]	; 3: 139 70 6
x23549:	mov [bp + 20], ax	; 3: 137 70 20

freopen$105:	; Call 14 filecreate 0
x23552:	mov word [bp + 14], freopen$106	; 5: 199 70 14 14 92
x23557:	mov [bp + 16], bp	; 3: 137 110 16
x23560:	add bp, 14	; 3: 131 197 14
x23563:	jmp filecreate	; 3: 233 150 1

freopen$106:	; PostCall 14

freopen$107:	; GetReturnValue £temporary739

freopen$108:	; Assign handle £temporary739
x23566:	mov [bp + 12], bx	; 3: 137 94 12

freopen$109:	; Goto 138
x23569:	jmp freopen$138	; 2: 235 118

freopen$110:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$111:	; Parameter 14 mode 6
x23571:	mov ax, [bp + 8]	; 3: 139 70 8
x23574:	mov [bp + 20], ax	; 3: 137 70 20

freopen$112:	; Parameter 14 string_a2B# 8
x23577:	mov word [bp + 22], @1809$string_a2B#	; 5: 199 70 22 6 93

freopen$113:	; Call 14 strcmp 0
x23582:	mov word [bp + 14], freopen$114	; 5: 199 70 14 44 92
x23587:	mov [bp + 16], bp	; 3: 137 110 16
x23590:	add bp, 14	; 3: 131 197 14
x23593:	jmp strcmp	; 3: 233 221 0

freopen$114:	; PostCall 14

freopen$115:	; GetReturnValue £temporary741

freopen$116:	; NotEqual 138 £temporary741 0
x23596:	cmp bx, 0	; 3: 131 251 0
x23599:	jne freopen$138	; 2: 117 88

freopen$117:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$118:	; Parameter 14 name 6
x23601:	mov ax, [bp + 6]	; 3: 139 70 6
x23604:	mov [bp + 20], ax	; 3: 137 70 20

freopen$119:	; Parameter 14 66 8
x23607:	mov byte [bp + 22], 66	; 4: 198 70 22 66

freopen$120:	; Call 14 fileopen 0
x23611:	mov word [bp + 14], freopen$121	; 5: 199 70 14 73 92
x23616:	mov [bp + 16], bp	; 3: 137 110 16
x23619:	add bp, 14	; 3: 131 197 14
x23622:	jmp @1702$fileopen	; 3: 233 46 1

freopen$121:	; PostCall 14

freopen$122:	; GetReturnValue £temporary743

freopen$123:	; Assign handle £temporary743
x23625:	mov [bp + 12], bx	; 3: 137 94 12

freopen$124:	; Equal 132 handle -1
x23628:	cmp word [bp + 12], -1	; 4: 131 126 12 255
x23632:	je freopen$132	; 2: 116 32

freopen$125:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$126:	; Parameter 14 stream 6
x23634:	mov ax, [bp + 10]	; 3: 139 70 10
x23637:	mov [bp + 20], ax	; 3: 137 70 20

freopen$127:	; Parameter 14 0 8
x23640:	mov word [bp + 22], 0	; 5: 199 70 22 0 0

freopen$128:	; Parameter 14 2 10
x23645:	mov word [bp + 24], 2	; 5: 199 70 24 2 0

freopen$129:	; Call 14 fseek 0
x23650:	mov word [bp + 14], freopen$130	; 5: 199 70 14 112 92
x23655:	mov [bp + 16], bp	; 3: 137 110 16
x23658:	add bp, 14	; 3: 131 197 14
x23661:	jmp fseek	; 3: 233 101 1

freopen$130:	; PostCall 14

freopen$131:	; Goto 138
x23664:	jmp freopen$138	; 2: 235 23

freopen$132:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$133:	; Parameter 14 name 6
x23666:	mov ax, [bp + 6]	; 3: 139 70 6
x23669:	mov [bp + 20], ax	; 3: 137 70 20

freopen$134:	; Call 14 filecreate 0
x23672:	mov word [bp + 14], freopen$135	; 5: 199 70 14 134 92
x23677:	mov [bp + 16], bp	; 3: 137 110 16
x23680:	add bp, 14	; 3: 131 197 14
x23683:	jmp filecreate	; 3: 233 30 1

freopen$135:	; PostCall 14

freopen$136:	; GetReturnValue £temporary746

freopen$137:	; Assign handle £temporary746
x23686:	mov [bp + 12], bx	; 3: 137 94 12

freopen$138:	; Equal 155 handle -1
x23689:	cmp word [bp + 12], -1	; 4: 131 126 12 255
x23693:	je freopen$155	; 2: 116 76

freopen$139:	; Deref £temporary748 -> stream stream 0
x23695:	mov si, [bp + 10]	; 3: 139 118 10

freopen$140:	; Assign £temporary748 -> stream 1
x23698:	mov word [si], 1	; 4: 199 4 1 0

freopen$141:	; Deref £temporary749 -> stream stream 2
x23702:	mov si, [bp + 10]	; 3: 139 118 10

freopen$142:	; Assign £temporary749 -> stream handle
x23705:	mov ax, [bp + 12]	; 3: 139 70 12
x23708:	mov [si + 2], ax	; 3: 137 68 2

freopen$143:	; Deref £temporary750 -> stream stream 25
x23711:	mov si, [bp + 10]	; 3: 139 118 10

freopen$144:	; Assign £temporary750 -> stream 0
x23714:	mov word [si + 25], 0	; 5: 199 68 25 0 0

freopen$145:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

freopen$146:	; Deref £temporary751 -> stream stream 4
x23719:	mov si, [bp + 10]	; 3: 139 118 10

freopen$147:	; Parameter 14 £temporary751 -> stream 6
x23722:	mov [bp + 20], si	; 3: 137 118 20
x23725:	add word [bp + 20], 4	; 4: 131 70 20 4

freopen$148:	; Parameter 14 name 8
x23729:	mov ax, [bp + 6]	; 3: 139 70 6
x23732:	mov [bp + 22], ax	; 3: 137 70 22

freopen$149:	; Call 14 strcpy 0
x23735:	mov word [bp + 14], freopen$150	; 5: 199 70 14 197 92
x23740:	mov [bp + 16], bp	; 3: 137 110 16
x23743:	add bp, 14	; 3: 131 197 14
x23746:	jmp strcpy	; 3: 233 121 1

freopen$150:	; PostCall 14

freopen$151:	; Deref £temporary753 -> stream stream 27
x23749:	mov si, [bp + 10]	; 3: 139 118 10

freopen$152:	; Assign £temporary753 -> stream 0
x23752:	mov word [si + 27], 0	; 5: 199 68 27 0 0

freopen$153:	; SetReturnValue stream
x23757:	mov bx, [bp + 10]	; 3: 139 94 10

freopen$154:	; Return stream
x23760:	mov ax, [bp]	; 3: 139 70 0
x23763:	mov di, [bp + 4]	; 3: 139 126 4
x23766:	mov bp, [bp + 2]	; 3: 139 110 2
x23769:	jmp ax	; 2: 255 224

freopen$155:	; Deref £temporary754 -> stream stream 0
x23771:	mov si, [bp + 10]	; 3: 139 118 10

freopen$156:	; Assign £temporary754 -> stream 0
x23774:	mov word [si], 0	; 4: 199 4 0 0

freopen$157:	; SetReturnValue 0
x23778:	mov bx, 0	; 3: 187 0 0

freopen$158:	; Return 0
x23781:	mov ax, [bp]	; 3: 139 70 0
x23784:	mov di, [bp + 4]	; 3: 139 126 4
x23787:	mov bp, [bp + 2]	; 3: 139 110 2
x23790:	jmp ax	; 2: 255 224

freopen$159:	; FunctionEnd freopen

@1748$string_r#:
x23792:	db "r", 0	; 2: 114 0

@1757$string_w#:
x23794:	db "w", 0	; 2: 119 0

@1763$string_a#:
x23796:	db "a", 0	; 2: 97 0

@1783$string_r2B#:
x23798:	db "r+", 0	; 3: 114 43 0

@1788$string_r2B10A#:
x23801:	db "r+1", 10, 0	; 5: 114 43 49 10 0

@1794$string_r2B20A#:
x23806:	db "r+2", 10, 0	; 5: 114 43 50 10 0

@1796$string_w2B#:
x23811:	db "w+", 0	; 3: 119 43 0

@1809$string_a2B#:
x23814:	db "a+", 0	; 3: 97 43 0

strcmp:	; Assign index 0
x23817:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strcmp$1:	; BinaryAdd £temporary3755 left index
x23822:	mov si, [bp + 6]	; 3: 139 118 6
x23825:	add si, [bp + 10]	; 3: 3 118 10

strcmp$2:	; Deref £temporary3754 -> £temporary3755 £temporary3755 0

strcmp$3:	; NotEqual 9 £temporary3754 -> £temporary3755 0
x23828:	cmp byte [si], 0	; 3: 128 60 0
x23831:	jne strcmp$9	; 2: 117 25

strcmp$4:	; BinaryAdd £temporary3758 right index
x23833:	mov si, [bp + 8]	; 3: 139 118 8
x23836:	add si, [bp + 10]	; 3: 3 118 10

strcmp$5:	; Deref £temporary3757 -> £temporary3758 £temporary3758 0

strcmp$6:	; NotEqual 9 £temporary3757 -> £temporary3758 0
x23839:	cmp byte [si], 0	; 3: 128 60 0
x23842:	jne strcmp$9	; 2: 117 14

strcmp$7:	; SetReturnValue 0
x23844:	mov bx, 0	; 3: 187 0 0

strcmp$8:	; Return 0
x23847:	mov ax, [bp]	; 3: 139 70 0
x23850:	mov di, [bp + 4]	; 3: 139 126 4
x23853:	mov bp, [bp + 2]	; 3: 139 110 2
x23856:	jmp ax	; 2: 255 224

strcmp$9:	; BinaryAdd £temporary3762 left index
x23858:	mov si, [bp + 6]	; 3: 139 118 6
x23861:	add si, [bp + 10]	; 3: 3 118 10

strcmp$10:	; Deref £temporary3761 -> £temporary3762 £temporary3762 0

strcmp$11:	; BinaryAdd £temporary3764 right index
x23864:	mov di, [bp + 8]	; 3: 139 126 8
x23867:	add di, [bp + 10]	; 3: 3 126 10

strcmp$12:	; Deref £temporary3763 -> £temporary3764 £temporary3764 0

strcmp$13:	; SignedGreaterThanEqual 16 £temporary3761 -> £temporary3762 £temporary3763 -> £temporary3764
x23870:	mov al, [di]	; 2: 138 5
x23872:	cmp [si], al	; 2: 56 4
x23874:	jge strcmp$16	; 2: 125 14

strcmp$14:	; SetReturnValue -1
x23876:	mov bx, -1	; 3: 187 255 255

strcmp$15:	; Return -1
x23879:	mov ax, [bp]	; 3: 139 70 0
x23882:	mov di, [bp + 4]	; 3: 139 126 4
x23885:	mov bp, [bp + 2]	; 3: 139 110 2
x23888:	jmp ax	; 2: 255 224

strcmp$16:	; BinaryAdd £temporary3767 left index
x23890:	mov si, [bp + 6]	; 3: 139 118 6
x23893:	add si, [bp + 10]	; 3: 3 118 10

strcmp$17:	; Deref £temporary3766 -> £temporary3767 £temporary3767 0

strcmp$18:	; BinaryAdd £temporary3769 right index
x23896:	mov di, [bp + 8]	; 3: 139 126 8
x23899:	add di, [bp + 10]	; 3: 3 126 10

strcmp$19:	; Deref £temporary3768 -> £temporary3769 £temporary3769 0

strcmp$20:	; SignedLessThanEqual 23 £temporary3766 -> £temporary3767 £temporary3768 -> £temporary3769
x23902:	mov al, [di]	; 2: 138 5
x23904:	cmp [si], al	; 2: 56 4
x23906:	jle strcmp$23	; 2: 126 14

strcmp$21:	; SetReturnValue 1
x23908:	mov bx, 1	; 3: 187 1 0

strcmp$22:	; Return 1
x23911:	mov ax, [bp]	; 3: 139 70 0
x23914:	mov di, [bp + 4]	; 3: 139 126 4
x23917:	mov bp, [bp + 2]	; 3: 139 110 2
x23920:	jmp ax	; 2: 255 224

strcmp$23:	; Increment index
x23922:	inc word [bp + 10]	; 3: 255 70 10

strcmp$24:	; Goto 1
x23925:	jmp strcmp$1	; 2: 235 151

strcmp$25:	; FunctionEnd strcmp

@1702$fileopen:	; AssignRegister ah 61
x23927:	mov ah, 61	; 2: 180 61

@1702$fileopen$1:	; AssignRegister al mode
x23929:	mov al, [bp + 8]	; 3: 138 70 8

@1702$fileopen$2:	; AssignRegister dx name
x23932:	mov dx, [bp + 6]	; 3: 139 86 6

@1702$fileopen$3:	; Interrupt 33
x23935:	int 33	; 2: 205 33

@1702$fileopen$4:	; NotCarry 8
x23937:	jnc @1702$fileopen$8	; 2: 115 20

@1702$fileopen$5:	; Assign errno 9
x23939:	mov word [errno], 9	; 6: 199 6 230 10 9 0

@1702$fileopen$6:	; SetReturnValue -1
x23945:	mov bx, -1	; 3: 187 255 255

@1702$fileopen$7:	; Return -1
x23948:	mov ax, [bp]	; 3: 139 70 0
x23951:	mov di, [bp + 4]	; 3: 139 126 4
x23954:	mov bp, [bp + 2]	; 3: 139 110 2
x23957:	jmp ax	; 2: 255 224

@1702$fileopen$8:	; InspectRegister £temporary702 ax

@1702$fileopen$9:	; SetReturnValue £temporary702
x23959:	mov bx, ax	; 2: 137 195

@1702$fileopen$10:	; Return £temporary702
x23961:	mov ax, [bp]	; 3: 139 70 0
x23964:	mov di, [bp + 4]	; 3: 139 126 4
x23967:	mov bp, [bp + 2]	; 3: 139 110 2
x23970:	jmp ax	; 2: 255 224

@1702$fileopen$11:	; FunctionEnd fileopen

filecreate:	; AssignRegister ah 60
x23972:	mov ah, 60	; 2: 180 60

filecreate$1:	; AssignRegister cx 0
x23974:	mov cx, 0	; 3: 185 0 0

filecreate$2:	; AssignRegister dx name
x23977:	mov dx, [bp + 6]	; 3: 139 86 6

filecreate$3:	; Interrupt 33
x23980:	int 33	; 2: 205 33

filecreate$4:	; InspectRegister £temporary680 ax

filecreate$5:	; Assign handle £temporary680
x23982:	mov [bp + 8], ax	; 3: 137 70 8

filecreate$6:	; NotCarry 10
x23985:	jnc filecreate$10	; 2: 115 20

filecreate$7:	; Assign errno 9
x23987:	mov word [errno], 9	; 6: 199 6 230 10 9 0

filecreate$8:	; SetReturnValue -1
x23993:	mov bx, -1	; 3: 187 255 255

filecreate$9:	; Return -1
x23996:	mov ax, [bp]	; 3: 139 70 0
x23999:	mov di, [bp + 4]	; 3: 139 126 4
x24002:	mov bp, [bp + 2]	; 3: 139 110 2
x24005:	jmp ax	; 2: 255 224

filecreate$10:	; SetReturnValue handle
x24007:	mov bx, [bp + 8]	; 3: 139 94 8

filecreate$11:	; Return handle
x24010:	mov ax, [bp]	; 3: 139 70 0
x24013:	mov di, [bp + 4]	; 3: 139 126 4
x24016:	mov bp, [bp + 2]	; 3: 139 110 2
x24019:	jmp ax	; 2: 255 224

filecreate$12:	; FunctionEnd filecreate

fseek:	; IntegralToIntegral £temporary932 origin
x24021:	mov ax, [bp + 10]	; 3: 139 70 10
x24024:	cmp ax, 0	; 3: 131 248 0
x24027:	jge fseek$1	; 2: 125 4
x24029:	neg ax	; 2: 247 216
x24031:	neg al	; 2: 246 216

fseek$1:	; AssignRegister al £temporary932

fseek$2:	; AssignRegister ah 66
x24033:	mov ah, 66	; 2: 180 66

fseek$3:	; Deref £temporary935 -> stream stream 2
x24035:	mov si, [bp + 6]	; 3: 139 118 6

fseek$4:	; AssignRegister bx £temporary935 -> stream
x24038:	mov bx, [si + 2]	; 3: 139 92 2

fseek$5:	; AssignRegister cx 0
x24041:	mov cx, 0	; 3: 185 0 0

fseek$6:	; IntegralToIntegral £temporary938 offset
x24044:	mov dx, [bp + 8]	; 3: 139 86 8

fseek$7:	; AssignRegister dx £temporary938

fseek$8:	; Interrupt 33
x24047:	int 33	; 2: 205 33

fseek$9:	; Carry 16
x24049:	jc fseek$16	; 2: 114 23

fseek$10:	; Deref £temporary941 -> stream stream 23
x24051:	mov si, [bp + 6]	; 3: 139 118 6

fseek$11:	; InspectRegister £temporary942 ax

fseek$12:	; Assign £temporary941 -> stream £temporary942
x24054:	mov [si + 23], ax	; 3: 137 68 23

fseek$13:	; Deref £temporary943 -> stream stream 23
x24057:	mov si, [bp + 6]	; 3: 139 118 6

fseek$14:	; SetReturnValue £temporary943 -> stream
x24060:	mov bx, [si + 23]	; 3: 139 92 23

fseek$15:	; Return £temporary943 -> stream
x24063:	mov ax, [bp]	; 3: 139 70 0
x24066:	mov di, [bp + 4]	; 3: 139 126 4
x24069:	mov bp, [bp + 2]	; 3: 139 110 2
x24072:	jmp ax	; 2: 255 224

fseek$16:	; Deref £temporary944 -> stream stream 21
x24074:	mov si, [bp + 6]	; 3: 139 118 6

fseek$17:	; Assign £temporary944 -> stream 15
x24077:	mov word [si + 21], 15	; 5: 199 68 21 15 0

fseek$18:	; SetReturnValue -1
x24082:	mov bx, -1	; 3: 187 255 255

fseek$19:	; Return -1
x24085:	mov ax, [bp]	; 3: 139 70 0
x24088:	mov di, [bp + 4]	; 3: 139 126 4
x24091:	mov bp, [bp + 2]	; 3: 139 110 2
x24094:	jmp ax	; 2: 255 224

fseek$20:	; FunctionEnd fseek

fileexists:	; AssignRegister ah 67
x24096:	mov ah, 67	; 2: 180 67

fileexists$1:	; AssignRegister al 0
x24098:	mov al, 0	; 2: 176 0

fileexists$2:	; AssignRegister dx name
x24100:	mov dx, [bp + 6]	; 3: 139 86 6

fileexists$3:	; Interrupt 33
x24103:	int 33	; 2: 205 33

fileexists$4:	; Carry 7
x24105:	jc fileexists$7	; 2: 114 5

fileexists$5:	; Assign £temporary697 1
x24107:	mov bx, 1	; 3: 187 1 0

fileexists$6:	; Goto 8
x24110:	jmp fileexists$8	; 2: 235 3

fileexists$7:	; Assign £temporary697 0
x24112:	mov bx, 0	; 3: 187 0 0

fileexists$8:	; SetReturnValue £temporary697

fileexists$9:	; Return £temporary697
x24115:	mov ax, [bp]	; 3: 139 70 0
x24118:	mov di, [bp + 4]	; 3: 139 126 4
x24121:	mov bp, [bp + 2]	; 3: 139 110 2
x24124:	jmp ax	; 2: 255 224

fileexists$10:	; FunctionEnd fileexists

strcpy:	; Assign index 0
x24126:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strcpy$1:	; BinaryAdd £temporary3698 source index
x24131:	mov si, [bp + 8]	; 3: 139 118 8
x24134:	add si, [bp + 10]	; 3: 3 118 10

strcpy$2:	; Deref £temporary3697 -> £temporary3698 £temporary3698 0

strcpy$3:	; Equal 11 £temporary3697 -> £temporary3698 0
x24137:	cmp byte [si], 0	; 3: 128 60 0
x24140:	je strcpy$11	; 2: 116 21

strcpy$4:	; BinaryAdd £temporary3702 target index
x24142:	mov si, [bp + 6]	; 3: 139 118 6
x24145:	add si, [bp + 10]	; 3: 3 118 10

strcpy$5:	; Deref £temporary3701 -> £temporary3702 £temporary3702 0

strcpy$6:	; BinaryAdd £temporary3704 source index
x24148:	mov di, [bp + 8]	; 3: 139 126 8
x24151:	add di, [bp + 10]	; 3: 3 126 10

strcpy$7:	; Deref £temporary3703 -> £temporary3704 £temporary3704 0

strcpy$8:	; Assign £temporary3701 -> £temporary3702 £temporary3703 -> £temporary3704
x24154:	mov al, [di]	; 2: 138 5
x24156:	mov [si], al	; 2: 136 4

strcpy$9:	; Increment index
x24158:	inc word [bp + 10]	; 3: 255 70 10

strcpy$10:	; Goto 1
x24161:	jmp strcpy$1	; 2: 235 224

strcpy$11:	; BinaryAdd £temporary3706 target index
x24163:	mov si, [bp + 6]	; 3: 139 118 6
x24166:	add si, [bp + 10]	; 3: 3 118 10

strcpy$12:	; Deref £temporary3705 -> £temporary3706 £temporary3706 0

strcpy$13:	; Assign £temporary3705 -> £temporary3706 0
x24169:	mov byte [si], 0	; 3: 198 4 0

strcpy$14:	; SetReturnValue target
x24172:	mov bx, [bp + 6]	; 3: 139 94 6

strcpy$15:	; Return target
x24175:	mov ax, [bp]	; 3: 139 70 0
x24178:	mov di, [bp + 4]	; 3: 139 126 4
x24181:	mov bp, [bp + 2]	; 3: 139 110 2
x24184:	jmp ax	; 2: 255 224

strcpy$16:	; FunctionEnd strcpy

fprintf:	; address £temporary2213 format
x24186:	mov si, bp	; 2: 137 238
x24188:	add si, 8	; 3: 131 198 8

fprintf$1:	; IntegralToIntegral £temporary2214 £temporary2213

fprintf$2:	; BinaryAdd arg_list £temporary2214 2
x24191:	add si, 2	; 3: 131 198 2
x24194:	mov [di + 10], si	; 3: 137 117 10

fprintf$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

fprintf$4:	; Parameter 12 outStream 6
x24197:	mov ax, [bp + 6]	; 3: 139 70 6
x24200:	mov [di + 18], ax	; 3: 137 69 18

fprintf$5:	; Parameter 12 format 8
x24203:	mov ax, [bp + 8]	; 3: 139 70 8
x24206:	mov [di + 20], ax	; 3: 137 69 20

fprintf$6:	; Parameter 12 arg_list 10
x24209:	mov ax, [di + 10]	; 3: 139 69 10
x24212:	mov [di + 22], ax	; 3: 137 69 22

fprintf$7:	; Call 12 vfprintf 0
x24215:	mov word [di + 12], fprintf$8	; 5: 199 69 12 170 94
x24220:	mov [di + 14], bp	; 3: 137 109 14
x24223:	mov [di + 16], di	; 3: 137 125 16
x24226:	add di, 12	; 3: 131 199 12
x24229:	mov bp, di	; 2: 137 253
x24231:	jmp vfprintf	; 3: 233 0 177

fprintf$8:	; PostCall 12

fprintf$9:	; GetReturnValue £temporary2216

fprintf$10:	; SetReturnValue £temporary2216

fprintf$11:	; Return £temporary2216
x24234:	mov ax, [bp]	; 3: 139 70 0
x24237:	mov di, [bp + 4]	; 3: 139 126 4
x24240:	mov bp, [bp + 2]	; 3: 139 110 2
x24243:	jmp ax	; 2: 255 224

fprintf$12:	; FunctionEnd fprintf

abort:	; AssignRegister ah 76
x24245:	mov ah, 76	; 2: 180 76

abort$1:	; AssignRegister al 255
x24247:	mov al, 255	; 2: 176 255

abort$2:	; Interrupt 33
x24249:	int 33	; 2: 205 33

abort$3:	; Return 0
x24251:	mov ax, [bp]	; 3: 139 70 0
x24254:	mov di, [bp + 4]	; 3: 139 126 4
x24257:	mov bp, [bp + 2]	; 3: 139 110 2
x24260:	jmp ax	; 2: 255 224

abort$4:	; FunctionEnd abort

feof:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

feof$1:	; Parameter 8 stream 6
x24262:	mov ax, [bp + 6]	; 3: 139 70 6
x24265:	mov [bp + 14], ax	; 3: 137 70 14

feof$2:	; Parameter 8 0 8
x24268:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

feof$3:	; Parameter 8 1 10
x24273:	mov word [bp + 18], 1	; 5: 199 70 18 1 0

feof$4:	; Call 8 fseek 0
x24278:	mov word [bp + 8], feof$5	; 5: 199 70 8 228 94
x24283:	mov [bp + 10], bp	; 3: 137 110 10
x24286:	add bp, 8	; 3: 131 197 8
x24289:	jmp fseek	; 3: 233 241 254

feof$5:	; PostCall 8

feof$6:	; GetReturnValue £temporary965

feof$7:	; IntegralToIntegral £temporary966 £temporary965
x24292:	and ebx, 65535	; 7: 102 129 227 255 255 0 0

feof$8:	; Assign currPosition £temporary966
x24299:	mov [bp + 8], ebx	; 4: 102 137 94 8

feof$9:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

feof$10:	; Parameter 12 stream 6
x24303:	mov ax, [bp + 6]	; 3: 139 70 6
x24306:	mov [bp + 18], ax	; 3: 137 70 18

feof$11:	; Parameter 12 0 8
x24309:	mov word [bp + 20], 0	; 5: 199 70 20 0 0

feof$12:	; Parameter 12 2 10
x24314:	mov word [bp + 22], 2	; 5: 199 70 22 2 0

feof$13:	; Call 12 fseek 0
x24319:	mov word [bp + 12], feof$14	; 5: 199 70 12 13 95
x24324:	mov [bp + 14], bp	; 3: 137 110 14
x24327:	add bp, 12	; 3: 131 197 12
x24330:	jmp fseek	; 3: 233 200 254

feof$14:	; PostCall 12

feof$15:	; GetReturnValue £temporary967

feof$16:	; IntegralToIntegral £temporary968 £temporary967
x24333:	and ebx, 65535	; 7: 102 129 227 255 255 0 0

feof$17:	; Assign lastPosition £temporary968
x24340:	mov [bp + 12], ebx	; 4: 102 137 94 12

feof$18:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

feof$19:	; Parameter 16 stream 6
x24344:	mov ax, [bp + 6]	; 3: 139 70 6
x24347:	mov [bp + 22], ax	; 3: 137 70 22

feof$20:	; IntegralToIntegral £temporary969 currPosition
x24350:	mov eax, [bp + 8]	; 4: 102 139 70 8

feof$21:	; Parameter 16 £temporary969 8
x24354:	mov [bp + 24], ax	; 3: 137 70 24

feof$22:	; Parameter 16 0 10
x24357:	mov word [bp + 26], 0	; 5: 199 70 26 0 0

feof$23:	; Call 16 fseek 0
x24362:	mov word [bp + 16], feof$24	; 5: 199 70 16 56 95
x24367:	mov [bp + 18], bp	; 3: 137 110 18
x24370:	add bp, 16	; 3: 131 197 16
x24373:	jmp fseek	; 3: 233 157 254

feof$24:	; PostCall 16

feof$25:	; NotEqual 28 currPosition lastPosition
x24376:	mov eax, [bp + 12]	; 4: 102 139 70 12
x24380:	cmp [bp + 8], eax	; 4: 102 57 70 8
x24384:	jne feof$28	; 2: 117 5

feof$26:	; Assign £temporary972 1
x24386:	mov ax, 1	; 3: 184 1 0

feof$27:	; Goto 29
x24389:	jmp feof$29	; 2: 235 3

feof$28:	; Assign £temporary972 0
x24391:	mov ax, 0	; 3: 184 0 0

feof$29:	; Assign endOfFile £temporary972
x24394:	mov [bp + 16], ax	; 3: 137 70 16

feof$30:	; SetReturnValue endOfFile
x24397:	mov bx, [bp + 16]	; 3: 139 94 16

feof$31:	; Return endOfFile
x24400:	mov ax, [bp]	; 3: 139 70 0
x24403:	mov di, [bp + 4]	; 3: 139 126 4
x24406:	mov bp, [bp + 2]	; 3: 139 110 2
x24409:	jmp ax	; 2: 255 224

feof$32:	; FunctionEnd feof

fscanf:	; address £temporary1565 format
x24411:	mov si, bp	; 2: 137 238
x24413:	add si, 8	; 3: 131 198 8

fscanf$1:	; IntegralToIntegral £temporary1566 £temporary1565

fscanf$2:	; BinaryAdd arg_list £temporary1566 2
x24416:	add si, 2	; 3: 131 198 2
x24419:	mov [di + 10], si	; 3: 137 117 10

fscanf$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

fscanf$4:	; Parameter 12 inStream 6
x24422:	mov ax, [bp + 6]	; 3: 139 70 6
x24425:	mov [di + 18], ax	; 3: 137 69 18

fscanf$5:	; Parameter 12 format 8
x24428:	mov ax, [bp + 8]	; 3: 139 70 8
x24431:	mov [di + 20], ax	; 3: 137 69 20

fscanf$6:	; Parameter 12 arg_list 10
x24434:	mov ax, [di + 10]	; 3: 139 69 10
x24437:	mov [di + 22], ax	; 3: 137 69 22

fscanf$7:	; Call 12 vfscanf 0
x24440:	mov word [di + 12], fscanf$8	; 5: 199 69 12 139 95
x24445:	mov [di + 14], bp	; 3: 137 109 14
x24448:	mov [di + 16], di	; 3: 137 125 16
x24451:	add di, 12	; 3: 131 199 12
x24454:	mov bp, di	; 2: 137 253
x24456:	nop	; 1: 144
x24457:	jmp vfscanf	; 2: 235 11

fscanf$8:	; PostCall 12

fscanf$9:	; GetReturnValue £temporary1568

fscanf$10:	; SetReturnValue £temporary1568

fscanf$11:	; Return £temporary1568
x24459:	mov ax, [bp]	; 3: 139 70 0
x24462:	mov di, [bp + 4]	; 3: 139 126 4
x24465:	mov bp, [bp + 2]	; 3: 139 110 2
x24468:	jmp ax	; 2: 255 224

fscanf$12:	; FunctionEnd fscanf

vfscanf:	; Assign g_inStatus 0
x24470:	mov word [g_inStatus], 0	; 6: 199 6 199 95 0 0

vfscanf$1:	; IntegralToIntegral £temporary1573 inStream
x24476:	mov ax, [bp + 6]	; 3: 139 70 6

vfscanf$2:	; Assign g_inDevice £temporary1573
x24479:	mov [g_inDevice], ax	; 3: 163 201 95

vfscanf$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

vfscanf$4:	; Parameter 12 format 6
x24482:	mov ax, [bp + 8]	; 3: 139 70 8
x24485:	mov [bp + 18], ax	; 3: 137 70 18

vfscanf$5:	; Parameter 12 arg_list 8
x24488:	mov ax, [bp + 10]	; 3: 139 70 10
x24491:	mov [bp + 20], ax	; 3: 137 70 20

vfscanf$6:	; Call 12 scanFormat 0
x24494:	mov word [bp + 12], vfscanf$7	; 5: 199 70 12 188 95
x24499:	mov [bp + 14], bp	; 3: 137 110 14
x24502:	add bp, 12	; 3: 131 197 12
x24505:	nop	; 1: 144
x24506:	jmp scanFormat	; 2: 235 15

vfscanf$7:	; PostCall 12

vfscanf$8:	; GetReturnValue £temporary1574

vfscanf$9:	; SetReturnValue £temporary1574

vfscanf$10:	; Return £temporary1574
x24508:	mov ax, [bp]	; 3: 139 70 0
x24511:	mov di, [bp + 4]	; 3: 139 126 4
x24514:	mov bp, [bp + 2]	; 3: 139 110 2
x24517:	jmp ax	; 2: 255 224

vfscanf$11:	; FunctionEnd vfscanf

g_inStatus:
x24519:	db 0, 0	; 2: 0 0

g_inDevice:
x24521:	db 0, 0	; 2: 0 0

scanFormat:	; Assign percent 0
x24523:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanFormat$1:	; Assign shortInt 0
x24528:	mov word [bp + 15], 0	; 5: 199 70 15 0 0

scanFormat$2:	; Assign longIntOrDouble 0
x24533:	mov word [bp + 17], 0	; 5: 199 70 17 0 0

scanFormat$3:	; Assign longDouble 0
x24538:	mov word [bp + 19], 0	; 5: 199 70 19 0 0

scanFormat$4:	; Assign star 0
x24543:	mov word [bp + 21], 0	; 5: 199 70 21 0 0

scanFormat$5:	; Assign g_inCount 0
x24548:	mov word [g_inCount], 0	; 6: 199 6 234 100 0 0

scanFormat$6:	; Assign g_inChars 0
x24554:	mov word [g_inChars], 0	; 6: 199 6 236 100 0 0

scanFormat$7:	; Assign index 0
x24560:	mov word [bp + 31], 0	; 5: 199 70 31 0 0

scanFormat$8:	; BinaryAdd £temporary1360 format index
x24565:	mov si, [bp + 6]	; 3: 139 118 6
x24568:	add si, [bp + 31]	; 3: 3 118 31

scanFormat$9:	; Deref £temporary1359 -> £temporary1360 £temporary1360 0

scanFormat$10:	; Equal 329 £temporary1359 -> £temporary1360 0
x24571:	cmp byte [si], 0	; 3: 128 60 0
x24574:	je scanFormat$329	; 4: 15 132 217 4

scanFormat$11:	; BinaryAdd £temporary1364 format index
x24578:	mov si, [bp + 6]	; 3: 139 118 6
x24581:	add si, [bp + 31]	; 3: 3 118 31

scanFormat$12:	; Deref £temporary1363 -> £temporary1364 £temporary1364 0

scanFormat$13:	; Assign c £temporary1363 -> £temporary1364
x24584:	mov al, [si]	; 2: 138 4
x24586:	mov [bp + 10], al	; 3: 136 70 10

scanFormat$14:	; IntegralToIntegral £temporary1365 c
x24589:	mov al, [bp + 10]	; 3: 138 70 10
x24592:	and ax, 255	; 3: 37 255 0
x24595:	cmp al, 0	; 2: 60 0
x24597:	jge scanFormat$15	; 2: 125 4
x24599:	neg al	; 2: 246 216
x24601:	neg ax	; 2: 247 216

scanFormat$15:	; BinaryAdd d £temporary1365 1
x24603:	inc ax	; 1: 64
x24604:	mov [bp + 55], ax	; 3: 137 70 55

scanFormat$16:	; Equal 321 percent 0
x24607:	cmp word [bp + 13], 0	; 4: 131 126 13 0
x24611:	je scanFormat$321	; 4: 15 132 143 4

scanFormat$17:	; BinarySubtract £temporary1367 d 1
x24615:	mov ax, [bp + 55]	; 3: 139 70 55
x24618:	dec ax	; 1: 72

scanFormat$18:	; Case 36 £temporary1367 104
x24619:	cmp ax, 104	; 3: 131 248 104
x24622:	je scanFormat$36	; 2: 116 100

scanFormat$19:	; Case 38 £temporary1367 108
x24624:	cmp ax, 108	; 3: 131 248 108
x24627:	je scanFormat$38	; 2: 116 103

scanFormat$20:	; Case 40 £temporary1367 76
x24629:	cmp ax, 76	; 3: 131 248 76
x24632:	je scanFormat$40	; 2: 116 106

scanFormat$21:	; Case 42 £temporary1367 42
x24634:	cmp ax, 42	; 3: 131 248 42
x24637:	je scanFormat$42	; 2: 116 109

scanFormat$22:	; Case 44 £temporary1367 99
x24639:	cmp ax, 99	; 3: 131 248 99
x24642:	je scanFormat$44	; 2: 116 112

scanFormat$23:	; Case 62 £temporary1367 115
x24644:	cmp ax, 115	; 3: 131 248 115
x24647:	je scanFormat$62	; 4: 15 132 184 0

scanFormat$24:	; Case 81 £temporary1367 100
x24651:	cmp ax, 100	; 3: 131 248 100
x24654:	je scanFormat$81	; 4: 15 132 1 1

scanFormat$25:	; Case 81 £temporary1367 105
x24658:	cmp ax, 105	; 3: 131 248 105
x24661:	je scanFormat$81	; 4: 15 132 250 0

scanFormat$26:	; Case 117 £temporary1367 111
x24665:	cmp ax, 111	; 3: 131 248 111
x24668:	je scanFormat$117	; 4: 15 132 135 1

scanFormat$27:	; Case 153 £temporary1367 120
x24672:	cmp ax, 120	; 3: 131 248 120
x24675:	je scanFormat$153	; 4: 15 132 254 1

scanFormat$28:	; Case 189 £temporary1367 117
x24679:	cmp ax, 117	; 3: 131 248 117
x24682:	je scanFormat$189	; 4: 15 132 117 2

scanFormat$29:	; Case 225 £temporary1367 103
x24686:	cmp ax, 103	; 3: 131 248 103
x24689:	je scanFormat$225	; 4: 15 132 236 2

scanFormat$30:	; Case 225 £temporary1367 102
x24693:	cmp ax, 102	; 3: 131 248 102
x24696:	je scanFormat$225	; 4: 15 132 229 2

scanFormat$31:	; Case 225 £temporary1367 101
x24700:	cmp ax, 101	; 3: 131 248 101
x24703:	je scanFormat$225	; 4: 15 132 222 2

scanFormat$32:	; Case 261 £temporary1367 91
x24707:	cmp ax, 91	; 3: 131 248 91
x24710:	je scanFormat$261	; 4: 15 132 75 3

scanFormat$33:	; Case 312 £temporary1367 110
x24714:	cmp ax, 110	; 3: 131 248 110
x24717:	je scanFormat$312	; 4: 15 132 7 4

scanFormat$34:	; CaseEnd £temporary1367

scanFormat$35:	; Goto 327
x24721:	jmp scanFormat$327	; 3: 233 65 4

scanFormat$36:	; Assign shortInt 1
x24724:	mov word [bp + 15], 1	; 5: 199 70 15 1 0

scanFormat$37:	; Goto 327
x24729:	jmp scanFormat$327	; 3: 233 57 4

scanFormat$38:	; Assign longIntOrDouble 1
x24732:	mov word [bp + 17], 1	; 5: 199 70 17 1 0

scanFormat$39:	; Goto 327
x24737:	jmp scanFormat$327	; 3: 233 49 4

scanFormat$40:	; Assign longDouble 1
x24740:	mov word [bp + 19], 1	; 5: 199 70 19 1 0

scanFormat$41:	; Goto 327
x24745:	jmp scanFormat$327	; 3: 233 41 4

scanFormat$42:	; Assign star 1
x24748:	mov word [bp + 21], 1	; 5: 199 70 21 1 0

scanFormat$43:	; Goto 327
x24753:	jmp scanFormat$327	; 3: 233 33 4

scanFormat$44:	; CallHeader 57 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$45:	; Call 57 scanChar 0
x24756:	mov word [bp + 57], scanFormat$46	; 5: 199 70 57 194 96
x24761:	mov [bp + 59], bp	; 3: 137 110 59
x24764:	add bp, 57	; 3: 131 197 57
x24767:	jmp scanChar	; 3: 233 44 4

scanFormat$46:	; PostCall 57

scanFormat$47:	; GetReturnValue £temporary1368

scanFormat$48:	; Assign charValue £temporary1368
x24770:	mov [bp + 57], bl	; 3: 136 94 57

scanFormat$49:	; NotEqual 57 star 0
x24773:	cmp word [bp + 21], 0	; 4: 131 126 21 0
x24777:	jne scanFormat$57	; 2: 117 23

scanFormat$50:	; BinaryAdd arg_list arg_list 2
x24779:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$51:	; BinarySubtract £temporary1372 arg_list 2
x24783:	mov si, [bp + 8]	; 3: 139 118 8
x24786:	sub si, 2	; 3: 131 238 2

scanFormat$52:	; IntegralToIntegral £temporary1373 £temporary1372

scanFormat$53:	; Deref £temporary1374 -> £temporary1373 £temporary1373 0

scanFormat$54:	; Assign charPtr £temporary1374 -> £temporary1373
x24789:	mov ax, [si]	; 2: 139 4
x24791:	mov [bp + 11], ax	; 3: 137 70 11

scanFormat$55:	; Deref £temporary1375 -> charPtr charPtr 0
x24794:	mov si, [bp + 11]	; 3: 139 118 11

scanFormat$56:	; Assign £temporary1375 -> charPtr charValue
x24797:	mov al, [bp + 57]	; 3: 138 70 57
x24800:	mov [si], al	; 2: 136 4

scanFormat$57:	; Assign percent 0
x24802:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanFormat$58:	; IntegralToIntegral £temporary1376 charValue
x24807:	mov al, [bp + 57]	; 3: 138 70 57
x24810:	and ax, 255	; 3: 37 255 0
x24813:	cmp al, 0	; 2: 60 0
x24815:	jge scanFormat$59	; 2: 125 4
x24817:	neg al	; 2: 246 216
x24819:	neg ax	; 2: 247 216

scanFormat$59:	; Equal 327 £temporary1376 -1
x24821:	cmp ax, -1	; 3: 131 248 255
x24824:	je scanFormat$327	; 4: 15 132 217 3

scanFormat$60:	; Increment g_inCount
x24828:	inc word [g_inCount]	; 4: 255 6 234 100

scanFormat$61:	; Goto 327
x24832:	jmp scanFormat$327	; 3: 233 210 3

scanFormat$62:	; NotEqual 74 star 0
x24835:	cmp word [bp + 21], 0	; 4: 131 126 21 0
x24839:	jne scanFormat$74	; 2: 117 42

scanFormat$63:	; BinaryAdd arg_list arg_list 2
x24841:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$64:	; BinarySubtract £temporary1382 arg_list 2
x24845:	mov si, [bp + 8]	; 3: 139 118 8
x24848:	sub si, 2	; 3: 131 238 2

scanFormat$65:	; IntegralToIntegral £temporary1383 £temporary1382

scanFormat$66:	; Deref £temporary1384 -> £temporary1383 £temporary1383 0

scanFormat$67:	; Assign charPtr £temporary1384 -> £temporary1383
x24851:	mov ax, [si]	; 2: 139 4
x24853:	mov [bp + 11], ax	; 3: 137 70 11

scanFormat$68:	; CallHeader 57 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$69:	; Parameter 57 charPtr 6
x24856:	mov ax, [bp + 11]	; 3: 139 70 11
x24859:	mov [bp + 63], ax	; 3: 137 70 63

scanFormat$70:	; Parameter 57 0 8
x24862:	mov word [bp + 65], 0	; 5: 199 70 65 0 0

scanFormat$71:	; Call 57 scanString 0
x24867:	mov word [bp + 57], scanFormat$72	; 5: 199 70 57 49 97
x24872:	mov [bp + 59], bp	; 3: 137 110 59
x24875:	add bp, 57	; 3: 131 197 57
x24878:	jmp scanString	; 3: 233 44 4

scanFormat$72:	; PostCall 57

scanFormat$73:	; Goto 79
x24881:	jmp scanFormat$79	; 2: 235 24

scanFormat$74:	; CallHeader 57 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$75:	; Parameter 57 0 6
x24883:	mov word [bp + 63], 0	; 5: 199 70 63 0 0

scanFormat$76:	; Parameter 57 0 8
x24888:	mov word [bp + 65], 0	; 5: 199 70 65 0 0

scanFormat$77:	; Call 57 scanString 0
x24893:	mov word [bp + 57], scanFormat$78	; 5: 199 70 57 75 97
x24898:	mov [bp + 59], bp	; 3: 137 110 59
x24901:	add bp, 57	; 3: 131 197 57
x24904:	jmp scanString	; 3: 233 18 4

scanFormat$78:	; PostCall 57

scanFormat$79:	; Assign percent 0
x24907:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanFormat$80:	; Goto 327
x24912:	jmp scanFormat$327	; 3: 233 130 3

scanFormat$81:	; CallHeader 57 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$82:	; Parameter 57 10 6
x24915:	mov word [bp + 63], 10	; 5: 199 70 63 10 0

scanFormat$83:	; Call 57 scanLongInt 0
x24920:	mov word [bp + 57], scanFormat$84	; 5: 199 70 57 102 97
x24925:	mov [bp + 59], bp	; 3: 137 110 59
x24928:	add bp, 57	; 3: 131 197 57
x24931:	jmp scanLongInt	; 3: 233 123 6

scanFormat$84:	; PostCall 57

scanFormat$85:	; GetReturnValue £temporary1387

scanFormat$86:	; Assign longValue £temporary1387
x24934:	mov [bp + 23], ebx	; 4: 102 137 94 23

scanFormat$87:	; NotEqual 115 star 0
x24938:	cmp word [bp + 21], 0	; 4: 131 126 21 0
x24942:	jne scanFormat$115	; 2: 117 111

scanFormat$88:	; Equal 98 shortInt 0
x24944:	cmp word [bp + 15], 0	; 4: 131 126 15 0
x24948:	je scanFormat$98	; 2: 116 37

scanFormat$89:	; BinaryAdd arg_list arg_list 2
x24950:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$90:	; BinarySubtract £temporary1391 arg_list 2
x24954:	mov si, [bp + 8]	; 3: 139 118 8
x24957:	sub si, 2	; 3: 131 238 2

scanFormat$91:	; IntegralToIntegral £temporary1392 £temporary1391

scanFormat$92:	; Deref £temporary1393 -> £temporary1392 £temporary1392 0

scanFormat$93:	; Assign shortPtr £temporary1393 -> £temporary1392
x24960:	mov ax, [si]	; 2: 139 4
x24962:	mov [bp + 29], ax	; 3: 137 70 29

scanFormat$94:	; Deref £temporary1394 -> shortPtr shortPtr 0
x24965:	mov si, [bp + 29]	; 3: 139 118 29

scanFormat$95:	; IntegralToIntegral £temporary1395 longValue
x24968:	mov eax, [bp + 23]	; 4: 102 139 70 23
x24972:	cmp eax, 0	; 4: 102 131 248 0
x24976:	jge scanFormat$96	; 2: 125 5
x24978:	neg eax	; 3: 102 247 216
x24981:	neg al	; 2: 246 216

scanFormat$96:	; Assign £temporary1394 -> shortPtr £temporary1395
x24983:	mov [si], al	; 2: 136 4

scanFormat$97:	; Goto 115
x24985:	jmp scanFormat$115	; 2: 235 68

scanFormat$98:	; NotEqual 108 longIntOrDouble 0
x24987:	cmp word [bp + 17], 0	; 4: 131 126 17 0
x24991:	jne scanFormat$108	; 2: 117 37

scanFormat$99:	; BinaryAdd arg_list arg_list 2
x24993:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$100:	; BinarySubtract £temporary1399 arg_list 2
x24997:	mov si, [bp + 8]	; 3: 139 118 8
x25000:	sub si, 2	; 3: 131 238 2

scanFormat$101:	; IntegralToIntegral £temporary1400 £temporary1399

scanFormat$102:	; Deref £temporary1401 -> £temporary1400 £temporary1400 0

scanFormat$103:	; Assign intPtr £temporary1401 -> £temporary1400
x25003:	mov ax, [si]	; 2: 139 4
x25005:	mov [bp + 33], ax	; 3: 137 70 33

scanFormat$104:	; Deref £temporary1402 -> intPtr intPtr 0
x25008:	mov si, [bp + 33]	; 3: 139 118 33

scanFormat$105:	; IntegralToIntegral £temporary1403 longValue
x25011:	mov eax, [bp + 23]	; 4: 102 139 70 23
x25015:	cmp eax, 0	; 4: 102 131 248 0
x25019:	jge scanFormat$106	; 2: 125 5
x25021:	neg eax	; 3: 102 247 216
x25024:	neg ax	; 2: 247 216

scanFormat$106:	; Assign £temporary1402 -> intPtr £temporary1403
x25026:	mov [si], ax	; 2: 137 4

scanFormat$107:	; Goto 115
x25028:	jmp scanFormat$115	; 2: 235 25

scanFormat$108:	; BinaryAdd arg_list arg_list 2
x25030:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$109:	; BinarySubtract £temporary1405 arg_list 2
x25034:	mov si, [bp + 8]	; 3: 139 118 8
x25037:	sub si, 2	; 3: 131 238 2

scanFormat$110:	; IntegralToIntegral £temporary1406 £temporary1405

scanFormat$111:	; Deref £temporary1407 -> £temporary1406 £temporary1406 0

scanFormat$112:	; Assign longPtr £temporary1407 -> £temporary1406
x25040:	mov ax, [si]	; 2: 139 4
x25042:	mov [bp + 27], ax	; 3: 137 70 27

scanFormat$113:	; Deref £temporary1408 -> longPtr longPtr 0
x25045:	mov si, [bp + 27]	; 3: 139 118 27

scanFormat$114:	; Assign £temporary1408 -> longPtr longValue
x25048:	mov eax, [bp + 23]	; 4: 102 139 70 23
x25052:	mov [si], eax	; 3: 102 137 4

scanFormat$115:	; Assign percent 0
x25055:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanFormat$116:	; Goto 327
x25060:	jmp scanFormat$327	; 3: 233 238 2

scanFormat$117:	; CallHeader 57 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$118:	; Parameter 57 8 6
x25063:	mov word [bp + 63], 8	; 5: 199 70 63 8 0

scanFormat$119:	; Call 57 scanUnsignedLongInt 0
x25068:	mov word [bp + 57], scanFormat$120	; 5: 199 70 57 250 97
x25073:	mov [bp + 59], bp	; 3: 137 110 59
x25076:	add bp, 57	; 3: 131 197 57
x25079:	jmp scanUnsignedLongInt	; 3: 233 33 10

scanFormat$120:	; PostCall 57

scanFormat$121:	; GetReturnValue £temporary1410

scanFormat$122:	; Assign unsignedLongValue £temporary1410
x25082:	mov [bp + 37], ebx	; 4: 102 137 94 37

scanFormat$123:	; NotEqual 151 star 0
x25086:	cmp word [bp + 21], 0	; 4: 131 126 21 0
x25090:	jne scanFormat$151	; 2: 117 89

scanFormat$124:	; Equal 134 shortInt 0
x25092:	cmp word [bp + 15], 0	; 4: 131 126 15 0
x25096:	je scanFormat$134	; 2: 116 26

scanFormat$125:	; BinaryAdd arg_list arg_list 2
x25098:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$126:	; BinarySubtract £temporary1414 arg_list 2
x25102:	mov si, [bp + 8]	; 3: 139 118 8
x25105:	sub si, 2	; 3: 131 238 2

scanFormat$127:	; IntegralToIntegral £temporary1415 £temporary1414

scanFormat$128:	; Deref £temporary1416 -> £temporary1415 £temporary1415 0

scanFormat$129:	; Assign unsignedShortPtr £temporary1416 -> £temporary1415
x25108:	mov ax, [si]	; 2: 139 4
x25110:	mov [bp + 43], ax	; 3: 137 70 43

scanFormat$130:	; Deref £temporary1417 -> unsignedShortPtr unsignedShortPtr 0
x25113:	mov si, [bp + 43]	; 3: 139 118 43

scanFormat$131:	; IntegralToIntegral £temporary1418 unsignedLongValue
x25116:	mov eax, [bp + 37]	; 4: 102 139 70 37

scanFormat$132:	; Assign £temporary1417 -> unsignedShortPtr £temporary1418
x25120:	mov [si], al	; 2: 136 4

scanFormat$133:	; Goto 151
x25122:	jmp scanFormat$151	; 2: 235 57

scanFormat$134:	; NotEqual 144 longIntOrDouble 0
x25124:	cmp word [bp + 17], 0	; 4: 131 126 17 0
x25128:	jne scanFormat$144	; 2: 117 26

scanFormat$135:	; BinaryAdd arg_list arg_list 2
x25130:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$136:	; BinarySubtract £temporary1422 arg_list 2
x25134:	mov si, [bp + 8]	; 3: 139 118 8
x25137:	sub si, 2	; 3: 131 238 2

scanFormat$137:	; IntegralToIntegral £temporary1423 £temporary1422

scanFormat$138:	; Deref £temporary1424 -> £temporary1423 £temporary1423 0

scanFormat$139:	; Assign unsignedIntPtr £temporary1424 -> £temporary1423
x25140:	mov ax, [si]	; 2: 139 4
x25142:	mov [bp + 45], ax	; 3: 137 70 45

scanFormat$140:	; Deref £temporary1425 -> unsignedIntPtr unsignedIntPtr 0
x25145:	mov si, [bp + 45]	; 3: 139 118 45

scanFormat$141:	; IntegralToIntegral £temporary1426 unsignedLongValue
x25148:	mov eax, [bp + 37]	; 4: 102 139 70 37

scanFormat$142:	; Assign £temporary1425 -> unsignedIntPtr £temporary1426
x25152:	mov [si], ax	; 2: 137 4

scanFormat$143:	; Goto 151
x25154:	jmp scanFormat$151	; 2: 235 25

scanFormat$144:	; BinaryAdd arg_list arg_list 2
x25156:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$145:	; BinarySubtract £temporary1428 arg_list 2
x25160:	mov si, [bp + 8]	; 3: 139 118 8
x25163:	sub si, 2	; 3: 131 238 2

scanFormat$146:	; IntegralToIntegral £temporary1429 £temporary1428

scanFormat$147:	; Deref £temporary1430 -> £temporary1429 £temporary1429 0

scanFormat$148:	; Assign unsignedLongPtr £temporary1430 -> £temporary1429
x25166:	mov ax, [si]	; 2: 139 4
x25168:	mov [bp + 41], ax	; 3: 137 70 41

scanFormat$149:	; Deref £temporary1431 -> unsignedLongPtr unsignedLongPtr 0
x25171:	mov si, [bp + 41]	; 3: 139 118 41

scanFormat$150:	; Assign £temporary1431 -> unsignedLongPtr unsignedLongValue
x25174:	mov eax, [bp + 37]	; 4: 102 139 70 37
x25178:	mov [si], eax	; 3: 102 137 4

scanFormat$151:	; Assign percent 0
x25181:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanFormat$152:	; Goto 327
x25186:	jmp scanFormat$327	; 3: 233 112 2

scanFormat$153:	; CallHeader 57 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$154:	; Parameter 57 16 6
x25189:	mov word [bp + 63], 16	; 5: 199 70 63 16 0

scanFormat$155:	; Call 57 scanUnsignedLongInt 0
x25194:	mov word [bp + 57], scanFormat$156	; 5: 199 70 57 120 98
x25199:	mov [bp + 59], bp	; 3: 137 110 59
x25202:	add bp, 57	; 3: 131 197 57
x25205:	jmp scanUnsignedLongInt	; 3: 233 163 9

scanFormat$156:	; PostCall 57

scanFormat$157:	; GetReturnValue £temporary1433

scanFormat$158:	; Assign unsignedLongValue £temporary1433
x25208:	mov [bp + 37], ebx	; 4: 102 137 94 37

scanFormat$159:	; NotEqual 187 star 0
x25212:	cmp word [bp + 21], 0	; 4: 131 126 21 0
x25216:	jne scanFormat$187	; 2: 117 89

scanFormat$160:	; Equal 170 shortInt 0
x25218:	cmp word [bp + 15], 0	; 4: 131 126 15 0
x25222:	je scanFormat$170	; 2: 116 26

scanFormat$161:	; BinaryAdd arg_list arg_list 2
x25224:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$162:	; BinarySubtract £temporary1437 arg_list 2
x25228:	mov si, [bp + 8]	; 3: 139 118 8
x25231:	sub si, 2	; 3: 131 238 2

scanFormat$163:	; IntegralToIntegral £temporary1438 £temporary1437

scanFormat$164:	; Deref £temporary1439 -> £temporary1438 £temporary1438 0

scanFormat$165:	; Assign unsignedShortPtr £temporary1439 -> £temporary1438
x25234:	mov ax, [si]	; 2: 139 4
x25236:	mov [bp + 43], ax	; 3: 137 70 43

scanFormat$166:	; Deref £temporary1440 -> unsignedShortPtr unsignedShortPtr 0
x25239:	mov si, [bp + 43]	; 3: 139 118 43

scanFormat$167:	; IntegralToIntegral £temporary1441 unsignedLongValue
x25242:	mov eax, [bp + 37]	; 4: 102 139 70 37

scanFormat$168:	; Assign £temporary1440 -> unsignedShortPtr £temporary1441
x25246:	mov [si], al	; 2: 136 4

scanFormat$169:	; Goto 187
x25248:	jmp scanFormat$187	; 2: 235 57

scanFormat$170:	; NotEqual 180 longIntOrDouble 0
x25250:	cmp word [bp + 17], 0	; 4: 131 126 17 0
x25254:	jne scanFormat$180	; 2: 117 26

scanFormat$171:	; BinaryAdd arg_list arg_list 2
x25256:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$172:	; BinarySubtract £temporary1445 arg_list 2
x25260:	mov si, [bp + 8]	; 3: 139 118 8
x25263:	sub si, 2	; 3: 131 238 2

scanFormat$173:	; IntegralToIntegral £temporary1446 £temporary1445

scanFormat$174:	; Deref £temporary1447 -> £temporary1446 £temporary1446 0

scanFormat$175:	; Assign unsignedIntPtr £temporary1447 -> £temporary1446
x25266:	mov ax, [si]	; 2: 139 4
x25268:	mov [bp + 45], ax	; 3: 137 70 45

scanFormat$176:	; Deref £temporary1448 -> unsignedIntPtr unsignedIntPtr 0
x25271:	mov si, [bp + 45]	; 3: 139 118 45

scanFormat$177:	; IntegralToIntegral £temporary1449 unsignedLongValue
x25274:	mov eax, [bp + 37]	; 4: 102 139 70 37

scanFormat$178:	; Assign £temporary1448 -> unsignedIntPtr £temporary1449
x25278:	mov [si], ax	; 2: 137 4

scanFormat$179:	; Goto 187
x25280:	jmp scanFormat$187	; 2: 235 25

scanFormat$180:	; BinaryAdd arg_list arg_list 2
x25282:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$181:	; BinarySubtract £temporary1451 arg_list 2
x25286:	mov si, [bp + 8]	; 3: 139 118 8
x25289:	sub si, 2	; 3: 131 238 2

scanFormat$182:	; IntegralToIntegral £temporary1452 £temporary1451

scanFormat$183:	; Deref £temporary1453 -> £temporary1452 £temporary1452 0

scanFormat$184:	; Assign unsignedLongPtr £temporary1453 -> £temporary1452
x25292:	mov ax, [si]	; 2: 139 4
x25294:	mov [bp + 41], ax	; 3: 137 70 41

scanFormat$185:	; Deref £temporary1454 -> unsignedLongPtr unsignedLongPtr 0
x25297:	mov si, [bp + 41]	; 3: 139 118 41

scanFormat$186:	; Assign £temporary1454 -> unsignedLongPtr unsignedLongValue
x25300:	mov eax, [bp + 37]	; 4: 102 139 70 37
x25304:	mov [si], eax	; 3: 102 137 4

scanFormat$187:	; Assign percent 0
x25307:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanFormat$188:	; Goto 327
x25312:	jmp scanFormat$327	; 3: 233 242 1

scanFormat$189:	; CallHeader 57 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$190:	; Parameter 57 0 6
x25315:	mov word [bp + 63], 0	; 5: 199 70 63 0 0

scanFormat$191:	; Call 57 scanUnsignedLongInt 0
x25320:	mov word [bp + 57], scanFormat$192	; 5: 199 70 57 246 98
x25325:	mov [bp + 59], bp	; 3: 137 110 59
x25328:	add bp, 57	; 3: 131 197 57
x25331:	jmp scanUnsignedLongInt	; 3: 233 37 9

scanFormat$192:	; PostCall 57

scanFormat$193:	; GetReturnValue £temporary1456

scanFormat$194:	; Assign unsignedLongValue £temporary1456
x25334:	mov [bp + 37], ebx	; 4: 102 137 94 37

scanFormat$195:	; NotEqual 223 star 0
x25338:	cmp word [bp + 21], 0	; 4: 131 126 21 0
x25342:	jne scanFormat$223	; 2: 117 89

scanFormat$196:	; Equal 206 shortInt 0
x25344:	cmp word [bp + 15], 0	; 4: 131 126 15 0
x25348:	je scanFormat$206	; 2: 116 26

scanFormat$197:	; BinaryAdd arg_list arg_list 2
x25350:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$198:	; BinarySubtract £temporary1460 arg_list 2
x25354:	mov si, [bp + 8]	; 3: 139 118 8
x25357:	sub si, 2	; 3: 131 238 2

scanFormat$199:	; IntegralToIntegral £temporary1461 £temporary1460

scanFormat$200:	; Deref £temporary1462 -> £temporary1461 £temporary1461 0

scanFormat$201:	; Assign unsignedShortPtr £temporary1462 -> £temporary1461
x25360:	mov ax, [si]	; 2: 139 4
x25362:	mov [bp + 43], ax	; 3: 137 70 43

scanFormat$202:	; Deref £temporary1463 -> unsignedShortPtr unsignedShortPtr 0
x25365:	mov si, [bp + 43]	; 3: 139 118 43

scanFormat$203:	; IntegralToIntegral £temporary1464 unsignedLongValue
x25368:	mov eax, [bp + 37]	; 4: 102 139 70 37

scanFormat$204:	; Assign £temporary1463 -> unsignedShortPtr £temporary1464
x25372:	mov [si], al	; 2: 136 4

scanFormat$205:	; Goto 223
x25374:	jmp scanFormat$223	; 2: 235 57

scanFormat$206:	; NotEqual 216 longIntOrDouble 0
x25376:	cmp word [bp + 17], 0	; 4: 131 126 17 0
x25380:	jne scanFormat$216	; 2: 117 26

scanFormat$207:	; BinaryAdd arg_list arg_list 2
x25382:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$208:	; BinarySubtract £temporary1468 arg_list 2
x25386:	mov si, [bp + 8]	; 3: 139 118 8
x25389:	sub si, 2	; 3: 131 238 2

scanFormat$209:	; IntegralToIntegral £temporary1469 £temporary1468

scanFormat$210:	; Deref £temporary1470 -> £temporary1469 £temporary1469 0

scanFormat$211:	; Assign unsignedIntPtr £temporary1470 -> £temporary1469
x25392:	mov ax, [si]	; 2: 139 4
x25394:	mov [bp + 45], ax	; 3: 137 70 45

scanFormat$212:	; Deref £temporary1471 -> unsignedIntPtr unsignedIntPtr 0
x25397:	mov si, [bp + 45]	; 3: 139 118 45

scanFormat$213:	; IntegralToIntegral £temporary1472 unsignedLongValue
x25400:	mov eax, [bp + 37]	; 4: 102 139 70 37

scanFormat$214:	; Assign £temporary1471 -> unsignedIntPtr £temporary1472
x25404:	mov [si], ax	; 2: 137 4

scanFormat$215:	; Goto 223
x25406:	jmp scanFormat$223	; 2: 235 25

scanFormat$216:	; BinaryAdd arg_list arg_list 2
x25408:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$217:	; BinarySubtract £temporary1474 arg_list 2
x25412:	mov si, [bp + 8]	; 3: 139 118 8
x25415:	sub si, 2	; 3: 131 238 2

scanFormat$218:	; IntegralToIntegral £temporary1475 £temporary1474

scanFormat$219:	; Deref £temporary1476 -> £temporary1475 £temporary1475 0

scanFormat$220:	; Assign unsignedLongPtr £temporary1476 -> £temporary1475
x25418:	mov ax, [si]	; 2: 139 4
x25420:	mov [bp + 41], ax	; 3: 137 70 41

scanFormat$221:	; Deref £temporary1477 -> unsignedLongPtr unsignedLongPtr 0
x25423:	mov si, [bp + 41]	; 3: 139 118 41

scanFormat$222:	; Assign £temporary1477 -> unsignedLongPtr unsignedLongValue
x25426:	mov eax, [bp + 37]	; 4: 102 139 70 37
x25430:	mov [si], eax	; 3: 102 137 4

scanFormat$223:	; Assign percent 0
x25433:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanFormat$224:	; Goto 327
x25438:	jmp scanFormat$327	; 3: 233 116 1

scanFormat$225:	; CallHeader 57 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$226:	; Call 57 scanLongDouble 0
x25441:	mov word [bp + 57], scanFormat$227	; 5: 199 70 57 111 99
x25446:	mov [bp + 59], bp	; 3: 137 110 59
x25449:	add bp, 57	; 3: 131 197 57
x25452:	jmp scanLongDouble	; 3: 233 24 10

scanFormat$227:	; PostCall 57

scanFormat$228:	; GetReturnValue £temporary1479

scanFormat$229:	; PopFloat longDoubleValue
x25455:	fstp qword [bp + 47]	; 3: 221 94 47

scanFormat$230:	; NotEqual 259 star 0
x25458:	cmp word [bp + 21], 0	; 4: 131 126 21 0
x25462:	jne scanFormat$259	; 2: 117 85

scanFormat$231:	; Equal 241 longIntOrDouble 0
x25464:	cmp word [bp + 17], 0	; 4: 131 126 17 0
x25468:	je scanFormat$241	; 2: 116 25

scanFormat$232:	; BinaryAdd arg_list arg_list 2
x25470:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$233:	; BinarySubtract £temporary1483 arg_list 2
x25474:	mov si, [bp + 8]	; 3: 139 118 8
x25477:	sub si, 2	; 3: 131 238 2

scanFormat$234:	; IntegralToIntegral £temporary1484 £temporary1483

scanFormat$235:	; Deref £temporary1485 -> £temporary1484 £temporary1484 0

scanFormat$236:	; Assign doublePtr £temporary1485 -> £temporary1484
x25480:	mov ax, [si]	; 2: 139 4
x25482:	mov [bp + 57], ax	; 3: 137 70 57

scanFormat$237:	; Deref £temporary1486 -> doublePtr doublePtr 0
x25485:	mov si, [bp + 57]	; 3: 139 118 57

scanFormat$238:	; PushFloat longDoubleValue
x25488:	fld qword [bp + 47]	; 3: 221 70 47

scanFormat$239:	; PopFloat £temporary1486 -> doublePtr
x25491:	fstp qword [si]	; 2: 221 28

scanFormat$240:	; Goto 259
x25493:	jmp scanFormat$259	; 2: 235 54

scanFormat$241:	; Equal 251 longDouble 0
x25495:	cmp word [bp + 19], 0	; 4: 131 126 19 0
x25499:	je scanFormat$251	; 2: 116 25

scanFormat$242:	; BinaryAdd arg_list arg_list 2
x25501:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$243:	; BinarySubtract £temporary1489 arg_list 2
x25505:	mov si, [bp + 8]	; 3: 139 118 8
x25508:	sub si, 2	; 3: 131 238 2

scanFormat$244:	; IntegralToIntegral £temporary1490 £temporary1489

scanFormat$245:	; Deref £temporary1491 -> £temporary1490 £temporary1490 0

scanFormat$246:	; Assign longDoublePtr £temporary1491 -> £temporary1490
x25511:	mov ax, [si]	; 2: 139 4
x25513:	mov [bp + 57], ax	; 3: 137 70 57

scanFormat$247:	; Deref £temporary1492 -> longDoublePtr longDoublePtr 0
x25516:	mov si, [bp + 57]	; 3: 139 118 57

scanFormat$248:	; PushFloat longDoubleValue
x25519:	fld qword [bp + 47]	; 3: 221 70 47

scanFormat$249:	; PopFloat £temporary1492 -> longDoublePtr
x25522:	fstp qword [si]	; 2: 221 28

scanFormat$250:	; Goto 259
x25524:	jmp scanFormat$259	; 2: 235 23

scanFormat$251:	; BinaryAdd arg_list arg_list 2
x25526:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$252:	; BinarySubtract £temporary1494 arg_list 2
x25530:	mov si, [bp + 8]	; 3: 139 118 8
x25533:	sub si, 2	; 3: 131 238 2

scanFormat$253:	; IntegralToIntegral £temporary1495 £temporary1494

scanFormat$254:	; Deref £temporary1496 -> £temporary1495 £temporary1495 0

scanFormat$255:	; Assign floatPtr £temporary1496 -> £temporary1495
x25536:	mov ax, [si]	; 2: 139 4
x25538:	mov [bp + 57], ax	; 3: 137 70 57

scanFormat$256:	; Deref £temporary1497 -> floatPtr floatPtr 0
x25541:	mov si, [bp + 57]	; 3: 139 118 57

scanFormat$257:	; PushFloat longDoubleValue
x25544:	fld qword [bp + 47]	; 3: 221 70 47

scanFormat$258:	; PopFloat £temporary1497 -> floatPtr
x25547:	fstp dword [si]	; 2: 217 28

scanFormat$259:	; Assign percent 0
x25549:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanFormat$260:	; Goto 327
x25554:	jmp scanFormat$327	; 3: 233 0 1

scanFormat$261:	; Assign not 0
x25557:	mov word [bp + 57], 0	; 5: 199 70 57 0 0

scanFormat$262:	; Increment index
x25562:	inc word [bp + 31]	; 3: 255 70 31

scanFormat$263:	; BinaryAdd £temporary1503 format index
x25565:	mov si, [bp + 6]	; 3: 139 118 6
x25568:	add si, [bp + 31]	; 3: 3 118 31

scanFormat$264:	; Deref £temporary1502 -> £temporary1503 £temporary1503 0

scanFormat$265:	; NotEqual 268 £temporary1502 -> £temporary1503 94
x25571:	cmp byte [si], 94	; 3: 128 60 94
x25574:	jne scanFormat$268	; 2: 117 8

scanFormat$266:	; Assign not 1
x25576:	mov word [bp + 57], 1	; 5: 199 70 57 1 0

scanFormat$267:	; Increment index
x25581:	inc word [bp + 31]	; 3: 255 70 31

scanFormat$268:	; Assign startIndex index
x25584:	mov ax, [bp + 31]	; 3: 139 70 31
x25587:	mov [bp + 59], ax	; 3: 137 70 59

scanFormat$269:	; BinaryAdd £temporary1507 format index
x25590:	mov si, [bp + 6]	; 3: 139 118 6
x25593:	add si, [bp + 31]	; 3: 3 118 31

scanFormat$270:	; Deref £temporary1506 -> £temporary1507 £temporary1507 0

scanFormat$271:	; Equal 274 £temporary1506 -> £temporary1507 93
x25596:	cmp byte [si], 93	; 3: 128 60 93
x25599:	je scanFormat$274	; 2: 116 5

scanFormat$272:	; Increment index
x25601:	inc word [bp + 31]	; 3: 255 70 31

scanFormat$273:	; Goto 269
x25604:	jmp scanFormat$269	; 2: 235 240

scanFormat$274:	; BinarySubtract size index startIndex
x25606:	mov ax, [bp + 31]	; 3: 139 70 31
x25609:	sub ax, [bp + 59]	; 3: 43 70 59
x25612:	mov [bp + 61], ax	; 3: 137 70 61

scanFormat$275:	; BinaryAdd £temporary1512 format index
x25615:	mov si, [bp + 6]	; 3: 139 118 6
x25618:	add si, [bp + 31]	; 3: 3 118 31

scanFormat$276:	; Deref £temporary1511 -> £temporary1512 £temporary1512 0

scanFormat$277:	; Assign c £temporary1511 -> £temporary1512
x25621:	mov al, [si]	; 2: 138 4
x25623:	mov [bp + 63], al	; 3: 136 70 63

scanFormat$278:	; BinaryAdd £temporary1514 format index
x25626:	mov si, [bp + 6]	; 3: 139 118 6
x25629:	add si, [bp + 31]	; 3: 3 118 31

scanFormat$279:	; Deref £temporary1513 -> £temporary1514 £temporary1514 0

scanFormat$280:	; Assign £temporary1513 -> £temporary1514 0
x25632:	mov byte [si], 0	; 3: 198 4 0

scanFormat$281:	; NotEqual 298 star 0
x25635:	cmp word [bp + 21], 0	; 4: 131 126 21 0
x25639:	jne scanFormat$298	; 2: 117 58

scanFormat$282:	; BinaryAdd arg_list arg_list 2
x25641:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$283:	; BinarySubtract £temporary1518 arg_list 2
x25645:	mov si, [bp + 8]	; 3: 139 118 8
x25648:	sub si, 2	; 3: 131 238 2

scanFormat$284:	; IntegralToIntegral £temporary1519 £temporary1518

scanFormat$285:	; Deref £temporary1520 -> £temporary1519 £temporary1519 0

scanFormat$286:	; Assign string £temporary1520 -> £temporary1519
x25651:	mov ax, [si]	; 2: 139 4
x25653:	mov [bp + 64], ax	; 3: 137 70 64

scanFormat$287:	; CallHeader 66 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$288:	; Parameter 66 string 6
x25656:	mov ax, [bp + 64]	; 3: 139 70 64
x25659:	mov [bp + 72], ax	; 3: 137 70 72

scanFormat$289:	; BinaryAdd £temporary1522 format startIndex
x25662:	mov si, [bp + 6]	; 3: 139 118 6
x25665:	add si, [bp + 59]	; 3: 3 118 59

scanFormat$290:	; Deref £temporary1521 -> £temporary1522 £temporary1522 0

scanFormat$291:	; address £temporary1523 £temporary1521 -> £temporary1522

scanFormat$292:	; Parameter 66 £temporary1523 8
x25668:	mov [bp + 74], si	; 3: 137 118 74

scanFormat$293:	; Parameter 66 size 10
x25671:	mov ax, [bp + 61]	; 3: 139 70 61
x25674:	mov [bp + 76], ax	; 3: 137 70 76

scanFormat$294:	; Parameter 66 not 12
x25677:	mov ax, [bp + 57]	; 3: 139 70 57
x25680:	mov [bp + 78], ax	; 3: 137 70 78

scanFormat$295:	; Call 66 scanPattern 0
x25683:	mov word [bp + 66], scanFormat$296	; 5: 199 70 66 97 100
x25688:	mov [bp + 68], bp	; 3: 137 110 68
x25691:	add bp, 66	; 3: 131 197 66
x25694:	jmp scanPattern	; 3: 233 97 11

scanFormat$296:	; PostCall 66

scanFormat$297:	; Goto 308
x25697:	jmp scanFormat$308	; 2: 235 40

scanFormat$298:	; CallHeader 64 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanFormat$299:	; Parameter 64 0 6
x25699:	mov word [bp + 70], 0	; 5: 199 70 70 0 0

scanFormat$300:	; BinaryAdd £temporary1526 format startIndex
x25704:	mov si, [bp + 6]	; 3: 139 118 6
x25707:	add si, [bp + 59]	; 3: 3 118 59

scanFormat$301:	; Deref £temporary1525 -> £temporary1526 £temporary1526 0

scanFormat$302:	; address £temporary1527 £temporary1525 -> £temporary1526

scanFormat$303:	; Parameter 64 £temporary1527 8
x25710:	mov [bp + 72], si	; 3: 137 118 72

scanFormat$304:	; Parameter 64 size 10
x25713:	mov ax, [bp + 61]	; 3: 139 70 61
x25716:	mov [bp + 74], ax	; 3: 137 70 74

scanFormat$305:	; Parameter 64 not 12
x25719:	mov ax, [bp + 57]	; 3: 139 70 57
x25722:	mov [bp + 76], ax	; 3: 137 70 76

scanFormat$306:	; Call 64 scanPattern 0
x25725:	mov word [bp + 64], scanFormat$307	; 5: 199 70 64 139 100
x25730:	mov [bp + 66], bp	; 3: 137 110 66
x25733:	add bp, 64	; 3: 131 197 64
x25736:	jmp scanPattern	; 3: 233 55 11

scanFormat$307:	; PostCall 64

scanFormat$308:	; BinaryAdd £temporary1530 format index
x25739:	mov si, [bp + 6]	; 3: 139 118 6
x25742:	add si, [bp + 31]	; 3: 3 118 31

scanFormat$309:	; Deref £temporary1529 -> £temporary1530 £temporary1530 0

scanFormat$310:	; Assign £temporary1529 -> £temporary1530 c
x25745:	mov al, [bp + 63]	; 3: 138 70 63
x25748:	mov [si], al	; 2: 136 4

scanFormat$311:	; Goto 327
x25750:	jmp scanFormat$327	; 2: 235 61

scanFormat$312:	; BinaryAdd arg_list arg_list 2
x25752:	add word [bp + 8], 2	; 4: 131 70 8 2

scanFormat$313:	; BinarySubtract £temporary1532 arg_list 2
x25756:	mov si, [bp + 8]	; 3: 139 118 8
x25759:	sub si, 2	; 3: 131 238 2

scanFormat$314:	; IntegralToIntegral £temporary1533 £temporary1532

scanFormat$315:	; Deref £temporary1534 -> £temporary1533 £temporary1533 0

scanFormat$316:	; Assign charsPtr £temporary1534 -> £temporary1533
x25762:	mov ax, [si]	; 2: 139 4
x25764:	mov [bp + 35], ax	; 3: 137 70 35

scanFormat$317:	; Deref £temporary1535 -> charsPtr charsPtr 0
x25767:	mov si, [bp + 35]	; 3: 139 118 35

scanFormat$318:	; Assign £temporary1535 -> charsPtr g_inChars
x25770:	mov ax, [g_inChars]	; 3: 161 236 100
x25773:	mov [si], ax	; 2: 137 4

scanFormat$319:	; Assign percent 0
x25775:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanFormat$320:	; Goto 327
x25780:	jmp scanFormat$327	; 2: 235 31

scanFormat$321:	; NotEqual 327 c 37
x25782:	cmp byte [bp + 10], 37	; 4: 128 126 10 37
x25786:	jne scanFormat$327	; 2: 117 25

scanFormat$322:	; Assign percent 1
x25788:	mov word [bp + 13], 1	; 5: 199 70 13 1 0

scanFormat$323:	; Assign shortInt 0
x25793:	mov word [bp + 15], 0	; 5: 199 70 15 0 0

scanFormat$324:	; Assign longIntOrDouble 0
x25798:	mov word [bp + 17], 0	; 5: 199 70 17 0 0

scanFormat$325:	; Assign longDouble 0
x25803:	mov word [bp + 19], 0	; 5: 199 70 19 0 0

scanFormat$326:	; Assign star 0
x25808:	mov word [bp + 21], 0	; 5: 199 70 21 0 0

scanFormat$327:	; Increment index
x25813:	inc word [bp + 31]	; 3: 255 70 31

scanFormat$328:	; Goto 8
x25816:	jmp scanFormat$8	; 3: 233 26 251

scanFormat$329:	; SetReturnValue g_inCount
x25819:	mov bx, [g_inCount]	; 4: 139 30 234 100

scanFormat$330:	; Return g_inCount
x25823:	mov ax, [bp]	; 3: 139 70 0
x25826:	mov di, [bp + 4]	; 3: 139 126 4
x25829:	mov bp, [bp + 2]	; 3: 139 110 2
x25832:	jmp ax	; 2: 255 224

scanFormat$331:	; FunctionEnd scanFormat

g_inCount:
x25834:	db 0, 0	; 2: 0 0

g_inChars:
x25836:	db 0, 0	; 2: 0 0

scanChar:	; Assign c 0
x25838:	mov byte [bp + 6], 0	; 4: 198 70 6 0

scanChar$1:	; Case 5 g_inStatus 0
x25842:	mov ax, [g_inStatus]	; 3: 161 199 95
x25845:	cmp ax, 0	; 3: 131 248 0
x25848:	je scanChar$5	; 2: 116 7

scanChar$2:	; Case 18 g_inStatus 1
x25850:	cmp ax, 1	; 3: 131 248 1
x25853:	je scanChar$18	; 2: 116 50

scanChar$3:	; CaseEnd g_inStatus

scanChar$4:	; Goto 26
x25855:	jmp scanChar$26	; 2: 235 79

scanChar$5:	; IntegralToIntegral £temporary1028 g_inDevice
x25857:	mov ax, [g_inDevice]	; 3: 161 201 95

scanChar$6:	; Assign stream £temporary1028
x25860:	mov [bp + 7], ax	; 3: 137 70 7

scanChar$7:	; Deref £temporary1029 -> stream stream 2
x25863:	mov si, [bp + 7]	; 3: 139 118 7

scanChar$8:	; Assign handle £temporary1029 -> stream
x25866:	mov ax, [si + 2]	; 3: 139 68 2
x25869:	mov [bp + 9], ax	; 3: 137 70 9

scanChar$9:	; AssignRegister ah 63
x25872:	mov ah, 63	; 2: 180 63

scanChar$10:	; AssignRegister bx handle
x25874:	mov bx, [bp + 9]	; 3: 139 94 9

scanChar$11:	; AssignRegister cx 1
x25877:	mov cx, 1	; 3: 185 1 0

scanChar$12:	; address £temporary1034 c
x25880:	mov dx, bp	; 2: 137 234
x25882:	add dx, 6	; 3: 131 194 6

scanChar$13:	; AssignRegister dx £temporary1034

scanChar$14:	; Interrupt 33
x25885:	int 33	; 2: 205 33

scanChar$15:	; Increment g_inChars
x25887:	inc word [g_inChars]	; 4: 255 6 236 100

scanChar$16:	; SetReturnValue c
x25891:	mov bl, [bp + 6]	; 3: 138 94 6

scanChar$17:	; Return c
x25894:	mov ax, [bp]	; 3: 139 70 0
x25897:	mov di, [bp + 4]	; 3: 139 126 4
x25900:	mov bp, [bp + 2]	; 3: 139 110 2
x25903:	jmp ax	; 2: 255 224

scanChar$18:	; IntegralToIntegral £temporary1036 g_inDevice
x25905:	mov ax, [g_inDevice]	; 3: 161 201 95

scanChar$19:	; Assign inString £temporary1036
x25908:	mov [bp + 11], ax	; 3: 137 70 11

scanChar$20:	; Assign £temporary1037 g_inChars
x25911:	mov ax, [g_inChars]	; 3: 161 236 100

scanChar$21:	; Increment g_inChars
x25914:	inc word [g_inChars]	; 4: 255 6 236 100

scanChar$22:	; BinaryAdd £temporary1040 inString £temporary1037
x25918:	mov si, [bp + 11]	; 3: 139 118 11
x25921:	add si, ax	; 2: 1 198

scanChar$23:	; Deref £temporary1039 -> £temporary1040 £temporary1040 0

scanChar$24:	; SetReturnValue £temporary1039 -> £temporary1040
x25923:	mov bl, [si]	; 2: 138 28

scanChar$25:	; Return £temporary1039 -> £temporary1040
x25925:	mov ax, [bp]	; 3: 139 70 0
x25928:	mov di, [bp + 4]	; 3: 139 126 4
x25931:	mov bp, [bp + 2]	; 3: 139 110 2
x25934:	jmp ax	; 2: 255 224

scanChar$26:	; SetReturnValue 0
x25936:	mov bl, 0	; 2: 179 0

scanChar$27:	; Return 0
x25938:	mov ax, [bp]	; 3: 139 70 0
x25941:	mov di, [bp + 4]	; 3: 139 126 4
x25944:	mov bp, [bp + 2]	; 3: 139 110 2
x25947:	jmp ax	; 2: 255 224

scanChar$28:	; FunctionEnd scanChar

scanString:	; Assign index 0
x25949:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

scanString$1:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$2:	; Call 12 scanChar 0
x25954:	mov word [bp + 12], scanString$3	; 5: 199 70 12 112 101
x25959:	mov [bp + 14], bp	; 3: 137 110 14
x25962:	add bp, 12	; 3: 131 197 12
x25965:	jmp scanChar	; 3: 233 126 255

scanString$3:	; PostCall 12

scanString$4:	; GetReturnValue £temporary1106

scanString$5:	; Assign input £temporary1106
x25968:	mov [bp + 12], bl	; 3: 136 94 12

scanString$6:	; Assign found 0
x25971:	mov word [bp + 13], 0	; 5: 199 70 13 0 0

scanString$7:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$8:	; IntegralToIntegral £temporary1107 input
x25976:	mov al, [bp + 12]	; 3: 138 70 12
x25979:	and ax, 255	; 3: 37 255 0
x25982:	cmp al, 0	; 2: 60 0
x25984:	jge scanString$9	; 2: 125 4
x25986:	neg al	; 2: 246 216
x25988:	neg ax	; 2: 247 216

scanString$9:	; Parameter 15 £temporary1107 6
x25990:	mov [bp + 21], ax	; 3: 137 70 21

scanString$10:	; Call 15 isspace 0
x25993:	mov word [bp + 15], scanString$11	; 5: 199 70 15 151 101
x25998:	mov [bp + 17], bp	; 3: 137 110 17
x26001:	add bp, 15	; 3: 131 197 15
x26004:	jmp isspace	; 3: 233 19 2

scanString$11:	; PostCall 15

scanString$12:	; GetReturnValue £temporary1108

scanString$13:	; Equal 20 £temporary1108 0
x26007:	cmp bx, 0	; 3: 131 251 0
x26010:	je scanString$20	; 2: 116 19

scanString$14:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$15:	; Call 15 scanChar 0
x26012:	mov word [bp + 15], scanString$16	; 5: 199 70 15 170 101
x26017:	mov [bp + 17], bp	; 3: 137 110 17
x26020:	add bp, 15	; 3: 131 197 15
x26023:	jmp scanChar	; 3: 233 68 255

scanString$16:	; PostCall 15

scanString$17:	; GetReturnValue £temporary1109

scanString$18:	; Assign input £temporary1109
x26026:	mov [bp + 12], bl	; 3: 136 94 12

scanString$19:	; Goto 7
x26029:	jmp scanString$7	; 2: 235 201

scanString$20:	; Equal 82 string 0
x26031:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x26035:	je scanString$82	; 4: 15 132 11 1

scanString$21:	; NotEqual 50 precision 0
x26039:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x26043:	jne scanString$50	; 2: 117 121

scanString$22:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$23:	; IntegralToIntegral £temporary1113 input
x26045:	mov al, [bp + 12]	; 3: 138 70 12
x26048:	and ax, 255	; 3: 37 255 0
x26051:	cmp al, 0	; 2: 60 0
x26053:	jge scanString$24	; 2: 125 4
x26055:	neg al	; 2: 246 216
x26057:	neg ax	; 2: 247 216

scanString$24:	; Parameter 15 £temporary1113 6
x26059:	mov [bp + 21], ax	; 3: 137 70 21

scanString$25:	; Call 15 isspace 0
x26062:	mov word [bp + 15], scanString$26	; 5: 199 70 15 220 101
x26067:	mov [bp + 17], bp	; 3: 137 110 17
x26070:	add bp, 15	; 3: 131 197 15
x26073:	jmp isspace	; 3: 233 206 1

scanString$26:	; PostCall 15

scanString$27:	; GetReturnValue £temporary1114

scanString$28:	; NotEqual 45 £temporary1114 0
x26076:	cmp bx, 0	; 3: 131 251 0
x26079:	jne scanString$45	; 2: 117 69

scanString$29:	; IntegralToIntegral £temporary1117 input
x26081:	mov al, [bp + 12]	; 3: 138 70 12
x26084:	and ax, 255	; 3: 37 255 0
x26087:	cmp al, 0	; 2: 60 0
x26089:	jge scanString$30	; 2: 125 4
x26091:	neg al	; 2: 246 216
x26093:	neg ax	; 2: 247 216

scanString$30:	; Equal 45 £temporary1117 -1
x26095:	cmp ax, -1	; 3: 131 248 255
x26098:	je scanString$45	; 2: 116 50

scanString$31:	; Equal 45 input 10
x26100:	cmp byte [bp + 12], 10	; 4: 128 126 12 10
x26104:	je scanString$45	; 2: 116 44

scanString$32:	; Assign £temporary1122 index
x26106:	mov ax, [bp + 10]	; 3: 139 70 10

scanString$33:	; Increment index
x26109:	inc word [bp + 10]	; 3: 255 70 10

scanString$34:	; BinaryAdd £temporary1125 string £temporary1122
x26112:	mov si, [bp + 6]	; 3: 139 118 6
x26115:	add si, ax	; 2: 1 198

scanString$35:	; Deref £temporary1124 -> £temporary1125 £temporary1125 0

scanString$36:	; Assign £temporary1124 -> £temporary1125 input
x26117:	mov al, [bp + 12]	; 3: 138 70 12
x26120:	mov [si], al	; 2: 136 4

scanString$37:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$38:	; Call 15 scanChar 0
x26122:	mov word [bp + 15], scanString$39	; 5: 199 70 15 24 102
x26127:	mov [bp + 17], bp	; 3: 137 110 17
x26130:	add bp, 15	; 3: 131 197 15
x26133:	jmp scanChar	; 3: 233 214 254

scanString$39:	; PostCall 15

scanString$40:	; GetReturnValue £temporary1126

scanString$41:	; Assign input £temporary1126
x26136:	mov [bp + 12], bl	; 3: 136 94 12

scanString$42:	; Assign found 1
x26139:	mov word [bp + 13], 1	; 5: 199 70 13 1 0

scanString$43:	; Increment g_inChars
x26144:	inc word [g_inChars]	; 4: 255 6 236 100

scanString$44:	; Goto 22
x26148:	jmp scanString$22	; 2: 235 151

scanString$45:	; BinaryAdd £temporary1129 string index
x26150:	mov si, [bp + 6]	; 3: 139 118 6
x26153:	add si, [bp + 10]	; 3: 3 118 10

scanString$46:	; Deref £temporary1128 -> £temporary1129 £temporary1129 0

scanString$47:	; Assign £temporary1128 -> £temporary1129 0
x26156:	mov byte [si], 0	; 3: 198 4 0

scanString$48:	; Increment g_inChars
x26159:	inc word [g_inChars]	; 4: 255 6 236 100

scanString$49:	; Goto 126
x26163:	jmp scanString$126	; 3: 233 95 1

scanString$50:	; Assign £temporary1131 precision
x26166:	mov ax, [bp + 8]	; 3: 139 70 8

scanString$51:	; Decrement precision
x26169:	dec word [bp + 8]	; 3: 255 78 8

scanString$52:	; SignedLessThanEqual 76 £temporary1131 0
x26172:	cmp ax, 0	; 3: 131 248 0
x26175:	jle scanString$76	; 2: 126 105

scanString$53:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$54:	; IntegralToIntegral £temporary1134 input
x26177:	mov al, [bp + 12]	; 3: 138 70 12
x26180:	and ax, 255	; 3: 37 255 0
x26183:	cmp al, 0	; 2: 60 0
x26185:	jge scanString$55	; 2: 125 4
x26187:	neg al	; 2: 246 216
x26189:	neg ax	; 2: 247 216

scanString$55:	; Parameter 15 £temporary1134 6
x26191:	mov [bp + 21], ax	; 3: 137 70 21

scanString$56:	; Call 15 isspace 0
x26194:	mov word [bp + 15], scanString$57	; 5: 199 70 15 96 102
x26199:	mov [bp + 17], bp	; 3: 137 110 17
x26202:	add bp, 15	; 3: 131 197 15
x26205:	jmp isspace	; 3: 233 74 1

scanString$57:	; PostCall 15

scanString$58:	; GetReturnValue £temporary1135

scanString$59:	; NotEqual 76 £temporary1135 0
x26208:	cmp bx, 0	; 3: 131 251 0
x26211:	jne scanString$76	; 2: 117 69

scanString$60:	; IntegralToIntegral £temporary1138 input
x26213:	mov al, [bp + 12]	; 3: 138 70 12
x26216:	and ax, 255	; 3: 37 255 0
x26219:	cmp al, 0	; 2: 60 0
x26221:	jge scanString$61	; 2: 125 4
x26223:	neg al	; 2: 246 216
x26225:	neg ax	; 2: 247 216

scanString$61:	; Equal 76 £temporary1138 -1
x26227:	cmp ax, -1	; 3: 131 248 255
x26230:	je scanString$76	; 2: 116 50

scanString$62:	; Equal 76 input 10
x26232:	cmp byte [bp + 12], 10	; 4: 128 126 12 10
x26236:	je scanString$76	; 2: 116 44

scanString$63:	; Assign £temporary1144 index
x26238:	mov ax, [bp + 10]	; 3: 139 70 10

scanString$64:	; Increment index
x26241:	inc word [bp + 10]	; 3: 255 70 10

scanString$65:	; BinaryAdd £temporary1147 string £temporary1144
x26244:	mov si, [bp + 6]	; 3: 139 118 6
x26247:	add si, ax	; 2: 1 198

scanString$66:	; Deref £temporary1146 -> £temporary1147 £temporary1147 0

scanString$67:	; Assign £temporary1146 -> £temporary1147 input
x26249:	mov al, [bp + 12]	; 3: 138 70 12
x26252:	mov [si], al	; 2: 136 4

scanString$68:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$69:	; Call 15 scanChar 0
x26254:	mov word [bp + 15], scanString$70	; 5: 199 70 15 156 102
x26259:	mov [bp + 17], bp	; 3: 137 110 17
x26262:	add bp, 15	; 3: 131 197 15
x26265:	jmp scanChar	; 3: 233 82 254

scanString$70:	; PostCall 15

scanString$71:	; GetReturnValue £temporary1148

scanString$72:	; Assign input £temporary1148
x26268:	mov [bp + 12], bl	; 3: 136 94 12

scanString$73:	; Assign found 1
x26271:	mov word [bp + 13], 1	; 5: 199 70 13 1 0

scanString$74:	; Increment g_inChars
x26276:	inc word [g_inChars]	; 4: 255 6 236 100

scanString$75:	; Goto 50
x26280:	jmp scanString$50	; 2: 235 140

scanString$76:	; SignedLessThanEqual 126 precision 0
x26282:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x26286:	jle scanString$126	; 4: 15 142 227 0

scanString$77:	; BinaryAdd £temporary1152 string index
x26290:	mov si, [bp + 6]	; 3: 139 118 6
x26293:	add si, [bp + 10]	; 3: 3 118 10

scanString$78:	; Deref £temporary1151 -> £temporary1152 £temporary1152 0

scanString$79:	; Assign £temporary1151 -> £temporary1152 0
x26296:	mov byte [si], 0	; 3: 198 4 0

scanString$80:	; Increment g_inChars
x26299:	inc word [g_inChars]	; 4: 255 6 236 100

scanString$81:	; Goto 126
x26303:	jmp scanString$126	; 3: 233 211 0

scanString$82:	; NotEqual 103 precision 0
x26306:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x26310:	jne scanString$103	; 2: 117 95

scanString$83:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$84:	; IntegralToIntegral £temporary1155 input
x26312:	mov al, [bp + 12]	; 3: 138 70 12
x26315:	and ax, 255	; 3: 37 255 0
x26318:	cmp al, 0	; 2: 60 0
x26320:	jge scanString$85	; 2: 125 4
x26322:	neg al	; 2: 246 216
x26324:	neg ax	; 2: 247 216

scanString$85:	; Parameter 15 £temporary1155 6
x26326:	mov [bp + 21], ax	; 3: 137 70 21

scanString$86:	; Call 15 isspace 0
x26329:	mov word [bp + 15], scanString$87	; 5: 199 70 15 231 102
x26334:	mov [bp + 17], bp	; 3: 137 110 17
x26337:	add bp, 15	; 3: 131 197 15
x26340:	jmp isspace	; 3: 233 195 0

scanString$87:	; PostCall 15

scanString$88:	; GetReturnValue £temporary1156

scanString$89:	; NotEqual 101 £temporary1156 0
x26343:	cmp bx, 0	; 3: 131 251 0
x26346:	jne scanString$101	; 2: 117 53

scanString$90:	; IntegralToIntegral £temporary1159 input
x26348:	mov al, [bp + 12]	; 3: 138 70 12
x26351:	and ax, 255	; 3: 37 255 0
x26354:	cmp al, 0	; 2: 60 0
x26356:	jge scanString$91	; 2: 125 4
x26358:	neg al	; 2: 246 216
x26360:	neg ax	; 2: 247 216

scanString$91:	; Equal 101 £temporary1159 -1
x26362:	cmp ax, -1	; 3: 131 248 255
x26365:	je scanString$101	; 2: 116 34

scanString$92:	; Equal 101 input 10
x26367:	cmp byte [bp + 12], 10	; 4: 128 126 12 10
x26371:	je scanString$101	; 2: 116 28

scanString$93:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$94:	; Call 15 scanChar 0
x26373:	mov word [bp + 15], scanString$95	; 5: 199 70 15 19 103
x26378:	mov [bp + 17], bp	; 3: 137 110 17
x26381:	add bp, 15	; 3: 131 197 15
x26384:	jmp scanChar	; 3: 233 219 253

scanString$95:	; PostCall 15

scanString$96:	; GetReturnValue £temporary1164

scanString$97:	; Assign input £temporary1164
x26387:	mov [bp + 12], bl	; 3: 136 94 12

scanString$98:	; Assign found 1
x26390:	mov word [bp + 13], 1	; 5: 199 70 13 1 0

scanString$99:	; Increment g_inChars
x26395:	inc word [g_inChars]	; 4: 255 6 236 100

scanString$100:	; Goto 83
x26399:	jmp scanString$83	; 2: 235 167

scanString$101:	; Increment g_inChars
x26401:	inc word [g_inChars]	; 4: 255 6 236 100

scanString$102:	; Goto 126
x26405:	jmp scanString$126	; 2: 235 110

scanString$103:	; Assign £temporary1167 precision
x26407:	mov ax, [bp + 8]	; 3: 139 70 8

scanString$104:	; Decrement precision
x26410:	dec word [bp + 8]	; 3: 255 78 8

scanString$105:	; SignedLessThanEqual 124 £temporary1167 0
x26413:	cmp ax, 0	; 3: 131 248 0
x26416:	jle scanString$124	; 2: 126 89

scanString$106:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$107:	; IntegralToIntegral £temporary1170 input
x26418:	mov al, [bp + 12]	; 3: 138 70 12
x26421:	and ax, 255	; 3: 37 255 0
x26424:	cmp al, 0	; 2: 60 0
x26426:	jge scanString$108	; 2: 125 4
x26428:	neg al	; 2: 246 216
x26430:	neg ax	; 2: 247 216

scanString$108:	; Parameter 15 £temporary1170 6
x26432:	mov [bp + 21], ax	; 3: 137 70 21

scanString$109:	; Call 15 isspace 0
x26435:	mov word [bp + 15], scanString$110	; 5: 199 70 15 81 103
x26440:	mov [bp + 17], bp	; 3: 137 110 17
x26443:	add bp, 15	; 3: 131 197 15
x26446:	nop	; 1: 144
x26447:	jmp isspace	; 2: 235 89

scanString$110:	; PostCall 15

scanString$111:	; GetReturnValue £temporary1171

scanString$112:	; NotEqual 124 £temporary1171 0
x26449:	cmp bx, 0	; 3: 131 251 0
x26452:	jne scanString$124	; 2: 117 53

scanString$113:	; IntegralToIntegral £temporary1174 input
x26454:	mov al, [bp + 12]	; 3: 138 70 12
x26457:	and ax, 255	; 3: 37 255 0
x26460:	cmp al, 0	; 2: 60 0
x26462:	jge scanString$114	; 2: 125 4
x26464:	neg al	; 2: 246 216
x26466:	neg ax	; 2: 247 216

scanString$114:	; Equal 124 £temporary1174 -1
x26468:	cmp ax, -1	; 3: 131 248 255
x26471:	je scanString$124	; 2: 116 34

scanString$115:	; Equal 124 input 10
x26473:	cmp byte [bp + 12], 10	; 4: 128 126 12 10
x26477:	je scanString$124	; 2: 116 28

scanString$116:	; CallHeader 15 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanString$117:	; Call 15 scanChar 0
x26479:	mov word [bp + 15], scanString$118	; 5: 199 70 15 125 103
x26484:	mov [bp + 17], bp	; 3: 137 110 17
x26487:	add bp, 15	; 3: 131 197 15
x26490:	jmp scanChar	; 3: 233 113 253

scanString$118:	; PostCall 15

scanString$119:	; GetReturnValue £temporary1180

scanString$120:	; Assign input £temporary1180
x26493:	mov [bp + 12], bl	; 3: 136 94 12

scanString$121:	; Assign found 1
x26496:	mov word [bp + 13], 1	; 5: 199 70 13 1 0

scanString$122:	; Increment g_inChars
x26501:	inc word [g_inChars]	; 4: 255 6 236 100

scanString$123:	; Goto 103
x26505:	jmp scanString$103	; 2: 235 156

scanString$124:	; SignedLessThanEqual 126 precision 0
x26507:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x26511:	jle scanString$126	; 2: 126 4

scanString$125:	; Increment g_inChars
x26513:	inc word [g_inChars]	; 4: 255 6 236 100

scanString$126:	; Equal 128 found 0
x26517:	cmp word [bp + 13], 0	; 4: 131 126 13 0
x26521:	je scanString$128	; 2: 116 4

scanString$127:	; Increment g_inCount
x26523:	inc word [g_inCount]	; 4: 255 6 234 100

scanString$128:	; Return 0
x26527:	mov ax, [bp]	; 3: 139 70 0
x26530:	mov di, [bp + 4]	; 3: 139 126 4
x26533:	mov bp, [bp + 2]	; 3: 139 110 2
x26536:	jmp ax	; 2: 255 224

scanString$129:	; FunctionEnd scanString

isspace:	; Equal 6 c 32
x26538:	cmp word [bp + 6], 32	; 4: 131 126 6 32
x26542:	je isspace$6	; 2: 116 30

isspace$1:	; Equal 6 c 12
x26544:	cmp word [bp + 6], 12	; 4: 131 126 6 12
x26548:	je isspace$6	; 2: 116 24

isspace$2:	; Equal 6 c 10
x26550:	cmp word [bp + 6], 10	; 4: 131 126 6 10
x26554:	je isspace$6	; 2: 116 18

isspace$3:	; Equal 6 c 13
x26556:	cmp word [bp + 6], 13	; 4: 131 126 6 13
x26560:	je isspace$6	; 2: 116 12

isspace$4:	; Equal 6 c 9
x26562:	cmp word [bp + 6], 9	; 4: 131 126 6 9
x26566:	je isspace$6	; 2: 116 6

isspace$5:	; NotEqual 8 c 11
x26568:	cmp word [bp + 6], 11	; 4: 131 126 6 11
x26572:	jne isspace$8	; 2: 117 5

isspace$6:	; Assign £temporary251 1
x26574:	mov bx, 1	; 3: 187 1 0

isspace$7:	; Goto 9
x26577:	jmp isspace$9	; 2: 235 3

isspace$8:	; Assign £temporary251 0
x26579:	mov bx, 0	; 3: 187 0 0

isspace$9:	; SetReturnValue £temporary251

isspace$10:	; Return £temporary251
x26582:	mov ax, [bp]	; 3: 139 70 0
x26585:	mov di, [bp + 4]	; 3: 139 126 4
x26588:	mov bp, [bp + 2]	; 3: 139 110 2
x26591:	jmp ax	; 2: 255 224

isspace$11:	; FunctionEnd isspace

scanLongInt:	; Assign longValue 0
x26593:	mov dword [bp + 8], 0	; 8: 102 199 70 8 0 0 0 0

scanLongInt$1:	; Assign minus 0
x26601:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

scanLongInt$2:	; Assign found 0
x26606:	mov word [bp + 14], 0	; 5: 199 70 14 0 0

scanLongInt$3:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$4:	; Call 16 scanChar 0
x26611:	mov word [bp + 16], scanLongInt$5	; 5: 199 70 16 1 104
x26616:	mov [bp + 18], bp	; 3: 137 110 18
x26619:	add bp, 16	; 3: 131 197 16
x26622:	jmp scanChar	; 3: 233 237 252

scanLongInt$5:	; PostCall 16

scanLongInt$6:	; GetReturnValue £temporary1243

scanLongInt$7:	; Assign input £temporary1243
x26625:	mov [bp + 16], bl	; 3: 136 94 16

scanLongInt$8:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$9:	; IntegralToIntegral £temporary1244 input
x26628:	mov al, [bp + 16]	; 3: 138 70 16
x26631:	and ax, 255	; 3: 37 255 0
x26634:	cmp al, 0	; 2: 60 0
x26636:	jge scanLongInt$10	; 2: 125 4
x26638:	neg al	; 2: 246 216
x26640:	neg ax	; 2: 247 216

scanLongInt$10:	; Parameter 17 £temporary1244 6
x26642:	mov [bp + 23], ax	; 3: 137 70 23

scanLongInt$11:	; Call 17 isspace 0
x26645:	mov word [bp + 17], scanLongInt$12	; 5: 199 70 17 35 104
x26650:	mov [bp + 19], bp	; 3: 137 110 19
x26653:	add bp, 17	; 3: 131 197 17
x26656:	nop	; 1: 144
x26657:	jmp isspace	; 2: 235 135

scanLongInt$12:	; PostCall 17

scanLongInt$13:	; GetReturnValue £temporary1245

scanLongInt$14:	; Equal 21 £temporary1245 0
x26659:	cmp bx, 0	; 3: 131 251 0
x26662:	je scanLongInt$21	; 2: 116 19

scanLongInt$15:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$16:	; Call 17 scanChar 0
x26664:	mov word [bp + 17], scanLongInt$17	; 5: 199 70 17 54 104
x26669:	mov [bp + 19], bp	; 3: 137 110 19
x26672:	add bp, 17	; 3: 131 197 17
x26675:	jmp scanChar	; 3: 233 184 252

scanLongInt$17:	; PostCall 17

scanLongInt$18:	; GetReturnValue £temporary1246

scanLongInt$19:	; Assign input £temporary1246
x26678:	mov [bp + 16], bl	; 3: 136 94 16

scanLongInt$20:	; Goto 8
x26681:	jmp scanLongInt$8	; 2: 235 201

scanLongInt$21:	; NotEqual 28 input 43
x26683:	cmp byte [bp + 16], 43	; 4: 128 126 16 43
x26687:	jne scanLongInt$28	; 2: 117 19

scanLongInt$22:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$23:	; Call 17 scanChar 0
x26689:	mov word [bp + 17], scanLongInt$24	; 5: 199 70 17 79 104
x26694:	mov [bp + 19], bp	; 3: 137 110 19
x26697:	add bp, 17	; 3: 131 197 17
x26700:	jmp scanChar	; 3: 233 159 252

scanLongInt$24:	; PostCall 17

scanLongInt$25:	; GetReturnValue £temporary1249

scanLongInt$26:	; Assign input £temporary1249
x26703:	mov [bp + 16], bl	; 3: 136 94 16

scanLongInt$27:	; Goto 35
x26706:	jmp scanLongInt$35	; 2: 235 28

scanLongInt$28:	; NotEqual 35 input 45
x26708:	cmp byte [bp + 16], 45	; 4: 128 126 16 45
x26712:	jne scanLongInt$35	; 2: 117 22

scanLongInt$29:	; Assign minus 1
x26714:	mov word [bp + 12], 1	; 5: 199 70 12 1 0

scanLongInt$30:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$31:	; Call 17 scanChar 0
x26719:	mov word [bp + 17], scanLongInt$32	; 5: 199 70 17 109 104
x26724:	mov [bp + 19], bp	; 3: 137 110 19
x26727:	add bp, 17	; 3: 131 197 17
x26730:	jmp scanChar	; 3: 233 129 252

scanLongInt$32:	; PostCall 17

scanLongInt$33:	; GetReturnValue £temporary1251

scanLongInt$34:	; Assign input £temporary1251
x26733:	mov [bp + 16], bl	; 3: 136 94 16

scanLongInt$35:	; NotEqual 59 base 0
x26736:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x26740:	jne scanLongInt$59	; 2: 117 95

scanLongInt$36:	; NotEqual 58 input 48
x26742:	cmp byte [bp + 16], 48	; 4: 128 126 16 48
x26746:	jne scanLongInt$58	; 2: 117 84

scanLongInt$37:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$38:	; Call 17 scanChar 0
x26748:	mov word [bp + 17], scanLongInt$39	; 5: 199 70 17 138 104
x26753:	mov [bp + 19], bp	; 3: 137 110 19
x26756:	add bp, 17	; 3: 131 197 17
x26759:	jmp scanChar	; 3: 233 100 252

scanLongInt$39:	; PostCall 17

scanLongInt$40:	; GetReturnValue £temporary1254

scanLongInt$41:	; Assign input £temporary1254
x26762:	mov [bp + 16], bl	; 3: 136 94 16

scanLongInt$42:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$43:	; IntegralToIntegral £temporary1255 input
x26765:	mov al, [bp + 16]	; 3: 138 70 16
x26768:	and ax, 255	; 3: 37 255 0
x26771:	cmp al, 0	; 2: 60 0
x26773:	jge scanLongInt$44	; 2: 125 4
x26775:	neg al	; 2: 246 216
x26777:	neg ax	; 2: 247 216

scanLongInt$44:	; Parameter 17 £temporary1255 6
x26779:	mov [bp + 23], ax	; 3: 137 70 23

scanLongInt$45:	; Call 17 tolower 0
x26782:	mov word [bp + 17], scanLongInt$46	; 5: 199 70 17 172 104
x26787:	mov [bp + 19], bp	; 3: 137 110 19
x26790:	add bp, 17	; 3: 131 197 17
x26793:	jmp tolower	; 3: 233 112 188

scanLongInt$46:	; PostCall 17

scanLongInt$47:	; GetReturnValue £temporary1256

scanLongInt$48:	; NotEqual 56 £temporary1256 120
x26796:	cmp bx, 120	; 3: 131 251 120
x26799:	jne scanLongInt$56	; 2: 117 24

scanLongInt$49:	; Assign base 16
x26801:	mov word [bp + 6], 16	; 5: 199 70 6 16 0

scanLongInt$50:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$51:	; Call 17 scanChar 0
x26806:	mov word [bp + 17], scanLongInt$52	; 5: 199 70 17 196 104
x26811:	mov [bp + 19], bp	; 3: 137 110 19
x26814:	add bp, 17	; 3: 131 197 17
x26817:	jmp scanChar	; 3: 233 42 252

scanLongInt$52:	; PostCall 17

scanLongInt$53:	; GetReturnValue £temporary1258

scanLongInt$54:	; Assign input £temporary1258
x26820:	mov [bp + 16], bl	; 3: 136 94 16

scanLongInt$55:	; Goto 59
x26823:	jmp scanLongInt$59	; 2: 235 12

scanLongInt$56:	; Assign base 8
x26825:	mov word [bp + 6], 8	; 5: 199 70 6 8 0

scanLongInt$57:	; Goto 59
x26830:	jmp scanLongInt$59	; 2: 235 5

scanLongInt$58:	; Assign base 10
x26832:	mov word [bp + 6], 10	; 5: 199 70 6 10 0

scanLongInt$59:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$60:	; Parameter 17 input 6
x26837:	mov al, [bp + 16]	; 3: 138 70 16
x26840:	mov [bp + 23], al	; 3: 136 70 23

scanLongInt$61:	; Parameter 17 base 7
x26843:	mov ax, [bp + 6]	; 3: 139 70 6
x26846:	mov [bp + 24], ax	; 3: 137 70 24

scanLongInt$62:	; Call 17 isDigitInBase 0
x26849:	mov word [bp + 17], scanLongInt$63	; 5: 199 70 17 239 104
x26854:	mov [bp + 19], bp	; 3: 137 110 19
x26857:	add bp, 17	; 3: 131 197 17
x26860:	jmp @2758$isDigitInBase	; 3: 233 167 0

scanLongInt$63:	; PostCall 17

scanLongInt$64:	; GetReturnValue £temporary1259

scanLongInt$65:	; Equal 82 £temporary1259 0
x26863:	cmp bx, 0	; 3: 131 251 0
x26866:	je scanLongInt$82	; 2: 116 100

scanLongInt$66:	; IntegralToIntegral £temporary1260 base
x26868:	mov bx, [bp + 6]	; 3: 139 94 6
x26871:	and ebx, 65535	; 7: 102 129 227 255 255 0 0
x26878:	cmp bx, 0	; 3: 131 251 0
x26881:	jge scanLongInt$67	; 2: 125 5
x26883:	neg bx	; 2: 247 219
x26885:	neg ebx	; 3: 102 247 219

scanLongInt$67:	; SignedMultiply longValue longValue £temporary1260
x26888:	mov eax, [bp + 8]	; 4: 102 139 70 8
x26892:	xor edx, edx	; 3: 102 49 210
x26895:	imul ebx	; 3: 102 247 235
x26898:	mov [bp + 8], eax	; 4: 102 137 70 8

scanLongInt$68:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$69:	; Parameter 17 input 6
x26902:	mov al, [bp + 16]	; 3: 138 70 16
x26905:	mov [bp + 23], al	; 3: 136 70 23

scanLongInt$70:	; Call 17 digitToValue 0
x26908:	mov word [bp + 17], scanLongInt$71	; 5: 199 70 17 42 105
x26913:	mov [bp + 19], bp	; 3: 137 110 19
x26916:	add bp, 17	; 3: 131 197 17
x26919:	jmp @2822$digitToValue	; 3: 233 243 1

scanLongInt$71:	; PostCall 17

scanLongInt$72:	; GetReturnValue £temporary1262

scanLongInt$73:	; IntegralToIntegral £temporary1263 £temporary1262
x26922:	and ebx, 65535	; 7: 102 129 227 255 255 0 0
x26929:	cmp bx, 0	; 3: 131 251 0
x26932:	jge scanLongInt$74	; 2: 125 5
x26934:	neg bx	; 2: 247 219
x26936:	neg ebx	; 3: 102 247 219

scanLongInt$74:	; BinaryAdd longValue longValue £temporary1263
x26939:	add [bp + 8], ebx	; 4: 102 1 94 8

scanLongInt$75:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$76:	; Call 17 scanChar 0
x26943:	mov word [bp + 17], scanLongInt$77	; 5: 199 70 17 77 105
x26948:	mov [bp + 19], bp	; 3: 137 110 19
x26951:	add bp, 17	; 3: 131 197 17
x26954:	jmp scanChar	; 3: 233 161 251

scanLongInt$77:	; PostCall 17

scanLongInt$78:	; GetReturnValue £temporary1265

scanLongInt$79:	; Assign input £temporary1265
x26957:	mov [bp + 16], bl	; 3: 136 94 16

scanLongInt$80:	; Assign found 1
x26960:	mov word [bp + 14], 1	; 5: 199 70 14 1 0

scanLongInt$81:	; Goto 59
x26965:	jmp scanLongInt$59	; 3: 233 125 255

scanLongInt$82:	; Equal 85 minus 0
x26968:	cmp word [bp + 12], 0	; 4: 131 126 12 0
x26972:	je scanLongInt$85	; 2: 116 11

scanLongInt$83:	; UnarySubtract £temporary1267 longValue
x26974:	mov eax, [bp + 8]	; 4: 102 139 70 8
x26978:	neg eax	; 3: 102 247 216

scanLongInt$84:	; Assign longValue £temporary1267
x26981:	mov [bp + 8], eax	; 4: 102 137 70 8

scanLongInt$85:	; Equal 87 found 0
x26985:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x26989:	je scanLongInt$87	; 2: 116 4

scanLongInt$86:	; Increment g_inCount
x26991:	inc word [g_inCount]	; 4: 255 6 234 100

scanLongInt$87:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongInt$88:	; Parameter 17 input 6
x26995:	mov al, [bp + 16]	; 3: 138 70 16
x26998:	mov [bp + 23], al	; 3: 136 70 23

scanLongInt$89:	; Call 17 unscanChar 0
x27001:	mov word [bp + 17], scanLongInt$90	; 5: 199 70 17 135 105
x27006:	mov [bp + 19], bp	; 3: 137 110 19
x27009:	add bp, 17	; 3: 131 197 17
x27012:	jmp unscanChar	; 3: 233 112 2

scanLongInt$90:	; PostCall 17

scanLongInt$91:	; SetReturnValue longValue
x27015:	mov ebx, [bp + 8]	; 4: 102 139 94 8

scanLongInt$92:	; Return longValue
x27019:	mov ax, [bp]	; 3: 139 70 0
x27022:	mov di, [bp + 4]	; 3: 139 126 4
x27025:	mov bp, [bp + 2]	; 3: 139 110 2
x27028:	jmp ax	; 2: 255 224

scanLongInt$93:	; FunctionEnd scanLongInt

@2758$isDigitInBase:	; CallHeader 9 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

@2758$isDigitInBase$1:	; IntegralToIntegral £temporary1191 c
x27030:	mov al, [bp + 6]	; 3: 138 70 6
x27033:	and ax, 255	; 3: 37 255 0
x27036:	cmp al, 0	; 2: 60 0
x27038:	jge @2758$isDigitInBase$2	; 2: 125 4
x27040:	neg al	; 2: 246 216
x27042:	neg ax	; 2: 247 216

@2758$isDigitInBase$2:	; Parameter 9 £temporary1191 6
x27044:	mov [bp + 15], ax	; 3: 137 70 15

@2758$isDigitInBase$3:	; Call 9 isdigit 0
x27047:	mov word [bp + 9], @2758$isDigitInBase$4	; 5: 199 70 9 181 105
x27052:	mov [bp + 11], bp	; 3: 137 110 11
x27055:	add bp, 9	; 3: 131 197 9
x27058:	jmp isdigit	; 3: 233 180 193

@2758$isDigitInBase$4:	; PostCall 9

@2758$isDigitInBase$5:	; GetReturnValue £temporary1192

@2758$isDigitInBase$6:	; Equal 17 £temporary1192 0
x27061:	cmp bx, 0	; 3: 131 251 0
x27064:	je @2758$isDigitInBase$17	; 2: 116 52

@2758$isDigitInBase$7:	; BinarySubtract £temporary1193 c 48
x27066:	mov al, [bp + 6]	; 3: 138 70 6
x27069:	sub al, 48	; 2: 44 48

@2758$isDigitInBase$8:	; IntegralToIntegral £temporary1194 £temporary1193
x27071:	and ax, 255	; 3: 37 255 0
x27074:	cmp al, 0	; 2: 60 0
x27076:	jge @2758$isDigitInBase$9	; 2: 125 4
x27078:	neg al	; 2: 246 216
x27080:	neg ax	; 2: 247 216

@2758$isDigitInBase$9:	; Assign value £temporary1194
x27082:	mov [bp + 9], ax	; 3: 137 70 9

@2758$isDigitInBase$10:	; SignedLessThan 14 value 0
x27085:	cmp word [bp + 9], 0	; 4: 131 126 9 0
x27089:	jl @2758$isDigitInBase$14	; 2: 124 13

@2758$isDigitInBase$11:	; SignedGreaterThanEqual 14 value base
x27091:	mov ax, [bp + 7]	; 3: 139 70 7
x27094:	cmp [bp + 9], ax	; 3: 57 70 9
x27097:	jge @2758$isDigitInBase$14	; 2: 125 5

@2758$isDigitInBase$12:	; Assign £temporary1198 1
x27099:	mov bx, 1	; 3: 187 1 0

@2758$isDigitInBase$13:	; Goto 15
x27102:	jmp @2758$isDigitInBase$15	; 2: 235 3

@2758$isDigitInBase$14:	; Assign £temporary1198 0
x27104:	mov bx, 0	; 3: 187 0 0

@2758$isDigitInBase$15:	; SetReturnValue £temporary1198

@2758$isDigitInBase$16:	; Return £temporary1198
x27107:	mov ax, [bp]	; 3: 139 70 0
x27110:	mov di, [bp + 4]	; 3: 139 126 4
x27113:	mov bp, [bp + 2]	; 3: 139 110 2
x27116:	jmp ax	; 2: 255 224

@2758$isDigitInBase$17:	; CallHeader 9 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

@2758$isDigitInBase$18:	; IntegralToIntegral £temporary1199 c
x27118:	mov al, [bp + 6]	; 3: 138 70 6
x27121:	and ax, 255	; 3: 37 255 0
x27124:	cmp al, 0	; 2: 60 0
x27126:	jge @2758$isDigitInBase$19	; 2: 125 4
x27128:	neg al	; 2: 246 216
x27130:	neg ax	; 2: 247 216

@2758$isDigitInBase$19:	; Parameter 9 £temporary1199 6
x27132:	mov [bp + 15], ax	; 3: 137 70 15

@2758$isDigitInBase$20:	; Call 9 islower 0
x27135:	mov word [bp + 9], @2758$isDigitInBase$21	; 5: 199 70 9 13 106
x27140:	mov [bp + 11], bp	; 3: 137 110 11
x27143:	add bp, 9	; 3: 131 197 9
x27146:	jmp islower	; 3: 233 165 0

@2758$isDigitInBase$21:	; PostCall 9

@2758$isDigitInBase$22:	; GetReturnValue £temporary1200

@2758$isDigitInBase$23:	; Equal 34 £temporary1200 0
x27149:	cmp bx, 0	; 3: 131 251 0
x27152:	je @2758$isDigitInBase$34	; 2: 116 55

@2758$isDigitInBase$24:	; BinarySubtract £temporary1201 c 97
x27154:	mov al, [bp + 6]	; 3: 138 70 6
x27157:	sub al, 97	; 2: 44 97

@2758$isDigitInBase$25:	; IntegralToIntegral £temporary1202 £temporary1201
x27159:	and ax, 255	; 3: 37 255 0
x27162:	cmp al, 0	; 2: 60 0
x27164:	jge @2758$isDigitInBase$26	; 2: 125 4
x27166:	neg al	; 2: 246 216
x27168:	neg ax	; 2: 247 216

@2758$isDigitInBase$26:	; BinaryAdd value £temporary1202 10
x27170:	add ax, 10	; 3: 131 192 10
x27173:	mov [bp + 9], ax	; 3: 137 70 9

@2758$isDigitInBase$27:	; SignedLessThan 31 value 0
x27176:	cmp word [bp + 9], 0	; 4: 131 126 9 0
x27180:	jl @2758$isDigitInBase$31	; 2: 124 13

@2758$isDigitInBase$28:	; SignedGreaterThanEqual 31 value base
x27182:	mov ax, [bp + 7]	; 3: 139 70 7
x27185:	cmp [bp + 9], ax	; 3: 57 70 9
x27188:	jge @2758$isDigitInBase$31	; 2: 125 5

@2758$isDigitInBase$29:	; Assign £temporary1207 1
x27190:	mov bx, 1	; 3: 187 1 0

@2758$isDigitInBase$30:	; Goto 32
x27193:	jmp @2758$isDigitInBase$32	; 2: 235 3

@2758$isDigitInBase$31:	; Assign £temporary1207 0
x27195:	mov bx, 0	; 3: 187 0 0

@2758$isDigitInBase$32:	; SetReturnValue £temporary1207

@2758$isDigitInBase$33:	; Return £temporary1207
x27198:	mov ax, [bp]	; 3: 139 70 0
x27201:	mov di, [bp + 4]	; 3: 139 126 4
x27204:	mov bp, [bp + 2]	; 3: 139 110 2
x27207:	jmp ax	; 2: 255 224

@2758$isDigitInBase$34:	; CallHeader 9 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

@2758$isDigitInBase$35:	; IntegralToIntegral £temporary1208 c
x27209:	mov al, [bp + 6]	; 3: 138 70 6
x27212:	and ax, 255	; 3: 37 255 0
x27215:	cmp al, 0	; 2: 60 0
x27217:	jge @2758$isDigitInBase$36	; 2: 125 4
x27219:	neg al	; 2: 246 216
x27221:	neg ax	; 2: 247 216

@2758$isDigitInBase$36:	; Parameter 9 £temporary1208 6
x27223:	mov [bp + 15], ax	; 3: 137 70 15

@2758$isDigitInBase$37:	; Call 9 isupper 0
x27226:	mov word [bp + 9], @2758$isDigitInBase$38	; 5: 199 70 9 104 106
x27231:	mov [bp + 11], bp	; 3: 137 110 11
x27234:	add bp, 9	; 3: 131 197 9
x27237:	jmp isupper	; 3: 233 162 179

@2758$isDigitInBase$38:	; PostCall 9

@2758$isDigitInBase$39:	; GetReturnValue £temporary1209

@2758$isDigitInBase$40:	; Equal 51 £temporary1209 0
x27240:	cmp bx, 0	; 3: 131 251 0
x27243:	je @2758$isDigitInBase$51	; 2: 116 55

@2758$isDigitInBase$41:	; BinarySubtract £temporary1210 c 65
x27245:	mov al, [bp + 6]	; 3: 138 70 6
x27248:	sub al, 65	; 2: 44 65

@2758$isDigitInBase$42:	; IntegralToIntegral £temporary1211 £temporary1210
x27250:	and ax, 255	; 3: 37 255 0
x27253:	cmp al, 0	; 2: 60 0
x27255:	jge @2758$isDigitInBase$43	; 2: 125 4
x27257:	neg al	; 2: 246 216
x27259:	neg ax	; 2: 247 216

@2758$isDigitInBase$43:	; BinaryAdd value £temporary1211 10
x27261:	add ax, 10	; 3: 131 192 10
x27264:	mov [bp + 9], ax	; 3: 137 70 9

@2758$isDigitInBase$44:	; SignedLessThan 48 value 0
x27267:	cmp word [bp + 9], 0	; 4: 131 126 9 0
x27271:	jl @2758$isDigitInBase$48	; 2: 124 13

@2758$isDigitInBase$45:	; SignedGreaterThanEqual 48 value base
x27273:	mov ax, [bp + 7]	; 3: 139 70 7
x27276:	cmp [bp + 9], ax	; 3: 57 70 9
x27279:	jge @2758$isDigitInBase$48	; 2: 125 5

@2758$isDigitInBase$46:	; Assign £temporary1216 1
x27281:	mov bx, 1	; 3: 187 1 0

@2758$isDigitInBase$47:	; Goto 49
x27284:	jmp @2758$isDigitInBase$49	; 2: 235 3

@2758$isDigitInBase$48:	; Assign £temporary1216 0
x27286:	mov bx, 0	; 3: 187 0 0

@2758$isDigitInBase$49:	; SetReturnValue £temporary1216

@2758$isDigitInBase$50:	; Return £temporary1216
x27289:	mov ax, [bp]	; 3: 139 70 0
x27292:	mov di, [bp + 4]	; 3: 139 126 4
x27295:	mov bp, [bp + 2]	; 3: 139 110 2
x27298:	jmp ax	; 2: 255 224

@2758$isDigitInBase$51:	; SetReturnValue 0
x27300:	mov bx, 0	; 3: 187 0 0

@2758$isDigitInBase$52:	; Return 0
x27303:	mov ax, [bp]	; 3: 139 70 0
x27306:	mov di, [bp + 4]	; 3: 139 126 4
x27309:	mov bp, [bp + 2]	; 3: 139 110 2
x27312:	jmp ax	; 2: 255 224

@2758$isDigitInBase$53:	; FunctionEnd isDigitInBase

islower:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

islower$1:	; Call 8 localeconv 0
x27314:	mov word [bp + 8], islower$2	; 5: 199 70 8 192 106
x27319:	mov [bp + 10], bp	; 3: 137 110 10
x27322:	add bp, 8	; 3: 131 197 8
x27325:	jmp localeconv	; 3: 233 181 179

islower$2:	; PostCall 8

islower$3:	; GetReturnValue £temporary160

islower$4:	; Assign localeConvPtr £temporary160
x27328:	mov [bp + 8], bx	; 3: 137 94 8

islower$5:	; Equal 19 localeConvPtr 0
x27331:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x27335:	je islower$19	; 2: 116 53

islower$6:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

islower$7:	; Deref £temporary162 -> localeConvPtr localeConvPtr 12
x27337:	mov si, [bp + 8]	; 3: 139 118 8

islower$8:	; Parameter 10 £temporary162 -> localeConvPtr 6
x27340:	mov ax, [si + 12]	; 3: 139 68 12
x27343:	mov [bp + 16], ax	; 3: 137 70 16

islower$9:	; Parameter 10 c 8
x27346:	mov ax, [bp + 6]	; 3: 139 70 6
x27349:	mov [bp + 18], ax	; 3: 137 70 18

islower$10:	; Call 10 strchr 0
x27352:	mov word [bp + 10], islower$11	; 5: 199 70 10 230 106
x27357:	mov [bp + 12], bp	; 3: 137 110 12
x27360:	add bp, 10	; 3: 131 197 10
x27363:	jmp strchr	; 3: 233 213 182

islower$11:	; PostCall 10

islower$12:	; GetReturnValue £temporary163

islower$13:	; Equal 16 £temporary163 0
x27366:	cmp bx, 0	; 3: 131 251 0
x27369:	je islower$16	; 2: 116 5

islower$14:	; Assign £temporary165 1
x27371:	mov bx, 1	; 3: 187 1 0

islower$15:	; Goto 17
x27374:	jmp islower$17	; 2: 235 3

islower$16:	; Assign £temporary165 0
x27376:	mov bx, 0	; 3: 187 0 0

islower$17:	; SetReturnValue £temporary165

islower$18:	; Return £temporary165
x27379:	mov ax, [bp]	; 3: 139 70 0
x27382:	mov di, [bp + 4]	; 3: 139 126 4
x27385:	mov bp, [bp + 2]	; 3: 139 110 2
x27388:	jmp ax	; 2: 255 224

islower$19:	; SignedLessThan 23 c 97
x27390:	cmp word [bp + 6], 97	; 4: 131 126 6 97
x27394:	jl islower$23	; 2: 124 11

islower$20:	; SignedGreaterThan 23 c 122
x27396:	cmp word [bp + 6], 122	; 4: 131 126 6 122
x27400:	jg islower$23	; 2: 127 5

islower$21:	; Assign £temporary169 1
x27402:	mov bx, 1	; 3: 187 1 0

islower$22:	; Goto 24
x27405:	jmp islower$24	; 2: 235 3

islower$23:	; Assign £temporary169 0
x27407:	mov bx, 0	; 3: 187 0 0

islower$24:	; SetReturnValue £temporary169

islower$25:	; Return £temporary169
x27410:	mov ax, [bp]	; 3: 139 70 0
x27413:	mov di, [bp + 4]	; 3: 139 126 4
x27416:	mov bp, [bp + 2]	; 3: 139 110 2
x27419:	jmp ax	; 2: 255 224

islower$26:	; FunctionEnd islower

@2822$digitToValue:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

@2822$digitToValue$1:	; IntegralToIntegral £temporary1223 c
x27421:	mov al, [bp + 6]	; 3: 138 70 6
x27424:	and ax, 255	; 3: 37 255 0
x27427:	cmp al, 0	; 2: 60 0
x27429:	jge @2822$digitToValue$2	; 2: 125 4
x27431:	neg al	; 2: 246 216
x27433:	neg ax	; 2: 247 216

@2822$digitToValue$2:	; Parameter 7 £temporary1223 6
x27435:	mov [bp + 13], ax	; 3: 137 70 13

@2822$digitToValue$3:	; Call 7 isdigit 0
x27438:	mov word [bp + 7], @2822$digitToValue$4	; 5: 199 70 7 60 107
x27443:	mov [bp + 9], bp	; 3: 137 110 9
x27446:	add bp, 7	; 3: 131 197 7
x27449:	jmp isdigit	; 3: 233 45 192

@2822$digitToValue$4:	; PostCall 7

@2822$digitToValue$5:	; GetReturnValue £temporary1224

@2822$digitToValue$6:	; Equal 11 £temporary1224 0
x27452:	cmp bx, 0	; 3: 131 251 0
x27455:	je @2822$digitToValue$11	; 2: 116 30

@2822$digitToValue$7:	; BinarySubtract £temporary1225 c 48
x27457:	mov bl, [bp + 6]	; 3: 138 94 6
x27460:	sub bl, 48	; 3: 128 235 48

@2822$digitToValue$8:	; IntegralToIntegral £temporary1226 £temporary1225
x27463:	and bx, 255	; 4: 129 227 255 0
x27467:	cmp bl, 0	; 3: 128 251 0
x27470:	jge @2822$digitToValue$9	; 2: 125 4
x27472:	neg bl	; 2: 246 219
x27474:	neg bx	; 2: 247 219

@2822$digitToValue$9:	; SetReturnValue £temporary1226

@2822$digitToValue$10:	; Return £temporary1226
x27476:	mov ax, [bp]	; 3: 139 70 0
x27479:	mov di, [bp + 4]	; 3: 139 126 4
x27482:	mov bp, [bp + 2]	; 3: 139 110 2
x27485:	jmp ax	; 2: 255 224

@2822$digitToValue$11:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

@2822$digitToValue$12:	; IntegralToIntegral £temporary1227 c
x27487:	mov al, [bp + 6]	; 3: 138 70 6
x27490:	and ax, 255	; 3: 37 255 0
x27493:	cmp al, 0	; 2: 60 0
x27495:	jge @2822$digitToValue$13	; 2: 125 4
x27497:	neg al	; 2: 246 216
x27499:	neg ax	; 2: 247 216

@2822$digitToValue$13:	; Parameter 7 £temporary1227 6
x27501:	mov [bp + 13], ax	; 3: 137 70 13

@2822$digitToValue$14:	; Call 7 islower 0
x27504:	mov word [bp + 7], @2822$digitToValue$15	; 5: 199 70 7 126 107
x27509:	mov [bp + 9], bp	; 3: 137 110 9
x27512:	add bp, 7	; 3: 131 197 7
x27515:	jmp islower	; 3: 233 52 255

@2822$digitToValue$15:	; PostCall 7

@2822$digitToValue$16:	; GetReturnValue £temporary1228

@2822$digitToValue$17:	; Equal 23 £temporary1228 0
x27518:	cmp bx, 0	; 3: 131 251 0
x27521:	je @2822$digitToValue$23	; 2: 116 33

@2822$digitToValue$18:	; BinarySubtract £temporary1229 c 97
x27523:	mov bl, [bp + 6]	; 3: 138 94 6
x27526:	sub bl, 97	; 3: 128 235 97

@2822$digitToValue$19:	; IntegralToIntegral £temporary1230 £temporary1229
x27529:	and bx, 255	; 4: 129 227 255 0
x27533:	cmp bl, 0	; 3: 128 251 0
x27536:	jge @2822$digitToValue$20	; 2: 125 4
x27538:	neg bl	; 2: 246 219
x27540:	neg bx	; 2: 247 219

@2822$digitToValue$20:	; BinaryAdd £temporary1231 £temporary1230 10
x27542:	add bx, 10	; 3: 131 195 10

@2822$digitToValue$21:	; SetReturnValue £temporary1231

@2822$digitToValue$22:	; Return £temporary1231
x27545:	mov ax, [bp]	; 3: 139 70 0
x27548:	mov di, [bp + 4]	; 3: 139 126 4
x27551:	mov bp, [bp + 2]	; 3: 139 110 2
x27554:	jmp ax	; 2: 255 224

@2822$digitToValue$23:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

@2822$digitToValue$24:	; IntegralToIntegral £temporary1232 c
x27556:	mov al, [bp + 6]	; 3: 138 70 6
x27559:	and ax, 255	; 3: 37 255 0
x27562:	cmp al, 0	; 2: 60 0
x27564:	jge @2822$digitToValue$25	; 2: 125 4
x27566:	neg al	; 2: 246 216
x27568:	neg ax	; 2: 247 216

@2822$digitToValue$25:	; Parameter 7 £temporary1232 6
x27570:	mov [bp + 13], ax	; 3: 137 70 13

@2822$digitToValue$26:	; Call 7 isupper 0
x27573:	mov word [bp + 7], @2822$digitToValue$27	; 5: 199 70 7 195 107
x27578:	mov [bp + 9], bp	; 3: 137 110 9
x27581:	add bp, 7	; 3: 131 197 7
x27584:	jmp isupper	; 3: 233 71 178

@2822$digitToValue$27:	; PostCall 7

@2822$digitToValue$28:	; GetReturnValue £temporary1233

@2822$digitToValue$29:	; Equal 35 £temporary1233 0
x27587:	cmp bx, 0	; 3: 131 251 0
x27590:	je @2822$digitToValue$35	; 2: 116 33

@2822$digitToValue$30:	; BinarySubtract £temporary1234 c 65
x27592:	mov bl, [bp + 6]	; 3: 138 94 6
x27595:	sub bl, 65	; 3: 128 235 65

@2822$digitToValue$31:	; IntegralToIntegral £temporary1235 £temporary1234
x27598:	and bx, 255	; 4: 129 227 255 0
x27602:	cmp bl, 0	; 3: 128 251 0
x27605:	jge @2822$digitToValue$32	; 2: 125 4
x27607:	neg bl	; 2: 246 219
x27609:	neg bx	; 2: 247 219

@2822$digitToValue$32:	; BinaryAdd £temporary1236 £temporary1235 10
x27611:	add bx, 10	; 3: 131 195 10

@2822$digitToValue$33:	; SetReturnValue £temporary1236

@2822$digitToValue$34:	; Return £temporary1236
x27614:	mov ax, [bp]	; 3: 139 70 0
x27617:	mov di, [bp + 4]	; 3: 139 126 4
x27620:	mov bp, [bp + 2]	; 3: 139 110 2
x27623:	jmp ax	; 2: 255 224

@2822$digitToValue$35:	; SetReturnValue 0
x27625:	mov bx, 0	; 3: 187 0 0

@2822$digitToValue$36:	; Return 0
x27628:	mov ax, [bp]	; 3: 139 70 0
x27631:	mov di, [bp + 4]	; 3: 139 126 4
x27634:	mov bp, [bp + 2]	; 3: 139 110 2
x27637:	jmp ax	; 2: 255 224

@2822$digitToValue$37:	; FunctionEnd digitToValue

unscanChar:	; Case 4 g_inStatus 0
x27639:	mov ax, [g_inStatus]	; 3: 161 199 95
x27642:	cmp ax, 0	; 3: 131 248 0
x27645:	je unscanChar$4	; 2: 116 7

unscanChar$1:	; Case 6 g_inStatus 1
x27647:	cmp ax, 1	; 3: 131 248 1
x27650:	je unscanChar$6	; 2: 116 8

unscanChar$2:	; CaseEnd g_inStatus

unscanChar$3:	; Goto 7
x27652:	jmp unscanChar$7	; 2: 235 10

unscanChar$4:	; Decrement g_inChars
x27654:	dec word [g_inChars]	; 4: 255 14 236 100

unscanChar$5:	; Goto 7
x27658:	jmp unscanChar$7	; 2: 235 4

unscanChar$6:	; Decrement g_inChars
x27660:	dec word [g_inChars]	; 4: 255 14 236 100

unscanChar$7:	; Return 0
x27664:	mov ax, [bp]	; 3: 139 70 0
x27667:	mov di, [bp + 4]	; 3: 139 126 4
x27670:	mov bp, [bp + 2]	; 3: 139 110 2
x27673:	jmp ax	; 2: 255 224

unscanChar$8:	; FunctionEnd unscanChar

scanUnsignedLongInt:	; Assign unsignedLongValue 0
x27675:	mov dword [bp + 8], 0	; 8: 102 199 70 8 0 0 0 0

scanUnsignedLongInt$1:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$2:	; Call 16 scanChar 0
x27683:	mov word [bp + 16], scanUnsignedLongInt$3	; 5: 199 70 16 49 108
x27688:	mov [bp + 18], bp	; 3: 137 110 18
x27691:	add bp, 16	; 3: 131 197 16
x27694:	jmp scanChar	; 3: 233 189 248

scanUnsignedLongInt$3:	; PostCall 16

scanUnsignedLongInt$4:	; GetReturnValue £temporary1278

scanUnsignedLongInt$5:	; Assign input £temporary1278
x27697:	mov [bp + 16], bl	; 3: 136 94 16

scanUnsignedLongInt$6:	; Assign found 1
x27700:	mov word [bp + 17], 1	; 5: 199 70 17 1 0

scanUnsignedLongInt$7:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$8:	; IntegralToIntegral £temporary1279 input
x27705:	mov al, [bp + 16]	; 3: 138 70 16
x27708:	and ax, 255	; 3: 37 255 0
x27711:	cmp al, 0	; 2: 60 0
x27713:	jge scanUnsignedLongInt$9	; 2: 125 4
x27715:	neg al	; 2: 246 216
x27717:	neg ax	; 2: 247 216

scanUnsignedLongInt$9:	; Parameter 19 £temporary1279 6
x27719:	mov [bp + 25], ax	; 3: 137 70 25

scanUnsignedLongInt$10:	; Call 19 isspace 0
x27722:	mov word [bp + 19], scanUnsignedLongInt$11	; 5: 199 70 19 88 108
x27727:	mov [bp + 21], bp	; 3: 137 110 21
x27730:	add bp, 19	; 3: 131 197 19
x27733:	jmp isspace	; 3: 233 82 251

scanUnsignedLongInt$11:	; PostCall 19

scanUnsignedLongInt$12:	; GetReturnValue £temporary1280

scanUnsignedLongInt$13:	; Equal 20 £temporary1280 0
x27736:	cmp bx, 0	; 3: 131 251 0
x27739:	je scanUnsignedLongInt$20	; 2: 116 19

scanUnsignedLongInt$14:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$15:	; Call 19 scanChar 0
x27741:	mov word [bp + 19], scanUnsignedLongInt$16	; 5: 199 70 19 107 108
x27746:	mov [bp + 21], bp	; 3: 137 110 21
x27749:	add bp, 19	; 3: 131 197 19
x27752:	jmp scanChar	; 3: 233 131 248

scanUnsignedLongInt$16:	; PostCall 19

scanUnsignedLongInt$17:	; GetReturnValue £temporary1281

scanUnsignedLongInt$18:	; Assign input £temporary1281
x27755:	mov [bp + 16], bl	; 3: 136 94 16

scanUnsignedLongInt$19:	; Goto 7
x27758:	jmp scanUnsignedLongInt$7	; 2: 235 201

scanUnsignedLongInt$20:	; NotEqual 26 input 43
x27760:	cmp byte [bp + 16], 43	; 4: 128 126 16 43
x27764:	jne scanUnsignedLongInt$26	; 2: 117 17

scanUnsignedLongInt$21:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$22:	; Call 19 scanChar 0
x27766:	mov word [bp + 19], scanUnsignedLongInt$23	; 5: 199 70 19 132 108
x27771:	mov [bp + 21], bp	; 3: 137 110 21
x27774:	add bp, 19	; 3: 131 197 19
x27777:	jmp scanChar	; 3: 233 106 248

scanUnsignedLongInt$23:	; PostCall 19

scanUnsignedLongInt$24:	; GetReturnValue £temporary1284

scanUnsignedLongInt$25:	; Assign input £temporary1284
x27780:	mov [bp + 16], bl	; 3: 136 94 16

scanUnsignedLongInt$26:	; NotEqual 50 base 0
x27783:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x27787:	jne scanUnsignedLongInt$50	; 2: 117 95

scanUnsignedLongInt$27:	; NotEqual 49 input 48
x27789:	cmp byte [bp + 16], 48	; 4: 128 126 16 48
x27793:	jne scanUnsignedLongInt$49	; 2: 117 84

scanUnsignedLongInt$28:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$29:	; Call 19 scanChar 0
x27795:	mov word [bp + 19], scanUnsignedLongInt$30	; 5: 199 70 19 161 108
x27800:	mov [bp + 21], bp	; 3: 137 110 21
x27803:	add bp, 19	; 3: 131 197 19
x27806:	jmp scanChar	; 3: 233 77 248

scanUnsignedLongInt$30:	; PostCall 19

scanUnsignedLongInt$31:	; GetReturnValue £temporary1287

scanUnsignedLongInt$32:	; Assign input £temporary1287
x27809:	mov [bp + 16], bl	; 3: 136 94 16

scanUnsignedLongInt$33:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$34:	; IntegralToIntegral £temporary1288 input
x27812:	mov al, [bp + 16]	; 3: 138 70 16
x27815:	and ax, 255	; 3: 37 255 0
x27818:	cmp al, 0	; 2: 60 0
x27820:	jge scanUnsignedLongInt$35	; 2: 125 4
x27822:	neg al	; 2: 246 216
x27824:	neg ax	; 2: 247 216

scanUnsignedLongInt$35:	; Parameter 19 £temporary1288 6
x27826:	mov [bp + 25], ax	; 3: 137 70 25

scanUnsignedLongInt$36:	; Call 19 tolower 0
x27829:	mov word [bp + 19], scanUnsignedLongInt$37	; 5: 199 70 19 195 108
x27834:	mov [bp + 21], bp	; 3: 137 110 21
x27837:	add bp, 19	; 3: 131 197 19
x27840:	jmp tolower	; 3: 233 89 184

scanUnsignedLongInt$37:	; PostCall 19

scanUnsignedLongInt$38:	; GetReturnValue £temporary1289

scanUnsignedLongInt$39:	; NotEqual 47 £temporary1289 120
x27843:	cmp bx, 120	; 3: 131 251 120
x27846:	jne scanUnsignedLongInt$47	; 2: 117 24

scanUnsignedLongInt$40:	; Assign base 16
x27848:	mov word [bp + 6], 16	; 5: 199 70 6 16 0

scanUnsignedLongInt$41:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$42:	; Call 19 scanChar 0
x27853:	mov word [bp + 19], scanUnsignedLongInt$43	; 5: 199 70 19 219 108
x27858:	mov [bp + 21], bp	; 3: 137 110 21
x27861:	add bp, 19	; 3: 131 197 19
x27864:	jmp scanChar	; 3: 233 19 248

scanUnsignedLongInt$43:	; PostCall 19

scanUnsignedLongInt$44:	; GetReturnValue £temporary1291

scanUnsignedLongInt$45:	; Assign input £temporary1291
x27867:	mov [bp + 16], bl	; 3: 136 94 16

scanUnsignedLongInt$46:	; Goto 50
x27870:	jmp scanUnsignedLongInt$50	; 2: 235 12

scanUnsignedLongInt$47:	; Assign base 8
x27872:	mov word [bp + 6], 8	; 5: 199 70 6 8 0

scanUnsignedLongInt$48:	; Goto 50
x27877:	jmp scanUnsignedLongInt$50	; 2: 235 5

scanUnsignedLongInt$49:	; Assign base 10
x27879:	mov word [bp + 6], 10	; 5: 199 70 6 10 0

scanUnsignedLongInt$50:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$51:	; Parameter 19 input 6
x27884:	mov al, [bp + 16]	; 3: 138 70 16
x27887:	mov [bp + 25], al	; 3: 136 70 25

scanUnsignedLongInt$52:	; Parameter 19 base 7
x27890:	mov ax, [bp + 6]	; 3: 139 70 6
x27893:	mov [bp + 26], ax	; 3: 137 70 26

scanUnsignedLongInt$53:	; Call 19 isDigitInBase 0
x27896:	mov word [bp + 19], scanUnsignedLongInt$54	; 5: 199 70 19 6 109
x27901:	mov [bp + 21], bp	; 3: 137 110 21
x27904:	add bp, 19	; 3: 131 197 19
x27907:	jmp @2758$isDigitInBase	; 3: 233 144 252

scanUnsignedLongInt$54:	; PostCall 19

scanUnsignedLongInt$55:	; GetReturnValue £temporary1292

scanUnsignedLongInt$56:	; Equal 73 £temporary1292 0
x27910:	cmp bx, 0	; 3: 131 251 0
x27913:	je scanUnsignedLongInt$73	; 2: 116 79

scanUnsignedLongInt$57:	; IntegralToIntegral £temporary1293 base
x27915:	mov bx, [bp + 6]	; 3: 139 94 6
x27918:	and ebx, 65535	; 7: 102 129 227 255 255 0 0

scanUnsignedLongInt$58:	; UnsignedMultiply unsignedLongValue unsignedLongValue £temporary1293
x27925:	mov eax, [bp + 8]	; 4: 102 139 70 8
x27929:	xor edx, edx	; 3: 102 49 210
x27932:	mul ebx	; 3: 102 247 227
x27935:	mov [bp + 8], eax	; 4: 102 137 70 8

scanUnsignedLongInt$59:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$60:	; Parameter 19 input 6
x27939:	mov al, [bp + 16]	; 3: 138 70 16
x27942:	mov [bp + 25], al	; 3: 136 70 25

scanUnsignedLongInt$61:	; Call 19 digitToValue 0
x27945:	mov word [bp + 19], scanUnsignedLongInt$62	; 5: 199 70 19 55 109
x27950:	mov [bp + 21], bp	; 3: 137 110 21
x27953:	add bp, 19	; 3: 131 197 19
x27956:	jmp @2822$digitToValue	; 3: 233 230 253

scanUnsignedLongInt$62:	; PostCall 19

scanUnsignedLongInt$63:	; GetReturnValue £temporary1295

scanUnsignedLongInt$64:	; IntegralToIntegral £temporary1296 £temporary1295
x27959:	and ebx, 65535	; 7: 102 129 227 255 255 0 0

scanUnsignedLongInt$65:	; BinaryAdd unsignedLongValue unsignedLongValue £temporary1296
x27966:	add [bp + 8], ebx	; 4: 102 1 94 8

scanUnsignedLongInt$66:	; Assign found 1
x27970:	mov word [bp + 17], 1	; 5: 199 70 17 1 0

scanUnsignedLongInt$67:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$68:	; Call 19 scanChar 0
x27975:	mov word [bp + 19], scanUnsignedLongInt$69	; 5: 199 70 19 85 109
x27980:	mov [bp + 21], bp	; 3: 137 110 21
x27983:	add bp, 19	; 3: 131 197 19
x27986:	jmp scanChar	; 3: 233 153 247

scanUnsignedLongInt$69:	; PostCall 19

scanUnsignedLongInt$70:	; GetReturnValue £temporary1298

scanUnsignedLongInt$71:	; Assign input £temporary1298
x27989:	mov [bp + 16], bl	; 3: 136 94 16

scanUnsignedLongInt$72:	; Goto 50
x27992:	jmp scanUnsignedLongInt$50	; 2: 235 146

scanUnsignedLongInt$73:	; Equal 75 found 0
x27994:	cmp word [bp + 17], 0	; 4: 131 126 17 0
x27998:	je scanUnsignedLongInt$75	; 2: 116 4

scanUnsignedLongInt$74:	; Increment g_inCount
x28000:	inc word [g_inCount]	; 4: 255 6 234 100

scanUnsignedLongInt$75:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanUnsignedLongInt$76:	; Parameter 19 input 6
x28004:	mov al, [bp + 16]	; 3: 138 70 16
x28007:	mov [bp + 25], al	; 3: 136 70 25

scanUnsignedLongInt$77:	; Call 19 unscanChar 0
x28010:	mov word [bp + 19], scanUnsignedLongInt$78	; 5: 199 70 19 120 109
x28015:	mov [bp + 21], bp	; 3: 137 110 21
x28018:	add bp, 19	; 3: 131 197 19
x28021:	jmp unscanChar	; 3: 233 127 254

scanUnsignedLongInt$78:	; PostCall 19

scanUnsignedLongInt$79:	; SetReturnValue unsignedLongValue
x28024:	mov ebx, [bp + 8]	; 4: 102 139 94 8

scanUnsignedLongInt$80:	; Return unsignedLongValue
x28028:	mov ax, [bp]	; 3: 139 70 0
x28031:	mov di, [bp + 4]	; 3: 139 126 4
x28034:	mov bp, [bp + 2]	; 3: 139 110 2
x28037:	jmp ax	; 2: 255 224

scanUnsignedLongInt$81:	; FunctionEnd scanUnsignedLongInt

scanLongDouble:	; Assign minus 0
x28039:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

scanLongDouble$1:	; Assign found 0
x28044:	mov word [bp + 8], 0	; 5: 199 70 8 0 0

scanLongDouble$2:	; PushFloat 0.0
x28049:	fldz	; 2: 217 238

scanLongDouble$3:	; PopFloat value
x28051:	fstp qword [bp + 10]	; 3: 221 94 10

scanLongDouble$4:	; PushFloat 1.0
x28054:	fld1	; 2: 217 232

scanLongDouble$5:	; PopFloat factor
x28056:	fstp qword [bp + 18]	; 3: 221 94 18

scanLongDouble$6:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$7:	; Call 26 scanChar 0
x28059:	mov word [bp + 26], scanLongDouble$8	; 5: 199 70 26 169 109
x28064:	mov [bp + 28], bp	; 3: 137 110 28
x28067:	add bp, 26	; 3: 131 197 26
x28070:	jmp scanChar	; 3: 233 69 247

scanLongDouble$8:	; PostCall 26

scanLongDouble$9:	; GetReturnValue £temporary1309

scanLongDouble$10:	; Assign input £temporary1309
x28073:	mov [bp + 26], bl	; 3: 136 94 26

scanLongDouble$11:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$12:	; IntegralToIntegral £temporary1310 input
x28076:	mov al, [bp + 26]	; 3: 138 70 26
x28079:	and ax, 255	; 3: 37 255 0
x28082:	cmp al, 0	; 2: 60 0
x28084:	jge scanLongDouble$13	; 2: 125 4
x28086:	neg al	; 2: 246 216
x28088:	neg ax	; 2: 247 216

scanLongDouble$13:	; Parameter 27 £temporary1310 6
x28090:	mov [bp + 33], ax	; 3: 137 70 33

scanLongDouble$14:	; Call 27 isspace 0
x28093:	mov word [bp + 27], scanLongDouble$15	; 5: 199 70 27 203 109
x28098:	mov [bp + 29], bp	; 3: 137 110 29
x28101:	add bp, 27	; 3: 131 197 27
x28104:	jmp isspace	; 3: 233 223 249

scanLongDouble$15:	; PostCall 27

scanLongDouble$16:	; GetReturnValue £temporary1311

scanLongDouble$17:	; Equal 24 £temporary1311 0
x28107:	cmp bx, 0	; 3: 131 251 0
x28110:	je scanLongDouble$24	; 2: 116 19

scanLongDouble$18:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$19:	; Call 27 scanChar 0
x28112:	mov word [bp + 27], scanLongDouble$20	; 5: 199 70 27 222 109
x28117:	mov [bp + 29], bp	; 3: 137 110 29
x28120:	add bp, 27	; 3: 131 197 27
x28123:	jmp scanChar	; 3: 233 16 247

scanLongDouble$20:	; PostCall 27

scanLongDouble$21:	; GetReturnValue £temporary1312

scanLongDouble$22:	; Assign input £temporary1312
x28126:	mov [bp + 26], bl	; 3: 136 94 26

scanLongDouble$23:	; Goto 11
x28129:	jmp scanLongDouble$11	; 2: 235 201

scanLongDouble$24:	; NotEqual 31 input 43
x28131:	cmp byte [bp + 26], 43	; 4: 128 126 26 43
x28135:	jne scanLongDouble$31	; 2: 117 19

scanLongDouble$25:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$26:	; Call 27 scanChar 0
x28137:	mov word [bp + 27], scanLongDouble$27	; 5: 199 70 27 247 109
x28142:	mov [bp + 29], bp	; 3: 137 110 29
x28145:	add bp, 27	; 3: 131 197 27
x28148:	jmp scanChar	; 3: 233 247 246

scanLongDouble$27:	; PostCall 27

scanLongDouble$28:	; GetReturnValue £temporary1315

scanLongDouble$29:	; Assign input £temporary1315
x28151:	mov [bp + 26], bl	; 3: 136 94 26

scanLongDouble$30:	; Goto 38
x28154:	jmp scanLongDouble$38	; 2: 235 28

scanLongDouble$31:	; NotEqual 38 input 45
x28156:	cmp byte [bp + 26], 45	; 4: 128 126 26 45
x28160:	jne scanLongDouble$38	; 2: 117 22

scanLongDouble$32:	; Assign minus 1
x28162:	mov word [bp + 6], 1	; 5: 199 70 6 1 0

scanLongDouble$33:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$34:	; Call 27 scanChar 0
x28167:	mov word [bp + 27], scanLongDouble$35	; 5: 199 70 27 21 110
x28172:	mov [bp + 29], bp	; 3: 137 110 29
x28175:	add bp, 27	; 3: 131 197 27
x28178:	jmp scanChar	; 3: 233 217 246

scanLongDouble$35:	; PostCall 27

scanLongDouble$36:	; GetReturnValue £temporary1317

scanLongDouble$37:	; Assign input £temporary1317
x28181:	mov [bp + 26], bl	; 3: 136 94 26

scanLongDouble$38:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$39:	; IntegralToIntegral £temporary1318 input
x28184:	mov al, [bp + 26]	; 3: 138 70 26
x28187:	and ax, 255	; 3: 37 255 0
x28190:	cmp al, 0	; 2: 60 0
x28192:	jge scanLongDouble$40	; 2: 125 4
x28194:	neg al	; 2: 246 216
x28196:	neg ax	; 2: 247 216

scanLongDouble$40:	; Parameter 27 £temporary1318 6
x28198:	mov [bp + 33], ax	; 3: 137 70 33

scanLongDouble$41:	; Call 27 isdigit 0
x28201:	mov word [bp + 27], scanLongDouble$42	; 5: 199 70 27 55 110
x28206:	mov [bp + 29], bp	; 3: 137 110 29
x28209:	add bp, 27	; 3: 131 197 27
x28212:	jmp isdigit	; 3: 233 50 189

scanLongDouble$42:	; PostCall 27

scanLongDouble$43:	; GetReturnValue £temporary1319

scanLongDouble$44:	; Equal 60 £temporary1319 0
x28215:	cmp bx, 0	; 3: 131 251 0
x28218:	je scanLongDouble$60	; 2: 116 61

scanLongDouble$45:	; PushFloat 10.0
x28220:	fld qword [@3023$float8$10.0#]	; 4: 221 6 170 111

scanLongDouble$46:	; PushFloat value
x28224:	fld qword [bp + 10]	; 3: 221 70 10

scanLongDouble$47:	; SignedMultiply £temporary1320 10.0 value
x28227:	fmul	; 2: 222 201

scanLongDouble$48:	; BinarySubtract £temporary1321 input 48
x28229:	mov al, [bp + 26]	; 3: 138 70 26
x28232:	sub al, 48	; 2: 44 48

scanLongDouble$49:	; IntegralToIntegral £temporary1323 £temporary1321
x28234:	and ax, 255	; 3: 37 255 0
x28237:	cmp al, 0	; 2: 60 0
x28239:	jge scanLongDouble$50	; 2: 125 4
x28241:	neg al	; 2: 246 216
x28243:	neg ax	; 2: 247 216

scanLongDouble$50:	; IntegralToFloating £temporary1322 £temporary1323
x28245:	mov [container2bytes#], ax	; 3: 163 77 27
x28248:	fild word [container2bytes#]	; 4: 223 6 77 27

scanLongDouble$51:	; BinaryAdd £temporary1324 £temporary1320 £temporary1322
x28252:	fadd	; 2: 222 193

scanLongDouble$52:	; PopFloat value
x28254:	fstp qword [bp + 10]	; 3: 221 94 10

scanLongDouble$53:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$54:	; Call 27 scanChar 0
x28257:	mov word [bp + 27], scanLongDouble$55	; 5: 199 70 27 111 110
x28262:	mov [bp + 29], bp	; 3: 137 110 29
x28265:	add bp, 27	; 3: 131 197 27
x28268:	jmp scanChar	; 3: 233 127 246

scanLongDouble$55:	; PostCall 27

scanLongDouble$56:	; GetReturnValue £temporary1325

scanLongDouble$57:	; Assign input £temporary1325
x28271:	mov [bp + 26], bl	; 3: 136 94 26

scanLongDouble$58:	; Assign found 1
x28274:	mov word [bp + 8], 1	; 5: 199 70 8 1 0

scanLongDouble$59:	; Goto 38
x28279:	jmp scanLongDouble$38	; 2: 235 159

scanLongDouble$60:	; NotEqual 92 input 46
x28281:	cmp byte [bp + 26], 46	; 4: 128 126 26 46
x28285:	jne scanLongDouble$92	; 2: 117 125

scanLongDouble$61:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$62:	; Call 27 scanChar 0
x28287:	mov word [bp + 27], scanLongDouble$63	; 5: 199 70 27 141 110
x28292:	mov [bp + 29], bp	; 3: 137 110 29
x28295:	add bp, 27	; 3: 131 197 27
x28298:	jmp scanChar	; 3: 233 97 246

scanLongDouble$63:	; PostCall 27

scanLongDouble$64:	; GetReturnValue £temporary1328

scanLongDouble$65:	; Assign input £temporary1328
x28301:	mov [bp + 26], bl	; 3: 136 94 26

scanLongDouble$66:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$67:	; IntegralToIntegral £temporary1329 input
x28304:	mov al, [bp + 26]	; 3: 138 70 26
x28307:	and ax, 255	; 3: 37 255 0
x28310:	cmp al, 0	; 2: 60 0
x28312:	jge scanLongDouble$68	; 2: 125 4
x28314:	neg al	; 2: 246 216
x28316:	neg ax	; 2: 247 216

scanLongDouble$68:	; Parameter 27 £temporary1329 6
x28318:	mov [bp + 33], ax	; 3: 137 70 33

scanLongDouble$69:	; Call 27 isdigit 0
x28321:	mov word [bp + 27], scanLongDouble$70	; 5: 199 70 27 175 110
x28326:	mov [bp + 29], bp	; 3: 137 110 29
x28329:	add bp, 27	; 3: 131 197 27
x28332:	jmp isdigit	; 3: 233 186 188

scanLongDouble$70:	; PostCall 27

scanLongDouble$71:	; GetReturnValue £temporary1330

scanLongDouble$72:	; Equal 92 £temporary1330 0
x28335:	cmp bx, 0	; 3: 131 251 0
x28338:	je scanLongDouble$92	; 2: 116 72

scanLongDouble$73:	; PushFloat factor
x28340:	fld qword [bp + 18]	; 3: 221 70 18

scanLongDouble$74:	; PushFloat 10.0
x28343:	fld qword [@3043$float8$10.0#]	; 4: 221 6 178 111

scanLongDouble$75:	; SignedDivide £temporary1331 factor 10.0
x28347:	fdiv	; 2: 222 249

scanLongDouble$76:	; PopFloat factor
x28349:	fstp qword [bp + 18]	; 3: 221 94 18

scanLongDouble$77:	; PushFloat value
x28352:	fld qword [bp + 10]	; 3: 221 70 10

scanLongDouble$78:	; PushFloat factor
x28355:	fld qword [bp + 18]	; 3: 221 70 18

scanLongDouble$79:	; BinarySubtract £temporary1332 input 48
x28358:	mov al, [bp + 26]	; 3: 138 70 26
x28361:	sub al, 48	; 2: 44 48

scanLongDouble$80:	; IntegralToIntegral £temporary1334 £temporary1332
x28363:	and ax, 255	; 3: 37 255 0
x28366:	cmp al, 0	; 2: 60 0
x28368:	jge scanLongDouble$81	; 2: 125 4
x28370:	neg al	; 2: 246 216
x28372:	neg ax	; 2: 247 216

scanLongDouble$81:	; IntegralToFloating £temporary1333 £temporary1334
x28374:	mov [container2bytes#], ax	; 3: 163 77 27
x28377:	fild word [container2bytes#]	; 4: 223 6 77 27

scanLongDouble$82:	; SignedMultiply £temporary1335 factor £temporary1333
x28381:	fmul	; 2: 222 201

scanLongDouble$83:	; BinaryAdd £temporary1336 value £temporary1335
x28383:	fadd	; 2: 222 193

scanLongDouble$84:	; PopFloat value
x28385:	fstp qword [bp + 10]	; 3: 221 94 10

scanLongDouble$85:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$86:	; Call 27 scanChar 0
x28388:	mov word [bp + 27], scanLongDouble$87	; 5: 199 70 27 242 110
x28393:	mov [bp + 29], bp	; 3: 137 110 29
x28396:	add bp, 27	; 3: 131 197 27
x28399:	jmp scanChar	; 3: 233 252 245

scanLongDouble$87:	; PostCall 27

scanLongDouble$88:	; GetReturnValue £temporary1337

scanLongDouble$89:	; Assign input £temporary1337
x28402:	mov [bp + 26], bl	; 3: 136 94 26

scanLongDouble$90:	; Assign found 1
x28405:	mov word [bp + 8], 1	; 5: 199 70 8 1 0

scanLongDouble$91:	; Goto 66
x28410:	jmp scanLongDouble$66	; 2: 235 148

scanLongDouble$92:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$93:	; IntegralToIntegral £temporary1339 input
x28412:	mov al, [bp + 26]	; 3: 138 70 26
x28415:	and ax, 255	; 3: 37 255 0
x28418:	cmp al, 0	; 2: 60 0
x28420:	jge scanLongDouble$94	; 2: 125 4
x28422:	neg al	; 2: 246 216
x28424:	neg ax	; 2: 247 216

scanLongDouble$94:	; Parameter 27 £temporary1339 6
x28426:	mov [bp + 33], ax	; 3: 137 70 33

scanLongDouble$95:	; Call 27 tolower 0
x28429:	mov word [bp + 27], scanLongDouble$96	; 5: 199 70 27 27 111
x28434:	mov [bp + 29], bp	; 3: 137 110 29
x28437:	add bp, 27	; 3: 131 197 27
x28440:	jmp tolower	; 3: 233 1 182

scanLongDouble$96:	; PostCall 27

scanLongDouble$97:	; GetReturnValue £temporary1340

scanLongDouble$98:	; NotEqual 118 £temporary1340 101
x28443:	cmp bx, 101	; 3: 131 251 101
x28446:	jne scanLongDouble$118	; 2: 117 80

scanLongDouble$99:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$100:	; Parameter 27 10 6
x28448:	mov word [bp + 33], 10	; 5: 199 70 33 10 0

scanLongDouble$101:	; Call 27 scanLongInt 0
x28453:	mov word [bp + 27], scanLongDouble$102	; 5: 199 70 27 51 111
x28458:	mov [bp + 29], bp	; 3: 137 110 29
x28461:	add bp, 27	; 3: 131 197 27
x28464:	jmp scanLongInt	; 3: 233 174 248

scanLongDouble$102:	; PostCall 27

scanLongDouble$103:	; GetReturnValue £temporary1342

scanLongDouble$104:	; IntegralToFloating £temporary1343 £temporary1342
x28467:	mov [container4bytes#], ebx	; 5: 102 137 30 78 36
x28472:	fild dword [container4bytes#]	; 4: 219 6 78 36

scanLongDouble$105:	; PopFloat exponent
x28476:	fstp qword [bp + 27]	; 3: 221 94 27

scanLongDouble$106:	; PushFloat value
x28479:	fld qword [bp + 10]	; 3: 221 70 10

scanLongDouble$107:	; CallHeader 35 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 1
x28482:	fstp qword [bp + 35]	; 3: 221 94 35

scanLongDouble$108:	; PushFloat 10.0
x28485:	fld qword [@3069$float8$10.0#]	; 4: 221 6 186 111

scanLongDouble$109:	; Parameter 35 10.0 6
x28489:	fstp qword [bp + 49]	; 3: 221 94 49

scanLongDouble$110:	; PushFloat exponent
x28492:	fld qword [bp + 27]	; 3: 221 70 27

scanLongDouble$111:	; Parameter 35 exponent 14
x28495:	fstp qword [bp + 57]	; 3: 221 94 57

scanLongDouble$112:	; Call 35 pow 0
x28498:	mov word [bp + 43], scanLongDouble$113	; 5: 199 70 43 96 111
x28503:	mov [bp + 45], bp	; 3: 137 110 45
x28506:	add bp, 43	; 3: 131 197 43
x28509:	jmp pow	; 3: 233 56 185

scanLongDouble$113:	; PostCall 35
x28512:	fstp qword [bp + 43]	; 3: 221 94 43
x28515:	fld qword [bp + 35]	; 3: 221 70 35
x28518:	fld qword [bp + 43]	; 3: 221 70 43

scanLongDouble$114:	; GetReturnValue £temporary1344

scanLongDouble$115:	; SignedMultiply £temporary1345 value £temporary1344
x28521:	fmul	; 2: 222 201

scanLongDouble$116:	; PopFloat value
x28523:	fstp qword [bp + 10]	; 3: 221 94 10

scanLongDouble$117:	; Goto 122
x28526:	jmp scanLongDouble$122	; 2: 235 20

scanLongDouble$118:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanLongDouble$119:	; Parameter 27 input 6
x28528:	mov al, [bp + 26]	; 3: 138 70 26
x28531:	mov [bp + 33], al	; 3: 136 70 33

scanLongDouble$120:	; Call 27 unscanChar 0
x28534:	mov word [bp + 27], scanLongDouble$121	; 5: 199 70 27 132 111
x28539:	mov [bp + 29], bp	; 3: 137 110 29
x28542:	add bp, 27	; 3: 131 197 27
x28545:	jmp unscanChar	; 3: 233 115 252

scanLongDouble$121:	; PostCall 27

scanLongDouble$122:	; Equal 126 minus 0
x28548:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x28552:	je scanLongDouble$126	; 2: 116 8

scanLongDouble$123:	; PushFloat value
x28554:	fld qword [bp + 10]	; 3: 221 70 10

scanLongDouble$124:	; UnarySubtract £temporary1347 value
x28557:	fchs	; 2: 217 224

scanLongDouble$125:	; PopFloat value
x28559:	fstp qword [bp + 10]	; 3: 221 94 10

scanLongDouble$126:	; Equal 128 found 0
x28562:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x28566:	je scanLongDouble$128	; 2: 116 4

scanLongDouble$127:	; Increment g_inCount
x28568:	inc word [g_inCount]	; 4: 255 6 234 100

scanLongDouble$128:	; PushFloat value
x28572:	fld qword [bp + 10]	; 3: 221 70 10

scanLongDouble$129:	; SetReturnValue value

scanLongDouble$130:	; Return value
x28575:	mov ax, [bp]	; 3: 139 70 0
x28578:	mov di, [bp + 4]	; 3: 139 126 4
x28581:	mov bp, [bp + 2]	; 3: 139 110 2
x28584:	jmp ax	; 2: 255 224

scanLongDouble$131:	; FunctionEnd scanLongDouble

@3023$float8$10.0#:
x28586:	dq 10.0	; 8: 0 0 0 0 0 0 36 64

@3043$float8$10.0#:
x28594:	dq 10.0	; 8: 0 0 0 0 0 0 36 64

@3069$float8$10.0#:
x28602:	dq 10.0	; 8: 0 0 0 0 0 0 36 64

scanPattern:	; Assign index 0
x28610:	mov word [bp + 14], 0	; 5: 199 70 14 0 0

scanPattern$1:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanPattern$2:	; Call 16 scanChar 0
x28615:	mov word [bp + 16], scanPattern$3	; 5: 199 70 16 213 111
x28620:	mov [bp + 18], bp	; 3: 137 110 18
x28623:	add bp, 16	; 3: 131 197 16
x28626:	jmp scanChar	; 3: 233 25 245

scanPattern$3:	; PostCall 16

scanPattern$4:	; GetReturnValue £temporary1053

scanPattern$5:	; Assign input £temporary1053
x28629:	mov [bp + 16], bl	; 3: 136 94 16

scanPattern$6:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanPattern$7:	; IntegralToIntegral £temporary1054 input
x28632:	mov al, [bp + 16]	; 3: 138 70 16
x28635:	and ax, 255	; 3: 37 255 0
x28638:	cmp al, 0	; 2: 60 0
x28640:	jge scanPattern$8	; 2: 125 4
x28642:	neg al	; 2: 246 216
x28644:	neg ax	; 2: 247 216

scanPattern$8:	; Parameter 17 £temporary1054 6
x28646:	mov [bp + 23], ax	; 3: 137 70 23

scanPattern$9:	; Call 17 isspace 0
x28649:	mov word [bp + 17], scanPattern$10	; 5: 199 70 17 247 111
x28654:	mov [bp + 19], bp	; 3: 137 110 19
x28657:	add bp, 17	; 3: 131 197 17
x28660:	jmp isspace	; 3: 233 179 247

scanPattern$10:	; PostCall 17

scanPattern$11:	; GetReturnValue £temporary1055

scanPattern$12:	; Equal 19 £temporary1055 0
x28663:	cmp bx, 0	; 3: 131 251 0
x28666:	je scanPattern$19	; 2: 116 19

scanPattern$13:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanPattern$14:	; Call 17 scanChar 0
x28668:	mov word [bp + 17], scanPattern$15	; 5: 199 70 17 10 112
x28673:	mov [bp + 19], bp	; 3: 137 110 19
x28676:	add bp, 17	; 3: 131 197 17
x28679:	jmp scanChar	; 3: 233 228 244

scanPattern$15:	; PostCall 17

scanPattern$16:	; GetReturnValue £temporary1056

scanPattern$17:	; Assign input £temporary1056
x28682:	mov [bp + 16], bl	; 3: 136 94 16

scanPattern$18:	; Goto 6
x28685:	jmp scanPattern$6	; 2: 235 201

scanPattern$19:	; Equal 55 string 0
x28687:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x28691:	je scanPattern$55	; 4: 15 132 156 0

scanPattern$20:	; NotEqual 30 not 0
x28695:	cmp word [bp + 12], 0	; 4: 131 126 12 0
x28699:	jne scanPattern$30	; 2: 117 48

scanPattern$21:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanPattern$22:	; Parameter 17 pattern 6
x28701:	mov ax, [bp + 8]	; 3: 139 70 8
x28704:	mov [bp + 23], ax	; 3: 137 70 23

scanPattern$23:	; Parameter 17 size 8
x28707:	mov ax, [bp + 10]	; 3: 139 70 10
x28710:	mov [bp + 25], ax	; 3: 137 70 25

scanPattern$24:	; IntegralToIntegral £temporary1061 input
x28713:	mov al, [bp + 16]	; 3: 138 70 16
x28716:	and ax, 255	; 3: 37 255 0
x28719:	cmp al, 0	; 2: 60 0
x28721:	jge scanPattern$25	; 2: 125 4
x28723:	neg al	; 2: 246 216
x28725:	neg ax	; 2: 247 216

scanPattern$25:	; Parameter 17 £temporary1061 10
x28727:	mov [bp + 27], ax	; 3: 137 70 27

scanPattern$26:	; Call 17 strnchr 0
x28730:	mov word [bp + 17], scanPattern$27	; 5: 199 70 17 72 112
x28735:	mov [bp + 19], bp	; 3: 137 110 19
x28738:	add bp, 17	; 3: 131 197 17
x28741:	jmp @2496$strnchr	; 3: 233 245 0

scanPattern$27:	; PostCall 17

scanPattern$28:	; GetReturnValue £temporary1062

scanPattern$29:	; NotEqual 40 £temporary1062 0
x28744:	cmp bx, 0	; 3: 131 251 0
x28747:	jne scanPattern$40	; 2: 117 54

scanPattern$30:	; Equal 51 not 0
x28749:	cmp word [bp + 12], 0	; 4: 131 126 12 0
x28753:	je scanPattern$51	; 2: 116 84

scanPattern$31:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanPattern$32:	; Parameter 17 pattern 6
x28755:	mov ax, [bp + 8]	; 3: 139 70 8
x28758:	mov [bp + 23], ax	; 3: 137 70 23

scanPattern$33:	; Parameter 17 size 8
x28761:	mov ax, [bp + 10]	; 3: 139 70 10
x28764:	mov [bp + 25], ax	; 3: 137 70 25

scanPattern$34:	; IntegralToIntegral £temporary1065 input
x28767:	mov al, [bp + 16]	; 3: 138 70 16
x28770:	and ax, 255	; 3: 37 255 0
x28773:	cmp al, 0	; 2: 60 0
x28775:	jge scanPattern$35	; 2: 125 4
x28777:	neg al	; 2: 246 216
x28779:	neg ax	; 2: 247 216

scanPattern$35:	; Parameter 17 £temporary1065 10
x28781:	mov [bp + 27], ax	; 3: 137 70 27

scanPattern$36:	; Call 17 strnchr 0
x28784:	mov word [bp + 17], scanPattern$37	; 5: 199 70 17 126 112
x28789:	mov [bp + 19], bp	; 3: 137 110 19
x28792:	add bp, 17	; 3: 131 197 17
x28795:	jmp @2496$strnchr	; 3: 233 191 0

scanPattern$37:	; PostCall 17

scanPattern$38:	; GetReturnValue £temporary1066

scanPattern$39:	; NotEqual 51 £temporary1066 0
x28798:	cmp bx, 0	; 3: 131 251 0
x28801:	jne scanPattern$51	; 2: 117 36

scanPattern$40:	; Assign £temporary1072 index
x28803:	mov ax, [bp + 14]	; 3: 139 70 14

scanPattern$41:	; Increment index
x28806:	inc word [bp + 14]	; 3: 255 70 14

scanPattern$42:	; BinaryAdd £temporary1075 string £temporary1072
x28809:	mov si, [bp + 6]	; 3: 139 118 6
x28812:	add si, ax	; 2: 1 198

scanPattern$43:	; Deref £temporary1074 -> £temporary1075 £temporary1075 0

scanPattern$44:	; Assign £temporary1074 -> £temporary1075 input
x28814:	mov al, [bp + 16]	; 3: 138 70 16
x28817:	mov [si], al	; 2: 136 4

scanPattern$45:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanPattern$46:	; Call 17 scanChar 0
x28819:	mov word [bp + 17], scanPattern$47	; 5: 199 70 17 161 112
x28824:	mov [bp + 19], bp	; 3: 137 110 19
x28827:	add bp, 17	; 3: 131 197 17
x28830:	jmp scanChar	; 3: 233 77 244

scanPattern$47:	; PostCall 17

scanPattern$48:	; GetReturnValue £temporary1076

scanPattern$49:	; Assign input £temporary1076
x28833:	mov [bp + 16], bl	; 3: 136 94 16

scanPattern$50:	; Goto 20
x28836:	jmp scanPattern$20	; 3: 233 112 255

scanPattern$51:	; BinaryAdd £temporary1078 string index
x28839:	mov si, [bp + 6]	; 3: 139 118 6
x28842:	add si, [bp + 14]	; 3: 3 118 14

scanPattern$52:	; Deref £temporary1077 -> £temporary1078 £temporary1078 0

scanPattern$53:	; Assign £temporary1077 -> £temporary1078 0
x28845:	mov byte [si], 0	; 3: 198 4 0

scanPattern$54:	; Goto 81
x28848:	jmp scanPattern$81	; 3: 233 127 0

scanPattern$55:	; NotEqual 65 not 0
x28851:	cmp word [bp + 12], 0	; 4: 131 126 12 0
x28855:	jne scanPattern$65	; 2: 117 48

scanPattern$56:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanPattern$57:	; Parameter 17 pattern 6
x28857:	mov ax, [bp + 8]	; 3: 139 70 8
x28860:	mov [bp + 23], ax	; 3: 137 70 23

scanPattern$58:	; Parameter 17 size 8
x28863:	mov ax, [bp + 10]	; 3: 139 70 10
x28866:	mov [bp + 25], ax	; 3: 137 70 25

scanPattern$59:	; IntegralToIntegral £temporary1081 input
x28869:	mov al, [bp + 16]	; 3: 138 70 16
x28872:	and ax, 255	; 3: 37 255 0
x28875:	cmp al, 0	; 2: 60 0
x28877:	jge scanPattern$60	; 2: 125 4
x28879:	neg al	; 2: 246 216
x28881:	neg ax	; 2: 247 216

scanPattern$60:	; Parameter 17 £temporary1081 10
x28883:	mov [bp + 27], ax	; 3: 137 70 27

scanPattern$61:	; Call 17 strnchr 0
x28886:	mov word [bp + 17], scanPattern$62	; 5: 199 70 17 228 112
x28891:	mov [bp + 19], bp	; 3: 137 110 19
x28894:	add bp, 17	; 3: 131 197 17
x28897:	nop	; 1: 144
x28898:	jmp @2496$strnchr	; 2: 235 89

scanPattern$62:	; PostCall 17

scanPattern$63:	; GetReturnValue £temporary1082

scanPattern$64:	; NotEqual 75 £temporary1082 0
x28900:	cmp bx, 0	; 3: 131 251 0
x28903:	jne scanPattern$75	; 2: 117 54

scanPattern$65:	; Equal 81 not 0
x28905:	cmp word [bp + 12], 0	; 4: 131 126 12 0
x28909:	je scanPattern$81	; 2: 116 67

scanPattern$66:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanPattern$67:	; Parameter 17 pattern 6
x28911:	mov ax, [bp + 8]	; 3: 139 70 8
x28914:	mov [bp + 23], ax	; 3: 137 70 23

scanPattern$68:	; Parameter 17 size 8
x28917:	mov ax, [bp + 10]	; 3: 139 70 10
x28920:	mov [bp + 25], ax	; 3: 137 70 25

scanPattern$69:	; IntegralToIntegral £temporary1085 input
x28923:	mov al, [bp + 16]	; 3: 138 70 16
x28926:	and ax, 255	; 3: 37 255 0
x28929:	cmp al, 0	; 2: 60 0
x28931:	jge scanPattern$70	; 2: 125 4
x28933:	neg al	; 2: 246 216
x28935:	neg ax	; 2: 247 216

scanPattern$70:	; Parameter 17 £temporary1085 10
x28937:	mov [bp + 27], ax	; 3: 137 70 27

scanPattern$71:	; Call 17 strnchr 0
x28940:	mov word [bp + 17], scanPattern$72	; 5: 199 70 17 26 113
x28945:	mov [bp + 19], bp	; 3: 137 110 19
x28948:	add bp, 17	; 3: 131 197 17
x28951:	nop	; 1: 144
x28952:	jmp @2496$strnchr	; 2: 235 35

scanPattern$72:	; PostCall 17

scanPattern$73:	; GetReturnValue £temporary1086

scanPattern$74:	; NotEqual 81 £temporary1086 0
x28954:	cmp bx, 0	; 3: 131 251 0
x28957:	jne scanPattern$81	; 2: 117 19

scanPattern$75:	; CallHeader 17 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

scanPattern$76:	; Call 17 scanChar 0
x28959:	mov word [bp + 17], scanPattern$77	; 5: 199 70 17 45 113
x28964:	mov [bp + 19], bp	; 3: 137 110 19
x28967:	add bp, 17	; 3: 131 197 17
x28970:	jmp scanChar	; 3: 233 193 243

scanPattern$77:	; PostCall 17

scanPattern$78:	; GetReturnValue £temporary1092

scanPattern$79:	; Assign input £temporary1092
x28973:	mov [bp + 16], bl	; 3: 136 94 16

scanPattern$80:	; Goto 55
x28976:	jmp scanPattern$55	; 2: 235 129

scanPattern$81:	; Return 0
x28978:	mov ax, [bp]	; 3: 139 70 0
x28981:	mov di, [bp + 4]	; 3: 139 126 4
x28984:	mov bp, [bp + 2]	; 3: 139 110 2
x28987:	jmp ax	; 2: 255 224

scanPattern$82:	; FunctionEnd scanPattern

@2496$strnchr:	; IntegralToIntegral £temporary1044 i
x28989:	mov ax, [bp + 10]	; 3: 139 70 10
x28992:	cmp ax, 0	; 3: 131 248 0
x28995:	jge @2496$strnchr$1	; 2: 125 4
x28997:	neg ax	; 2: 247 216
x28999:	neg al	; 2: 246 216

@2496$strnchr$1:	; Assign c £temporary1044
x29001:	mov [bp + 14], al	; 3: 136 70 14

@2496$strnchr$2:	; Assign index 0
x29004:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

@2496$strnchr$3:	; SignedGreaterThanEqual 14 index size
x29009:	mov ax, [bp + 8]	; 3: 139 70 8
x29012:	cmp [bp + 12], ax	; 3: 57 70 12
x29015:	jge @2496$strnchr$14	; 2: 125 35

@2496$strnchr$4:	; BinaryAdd £temporary1048 text index
x29017:	mov si, [bp + 6]	; 3: 139 118 6
x29020:	add si, [bp + 12]	; 3: 3 118 12

@2496$strnchr$5:	; Deref £temporary1047 -> £temporary1048 £temporary1048 0

@2496$strnchr$6:	; NotEqual 12 £temporary1047 -> £temporary1048 c
x29023:	mov al, [bp + 14]	; 3: 138 70 14
x29026:	cmp [si], al	; 2: 56 4
x29028:	jne @2496$strnchr$12	; 2: 117 17

@2496$strnchr$7:	; BinaryAdd £temporary1051 text index
x29030:	mov bx, [bp + 6]	; 3: 139 94 6
x29033:	add bx, [bp + 12]	; 3: 3 94 12

@2496$strnchr$8:	; Deref £temporary1050 -> £temporary1051 £temporary1051 0

@2496$strnchr$9:	; address £temporary1052 £temporary1050 -> £temporary1051

@2496$strnchr$10:	; SetReturnValue £temporary1052

@2496$strnchr$11:	; Return £temporary1052
x29036:	mov ax, [bp]	; 3: 139 70 0
x29039:	mov di, [bp + 4]	; 3: 139 126 4
x29042:	mov bp, [bp + 2]	; 3: 139 110 2
x29045:	jmp ax	; 2: 255 224

@2496$strnchr$12:	; Increment index
x29047:	inc word [bp + 12]	; 3: 255 70 12

@2496$strnchr$13:	; Goto 3
x29050:	jmp @2496$strnchr$3	; 2: 235 213

@2496$strnchr$14:	; SetReturnValue 0
x29052:	mov bx, 0	; 3: 187 0 0

@2496$strnchr$15:	; Return 0
x29055:	mov ax, [bp]	; 3: 139 70 0
x29058:	mov di, [bp + 4]	; 3: 139 126 4
x29061:	mov bp, [bp + 2]	; 3: 139 110 2
x29064:	jmp ax	; 2: 255 224

@2496$strnchr$16:	; FunctionEnd strnchr

fclose:	; Equal 20 stream 0
x29066:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x29070:	je fclose$20	; 2: 116 86

fclose$1:	; AssignRegister ah 62
x29072:	mov ah, 62	; 2: 180 62

fclose$2:	; Deref £temporary809 -> stream stream 2
x29074:	mov si, [bp + 6]	; 3: 139 118 6

fclose$3:	; AssignRegister bx £temporary809 -> stream
x29077:	mov bx, [si + 2]	; 3: 139 92 2

fclose$4:	; Interrupt 33
x29080:	int 33	; 2: 205 33

fclose$5:	; NotCarry 9
x29082:	jnc fclose$9	; 2: 115 20

fclose$6:	; Assign errno 11
x29084:	mov word [errno], 11	; 6: 199 6 230 10 11 0

fclose$7:	; SetReturnValue -1
x29090:	mov bx, -1	; 3: 187 255 255

fclose$8:	; Return -1
x29093:	mov ax, [bp]	; 3: 139 70 0
x29096:	mov di, [bp + 4]	; 3: 139 126 4
x29099:	mov bp, [bp + 2]	; 3: 139 110 2
x29102:	jmp ax	; 2: 255 224

fclose$9:	; Deref £temporary811 -> stream stream 27
x29104:	mov si, [bp + 6]	; 3: 139 118 6

fclose$10:	; Equal 16 £temporary811 -> stream 0
x29107:	cmp word [si + 27], 0	; 4: 131 124 27 0
x29111:	je fclose$16	; 2: 116 24

fclose$11:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

fclose$12:	; Deref £temporary812 -> stream stream 4
x29113:	mov si, [bp + 6]	; 3: 139 118 6

fclose$13:	; Parameter 8 £temporary812 -> stream 6
x29116:	mov [bp + 14], si	; 3: 137 118 14
x29119:	add word [bp + 14], 4	; 4: 131 70 14 4

fclose$14:	; Call 8 remove 0
x29123:	mov word [bp + 8], fclose$15	; 5: 199 70 8 209 113
x29128:	mov [bp + 10], bp	; 3: 137 110 10
x29131:	add bp, 8	; 3: 131 197 8
x29134:	nop	; 1: 144
x29135:	jmp remove	; 2: 235 124

fclose$15:	; PostCall 8

fclose$16:	; Deref £temporary815 -> stream stream 0
x29137:	mov si, [bp + 6]	; 3: 139 118 6

fclose$17:	; Assign £temporary815 -> stream 0
x29140:	mov word [si], 0	; 4: 199 4 0 0

fclose$18:	; SetReturnValue 0
x29144:	mov bx, 0	; 3: 187 0 0

fclose$19:	; Return 0
x29147:	mov ax, [bp]	; 3: 139 70 0
x29150:	mov di, [bp + 4]	; 3: 139 126 4
x29153:	mov bp, [bp + 2]	; 3: 139 110 2
x29156:	jmp ax	; 2: 255 224

fclose$20:	; Assign index 0
x29158:	mov word [bp + 8], 0	; 5: 199 70 8 0 0

fclose$21:	; SignedGreaterThanEqual 40 index 20
x29163:	cmp word [bp + 8], 20	; 4: 131 126 8 20
x29167:	jge fclose$40	; 2: 125 74

fclose$22:	; SignedMultiply £temporary819 index 29
x29169:	mov ax, [bp + 8]	; 3: 139 70 8
x29172:	xor dx, dx	; 2: 49 210
x29174:	imul word [@1957$int2$29#]	; 4: 247 46 73 114

fclose$23:	; BinaryAdd £temporary820 g_fileArray £temporary819
x29178:	mov si, g_fileArray	; 3: 190 102 13
x29181:	add si, ax	; 2: 1 198

fclose$24:	; Deref £temporary818 -> £temporary820 £temporary820 0

fclose$25:	; Equal 38 £temporary818.open$0 -> £temporary820 0
x29183:	cmp word [si], 0	; 3: 131 60 0
x29186:	je fclose$38	; 2: 116 50

fclose$26:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

fclose$27:	; SignedMultiply £temporary822 index 29
x29188:	mov ax, [bp + 8]	; 3: 139 70 8
x29191:	xor dx, dx	; 2: 49 210
x29193:	imul word [@1962$int2$29#]	; 4: 247 46 75 114

fclose$28:	; BinaryAdd £temporary823 g_fileArray £temporary822
x29197:	mov si, g_fileArray	; 3: 190 102 13
x29200:	add si, ax	; 2: 1 198

fclose$29:	; Deref £temporary821 -> £temporary823 £temporary823 0

fclose$30:	; address £temporary824 £temporary821 -> £temporary823

fclose$31:	; Parameter 10 £temporary824 6
x29202:	mov [bp + 16], si	; 3: 137 118 16

fclose$32:	; Call 10 fclose 0
x29205:	mov word [bp + 10], fclose$33	; 5: 199 70 10 35 114
x29210:	mov [bp + 12], bp	; 3: 137 110 12
x29213:	add bp, 10	; 3: 131 197 10
x29216:	jmp fclose	; 3: 233 103 255

fclose$33:	; PostCall 10

fclose$34:	; GetReturnValue £temporary825

fclose$35:	; NotEqual 38 £temporary825 -1
x29219:	cmp bx, -1	; 3: 131 251 255
x29222:	jne fclose$38	; 2: 117 14

fclose$36:	; SetReturnValue -1
x29224:	mov bx, -1	; 3: 187 255 255

fclose$37:	; Return -1
x29227:	mov ax, [bp]	; 3: 139 70 0
x29230:	mov di, [bp + 4]	; 3: 139 126 4
x29233:	mov bp, [bp + 2]	; 3: 139 110 2
x29236:	jmp ax	; 2: 255 224

fclose$38:	; Increment index
x29238:	inc word [bp + 8]	; 3: 255 70 8

fclose$39:	; Goto 21
x29241:	jmp fclose$21	; 2: 235 176

fclose$40:	; SetReturnValue 0
x29243:	mov bx, 0	; 3: 187 0 0

fclose$41:	; Return 0
x29246:	mov ax, [bp]	; 3: 139 70 0
x29249:	mov di, [bp + 4]	; 3: 139 126 4
x29252:	mov bp, [bp + 2]	; 3: 139 110 2
x29255:	jmp ax	; 2: 255 224

fclose$42:	; FunctionEnd fclose

@1957$int2$29#:
x29257:	dw 29	; 2: 29 0

@1962$int2$29#:
x29259:	dw 29	; 2: 29 0

remove:	; AssignRegister ah 65
x29261:	mov ah, 65	; 2: 180 65

remove$1:	; AssignRegister cl 0
x29263:	mov cl, 0	; 2: 177 0

remove$2:	; AssignRegister dx name
x29265:	mov dx, [bp + 6]	; 3: 139 86 6

remove$3:	; Interrupt 33
x29268:	int 33	; 2: 205 33

remove$4:	; Carry 7
x29270:	jc remove$7	; 2: 114 14

remove$5:	; SetReturnValue 0
x29272:	mov bx, 0	; 3: 187 0 0

remove$6:	; Return 0
x29275:	mov ax, [bp]	; 3: 139 70 0
x29278:	mov di, [bp + 4]	; 3: 139 126 4
x29281:	mov bp, [bp + 2]	; 3: 139 110 2
x29284:	jmp ax	; 2: 255 224

remove$7:	; Assign errno 18
x29286:	mov word [errno], 18	; 6: 199 6 230 10 18 0

remove$8:	; SetReturnValue -1
x29292:	mov bx, -1	; 3: 187 255 255

remove$9:	; Return -1
x29295:	mov ax, [bp]	; 3: 139 70 0
x29298:	mov di, [bp + 4]	; 3: 139 126 4
x29301:	mov bp, [bp + 2]	; 3: 139 110 2
x29304:	jmp ax	; 2: 255 224

remove$10:	; FunctionEnd remove

rename:	; AssignRegister ah 86
x29306:	mov ah, 86	; 2: 180 86

rename$1:	; AssignRegister cl 0
x29308:	mov cl, 0	; 2: 177 0

rename$2:	; AssignRegister dx oldName
x29310:	mov dx, [bp + 6]	; 3: 139 86 6

rename$3:	; AssignRegister di newName
x29313:	mov di, [bp + 8]	; 3: 139 126 8

rename$4:	; Interrupt 33
x29316:	int 33	; 2: 205 33

rename$5:	; Carry 8
x29318:	jc rename$8	; 2: 114 14

rename$6:	; SetReturnValue 0
x29320:	mov bx, 0	; 3: 187 0 0

rename$7:	; Return 0
x29323:	mov ax, [bp]	; 3: 139 70 0
x29326:	mov di, [bp + 4]	; 3: 139 126 4
x29329:	mov bp, [bp + 2]	; 3: 139 110 2
x29332:	jmp ax	; 2: 255 224

rename$8:	; Assign errno 19
x29334:	mov word [errno], 19	; 6: 199 6 230 10 19 0

rename$9:	; SetReturnValue -1
x29340:	mov bx, -1	; 3: 187 255 255

rename$10:	; Return -1
x29343:	mov ax, [bp]	; 3: 139 70 0
x29346:	mov di, [bp + 4]	; 3: 139 126 4
x29349:	mov bp, [bp + 2]	; 3: 139 110 2
x29352:	jmp ax	; 2: 255 224

rename$11:	; FunctionEnd rename

fwrite:	; Deref £temporary923 -> stream stream 2
x29354:	mov si, [bp + 12]	; 3: 139 118 12

fwrite$1:	; AssignRegister bx £temporary923 -> stream
x29357:	mov bx, [si + 2]	; 3: 139 92 2

fwrite$2:	; SignedMultiply £temporary925 size nobj
x29360:	mov ax, [bp + 8]	; 3: 139 70 8
x29363:	xor dx, dx	; 2: 49 210
x29365:	imul word [bp + 10]	; 3: 247 110 10

fwrite$3:	; AssignRegister cx £temporary925
x29368:	mov cx, ax	; 2: 137 193

fwrite$4:	; AssignRegister ah 64
x29370:	mov ah, 64	; 2: 180 64

fwrite$5:	; AssignRegister dx ptr
x29372:	mov dx, [bp + 6]	; 3: 139 86 6

fwrite$6:	; Interrupt 33
x29375:	int 33	; 2: 205 33

fwrite$7:	; NotCarry 13
x29377:	jnc fwrite$13	; 2: 115 29

fwrite$8:	; Deref £temporary929 -> stream stream 21
x29379:	mov si, [bp + 12]	; 3: 139 118 12

fwrite$9:	; Assign errno 13
x29382:	mov word [errno], 13	; 6: 199 6 230 10 13 0

fwrite$10:	; Assign £temporary929 -> stream errno
x29388:	mov ax, [errno]	; 3: 161 230 10
x29391:	mov [si + 21], ax	; 3: 137 68 21

fwrite$11:	; SetReturnValue 0
x29394:	mov bx, 0	; 3: 187 0 0

fwrite$12:	; Return 0
x29397:	mov ax, [bp]	; 3: 139 70 0
x29400:	mov di, [bp + 4]	; 3: 139 126 4
x29403:	mov bp, [bp + 2]	; 3: 139 110 2
x29406:	jmp ax	; 2: 255 224

fwrite$13:	; InspectRegister £temporary930 ax

fwrite$14:	; SetReturnValue £temporary930
x29408:	mov bx, ax	; 2: 137 195

fwrite$15:	; Return £temporary930
x29410:	mov ax, [bp]	; 3: 139 70 0
x29413:	mov di, [bp + 4]	; 3: 139 126 4
x29416:	mov bp, [bp + 2]	; 3: 139 110 2
x29419:	jmp ax	; 2: 255 224

fwrite$16:	; FunctionEnd fwrite

fread:	; Deref £temporary914 -> stream stream 2
x29421:	mov si, [bp + 12]	; 3: 139 118 12

fread$1:	; AssignRegister bx £temporary914 -> stream
x29424:	mov bx, [si + 2]	; 3: 139 92 2

fread$2:	; SignedMultiply £temporary916 size nobj
x29427:	mov ax, [bp + 8]	; 3: 139 70 8
x29430:	xor dx, dx	; 2: 49 210
x29432:	imul word [bp + 10]	; 3: 247 110 10

fread$3:	; AssignRegister cx £temporary916
x29435:	mov cx, ax	; 2: 137 193

fread$4:	; AssignRegister ah 63
x29437:	mov ah, 63	; 2: 180 63

fread$5:	; AssignRegister dx ptr
x29439:	mov dx, [bp + 6]	; 3: 139 86 6

fread$6:	; Interrupt 33
x29442:	int 33	; 2: 205 33

fread$7:	; NotCarry 13
x29444:	jnc fread$13	; 2: 115 29

fread$8:	; Deref £temporary920 -> stream stream 21
x29446:	mov si, [bp + 12]	; 3: 139 118 12

fread$9:	; Assign errno 14
x29449:	mov word [errno], 14	; 6: 199 6 230 10 14 0

fread$10:	; Assign £temporary920 -> stream errno
x29455:	mov ax, [errno]	; 3: 161 230 10
x29458:	mov [si + 21], ax	; 3: 137 68 21

fread$11:	; SetReturnValue 0
x29461:	mov bx, 0	; 3: 187 0 0

fread$12:	; Return 0
x29464:	mov ax, [bp]	; 3: 139 70 0
x29467:	mov di, [bp + 4]	; 3: 139 126 4
x29470:	mov bp, [bp + 2]	; 3: 139 110 2
x29473:	jmp ax	; 2: 255 224

fread$13:	; InspectRegister £temporary921 ax

fread$14:	; SetReturnValue £temporary921
x29475:	mov bx, ax	; 2: 137 195

fread$15:	; Return £temporary921
x29477:	mov ax, [bp]	; 3: 139 70 0
x29480:	mov di, [bp + 4]	; 3: 139 126 4
x29483:	mov bp, [bp + 2]	; 3: 139 110 2
x29486:	jmp ax	; 2: 255 224

fread$16:	; FunctionEnd fread

malloc:	; IntegralToIntegral £temporary25 memorySize
x29488:	mov ax, [bp + 6]	; 3: 139 70 6

malloc$1:	; BinaryAdd newBlockSize £temporary25 4
x29491:	add ax, 4	; 3: 131 192 4
x29494:	mov [bp + 8], ax	; 3: 137 70 8

malloc$2:	; Assign minGap 0
x29497:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

malloc$3:	; Assign lastAddress 65528
x29502:	mov word [bp + 12], 65528	; 5: 199 70 12 248 255

malloc$4:	; Assign minBlockPtr 0
x29507:	mov word [bp + 14], 0	; 5: 199 70 14 0 0

malloc$5:	; Assign minPrevBlockPtr 0
x29512:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

malloc$6:	; Assign prevBlockPtr 0
x29517:	mov word [bp + 18], 0	; 5: 199 70 18 0 0

malloc$7:	; Assign currBlockPtr g_firstBlockPtr
x29522:	mov ax, [g_firstBlockPtr]	; 3: 161 190 116
x29525:	mov [bp + 20], ax	; 3: 137 70 20

malloc$8:	; SignedGreaterThanEqual 20 memorySize 0
x29528:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x29532:	jge malloc$20	; 2: 125 59

malloc$9:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc$10:	; Parameter 22 stderr 6
x29534:	mov ax, [stderr]	; 3: 161 136 77
x29537:	mov [bp + 28], ax	; 3: 137 70 28

malloc$11:	; Parameter 22 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x29540:	mov word [bp + 30], @115$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 30 192 116

malloc$12:	; Parameter 22 string_memorySize203E3D200# 10
x29545:	mov word [bp + 32], @116$string_memorySize203E3D200#	; 5: 199 70 32 238 116

malloc$13:	; Parameter 22 string_C3A5CUsers5Cstefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec# 12
x29550:	mov word [bp + 34], @117$string_C3A5CUsers5Cstefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec#	; 5: 199 70 34 254 116

malloc$14:	; Parameter 22 41 14
x29555:	mov word [bp + 36], 41	; 5: 199 70 36 41 0

malloc$15:	; Call 22 fprintf 0
x29560:	mov word [bp + 22], malloc$16	; 5: 199 70 22 139 115
x29565:	mov [bp + 24], bp	; 3: 137 110 24
x29568:	add bp, 22	; 3: 131 197 22
x29571:	mov di, bp	; 2: 137 239
x29573:	add di, 6	; 3: 131 199 6
x29576:	jmp fprintf	; 3: 233 239 234

malloc$16:	; PostCall 22

malloc$17:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc$18:	; Call 22 abort 0
x29579:	mov word [bp + 22], malloc$19	; 5: 199 70 22 153 115
x29584:	mov [bp + 24], bp	; 3: 137 110 24
x29587:	add bp, 22	; 3: 131 197 22
x29590:	jmp abort	; 3: 233 28 235

malloc$19:	; PostCall 22

malloc$20:	; NotEqual 23 memorySize 0
x29593:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x29597:	jne malloc$23	; 2: 117 14

malloc$21:	; SetReturnValue 0
x29599:	mov bx, 0	; 3: 187 0 0

malloc$22:	; Return 0
x29602:	mov ax, [bp]	; 3: 139 70 0
x29605:	mov di, [bp + 4]	; 3: 139 126 4
x29608:	mov bp, [bp + 2]	; 3: 139 110 2
x29611:	jmp ax	; 2: 255 224

malloc$23:	; Equal 41 currBlockPtr 0
x29613:	cmp word [bp + 20], 0	; 4: 131 126 20 0
x29617:	je malloc$41	; 2: 116 88

malloc$24:	; IntegralToIntegral £temporary33 currBlockPtr
x29619:	mov ax, [bp + 20]	; 3: 139 70 20

malloc$25:	; Assign currAddress £temporary33
x29622:	mov [bp + 22], ax	; 3: 137 70 22

malloc$26:	; Deref £temporary34 -> currBlockPtr currBlockPtr 0
x29625:	mov si, [bp + 20]	; 3: 139 118 20

malloc$27:	; BinaryAdd £temporary35 currAddress £temporary34 -> currBlockPtr
x29628:	mov ax, [bp + 22]	; 3: 139 70 22
x29631:	add ax, [si]	; 2: 3 4

malloc$28:	; BinaryAdd £temporary36 £temporary35 4
x29633:	add ax, 4	; 3: 131 192 4

malloc$29:	; BinarySubtract currGap lastAddress £temporary36
x29636:	mov bx, [bp + 12]	; 3: 139 94 12
x29639:	sub bx, ax	; 2: 41 195
x29641:	mov [bp + 24], bx	; 3: 137 94 24

malloc$30:	; UnsignedGreaterThan 36 newBlockSize currGap
x29644:	mov ax, [bp + 24]	; 3: 139 70 24
x29647:	cmp [bp + 8], ax	; 3: 57 70 8
x29650:	ja malloc$36	; 2: 119 32

malloc$31:	; Equal 33 minGap 0
x29652:	cmp word [bp + 10], 0	; 4: 131 126 10 0
x29656:	je malloc$33	; 2: 116 8

malloc$32:	; UnsignedGreaterThanEqual 36 currGap minGap
x29658:	mov ax, [bp + 10]	; 3: 139 70 10
x29661:	cmp [bp + 24], ax	; 3: 57 70 24
x29664:	jae malloc$36	; 2: 115 18

malloc$33:	; Assign minGap currGap
x29666:	mov ax, [bp + 24]	; 3: 139 70 24
x29669:	mov [bp + 10], ax	; 3: 137 70 10

malloc$34:	; Assign minBlockPtr currBlockPtr
x29672:	mov ax, [bp + 20]	; 3: 139 70 20
x29675:	mov [bp + 14], ax	; 3: 137 70 14

malloc$35:	; Assign minPrevBlockPtr prevBlockPtr
x29678:	mov ax, [bp + 18]	; 3: 139 70 18
x29681:	mov [bp + 16], ax	; 3: 137 70 16

malloc$36:	; Assign lastAddress currAddress
x29684:	mov ax, [bp + 22]	; 3: 139 70 22
x29687:	mov [bp + 12], ax	; 3: 137 70 12

malloc$37:	; Assign prevBlockPtr currBlockPtr
x29690:	mov ax, [bp + 20]	; 3: 139 70 20
x29693:	mov [bp + 18], ax	; 3: 137 70 18

malloc$38:	; Deref £temporary43 -> currBlockPtr currBlockPtr 2
x29696:	mov si, [bp + 20]	; 3: 139 118 20

malloc$39:	; Assign currBlockPtr £temporary43 -> currBlockPtr
x29699:	mov ax, [si + 2]	; 3: 139 68 2
x29702:	mov [bp + 20], ax	; 3: 137 70 20

malloc$40:	; Goto 23
x29705:	jmp malloc$23	; 2: 235 162

malloc$41:	; Equal 61 minBlockPtr 0
x29707:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x29711:	je malloc$61	; 2: 116 77

malloc$42:	; IntegralToIntegral £temporary45 minBlockPtr
x29713:	mov ax, [bp + 14]	; 3: 139 70 14

malloc$43:	; Deref £temporary46 -> minBlockPtr minBlockPtr 0
x29716:	mov si, [bp + 14]	; 3: 139 118 14

malloc$44:	; BinaryAdd £temporary47 £temporary45 £temporary46 -> minBlockPtr
x29719:	add ax, [si]	; 2: 3 4

malloc$45:	; BinaryAdd newAddress £temporary47 4
x29721:	add ax, 4	; 3: 131 192 4
x29724:	mov [bp + 22], ax	; 3: 137 70 22

malloc$46:	; IntegralToIntegral £temporary49 newAddress
x29727:	mov ax, [bp + 22]	; 3: 139 70 22

malloc$47:	; Assign newBlockPtr £temporary49
x29730:	mov [bp + 24], ax	; 3: 137 70 24

malloc$48:	; Deref £temporary50 -> newBlockPtr newBlockPtr 0
x29733:	mov si, [bp + 24]	; 3: 139 118 24

malloc$49:	; Assign £temporary50 -> newBlockPtr memorySize
x29736:	mov ax, [bp + 6]	; 3: 139 70 6
x29739:	mov [si], ax	; 2: 137 4

malloc$50:	; Deref £temporary51 -> newBlockPtr newBlockPtr 2
x29741:	mov si, [bp + 24]	; 3: 139 118 24

malloc$51:	; Assign £temporary51 -> newBlockPtr minBlockPtr
x29744:	mov ax, [bp + 14]	; 3: 139 70 14
x29747:	mov [si + 2], ax	; 3: 137 68 2

malloc$52:	; Equal 56 minPrevBlockPtr 0
x29750:	cmp word [bp + 16], 0	; 4: 131 126 16 0
x29754:	je malloc$56	; 2: 116 11

malloc$53:	; Deref £temporary53 -> minPrevBlockPtr minPrevBlockPtr 2
x29756:	mov si, [bp + 16]	; 3: 139 118 16

malloc$54:	; Assign £temporary53 -> minPrevBlockPtr newBlockPtr
x29759:	mov ax, [bp + 24]	; 3: 139 70 24
x29762:	mov [si + 2], ax	; 3: 137 68 2

malloc$55:	; Goto 57
x29765:	jmp malloc$57	; 2: 235 6

malloc$56:	; Assign g_firstBlockPtr newBlockPtr
x29767:	mov ax, [bp + 24]	; 3: 139 70 24
x29770:	mov [g_firstBlockPtr], ax	; 3: 163 190 116

malloc$57:	; BinaryAdd £temporary54 newAddress 4
x29773:	mov bx, [bp + 22]	; 3: 139 94 22
x29776:	add bx, 4	; 3: 131 195 4

malloc$58:	; IntegralToIntegral £temporary55 £temporary54

malloc$59:	; SetReturnValue £temporary55

malloc$60:	; Return £temporary55
x29779:	mov ax, [bp]	; 3: 139 70 0
x29782:	mov di, [bp + 4]	; 3: 139 126 4
x29785:	mov bp, [bp + 2]	; 3: 139 110 2
x29788:	jmp ax	; 2: 255 224

malloc$61:	; BinarySubtract newAddress lastAddress newBlockSize
x29790:	mov ax, [bp + 12]	; 3: 139 70 12
x29793:	sub ax, [bp + 8]	; 3: 43 70 8
x29796:	mov [bp + 22], ax	; 3: 137 70 22

malloc$62:	; InspectRegister £temporary57 bp

malloc$63:	; Assign stackTop £temporary57
x29799:	mov [bp + 24], bp	; 3: 137 110 24

malloc$64:	; UnsignedGreaterThan 80 stackTop newAddress
x29802:	mov ax, [bp + 22]	; 3: 139 70 22
x29805:	cmp [bp + 24], ax	; 3: 57 70 24
x29808:	ja malloc$80	; 2: 119 62

malloc$65:	; IntegralToIntegral £temporary59 newAddress
x29810:	mov ax, [bp + 22]	; 3: 139 70 22

malloc$66:	; Assign newBlockPtr £temporary59
x29813:	mov [bp + 26], ax	; 3: 137 70 26

malloc$67:	; Deref £temporary60 -> newBlockPtr newBlockPtr 0
x29816:	mov si, [bp + 26]	; 3: 139 118 26

malloc$68:	; Assign £temporary60 -> newBlockPtr memorySize
x29819:	mov ax, [bp + 6]	; 3: 139 70 6
x29822:	mov [si], ax	; 2: 137 4

malloc$69:	; Deref £temporary61 -> newBlockPtr newBlockPtr 2
x29824:	mov si, [bp + 26]	; 3: 139 118 26

malloc$70:	; Assign £temporary61 -> newBlockPtr 0
x29827:	mov word [si + 2], 0	; 5: 199 68 2 0 0

malloc$71:	; Equal 75 prevBlockPtr 0
x29832:	cmp word [bp + 18], 0	; 4: 131 126 18 0
x29836:	je malloc$75	; 2: 116 11

malloc$72:	; Deref £temporary63 -> prevBlockPtr prevBlockPtr 2
x29838:	mov si, [bp + 18]	; 3: 139 118 18

malloc$73:	; Assign £temporary63 -> prevBlockPtr newBlockPtr
x29841:	mov ax, [bp + 26]	; 3: 139 70 26
x29844:	mov [si + 2], ax	; 3: 137 68 2

malloc$74:	; Goto 76
x29847:	jmp malloc$76	; 2: 235 6

malloc$75:	; Assign g_firstBlockPtr newBlockPtr
x29849:	mov ax, [bp + 26]	; 3: 139 70 26
x29852:	mov [g_firstBlockPtr], ax	; 3: 163 190 116

malloc$76:	; BinaryAdd £temporary64 newAddress 4
x29855:	mov bx, [bp + 22]	; 3: 139 94 22
x29858:	add bx, 4	; 3: 131 195 4

malloc$77:	; IntegralToIntegral £temporary65 £temporary64

malloc$78:	; SetReturnValue £temporary65

malloc$79:	; Return £temporary65
x29861:	mov ax, [bp]	; 3: 139 70 0
x29864:	mov di, [bp + 4]	; 3: 139 126 4
x29867:	mov bp, [bp + 2]	; 3: 139 110 2
x29870:	jmp ax	; 2: 255 224

malloc$80:	; SetReturnValue 0
x29872:	mov bx, 0	; 3: 187 0 0

malloc$81:	; Return 0
x29875:	mov ax, [bp]	; 3: 139 70 0
x29878:	mov di, [bp + 4]	; 3: 139 126 4
x29881:	mov bp, [bp + 2]	; 3: 139 110 2
x29884:	jmp ax	; 2: 255 224

malloc$82:	; FunctionEnd malloc

g_firstBlockPtr:
x29886:	dw 0	; 2: 0 0

@115$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x29888:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@116$string_memorySize203E3D200#:
x29934:	db "memorySize >= 0", 0	; 16: 109 101 109 111 114 121 83 105 122 101 32 62 61 32 48 0

@117$string_C3A5CUsers5Cstefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec#:
x29950:	db "C:\Users\stefa\Documents\vagrant\homestead\code\code\Malloc.c", 0	; 62: 67 58 92 85 115 101 114 115 92 115 116 101 102 97 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 77 97 108 108 111 99 46 99 0

free:	; IntegralToIntegral £temporary79 freeMemoryPtr
x30012:	mov ax, [bp + 6]	; 3: 139 70 6

free$1:	; BinarySubtract £temporary80 £temporary79 4
x30015:	sub ax, 4	; 3: 131 232 4

free$2:	; IntegralToIntegral £temporary81 £temporary80

free$3:	; Assign freeBlockPtr £temporary81
x30018:	mov [bp + 8], ax	; 3: 137 70 8

free$4:	; Assign prevBlockPtr 0
x30021:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

free$5:	; Assign currBlockPtr g_firstBlockPtr
x30026:	mov ax, [g_firstBlockPtr]	; 3: 161 190 116
x30029:	mov [bp + 12], ax	; 3: 137 70 12

free$6:	; NotEqual 8 freeMemoryPtr 0
x30032:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x30036:	jne free$8	; 2: 117 11

free$7:	; Return
x30038:	mov ax, [bp]	; 3: 139 70 0
x30041:	mov di, [bp + 4]	; 3: 139 126 4
x30044:	mov bp, [bp + 2]	; 3: 139 110 2
x30047:	jmp ax	; 2: 255 224

free$8:	; Equal 32 currBlockPtr 0
x30049:	cmp word [bp + 12], 0	; 4: 131 126 12 0
x30053:	je free$32	; 2: 116 107

free$9:	; NotEqual 28 currBlockPtr freeBlockPtr
x30055:	mov ax, [bp + 8]	; 3: 139 70 8
x30058:	cmp [bp + 12], ax	; 3: 57 70 12
x30061:	jne free$28	; 2: 117 82

free$10:	; NotEqual 15 prevBlockPtr 0
x30063:	cmp word [bp + 10], 0	; 4: 131 126 10 0
x30067:	jne free$15	; 2: 117 17

free$11:	; Deref £temporary86 -> currBlockPtr currBlockPtr 2
x30069:	mov si, [bp + 12]	; 3: 139 118 12

free$12:	; NotEqual 15 £temporary86 -> currBlockPtr 0
x30072:	cmp word [si + 2], 0	; 4: 131 124 2 0
x30076:	jne free$15	; 2: 117 8

free$13:	; Assign g_firstBlockPtr 0
x30078:	mov word [g_firstBlockPtr], 0	; 6: 199 6 190 116 0 0

free$14:	; Goto 27
x30084:	jmp free$27	; 2: 235 48

free$15:	; NotEqual 19 prevBlockPtr 0
x30086:	cmp word [bp + 10], 0	; 4: 131 126 10 0
x30090:	jne free$19	; 2: 117 11

free$16:	; Deref £temporary90 -> currBlockPtr currBlockPtr 2
x30092:	mov si, [bp + 12]	; 3: 139 118 12

free$17:	; Assign g_firstBlockPtr £temporary90 -> currBlockPtr
x30095:	mov ax, [si + 2]	; 3: 139 68 2
x30098:	mov [g_firstBlockPtr], ax	; 3: 163 190 116

free$18:	; Goto 27
x30101:	jmp free$27	; 2: 235 31

free$19:	; Deref £temporary91 -> currBlockPtr currBlockPtr 2
x30103:	mov si, [bp + 12]	; 3: 139 118 12

free$20:	; NotEqual 24 £temporary91 -> currBlockPtr 0
x30106:	cmp word [si + 2], 0	; 4: 131 124 2 0
x30110:	jne free$24	; 2: 117 10

free$21:	; Deref £temporary93 -> prevBlockPtr prevBlockPtr 2
x30112:	mov si, [bp + 10]	; 3: 139 118 10

free$22:	; Assign £temporary93 -> prevBlockPtr 0
x30115:	mov word [si + 2], 0	; 5: 199 68 2 0 0

free$23:	; Goto 27
x30120:	jmp free$27	; 2: 235 12

free$24:	; Deref £temporary94 -> prevBlockPtr prevBlockPtr 2
x30122:	mov si, [bp + 10]	; 3: 139 118 10

free$25:	; Deref £temporary95 -> currBlockPtr currBlockPtr 2
x30125:	mov di, [bp + 12]	; 3: 139 126 12

free$26:	; Assign £temporary94 -> prevBlockPtr £temporary95 -> currBlockPtr
x30128:	mov ax, [di + 2]	; 3: 139 69 2
x30131:	mov [si + 2], ax	; 3: 137 68 2

free$27:	; Return
x30134:	mov ax, [bp]	; 3: 139 70 0
x30137:	mov di, [bp + 4]	; 3: 139 126 4
x30140:	mov bp, [bp + 2]	; 3: 139 110 2
x30143:	jmp ax	; 2: 255 224

free$28:	; Assign prevBlockPtr currBlockPtr
x30145:	mov ax, [bp + 12]	; 3: 139 70 12
x30148:	mov [bp + 10], ax	; 3: 137 70 10

free$29:	; Deref £temporary96 -> currBlockPtr currBlockPtr 2
x30151:	mov si, [bp + 12]	; 3: 139 118 12

free$30:	; Assign currBlockPtr £temporary96 -> currBlockPtr
x30154:	mov ax, [si + 2]	; 3: 139 68 2
x30157:	mov [bp + 12], ax	; 3: 137 70 12

free$31:	; Goto 8
x30160:	jmp free$8	; 2: 235 143

free$32:	; Return 0
x30162:	mov ax, [bp]	; 3: 139 70 0
x30165:	mov di, [bp + 4]	; 3: 139 126 4
x30168:	mov bp, [bp + 2]	; 3: 139 110 2
x30171:	jmp ax	; 2: 255 224

free$33:	; FunctionEnd free

ftell:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

ftell$1:	; Parameter 8 stream 6
x30173:	mov ax, [bp + 6]	; 3: 139 70 6
x30176:	mov [bp + 14], ax	; 3: 137 70 14

ftell$2:	; Parameter 8 0 8
x30179:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

ftell$3:	; Parameter 8 1 10
x30184:	mov word [bp + 18], 1	; 5: 199 70 18 1 0

ftell$4:	; Call 8 fseek 0
x30189:	mov word [bp + 8], ftell$5	; 5: 199 70 8 251 117
x30194:	mov [bp + 10], bp	; 3: 137 110 10
x30197:	add bp, 8	; 3: 131 197 8
x30200:	jmp fseek	; 3: 233 218 231

ftell$5:	; PostCall 8

ftell$6:	; GetReturnValue £temporary945

ftell$7:	; SetReturnValue £temporary945

ftell$8:	; Return £temporary945
x30203:	mov ax, [bp]	; 3: 139 70 0
x30206:	mov di, [bp + 4]	; 3: 139 126 4
x30209:	mov bp, [bp + 2]	; 3: 139 110 2
x30212:	jmp ax	; 2: 255 224

ftell$9:	; FunctionEnd ftell

fgetc:	; Assign c 0
x30214:	mov byte [bp + 8], 0	; 4: 198 70 8 0

fgetc$1:	; CallHeader 9 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

fgetc$2:	; address £temporary841 c
x30218:	mov si, bp	; 2: 137 238
x30220:	add si, 8	; 3: 131 198 8

fgetc$3:	; Parameter 9 £temporary841 6
x30223:	mov [bp + 15], si	; 3: 137 118 15

fgetc$4:	; Parameter 9 1 8
x30226:	mov word [bp + 17], 1	; 5: 199 70 17 1 0

fgetc$5:	; Parameter 9 1 10
x30231:	mov word [bp + 19], 1	; 5: 199 70 19 1 0

fgetc$6:	; Parameter 9 stream 12
x30236:	mov ax, [bp + 6]	; 3: 139 70 6
x30239:	mov [bp + 21], ax	; 3: 137 70 21

fgetc$7:	; Call 9 fread 0
x30242:	mov word [bp + 9], fgetc$8	; 5: 199 70 9 48 118
x30247:	mov [bp + 11], bp	; 3: 137 110 11
x30250:	add bp, 9	; 3: 131 197 9
x30253:	jmp fread	; 3: 233 189 252

fgetc$8:	; PostCall 9

fgetc$9:	; GetReturnValue £temporary842

fgetc$10:	; SignedLessThanEqual 14 £temporary842 0
x30256:	cmp bx, 0	; 3: 131 251 0
x30259:	jle fgetc$14	; 2: 126 27

fgetc$11:	; IntegralToIntegral £temporary844 c
x30261:	mov bl, [bp + 8]	; 3: 138 94 8
x30264:	and bx, 255	; 4: 129 227 255 0
x30268:	cmp bl, 0	; 3: 128 251 0
x30271:	jge fgetc$12	; 2: 125 4
x30273:	neg bl	; 2: 246 219
x30275:	neg bx	; 2: 247 219

fgetc$12:	; SetReturnValue £temporary844

fgetc$13:	; Return £temporary844
x30277:	mov ax, [bp]	; 3: 139 70 0
x30280:	mov di, [bp + 4]	; 3: 139 126 4
x30283:	mov bp, [bp + 2]	; 3: 139 110 2
x30286:	jmp ax	; 2: 255 224

fgetc$14:	; SetReturnValue -1
x30288:	mov bx, -1	; 3: 187 255 255

fgetc$15:	; Return -1
x30291:	mov ax, [bp]	; 3: 139 70 0
x30294:	mov di, [bp + 4]	; 3: 139 126 4
x30297:	mov bp, [bp + 2]	; 3: 139 110 2
x30300:	jmp ax	; 2: 255 224

fgetc$16:	; FunctionEnd fgetc

putchar:	; Assign g_outStatus 0
x30302:	mov word [g_outStatus], 0	; 6: 199 6 219 15 0 0

putchar$1:	; IntegralToIntegral £temporary1597 stdout
x30308:	mov ax, [stdout]	; 3: 161 100 13

putchar$2:	; Assign g_outDevice £temporary1597
x30311:	mov [g_outDevice], ax	; 3: 163 221 15

putchar$3:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

putchar$4:	; IntegralToIntegral £temporary1598 i
x30314:	mov ax, [bp + 6]	; 3: 139 70 6
x30317:	cmp ax, 0	; 3: 131 248 0
x30320:	jge putchar$5	; 2: 125 4
x30322:	neg ax	; 2: 247 216
x30324:	neg al	; 2: 246 216

putchar$5:	; Parameter 8 £temporary1598 6
x30326:	mov [bp + 14], al	; 3: 136 70 14

putchar$6:	; Call 8 printChar 0
x30329:	mov word [bp + 8], putchar$7	; 5: 199 70 8 135 118
x30334:	mov [bp + 10], bp	; 3: 137 110 10
x30337:	add bp, 8	; 3: 131 197 8
x30340:	jmp printChar	; 3: 233 199 165

putchar$7:	; PostCall 8

putchar$8:	; SetReturnValue 1
x30343:	mov bx, 1	; 3: 187 1 0

putchar$9:	; Return 1
x30346:	mov ax, [bp]	; 3: 139 70 0
x30349:	mov di, [bp + 4]	; 3: 139 126 4
x30352:	mov bp, [bp + 2]	; 3: 139 110 2
x30355:	jmp ax	; 2: 255 224

putchar$10:	; FunctionEnd putchar

time_test:	; Assign weekdays[0] string_Sun#
x30357:	mov word [bp + 6], @13554$string_Sun#	; 5: 199 70 6 117 121

time_test$1:	; Assign weekdays[1] string_Mon#
x30362:	mov word [bp + 8], @13555$string_Mon#	; 5: 199 70 8 121 121

time_test$2:	; Assign weekdays[2] string_Tue#
x30367:	mov word [bp + 10], @13556$string_Tue#	; 5: 199 70 10 125 121

time_test$3:	; Assign weekdays[3] string_Wed#
x30372:	mov word [bp + 12], @13557$string_Wed#	; 5: 199 70 12 129 121

time_test$4:	; Assign weekdays[4] string_Thu#
x30377:	mov word [bp + 14], @13558$string_Thu#	; 5: 199 70 14 133 121

time_test$5:	; Assign weekdays[5] string_Fri#
x30382:	mov word [bp + 16], @13559$string_Fri#	; 5: 199 70 16 137 121

time_test$6:	; Assign weekdays[6] string_Sat#
x30387:	mov word [bp + 18], @13560$string_Sat#	; 5: 199 70 18 141 121

time_test$7:	; CallHeader 20 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$8:	; Parameter 20 0 6
x30392:	mov word [bp + 26], 0	; 5: 199 70 26 0 0

time_test$9:	; Call 20 time 0
x30397:	mov word [bp + 20], time_test$10	; 5: 199 70 20 203 118
x30402:	mov [bp + 22], bp	; 3: 137 110 22
x30405:	add bp, 20	; 3: 131 197 20
x30408:	jmp time	; 3: 233 219 4

time_test$10:	; PostCall 20

time_test$11:	; GetReturnValue £temporary6238

time_test$12:	; Assign now1 £temporary6238
x30411:	mov [bp + 20], ebx	; 4: 102 137 94 20

time_test$13:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$14:	; address £temporary6239 now1
x30415:	mov si, bp	; 2: 137 238
x30417:	add si, 20	; 3: 131 198 20

time_test$15:	; Parameter 24 £temporary6239 6
x30420:	mov [bp + 30], si	; 3: 137 118 30

time_test$16:	; Call 24 gmtime 0
x30423:	mov word [bp + 24], time_test$17	; 5: 199 70 24 229 118
x30428:	mov [bp + 26], bp	; 3: 137 110 26
x30431:	add bp, 24	; 3: 131 197 24
x30434:	jmp gmtime	; 3: 233 161 7

time_test$17:	; PostCall 24

time_test$18:	; GetReturnValue £temporary6240

time_test$19:	; Deref £temporary6241 -> £temporary6240 £temporary6240 0

time_test$20:	; Assign s £temporary6241 -> £temporary6240
x30437:	mov si, bp	; 2: 137 238
x30439:	add si, 24	; 3: 131 198 24
x30442:	mov al, 18	; 2: 176 18

time_test$20$Loop:
x30444:	mov ah, [bx]	; 2: 138 39
x30446:	mov [si], ah	; 2: 136 36
x30448:	inc bx	; 1: 67
x30449:	inc si	; 1: 70
x30450:	dec al	; 2: 254 200
x30452:	cmp al, 0	; 2: 60 0
x30454:	jne time_test$20$Loop	; 2: 117 244

time_test$21:	; CallHeader 42 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$22:	; address £temporary6242 now1
x30456:	mov si, bp	; 2: 137 238
x30458:	add si, 20	; 3: 131 198 20

time_test$23:	; Parameter 42 £temporary6242 6
x30461:	mov [bp + 48], si	; 3: 137 118 48

time_test$24:	; Call 42 localtime 0
x30464:	mov word [bp + 42], time_test$25	; 5: 199 70 42 14 119
x30469:	mov [bp + 44], bp	; 3: 137 110 44
x30472:	add bp, 42	; 3: 131 197 42
x30475:	jmp localtime	; 3: 233 24 10

time_test$25:	; PostCall 42

time_test$26:	; GetReturnValue £temporary6243

time_test$27:	; Deref £temporary6244 -> £temporary6243 £temporary6243 0

time_test$28:	; Assign t £temporary6244 -> £temporary6243
x30478:	mov si, bp	; 2: 137 238
x30480:	add si, 42	; 3: 131 198 42
x30483:	mov al, 18	; 2: 176 18

time_test$28$Loop:
x30485:	mov ah, [bx]	; 2: 138 39
x30487:	mov [si], ah	; 2: 136 36
x30489:	inc bx	; 1: 67
x30490:	inc si	; 1: 70
x30491:	dec al	; 2: 254 200
x30493:	cmp al, 0	; 2: 60 0
x30495:	jne time_test$28$Loop	; 2: 117 244

time_test$29:	; CallHeader 60 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$30:	; address £temporary6245 s
x30497:	mov si, bp	; 2: 137 238
x30499:	add si, 24	; 3: 131 198 24

time_test$31:	; Parameter 60 £temporary6245 6
x30502:	mov [bp + 66], si	; 3: 137 118 66

time_test$32:	; Call 60 mktime 0
x30505:	mov word [bp + 60], time_test$33	; 5: 199 70 60 55 119
x30510:	mov [bp + 62], bp	; 3: 137 110 62
x30513:	add bp, 60	; 3: 131 197 60
x30516:	jmp mktime	; 3: 233 78 6

time_test$33:	; PostCall 60

time_test$34:	; GetReturnValue £temporary6246

time_test$35:	; Assign now2 £temporary6246
x30519:	mov [bp + 60], ebx	; 4: 102 137 94 60

time_test$36:	; CallHeader 64 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$37:	; Parameter 64 string_now2013A2025lu0A# 6
x30523:	mov word [bp + 70], @13586$string_now2013A2025lu0A#	; 5: 199 70 70 145 121

time_test$38:	; Parameter 64 now1 8
x30528:	mov eax, [bp + 20]	; 4: 102 139 70 20
x30532:	mov [bp + 72], eax	; 4: 102 137 70 72

time_test$39:	; Call 64 printf 0
x30536:	mov word [bp + 64], time_test$40	; 5: 199 70 64 91 119
x30541:	mov [bp + 66], bp	; 3: 137 110 66
x30544:	add bp, 64	; 3: 131 197 64
x30547:	mov di, bp	; 2: 137 239
x30549:	add di, 4	; 3: 131 199 4
x30552:	jmp printf	; 3: 233 169 149

time_test$40:	; PostCall 64

time_test$41:	; CallHeader 64 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$42:	; Parameter 64 string_now2023A2025lu0A# 6
x30555:	mov word [bp + 70], @13588$string_now2023A2025lu0A#	; 5: 199 70 70 157 121

time_test$43:	; Parameter 64 now2 8
x30560:	mov eax, [bp + 60]	; 4: 102 139 70 60
x30564:	mov [bp + 72], eax	; 4: 102 137 70 72

time_test$44:	; Call 64 printf 0
x30568:	mov word [bp + 64], time_test$45	; 5: 199 70 64 123 119
x30573:	mov [bp + 66], bp	; 3: 137 110 66
x30576:	add bp, 64	; 3: 131 197 64
x30579:	mov di, bp	; 2: 137 239
x30581:	add di, 4	; 3: 131 199 4
x30584:	jmp printf	; 3: 233 137 149

time_test$45:	; PostCall 64

time_test$46:	; CallHeader 64 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$47:	; Parameter 64 string_202020gm20time3A2025s202502i2D2502i2D2502i202502i3A2502i3A2502i2C20year20day2025i2C20week20day2025i2C20daylight20saving20time2025i0A# 6
x30587:	mov word [bp + 70], @13590$string_202020gm20time3A2025s202502i2D2502i2D2502i202502i3A2502i3A2502i2C20year20day2025i2C20week20day2025i2C20daylight20saving20time2025i0A#	; 5: 199 70 70 169 121

time_test$48:	; SignedMultiply £temporary6251 s$tm_wday 2
x30592:	mov ax, [bp + 36]	; 3: 139 70 36
x30595:	xor dx, dx	; 2: 49 210
x30597:	imul word [@13593$int2$2#]	; 4: 247 46 10 122

time_test$49:	; BinaryAdd £temporary6252 weekdays £temporary6251
x30601:	mov si, bp	; 2: 137 238
x30603:	add si, 6	; 3: 131 198 6
x30606:	add si, ax	; 2: 1 198

time_test$50:	; Deref £temporary6250 -> £temporary6252 £temporary6252 0

time_test$51:	; Parameter 64 £temporary6250 -> £temporary6252 8
x30608:	mov ax, [si]	; 2: 139 4
x30610:	mov [bp + 72], ax	; 3: 137 70 72

time_test$52:	; BinaryAdd £temporary6254 s$tm_year 1900
x30613:	mov ax, [bp + 34]	; 3: 139 70 34
x30616:	add ax, 1900	; 3: 5 108 7

time_test$53:	; Parameter 64 £temporary6254 10
x30619:	mov [bp + 74], ax	; 3: 137 70 74

time_test$54:	; BinaryAdd £temporary6256 s$tm_mon 1
x30622:	mov ax, [bp + 32]	; 3: 139 70 32
x30625:	inc ax	; 1: 64

time_test$55:	; Parameter 64 £temporary6256 12
x30626:	mov [bp + 76], ax	; 3: 137 70 76

time_test$56:	; Parameter 64 s$tm_mday 14
x30629:	mov ax, [bp + 30]	; 3: 139 70 30
x30632:	mov [bp + 78], ax	; 3: 137 70 78

time_test$57:	; Parameter 64 s$tm_hour 16
x30635:	mov ax, [bp + 28]	; 3: 139 70 28
x30638:	mov [bp + 80], ax	; 3: 137 70 80

time_test$58:	; Parameter 64 s$tm_min 18
x30641:	mov ax, [bp + 26]	; 3: 139 70 26
x30644:	mov [bp + 82], ax	; 3: 137 70 82

time_test$59:	; Parameter 64 s$tm_sec 20
x30647:	mov ax, [bp + 24]	; 3: 139 70 24
x30650:	mov [bp + 84], ax	; 3: 137 70 84

time_test$60:	; Parameter 64 s$tm_yday 22
x30653:	mov ax, [bp + 38]	; 3: 139 70 38
x30656:	mov [bp + 86], ax	; 3: 137 70 86

time_test$61:	; Parameter 64 s$tm_wday 24
x30659:	mov ax, [bp + 36]	; 3: 139 70 36
x30662:	mov [bp + 88], ax	; 3: 137 70 88

time_test$62:	; Parameter 64 s$tm_isdst 26
x30665:	mov ax, [bp + 40]	; 3: 139 70 40
x30668:	mov [bp + 90], ax	; 3: 137 70 90

time_test$63:	; Call 64 printf 0
x30671:	mov word [bp + 64], time_test$64	; 5: 199 70 64 226 119
x30676:	mov [bp + 66], bp	; 3: 137 110 66
x30679:	add bp, 64	; 3: 131 197 64
x30682:	mov di, bp	; 2: 137 239
x30684:	add di, 20	; 3: 131 199 20
x30687:	jmp printf	; 3: 233 34 149

time_test$64:	; PostCall 64

time_test$65:	; CallHeader 64 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$66:	; Parameter 64 string_local20time3A2025s202502i2D2502i2D2502i202502i3A2502i3A2502i2C20year20day2025i2C20week20day2025i2C20daylight20saving20time2025i0A# 6
x30690:	mov word [bp + 70], @13612$string_local20time3A2025s202502i2D2502i2D2502i202502i3A2502i3A2502i2C20year20day2025i2C20week20day2025i2C20daylight20saving20time2025i0A#	; 5: 199 70 70 12 122

time_test$67:	; SignedMultiply £temporary6267 t$tm_wday 2
x30695:	mov ax, [bp + 54]	; 3: 139 70 54
x30698:	xor dx, dx	; 2: 49 210
x30700:	imul word [@13615$int2$2#]	; 4: 247 46 109 122

time_test$68:	; BinaryAdd £temporary6268 weekdays £temporary6267
x30704:	mov si, bp	; 2: 137 238
x30706:	add si, 6	; 3: 131 198 6
x30709:	add si, ax	; 2: 1 198

time_test$69:	; Deref £temporary6266 -> £temporary6268 £temporary6268 0

time_test$70:	; Parameter 64 £temporary6266 -> £temporary6268 8
x30711:	mov ax, [si]	; 2: 139 4
x30713:	mov [bp + 72], ax	; 3: 137 70 72

time_test$71:	; BinaryAdd £temporary6270 t$tm_year 1900
x30716:	mov ax, [bp + 52]	; 3: 139 70 52
x30719:	add ax, 1900	; 3: 5 108 7

time_test$72:	; Parameter 64 £temporary6270 10
x30722:	mov [bp + 74], ax	; 3: 137 70 74

time_test$73:	; BinaryAdd £temporary6272 t$tm_mon 1
x30725:	mov ax, [bp + 50]	; 3: 139 70 50
x30728:	inc ax	; 1: 64

time_test$74:	; Parameter 64 £temporary6272 12
x30729:	mov [bp + 76], ax	; 3: 137 70 76

time_test$75:	; Parameter 64 t$tm_mday 14
x30732:	mov ax, [bp + 48]	; 3: 139 70 48
x30735:	mov [bp + 78], ax	; 3: 137 70 78

time_test$76:	; Parameter 64 t$tm_hour 16
x30738:	mov ax, [bp + 46]	; 3: 139 70 46
x30741:	mov [bp + 80], ax	; 3: 137 70 80

time_test$77:	; Parameter 64 t$tm_min 18
x30744:	mov ax, [bp + 44]	; 3: 139 70 44
x30747:	mov [bp + 82], ax	; 3: 137 70 82

time_test$78:	; Parameter 64 t$tm_sec 20
x30750:	mov ax, [bp + 42]	; 3: 139 70 42
x30753:	mov [bp + 84], ax	; 3: 137 70 84

time_test$79:	; Parameter 64 t$tm_yday 22
x30756:	mov ax, [bp + 56]	; 3: 139 70 56
x30759:	mov [bp + 86], ax	; 3: 137 70 86

time_test$80:	; Parameter 64 t$tm_wday 24
x30762:	mov ax, [bp + 54]	; 3: 139 70 54
x30765:	mov [bp + 88], ax	; 3: 137 70 88

time_test$81:	; Parameter 64 t$tm_isdst 26
x30768:	mov ax, [bp + 58]	; 3: 139 70 58
x30771:	mov [bp + 90], ax	; 3: 137 70 90

time_test$82:	; Call 64 printf 0
x30774:	mov word [bp + 64], time_test$83	; 5: 199 70 64 73 120
x30779:	mov [bp + 66], bp	; 3: 137 110 66
x30782:	add bp, 64	; 3: 131 197 64
x30785:	mov di, bp	; 2: 137 239
x30787:	add di, 20	; 3: 131 199 20
x30790:	jmp printf	; 3: 233 187 148

time_test$83:	; PostCall 64

time_test$84:	; CallHeader 666 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$85:	; Parameter 666 buffer1 6
x30793:	mov [bp + 672], bp	; 4: 137 174 160 2
x30797:	add word [bp + 672], 64	; 5: 131 134 160 2 64

time_test$86:	; CallHeader 666 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$87:	; address £temporary6281 s
x30802:	mov si, bp	; 2: 137 238
x30804:	add si, 24	; 3: 131 198 24

time_test$88:	; Parameter 666 £temporary6281 14
x30807:	mov [bp + 680], si	; 4: 137 182 168 2

time_test$89:	; Call 666 asctime 8
x30811:	mov word [bp + 674], time_test$90	; 6: 199 134 162 2 108 120
x30817:	mov [bp + 676], bp	; 4: 137 174 164 2
x30821:	add bp, 674	; 4: 129 197 162 2
x30825:	jmp asctime	; 3: 233 79 9

time_test$90:	; PostCall 666

time_test$91:	; GetReturnValue £temporary6282

time_test$92:	; Parameter 666 £temporary6282 8
x30828:	mov [bp + 674], bx	; 4: 137 158 162 2

time_test$93:	; Call 666 strcpy 0
x30832:	mov word [bp + 666], time_test$94	; 6: 199 134 154 2 129 120
x30838:	mov [bp + 668], bp	; 4: 137 174 156 2
x30842:	add bp, 666	; 4: 129 197 154 2
x30846:	jmp strcpy	; 3: 233 189 229

time_test$94:	; PostCall 666

time_test$95:	; CallHeader 666 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$96:	; Parameter 666 buffer2 6
x30849:	mov [bp + 672], bp	; 4: 137 174 160 2
x30853:	add word [bp + 672], 164	; 6: 129 134 160 2 164 0

time_test$97:	; CallHeader 666 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$98:	; address £temporary6284 now1
x30859:	mov si, bp	; 2: 137 238
x30861:	add si, 20	; 3: 131 198 20

time_test$99:	; Parameter 666 £temporary6284 14
x30864:	mov [bp + 680], si	; 4: 137 182 168 2

time_test$100:	; Call 666 ctime 8
x30868:	mov word [bp + 674], time_test$101	; 6: 199 134 162 2 165 120
x30874:	mov [bp + 676], bp	; 4: 137 174 164 2
x30878:	add bp, 674	; 4: 129 197 162 2
x30882:	jmp ctime	; 3: 233 220 11

time_test$101:	; PostCall 666

time_test$102:	; GetReturnValue £temporary6285

time_test$103:	; Parameter 666 £temporary6285 8
x30885:	mov [bp + 674], bx	; 4: 137 158 162 2

time_test$104:	; Call 666 strcpy 0
x30889:	mov word [bp + 666], time_test$105	; 6: 199 134 154 2 186 120
x30895:	mov [bp + 668], bp	; 4: 137 174 156 2
x30899:	add bp, 666	; 4: 129 197 154 2
x30903:	jmp strcpy	; 3: 233 132 229

time_test$105:	; PostCall 666

time_test$106:	; CallHeader 666 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$107:	; Parameter 666 string_asctime203C25s3E2C20ctime203C25s3E0A# 6
x30906:	mov word [bp + 672], @13650$string_asctime203C25s3E2C20ctime203C25s3E0A#	; 6: 199 134 160 2 111 122

time_test$108:	; Parameter 666 buffer1 8
x30912:	mov [bp + 674], bp	; 4: 137 174 162 2
x30916:	add word [bp + 674], 64	; 5: 131 134 162 2 64

time_test$109:	; Parameter 666 buffer2 10
x30921:	mov [bp + 676], bp	; 4: 137 174 164 2
x30925:	add word [bp + 676], 164	; 6: 129 134 164 2 164 0

time_test$110:	; Call 666 printf 0
x30931:	mov word [bp + 666], time_test$111	; 6: 199 134 154 2 233 120
x30937:	mov [bp + 668], bp	; 4: 137 174 156 2
x30941:	add bp, 666	; 4: 129 197 154 2
x30945:	mov di, bp	; 2: 137 239
x30947:	add di, 4	; 3: 131 199 4
x30950:	jmp printf	; 3: 233 27 148

time_test$111:	; PostCall 666

time_test$112:	; CallHeader 666 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$113:	; Parameter 666 buffer 6
x30953:	mov [bp + 672], bp	; 4: 137 174 160 2
x30957:	add word [bp + 672], 264	; 6: 129 134 160 2 8 1

time_test$114:	; Parameter 666 400 8
x30963:	mov word [bp + 674], 400	; 6: 199 134 162 2 144 1

time_test$115:	; Parameter 666 string_short20day2025a2C20long20day2025A2C20short20month2025b2C20long20month2025B2C20date2Dtime2025c2C20mday2025d2C20hour2025H2C20gm20hour2025I2C20yday2025j2C20month2025m2C20min2025M2C20am2Fpm2025p2C20sec2025S2C20week20number20sun2025U2C20week20day2025w2C20week20number20mon2025W2C20date2025x2C20time2025X2C20short20year2025y2C20long20year2025Y2C20summer2Fwinter2025Z# 10
x30969:	mov word [bp + 676], @13654$string_short20day2025a2C20long20day2025A2C20short20month2025b2C20long20month2025B2C20date2Dtime2025c2C20mday2025d2C20hour2025H2C20gm20hour2025I2C20yday2025j2C20month2025m2C20min2025M2C20am2Fpm2025p2C20sec2025S2C20week20number20sun2025U2C20week20day2025w2C20week20number20mon2025W2C20date2025x2C20time2025X2C20short20year2025y2C20long20year2025Y2C20summer2Fwinter2025Z#	; 6: 199 134 164 2 137 122

time_test$116:	; address £temporary6288 t
x30975:	mov si, bp	; 2: 137 238
x30977:	add si, 42	; 3: 131 198 42

time_test$117:	; Parameter 666 £temporary6288 12
x30980:	mov [bp + 678], si	; 4: 137 182 166 2

time_test$118:	; Call 666 strftime 0
x30984:	mov word [bp + 666], time_test$119	; 6: 199 134 154 2 25 121
x30990:	mov [bp + 668], bp	; 4: 137 174 156 2
x30994:	add bp, 666	; 4: 129 197 154 2
x30998:	jmp strftime	; 3: 233 152 11

time_test$119:	; PostCall 666

time_test$120:	; GetReturnValue £temporary6289

time_test$121:	; Assign i £temporary6289
x31001:	mov [bp + 664], bx	; 4: 137 158 152 2

time_test$122:	; CallHeader 666 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$123:	; Parameter 666 string_strftime2025i2025i203C25s3E0A# 6
x31005:	mov word [bp + 672], @13658$string_strftime2025i2025i203C25s3E0A#	; 6: 199 134 160 2 145 123

time_test$124:	; Parameter 666 i 8
x31011:	mov ax, [bp + 664]	; 4: 139 134 152 2
x31015:	mov [bp + 674], ax	; 4: 137 134 162 2

time_test$125:	; CallHeader 666 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time_test$126:	; Parameter 666 buffer 16
x31019:	mov [bp + 682], bp	; 4: 137 174 170 2
x31023:	add word [bp + 682], 264	; 6: 129 134 170 2 8 1

time_test$127:	; Call 666 strlen 10
x31029:	mov word [bp + 676], time_test$128	; 6: 199 134 164 2 70 121
x31035:	mov [bp + 678], bp	; 4: 137 174 166 2
x31039:	add bp, 676	; 4: 129 197 164 2
x31043:	jmp strlen	; 3: 233 181 19

time_test$128:	; PostCall 666

time_test$129:	; GetReturnValue £temporary6290

time_test$130:	; Parameter 666 £temporary6290 10
x31046:	mov [bp + 676], bx	; 4: 137 158 164 2

time_test$131:	; Parameter 666 buffer 12
x31050:	mov [bp + 678], bp	; 4: 137 174 166 2
x31054:	add word [bp + 678], 264	; 6: 129 134 166 2 8 1

time_test$132:	; Call 666 printf 0
x31060:	mov word [bp + 666], time_test$133	; 6: 199 134 154 2 106 121
x31066:	mov [bp + 668], bp	; 4: 137 174 156 2
x31070:	add bp, 666	; 4: 129 197 154 2
x31074:	mov di, bp	; 2: 137 239
x31076:	add di, 6	; 3: 131 199 6
x31079:	jmp printf	; 3: 233 154 147

time_test$133:	; PostCall 666

time_test$134:	; Return 0
x31082:	mov ax, [bp]	; 3: 139 70 0
x31085:	mov di, [bp + 4]	; 3: 139 126 4
x31088:	mov bp, [bp + 2]	; 3: 139 110 2
x31091:	jmp ax	; 2: 255 224

time_test$135:	; FunctionEnd time_test

@13554$string_Sun#:
x31093:	db "Sun", 0	; 4: 83 117 110 0

@13555$string_Mon#:
x31097:	db "Mon", 0	; 4: 77 111 110 0

@13556$string_Tue#:
x31101:	db "Tue", 0	; 4: 84 117 101 0

@13557$string_Wed#:
x31105:	db "Wed", 0	; 4: 87 101 100 0

@13558$string_Thu#:
x31109:	db "Thu", 0	; 4: 84 104 117 0

@13559$string_Fri#:
x31113:	db "Fri", 0	; 4: 70 114 105 0

@13560$string_Sat#:
x31117:	db "Sat", 0	; 4: 83 97 116 0

@13586$string_now2013A2025lu0A#:
x31121:	db "now 1: %lu", 10, 0	; 12: 110 111 119 32 49 58 32 37 108 117 10 0

@13588$string_now2023A2025lu0A#:
x31133:	db "now 2: %lu", 10, 0	; 12: 110 111 119 32 50 58 32 37 108 117 10 0

@13590$string_202020gm20time3A2025s202502i2D2502i2D2502i202502i3A2502i3A2502i2C20year20day2025i2C20week20day2025i2C20daylight20saving20time2025i0A#:
x31145:	db "   gm time: %s %02i-%02i-%02i %02i:%02i:%02i, year day %i, week day %i, daylight saving time %i", 10, 0	; 97: 32 32 32 103 109 32 116 105 109 101 58 32 37 115 32 37 48 50 105 45 37 48 50 105 45 37 48 50 105 32 37 48 50 105 58 37 48 50 105 58 37 48 50 105 44 32 121 101 97 114 32 100 97 121 32 37 105 44 32 119 101 101 107 32 100 97 121 32 37 105 44 32 100 97 121 108 105 103 104 116 32 115 97 118 105 110 103 32 116 105 109 101 32 37 105 10 0

@13593$int2$2#:
x31242:	dw 2	; 2: 2 0

@13612$string_local20time3A2025s202502i2D2502i2D2502i202502i3A2502i3A2502i2C20year20day2025i2C20week20day2025i2C20daylight20saving20time2025i0A#:
x31244:	db "local time: %s %02i-%02i-%02i %02i:%02i:%02i, year day %i, week day %i, daylight saving time %i", 10, 0	; 97: 108 111 99 97 108 32 116 105 109 101 58 32 37 115 32 37 48 50 105 45 37 48 50 105 45 37 48 50 105 32 37 48 50 105 58 37 48 50 105 58 37 48 50 105 44 32 121 101 97 114 32 100 97 121 32 37 105 44 32 119 101 101 107 32 100 97 121 32 37 105 44 32 100 97 121 108 105 103 104 116 32 115 97 118 105 110 103 32 116 105 109 101 32 37 105 10 0

@13615$int2$2#:
x31341:	dw 2	; 2: 2 0

@13650$string_asctime203C25s3E2C20ctime203C25s3E0A#:
x31343:	db "asctime <%s>, ctime <%s>", 10, 0	; 26: 97 115 99 116 105 109 101 32 60 37 115 62 44 32 99 116 105 109 101 32 60 37 115 62 10 0

@13654$string_short20day2025a2C20long20day2025A2C20short20month2025b2C20long20month2025B2C20date2Dtime2025c2C20mday2025d2C20hour2025H2C20gm20hour2025I2C20yday2025j2C20month2025m2C20min2025M2C20am2Fpm2025p2C20sec2025S2C20week20number20sun2025U2C20week20day2025w2C20week20number20mon2025W2C20date2025x2C20time2025X2C20short20year2025y2C20long20year2025Y2C20summer2Fwinter2025Z#:
x31369:	db "short day %a, long day %A, short month %b, long month %B, date-time %c, mday %d, hour %H, gm hour %I, yday %j, month %m, min %M, am/pm %p, sec %S, week number sun %U, week day %w, week number mon %W, date %x, time %X, short year %y, long year %Y, summer/winter %Z", 0	; 264: 115 104 111 114 116 32 100 97 121 32 37 97 44 32 108 111 110 103 32 100 97 121 32 37 65 44 32 115 104 111 114 116 32 109 111 110 116 104 32 37 98 44 32 108 111 110 103 32 109 111 110 116 104 32 37 66 44 32 100 97 116 101 45 116 105 109 101 32 37 99 44 32 109 100 97 121 32 37 100 44 32 104 111 117 114 32 37 72 44 32 103 109 32 104 111 117 114 32 37 73 44 32 121 100 97 121 32 37 106 44 32 109 111 110 116 104 32 37 109 44 32 109 105 110 32 37 77 44 32 97 109 47 112 109 32 37 112 44 32 115 101 99 32 37 83 44 32 119 101 101 107 32 110 117 109 98 101 114 32 115 117 110 32 37 85 44 32 119 101 101 107 32 100 97 121 32 37 119 44 32 119 101 101 107 32 110 117 109 98 101 114 32 109 111 110 32 37 87 44 32 100 97 116 101 32 37 120 44 32 116 105 109 101 32 37 88 44 32 115 104 111 114 116 32 121 101 97 114 32 37 121 44 32 108 111 110 103 32 121 101 97 114 32 37 89 44 32 115 117 109 109 101 114 47 119 105 110 116 101 114 32 37 90 0

@13658$string_strftime2025i2025i203C25s3E0A#:
x31633:	db "strftime %i %i <%s>", 10, 0	; 21: 115 116 114 102 116 105 109 101 32 37 105 32 37 105 32 60 37 115 62 10 0

time:	; AssignRegister ah 42
x31654:	mov ah, 42	; 2: 180 42

time$1:	; Interrupt 33
x31656:	int 33	; 2: 205 33

time$2:	; InspectRegister £temporary3248 cx

time$3:	; BinarySubtract year £temporary3248 1900
x31658:	sub cx, 1900	; 4: 129 233 108 7
x31662:	mov [bp + 12], cx	; 3: 137 78 12

time$4:	; InspectRegister £temporary3250 dh

time$5:	; BinarySubtract month £temporary3250 1
x31665:	dec dh	; 2: 254 206
x31667:	mov [bp + 14], dh	; 3: 136 118 14

time$6:	; InspectRegister £temporary3252 dl

time$7:	; Assign monthDay £temporary3252
x31670:	mov [bp + 15], dl	; 3: 136 86 15

time$8:	; AssignRegister ah 44
x31673:	mov ah, 44	; 2: 180 44

time$9:	; Interrupt 33
x31675:	int 33	; 2: 205 33

time$10:	; InspectRegister £temporary3254 ch

time$11:	; Assign hour £temporary3254
x31677:	mov [bp + 16], ch	; 3: 136 110 16

time$12:	; InspectRegister £temporary3255 cl

time$13:	; Assign min £temporary3255
x31680:	mov [bp + 17], cl	; 3: 136 78 17

time$14:	; InspectRegister £temporary3256 dh

time$15:	; Assign sec £temporary3256
x31683:	mov [bp + 18], dh	; 3: 136 118 18

time$16:	; CallHeader 19 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time$17:	; Call 19 localeconv 0
x31686:	mov word [bp + 19], time$18	; 5: 199 70 19 212 123
x31691:	mov [bp + 21], bp	; 3: 137 110 21
x31694:	add bp, 19	; 3: 131 197 19
x31697:	jmp localeconv	; 3: 233 161 162

time$18:	; PostCall 19

time$19:	; GetReturnValue £temporary3257

time$20:	; Assign localeConvPtr £temporary3257
x31700:	mov [bp + 19], bx	; 3: 137 94 19

time$21:	; Equal 27 localeConvPtr 0
x31703:	cmp word [bp + 19], 0	; 4: 131 126 19 0
x31707:	je time$27	; 2: 116 32

time$22:	; IntegralToIntegral £temporary3260 hour
x31709:	mov al, [bp + 16]	; 3: 138 70 16
x31712:	and ax, 255	; 3: 37 255 0
x31715:	cmp al, 0	; 2: 60 0
x31717:	jge time$23	; 2: 125 4
x31719:	neg al	; 2: 246 216
x31721:	neg ax	; 2: 247 216

time$23:	; Deref £temporary3259 -> localeConvPtr localeConvPtr 2
x31723:	mov si, [bp + 19]	; 3: 139 118 19

time$24:	; BinarySubtract £temporary3261 £temporary3260 £temporary3259 -> localeConvPtr
x31726:	sub ax, [si + 2]	; 3: 43 68 2

time$25:	; IntegralToIntegral £temporary3262 £temporary3261
x31729:	cmp ax, 0	; 3: 131 248 0
x31732:	jge time$26	; 2: 125 4
x31734:	neg ax	; 2: 247 216
x31736:	neg al	; 2: 246 216

time$26:	; Assign hour £temporary3262
x31738:	mov [bp + 16], al	; 3: 136 70 16

time$27:	; Assign daysOfMonths[0] 31
x31741:	mov word [bp + 19], 31	; 5: 199 70 19 31 0

time$28:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time$29:	; Parameter 21 year 6
x31746:	mov ax, [bp + 12]	; 3: 139 70 12
x31749:	mov [bp + 27], ax	; 3: 137 70 27

time$30:	; Call 21 isLeapYear 0
x31752:	mov word [bp + 21], time$31	; 5: 199 70 21 22 124
x31757:	mov [bp + 23], bp	; 3: 137 110 23
x31760:	add bp, 21	; 3: 131 197 21
x31763:	jmp @7454$isLeapYear	; 3: 233 44 1

time$31:	; PostCall 21

time$32:	; GetReturnValue £temporary3263

time$33:	; Equal 36 £temporary3263 0
x31766:	cmp bx, 0	; 3: 131 251 0
x31769:	je time$36	; 2: 116 5

time$34:	; Assign £temporary3268 29
x31771:	mov ax, 29	; 3: 184 29 0

time$35:	; Goto 37
x31774:	jmp time$37	; 2: 235 3

time$36:	; Assign £temporary3268 28
x31776:	mov ax, 28	; 3: 184 28 0

time$37:	; Assign daysOfMonths[1] £temporary3268
x31779:	mov [bp + 21], ax	; 3: 137 70 21

time$38:	; Assign daysOfMonths[2] 31
x31782:	mov word [bp + 23], 31	; 5: 199 70 23 31 0

time$39:	; Assign daysOfMonths[3] 30
x31787:	mov word [bp + 25], 30	; 5: 199 70 25 30 0

time$40:	; Assign daysOfMonths[4] 31
x31792:	mov word [bp + 27], 31	; 5: 199 70 27 31 0

time$41:	; Assign daysOfMonths[5] 30
x31797:	mov word [bp + 29], 30	; 5: 199 70 29 30 0

time$42:	; Assign daysOfMonths[6] 31
x31802:	mov word [bp + 31], 31	; 5: 199 70 31 31 0

time$43:	; Assign daysOfMonths[7] 31
x31807:	mov word [bp + 33], 31	; 5: 199 70 33 31 0

time$44:	; Assign daysOfMonths[8] 30
x31812:	mov word [bp + 35], 30	; 5: 199 70 35 30 0

time$45:	; Assign daysOfMonths[9] 31
x31817:	mov word [bp + 37], 31	; 5: 199 70 37 31 0

time$46:	; Assign daysOfMonths[10] 30
x31822:	mov word [bp + 39], 30	; 5: 199 70 39 30 0

time$47:	; Assign daysOfMonths[11] 31
x31827:	mov word [bp + 41], 31	; 5: 199 70 41 31 0

time$48:	; IntegralToIntegral £temporary3281 monthDay
x31832:	mov al, [bp + 15]	; 3: 138 70 15
x31835:	and ax, 255	; 3: 37 255 0
x31838:	cmp al, 0	; 2: 60 0
x31840:	jge time$49	; 2: 125 4
x31842:	neg al	; 2: 246 216
x31844:	neg ax	; 2: 247 216

time$49:	; BinarySubtract yearDay £temporary3281 1
x31846:	dec ax	; 1: 72
x31847:	mov [bp + 43], ax	; 3: 137 70 43

time$50:	; Assign monthIndex 0
x31850:	mov word [bp + 45], 0	; 5: 199 70 45 0 0

time$51:	; IntegralToIntegral £temporary3283 month
x31855:	mov al, [bp + 14]	; 3: 138 70 14
x31858:	and ax, 255	; 3: 37 255 0
x31861:	cmp al, 0	; 2: 60 0
x31863:	jge time$52	; 2: 125 4
x31865:	neg al	; 2: 246 216
x31867:	neg ax	; 2: 247 216

time$52:	; SignedGreaterThanEqual 59 monthIndex £temporary3283
x31869:	cmp [bp + 45], ax	; 3: 57 70 45
x31872:	jge time$59	; 2: 125 26

time$53:	; SignedMultiply £temporary3287 monthIndex 2
x31874:	mov ax, [bp + 45]	; 3: 139 70 45
x31877:	xor dx, dx	; 2: 49 210
x31879:	imul word [@7578$int2$2#]	; 4: 247 46 64 125

time$54:	; BinaryAdd £temporary3288 daysOfMonths £temporary3287
x31883:	mov si, bp	; 2: 137 238
x31885:	add si, 19	; 3: 131 198 19
x31888:	add si, ax	; 2: 1 198

time$55:	; Deref £temporary3286 -> £temporary3288 £temporary3288 0

time$56:	; BinaryAdd yearDay yearDay £temporary3286 -> £temporary3288
x31890:	mov ax, [si]	; 2: 139 4
x31892:	add [bp + 43], ax	; 3: 1 70 43

time$57:	; Increment monthIndex
x31895:	inc word [bp + 45]	; 3: 255 70 45

time$58:	; Goto 51
x31898:	jmp time$51	; 2: 235 211

time$59:	; IntegralToIntegral £temporary3291 sec
x31900:	mov al, [bp + 18]	; 3: 138 70 18
x31903:	and ax, 255	; 3: 37 255 0
x31906:	cmp al, 0	; 2: 60 0
x31908:	jge time$60	; 2: 125 4
x31910:	neg al	; 2: 246 216
x31912:	neg ax	; 2: 247 216

time$60:	; Assign s$tm_sec £temporary3291
x31914:	mov [bp + 47], ax	; 3: 137 70 47

time$61:	; IntegralToIntegral £temporary3293 min
x31917:	mov al, [bp + 17]	; 3: 138 70 17
x31920:	and ax, 255	; 3: 37 255 0
x31923:	cmp al, 0	; 2: 60 0
x31925:	jge time$62	; 2: 125 4
x31927:	neg al	; 2: 246 216
x31929:	neg ax	; 2: 247 216

time$62:	; Assign s$tm_min £temporary3293
x31931:	mov [bp + 49], ax	; 3: 137 70 49

time$63:	; IntegralToIntegral £temporary3295 hour
x31934:	mov al, [bp + 16]	; 3: 138 70 16
x31937:	and ax, 255	; 3: 37 255 0
x31940:	cmp al, 0	; 2: 60 0
x31942:	jge time$64	; 2: 125 4
x31944:	neg al	; 2: 246 216
x31946:	neg ax	; 2: 247 216

time$64:	; Assign s$tm_hour £temporary3295
x31948:	mov [bp + 51], ax	; 3: 137 70 51

time$65:	; IntegralToIntegral £temporary3297 monthDay
x31951:	mov al, [bp + 15]	; 3: 138 70 15
x31954:	and ax, 255	; 3: 37 255 0
x31957:	cmp al, 0	; 2: 60 0
x31959:	jge time$66	; 2: 125 4
x31961:	neg al	; 2: 246 216
x31963:	neg ax	; 2: 247 216

time$66:	; Assign s$tm_mday £temporary3297
x31965:	mov [bp + 53], ax	; 3: 137 70 53

time$67:	; IntegralToIntegral £temporary3299 month
x31968:	mov al, [bp + 14]	; 3: 138 70 14
x31971:	and ax, 255	; 3: 37 255 0
x31974:	cmp al, 0	; 2: 60 0
x31976:	jge time$68	; 2: 125 4
x31978:	neg al	; 2: 246 216
x31980:	neg ax	; 2: 247 216

time$68:	; Assign s$tm_mon £temporary3299
x31982:	mov [bp + 55], ax	; 3: 137 70 55

time$69:	; Assign s$tm_year year
x31985:	mov ax, [bp + 12]	; 3: 139 70 12
x31988:	mov [bp + 57], ax	; 3: 137 70 57

time$70:	; Assign s$tm_wday 0
x31991:	mov word [bp + 59], 0	; 5: 199 70 59 0 0

time$71:	; Assign s$tm_yday yearDay
x31996:	mov ax, [bp + 43]	; 3: 139 70 43
x31999:	mov [bp + 61], ax	; 3: 137 70 61

time$72:	; Assign s$tm_isdst 0
x32002:	mov word [bp + 63], 0	; 5: 199 70 63 0 0

time$73:	; CallHeader 65 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

time$74:	; address £temporary3304 s
x32007:	mov si, bp	; 2: 137 238
x32009:	add si, 47	; 3: 131 198 47

time$75:	; Parameter 65 £temporary3304 6
x32012:	mov [bp + 71], si	; 3: 137 118 71

time$76:	; Call 65 mktime 0
x32015:	mov word [bp + 65], time$77	; 5: 199 70 65 29 125
x32020:	mov [bp + 67], bp	; 3: 137 110 67
x32023:	add bp, 65	; 3: 131 197 65
x32026:	nop	; 1: 144
x32027:	jmp mktime	; 2: 235 104

time$77:	; PostCall 65

time$78:	; GetReturnValue £temporary3305

time$79:	; Assign time £temporary3305
x32029:	mov [bp + 8], ebx	; 4: 102 137 94 8

time$80:	; Equal 83 timePtr 0
x32033:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x32037:	je time$83	; 2: 116 10

time$81:	; Deref £temporary3307 -> timePtr timePtr 0
x32039:	mov si, [bp + 6]	; 3: 139 118 6

time$82:	; Assign £temporary3307 -> timePtr time
x32042:	mov eax, [bp + 8]	; 4: 102 139 70 8
x32046:	mov [si], eax	; 3: 102 137 4

time$83:	; SetReturnValue time
x32049:	mov ebx, [bp + 8]	; 4: 102 139 94 8

time$84:	; Return time
x32053:	mov ax, [bp]	; 3: 139 70 0
x32056:	mov di, [bp + 4]	; 3: 139 126 4
x32059:	mov bp, [bp + 2]	; 3: 139 110 2
x32062:	jmp ax	; 2: 255 224

time$85:	; FunctionEnd time

@7578$int2$2#:
x32064:	dw 2	; 2: 2 0

@7454$isLeapYear:	; SignedModulo £temporary3238 year 4
x32066:	mov ax, [bp + 6]	; 3: 139 70 6
x32069:	xor dx, dx	; 2: 49 210
x32071:	idiv word [@7456$int2$4#]	; 4: 247 62 127 125

@7454$isLeapYear$1:	; NotEqual 4 £temporary3238 0
x32075:	cmp dx, 0	; 3: 131 250 0
x32078:	jne @7454$isLeapYear$4	; 2: 117 14

@7454$isLeapYear$2:	; SignedModulo £temporary3240 year 100
x32080:	mov ax, [bp + 6]	; 3: 139 70 6
x32083:	xor dx, dx	; 2: 49 210
x32085:	idiv word [@7462$int2$100#]	; 4: 247 62 129 125

@7454$isLeapYear$3:	; NotEqual 6 £temporary3240 0
x32089:	cmp dx, 0	; 3: 131 250 0
x32092:	jne @7454$isLeapYear$6	; 2: 117 14

@7454$isLeapYear$4:	; SignedModulo £temporary3243 year 400
x32094:	mov ax, [bp + 6]	; 3: 139 70 6
x32097:	xor dx, dx	; 2: 49 210
x32099:	idiv word [@7469$int2$400#]	; 4: 247 62 131 125

@7454$isLeapYear$5:	; NotEqual 8 £temporary3243 0
x32103:	cmp dx, 0	; 3: 131 250 0
x32106:	jne @7454$isLeapYear$8	; 2: 117 5

@7454$isLeapYear$6:	; Assign £temporary3246 1
x32108:	mov bx, 1	; 3: 187 1 0

@7454$isLeapYear$7:	; Goto 9
x32111:	jmp @7454$isLeapYear$9	; 2: 235 3

@7454$isLeapYear$8:	; Assign £temporary3246 0
x32113:	mov bx, 0	; 3: 187 0 0

@7454$isLeapYear$9:	; SetReturnValue £temporary3246

@7454$isLeapYear$10:	; Return £temporary3246
x32116:	mov ax, [bp]	; 3: 139 70 0
x32119:	mov di, [bp + 4]	; 3: 139 126 4
x32122:	mov bp, [bp + 2]	; 3: 139 110 2
x32125:	jmp ax	; 2: 255 224

@7454$isLeapYear$11:	; FunctionEnd isLeapYear

@7456$int2$4#:
x32127:	dw 4	; 2: 4 0

@7462$int2$100#:
x32129:	dw 100	; 2: 100 0

@7469$int2$400#:
x32131:	dw 400	; 2: 144 1

mktime:	; Equal 28 tp 0
x32133:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x32137:	je mktime$28	; 4: 15 132 216 0

mktime$1:	; Deref £temporary3312 -> tp tp 10
x32141:	mov si, [bp + 6]	; 3: 139 118 6

mktime$2:	; BinarySubtract £temporary3313 £temporary3312 -> tp 69
x32144:	mov ax, [si + 10]	; 3: 139 68 10
x32147:	sub ax, 69	; 3: 131 232 69

mktime$3:	; SignedDivide £temporary3314 £temporary3313 4
x32150:	xor dx, dx	; 2: 49 210
x32152:	idiv word [@7621$int2$4#]	; 4: 247 62 118 126

mktime$4:	; IntegralToIntegral £temporary3315 £temporary3314
x32156:	and eax, 65535	; 6: 102 37 255 255 0 0
x32162:	cmp ax, 0	; 3: 131 248 0
x32165:	jge mktime$5	; 2: 125 5
x32167:	neg ax	; 2: 247 216
x32169:	neg eax	; 3: 102 247 216

mktime$5:	; Assign leapDays £temporary3315
x32172:	mov [bp + 8], eax	; 4: 102 137 70 8

mktime$6:	; Deref £temporary3316 -> tp tp 10
x32176:	mov si, [bp + 6]	; 3: 139 118 6

mktime$7:	; BinarySubtract £temporary3317 £temporary3316 -> tp 70
x32179:	mov ax, [si + 10]	; 3: 139 68 10
x32182:	sub ax, 70	; 3: 131 232 70

mktime$8:	; SignedMultiply £temporary3318 £temporary3317 365
x32185:	xor dx, dx	; 2: 49 210
x32187:	imul word [@7630$int2$365#]	; 4: 247 46 120 126

mktime$9:	; IntegralToIntegral £temporary3319 £temporary3318
x32191:	and eax, 65535	; 6: 102 37 255 255 0 0
x32197:	cmp ax, 0	; 3: 131 248 0
x32200:	jge mktime$10	; 2: 125 5
x32202:	neg ax	; 2: 247 216
x32204:	neg eax	; 3: 102 247 216

mktime$10:	; BinaryAdd £temporary3320 £temporary3319 leapDays
x32207:	add eax, [bp + 8]	; 4: 102 3 70 8

mktime$11:	; Deref £temporary3321 -> tp tp 14
x32211:	mov si, [bp + 6]	; 3: 139 118 6

mktime$12:	; IntegralToIntegral £temporary3322 £temporary3321 -> tp
x32214:	mov bx, [si + 14]	; 3: 139 92 14
x32217:	and ebx, 65535	; 7: 102 129 227 255 255 0 0
x32224:	cmp bx, 0	; 3: 131 251 0
x32227:	jge mktime$13	; 2: 125 5
x32229:	neg bx	; 2: 247 219
x32231:	neg ebx	; 3: 102 247 219

mktime$13:	; BinaryAdd totalDays £temporary3320 £temporary3322
x32234:	add eax, ebx	; 3: 102 1 216
x32237:	mov [bp + 12], eax	; 4: 102 137 70 12

mktime$14:	; SignedMultiply £temporary3324 totalDays 86400
x32241:	mov eax, [bp + 12]	; 4: 102 139 70 12
x32245:	xor edx, edx	; 3: 102 49 210
x32248:	imul dword [@7639$int4$86400#]	; 5: 102 247 46 122 126
x32253:	mov ebx, eax	; 3: 102 137 195

mktime$15:	; Deref £temporary3325 -> tp tp 4
x32256:	mov si, [bp + 6]	; 3: 139 118 6

mktime$16:	; IntegralToIntegral £temporary3326 £temporary3325 -> tp
x32259:	mov ax, [si + 4]	; 3: 139 68 4
x32262:	and eax, 65535	; 6: 102 37 255 255 0 0
x32268:	cmp ax, 0	; 3: 131 248 0
x32271:	jge mktime$17	; 2: 125 5
x32273:	neg ax	; 2: 247 216
x32275:	neg eax	; 3: 102 247 216

mktime$17:	; SignedMultiply £temporary3327 £temporary3326 3600
x32278:	xor edx, edx	; 3: 102 49 210
x32281:	imul dword [@7643$int4$3600#]	; 5: 102 247 46 126 126

mktime$18:	; BinaryAdd £temporary3328 £temporary3324 £temporary3327
x32286:	add ebx, eax	; 3: 102 1 195

mktime$19:	; Deref £temporary3329 -> tp tp 2
x32289:	mov si, [bp + 6]	; 3: 139 118 6

mktime$20:	; IntegralToIntegral £temporary3330 £temporary3329 -> tp
x32292:	mov ax, [si + 2]	; 3: 139 68 2
x32295:	and eax, 65535	; 6: 102 37 255 255 0 0
x32301:	cmp ax, 0	; 3: 131 248 0
x32304:	jge mktime$21	; 2: 125 5
x32306:	neg ax	; 2: 247 216
x32308:	neg eax	; 3: 102 247 216

mktime$21:	; SignedMultiply £temporary3331 £temporary3330 60
x32311:	xor edx, edx	; 3: 102 49 210
x32314:	imul dword [@7649$int4$60#]	; 5: 102 247 46 130 126

mktime$22:	; BinaryAdd £temporary3332 £temporary3328 £temporary3331
x32319:	add ebx, eax	; 3: 102 1 195

mktime$23:	; Deref £temporary3333 -> tp tp 0
x32322:	mov si, [bp + 6]	; 3: 139 118 6

mktime$24:	; IntegralToIntegral £temporary3334 £temporary3333 -> tp
x32325:	mov ax, [si]	; 2: 139 4
x32327:	and eax, 65535	; 6: 102 37 255 255 0 0
x32333:	cmp ax, 0	; 3: 131 248 0
x32336:	jge mktime$25	; 2: 125 5
x32338:	neg ax	; 2: 247 216
x32340:	neg eax	; 3: 102 247 216

mktime$25:	; BinaryAdd £temporary3335 £temporary3332 £temporary3334
x32343:	add ebx, eax	; 3: 102 1 195

mktime$26:	; SetReturnValue £temporary3335

mktime$27:	; Return £temporary3335
x32346:	mov ax, [bp]	; 3: 139 70 0
x32349:	mov di, [bp + 4]	; 3: 139 126 4
x32352:	mov bp, [bp + 2]	; 3: 139 110 2
x32355:	jmp ax	; 2: 255 224

mktime$28:	; SetReturnValue 0
x32357:	mov ebx, 0	; 6: 102 187 0 0 0 0

mktime$29:	; Return 0
x32363:	mov ax, [bp]	; 3: 139 70 0
x32366:	mov di, [bp + 4]	; 3: 139 126 4
x32369:	mov bp, [bp + 2]	; 3: 139 110 2
x32372:	jmp ax	; 2: 255 224

mktime$30:	; FunctionEnd mktime

@7621$int2$4#:
x32374:	dw 4	; 2: 4 0

@7630$int2$365#:
x32376:	dw 365	; 2: 109 1

@7639$int4$86400#:
x32378:	dd 86400	; 4: 128 81 1 0

@7643$int4$3600#:
x32382:	dd 3600	; 4: 16 14 0 0

@7649$int4$60#:
x32386:	dd 60	; 4: 60 0 0 0

gmtime:	; Equal 89 timePtr 0
x32390:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x32394:	je gmtime$89	; 4: 15 132 78 2

gmtime$1:	; Deref £temporary3337 -> timePtr timePtr 0
x32398:	mov si, [bp + 6]	; 3: 139 118 6

gmtime$2:	; Assign time £temporary3337 -> timePtr
x32401:	mov eax, [si]	; 3: 102 139 4
x32404:	mov [bp + 8], eax	; 4: 102 137 70 8

gmtime$3:	; SignedModulo secondsOfDay time 86400
x32408:	mov eax, [bp + 8]	; 4: 102 139 70 8
x32412:	xor edx, edx	; 3: 102 49 210
x32415:	idiv dword [@7667$int4$86400#]	; 5: 102 247 62 234 128
x32420:	mov [bp + 12], edx	; 4: 102 137 86 12

gmtime$4:	; SignedModulo secondsOfHour secondsOfDay 3600
x32424:	mov eax, [bp + 12]	; 4: 102 139 70 12
x32428:	xor edx, edx	; 3: 102 49 210
x32431:	idiv dword [@7671$int4$3600#]	; 5: 102 247 62 238 128
x32436:	mov [bp + 16], edx	; 4: 102 137 86 16

gmtime$5:	; SignedDivide £temporary3341 secondsOfDay 3600
x32440:	mov eax, [bp + 12]	; 4: 102 139 70 12
x32444:	xor edx, edx	; 3: 102 49 210
x32447:	idiv dword [@7676$int4$3600#]	; 5: 102 247 62 242 128

gmtime$6:	; IntegralToIntegral £temporary3342 £temporary3341
x32452:	cmp eax, 0	; 4: 102 131 248 0
x32456:	jge gmtime$7	; 2: 125 5
x32458:	neg eax	; 3: 102 247 216
x32461:	neg ax	; 2: 247 216

gmtime$7:	; Assign g_timeStruct$tm_hour £temporary3342
x32463:	mov [@7659$g_timeStruct + 4], ax	; 3: 163 250 128

gmtime$8:	; SignedDivide £temporary3344 secondsOfHour 60
x32466:	mov eax, [bp + 16]	; 4: 102 139 70 16
x32470:	xor edx, edx	; 3: 102 49 210
x32473:	idiv dword [@7681$int4$60#]	; 5: 102 247 62 8 129

gmtime$9:	; IntegralToIntegral £temporary3345 £temporary3344
x32478:	cmp eax, 0	; 4: 102 131 248 0
x32482:	jge gmtime$10	; 2: 125 5
x32484:	neg eax	; 3: 102 247 216
x32487:	neg ax	; 2: 247 216

gmtime$10:	; Assign g_timeStruct$tm_min £temporary3345
x32489:	mov [@7659$g_timeStruct + 2], ax	; 3: 163 248 128

gmtime$11:	; SignedModulo £temporary3347 secondsOfHour 60
x32492:	mov eax, [bp + 16]	; 4: 102 139 70 16
x32496:	xor edx, edx	; 3: 102 49 210
x32499:	idiv dword [@7686$int4$60#]	; 5: 102 247 62 12 129

gmtime$12:	; IntegralToIntegral £temporary3348 £temporary3347
x32504:	cmp edx, 0	; 4: 102 131 250 0
x32508:	jge gmtime$13	; 2: 125 5
x32510:	neg edx	; 3: 102 247 218
x32513:	neg dx	; 2: 247 218

gmtime$13:	; Assign g_timeStruct$tm_sec £temporary3348
x32515:	mov [@7659$g_timeStruct], dx	; 4: 137 22 246 128

gmtime$14:	; SignedDivide totalDays time 86400
x32519:	mov eax, [bp + 8]	; 4: 102 139 70 8
x32523:	xor edx, edx	; 3: 102 49 210
x32526:	idiv dword [@7690$int4$86400#]	; 5: 102 247 62 16 129
x32531:	mov [bp + 20], eax	; 4: 102 137 70 20

gmtime$15:	; SignedGreaterThanEqual 20 totalDays 3
x32535:	cmp dword [bp + 20], 3	; 5: 102 131 126 20 3
x32540:	jge gmtime$20	; 2: 125 24

gmtime$16:	; BinaryAdd £temporary3352 totalDays 4
x32542:	mov eax, [bp + 20]	; 4: 102 139 70 20
x32546:	add eax, 4	; 4: 102 131 192 4

gmtime$17:	; IntegralToIntegral £temporary3353 £temporary3352
x32550:	cmp eax, 0	; 4: 102 131 248 0
x32554:	jge gmtime$18	; 2: 125 5
x32556:	neg eax	; 3: 102 247 216
x32559:	neg ax	; 2: 247 216

gmtime$18:	; Assign g_timeStruct$tm_wday £temporary3353
x32561:	mov [@7659$g_timeStruct + 12], ax	; 3: 163 2 129

gmtime$19:	; Goto 24
x32564:	jmp gmtime$24	; 2: 235 31

gmtime$20:	; BinarySubtract £temporary3355 totalDays 3
x32566:	mov eax, [bp + 20]	; 4: 102 139 70 20
x32570:	sub eax, 3	; 4: 102 131 232 3

gmtime$21:	; SignedModulo £temporary3356 £temporary3355 7
x32574:	xor edx, edx	; 3: 102 49 210
x32577:	idiv dword [@7706$int4$7#]	; 5: 102 247 62 20 129

gmtime$22:	; IntegralToIntegral £temporary3357 £temporary3356
x32582:	cmp edx, 0	; 4: 102 131 250 0
x32586:	jge gmtime$23	; 2: 125 5
x32588:	neg edx	; 3: 102 247 218
x32591:	neg dx	; 2: 247 218

gmtime$23:	; Assign g_timeStruct$tm_wday £temporary3357
x32593:	mov [@7659$g_timeStruct + 12], dx	; 4: 137 22 2 129

gmtime$24:	; SignedDivide £temporary3358 totalDays 365
x32597:	mov eax, [bp + 20]	; 4: 102 139 70 20
x32601:	xor edx, edx	; 3: 102 49 210
x32604:	idiv dword [@7711$int4$365#]	; 5: 102 247 62 24 129

gmtime$25:	; BinaryAdd £temporary3359 £temporary3358 1970
x32609:	add eax, 1970	; 6: 102 5 178 7 0 0

gmtime$26:	; IntegralToIntegral £temporary3360 £temporary3359
x32615:	cmp eax, 0	; 4: 102 131 248 0
x32619:	jge gmtime$27	; 2: 125 5
x32621:	neg eax	; 3: 102 247 216
x32624:	neg ax	; 2: 247 216

gmtime$27:	; Assign year £temporary3360
x32626:	mov [bp + 24], ax	; 3: 137 70 24

gmtime$28:	; BinarySubtract £temporary3361 year 1969
x32629:	mov ax, [bp + 24]	; 3: 139 70 24
x32632:	sub ax, 1969	; 3: 45 177 7

gmtime$29:	; SignedDivide leapDays £temporary3361 4
x32635:	xor dx, dx	; 2: 49 210
x32637:	idiv word [@7721$int2$4#]	; 4: 247 62 28 129
x32641:	mov [bp + 26], ax	; 3: 137 70 26

gmtime$30:	; SignedModulo totalDays totalDays 365
x32644:	mov eax, [bp + 20]	; 4: 102 139 70 20
x32648:	xor edx, edx	; 3: 102 49 210
x32651:	idiv dword [@7725$int4$365#]	; 5: 102 247 62 30 129
x32656:	mov [bp + 20], edx	; 4: 102 137 86 20

gmtime$31:	; IntegralToIntegral £temporary3364 leapDays
x32660:	mov ax, [bp + 26]	; 3: 139 70 26
x32663:	and eax, 65535	; 6: 102 37 255 255 0 0
x32669:	cmp ax, 0	; 3: 131 248 0
x32672:	jge gmtime$32	; 2: 125 5
x32674:	neg ax	; 2: 247 216
x32676:	neg eax	; 3: 102 247 216

gmtime$32:	; BinarySubtract totalDays totalDays £temporary3364
x32679:	sub [bp + 20], eax	; 4: 102 41 70 20

gmtime$33:	; SignedGreaterThanEqual 44 totalDays 0
x32683:	cmp dword [bp + 20], 0	; 5: 102 131 126 20 0
x32688:	jge gmtime$44	; 2: 125 46

gmtime$34:	; Decrement year
x32690:	dec word [bp + 24]	; 3: 255 78 24

gmtime$35:	; CallHeader 28 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

gmtime$36:	; Parameter 28 year 6
x32693:	mov ax, [bp + 24]	; 3: 139 70 24
x32696:	mov [bp + 34], ax	; 3: 137 70 34

gmtime$37:	; Call 28 isLeapYear 0
x32699:	mov word [bp + 28], gmtime$38	; 5: 199 70 28 201 127
x32704:	mov [bp + 30], bp	; 3: 137 110 30
x32707:	add bp, 28	; 3: 131 197 28
x32710:	jmp @7454$isLeapYear	; 3: 233 121 253

gmtime$38:	; PostCall 28

gmtime$39:	; GetReturnValue £temporary3368

gmtime$40:	; Equal 43 £temporary3368 0
x32713:	cmp bx, 0	; 3: 131 251 0
x32716:	je gmtime$43	; 2: 116 10

gmtime$41:	; BinaryAdd totalDays totalDays 366
x32718:	add dword [bp + 20], 366	; 8: 102 129 70 20 110 1 0 0

gmtime$42:	; Goto 44
x32726:	jmp gmtime$44	; 2: 235 8

gmtime$43:	; BinaryAdd totalDays totalDays 365
x32728:	add dword [bp + 20], 365	; 8: 102 129 70 20 109 1 0 0

gmtime$44:	; BinarySubtract g_timeStruct$tm_year year 1900
x32736:	mov ax, [bp + 24]	; 3: 139 70 24
x32739:	sub ax, 1900	; 3: 45 108 7
x32742:	mov [@7659$g_timeStruct + 10], ax	; 3: 163 0 129

gmtime$45:	; IntegralToIntegral £temporary3375 totalDays
x32745:	mov eax, [bp + 20]	; 4: 102 139 70 20
x32749:	cmp eax, 0	; 4: 102 131 248 0
x32753:	jge gmtime$46	; 2: 125 5
x32755:	neg eax	; 3: 102 247 216
x32758:	neg ax	; 2: 247 216

gmtime$46:	; Assign g_timeStruct$tm_yday £temporary3375
x32760:	mov [@7659$g_timeStruct + 14], ax	; 3: 163 4 129

gmtime$47:	; Assign daysOfMonths[0] 31
x32763:	mov word [bp + 28], 31	; 5: 199 70 28 31 0

gmtime$48:	; CallHeader 30 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

gmtime$49:	; Parameter 30 year 6
x32768:	mov ax, [bp + 24]	; 3: 139 70 24
x32771:	mov [bp + 36], ax	; 3: 137 70 36

gmtime$50:	; Call 30 isLeapYear 0
x32774:	mov word [bp + 30], gmtime$51	; 5: 199 70 30 20 128
x32779:	mov [bp + 32], bp	; 3: 137 110 32
x32782:	add bp, 30	; 3: 131 197 30
x32785:	jmp @7454$isLeapYear	; 3: 233 46 253

gmtime$51:	; PostCall 30

gmtime$52:	; GetReturnValue £temporary3376

gmtime$53:	; Equal 56 £temporary3376 0
x32788:	cmp bx, 0	; 3: 131 251 0
x32791:	je gmtime$56	; 2: 116 5

gmtime$54:	; Assign £temporary3381 29
x32793:	mov ax, 29	; 3: 184 29 0

gmtime$55:	; Goto 57
x32796:	jmp gmtime$57	; 2: 235 3

gmtime$56:	; Assign £temporary3381 28
x32798:	mov ax, 28	; 3: 184 28 0

gmtime$57:	; Assign daysOfMonths[1] £temporary3381
x32801:	mov [bp + 30], ax	; 3: 137 70 30

gmtime$58:	; Assign daysOfMonths[2] 31
x32804:	mov word [bp + 32], 31	; 5: 199 70 32 31 0

gmtime$59:	; Assign daysOfMonths[3] 30
x32809:	mov word [bp + 34], 30	; 5: 199 70 34 30 0

gmtime$60:	; Assign daysOfMonths[4] 31
x32814:	mov word [bp + 36], 31	; 5: 199 70 36 31 0

gmtime$61:	; Assign daysOfMonths[5] 30
x32819:	mov word [bp + 38], 30	; 5: 199 70 38 30 0

gmtime$62:	; Assign daysOfMonths[6] 31
x32824:	mov word [bp + 40], 31	; 5: 199 70 40 31 0

gmtime$63:	; Assign daysOfMonths[7] 31
x32829:	mov word [bp + 42], 31	; 5: 199 70 42 31 0

gmtime$64:	; Assign daysOfMonths[8] 30
x32834:	mov word [bp + 44], 30	; 5: 199 70 44 30 0

gmtime$65:	; Assign daysOfMonths[9] 31
x32839:	mov word [bp + 46], 31	; 5: 199 70 46 31 0

gmtime$66:	; Assign daysOfMonths[10] 30
x32844:	mov word [bp + 48], 30	; 5: 199 70 48 30 0

gmtime$67:	; Assign daysOfMonths[11] 31
x32849:	mov word [bp + 50], 31	; 5: 199 70 50 31 0

gmtime$68:	; Assign month 0
x32854:	mov word [bp + 52], 0	; 5: 199 70 52 0 0

gmtime$69:	; SignedMultiply £temporary3395 month 2
x32859:	mov ax, [bp + 52]	; 3: 139 70 52
x32862:	xor dx, dx	; 2: 49 210
x32864:	imul word [@7802$int2$2#]	; 4: 247 46 34 129

gmtime$70:	; BinaryAdd £temporary3396 daysOfMonths £temporary3395
x32868:	mov si, bp	; 2: 137 238
x32870:	add si, 28	; 3: 131 198 28
x32873:	add si, ax	; 2: 1 198

gmtime$71:	; Deref £temporary3394 -> £temporary3396 £temporary3396 0

gmtime$72:	; IntegralToIntegral £temporary3397 £temporary3394 -> £temporary3396
x32875:	mov ax, [si]	; 2: 139 4
x32877:	and eax, 65535	; 6: 102 37 255 255 0 0
x32883:	cmp ax, 0	; 3: 131 248 0
x32886:	jge gmtime$73	; 2: 125 5
x32888:	neg ax	; 2: 247 216
x32890:	neg eax	; 3: 102 247 216

gmtime$73:	; SignedLessThan 82 totalDays £temporary3397
x32893:	cmp [bp + 20], eax	; 4: 102 57 70 20
x32897:	jl gmtime$82	; 2: 124 43

gmtime$74:	; Assign £temporary3399 month
x32899:	mov ax, [bp + 52]	; 3: 139 70 52

gmtime$75:	; Increment month
x32902:	inc word [bp + 52]	; 3: 255 70 52

gmtime$76:	; SignedMultiply £temporary3402 £temporary3399 2
x32905:	xor dx, dx	; 2: 49 210
x32907:	imul word [@7812$int2$2#]	; 4: 247 46 36 129

gmtime$77:	; BinaryAdd £temporary3403 daysOfMonths £temporary3402
x32911:	mov si, bp	; 2: 137 238
x32913:	add si, 28	; 3: 131 198 28
x32916:	add si, ax	; 2: 1 198

gmtime$78:	; Deref £temporary3401 -> £temporary3403 £temporary3403 0

gmtime$79:	; IntegralToIntegral £temporary3404 £temporary3401 -> £temporary3403
x32918:	mov ax, [si]	; 2: 139 4
x32920:	and eax, 65535	; 6: 102 37 255 255 0 0
x32926:	cmp ax, 0	; 3: 131 248 0
x32929:	jge gmtime$80	; 2: 125 5
x32931:	neg ax	; 2: 247 216
x32933:	neg eax	; 3: 102 247 216

gmtime$80:	; BinarySubtract totalDays totalDays £temporary3404
x32936:	sub [bp + 20], eax	; 4: 102 41 70 20

gmtime$81:	; Goto 69
x32940:	jmp gmtime$69	; 2: 235 173

gmtime$82:	; Assign g_timeStruct$tm_mon month
x32942:	mov ax, [bp + 52]	; 3: 139 70 52
x32945:	mov [@7659$g_timeStruct + 8], ax	; 3: 163 254 128

gmtime$83:	; BinaryAdd £temporary3408 totalDays 1
x32948:	mov eax, [bp + 20]	; 4: 102 139 70 20
x32952:	inc eax	; 2: 102 64

gmtime$84:	; IntegralToIntegral £temporary3409 £temporary3408
x32954:	cmp eax, 0	; 4: 102 131 248 0
x32958:	jge gmtime$85	; 2: 125 5
x32960:	neg eax	; 3: 102 247 216
x32963:	neg ax	; 2: 247 216

gmtime$85:	; Assign g_timeStruct$tm_mday £temporary3409
x32965:	mov [@7659$g_timeStruct + 6], ax	; 3: 163 252 128

gmtime$86:	; Assign g_timeStruct$tm_isdst -1
x32968:	mov word [@7659$g_timeStruct + 16], -1	; 6: 199 6 6 129 255 255

gmtime$87:	; SetReturnValue (@7659$g_timeStruct,0)
x32974:	mov bx, @7659$g_timeStruct	; 3: 187 246 128

gmtime$88:	; Return (@7659$g_timeStruct,0)
x32977:	mov ax, [bp]	; 3: 139 70 0
x32980:	mov di, [bp + 4]	; 3: 139 126 4
x32983:	mov bp, [bp + 2]	; 3: 139 110 2
x32986:	jmp ax	; 2: 255 224

gmtime$89:	; SetReturnValue 0
x32988:	mov bx, 0	; 3: 187 0 0

gmtime$90:	; Return 0
x32991:	mov ax, [bp]	; 3: 139 70 0
x32994:	mov di, [bp + 4]	; 3: 139 126 4
x32997:	mov bp, [bp + 2]	; 3: 139 110 2
x33000:	jmp ax	; 2: 255 224

gmtime$91:	; FunctionEnd gmtime

@7667$int4$86400#:
x33002:	dd 86400	; 4: 128 81 1 0

@7671$int4$3600#:
x33006:	dd 3600	; 4: 16 14 0 0

@7676$int4$3600#:
x33010:	dd 3600	; 4: 16 14 0 0

@7659$g_timeStruct:
x33014:	db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0	; 18: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

@7681$int4$60#:
x33032:	dd 60	; 4: 60 0 0 0

@7686$int4$60#:
x33036:	dd 60	; 4: 60 0 0 0

@7690$int4$86400#:
x33040:	dd 86400	; 4: 128 81 1 0

@7706$int4$7#:
x33044:	dd 7	; 4: 7 0 0 0

@7711$int4$365#:
x33048:	dd 365	; 4: 109 1 0 0

@7721$int2$4#:
x33052:	dw 4	; 2: 4 0

@7725$int4$365#:
x33054:	dd 365	; 4: 109 1 0 0

@7802$int2$2#:
x33058:	dw 2	; 2: 2 0

@7812$int2$2#:
x33060:	dw 2	; 2: 2 0

localtime:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

localtime$1:	; Parameter 8 timePtr 6
x33062:	mov ax, [bp + 6]	; 3: 139 70 6
x33065:	mov [bp + 14], ax	; 3: 137 70 14

localtime$2:	; Call 8 gmtime 0
x33068:	mov word [bp + 8], localtime$3	; 5: 199 70 8 58 129
x33073:	mov [bp + 10], bp	; 3: 137 110 10
x33076:	add bp, 8	; 3: 131 197 8
x33079:	jmp gmtime	; 3: 233 76 253

localtime$3:	; PostCall 8

localtime$4:	; GetReturnValue £temporary3413

localtime$5:	; Assign tmPtr £temporary3413
x33082:	mov [bp + 8], bx	; 3: 137 94 8

localtime$6:	; Deref £temporary3414 -> timePtr timePtr 0
x33085:	mov si, [bp + 6]	; 3: 139 118 6

localtime$7:	; Assign t £temporary3414 -> timePtr
x33088:	mov eax, [si]	; 3: 102 139 4
x33091:	mov [bp + 10], eax	; 4: 102 137 70 10

localtime$8:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

localtime$9:	; Call 14 localeconv 0
x33095:	mov word [bp + 14], localtime$10	; 5: 199 70 14 85 129
x33100:	mov [bp + 16], bp	; 3: 137 110 16
x33103:	add bp, 14	; 3: 131 197 14
x33106:	jmp localeconv	; 3: 233 32 157

localtime$10:	; PostCall 14

localtime$11:	; GetReturnValue £temporary3415

localtime$12:	; Assign localeConvPtr £temporary3415
x33109:	mov [bp + 14], bx	; 3: 137 94 14

localtime$13:	; Equal 25 localeConvPtr 0
x33112:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x33116:	je localtime$25	; 2: 116 56

localtime$14:	; Deref £temporary3417 -> tmPtr tmPtr 16
x33118:	mov si, [bp + 8]	; 3: 139 118 8

localtime$15:	; NotEqual 19 £temporary3417 -> tmPtr 1
x33121:	cmp word [si + 16], 1	; 4: 131 124 16 1
x33125:	jne localtime$19	; 2: 117 7

localtime$16:	; Deref £temporary3419 -> localeConvPtr localeConvPtr 0
x33127:	mov si, [bp + 14]	; 3: 139 118 14

localtime$17:	; Assign £temporary3424 £temporary3419 -> localeConvPtr
x33130:	mov ax, [si]	; 2: 139 4

localtime$18:	; Goto 21
x33132:	jmp localtime$21	; 2: 235 6

localtime$19:	; Deref £temporary3420 -> localeConvPtr localeConvPtr 2
x33134:	mov si, [bp + 14]	; 3: 139 118 14

localtime$20:	; Assign £temporary3424 £temporary3420 -> localeConvPtr
x33137:	mov ax, [si + 2]	; 3: 139 68 2

localtime$21:	; Assign timeZone £temporary3424
x33140:	mov [bp + 16], ax	; 3: 137 70 16

localtime$22:	; IntegralToIntegral £temporary3425 timeZone
x33143:	mov ax, [bp + 16]	; 3: 139 70 16
x33146:	and eax, 65535	; 6: 102 37 255 255 0 0
x33152:	cmp ax, 0	; 3: 131 248 0
x33155:	jge localtime$23	; 2: 125 5
x33157:	neg ax	; 2: 247 216
x33159:	neg eax	; 3: 102 247 216

localtime$23:	; SignedMultiply £temporary3426 £temporary3425 3600
x33162:	xor edx, edx	; 3: 102 49 210
x33165:	imul dword [@7857$int4$3600#]	; 5: 102 247 46 183 129

localtime$24:	; BinaryAdd t t £temporary3426
x33170:	add [bp + 10], eax	; 4: 102 1 70 10

localtime$25:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

localtime$26:	; address £temporary3428 t
x33174:	mov si, bp	; 2: 137 238
x33176:	add si, 10	; 3: 131 198 10

localtime$27:	; Parameter 16 £temporary3428 6
x33179:	mov [bp + 22], si	; 3: 137 118 22

localtime$28:	; Call 16 gmtime 0
x33182:	mov word [bp + 16], localtime$29	; 5: 199 70 16 172 129
x33187:	mov [bp + 18], bp	; 3: 137 110 18
x33190:	add bp, 16	; 3: 131 197 16
x33193:	jmp gmtime	; 3: 233 218 252

localtime$29:	; PostCall 16

localtime$30:	; GetReturnValue £temporary3429

localtime$31:	; SetReturnValue £temporary3429

localtime$32:	; Return £temporary3429
x33196:	mov ax, [bp]	; 3: 139 70 0
x33199:	mov di, [bp + 4]	; 3: 139 126 4
x33202:	mov bp, [bp + 2]	; 3: 139 110 2
x33205:	jmp ax	; 2: 255 224

localtime$33:	; FunctionEnd localtime

@7857$int4$3600#:
x33207:	dd 3600	; 4: 16 14 0 0

asctime:	; Assign localeConvPtr 0
x33211:	mov word [bp + 8], 0	; 5: 199 70 8 0 0

asctime$1:	; Equal 7 localeConvPtr 0
x33216:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x33220:	je asctime$7	; 2: 116 20

asctime$2:	; Deref £temporary3436 -> localeConvPtr localeConvPtr 4
x33222:	mov si, [bp + 8]	; 3: 139 118 8

asctime$3:	; Equal 7 £temporary3436 -> localeConvPtr 0
x33225:	cmp word [si + 4], 0	; 4: 131 124 4 0
x33229:	je asctime$7	; 2: 116 11

asctime$4:	; Deref £temporary3439 -> localeConvPtr localeConvPtr 4
x33231:	mov si, [bp + 8]	; 3: 139 118 8

asctime$5:	; Assign shortDayList £temporary3439 -> localeConvPtr
x33234:	mov ax, [si + 4]	; 3: 139 68 4
x33237:	mov [bp + 10], ax	; 3: 137 70 10

asctime$6:	; Goto 8
x33240:	jmp asctime$8	; 2: 235 5

asctime$7:	; Assign shortDayList g_shortDayList
x33242:	mov word [bp + 10], @7880$g_shortDayList	; 5: 199 70 10 132 130

asctime$8:	; Equal 14 localeConvPtr 0
x33247:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x33251:	je asctime$14	; 2: 116 20

asctime$9:	; Deref £temporary3441 -> localeConvPtr localeConvPtr 8
x33253:	mov si, [bp + 8]	; 3: 139 118 8

asctime$10:	; Equal 14 £temporary3441 -> localeConvPtr 0
x33256:	cmp word [si + 8], 0	; 4: 131 124 8 0
x33260:	je asctime$14	; 2: 116 11

asctime$11:	; Deref £temporary3444 -> localeConvPtr localeConvPtr 8
x33262:	mov si, [bp + 8]	; 3: 139 118 8

asctime$12:	; Assign shortMonthList £temporary3444 -> localeConvPtr
x33265:	mov ax, [si + 8]	; 3: 139 68 8
x33268:	mov [bp + 12], ax	; 3: 137 70 12

asctime$13:	; Goto 15
x33271:	jmp asctime$15	; 2: 235 5

asctime$14:	; Assign shortMonthList g_shortMonthList
x33273:	mov word [bp + 12], @7901$g_shortMonthList	; 5: 199 70 12 174 130

asctime$15:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

asctime$16:	; Parameter 14 g_timeString 6
x33278:	mov word [bp + 20], @7872$g_timeString	; 5: 199 70 20 246 130

asctime$17:	; Parameter 14 string_25s2025s2025i202502i3A2502i3A2502i2025i# 8
x33283:	mov word [bp + 22], @7943$string_25s2025s2025i202502i3A2502i3A2502i2025i#	; 5: 199 70 22 246 131

asctime$18:	; Deref £temporary3445 -> tp tp 12
x33288:	mov si, [bp + 6]	; 3: 139 118 6

asctime$19:	; SignedMultiply £temporary3447 £temporary3445 -> tp 2
x33291:	mov ax, [si + 12]	; 3: 139 68 12
x33294:	xor dx, dx	; 2: 49 210
x33296:	imul word [@7946$int2$2#]	; 4: 247 46 17 132

asctime$20:	; BinaryAdd £temporary3448 shortDayList £temporary3447
x33300:	mov si, [bp + 10]	; 3: 139 118 10
x33303:	add si, ax	; 2: 1 198

asctime$21:	; Deref £temporary3446 -> £temporary3448 £temporary3448 0

asctime$22:	; Parameter 14 £temporary3446 -> £temporary3448 10
x33305:	mov ax, [si]	; 2: 139 4
x33307:	mov [bp + 24], ax	; 3: 137 70 24

asctime$23:	; Deref £temporary3449 -> tp tp 8
x33310:	mov si, [bp + 6]	; 3: 139 118 6

asctime$24:	; SignedMultiply £temporary3451 £temporary3449 -> tp 2
x33313:	mov ax, [si + 8]	; 3: 139 68 8
x33316:	xor dx, dx	; 2: 49 210
x33318:	imul word [@7951$int2$2#]	; 4: 247 46 19 132

asctime$25:	; BinaryAdd £temporary3452 shortMonthList £temporary3451
x33322:	mov si, [bp + 12]	; 3: 139 118 12
x33325:	add si, ax	; 2: 1 198

asctime$26:	; Deref £temporary3450 -> £temporary3452 £temporary3452 0

asctime$27:	; Parameter 14 £temporary3450 -> £temporary3452 12
x33327:	mov ax, [si]	; 2: 139 4
x33329:	mov [bp + 26], ax	; 3: 137 70 26

asctime$28:	; Deref £temporary3453 -> tp tp 6
x33332:	mov si, [bp + 6]	; 3: 139 118 6

asctime$29:	; Parameter 14 £temporary3453 -> tp 14
x33335:	mov ax, [si + 6]	; 3: 139 68 6
x33338:	mov [bp + 28], ax	; 3: 137 70 28

asctime$30:	; Deref £temporary3454 -> tp tp 4
x33341:	mov si, [bp + 6]	; 3: 139 118 6

asctime$31:	; Parameter 14 £temporary3454 -> tp 16
x33344:	mov ax, [si + 4]	; 3: 139 68 4
x33347:	mov [bp + 30], ax	; 3: 137 70 30

asctime$32:	; Deref £temporary3455 -> tp tp 2
x33350:	mov si, [bp + 6]	; 3: 139 118 6

asctime$33:	; Parameter 14 £temporary3455 -> tp 18
x33353:	mov ax, [si + 2]	; 3: 139 68 2
x33356:	mov [bp + 32], ax	; 3: 137 70 32

asctime$34:	; Deref £temporary3456 -> tp tp 0
x33359:	mov si, [bp + 6]	; 3: 139 118 6

asctime$35:	; Parameter 14 £temporary3456 -> tp 20
x33362:	mov ax, [si]	; 2: 139 4
x33364:	mov [bp + 34], ax	; 3: 137 70 34

asctime$36:	; Deref £temporary3457 -> tp tp 10
x33367:	mov si, [bp + 6]	; 3: 139 118 6

asctime$37:	; BinaryAdd £temporary3458 £temporary3457 -> tp 1900
x33370:	mov ax, [si + 10]	; 3: 139 68 10
x33373:	add ax, 1900	; 3: 5 108 7

asctime$38:	; Parameter 14 £temporary3458 22
x33376:	mov [bp + 36], ax	; 3: 137 70 36

asctime$39:	; Call 14 sprintf 0
x33379:	mov word [bp + 14], asctime$40	; 5: 199 70 14 118 130
x33384:	mov [bp + 16], bp	; 3: 137 110 16
x33387:	add bp, 14	; 3: 131 197 14
x33390:	mov di, bp	; 2: 137 239
x33392:	add di, 14	; 3: 131 199 14
x33395:	jmp sprintf	; 3: 233 159 1

asctime$40:	; PostCall 14

asctime$41:	; SetReturnValue g_timeString
x33398:	mov bx, @7872$g_timeString	; 3: 187 246 130

asctime$42:	; Return g_timeString
x33401:	mov ax, [bp]	; 3: 139 70 0
x33404:	mov di, [bp + 4]	; 3: 139 126 4
x33407:	mov bp, [bp + 2]	; 3: 139 110 2
x33410:	jmp ax	; 2: 255 224

asctime$43:	; FunctionEnd asctime

@7880$g_shortDayList:
x33412:	dw @7873$string_Sun# ; 2: 146 130
x33414:	dw @7874$string_Mon# ; 2: 150 130
x33416:	dw @7875$string_Tue# ; 2: 154 130
x33418:	dw @7876$string_Wed# ; 2: 158 130
x33420:	dw @7877$string_Thu# ; 2: 162 130
x33422:	dw @7878$string_Fri# ; 2: 166 130
x33424:	dw @7879$string_Sat# ; 2: 170 130

@7873$string_Sun#:
x33426:	db "Sun", 0	; 4: 83 117 110 0

@7874$string_Mon#:
x33430:	db "Mon", 0	; 4: 77 111 110 0

@7875$string_Tue#:
x33434:	db "Tue", 0	; 4: 84 117 101 0

@7876$string_Wed#:
x33438:	db "Wed", 0	; 4: 87 101 100 0

@7877$string_Thu#:
x33442:	db "Thu", 0	; 4: 84 104 117 0

@7878$string_Fri#:
x33446:	db "Fri", 0	; 4: 70 114 105 0

@7879$string_Sat#:
x33450:	db "Sat", 0	; 4: 83 97 116 0

@7901$g_shortMonthList:
x33454:	dw @7889$string_Jan# ; 2: 198 130
x33456:	dw @7890$string_Feb# ; 2: 202 130
x33458:	dw @7891$string_Mar# ; 2: 206 130
x33460:	dw @7892$string_Apr# ; 2: 210 130
x33462:	dw @7893$string_May# ; 2: 214 130
x33464:	dw @7894$string_Jun# ; 2: 218 130
x33466:	dw @7895$string_Jul# ; 2: 222 130
x33468:	dw @7896$string_Aug# ; 2: 226 130
x33470:	dw @7897$string_Sep# ; 2: 230 130
x33472:	dw @7898$string_Oct# ; 2: 234 130
x33474:	dw @7899$string_Nov# ; 2: 238 130
x33476:	dw @7900$string_Dec# ; 2: 242 130

@7889$string_Jan#:
x33478:	db "Jan", 0	; 4: 74 97 110 0

@7890$string_Feb#:
x33482:	db "Feb", 0	; 4: 70 101 98 0

@7891$string_Mar#:
x33486:	db "Mar", 0	; 4: 77 97 114 0

@7892$string_Apr#:
x33490:	db "Apr", 0	; 4: 65 112 114 0

@7893$string_May#:
x33494:	db "May", 0	; 4: 77 97 121 0

@7894$string_Jun#:
x33498:	db "Jun", 0	; 4: 74 117 110 0

@7895$string_Jul#:
x33502:	db "Jul", 0	; 4: 74 117 108 0

@7896$string_Aug#:
x33506:	db "Aug", 0	; 4: 65 117 103 0

@7897$string_Sep#:
x33510:	db "Sep", 0	; 4: 83 101 112 0

@7898$string_Oct#:
x33514:	db "Oct", 0	; 4: 79 99 116 0

@7899$string_Nov#:
x33518:	db "Nov", 0	; 4: 78 111 118 0

@7900$string_Dec#:
x33522:	db "Dec", 0	; 4: 68 101 99 0

@7872$g_timeString:
x33526:	db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0	; 256: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

@7943$string_25s2025s2025i202502i3A2502i3A2502i2025i#:
x33782:	db "%s %s %i %02i:%02i:%02i %i", 0	; 27: 37 115 32 37 115 32 37 105 32 37 48 50 105 58 37 48 50 105 58 37 48 50 105 32 37 105 0

@7946$int2$2#:
x33809:	dw 2	; 2: 2 0

@7951$int2$2#:
x33811:	dw 2	; 2: 2 0

sprintf:	; address £temporary2225 format
x33813:	mov si, bp	; 2: 137 238
x33815:	add si, 8	; 3: 131 198 8

sprintf$1:	; IntegralToIntegral £temporary2226 £temporary2225

sprintf$2:	; BinaryAdd arg_list £temporary2226 2
x33818:	add si, 2	; 3: 131 198 2
x33821:	mov [di + 10], si	; 3: 137 117 10

sprintf$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

sprintf$4:	; Parameter 12 outString 6
x33824:	mov ax, [bp + 6]	; 3: 139 70 6
x33827:	mov [di + 18], ax	; 3: 137 69 18

sprintf$5:	; Parameter 12 format 8
x33830:	mov ax, [bp + 8]	; 3: 139 70 8
x33833:	mov [di + 20], ax	; 3: 137 69 20

sprintf$6:	; Parameter 12 arg_list 10
x33836:	mov ax, [di + 10]	; 3: 139 69 10
x33839:	mov [di + 22], ax	; 3: 137 69 22

sprintf$7:	; Call 12 vsprintf 0
x33842:	mov word [di + 12], sprintf$8	; 5: 199 69 12 69 132
x33847:	mov [di + 14], bp	; 3: 137 109 14
x33850:	mov [di + 16], di	; 3: 137 125 16
x33853:	add di, 12	; 3: 131 199 12
x33856:	mov bp, di	; 2: 137 253
x33858:	nop	; 1: 144
x33859:	jmp vsprintf	; 2: 235 11

sprintf$8:	; PostCall 12

sprintf$9:	; GetReturnValue £temporary2228

sprintf$10:	; SetReturnValue £temporary2228

sprintf$11:	; Return £temporary2228
x33861:	mov ax, [bp]	; 3: 139 70 0
x33864:	mov di, [bp + 4]	; 3: 139 126 4
x33867:	mov bp, [bp + 2]	; 3: 139 110 2
x33870:	jmp ax	; 2: 255 224

sprintf$12:	; FunctionEnd sprintf

vsprintf:	; Assign g_outStatus 1
x33872:	mov word [g_outStatus], 1	; 6: 199 6 219 15 1 0

vsprintf$1:	; IntegralToIntegral £temporary2233 outString
x33878:	mov ax, [bp + 6]	; 3: 139 70 6

vsprintf$2:	; Assign g_outDevice £temporary2233
x33881:	mov [g_outDevice], ax	; 3: 163 221 15

vsprintf$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

vsprintf$4:	; Parameter 12 format 6
x33884:	mov ax, [bp + 8]	; 3: 139 70 8
x33887:	mov [bp + 18], ax	; 3: 137 70 18

vsprintf$5:	; Parameter 12 arg_list 8
x33890:	mov ax, [bp + 10]	; 3: 139 70 10
x33893:	mov [bp + 20], ax	; 3: 137 70 20

vsprintf$6:	; Call 12 printFormat 0
x33896:	mov word [bp + 12], vsprintf$7	; 5: 199 70 12 118 132
x33901:	mov [bp + 14], bp	; 3: 137 110 14
x33904:	add bp, 12	; 3: 131 197 12
x33907:	jmp printFormat	; 3: 233 105 139

vsprintf$7:	; PostCall 12

vsprintf$8:	; GetReturnValue £temporary2234

vsprintf$9:	; SetReturnValue £temporary2234

vsprintf$10:	; Return £temporary2234
x33910:	mov ax, [bp]	; 3: 139 70 0
x33913:	mov di, [bp + 4]	; 3: 139 126 4
x33916:	mov bp, [bp + 2]	; 3: 139 110 2
x33919:	jmp ax	; 2: 255 224

vsprintf$11:	; FunctionEnd vsprintf

ctime:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

ctime$1:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

ctime$2:	; Parameter 8 time 6
x33921:	mov ax, [bp + 6]	; 3: 139 70 6
x33924:	mov [bp + 14], ax	; 3: 137 70 14

ctime$3:	; Call 8 localtime 0
x33927:	mov word [bp + 8], ctime$4	; 5: 199 70 8 149 132
x33932:	mov [bp + 10], bp	; 3: 137 110 10
x33935:	add bp, 8	; 3: 131 197 8
x33938:	jmp localtime	; 3: 233 145 252

ctime$4:	; PostCall 8

ctime$5:	; GetReturnValue £temporary3469

ctime$6:	; Parameter 8 £temporary3469 6
x33941:	mov [bp + 14], bx	; 3: 137 94 14

ctime$7:	; Call 8 asctime 0
x33944:	mov word [bp + 8], ctime$8	; 5: 199 70 8 166 132
x33949:	mov [bp + 10], bp	; 3: 137 110 10
x33952:	add bp, 8	; 3: 131 197 8
x33955:	jmp asctime	; 3: 233 21 253

ctime$8:	; PostCall 8

ctime$9:	; GetReturnValue £temporary3470

ctime$10:	; SetReturnValue £temporary3470

ctime$11:	; Return £temporary3470
x33958:	mov ax, [bp]	; 3: 139 70 0
x33961:	mov di, [bp + 4]	; 3: 139 126 4
x33964:	mov bp, [bp + 2]	; 3: 139 110 2
x33967:	jmp ax	; 2: 255 224

ctime$12:	; FunctionEnd ctime

strftime:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$1:	; Call 14 localeconv 0
x33969:	mov word [bp + 14], strftime$2	; 5: 199 70 14 191 132
x33974:	mov [bp + 16], bp	; 3: 137 110 16
x33977:	add bp, 14	; 3: 131 197 14
x33980:	jmp localeconv	; 3: 233 182 153

strftime$2:	; PostCall 14

strftime$3:	; GetReturnValue £temporary3494

strftime$4:	; Assign localeConvPtr £temporary3494
x33983:	mov [bp + 14], bx	; 3: 137 94 14

strftime$5:	; Equal 11 localeConvPtr 0
x33986:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x33990:	je strftime$11	; 2: 116 20

strftime$6:	; Deref £temporary3496 -> localeConvPtr localeConvPtr 4
x33992:	mov si, [bp + 14]	; 3: 139 118 14

strftime$7:	; Equal 11 £temporary3496 -> localeConvPtr 0
x33995:	cmp word [si + 4], 0	; 4: 131 124 4 0
x33999:	je strftime$11	; 2: 116 11

strftime$8:	; Deref £temporary3499 -> localeConvPtr localeConvPtr 4
x34001:	mov si, [bp + 14]	; 3: 139 118 14

strftime$9:	; Assign shortDayList £temporary3499 -> localeConvPtr
x34004:	mov ax, [si + 4]	; 3: 139 68 4
x34007:	mov [bp + 16], ax	; 3: 137 70 16

strftime$10:	; Goto 12
x34010:	jmp strftime$12	; 2: 235 5

strftime$11:	; Assign shortDayList g_shortDayList
x34012:	mov word [bp + 16], @7880$g_shortDayList	; 5: 199 70 16 132 130

strftime$12:	; Equal 18 localeConvPtr 0
x34017:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x34021:	je strftime$18	; 2: 116 20

strftime$13:	; Deref £temporary3501 -> localeConvPtr localeConvPtr 6
x34023:	mov si, [bp + 14]	; 3: 139 118 14

strftime$14:	; Equal 18 £temporary3501 -> localeConvPtr 0
x34026:	cmp word [si + 6], 0	; 4: 131 124 6 0
x34030:	je strftime$18	; 2: 116 11

strftime$15:	; Deref £temporary3504 -> localeConvPtr localeConvPtr 6
x34032:	mov si, [bp + 14]	; 3: 139 118 14

strftime$16:	; Assign longDayList £temporary3504 -> localeConvPtr
x34035:	mov ax, [si + 6]	; 3: 139 68 6
x34038:	mov [bp + 20], ax	; 3: 137 70 20

strftime$17:	; Goto 19
x34041:	jmp strftime$19	; 2: 235 5

strftime$18:	; Assign longDayList g_longDayList
x34043:	mov word [bp + 20], @7888$g_longDayList	; 5: 199 70 20 236 138

strftime$19:	; Equal 25 localeConvPtr 0
x34048:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x34052:	je strftime$25	; 2: 116 20

strftime$20:	; Deref £temporary3506 -> localeConvPtr localeConvPtr 8
x34054:	mov si, [bp + 14]	; 3: 139 118 14

strftime$21:	; Equal 25 £temporary3506 -> localeConvPtr 0
x34057:	cmp word [si + 8], 0	; 4: 131 124 8 0
x34061:	je strftime$25	; 2: 116 11

strftime$22:	; Deref £temporary3509 -> localeConvPtr localeConvPtr 8
x34063:	mov si, [bp + 14]	; 3: 139 118 14

strftime$23:	; Assign shortMonthList £temporary3509 -> localeConvPtr
x34066:	mov ax, [si + 8]	; 3: 139 68 8
x34069:	mov [bp + 18], ax	; 3: 137 70 18

strftime$24:	; Goto 26
x34072:	jmp strftime$26	; 2: 235 5

strftime$25:	; Assign shortMonthList g_shortMonthList
x34074:	mov word [bp + 18], @7901$g_shortMonthList	; 5: 199 70 18 174 130

strftime$26:	; Equal 32 localeConvPtr 0
x34079:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x34083:	je strftime$32	; 2: 116 20

strftime$27:	; Deref £temporary3511 -> localeConvPtr localeConvPtr 10
x34085:	mov si, [bp + 14]	; 3: 139 118 14

strftime$28:	; Equal 32 £temporary3511 -> localeConvPtr 0
x34088:	cmp word [si + 10], 0	; 4: 131 124 10 0
x34092:	je strftime$32	; 2: 116 11

strftime$29:	; Deref £temporary3514 -> localeConvPtr localeConvPtr 10
x34094:	mov si, [bp + 14]	; 3: 139 118 14

strftime$30:	; Assign longMonthList £temporary3514 -> localeConvPtr
x34097:	mov ax, [si + 10]	; 3: 139 68 10
x34100:	mov [bp + 22], ax	; 3: 137 70 22

strftime$31:	; Goto 33
x34103:	jmp strftime$33	; 2: 235 5

strftime$32:	; Assign longMonthList g_longMonthList
x34105:	mov word [bp + 22], @7914$g_longMonthList	; 5: 199 70 22 51 139

strftime$33:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$34:	; Parameter 24 result 6
x34110:	mov ax, [bp + 6]	; 3: 139 70 6
x34113:	mov [bp + 30], ax	; 3: 137 70 30

strftime$35:	; Parameter 24 string_# 8
x34116:	mov word [bp + 32], @8078$string_#	; 5: 199 70 32 161 139

strftime$36:	; Call 24 strcpy 0
x34121:	mov word [bp + 24], strftime$37	; 5: 199 70 24 87 133
x34126:	mov [bp + 26], bp	; 3: 137 110 26
x34129:	add bp, 24	; 3: 131 197 24
x34132:	jmp strcpy	; 3: 233 231 216

strftime$37:	; PostCall 24

strftime$38:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$39:	; Parameter 26 tp 6
x34135:	mov ax, [bp + 12]	; 3: 139 70 12
x34138:	mov [bp + 32], ax	; 3: 137 70 32

strftime$40:	; Call 26 getWeekNumber 0
x34141:	mov word [bp + 26], strftime$41	; 5: 199 70 26 107 133
x34146:	mov [bp + 28], bp	; 3: 137 110 28
x34149:	add bp, 26	; 3: 131 197 26
x34152:	jmp getWeekNumber	; 3: 233 213 6

strftime$41:	; PostCall 26

strftime$42:	; GetReturnValue £temporary3516

strftime$43:	; Assign weekNumberStartSunday £temporary3516
x34155:	mov [bp + 26], bx	; 3: 137 94 26

strftime$44:	; Assign weekNumberStartMonday weekNumberStartSunday
x34158:	mov ax, [bp + 26]	; 3: 139 70 26
x34161:	mov [bp + 28], ax	; 3: 137 70 28

strftime$45:	; Deref £temporary3517 -> tp tp 6
x34164:	mov si, [bp + 12]	; 3: 139 118 12

strftime$46:	; NotEqual 48 £temporary3517 -> tp 0
x34167:	cmp word [si + 6], 0	; 4: 131 124 6 0
x34171:	jne strftime$48	; 2: 117 3

strftime$47:	; Decrement weekNumberStartMonday
x34173:	dec word [bp + 28]	; 3: 255 78 28

strftime$48:	; Assign index 0
x34176:	mov word [bp + 24], 0	; 5: 199 70 24 0 0

strftime$49:	; BinaryAdd £temporary3521 format index
x34181:	mov si, [bp + 10]	; 3: 139 118 10
x34184:	add si, [bp + 24]	; 3: 3 118 24

strftime$50:	; Deref £temporary3520 -> £temporary3521 £temporary3521 0

strftime$51:	; Equal 322 £temporary3520 -> £temporary3521 0
x34187:	cmp byte [si], 0	; 3: 128 60 0
x34190:	je strftime$322	; 4: 15 132 59 5

strftime$52:	; BinaryAdd £temporary3525 format index
x34194:	mov si, [bp + 10]	; 3: 139 118 10
x34197:	add si, [bp + 24]	; 3: 3 118 24

strftime$53:	; Deref £temporary3524 -> £temporary3525 £temporary3525 0

strftime$54:	; NotEqual 297 £temporary3524 -> £temporary3525 37
x34200:	cmp byte [si], 37	; 3: 128 60 37
x34203:	jne strftime$297	; 4: 15 133 189 4

strftime$55:	; Increment index
x34207:	inc word [bp + 24]	; 3: 255 70 24

strftime$56:	; BinaryAdd £temporary3529 format index
x34210:	mov si, [bp + 10]	; 3: 139 118 10
x34213:	add si, [bp + 24]	; 3: 3 118 24

strftime$57:	; Deref £temporary3528 -> £temporary3529 £temporary3529 0

strftime$58:	; Case 82 £temporary3528 -> £temporary3529 97
x34216:	mov al, [si]	; 2: 138 4
x34218:	cmp al, 97	; 2: 60 97
x34220:	je strftime$82	; 4: 15 132 129 0

strftime$59:	; Case 92 £temporary3528 -> £temporary3529 65
x34224:	cmp al, 65	; 2: 60 65
x34226:	je strftime$92	; 4: 15 132 169 0

strftime$60:	; Case 102 £temporary3528 -> £temporary3529 98
x34230:	cmp al, 98	; 2: 60 98
x34232:	je strftime$102	; 4: 15 132 209 0

strftime$61:	; Case 112 £temporary3528 -> £temporary3529 66
x34236:	cmp al, 66	; 2: 60 66
x34238:	je strftime$112	; 4: 15 132 249 0

strftime$62:	; Case 122 £temporary3528 -> £temporary3529 99
x34242:	cmp al, 99	; 2: 60 99
x34244:	je strftime$122	; 4: 15 132 33 1

strftime$63:	; Case 142 £temporary3528 -> £temporary3529 100
x34248:	cmp al, 100	; 2: 60 100
x34250:	je strftime$142	; 4: 15 132 118 1

strftime$64:	; Case 150 £temporary3528 -> £temporary3529 72
x34254:	cmp al, 72	; 2: 60 72
x34256:	je strftime$150	; 4: 15 132 155 1

strftime$65:	; Case 158 £temporary3528 -> £temporary3529 73
x34260:	cmp al, 73	; 2: 60 73
x34262:	je strftime$158	; 4: 15 132 192 1

strftime$66:	; Case 167 £temporary3528 -> £temporary3529 106
x34266:	cmp al, 106	; 2: 60 106
x34268:	je strftime$167	; 4: 15 132 235 1

strftime$67:	; Case 175 £temporary3528 -> £temporary3529 109
x34272:	cmp al, 109	; 2: 60 109
x34274:	je strftime$175	; 4: 15 132 16 2

strftime$68:	; Case 184 £temporary3528 -> £temporary3529 77
x34278:	cmp al, 77	; 2: 60 77
x34280:	je strftime$184	; 4: 15 132 54 2

strftime$69:	; Case 192 £temporary3528 -> £temporary3529 112
x34284:	cmp al, 112	; 2: 60 112
x34286:	je strftime$192	; 4: 15 132 91 2

strftime$70:	; Case 203 £temporary3528 -> £temporary3529 83
x34290:	cmp al, 83	; 2: 60 83
x34292:	je strftime$203	; 4: 15 132 136 2

strftime$71:	; Case 211 £temporary3528 -> £temporary3529 85
x34296:	cmp al, 85	; 2: 60 85
x34298:	je strftime$211	; 4: 15 132 172 2

strftime$72:	; Case 218 £temporary3528 -> £temporary3529 119
x34302:	cmp al, 119	; 2: 60 119
x34304:	je strftime$218	; 4: 15 132 206 2

strftime$73:	; Case 226 £temporary3528 -> £temporary3529 87
x34308:	cmp al, 87	; 2: 60 87
x34310:	je strftime$226	; 4: 15 132 243 2

strftime$74:	; Case 233 £temporary3528 -> £temporary3529 120
x34314:	cmp al, 120	; 2: 60 120
x34316:	je strftime$233	; 4: 15 132 21 3

strftime$75:	; Case 245 £temporary3528 -> £temporary3529 88
x34320:	cmp al, 88	; 2: 60 88
x34322:	je strftime$245	; 4: 15 132 75 3

strftime$76:	; Case 257 £temporary3528 -> £temporary3529 121
x34326:	cmp al, 121	; 2: 60 121
x34328:	je strftime$257	; 4: 15 132 129 3

strftime$77:	; Case 266 £temporary3528 -> £temporary3529 89
x34332:	cmp al, 89	; 2: 60 89
x34334:	je strftime$266	; 4: 15 132 172 3

strftime$78:	; Case 275 £temporary3528 -> £temporary3529 90
x34338:	cmp al, 90	; 2: 60 90
x34340:	je strftime$275	; 4: 15 132 211 3

strftime$79:	; Case 286 £temporary3528 -> £temporary3529 37
x34344:	cmp al, 37	; 2: 60 37
x34346:	je strftime$286	; 4: 15 132 248 3

strftime$80:	; CaseEnd £temporary3528 -> £temporary3529

strftime$81:	; Goto 291
x34350:	jmp strftime$291	; 3: 233 15 4

strftime$82:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$83:	; Parameter 50 add 6
x34353:	mov [bp + 56], bp	; 3: 137 110 56
x34356:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$84:	; Deref £temporary3530 -> tp tp 12
x34360:	mov si, [bp + 12]	; 3: 139 118 12

strftime$85:	; SignedMultiply £temporary3532 £temporary3530 -> tp 2
x34363:	mov ax, [si + 12]	; 3: 139 68 12
x34366:	xor dx, dx	; 2: 49 210
x34368:	imul word [@8118$int2$2#]	; 4: 247 46 162 139

strftime$86:	; BinaryAdd £temporary3533 shortDayList £temporary3532
x34372:	mov si, [bp + 16]	; 3: 139 118 16
x34375:	add si, ax	; 2: 1 198

strftime$87:	; Deref £temporary3531 -> £temporary3533 £temporary3533 0

strftime$88:	; Parameter 50 £temporary3531 -> £temporary3533 8
x34377:	mov ax, [si]	; 2: 139 4
x34379:	mov [bp + 58], ax	; 3: 137 70 58

strftime$89:	; Call 50 strcpy 0
x34382:	mov word [bp + 50], strftime$90	; 5: 199 70 50 92 134
x34387:	mov [bp + 52], bp	; 3: 137 110 52
x34390:	add bp, 50	; 3: 131 197 50
x34393:	jmp strcpy	; 3: 233 226 215

strftime$90:	; PostCall 50

strftime$91:	; Goto 303
x34396:	jmp strftime$303	; 3: 233 21 4

strftime$92:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$93:	; Parameter 50 add 6
x34399:	mov [bp + 56], bp	; 3: 137 110 56
x34402:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$94:	; Deref £temporary3535 -> tp tp 12
x34406:	mov si, [bp + 12]	; 3: 139 118 12

strftime$95:	; SignedMultiply £temporary3537 £temporary3535 -> tp 2
x34409:	mov ax, [si + 12]	; 3: 139 68 12
x34412:	xor dx, dx	; 2: 49 210
x34414:	imul word [@8126$int2$2#]	; 4: 247 46 164 139

strftime$96:	; BinaryAdd £temporary3538 longDayList £temporary3537
x34418:	mov si, [bp + 20]	; 3: 139 118 20
x34421:	add si, ax	; 2: 1 198

strftime$97:	; Deref £temporary3536 -> £temporary3538 £temporary3538 0

strftime$98:	; Parameter 50 £temporary3536 -> £temporary3538 8
x34423:	mov ax, [si]	; 2: 139 4
x34425:	mov [bp + 58], ax	; 3: 137 70 58

strftime$99:	; Call 50 strcpy 0
x34428:	mov word [bp + 50], strftime$100	; 5: 199 70 50 138 134
x34433:	mov [bp + 52], bp	; 3: 137 110 52
x34436:	add bp, 50	; 3: 131 197 50
x34439:	jmp strcpy	; 3: 233 180 215

strftime$100:	; PostCall 50

strftime$101:	; Goto 303
x34442:	jmp strftime$303	; 3: 233 231 3

strftime$102:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$103:	; Parameter 50 add 6
x34445:	mov [bp + 56], bp	; 3: 137 110 56
x34448:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$104:	; Deref £temporary3540 -> tp tp 8
x34452:	mov si, [bp + 12]	; 3: 139 118 12

strftime$105:	; SignedMultiply £temporary3542 £temporary3540 -> tp 2
x34455:	mov ax, [si + 8]	; 3: 139 68 8
x34458:	xor dx, dx	; 2: 49 210
x34460:	imul word [@8134$int2$2#]	; 4: 247 46 166 139

strftime$106:	; BinaryAdd £temporary3543 shortMonthList £temporary3542
x34464:	mov si, [bp + 18]	; 3: 139 118 18
x34467:	add si, ax	; 2: 1 198

strftime$107:	; Deref £temporary3541 -> £temporary3543 £temporary3543 0

strftime$108:	; Parameter 50 £temporary3541 -> £temporary3543 8
x34469:	mov ax, [si]	; 2: 139 4
x34471:	mov [bp + 58], ax	; 3: 137 70 58

strftime$109:	; Call 50 strcpy 0
x34474:	mov word [bp + 50], strftime$110	; 5: 199 70 50 184 134
x34479:	mov [bp + 52], bp	; 3: 137 110 52
x34482:	add bp, 50	; 3: 131 197 50
x34485:	jmp strcpy	; 3: 233 134 215

strftime$110:	; PostCall 50

strftime$111:	; Goto 303
x34488:	jmp strftime$303	; 3: 233 185 3

strftime$112:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$113:	; Parameter 50 add 6
x34491:	mov [bp + 56], bp	; 3: 137 110 56
x34494:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$114:	; Deref £temporary3545 -> tp tp 8
x34498:	mov si, [bp + 12]	; 3: 139 118 12

strftime$115:	; SignedMultiply £temporary3547 £temporary3545 -> tp 2
x34501:	mov ax, [si + 8]	; 3: 139 68 8
x34504:	xor dx, dx	; 2: 49 210
x34506:	imul word [@8142$int2$2#]	; 4: 247 46 168 139

strftime$116:	; BinaryAdd £temporary3548 longMonthList £temporary3547
x34510:	mov si, [bp + 22]	; 3: 139 118 22
x34513:	add si, ax	; 2: 1 198

strftime$117:	; Deref £temporary3546 -> £temporary3548 £temporary3548 0

strftime$118:	; Parameter 50 £temporary3546 -> £temporary3548 8
x34515:	mov ax, [si]	; 2: 139 4
x34517:	mov [bp + 58], ax	; 3: 137 70 58

strftime$119:	; Call 50 strcpy 0
x34520:	mov word [bp + 50], strftime$120	; 5: 199 70 50 230 134
x34525:	mov [bp + 52], bp	; 3: 137 110 52
x34528:	add bp, 50	; 3: 131 197 50
x34531:	jmp strcpy	; 3: 233 88 215

strftime$120:	; PostCall 50

strftime$121:	; Goto 303
x34534:	jmp strftime$303	; 3: 233 139 3

strftime$122:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$123:	; Parameter 50 add 6
x34537:	mov [bp + 56], bp	; 3: 137 110 56
x34540:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$124:	; Parameter 50 string_2502i2D2502i2D2502i202502i3A2502i3A2502i# 8
x34544:	mov word [bp + 58], @8148$string_2502i2D2502i2D2502i202502i3A2502i3A2502i#	; 5: 199 70 58 170 139

strftime$125:	; Deref £temporary3550 -> tp tp 10
x34549:	mov si, [bp + 12]	; 3: 139 118 12

strftime$126:	; BinaryAdd £temporary3551 £temporary3550 -> tp 1900
x34552:	mov ax, [si + 10]	; 3: 139 68 10
x34555:	add ax, 1900	; 3: 5 108 7

strftime$127:	; Parameter 50 £temporary3551 10
x34558:	mov [bp + 60], ax	; 3: 137 70 60

strftime$128:	; Deref £temporary3552 -> tp tp 8
x34561:	mov si, [bp + 12]	; 3: 139 118 12

strftime$129:	; BinaryAdd £temporary3553 £temporary3552 -> tp 1
x34564:	mov ax, [si + 8]	; 3: 139 68 8
x34567:	inc ax	; 1: 64

strftime$130:	; Parameter 50 £temporary3553 12
x34568:	mov [bp + 62], ax	; 3: 137 70 62

strftime$131:	; Deref £temporary3554 -> tp tp 6
x34571:	mov si, [bp + 12]	; 3: 139 118 12

strftime$132:	; Parameter 50 £temporary3554 -> tp 14
x34574:	mov ax, [si + 6]	; 3: 139 68 6
x34577:	mov [bp + 64], ax	; 3: 137 70 64

strftime$133:	; Deref £temporary3555 -> tp tp 4
x34580:	mov si, [bp + 12]	; 3: 139 118 12

strftime$134:	; Parameter 50 £temporary3555 -> tp 16
x34583:	mov ax, [si + 4]	; 3: 139 68 4
x34586:	mov [bp + 66], ax	; 3: 137 70 66

strftime$135:	; Deref £temporary3556 -> tp tp 2
x34589:	mov si, [bp + 12]	; 3: 139 118 12

strftime$136:	; Parameter 50 £temporary3556 -> tp 18
x34592:	mov ax, [si + 2]	; 3: 139 68 2
x34595:	mov [bp + 68], ax	; 3: 137 70 68

strftime$137:	; Deref £temporary3557 -> tp tp 0
x34598:	mov si, [bp + 12]	; 3: 139 118 12

strftime$138:	; Parameter 50 £temporary3557 -> tp 20
x34601:	mov ax, [si]	; 2: 139 4
x34603:	mov [bp + 70], ax	; 3: 137 70 70

strftime$139:	; Call 50 sprintf 0
x34606:	mov word [bp + 50], strftime$140	; 5: 199 70 50 65 135
x34611:	mov [bp + 52], bp	; 3: 137 110 52
x34614:	add bp, 50	; 3: 131 197 50
x34617:	mov di, bp	; 2: 137 239
x34619:	add di, 12	; 3: 131 199 12
x34622:	jmp sprintf	; 3: 233 212 252

strftime$140:	; PostCall 50

strftime$141:	; Goto 303
x34625:	jmp strftime$303	; 3: 233 48 3

strftime$142:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$143:	; Parameter 50 add 6
x34628:	mov [bp + 56], bp	; 3: 137 110 56
x34631:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$144:	; Parameter 50 string_2502i# 8
x34635:	mov word [bp + 58], @8164$string_2502i#	; 5: 199 70 58 200 139

strftime$145:	; Deref £temporary3559 -> tp tp 6
x34640:	mov si, [bp + 12]	; 3: 139 118 12

strftime$146:	; Parameter 50 £temporary3559 -> tp 10
x34643:	mov ax, [si + 6]	; 3: 139 68 6
x34646:	mov [bp + 60], ax	; 3: 137 70 60

strftime$147:	; Call 50 sprintf 0
x34649:	mov word [bp + 50], strftime$148	; 5: 199 70 50 108 135
x34654:	mov [bp + 52], bp	; 3: 137 110 52
x34657:	add bp, 50	; 3: 131 197 50
x34660:	mov di, bp	; 2: 137 239
x34662:	add di, 2	; 3: 131 199 2
x34665:	jmp sprintf	; 3: 233 169 252

strftime$148:	; PostCall 50

strftime$149:	; Goto 303
x34668:	jmp strftime$303	; 3: 233 5 3

strftime$150:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$151:	; Parameter 50 add 6
x34671:	mov [bp + 56], bp	; 3: 137 110 56
x34674:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$152:	; Parameter 50 string_2502i# 8
x34678:	mov word [bp + 58], @8169$string_2502i#	; 5: 199 70 58 205 139

strftime$153:	; Deref £temporary3561 -> tp tp 4
x34683:	mov si, [bp + 12]	; 3: 139 118 12

strftime$154:	; Parameter 50 £temporary3561 -> tp 10
x34686:	mov ax, [si + 4]	; 3: 139 68 4
x34689:	mov [bp + 60], ax	; 3: 137 70 60

strftime$155:	; Call 50 sprintf 0
x34692:	mov word [bp + 50], strftime$156	; 5: 199 70 50 151 135
x34697:	mov [bp + 52], bp	; 3: 137 110 52
x34700:	add bp, 50	; 3: 131 197 50
x34703:	mov di, bp	; 2: 137 239
x34705:	add di, 2	; 3: 131 199 2
x34708:	jmp sprintf	; 3: 233 126 252

strftime$156:	; PostCall 50

strftime$157:	; Goto 303
x34711:	jmp strftime$303	; 3: 233 218 2

strftime$158:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$159:	; Parameter 50 add 6
x34714:	mov [bp + 56], bp	; 3: 137 110 56
x34717:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$160:	; Parameter 50 string_2502i# 8
x34721:	mov word [bp + 58], @8174$string_2502i#	; 5: 199 70 58 210 139

strftime$161:	; Deref £temporary3563 -> tp tp 4
x34726:	mov si, [bp + 12]	; 3: 139 118 12

strftime$162:	; SignedModulo £temporary3564 £temporary3563 -> tp 12
x34729:	mov ax, [si + 4]	; 3: 139 68 4
x34732:	xor dx, dx	; 2: 49 210
x34734:	idiv word [@8177$int2$12#]	; 4: 247 62 215 139

strftime$163:	; Parameter 50 £temporary3564 10
x34738:	mov [bp + 60], dx	; 3: 137 86 60

strftime$164:	; Call 50 sprintf 0
x34741:	mov word [bp + 50], strftime$165	; 5: 199 70 50 200 135
x34746:	mov [bp + 52], bp	; 3: 137 110 52
x34749:	add bp, 50	; 3: 131 197 50
x34752:	mov di, bp	; 2: 137 239
x34754:	add di, 2	; 3: 131 199 2
x34757:	jmp sprintf	; 3: 233 77 252

strftime$165:	; PostCall 50

strftime$166:	; Goto 303
x34760:	jmp strftime$303	; 3: 233 169 2

strftime$167:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$168:	; Parameter 50 add 6
x34763:	mov [bp + 56], bp	; 3: 137 110 56
x34766:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$169:	; Parameter 50 string_2503i# 8
x34770:	mov word [bp + 58], @8182$string_2503i#	; 5: 199 70 58 217 139

strftime$170:	; Deref £temporary3566 -> tp tp 14
x34775:	mov si, [bp + 12]	; 3: 139 118 12

strftime$171:	; Parameter 50 £temporary3566 -> tp 10
x34778:	mov ax, [si + 14]	; 3: 139 68 14
x34781:	mov [bp + 60], ax	; 3: 137 70 60

strftime$172:	; Call 50 sprintf 0
x34784:	mov word [bp + 50], strftime$173	; 5: 199 70 50 243 135
x34789:	mov [bp + 52], bp	; 3: 137 110 52
x34792:	add bp, 50	; 3: 131 197 50
x34795:	mov di, bp	; 2: 137 239
x34797:	add di, 2	; 3: 131 199 2
x34800:	jmp sprintf	; 3: 233 34 252

strftime$173:	; PostCall 50

strftime$174:	; Goto 303
x34803:	jmp strftime$303	; 3: 233 126 2

strftime$175:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$176:	; Parameter 50 add 6
x34806:	mov [bp + 56], bp	; 3: 137 110 56
x34809:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$177:	; Parameter 50 string_2502i# 8
x34813:	mov word [bp + 58], @8187$string_2502i#	; 5: 199 70 58 222 139

strftime$178:	; Deref £temporary3568 -> tp tp 8
x34818:	mov si, [bp + 12]	; 3: 139 118 12

strftime$179:	; BinaryAdd £temporary3569 £temporary3568 -> tp 1
x34821:	mov ax, [si + 8]	; 3: 139 68 8
x34824:	inc ax	; 1: 64

strftime$180:	; Parameter 50 £temporary3569 10
x34825:	mov [bp + 60], ax	; 3: 137 70 60

strftime$181:	; Call 50 sprintf 0
x34828:	mov word [bp + 50], strftime$182	; 5: 199 70 50 31 136
x34833:	mov [bp + 52], bp	; 3: 137 110 52
x34836:	add bp, 50	; 3: 131 197 50
x34839:	mov di, bp	; 2: 137 239
x34841:	add di, 2	; 3: 131 199 2
x34844:	jmp sprintf	; 3: 233 246 251

strftime$182:	; PostCall 50

strftime$183:	; Goto 303
x34847:	jmp strftime$303	; 3: 233 82 2

strftime$184:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$185:	; Parameter 50 add 6
x34850:	mov [bp + 56], bp	; 3: 137 110 56
x34853:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$186:	; Parameter 50 string_2502i# 8
x34857:	mov word [bp + 58], @8195$string_2502i#	; 5: 199 70 58 227 139

strftime$187:	; Deref £temporary3571 -> tp tp 2
x34862:	mov si, [bp + 12]	; 3: 139 118 12

strftime$188:	; Parameter 50 £temporary3571 -> tp 10
x34865:	mov ax, [si + 2]	; 3: 139 68 2
x34868:	mov [bp + 60], ax	; 3: 137 70 60

strftime$189:	; Call 50 sprintf 0
x34871:	mov word [bp + 50], strftime$190	; 5: 199 70 50 74 136
x34876:	mov [bp + 52], bp	; 3: 137 110 52
x34879:	add bp, 50	; 3: 131 197 50
x34882:	mov di, bp	; 2: 137 239
x34884:	add di, 2	; 3: 131 199 2
x34887:	jmp sprintf	; 3: 233 203 251

strftime$190:	; PostCall 50

strftime$191:	; Goto 303
x34890:	jmp strftime$303	; 3: 233 39 2

strftime$192:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$193:	; Parameter 50 add 6
x34893:	mov [bp + 56], bp	; 3: 137 110 56
x34896:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$194:	; Parameter 50 string_25s# 8
x34900:	mov word [bp + 58], @8200$string_25s#	; 5: 199 70 58 232 139

strftime$195:	; Equal 198 index 0
x34905:	cmp word [bp + 24], 0	; 4: 131 126 24 0
x34909:	je strftime$198	; 2: 116 5

strftime$196:	; Assign £temporary3577 string_AM#
x34911:	mov ax, @8201$string_AM#	; 3: 184 235 139

strftime$197:	; Goto 199
x34914:	jmp strftime$199	; 2: 235 3

strftime$198:	; Assign £temporary3577 string_PM#
x34916:	mov ax, @8202$string_PM#	; 3: 184 238 139

strftime$199:	; Parameter 50 £temporary3577 10
x34919:	mov [bp + 60], ax	; 3: 137 70 60

strftime$200:	; Call 50 sprintf 0
x34922:	mov word [bp + 50], strftime$201	; 5: 199 70 50 125 136
x34927:	mov [bp + 52], bp	; 3: 137 110 52
x34930:	add bp, 50	; 3: 131 197 50
x34933:	mov di, bp	; 2: 137 239
x34935:	add di, 2	; 3: 131 199 2
x34938:	jmp sprintf	; 3: 233 152 251

strftime$201:	; PostCall 50

strftime$202:	; Goto 303
x34941:	jmp strftime$303	; 3: 233 244 1

strftime$203:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$204:	; Parameter 50 add 6
x34944:	mov [bp + 56], bp	; 3: 137 110 56
x34947:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$205:	; Parameter 50 string_2502i# 8
x34951:	mov word [bp + 58], @8214$string_2502i#	; 5: 199 70 58 241 139

strftime$206:	; Deref £temporary3579 -> tp tp 0
x34956:	mov si, [bp + 12]	; 3: 139 118 12

strftime$207:	; Parameter 50 £temporary3579 -> tp 10
x34959:	mov ax, [si]	; 2: 139 4
x34961:	mov [bp + 60], ax	; 3: 137 70 60

strftime$208:	; Call 50 sprintf 0
x34964:	mov word [bp + 50], strftime$209	; 5: 199 70 50 167 136
x34969:	mov [bp + 52], bp	; 3: 137 110 52
x34972:	add bp, 50	; 3: 131 197 50
x34975:	mov di, bp	; 2: 137 239
x34977:	add di, 2	; 3: 131 199 2
x34980:	jmp sprintf	; 3: 233 110 251

strftime$209:	; PostCall 50

strftime$210:	; Goto 303
x34983:	jmp strftime$303	; 3: 233 202 1

strftime$211:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$212:	; Parameter 50 add 6
x34986:	mov [bp + 56], bp	; 3: 137 110 56
x34989:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$213:	; Parameter 50 string_2502i# 8
x34993:	mov word [bp + 58], @8219$string_2502i#	; 5: 199 70 58 246 139

strftime$214:	; Parameter 50 weekNumberStartSunday 10
x34998:	mov ax, [bp + 26]	; 3: 139 70 26
x35001:	mov [bp + 60], ax	; 3: 137 70 60

strftime$215:	; Call 50 sprintf 0
x35004:	mov word [bp + 50], strftime$216	; 5: 199 70 50 207 136
x35009:	mov [bp + 52], bp	; 3: 137 110 52
x35012:	add bp, 50	; 3: 131 197 50
x35015:	mov di, bp	; 2: 137 239
x35017:	add di, 2	; 3: 131 199 2
x35020:	jmp sprintf	; 3: 233 70 251

strftime$216:	; PostCall 50

strftime$217:	; Goto 303
x35023:	jmp strftime$303	; 3: 233 162 1

strftime$218:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$219:	; Parameter 50 add 6
x35026:	mov [bp + 56], bp	; 3: 137 110 56
x35029:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$220:	; Parameter 50 string_2502i# 8
x35033:	mov word [bp + 58], @8223$string_2502i#	; 5: 199 70 58 251 139

strftime$221:	; Deref £temporary3582 -> tp tp 12
x35038:	mov si, [bp + 12]	; 3: 139 118 12

strftime$222:	; Parameter 50 £temporary3582 -> tp 10
x35041:	mov ax, [si + 12]	; 3: 139 68 12
x35044:	mov [bp + 60], ax	; 3: 137 70 60

strftime$223:	; Call 50 sprintf 0
x35047:	mov word [bp + 50], strftime$224	; 5: 199 70 50 250 136
x35052:	mov [bp + 52], bp	; 3: 137 110 52
x35055:	add bp, 50	; 3: 131 197 50
x35058:	mov di, bp	; 2: 137 239
x35060:	add di, 2	; 3: 131 199 2
x35063:	jmp sprintf	; 3: 233 27 251

strftime$224:	; PostCall 50

strftime$225:	; Goto 303
x35066:	jmp strftime$303	; 3: 233 119 1

strftime$226:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$227:	; Parameter 50 add 6
x35069:	mov [bp + 56], bp	; 3: 137 110 56
x35072:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$228:	; Parameter 50 string_2502i# 8
x35076:	mov word [bp + 58], @8228$string_2502i#	; 5: 199 70 58 0 140

strftime$229:	; Parameter 50 weekNumberStartMonday 10
x35081:	mov ax, [bp + 28]	; 3: 139 70 28
x35084:	mov [bp + 60], ax	; 3: 137 70 60

strftime$230:	; Call 50 sprintf 0
x35087:	mov word [bp + 50], strftime$231	; 5: 199 70 50 34 137
x35092:	mov [bp + 52], bp	; 3: 137 110 52
x35095:	add bp, 50	; 3: 131 197 50
x35098:	mov di, bp	; 2: 137 239
x35100:	add di, 2	; 3: 131 199 2
x35103:	jmp sprintf	; 3: 233 243 250

strftime$231:	; PostCall 50

strftime$232:	; Goto 303
x35106:	jmp strftime$303	; 3: 233 79 1

strftime$233:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$234:	; Parameter 50 add 6
x35109:	mov [bp + 56], bp	; 3: 137 110 56
x35112:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$235:	; Parameter 50 string_2502i3A2502i3A2502i# 8
x35116:	mov word [bp + 58], @8232$string_2502i3A2502i3A2502i#	; 5: 199 70 58 5 140

strftime$236:	; Deref £temporary3585 -> tp tp 4
x35121:	mov si, [bp + 12]	; 3: 139 118 12

strftime$237:	; Parameter 50 £temporary3585 -> tp 10
x35124:	mov ax, [si + 4]	; 3: 139 68 4
x35127:	mov [bp + 60], ax	; 3: 137 70 60

strftime$238:	; Deref £temporary3586 -> tp tp 2
x35130:	mov si, [bp + 12]	; 3: 139 118 12

strftime$239:	; Parameter 50 £temporary3586 -> tp 12
x35133:	mov ax, [si + 2]	; 3: 139 68 2
x35136:	mov [bp + 62], ax	; 3: 137 70 62

strftime$240:	; Deref £temporary3587 -> tp tp 0
x35139:	mov si, [bp + 12]	; 3: 139 118 12

strftime$241:	; Parameter 50 £temporary3587 -> tp 14
x35142:	mov ax, [si]	; 2: 139 4
x35144:	mov [bp + 64], ax	; 3: 137 70 64

strftime$242:	; Call 50 sprintf 0
x35147:	mov word [bp + 50], strftime$243	; 5: 199 70 50 94 137
x35152:	mov [bp + 52], bp	; 3: 137 110 52
x35155:	add bp, 50	; 3: 131 197 50
x35158:	mov di, bp	; 2: 137 239
x35160:	add di, 6	; 3: 131 199 6
x35163:	jmp sprintf	; 3: 233 183 250

strftime$243:	; PostCall 50

strftime$244:	; Goto 303
x35166:	jmp strftime$303	; 3: 233 19 1

strftime$245:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$246:	; Parameter 50 add 6
x35169:	mov [bp + 56], bp	; 3: 137 110 56
x35172:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$247:	; Parameter 50 string_2502i3A2502i3A2502i# 8
x35176:	mov word [bp + 58], @8239$string_2502i3A2502i3A2502i#	; 5: 199 70 58 20 140

strftime$248:	; Deref £temporary3589 -> tp tp 4
x35181:	mov si, [bp + 12]	; 3: 139 118 12

strftime$249:	; Parameter 50 £temporary3589 -> tp 10
x35184:	mov ax, [si + 4]	; 3: 139 68 4
x35187:	mov [bp + 60], ax	; 3: 137 70 60

strftime$250:	; Deref £temporary3590 -> tp tp 2
x35190:	mov si, [bp + 12]	; 3: 139 118 12

strftime$251:	; Parameter 50 £temporary3590 -> tp 12
x35193:	mov ax, [si + 2]	; 3: 139 68 2
x35196:	mov [bp + 62], ax	; 3: 137 70 62

strftime$252:	; Deref £temporary3591 -> tp tp 0
x35199:	mov si, [bp + 12]	; 3: 139 118 12

strftime$253:	; Parameter 50 £temporary3591 -> tp 14
x35202:	mov ax, [si]	; 2: 139 4
x35204:	mov [bp + 64], ax	; 3: 137 70 64

strftime$254:	; Call 50 sprintf 0
x35207:	mov word [bp + 50], strftime$255	; 5: 199 70 50 154 137
x35212:	mov [bp + 52], bp	; 3: 137 110 52
x35215:	add bp, 50	; 3: 131 197 50
x35218:	mov di, bp	; 2: 137 239
x35220:	add di, 6	; 3: 131 199 6
x35223:	jmp sprintf	; 3: 233 123 250

strftime$255:	; PostCall 50

strftime$256:	; Goto 303
x35226:	jmp strftime$303	; 3: 233 215 0

strftime$257:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$258:	; Parameter 50 add 6
x35229:	mov [bp + 56], bp	; 3: 137 110 56
x35232:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$259:	; Parameter 50 string_2502i# 8
x35236:	mov word [bp + 58], @8246$string_2502i#	; 5: 199 70 58 35 140

strftime$260:	; Deref £temporary3593 -> tp tp 10
x35241:	mov si, [bp + 12]	; 3: 139 118 12

strftime$261:	; SignedModulo £temporary3594 £temporary3593 -> tp 100
x35244:	mov ax, [si + 10]	; 3: 139 68 10
x35247:	xor dx, dx	; 2: 49 210
x35249:	idiv word [@8249$int2$100#]	; 4: 247 62 40 140

strftime$262:	; Parameter 50 £temporary3594 10
x35253:	mov [bp + 60], dx	; 3: 137 86 60

strftime$263:	; Call 50 sprintf 0
x35256:	mov word [bp + 50], strftime$264	; 5: 199 70 50 203 137
x35261:	mov [bp + 52], bp	; 3: 137 110 52
x35264:	add bp, 50	; 3: 131 197 50
x35267:	mov di, bp	; 2: 137 239
x35269:	add di, 2	; 3: 131 199 2
x35272:	jmp sprintf	; 3: 233 74 250

strftime$264:	; PostCall 50

strftime$265:	; Goto 303
x35275:	jmp strftime$303	; 3: 233 166 0

strftime$266:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$267:	; Parameter 50 add 6
x35278:	mov [bp + 56], bp	; 3: 137 110 56
x35281:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$268:	; Parameter 50 string_2502i# 8
x35285:	mov word [bp + 58], @8254$string_2502i#	; 5: 199 70 58 42 140

strftime$269:	; Deref £temporary3596 -> tp tp 10
x35290:	mov si, [bp + 12]	; 3: 139 118 12

strftime$270:	; BinaryAdd £temporary3597 £temporary3596 -> tp 1900
x35293:	mov ax, [si + 10]	; 3: 139 68 10
x35296:	add ax, 1900	; 3: 5 108 7

strftime$271:	; Parameter 50 £temporary3597 10
x35299:	mov [bp + 60], ax	; 3: 137 70 60

strftime$272:	; Call 50 sprintf 0
x35302:	mov word [bp + 50], strftime$273	; 5: 199 70 50 249 137
x35307:	mov [bp + 52], bp	; 3: 137 110 52
x35310:	add bp, 50	; 3: 131 197 50
x35313:	mov di, bp	; 2: 137 239
x35315:	add di, 2	; 3: 131 199 2
x35318:	jmp sprintf	; 3: 233 28 250

strftime$273:	; PostCall 50

strftime$274:	; Goto 303
x35321:	jmp strftime$303	; 2: 235 121

strftime$275:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$276:	; Parameter 50 add 6
x35323:	mov [bp + 56], bp	; 3: 137 110 56
x35326:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$277:	; Deref £temporary3599 -> tp tp 16
x35330:	mov si, [bp + 12]	; 3: 139 118 12

strftime$278:	; Equal 281 £temporary3599 -> tp 0
x35333:	cmp word [si + 16], 0	; 4: 131 124 16 0
x35337:	je strftime$281	; 2: 116 5

strftime$279:	; Assign £temporary3604 string_summer#
x35339:	mov ax, @8263$string_summer#	; 3: 184 47 140

strftime$280:	; Goto 282
x35342:	jmp strftime$282	; 2: 235 3

strftime$281:	; Assign £temporary3604 string_winter#
x35344:	mov ax, @8264$string_winter#	; 3: 184 54 140

strftime$282:	; Parameter 50 £temporary3604 8
x35347:	mov [bp + 58], ax	; 3: 137 70 58

strftime$283:	; Call 50 strcpy 0
x35350:	mov word [bp + 50], strftime$284	; 5: 199 70 50 36 138
x35355:	mov [bp + 52], bp	; 3: 137 110 52
x35358:	add bp, 50	; 3: 131 197 50
x35361:	jmp strcpy	; 3: 233 26 212

strftime$284:	; PostCall 50

strftime$285:	; Goto 303
x35364:	jmp strftime$303	; 2: 235 78

strftime$286:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$287:	; Parameter 50 add 6
x35366:	mov [bp + 56], bp	; 3: 137 110 56
x35369:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$288:	; Parameter 50 string_25# 8
x35373:	mov word [bp + 58], @8276$string_25#	; 5: 199 70 58 61 140

strftime$289:	; Call 50 strcpy 0
x35378:	mov word [bp + 50], strftime$290	; 5: 199 70 50 64 138
x35383:	mov [bp + 52], bp	; 3: 137 110 52
x35386:	add bp, 50	; 3: 131 197 50
x35389:	jmp strcpy	; 3: 233 254 211

strftime$290:	; PostCall 50

strftime$291:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$292:	; Parameter 50 add 6
x35392:	mov [bp + 56], bp	; 3: 137 110 56
x35395:	add word [bp + 56], 30	; 4: 131 70 56 30

strftime$293:	; Parameter 50 string_# 8
x35399:	mov word [bp + 58], @8278$string_#	; 5: 199 70 58 63 140

strftime$294:	; Call 50 strcpy 0
x35404:	mov word [bp + 50], strftime$295	; 5: 199 70 50 90 138
x35409:	mov [bp + 52], bp	; 3: 137 110 52
x35412:	add bp, 50	; 3: 131 197 50
x35415:	jmp strcpy	; 3: 233 228 211

strftime$295:	; PostCall 50

strftime$296:	; Goto 303
x35418:	jmp strftime$303	; 2: 235 24

strftime$297:	; Deref £temporary3608 -> add add 0
x35420:	mov si, bp	; 2: 137 238
x35422:	add si, 30	; 3: 131 198 30

strftime$298:	; BinaryAdd £temporary3610 format index
x35425:	mov di, [bp + 10]	; 3: 139 126 10
x35428:	add di, [bp + 24]	; 3: 3 126 24

strftime$299:	; Deref £temporary3609 -> £temporary3610 £temporary3610 0

strftime$300:	; Assign £temporary3608 -> add £temporary3609 -> £temporary3610
x35431:	mov al, [di]	; 2: 138 5
x35433:	mov [si], al	; 2: 136 4

strftime$301:	; Deref £temporary3611 -> add add 1
x35435:	mov si, bp	; 2: 137 238
x35437:	add si, 30	; 3: 131 198 30

strftime$302:	; Assign £temporary3611 -> add 0
x35440:	mov byte [si + 1], 0	; 4: 198 68 1 0

strftime$303:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$304:	; Parameter 50 result 6
x35444:	mov ax, [bp + 6]	; 3: 139 70 6
x35447:	mov [bp + 56], ax	; 3: 137 70 56

strftime$305:	; Call 50 strlen 0
x35450:	mov word [bp + 50], strftime$306	; 5: 199 70 50 136 138
x35455:	mov [bp + 52], bp	; 3: 137 110 52
x35458:	add bp, 50	; 3: 131 197 50
x35461:	jmp strlen	; 3: 233 115 2

strftime$306:	; PostCall 50

strftime$307:	; GetReturnValue £temporary3612

strftime$308:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0
x35464:	mov [bp + 50], bx	; 3: 137 94 50

strftime$309:	; Parameter 50 add 6
x35467:	mov [bp + 58], bp	; 3: 137 110 58
x35470:	add word [bp + 58], 30	; 4: 131 70 58 30

strftime$310:	; Call 50 strlen 0
x35474:	mov word [bp + 52], strftime$311	; 5: 199 70 52 160 138
x35479:	mov [bp + 54], bp	; 3: 137 110 54
x35482:	add bp, 52	; 3: 131 197 52
x35485:	jmp strlen	; 3: 233 91 2

strftime$311:	; PostCall 50
x35488:	mov ax, bx	; 2: 137 216
x35490:	mov bx, [bp + 50]	; 3: 139 94 50

strftime$312:	; GetReturnValue £temporary3613

strftime$313:	; BinaryAdd £temporary3614 £temporary3612 £temporary3613
x35493:	add bx, ax	; 2: 1 195

strftime$314:	; SignedGreaterThanEqual 322 £temporary3614 maxSize
x35495:	cmp bx, [bp + 8]	; 3: 59 94 8
x35498:	jge strftime$322	; 2: 125 33

strftime$315:	; CallHeader 50 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$316:	; Parameter 50 result 6
x35500:	mov ax, [bp + 6]	; 3: 139 70 6
x35503:	mov [bp + 56], ax	; 3: 137 70 56

strftime$317:	; Parameter 50 add 8
x35506:	mov [bp + 58], bp	; 3: 137 110 58
x35509:	add word [bp + 58], 30	; 4: 131 70 58 30

strftime$318:	; Call 50 strcat 0
x35513:	mov word [bp + 50], strftime$319	; 5: 199 70 50 199 138
x35518:	mov [bp + 52], bp	; 3: 137 110 52
x35521:	add bp, 50	; 3: 131 197 50
x35524:	jmp strcat	; 3: 233 87 2

strftime$319:	; PostCall 50

strftime$320:	; Increment index
x35527:	inc word [bp + 24]	; 3: 255 70 24

strftime$321:	; Goto 49
x35530:	jmp strftime$49	; 3: 233 184 250

strftime$322:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strftime$323:	; Parameter 24 result 6
x35533:	mov ax, [bp + 6]	; 3: 139 70 6
x35536:	mov [bp + 30], ax	; 3: 137 70 30

strftime$324:	; Call 24 strlen 0
x35539:	mov word [bp + 24], strftime$325	; 5: 199 70 24 225 138
x35544:	mov [bp + 26], bp	; 3: 137 110 26
x35547:	add bp, 24	; 3: 131 197 24
x35550:	jmp strlen	; 3: 233 26 2

strftime$325:	; PostCall 24

strftime$326:	; GetReturnValue £temporary3617

strftime$327:	; SetReturnValue £temporary3617

strftime$328:	; Return £temporary3617
x35553:	mov ax, [bp]	; 3: 139 70 0
x35556:	mov di, [bp + 4]	; 3: 139 126 4
x35559:	mov bp, [bp + 2]	; 3: 139 110 2
x35562:	jmp ax	; 2: 255 224

strftime$329:	; FunctionEnd strftime

@7888$g_longDayList:
x35564:	dw @7881$string_Sunday# ; 2: 250 138
x35566:	dw @7882$string_Monday# ; 2: 1 139
x35568:	dw @7883$string_Tuesday# ; 2: 8 139
x35570:	dw @7884$string_Wednesday# ; 2: 16 139
x35572:	dw @7885$string_Thursday# ; 2: 26 139
x35574:	dw @7886$string_Friday# ; 2: 35 139
x35576:	dw @7887$string_Saturday# ; 2: 42 139

@7881$string_Sunday#:
x35578:	db "Sunday", 0	; 7: 83 117 110 100 97 121 0

@7882$string_Monday#:
x35585:	db "Monday", 0	; 7: 77 111 110 100 97 121 0

@7883$string_Tuesday#:
x35592:	db "Tuesday", 0	; 8: 84 117 101 115 100 97 121 0

@7884$string_Wednesday#:
x35600:	db "Wednesday", 0	; 10: 87 101 100 110 101 115 100 97 121 0

@7885$string_Thursday#:
x35610:	db "Thursday", 0	; 9: 84 104 117 114 115 100 97 121 0

@7886$string_Friday#:
x35619:	db "Friday", 0	; 7: 70 114 105 100 97 121 0

@7887$string_Saturday#:
x35626:	db "Saturday", 0	; 9: 83 97 116 117 114 100 97 121 0

@7914$g_longMonthList:
x35635:	dw @7902$string_January# ; 2: 75 139
x35637:	dw @7903$string_February# ; 2: 83 139
x35639:	dw @7904$string_March# ; 2: 92 139
x35641:	dw @7905$string_April# ; 2: 98 139
x35643:	dw @7906$string_May# ; 2: 104 139
x35645:	dw @7907$string_June# ; 2: 108 139
x35647:	dw @7908$string_July# ; 2: 113 139
x35649:	dw @7909$string_August# ; 2: 118 139
x35651:	dw @7910$string_September# ; 2: 125 139
x35653:	dw @7911$string_October# ; 2: 135 139
x35655:	dw @7912$string_November# ; 2: 143 139
x35657:	dw @7913$string_December# ; 2: 152 139

@7902$string_January#:
x35659:	db "January", 0	; 8: 74 97 110 117 97 114 121 0

@7903$string_February#:
x35667:	db "February", 0	; 9: 70 101 98 114 117 97 114 121 0

@7904$string_March#:
x35676:	db "March", 0	; 6: 77 97 114 99 104 0

@7905$string_April#:
x35682:	db "April", 0	; 6: 65 112 114 105 108 0

@7906$string_May#:
x35688:	db "May", 0	; 4: 77 97 121 0

@7907$string_June#:
x35692:	db "June", 0	; 5: 74 117 110 101 0

@7908$string_July#:
x35697:	db "July", 0	; 5: 74 117 108 121 0

@7909$string_August#:
x35702:	db "August", 0	; 7: 65 117 103 117 115 116 0

@7910$string_September#:
x35709:	db "September", 0	; 10: 83 101 112 116 101 109 98 101 114 0

@7911$string_October#:
x35719:	db "October", 0	; 8: 79 99 116 111 98 101 114 0

@7912$string_November#:
x35727:	db "November", 0	; 9: 78 111 118 101 109 98 101 114 0

@7913$string_December#:
x35736:	db "December", 0	; 9: 68 101 99 101 109 98 101 114 0

@8078$string_#:
x35745:	db 0	; 1: 0

@8118$int2$2#:
x35746:	dw 2	; 2: 2 0

@8126$int2$2#:
x35748:	dw 2	; 2: 2 0

@8134$int2$2#:
x35750:	dw 2	; 2: 2 0

@8142$int2$2#:
x35752:	dw 2	; 2: 2 0

@8148$string_2502i2D2502i2D2502i202502i3A2502i3A2502i#:
x35754:	db "%02i-%02i-%02i %02i:%02i:%02i", 0	; 30: 37 48 50 105 45 37 48 50 105 45 37 48 50 105 32 37 48 50 105 58 37 48 50 105 58 37 48 50 105 0

@8164$string_2502i#:
x35784:	db "%02i", 0	; 5: 37 48 50 105 0

@8169$string_2502i#:
x35789:	db "%02i", 0	; 5: 37 48 50 105 0

@8174$string_2502i#:
x35794:	db "%02i", 0	; 5: 37 48 50 105 0

@8177$int2$12#:
x35799:	dw 12	; 2: 12 0

@8182$string_2503i#:
x35801:	db "%03i", 0	; 5: 37 48 51 105 0

@8187$string_2502i#:
x35806:	db "%02i", 0	; 5: 37 48 50 105 0

@8195$string_2502i#:
x35811:	db "%02i", 0	; 5: 37 48 50 105 0

@8200$string_25s#:
x35816:	db "%s", 0	; 3: 37 115 0

@8201$string_AM#:
x35819:	db "AM", 0	; 3: 65 77 0

@8202$string_PM#:
x35822:	db "PM", 0	; 3: 80 77 0

@8214$string_2502i#:
x35825:	db "%02i", 0	; 5: 37 48 50 105 0

@8219$string_2502i#:
x35830:	db "%02i", 0	; 5: 37 48 50 105 0

@8223$string_2502i#:
x35835:	db "%02i", 0	; 5: 37 48 50 105 0

@8228$string_2502i#:
x35840:	db "%02i", 0	; 5: 37 48 50 105 0

@8232$string_2502i3A2502i3A2502i#:
x35845:	db "%02i:%02i:%02i", 0	; 15: 37 48 50 105 58 37 48 50 105 58 37 48 50 105 0

@8239$string_2502i3A2502i3A2502i#:
x35860:	db "%02i:%02i:%02i", 0	; 15: 37 48 50 105 58 37 48 50 105 58 37 48 50 105 0

@8246$string_2502i#:
x35875:	db "%02i", 0	; 5: 37 48 50 105 0

@8249$int2$100#:
x35880:	dw 100	; 2: 100 0

@8254$string_2502i#:
x35882:	db "%02i", 0	; 5: 37 48 50 105 0

@8263$string_summer#:
x35887:	db "summer", 0	; 7: 115 117 109 109 101 114 0

@8264$string_winter#:
x35894:	db "winter", 0	; 7: 119 105 110 116 101 114 0

@8276$string_25#:
x35901:	db "%", 0	; 2: 37 0

@8278$string_#:
x35903:	db 0	; 1: 0

getWeekNumber:	; Deref £temporary3473 -> tp tp 10
x35904:	mov si, [bp + 6]	; 3: 139 118 6

getWeekNumber$1:	; BinarySubtract £temporary3474 £temporary3473 -> tp 69
x35907:	mov ax, [si + 10]	; 3: 139 68 10
x35910:	sub ax, 69	; 3: 131 232 69

getWeekNumber$2:	; SignedDivide £temporary3475 £temporary3474 4
x35913:	xor dx, dx	; 2: 49 210
x35915:	idiv word [@7983$int2$4#]	; 4: 247 62 243 140

getWeekNumber$3:	; IntegralToIntegral £temporary3476 £temporary3475
x35919:	and eax, 65535	; 6: 102 37 255 255 0 0
x35925:	cmp ax, 0	; 3: 131 248 0
x35928:	jge getWeekNumber$4	; 2: 125 5
x35930:	neg ax	; 2: 247 216
x35932:	neg eax	; 3: 102 247 216

getWeekNumber$4:	; Assign leapDays £temporary3476
x35935:	mov [bp + 8], eax	; 4: 102 137 70 8

getWeekNumber$5:	; Deref £temporary3477 -> tp tp 10
x35939:	mov si, [bp + 6]	; 3: 139 118 6

getWeekNumber$6:	; BinarySubtract £temporary3478 £temporary3477 -> tp 70
x35942:	mov ax, [si + 10]	; 3: 139 68 10
x35945:	sub ax, 70	; 3: 131 232 70

getWeekNumber$7:	; SignedMultiply £temporary3479 £temporary3478 365
x35948:	xor dx, dx	; 2: 49 210
x35950:	imul word [@7992$int2$365#]	; 4: 247 46 245 140

getWeekNumber$8:	; IntegralToIntegral £temporary3480 £temporary3479
x35954:	and eax, 65535	; 6: 102 37 255 255 0 0
x35960:	cmp ax, 0	; 3: 131 248 0
x35963:	jge getWeekNumber$9	; 2: 125 5
x35965:	neg ax	; 2: 247 216
x35967:	neg eax	; 3: 102 247 216

getWeekNumber$9:	; BinaryAdd £temporary3481 £temporary3480 leapDays
x35970:	add eax, [bp + 8]	; 4: 102 3 70 8

getWeekNumber$10:	; IntegralToIntegral £temporary3482 £temporary3481
x35974:	cmp eax, 0	; 4: 102 131 248 0
x35978:	jge getWeekNumber$11	; 2: 125 5
x35980:	neg eax	; 3: 102 247 216
x35983:	neg ax	; 2: 247 216

getWeekNumber$11:	; Assign totalDays £temporary3482
x35985:	mov [bp + 12], ax	; 3: 137 70 12

getWeekNumber$12:	; SignedGreaterThanEqual 15 totalDays 3
x35988:	cmp word [bp + 12], 3	; 4: 131 126 12 3
x35992:	jge getWeekNumber$15	; 2: 125 11

getWeekNumber$13:	; BinaryAdd weekDayJanuaryFirst totalDays 4
x35994:	mov ax, [bp + 12]	; 3: 139 70 12
x35997:	add ax, 4	; 3: 131 192 4
x36000:	mov [bp + 14], ax	; 3: 137 70 14

getWeekNumber$14:	; Goto 17
x36003:	jmp getWeekNumber$17	; 2: 235 15

getWeekNumber$15:	; BinarySubtract £temporary3485 totalDays 3
x36005:	mov ax, [bp + 12]	; 3: 139 70 12
x36008:	sub ax, 3	; 3: 131 232 3

getWeekNumber$16:	; SignedModulo weekDayJanuaryFirst £temporary3485 7
x36011:	xor dx, dx	; 2: 49 210
x36013:	idiv word [@8009$int2$7#]	; 4: 247 62 247 140
x36017:	mov [bp + 14], dx	; 3: 137 86 14

getWeekNumber$17:	; BinarySubtract firstWeekSize 7 weekDayJanuaryFirst
x36020:	mov ax, 7	; 3: 184 7 0
x36023:	sub ax, [bp + 14]	; 3: 43 70 14
x36026:	mov [bp + 16], ax	; 3: 137 70 16

getWeekNumber$18:	; Deref £temporary3488 -> tp tp 14
x36029:	mov si, [bp + 6]	; 3: 139 118 6

getWeekNumber$19:	; SignedGreaterThanEqual 22 £temporary3488 -> tp firstWeekSize
x36032:	mov ax, [bp + 16]	; 3: 139 70 16
x36035:	cmp [si + 14], ax	; 3: 57 68 14
x36038:	jge getWeekNumber$22	; 2: 125 14

getWeekNumber$20:	; SetReturnValue 0
x36040:	mov bx, 0	; 3: 187 0 0

getWeekNumber$21:	; Return 0
x36043:	mov ax, [bp]	; 3: 139 70 0
x36046:	mov di, [bp + 4]	; 3: 139 126 4
x36049:	mov bp, [bp + 2]	; 3: 139 110 2
x36052:	jmp ax	; 2: 255 224

getWeekNumber$22:	; Deref £temporary3490 -> tp tp 14
x36054:	mov si, [bp + 6]	; 3: 139 118 6

getWeekNumber$23:	; BinarySubtract £temporary3491 £temporary3490 -> tp firstWeekSize
x36057:	mov ax, [si + 14]	; 3: 139 68 14
x36060:	sub ax, [bp + 16]	; 3: 43 70 16

getWeekNumber$24:	; SignedDivide £temporary3492 £temporary3491 7
x36063:	xor dx, dx	; 2: 49 210
x36065:	idiv word [@8022$int2$7#]	; 4: 247 62 249 140

getWeekNumber$25:	; BinaryAdd £temporary3493 £temporary3492 1
x36069:	inc ax	; 1: 64

getWeekNumber$26:	; SetReturnValue £temporary3493
x36070:	mov bx, ax	; 2: 137 195

getWeekNumber$27:	; Return £temporary3493
x36072:	mov ax, [bp]	; 3: 139 70 0
x36075:	mov di, [bp + 4]	; 3: 139 126 4
x36078:	mov bp, [bp + 2]	; 3: 139 110 2
x36081:	jmp ax	; 2: 255 224

getWeekNumber$28:	; FunctionEnd getWeekNumber

@7983$int2$4#:
x36083:	dw 4	; 2: 4 0

@7992$int2$365#:
x36085:	dw 365	; 2: 109 1

@8009$int2$7#:
x36087:	dw 7	; 2: 7 0

@8022$int2$7#:
x36089:	dw 7	; 2: 7 0

strlen:	; Assign index 0
x36091:	mov word [bp + 8], 0	; 5: 199 70 8 0 0

strlen$1:	; BinaryAdd £temporary3865 string index
x36096:	mov si, [bp + 6]	; 3: 139 118 6
x36099:	add si, [bp + 8]	; 3: 3 118 8

strlen$2:	; Deref £temporary3864 -> £temporary3865 £temporary3865 0

strlen$3:	; Equal 6 £temporary3864 -> £temporary3865 0
x36102:	cmp byte [si], 0	; 3: 128 60 0
x36105:	je strlen$6	; 2: 116 5

strlen$4:	; Increment index
x36107:	inc word [bp + 8]	; 3: 255 70 8

strlen$5:	; Goto 1
x36110:	jmp strlen$1	; 2: 235 240

strlen$6:	; SetReturnValue index
x36112:	mov bx, [bp + 8]	; 3: 139 94 8

strlen$7:	; Return index
x36115:	mov ax, [bp]	; 3: 139 70 0
x36118:	mov di, [bp + 4]	; 3: 139 126 4
x36121:	mov bp, [bp + 2]	; 3: 139 110 2
x36124:	jmp ax	; 2: 255 224

strlen$8:	; FunctionEnd strlen

strcat:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strcat$1:	; Parameter 12 target 6
x36126:	mov ax, [bp + 6]	; 3: 139 70 6
x36129:	mov [bp + 18], ax	; 3: 137 70 18

strcat$2:	; Call 12 strlen 0
x36132:	mov word [bp + 12], strcat$3	; 5: 199 70 12 50 141
x36137:	mov [bp + 14], bp	; 3: 137 110 14
x36140:	add bp, 12	; 3: 131 197 12
x36143:	nop	; 1: 144
x36144:	jmp strlen	; 2: 235 201

strcat$3:	; PostCall 12

strcat$4:	; GetReturnValue £temporary3721

strcat$5:	; Assign targetLength £temporary3721
x36146:	mov [bp + 12], bx	; 3: 137 94 12

strcat$6:	; Assign index 0
x36149:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strcat$7:	; BinaryAdd £temporary3723 source index
x36154:	mov si, [bp + 8]	; 3: 139 118 8
x36157:	add si, [bp + 10]	; 3: 3 118 10

strcat$8:	; Deref £temporary3722 -> £temporary3723 £temporary3723 0

strcat$9:	; Equal 18 £temporary3722 -> £temporary3723 0
x36160:	cmp byte [si], 0	; 3: 128 60 0
x36163:	je strcat$18	; 2: 116 26

strcat$10:	; BinaryAdd £temporary3726 targetLength index
x36165:	mov ax, [bp + 12]	; 3: 139 70 12
x36168:	add ax, [bp + 10]	; 3: 3 70 10

strcat$11:	; BinaryAdd £temporary3728 target £temporary3726
x36171:	mov si, [bp + 6]	; 3: 139 118 6
x36174:	add si, ax	; 2: 1 198

strcat$12:	; Deref £temporary3727 -> £temporary3728 £temporary3728 0

strcat$13:	; BinaryAdd £temporary3730 source index
x36176:	mov di, [bp + 8]	; 3: 139 126 8
x36179:	add di, [bp + 10]	; 3: 3 126 10

strcat$14:	; Deref £temporary3729 -> £temporary3730 £temporary3730 0

strcat$15:	; Assign £temporary3727 -> £temporary3728 £temporary3729 -> £temporary3730
x36182:	mov al, [di]	; 2: 138 5
x36184:	mov [si], al	; 2: 136 4

strcat$16:	; Increment index
x36186:	inc word [bp + 10]	; 3: 255 70 10

strcat$17:	; Goto 7
x36189:	jmp strcat$7	; 2: 235 219

strcat$18:	; BinaryAdd £temporary3731 targetLength index
x36191:	mov ax, [bp + 12]	; 3: 139 70 12
x36194:	add ax, [bp + 10]	; 3: 3 70 10

strcat$19:	; BinaryAdd £temporary3733 target £temporary3731
x36197:	mov si, [bp + 6]	; 3: 139 118 6
x36200:	add si, ax	; 2: 1 198

strcat$20:	; Deref £temporary3732 -> £temporary3733 £temporary3733 0

strcat$21:	; Assign £temporary3732 -> £temporary3733 0
x36202:	mov byte [si], 0	; 3: 198 4 0

strcat$22:	; SetReturnValue target
x36205:	mov bx, [bp + 6]	; 3: 139 94 6

strcat$23:	; Return target
x36208:	mov ax, [bp]	; 3: 139 70 0
x36211:	mov di, [bp + 4]	; 3: 139 126 4
x36214:	mov bp, [bp + 2]	; 3: 139 110 2
x36217:	jmp ax	; 2: 255 224

strcat$24:	; FunctionEnd strcat

assert_test:	; Assign n 1
x36219:	mov word [bp + 6], 1	; 5: 199 70 6 1 0

assert_test$1:	; Equal 13 n 1
x36224:	cmp word [bp + 6], 1	; 4: 131 126 6 1
x36228:	je assert_test$13	; 2: 116 59

assert_test$2:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

assert_test$3:	; Parameter 8 stderr 6
x36230:	mov ax, [stderr]	; 3: 161 136 77
x36233:	mov [bp + 14], ax	; 3: 137 70 14

assert_test$4:	; Parameter 8 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x36236:	mov word [bp + 16], @9614$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 16 204 141

assert_test$5:	; Parameter 8 string_n203D3D201# 10
x36241:	mov word [bp + 18], @9615$string_n203D3D201#	; 5: 199 70 18 250 141

assert_test$6:	; Parameter 8 string_C3A5CUsers5Cstefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CAssertTest2Ec# 12
x36246:	mov word [bp + 20], @9616$string_C3A5CUsers5Cstefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CAssertTest2Ec#	; 5: 199 70 20 1 142

assert_test$7:	; Parameter 8 8 14
x36251:	mov word [bp + 22], 8	; 5: 199 70 22 8 0

assert_test$8:	; Call 8 fprintf 0
x36256:	mov word [bp + 8], assert_test$9	; 5: 199 70 8 179 141
x36261:	mov [bp + 10], bp	; 3: 137 110 10
x36264:	add bp, 8	; 3: 131 197 8
x36267:	mov di, bp	; 2: 137 239
x36269:	add di, 6	; 3: 131 199 6
x36272:	jmp fprintf	; 3: 233 199 208

assert_test$9:	; PostCall 8

assert_test$10:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

assert_test$11:	; Call 8 abort 0
x36275:	mov word [bp + 8], assert_test$12	; 5: 199 70 8 193 141
x36280:	mov [bp + 10], bp	; 3: 137 110 10
x36283:	add bp, 8	; 3: 131 197 8
x36286:	jmp abort	; 3: 233 244 208

assert_test$12:	; PostCall 8

assert_test$13:	; Return 0
x36289:	mov ax, [bp]	; 3: 139 70 0
x36292:	mov di, [bp + 4]	; 3: 139 126 4
x36295:	mov bp, [bp + 2]	; 3: 139 110 2
x36298:	jmp ax	; 2: 255 224

assert_test$14:	; FunctionEnd assert_test

@9614$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x36300:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@9615$string_n203D3D201#:
x36346:	db "n == 1", 0	; 7: 110 32 61 61 32 49 0

@9616$string_C3A5CUsers5Cstefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CAssertTest2Ec#:
x36353:	db "C:\Users\stefa\Documents\vagrant\homestead\code\code\AssertTest.c", 0	; 66: 67 58 92 85 115 101 114 115 92 115 116 101 102 97 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 65 115 115 101 114 116 84 101 115 116 46 99 0

malloc_test:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$1:	; Parameter 6 96 6
x36419:	mov word [bp + 12], 96	; 5: 199 70 12 96 0

malloc_test$2:	; Call 6 malloc 0
x36424:	mov word [bp + 6], malloc_test$3	; 5: 199 70 6 86 142
x36429:	mov [bp + 8], bp	; 3: 137 110 8
x36432:	add bp, 6	; 3: 131 197 6
x36435:	jmp malloc	; 3: 233 218 228

malloc_test$3:	; PostCall 6

malloc_test$4:	; GetReturnValue £temporary5951

malloc_test$5:	; Assign b £temporary5951
x36438:	mov [bp + 6], bx	; 3: 137 94 6

malloc_test$6:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$7:	; Parameter 8 96 6
x36441:	mov word [bp + 14], 96	; 5: 199 70 14 96 0

malloc_test$8:	; Call 8 malloc 0
x36446:	mov word [bp + 8], malloc_test$9	; 5: 199 70 8 108 142
x36451:	mov [bp + 10], bp	; 3: 137 110 10
x36454:	add bp, 8	; 3: 131 197 8
x36457:	jmp malloc	; 3: 233 196 228

malloc_test$9:	; PostCall 8

malloc_test$10:	; GetReturnValue £temporary5952

malloc_test$11:	; Assign c £temporary5952
x36460:	mov [bp + 8], bx	; 3: 137 94 8

malloc_test$12:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$13:	; Parameter 10 96 6
x36463:	mov word [bp + 16], 96	; 5: 199 70 16 96 0

malloc_test$14:	; Call 10 malloc 0
x36468:	mov word [bp + 10], malloc_test$15	; 5: 199 70 10 130 142
x36473:	mov [bp + 12], bp	; 3: 137 110 12
x36476:	add bp, 10	; 3: 131 197 10
x36479:	jmp malloc	; 3: 233 174 228

malloc_test$15:	; PostCall 10

malloc_test$16:	; GetReturnValue £temporary5953

malloc_test$17:	; Assign d £temporary5953
x36482:	mov [bp + 10], bx	; 3: 137 94 10

malloc_test$18:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$19:	; Call 12 print_heap 0
x36485:	mov word [bp + 12], malloc_test$20	; 5: 199 70 12 147 142
x36490:	mov [bp + 14], bp	; 3: 137 110 14
x36493:	add bp, 12	; 3: 131 197 12
x36496:	jmp print_heap	; 3: 233 151 0

malloc_test$20:	; PostCall 12

malloc_test$21:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$22:	; Parameter 12 c 6
x36499:	mov ax, [bp + 8]	; 3: 139 70 8
x36502:	mov [bp + 18], ax	; 3: 137 70 18

malloc_test$23:	; Parameter 12 40 8
x36505:	mov word [bp + 20], 40	; 5: 199 70 20 40 0

malloc_test$24:	; Call 12 realloc 0
x36510:	mov word [bp + 12], malloc_test$25	; 5: 199 70 12 172 142
x36515:	mov [bp + 14], bp	; 3: 137 110 14
x36518:	add bp, 12	; 3: 131 197 12
x36521:	jmp realloc	; 3: 233 16 1

malloc_test$25:	; PostCall 12

malloc_test$26:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$27:	; Call 12 print_heap 0
x36524:	mov word [bp + 12], malloc_test$28	; 5: 199 70 12 186 142
x36529:	mov [bp + 14], bp	; 3: 137 110 14
x36532:	add bp, 12	; 3: 131 197 12
x36535:	nop	; 1: 144
x36536:	jmp print_heap	; 2: 235 112

malloc_test$28:	; PostCall 12

malloc_test$29:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$30:	; Parameter 12 40 6
x36538:	mov word [bp + 18], 40	; 5: 199 70 18 40 0

malloc_test$31:	; Call 12 malloc 0
x36543:	mov word [bp + 12], malloc_test$32	; 5: 199 70 12 205 142
x36548:	mov [bp + 14], bp	; 3: 137 110 14
x36551:	add bp, 12	; 3: 131 197 12
x36554:	jmp malloc	; 3: 233 99 228

malloc_test$32:	; PostCall 12

malloc_test$33:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$34:	; Call 12 print_heap 0
x36557:	mov word [bp + 12], malloc_test$35	; 5: 199 70 12 219 142
x36562:	mov [bp + 14], bp	; 3: 137 110 14
x36565:	add bp, 12	; 3: 131 197 12
x36568:	nop	; 1: 144
x36569:	jmp print_heap	; 2: 235 79

malloc_test$35:	; PostCall 12

malloc_test$36:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$37:	; Parameter 12 b 6
x36571:	mov ax, [bp + 6]	; 3: 139 70 6
x36574:	mov [bp + 18], ax	; 3: 137 70 18

malloc_test$38:	; Call 12 free 0
x36577:	mov word [bp + 12], malloc_test$39	; 5: 199 70 12 239 142
x36582:	mov [bp + 14], bp	; 3: 137 110 14
x36585:	add bp, 12	; 3: 131 197 12
x36588:	jmp free	; 3: 233 77 230

malloc_test$39:	; PostCall 12

malloc_test$40:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$41:	; Call 12 print_heap 0
x36591:	mov word [bp + 12], malloc_test$42	; 5: 199 70 12 253 142
x36596:	mov [bp + 14], bp	; 3: 137 110 14
x36599:	add bp, 12	; 3: 131 197 12
x36602:	nop	; 1: 144
x36603:	jmp print_heap	; 2: 235 45

malloc_test$42:	; PostCall 12

malloc_test$43:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$44:	; Parameter 12 d 6
x36605:	mov ax, [bp + 10]	; 3: 139 70 10
x36608:	mov [bp + 18], ax	; 3: 137 70 18

malloc_test$45:	; Call 12 free 0
x36611:	mov word [bp + 12], malloc_test$46	; 5: 199 70 12 17 143
x36616:	mov [bp + 14], bp	; 3: 137 110 14
x36619:	add bp, 12	; 3: 131 197 12
x36622:	jmp free	; 3: 233 43 230

malloc_test$46:	; PostCall 12

malloc_test$47:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

malloc_test$48:	; Call 12 print_heap 0
x36625:	mov word [bp + 12], malloc_test$49	; 5: 199 70 12 31 143
x36630:	mov [bp + 14], bp	; 3: 137 110 14
x36633:	add bp, 12	; 3: 131 197 12
x36636:	nop	; 1: 144
x36637:	jmp print_heap	; 2: 235 11

malloc_test$49:	; PostCall 12

malloc_test$50:	; Return 0
x36639:	mov ax, [bp]	; 3: 139 70 0
x36642:	mov di, [bp + 4]	; 3: 139 126 4
x36645:	mov bp, [bp + 2]	; 3: 139 110 2
x36648:	jmp ax	; 2: 255 224

malloc_test$51:	; FunctionEnd malloc_test

print_heap:	; Assign currBlockPtr g_firstBlockPtr
x36650:	mov ax, [g_firstBlockPtr]	; 3: 161 190 116
x36653:	mov [bp + 6], ax	; 3: 137 70 6

print_heap$1:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_heap$2:	; Parameter 8 string_Heap3A0A# 6
x36656:	mov word [bp + 14], @376$string_Heap3A0A#	; 5: 199 70 14 156 143

print_heap$3:	; Call 8 printf 0
x36661:	mov word [bp + 8], print_heap$4	; 5: 199 70 8 69 143
x36666:	mov [bp + 10], bp	; 3: 137 110 10
x36669:	add bp, 8	; 3: 131 197 8
x36672:	mov di, bp	; 2: 137 239
x36674:	jmp printf	; 3: 233 191 125

print_heap$4:	; PostCall 8

print_heap$5:	; Equal 17 currBlockPtr 0
x36677:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x36681:	je print_heap$17	; 2: 116 49

print_heap$6:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_heap$7:	; Parameter 8 string_2020Address2025u2C20Size2025u0A# 6
x36683:	mov word [bp + 14], @382$string_2020Address2025u2C20Size2025u0A#	; 5: 199 70 14 163 143

print_heap$8:	; IntegralToIntegral £temporary150 currBlockPtr
x36688:	mov ax, [bp + 6]	; 3: 139 70 6

print_heap$9:	; Parameter 8 £temporary150 8
x36691:	mov [bp + 16], ax	; 3: 137 70 16

print_heap$10:	; Deref £temporary151 -> currBlockPtr currBlockPtr 0
x36694:	mov si, [bp + 6]	; 3: 139 118 6

print_heap$11:	; Parameter 8 £temporary151 -> currBlockPtr 10
x36697:	mov ax, [si]	; 2: 139 4
x36699:	mov [bp + 18], ax	; 3: 137 70 18

print_heap$12:	; Call 8 printf 0
x36702:	mov word [bp + 8], print_heap$13	; 5: 199 70 8 113 143
x36707:	mov [bp + 10], bp	; 3: 137 110 10
x36710:	add bp, 8	; 3: 131 197 8
x36713:	mov di, bp	; 2: 137 239
x36715:	add di, 4	; 3: 131 199 4
x36718:	jmp printf	; 3: 233 147 125

print_heap$13:	; PostCall 8

print_heap$14:	; Deref £temporary153 -> currBlockPtr currBlockPtr 2
x36721:	mov si, [bp + 6]	; 3: 139 118 6

print_heap$15:	; Assign currBlockPtr £temporary153 -> currBlockPtr
x36724:	mov ax, [si + 2]	; 3: 139 68 2
x36727:	mov [bp + 6], ax	; 3: 137 70 6

print_heap$16:	; Goto 5
x36730:	jmp print_heap$5	; 2: 235 201

print_heap$17:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_heap$18:	; Parameter 8 string_0A# 6
x36732:	mov word [bp + 14], @387$string_0A#	; 5: 199 70 14 186 143

print_heap$19:	; Call 8 printf 0
x36737:	mov word [bp + 8], print_heap$20	; 5: 199 70 8 145 143
x36742:	mov [bp + 10], bp	; 3: 137 110 10
x36745:	add bp, 8	; 3: 131 197 8
x36748:	mov di, bp	; 2: 137 239
x36750:	jmp printf	; 3: 233 115 125

print_heap$20:	; PostCall 8

print_heap$21:	; Return 0
x36753:	mov ax, [bp]	; 3: 139 70 0
x36756:	mov di, [bp + 4]	; 3: 139 126 4
x36759:	mov bp, [bp + 2]	; 3: 139 110 2
x36762:	jmp ax	; 2: 255 224

print_heap$22:	; FunctionEnd print_heap

@376$string_Heap3A0A#:
x36764:	db "Heap:", 10, 0	; 7: 72 101 97 112 58 10 0

@382$string_2020Address2025u2C20Size2025u0A#:
x36771:	db "  Address %u, Size %u", 10, 0	; 23: 32 32 65 100 100 114 101 115 115 32 37 117 44 32 83 105 122 101 32 37 117 10 0

@387$string_0A#:
x36794:	db 10, 0	; 2: 10 0

realloc:	; SignedGreaterThanEqual 12 newMemorySize 0
x36796:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x36800:	jge realloc$12	; 2: 125 59

realloc$1:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

realloc$2:	; Parameter 10 stderr 6
x36802:	mov ax, [stderr]	; 3: 161 136 77
x36805:	mov [bp + 16], ax	; 3: 137 70 16

realloc$3:	; Parameter 10 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x36808:	mov word [bp + 18], @279$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 18 131 145

realloc$4:	; Parameter 10 string_newMemorySize203E3D200# 10
x36813:	mov word [bp + 20], @280$string_newMemorySize203E3D200#	; 5: 199 70 20 177 145

realloc$5:	; Parameter 10 string_C3A5CUsers5Cstefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec# 12
x36818:	mov word [bp + 22], @281$string_C3A5CUsers5Cstefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec#	; 5: 199 70 22 196 145

realloc$6:	; Parameter 10 259 14
x36823:	mov word [bp + 24], 259	; 5: 199 70 24 3 1

realloc$7:	; Call 10 fprintf 0
x36828:	mov word [bp + 10], realloc$8	; 5: 199 70 10 239 143
x36833:	mov [bp + 12], bp	; 3: 137 110 12
x36836:	add bp, 10	; 3: 131 197 10
x36839:	mov di, bp	; 2: 137 239
x36841:	add di, 6	; 3: 131 199 6
x36844:	jmp fprintf	; 3: 233 139 206

realloc$8:	; PostCall 10

realloc$9:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

realloc$10:	; Call 10 abort 0
x36847:	mov word [bp + 10], realloc$11	; 5: 199 70 10 253 143
x36852:	mov [bp + 12], bp	; 3: 137 110 12
x36855:	add bp, 10	; 3: 131 197 10
x36858:	jmp abort	; 3: 233 184 206

realloc$11:	; PostCall 10

realloc$12:	; NotEqual 25 oldMemoryPtr 0
x36861:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x36865:	jne realloc$25	; 2: 117 65

realloc$13:	; SignedGreaterThan 25 newMemorySize 0
x36867:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x36871:	jg realloc$25	; 2: 127 59

realloc$14:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

realloc$15:	; Parameter 10 stderr 6
x36873:	mov ax, [stderr]	; 3: 161 136 77
x36876:	mov [bp + 16], ax	; 3: 137 70 16

realloc$16:	; Parameter 10 string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A# 8
x36879:	mov word [bp + 18], @295$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#	; 5: 199 70 18 2 146

realloc$17:	; Parameter 10 string_2820oldMemoryPtr20213D20NULL2029207C7C202820newMemorySize203E2002029# 10
x36884:	mov word [bp + 20], @296$string_2820oldMemoryPtr20213D20NULL2029207C7C202820newMemorySize203E2002029#	; 5: 199 70 20 48 146

realloc$18:	; Parameter 10 string_C3A5CUsers5Cstefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec# 12
x36889:	mov word [bp + 22], @297$string_C3A5CUsers5Cstefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec#	; 5: 199 70 22 98 146

realloc$19:	; Parameter 10 260 14
x36894:	mov word [bp + 24], 260	; 5: 199 70 24 4 1

realloc$20:	; Call 10 fprintf 0
x36899:	mov word [bp + 10], realloc$21	; 5: 199 70 10 54 144
x36904:	mov [bp + 12], bp	; 3: 137 110 12
x36907:	add bp, 10	; 3: 131 197 10
x36910:	mov di, bp	; 2: 137 239
x36912:	add di, 6	; 3: 131 199 6
x36915:	jmp fprintf	; 3: 233 68 206

realloc$21:	; PostCall 10

realloc$22:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

realloc$23:	; Call 10 abort 0
x36918:	mov word [bp + 10], realloc$24	; 5: 199 70 10 68 144
x36923:	mov [bp + 12], bp	; 3: 137 110 12
x36926:	add bp, 10	; 3: 131 197 10
x36929:	jmp abort	; 3: 233 113 206

realloc$24:	; PostCall 10

realloc$25:	; NotEqual 33 oldMemoryPtr 0
x36932:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x36936:	jne realloc$33	; 2: 117 31

realloc$26:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

realloc$27:	; Parameter 10 newMemorySize 6
x36938:	mov ax, [bp + 8]	; 3: 139 70 8
x36941:	mov [bp + 16], ax	; 3: 137 70 16

realloc$28:	; Call 10 malloc 0
x36944:	mov word [bp + 10], realloc$29	; 5: 199 70 10 94 144
x36949:	mov [bp + 12], bp	; 3: 137 110 12
x36952:	add bp, 10	; 3: 131 197 10
x36955:	jmp malloc	; 3: 233 210 226

realloc$29:	; PostCall 10

realloc$30:	; GetReturnValue £temporary108

realloc$31:	; SetReturnValue £temporary108

realloc$32:	; Return £temporary108
x36958:	mov ax, [bp]	; 3: 139 70 0
x36961:	mov di, [bp + 4]	; 3: 139 126 4
x36964:	mov bp, [bp + 2]	; 3: 139 110 2
x36967:	jmp ax	; 2: 255 224

realloc$33:	; NotEqual 40 newMemorySize 0
x36969:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x36973:	jne realloc$40	; 2: 117 34

realloc$34:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

realloc$35:	; Parameter 10 oldMemoryPtr 6
x36975:	mov ax, [bp + 6]	; 3: 139 70 6
x36978:	mov [bp + 16], ax	; 3: 137 70 16

realloc$36:	; Call 10 free 0
x36981:	mov word [bp + 10], realloc$37	; 5: 199 70 10 131 144
x36986:	mov [bp + 12], bp	; 3: 137 110 12
x36989:	add bp, 10	; 3: 131 197 10
x36992:	jmp free	; 3: 233 185 228

realloc$37:	; PostCall 10

realloc$38:	; SetReturnValue 0
x36995:	mov bx, 0	; 3: 187 0 0

realloc$39:	; Return 0
x36998:	mov ax, [bp]	; 3: 139 70 0
x37001:	mov di, [bp + 4]	; 3: 139 126 4
x37004:	mov bp, [bp + 2]	; 3: 139 110 2
x37007:	jmp ax	; 2: 255 224

realloc$40:	; IntegralToIntegral £temporary111 newMemorySize
x37009:	mov ax, [bp + 8]	; 3: 139 70 8

realloc$41:	; BinaryAdd newBlockSize £temporary111 4
x37012:	add ax, 4	; 3: 131 192 4
x37015:	mov [bp + 10], ax	; 3: 137 70 10

realloc$42:	; IntegralToIntegral £temporary113 oldMemoryPtr
x37018:	mov ax, [bp + 6]	; 3: 139 70 6

realloc$43:	; BinarySubtract £temporary114 £temporary113 4
x37021:	sub ax, 4	; 3: 131 232 4

realloc$44:	; IntegralToIntegral £temporary115 £temporary114

realloc$45:	; Assign oldBlockPtr £temporary115
x37024:	mov [bp + 12], ax	; 3: 137 70 12

realloc$46:	; Deref £temporary116 -> oldBlockPtr oldBlockPtr 0
x37027:	mov si, [bp + 12]	; 3: 139 118 12

realloc$47:	; UnsignedGreaterThan 52 newBlockSize £temporary116 -> oldBlockPtr
x37030:	mov ax, [si]	; 2: 139 4
x37032:	cmp [bp + 10], ax	; 3: 57 70 10
x37035:	ja realloc$52	; 2: 119 22

realloc$48:	; Deref £temporary118 -> oldBlockPtr oldBlockPtr 0
x37037:	mov si, [bp + 12]	; 3: 139 118 12

realloc$49:	; Assign £temporary118 -> oldBlockPtr newBlockSize
x37040:	mov ax, [bp + 10]	; 3: 139 70 10
x37043:	mov [si], ax	; 2: 137 4

realloc$50:	; SetReturnValue oldMemoryPtr
x37045:	mov bx, [bp + 6]	; 3: 139 94 6

realloc$51:	; Return oldMemoryPtr
x37048:	mov ax, [bp]	; 3: 139 70 0
x37051:	mov di, [bp + 4]	; 3: 139 126 4
x37054:	mov bp, [bp + 2]	; 3: 139 110 2
x37057:	jmp ax	; 2: 255 224

realloc$52:	; Assign lastAddress 65528
x37059:	mov word [bp + 14], 65528	; 5: 199 70 14 248 255

realloc$53:	; Assign currBlockPtr g_firstBlockPtr
x37064:	mov ax, [g_firstBlockPtr]	; 3: 161 190 116
x37067:	mov [bp + 16], ax	; 3: 137 70 16

realloc$54:	; Equal 68 currBlockPtr 0
x37070:	cmp word [bp + 16], 0	; 4: 131 126 16 0
x37074:	je realloc$68	; 2: 116 66

realloc$55:	; NotEqual 63 currBlockPtr oldBlockPtr
x37076:	mov ax, [bp + 12]	; 3: 139 70 12
x37079:	cmp [bp + 16], ax	; 3: 57 70 16
x37082:	jne realloc$63	; 2: 117 41

realloc$56:	; IntegralToIntegral £temporary121 currBlockPtr
x37084:	mov ax, [bp + 16]	; 3: 139 70 16

realloc$57:	; BinarySubtract availableSize lastAddress £temporary121
x37087:	mov bx, [bp + 14]	; 3: 139 94 14
x37090:	sub bx, ax	; 2: 41 195
x37092:	mov [bp + 18], bx	; 3: 137 94 18

realloc$58:	; UnsignedLessThan 68 availableSize newBlockSize
x37095:	mov ax, [bp + 10]	; 3: 139 70 10
x37098:	cmp [bp + 18], ax	; 3: 57 70 18
x37101:	jb realloc$68	; 2: 114 39

realloc$59:	; Deref £temporary124 -> oldBlockPtr oldBlockPtr 0
x37103:	mov si, [bp + 12]	; 3: 139 118 12

realloc$60:	; Assign £temporary124 -> oldBlockPtr newBlockSize
x37106:	mov ax, [bp + 10]	; 3: 139 70 10
x37109:	mov [si], ax	; 2: 137 4

realloc$61:	; SetReturnValue oldMemoryPtr
x37111:	mov bx, [bp + 6]	; 3: 139 94 6

realloc$62:	; Return oldMemoryPtr
x37114:	mov ax, [bp]	; 3: 139 70 0
x37117:	mov di, [bp + 4]	; 3: 139 126 4
x37120:	mov bp, [bp + 2]	; 3: 139 110 2
x37123:	jmp ax	; 2: 255 224

realloc$63:	; IntegralToIntegral £temporary125 currBlockPtr
x37125:	mov ax, [bp + 16]	; 3: 139 70 16

realloc$64:	; Assign lastAddress £temporary125
x37128:	mov [bp + 14], ax	; 3: 137 70 14

realloc$65:	; Deref £temporary126 -> currBlockPtr currBlockPtr 2
x37131:	mov si, [bp + 16]	; 3: 139 118 16

realloc$66:	; Assign currBlockPtr £temporary126 -> currBlockPtr
x37134:	mov ax, [si + 2]	; 3: 139 68 2
x37137:	mov [bp + 16], ax	; 3: 137 70 16

realloc$67:	; Goto 54
x37140:	jmp realloc$54	; 2: 235 184

realloc$68:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

realloc$69:	; Parameter 14 newMemorySize 6
x37142:	mov ax, [bp + 8]	; 3: 139 70 8
x37145:	mov [bp + 20], ax	; 3: 137 70 20

realloc$70:	; Call 14 malloc 0
x37148:	mov word [bp + 14], realloc$71	; 5: 199 70 14 42 145
x37153:	mov [bp + 16], bp	; 3: 137 110 16
x37156:	add bp, 14	; 3: 131 197 14
x37159:	jmp malloc	; 3: 233 6 226

realloc$71:	; PostCall 14

realloc$72:	; GetReturnValue £temporary127

realloc$73:	; Assign newMemoryPtr £temporary127
x37162:	mov [bp + 14], bx	; 3: 137 94 14

realloc$74:	; Equal 87 newMemoryPtr 0
x37165:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x37169:	je realloc$87	; 2: 116 66

realloc$75:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

realloc$76:	; Parameter 16 newMemoryPtr 6
x37171:	mov ax, [bp + 14]	; 3: 139 70 14
x37174:	mov [bp + 22], ax	; 3: 137 70 22

realloc$77:	; Parameter 16 oldMemoryPtr 8
x37177:	mov ax, [bp + 6]	; 3: 139 70 6
x37180:	mov [bp + 24], ax	; 3: 137 70 24

realloc$78:	; Parameter 16 newMemorySize 10
x37183:	mov ax, [bp + 8]	; 3: 139 70 8
x37186:	mov [bp + 26], ax	; 3: 137 70 26

realloc$79:	; Call 16 memcpy 0
x37189:	mov word [bp + 16], realloc$80	; 5: 199 70 16 83 145
x37194:	mov [bp + 18], bp	; 3: 137 110 18
x37197:	add bp, 16	; 3: 131 197 16
x37200:	jmp memcpy	; 3: 233 77 1

realloc$80:	; PostCall 16

realloc$81:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

realloc$82:	; Parameter 16 oldMemoryPtr 6
x37203:	mov ax, [bp + 6]	; 3: 139 70 6
x37206:	mov [bp + 22], ax	; 3: 137 70 22

realloc$83:	; Call 16 free 0
x37209:	mov word [bp + 16], realloc$84	; 5: 199 70 16 103 145
x37214:	mov [bp + 18], bp	; 3: 137 110 18
x37217:	add bp, 16	; 3: 131 197 16
x37220:	jmp free	; 3: 233 213 227

realloc$84:	; PostCall 16

realloc$85:	; SetReturnValue newMemoryPtr
x37223:	mov bx, [bp + 14]	; 3: 139 94 14

realloc$86:	; Return newMemoryPtr
x37226:	mov ax, [bp]	; 3: 139 70 0
x37229:	mov di, [bp + 4]	; 3: 139 126 4
x37232:	mov bp, [bp + 2]	; 3: 139 110 2
x37235:	jmp ax	; 2: 255 224

realloc$87:	; SetReturnValue 0
x37237:	mov bx, 0	; 3: 187 0 0

realloc$88:	; Return 0
x37240:	mov ax, [bp]	; 3: 139 70 0
x37243:	mov di, [bp + 4]	; 3: 139 126 4
x37246:	mov bp, [bp + 2]	; 3: 139 110 2
x37249:	jmp ax	; 2: 255 224

realloc$89:	; FunctionEnd realloc

@279$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x37251:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@280$string_newMemorySize203E3D200#:
x37297:	db "newMemorySize >= 0", 0	; 19: 110 101 119 77 101 109 111 114 121 83 105 122 101 32 62 61 32 48 0

@281$string_C3A5CUsers5Cstefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec#:
x37316:	db "C:\Users\stefa\Documents\vagrant\homestead\code\code\Malloc.c", 0	; 62: 67 58 92 85 115 101 114 115 92 115 116 101 102 97 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 77 97 108 108 111 99 46 99 0

@295$string_Assertion20failed3A202225s2220in20file2025s20at20line2025i0A#:
x37378:	db "Assertion failed: ", 34, "%s", 34, " in file %s at line %i", 10, 0	; 46: 65 115 115 101 114 116 105 111 110 32 102 97 105 108 101 100 58 32 34 37 115 34 32 105 110 32 102 105 108 101 32 37 115 32 97 116 32 108 105 110 101 32 37 105 10 0

@296$string_2820oldMemoryPtr20213D20NULL2029207C7C202820newMemorySize203E2002029#:
x37424:	db "( oldMemoryPtr != NULL ) || ( newMemorySize > 0 )", 0	; 50: 40 32 111 108 100 77 101 109 111 114 121 80 116 114 32 33 61 32 78 85 76 76 32 41 32 124 124 32 40 32 110 101 119 77 101 109 111 114 121 83 105 122 101 32 62 32 48 32 41 0

@297$string_C3A5CUsers5Cstefa5CDocuments5Cvagrant5Chomestead5Ccode5Ccode5CMalloc2Ec#:
x37474:	db "C:\Users\stefa\Documents\vagrant\homestead\code\code\Malloc.c", 0	; 62: 67 58 92 85 115 101 114 115 92 115 116 101 102 97 92 68 111 99 117 109 101 110 116 115 92 118 97 103 114 97 110 116 92 104 111 109 101 115 116 101 97 100 92 99 111 100 101 92 99 111 100 101 92 77 97 108 108 111 99 46 99 0

memcpy:	; IntegralToIntegral £temporary3921 target
x37536:	mov ax, [bp + 6]	; 3: 139 70 6

memcpy$1:	; Assign charTarget £temporary3921
x37539:	mov [bp + 12], ax	; 3: 137 70 12

memcpy$2:	; IntegralToIntegral £temporary3922 source
x37542:	mov ax, [bp + 8]	; 3: 139 70 8

memcpy$3:	; Assign charSource £temporary3922
x37545:	mov [bp + 14], ax	; 3: 137 70 14

memcpy$4:	; Assign index 0
x37548:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

memcpy$5:	; SignedGreaterThanEqual 13 index size
x37553:	mov ax, [bp + 10]	; 3: 139 70 10
x37556:	cmp [bp + 16], ax	; 3: 57 70 16
x37559:	jge memcpy$13	; 2: 125 21

memcpy$6:	; BinaryAdd £temporary3926 charTarget index
x37561:	mov si, [bp + 12]	; 3: 139 118 12
x37564:	add si, [bp + 16]	; 3: 3 118 16

memcpy$7:	; Deref £temporary3925 -> £temporary3926 £temporary3926 0

memcpy$8:	; BinaryAdd £temporary3928 charSource index
x37567:	mov di, [bp + 14]	; 3: 139 126 14
x37570:	add di, [bp + 16]	; 3: 3 126 16

memcpy$9:	; Deref £temporary3927 -> £temporary3928 £temporary3928 0

memcpy$10:	; Assign £temporary3925 -> £temporary3926 £temporary3927 -> £temporary3928
x37573:	mov al, [di]	; 2: 138 5
x37575:	mov [si], al	; 2: 136 4

memcpy$11:	; Increment index
x37577:	inc word [bp + 16]	; 3: 255 70 16

memcpy$12:	; Goto 5
x37580:	jmp memcpy$5	; 2: 235 227

memcpy$13:	; IntegralToIntegral £temporary3929 target
x37582:	mov bx, [bp + 6]	; 3: 139 94 6

memcpy$14:	; SetReturnValue £temporary3929

memcpy$15:	; Return £temporary3929
x37585:	mov ax, [bp]	; 3: 139 70 0
x37588:	mov di, [bp + 4]	; 3: 139 126 4
x37591:	mov bp, [bp + 2]	; 3: 139 110 2
x37594:	jmp ax	; 2: 255 224

memcpy$16:	; FunctionEnd memcpy

print_test:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_test$1:	; Parameter 6 string_3C258i3E203C252B8i3E203C25208i3E203C252D8i3E203C252B2D8i3E203C252D2B8i3E203C25202D8i3E203C252D208i3E0A# 6
x37596:	mov word [bp + 12], @9004$string_3C258i3E203C252B8i3E203C25208i3E203C252D8i3E203C252B2D8i3E203C252D2B8i3E203C25202D8i3E203C252D208i3E0A#	; 5: 199 70 12 199 148

print_test$2:	; Parameter 6 123 8
x37601:	mov word [bp + 14], 123	; 5: 199 70 14 123 0

print_test$3:	; Parameter 6 123 10
x37606:	mov word [bp + 16], 123	; 5: 199 70 16 123 0

print_test$4:	; Parameter 6 123 12
x37611:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

print_test$5:	; Parameter 6 123 14
x37616:	mov word [bp + 20], 123	; 5: 199 70 20 123 0

print_test$6:	; Parameter 6 123 16
x37621:	mov word [bp + 22], 123	; 5: 199 70 22 123 0

print_test$7:	; Parameter 6 123 18
x37626:	mov word [bp + 24], 123	; 5: 199 70 24 123 0

print_test$8:	; Parameter 6 123 20
x37631:	mov word [bp + 26], 123	; 5: 199 70 26 123 0

print_test$9:	; Parameter 6 123 22
x37636:	mov word [bp + 28], 123	; 5: 199 70 28 123 0

print_test$10:	; Call 6 printf 0
x37641:	mov word [bp + 6], print_test$11	; 5: 199 70 6 28 147
x37646:	mov [bp + 8], bp	; 3: 137 110 8
x37649:	add bp, 6	; 3: 131 197 6
x37652:	mov di, bp	; 2: 137 239
x37654:	add di, 16	; 3: 131 199 16
x37657:	jmp printf	; 3: 233 232 121

print_test$11:	; PostCall 6

print_test$12:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_test$13:	; Parameter 6 string_3C258i3E203C252B8i3E203C25208i3E203C252D8i3E203C252B2D8i3E203C252D2B8i3E203C25202D8i3E203C252D208i3E0A# 6
x37660:	mov word [bp + 12], @9022$string_3C258i3E203C252B8i3E203C25208i3E203C252D8i3E203C252B2D8i3E203C252D2B8i3E203C25202D8i3E203C252D208i3E0A#	; 5: 199 70 12 3 149

print_test$14:	; Parameter 6 -123 8
x37665:	mov word [bp + 14], -123	; 5: 199 70 14 133 255

print_test$15:	; Parameter 6 -123 10
x37670:	mov word [bp + 16], -123	; 5: 199 70 16 133 255

print_test$16:	; Parameter 6 -123 12
x37675:	mov word [bp + 18], -123	; 5: 199 70 18 133 255

print_test$17:	; Parameter 6 -123 14
x37680:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

print_test$18:	; Parameter 6 -123 16
x37685:	mov word [bp + 22], -123	; 5: 199 70 22 133 255

print_test$19:	; Parameter 6 -123 18
x37690:	mov word [bp + 24], -123	; 5: 199 70 24 133 255

print_test$20:	; Parameter 6 -123 20
x37695:	mov word [bp + 26], -123	; 5: 199 70 26 133 255

print_test$21:	; Parameter 6 -123 22
x37700:	mov word [bp + 28], -123	; 5: 199 70 28 133 255

print_test$22:	; Call 6 printf 0
x37705:	mov word [bp + 6], print_test$23	; 5: 199 70 6 92 147
x37710:	mov [bp + 8], bp	; 3: 137 110 8
x37713:	add bp, 6	; 3: 131 197 6
x37716:	mov di, bp	; 2: 137 239
x37718:	add di, 16	; 3: 131 199 16
x37721:	jmp printf	; 3: 233 168 121

print_test$23:	; PostCall 6

print_test$24:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_test$25:	; Parameter 6 string_3C2508i3E203C252B08i3E203C252008i3E203C250208i3E0A# 6
x37724:	mov word [bp + 12], @9040$string_3C2508i3E203C252B08i3E203C252008i3E203C250208i3E0A#	; 5: 199 70 12 63 149

print_test$26:	; Parameter 6 123 8
x37729:	mov word [bp + 14], 123	; 5: 199 70 14 123 0

print_test$27:	; Parameter 6 123 10
x37734:	mov word [bp + 16], 123	; 5: 199 70 16 123 0

print_test$28:	; Parameter 6 123 12
x37739:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

print_test$29:	; Parameter 6 123 14
x37744:	mov word [bp + 20], 123	; 5: 199 70 20 123 0

print_test$30:	; Call 6 printf 0
x37749:	mov word [bp + 6], print_test$31	; 5: 199 70 6 136 147
x37754:	mov [bp + 8], bp	; 3: 137 110 8
x37757:	add bp, 6	; 3: 131 197 6
x37760:	mov di, bp	; 2: 137 239
x37762:	add di, 8	; 3: 131 199 8
x37765:	jmp printf	; 3: 233 124 121

print_test$31:	; PostCall 6

print_test$32:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_test$33:	; Parameter 6 string_3C2508i3E203C252B08i3E203C252008i3E203C250208i3E0A# 6
x37768:	mov word [bp + 12], @9050$string_3C2508i3E203C252B08i3E203C252008i3E203C250208i3E0A#	; 5: 199 70 12 95 149

print_test$34:	; Parameter 6 -123 8
x37773:	mov word [bp + 14], -123	; 5: 199 70 14 133 255

print_test$35:	; Parameter 6 -123 10
x37778:	mov word [bp + 16], -123	; 5: 199 70 16 133 255

print_test$36:	; Parameter 6 -123 12
x37783:	mov word [bp + 18], -123	; 5: 199 70 18 133 255

print_test$37:	; Parameter 6 -123 14
x37788:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

print_test$38:	; Call 6 printf 0
x37793:	mov word [bp + 6], print_test$39	; 5: 199 70 6 180 147
x37798:	mov [bp + 8], bp	; 3: 137 110 8
x37801:	add bp, 6	; 3: 131 197 6
x37804:	mov di, bp	; 2: 137 239
x37806:	add di, 8	; 3: 131 199 8
x37809:	jmp printf	; 3: 233 80 121

print_test$39:	; PostCall 6

print_test$40:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_test$41:	; Parameter 6 string_3C25122E3f3E203C252B122E3f3E203C2520122E3f3E203C252D122E3f3E203C252B2D122E3f3E203C252D2B122E3f3E203C25202D122E3f3E203C252D20122E3f3E0A# 6
x37812:	mov word [bp + 12], @9060$string_3C25122E3f3E203C252B122E3f3E203C2520122E3f3E203C252D122E3f3E203C252B2D122E3f3E203C252D2B122E3f3E203C25202D122E3f3E203C252D20122E3f3E0A#	; 5: 199 70 12 127 149

print_test$42:	; PushFloat 123.456
x37817:	fld qword [@9061$float8$123.456#]	; 4: 221 6 211 149

print_test$43:	; Parameter 6 123.456 8
x37821:	fstp qword [bp + 14]	; 3: 221 94 14

print_test$44:	; PushFloat 123.456
x37824:	fld qword [@9062$float8$123.456#]	; 4: 221 6 219 149

print_test$45:	; Parameter 6 123.456 16
x37828:	fstp qword [bp + 22]	; 3: 221 94 22

print_test$46:	; PushFloat 123.456
x37831:	fld qword [@9063$float8$123.456#]	; 4: 221 6 227 149

print_test$47:	; Parameter 6 123.456 24
x37835:	fstp qword [bp + 30]	; 3: 221 94 30

print_test$48:	; PushFloat 123.456
x37838:	fld qword [@9064$float8$123.456#]	; 4: 221 6 235 149

print_test$49:	; Parameter 6 123.456 32
x37842:	fstp qword [bp + 38]	; 3: 221 94 38

print_test$50:	; PushFloat 123.456
x37845:	fld qword [@9065$float8$123.456#]	; 4: 221 6 243 149

print_test$51:	; Parameter 6 123.456 40
x37849:	fstp qword [bp + 46]	; 3: 221 94 46

print_test$52:	; PushFloat 123.456
x37852:	fld qword [@9066$float8$123.456#]	; 4: 221 6 251 149

print_test$53:	; Parameter 6 123.456 48
x37856:	fstp qword [bp + 54]	; 3: 221 94 54

print_test$54:	; PushFloat 123.456
x37859:	fld qword [@9067$float8$123.456#]	; 4: 221 6 3 150

print_test$55:	; Parameter 6 123.456 56
x37863:	fstp qword [bp + 62]	; 3: 221 94 62

print_test$56:	; PushFloat 123.456
x37866:	fld qword [@9068$float8$123.456#]	; 4: 221 6 11 150

print_test$57:	; Parameter 6 123.456 64
x37870:	fstp qword [bp + 70]	; 3: 221 94 70

print_test$58:	; Call 6 printf 0
x37873:	mov word [bp + 6], print_test$59	; 5: 199 70 6 4 148
x37878:	mov [bp + 8], bp	; 3: 137 110 8
x37881:	add bp, 6	; 3: 131 197 6
x37884:	mov di, bp	; 2: 137 239
x37886:	add di, 64	; 3: 131 199 64
x37889:	jmp printf	; 3: 233 0 121

print_test$59:	; PostCall 6

print_test$60:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_test$61:	; Parameter 6 string_3C25122E3f3E203C252B122E3f3E203C2520122E3f3E203C252D122E3f3E203C252B2D122E3f3E203C252D2B122E3f3E203C25202D122E3f3E203C252D20122E3f3E0A# 6
x37892:	mov word [bp + 12], @9078$string_3C25122E3f3E203C252B122E3f3E203C2520122E3f3E203C252D122E3f3E203C252B2D122E3f3E203C252D2B122E3f3E203C25202D122E3f3E203C252D20122E3f3E0A#	; 5: 199 70 12 19 150

print_test$62:	; PushFloat -123.456
x37897:	fld qword [@9079$float8$minus123.456#]	; 4: 221 6 103 150

print_test$63:	; Parameter 6 -123.456 8
x37901:	fstp qword [bp + 14]	; 3: 221 94 14

print_test$64:	; PushFloat -123.456
x37904:	fld qword [@9080$float8$minus123.456#]	; 4: 221 6 111 150

print_test$65:	; Parameter 6 -123.456 16
x37908:	fstp qword [bp + 22]	; 3: 221 94 22

print_test$66:	; PushFloat -123.456
x37911:	fld qword [@9081$float8$minus123.456#]	; 4: 221 6 119 150

print_test$67:	; Parameter 6 -123.456 24
x37915:	fstp qword [bp + 30]	; 3: 221 94 30

print_test$68:	; PushFloat -123.456
x37918:	fld qword [@9082$float8$minus123.456#]	; 4: 221 6 127 150

print_test$69:	; Parameter 6 -123.456 32
x37922:	fstp qword [bp + 38]	; 3: 221 94 38

print_test$70:	; PushFloat -123.456
x37925:	fld qword [@9083$float8$minus123.456#]	; 4: 221 6 135 150

print_test$71:	; Parameter 6 -123.456 40
x37929:	fstp qword [bp + 46]	; 3: 221 94 46

print_test$72:	; PushFloat -123.456
x37932:	fld qword [@9084$float8$minus123.456#]	; 4: 221 6 143 150

print_test$73:	; Parameter 6 -123.456 48
x37936:	fstp qword [bp + 54]	; 3: 221 94 54

print_test$74:	; PushFloat -123.456
x37939:	fld qword [@9085$float8$minus123.456#]	; 4: 221 6 151 150

print_test$75:	; Parameter 6 -123.456 56
x37943:	fstp qword [bp + 62]	; 3: 221 94 62

print_test$76:	; PushFloat -123.456
x37946:	fld qword [@9086$float8$minus123.456#]	; 4: 221 6 159 150

print_test$77:	; Parameter 6 -123.456 64
x37950:	fstp qword [bp + 70]	; 3: 221 94 70

print_test$78:	; Call 6 printf 0
x37953:	mov word [bp + 6], print_test$79	; 5: 199 70 6 84 148
x37958:	mov [bp + 8], bp	; 3: 137 110 8
x37961:	add bp, 6	; 3: 131 197 6
x37964:	mov di, bp	; 2: 137 239
x37966:	add di, 64	; 3: 131 199 64
x37969:	jmp printf	; 3: 233 176 120

print_test$79:	; PostCall 6

print_test$80:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_test$81:	; Parameter 6 string_3C250122E3f3E203C252B0122E3f3E203C25200122E3f3E203C25020122E3f3E0A# 6
x37972:	mov word [bp + 12], @9096$string_3C250122E3f3E203C252B0122E3f3E203C25200122E3f3E203C25020122E3f3E0A#	; 5: 199 70 12 167 150

print_test$82:	; PushFloat 123.456
x37977:	fld qword [@9097$float8$123.456#]	; 4: 221 6 211 150

print_test$83:	; Parameter 6 123.456 8
x37981:	fstp qword [bp + 14]	; 3: 221 94 14

print_test$84:	; PushFloat 123.456
x37984:	fld qword [@9098$float8$123.456#]	; 4: 221 6 219 150

print_test$85:	; Parameter 6 123.456 16
x37988:	fstp qword [bp + 22]	; 3: 221 94 22

print_test$86:	; PushFloat 123.456
x37991:	fld qword [@9099$float8$123.456#]	; 4: 221 6 227 150

print_test$87:	; Parameter 6 123.456 24
x37995:	fstp qword [bp + 30]	; 3: 221 94 30

print_test$88:	; PushFloat 123.456
x37998:	fld qword [@9100$float8$123.456#]	; 4: 221 6 235 150

print_test$89:	; Parameter 6 123.456 32
x38002:	fstp qword [bp + 38]	; 3: 221 94 38

print_test$90:	; Call 6 printf 0
x38005:	mov word [bp + 6], print_test$91	; 5: 199 70 6 136 148
x38010:	mov [bp + 8], bp	; 3: 137 110 8
x38013:	add bp, 6	; 3: 131 197 6
x38016:	mov di, bp	; 2: 137 239
x38018:	add di, 32	; 3: 131 199 32
x38021:	jmp printf	; 3: 233 124 120

print_test$91:	; PostCall 6

print_test$92:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_test$93:	; Parameter 6 string_3C250122E3f3E203C252B0122E3f3E203C25200122E3f3E203C25020122E3f3E0A# 6
x38024:	mov word [bp + 12], @9106$string_3C250122E3f3E203C252B0122E3f3E203C25200122E3f3E203C25020122E3f3E0A#	; 5: 199 70 12 243 150

print_test$94:	; PushFloat -123.456
x38029:	fld qword [@9107$float8$minus123.456#]	; 4: 221 6 31 151

print_test$95:	; Parameter 6 -123.456 8
x38033:	fstp qword [bp + 14]	; 3: 221 94 14

print_test$96:	; PushFloat -123.456
x38036:	fld qword [@9108$float8$minus123.456#]	; 4: 221 6 39 151

print_test$97:	; Parameter 6 -123.456 16
x38040:	fstp qword [bp + 22]	; 3: 221 94 22

print_test$98:	; PushFloat -123.456
x38043:	fld qword [@9109$float8$minus123.456#]	; 4: 221 6 47 151

print_test$99:	; Parameter 6 -123.456 24
x38047:	fstp qword [bp + 30]	; 3: 221 94 30

print_test$100:	; PushFloat -123.456
x38050:	fld qword [@9110$float8$minus123.456#]	; 4: 221 6 55 151

print_test$101:	; Parameter 6 -123.456 32
x38054:	fstp qword [bp + 38]	; 3: 221 94 38

print_test$102:	; Call 6 printf 0
x38057:	mov word [bp + 6], print_test$103	; 5: 199 70 6 188 148
x38062:	mov [bp + 8], bp	; 3: 137 110 8
x38065:	add bp, 6	; 3: 131 197 6
x38068:	mov di, bp	; 2: 137 239
x38070:	add di, 32	; 3: 131 199 32
x38073:	jmp printf	; 3: 233 72 120

print_test$103:	; PostCall 6

print_test$104:	; Return 0
x38076:	mov ax, [bp]	; 3: 139 70 0
x38079:	mov di, [bp + 4]	; 3: 139 126 4
x38082:	mov bp, [bp + 2]	; 3: 139 110 2
x38085:	jmp ax	; 2: 255 224

print_test$105:	; FunctionEnd print_test

@9004$string_3C258i3E203C252B8i3E203C25208i3E203C252D8i3E203C252B2D8i3E203C252D2B8i3E203C25202D8i3E203C252D208i3E0A#:
x38087:	db "<%8i> <%+8i> <% 8i> <%-8i> <%+-8i> <%-+8i> <% -8i> <%- 8i>", 10, 0	; 60: 60 37 56 105 62 32 60 37 43 56 105 62 32 60 37 32 56 105 62 32 60 37 45 56 105 62 32 60 37 43 45 56 105 62 32 60 37 45 43 56 105 62 32 60 37 32 45 56 105 62 32 60 37 45 32 56 105 62 10 0

@9022$string_3C258i3E203C252B8i3E203C25208i3E203C252D8i3E203C252B2D8i3E203C252D2B8i3E203C25202D8i3E203C252D208i3E0A#:
x38147:	db "<%8i> <%+8i> <% 8i> <%-8i> <%+-8i> <%-+8i> <% -8i> <%- 8i>", 10, 0	; 60: 60 37 56 105 62 32 60 37 43 56 105 62 32 60 37 32 56 105 62 32 60 37 45 56 105 62 32 60 37 43 45 56 105 62 32 60 37 45 43 56 105 62 32 60 37 32 45 56 105 62 32 60 37 45 32 56 105 62 10 0

@9040$string_3C2508i3E203C252B08i3E203C252008i3E203C250208i3E0A#:
x38207:	db "<%08i> <%+08i> <% 08i> <%0 8i>", 10, 0	; 32: 60 37 48 56 105 62 32 60 37 43 48 56 105 62 32 60 37 32 48 56 105 62 32 60 37 48 32 56 105 62 10 0

@9050$string_3C2508i3E203C252B08i3E203C252008i3E203C250208i3E0A#:
x38239:	db "<%08i> <%+08i> <% 08i> <%0 8i>", 10, 0	; 32: 60 37 48 56 105 62 32 60 37 43 48 56 105 62 32 60 37 32 48 56 105 62 32 60 37 48 32 56 105 62 10 0

@9060$string_3C25122E3f3E203C252B122E3f3E203C2520122E3f3E203C252D122E3f3E203C252B2D122E3f3E203C252D2B122E3f3E203C25202D122E3f3E203C252D20122E3f3E0A#:
x38271:	db "<%12.3f> <%+12.3f> <% 12.3f> <%-12.3f> <%+-12.3f> <%-+12.3f> <% -12.3f> <%- 12.3f>", 10, 0	; 84: 60 37 49 50 46 51 102 62 32 60 37 43 49 50 46 51 102 62 32 60 37 32 49 50 46 51 102 62 32 60 37 45 49 50 46 51 102 62 32 60 37 43 45 49 50 46 51 102 62 32 60 37 45 43 49 50 46 51 102 62 32 60 37 32 45 49 50 46 51 102 62 32 60 37 45 32 49 50 46 51 102 62 10 0

@9061$float8$123.456#:
x38355:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@9062$float8$123.456#:
x38363:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@9063$float8$123.456#:
x38371:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@9064$float8$123.456#:
x38379:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@9065$float8$123.456#:
x38387:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@9066$float8$123.456#:
x38395:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@9067$float8$123.456#:
x38403:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@9068$float8$123.456#:
x38411:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@9078$string_3C25122E3f3E203C252B122E3f3E203C2520122E3f3E203C252D122E3f3E203C252B2D122E3f3E203C252D2B122E3f3E203C25202D122E3f3E203C252D20122E3f3E0A#:
x38419:	db "<%12.3f> <%+12.3f> <% 12.3f> <%-12.3f> <%+-12.3f> <%-+12.3f> <% -12.3f> <%- 12.3f>", 10, 0	; 84: 60 37 49 50 46 51 102 62 32 60 37 43 49 50 46 51 102 62 32 60 37 32 49 50 46 51 102 62 32 60 37 45 49 50 46 51 102 62 32 60 37 43 45 49 50 46 51 102 62 32 60 37 45 43 49 50 46 51 102 62 32 60 37 32 45 49 50 46 51 102 62 32 60 37 45 32 49 50 46 51 102 62 10 0

@9079$float8$minus123.456#:
x38503:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@9080$float8$minus123.456#:
x38511:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@9081$float8$minus123.456#:
x38519:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@9082$float8$minus123.456#:
x38527:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@9083$float8$minus123.456#:
x38535:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@9084$float8$minus123.456#:
x38543:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@9085$float8$minus123.456#:
x38551:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@9086$float8$minus123.456#:
x38559:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@9096$string_3C250122E3f3E203C252B0122E3f3E203C25200122E3f3E203C25020122E3f3E0A#:
x38567:	db "<%012.3f> <%+012.3f> <% 012.3f> <%0 12.3f>", 10, 0	; 44: 60 37 48 49 50 46 51 102 62 32 60 37 43 48 49 50 46 51 102 62 32 60 37 32 48 49 50 46 51 102 62 32 60 37 48 32 49 50 46 51 102 62 10 0

@9097$float8$123.456#:
x38611:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@9098$float8$123.456#:
x38619:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@9099$float8$123.456#:
x38627:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@9100$float8$123.456#:
x38635:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@9106$string_3C250122E3f3E203C252B0122E3f3E203C25200122E3f3E203C25020122E3f3E0A#:
x38643:	db "<%012.3f> <%+012.3f> <% 012.3f> <%0 12.3f>", 10, 0	; 44: 60 37 48 49 50 46 51 102 62 32 60 37 43 48 49 50 46 51 102 62 32 60 37 32 48 49 50 46 51 102 62 32 60 37 48 32 49 50 46 51 102 62 10 0

@9107$float8$minus123.456#:
x38687:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@9108$float8$minus123.456#:
x38695:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@9109$float8$minus123.456#:
x38703:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@9110$float8$minus123.456#:
x38711:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

limits_test:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$1:	; Parameter 6 string_CHAR_BIT203D2025i0A# 6
x38719:	mov word [bp + 12], @9494$string_CHAR_BIT203D2025i0A#	; 5: 199 70 12 12 153

limits_test$2:	; Parameter 6 8 8
x38724:	mov word [bp + 14], 8	; 5: 199 70 14 8 0

limits_test$3:	; Call 6 printf 0
x38729:	mov word [bp + 6], limits_test$4	; 5: 199 70 6 92 151
x38734:	mov [bp + 8], bp	; 3: 137 110 8
x38737:	add bp, 6	; 3: 131 197 6
x38740:	mov di, bp	; 2: 137 239
x38742:	add di, 2	; 3: 131 199 2
x38745:	jmp printf	; 3: 233 168 117

limits_test$4:	; PostCall 6

limits_test$5:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$6:	; Parameter 6 string_CHAR_MIN203D2025i0A0A# 6
x38748:	mov word [bp + 12], @9498$string_CHAR_MIN203D2025i0A0A#	; 5: 199 70 12 27 153

limits_test$7:	; Parameter 6 -128 8
x38753:	mov word [bp + 14], -128	; 5: 199 70 14 128 255

limits_test$8:	; Call 6 printf 0
x38758:	mov word [bp + 6], limits_test$9	; 5: 199 70 6 121 151
x38763:	mov [bp + 8], bp	; 3: 137 110 8
x38766:	add bp, 6	; 3: 131 197 6
x38769:	mov di, bp	; 2: 137 239
x38771:	add di, 2	; 3: 131 199 2
x38774:	jmp printf	; 3: 233 139 117

limits_test$9:	; PostCall 6

limits_test$10:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$11:	; Parameter 6 string_CHAR_MAX203D2025i0A# 6
x38777:	mov word [bp + 12], @9503$string_CHAR_MAX203D2025i0A#	; 5: 199 70 12 43 153

limits_test$12:	; Parameter 6 127 8
x38782:	mov word [bp + 14], 127	; 5: 199 70 14 127 0

limits_test$13:	; Call 6 printf 0
x38787:	mov word [bp + 6], limits_test$14	; 5: 199 70 6 150 151
x38792:	mov [bp + 8], bp	; 3: 137 110 8
x38795:	add bp, 6	; 3: 131 197 6
x38798:	mov di, bp	; 2: 137 239
x38800:	add di, 2	; 3: 131 199 2
x38803:	jmp printf	; 3: 233 110 117

limits_test$14:	; PostCall 6

limits_test$15:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$16:	; Parameter 6 string_UCHAR_MAX203D2025u0A0A# 6
x38806:	mov word [bp + 12], @9508$string_UCHAR_MAX203D2025u0A0A#	; 5: 199 70 12 58 153

limits_test$17:	; Parameter 6 255 8
x38811:	mov word [bp + 14], 255	; 5: 199 70 14 255 0

limits_test$18:	; Call 6 printf 0
x38816:	mov word [bp + 6], limits_test$19	; 5: 199 70 6 179 151
x38821:	mov [bp + 8], bp	; 3: 137 110 8
x38824:	add bp, 6	; 3: 131 197 6
x38827:	mov di, bp	; 2: 137 239
x38829:	add di, 2	; 3: 131 199 2
x38832:	jmp printf	; 3: 233 81 117

limits_test$19:	; PostCall 6

limits_test$20:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$21:	; Parameter 6 string_SHRT_MIN203D2025i0A# 6
x38835:	mov word [bp + 12], @9513$string_SHRT_MIN203D2025i0A#	; 5: 199 70 12 75 153

limits_test$22:	; Parameter 6 -128 8
x38840:	mov word [bp + 14], -128	; 5: 199 70 14 128 255

limits_test$23:	; Call 6 printf 0
x38845:	mov word [bp + 6], limits_test$24	; 5: 199 70 6 208 151
x38850:	mov [bp + 8], bp	; 3: 137 110 8
x38853:	add bp, 6	; 3: 131 197 6
x38856:	mov di, bp	; 2: 137 239
x38858:	add di, 2	; 3: 131 199 2
x38861:	jmp printf	; 3: 233 52 117

limits_test$24:	; PostCall 6

limits_test$25:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$26:	; Parameter 6 string_SHRT_MAX203D2025i0A# 6
x38864:	mov word [bp + 12], @9518$string_SHRT_MAX203D2025i0A#	; 5: 199 70 12 90 153

limits_test$27:	; Parameter 6 127 8
x38869:	mov word [bp + 14], 127	; 5: 199 70 14 127 0

limits_test$28:	; Call 6 printf 0
x38874:	mov word [bp + 6], limits_test$29	; 5: 199 70 6 237 151
x38879:	mov [bp + 8], bp	; 3: 137 110 8
x38882:	add bp, 6	; 3: 131 197 6
x38885:	mov di, bp	; 2: 137 239
x38887:	add di, 2	; 3: 131 199 2
x38890:	jmp printf	; 3: 233 23 117

limits_test$29:	; PostCall 6

limits_test$30:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$31:	; Parameter 6 string_USHRT_MAX203D2025u0A0A# 6
x38893:	mov word [bp + 12], @9523$string_USHRT_MAX203D2025u0A0A#	; 5: 199 70 12 105 153

limits_test$32:	; Parameter 6 255 8
x38898:	mov word [bp + 14], 255	; 5: 199 70 14 255 0

limits_test$33:	; Call 6 printf 0
x38903:	mov word [bp + 6], limits_test$34	; 5: 199 70 6 10 152
x38908:	mov [bp + 8], bp	; 3: 137 110 8
x38911:	add bp, 6	; 3: 131 197 6
x38914:	mov di, bp	; 2: 137 239
x38916:	add di, 2	; 3: 131 199 2
x38919:	jmp printf	; 3: 233 250 116

limits_test$34:	; PostCall 6

limits_test$35:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$36:	; Parameter 6 string_INT_MIN203D2025i0A# 6
x38922:	mov word [bp + 12], @9528$string_INT_MIN203D2025i0A#	; 5: 199 70 12 122 153

limits_test$37:	; Parameter 6 -32768 8
x38927:	mov word [bp + 14], -32768	; 5: 199 70 14 0 128

limits_test$38:	; Call 6 printf 0
x38932:	mov word [bp + 6], limits_test$39	; 5: 199 70 6 39 152
x38937:	mov [bp + 8], bp	; 3: 137 110 8
x38940:	add bp, 6	; 3: 131 197 6
x38943:	mov di, bp	; 2: 137 239
x38945:	add di, 2	; 3: 131 199 2
x38948:	jmp printf	; 3: 233 221 116

limits_test$39:	; PostCall 6

limits_test$40:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$41:	; Parameter 6 string_INT_MAX203D2025i0A# 6
x38951:	mov word [bp + 12], @9532$string_INT_MAX203D2025i0A#	; 5: 199 70 12 136 153

limits_test$42:	; Parameter 6 32767 8
x38956:	mov word [bp + 14], 32767	; 5: 199 70 14 255 127

limits_test$43:	; Call 6 printf 0
x38961:	mov word [bp + 6], limits_test$44	; 5: 199 70 6 68 152
x38966:	mov [bp + 8], bp	; 3: 137 110 8
x38969:	add bp, 6	; 3: 131 197 6
x38972:	mov di, bp	; 2: 137 239
x38974:	add di, 2	; 3: 131 199 2
x38977:	jmp printf	; 3: 233 192 116

limits_test$44:	; PostCall 6

limits_test$45:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$46:	; Parameter 6 string_UINT_MAX203D2025u0A0A# 6
x38980:	mov word [bp + 12], @9536$string_UINT_MAX203D2025u0A0A#	; 5: 199 70 12 150 153

limits_test$47:	; Parameter 6 65535 8
x38985:	mov word [bp + 14], 65535	; 5: 199 70 14 255 255

limits_test$48:	; Call 6 printf 0
x38990:	mov word [bp + 6], limits_test$49	; 5: 199 70 6 97 152
x38995:	mov [bp + 8], bp	; 3: 137 110 8
x38998:	add bp, 6	; 3: 131 197 6
x39001:	mov di, bp	; 2: 137 239
x39003:	add di, 2	; 3: 131 199 2
x39006:	jmp printf	; 3: 233 163 116

limits_test$49:	; PostCall 6

limits_test$50:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$51:	; Parameter 6 string_LONG_MIN203D2025li0A# 6
x39009:	mov word [bp + 12], @9540$string_LONG_MIN203D2025li0A#	; 5: 199 70 12 166 153

limits_test$52:	; Parameter 6 -2147483648 8
x39014:	mov dword [bp + 14], -2147483648	; 8: 102 199 70 14 0 0 0 128

limits_test$53:	; Call 6 printf 0
x39022:	mov word [bp + 6], limits_test$54	; 5: 199 70 6 129 152
x39027:	mov [bp + 8], bp	; 3: 137 110 8
x39030:	add bp, 6	; 3: 131 197 6
x39033:	mov di, bp	; 2: 137 239
x39035:	add di, 4	; 3: 131 199 4
x39038:	jmp printf	; 3: 233 131 116

limits_test$54:	; PostCall 6

limits_test$55:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$56:	; Parameter 6 string_LONG_MAX203D2025li0A# 6
x39041:	mov word [bp + 12], @9544$string_LONG_MAX203D2025li0A#	; 5: 199 70 12 182 153

limits_test$57:	; Parameter 6 2147483647 8
x39046:	mov dword [bp + 14], 2147483647	; 8: 102 199 70 14 255 255 255 127

limits_test$58:	; Call 6 printf 0
x39054:	mov word [bp + 6], limits_test$59	; 5: 199 70 6 161 152
x39059:	mov [bp + 8], bp	; 3: 137 110 8
x39062:	add bp, 6	; 3: 131 197 6
x39065:	mov di, bp	; 2: 137 239
x39067:	add di, 4	; 3: 131 199 4
x39070:	jmp printf	; 3: 233 99 116

limits_test$59:	; PostCall 6

limits_test$60:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$61:	; Parameter 6 string_ULONG_MAX203D2025lu0A# 6
x39073:	mov word [bp + 12], @9548$string_ULONG_MAX203D2025lu0A#	; 5: 199 70 12 198 153

limits_test$62:	; Parameter 6 4294967295 8
x39078:	mov dword [bp + 14], -1	; 8: 102 199 70 14 255 255 255 255

limits_test$63:	; Call 6 printf 0
x39086:	mov word [bp + 6], limits_test$64	; 5: 199 70 6 193 152
x39091:	mov [bp + 8], bp	; 3: 137 110 8
x39094:	add bp, 6	; 3: 131 197 6
x39097:	mov di, bp	; 2: 137 239
x39099:	add di, 4	; 3: 131 199 4
x39102:	jmp printf	; 3: 233 67 116

limits_test$64:	; PostCall 6

limits_test$65:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$66:	; Parameter 6 string_ULONG_MAX203D2025lx0A# 6
x39105:	mov word [bp + 12], @9552$string_ULONG_MAX203D2025lx0A#	; 5: 199 70 12 215 153

limits_test$67:	; Parameter 6 4294967295 8
x39110:	mov dword [bp + 14], -1	; 8: 102 199 70 14 255 255 255 255

limits_test$68:	; Call 6 printf 0
x39118:	mov word [bp + 6], limits_test$69	; 5: 199 70 6 225 152
x39123:	mov [bp + 8], bp	; 3: 137 110 8
x39126:	add bp, 6	; 3: 131 197 6
x39129:	mov di, bp	; 2: 137 239
x39131:	add di, 4	; 3: 131 199 4
x39134:	jmp printf	; 3: 233 35 116

limits_test$69:	; PostCall 6

limits_test$70:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

limits_test$71:	; Parameter 6 string_ULONG_MAX203D2025lX0A# 6
x39137:	mov word [bp + 12], @9556$string_ULONG_MAX203D2025lX0A#	; 5: 199 70 12 232 153

limits_test$72:	; Parameter 6 4294967295 8
x39142:	mov dword [bp + 14], -1	; 8: 102 199 70 14 255 255 255 255

limits_test$73:	; Call 6 printf 0
x39150:	mov word [bp + 6], limits_test$74	; 5: 199 70 6 1 153
x39155:	mov [bp + 8], bp	; 3: 137 110 8
x39158:	add bp, 6	; 3: 131 197 6
x39161:	mov di, bp	; 2: 137 239
x39163:	add di, 4	; 3: 131 199 4
x39166:	jmp printf	; 3: 233 3 116

limits_test$74:	; PostCall 6

limits_test$75:	; Return 0
x39169:	mov ax, [bp]	; 3: 139 70 0
x39172:	mov di, [bp + 4]	; 3: 139 126 4
x39175:	mov bp, [bp + 2]	; 3: 139 110 2
x39178:	jmp ax	; 2: 255 224

limits_test$76:	; FunctionEnd limits_test

@9494$string_CHAR_BIT203D2025i0A#:
x39180:	db "CHAR_BIT = %i", 10, 0	; 15: 67 72 65 82 95 66 73 84 32 61 32 37 105 10 0

@9498$string_CHAR_MIN203D2025i0A0A#:
x39195:	db "CHAR_MIN = %i", 10, 10, 0	; 16: 67 72 65 82 95 77 73 78 32 61 32 37 105 10 10 0

@9503$string_CHAR_MAX203D2025i0A#:
x39211:	db "CHAR_MAX = %i", 10, 0	; 15: 67 72 65 82 95 77 65 88 32 61 32 37 105 10 0

@9508$string_UCHAR_MAX203D2025u0A0A#:
x39226:	db "UCHAR_MAX = %u", 10, 10, 0	; 17: 85 67 72 65 82 95 77 65 88 32 61 32 37 117 10 10 0

@9513$string_SHRT_MIN203D2025i0A#:
x39243:	db "SHRT_MIN = %i", 10, 0	; 15: 83 72 82 84 95 77 73 78 32 61 32 37 105 10 0

@9518$string_SHRT_MAX203D2025i0A#:
x39258:	db "SHRT_MAX = %i", 10, 0	; 15: 83 72 82 84 95 77 65 88 32 61 32 37 105 10 0

@9523$string_USHRT_MAX203D2025u0A0A#:
x39273:	db "USHRT_MAX = %u", 10, 10, 0	; 17: 85 83 72 82 84 95 77 65 88 32 61 32 37 117 10 10 0

@9528$string_INT_MIN203D2025i0A#:
x39290:	db "INT_MIN = %i", 10, 0	; 14: 73 78 84 95 77 73 78 32 61 32 37 105 10 0

@9532$string_INT_MAX203D2025i0A#:
x39304:	db "INT_MAX = %i", 10, 0	; 14: 73 78 84 95 77 65 88 32 61 32 37 105 10 0

@9536$string_UINT_MAX203D2025u0A0A#:
x39318:	db "UINT_MAX = %u", 10, 10, 0	; 16: 85 73 78 84 95 77 65 88 32 61 32 37 117 10 10 0

@9540$string_LONG_MIN203D2025li0A#:
x39334:	db "LONG_MIN = %li", 10, 0	; 16: 76 79 78 71 95 77 73 78 32 61 32 37 108 105 10 0

@9544$string_LONG_MAX203D2025li0A#:
x39350:	db "LONG_MAX = %li", 10, 0	; 16: 76 79 78 71 95 77 65 88 32 61 32 37 108 105 10 0

@9548$string_ULONG_MAX203D2025lu0A#:
x39366:	db "ULONG_MAX = %lu", 10, 0	; 17: 85 76 79 78 71 95 77 65 88 32 61 32 37 108 117 10 0

@9552$string_ULONG_MAX203D2025lx0A#:
x39383:	db "ULONG_MAX = %lx", 10, 0	; 17: 85 76 79 78 71 95 77 65 88 32 61 32 37 108 120 10 0

@9556$string_ULONG_MAX203D2025lX0A#:
x39400:	db "ULONG_MAX = %lX", 10, 0	; 17: 85 76 79 78 71 95 77 65 88 32 61 32 37 108 88 10 0

float_test:	; Empty

float_test$1:	; Return 0
x39417:	mov ax, [bp]	; 3: 139 70 0
x39420:	mov di, [bp + 4]	; 3: 139 126 4
x39423:	mov bp, [bp + 2]	; 3: 139 110 2
x39426:	jmp ax	; 2: 255 224

float_test$2:	; FunctionEnd float_test

setjmp_test:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

setjmp_test$1:	; PushFloat 10
x39428:	fld qword [@10110$float8$10#]	; 4: 221 6 76 154

setjmp_test$2:	; Parameter 6 10 6
x39432:	fstp qword [bp + 12]	; 3: 221 94 12

setjmp_test$3:	; Call 6 test 0
x39435:	mov word [bp + 6], setjmp_test$4	; 5: 199 70 6 25 154
x39440:	mov [bp + 8], bp	; 3: 137 110 8
x39443:	add bp, 6	; 3: 131 197 6
x39446:	nop	; 1: 144
x39447:	jmp test	; 2: 235 67

setjmp_test$4:	; PostCall 6

setjmp_test$5:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

setjmp_test$6:	; PushZero
x39449:	fldz	; 2: 217 238

setjmp_test$7:	; Parameter 6 0 6
x39451:	fstp qword [bp + 12]	; 3: 221 94 12

setjmp_test$8:	; Call 6 test 0
x39454:	mov word [bp + 6], setjmp_test$9	; 5: 199 70 6 44 154
x39459:	mov [bp + 8], bp	; 3: 137 110 8
x39462:	add bp, 6	; 3: 131 197 6
x39465:	nop	; 1: 144
x39466:	jmp test	; 2: 235 48

setjmp_test$9:	; PostCall 6

setjmp_test$10:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

setjmp_test$11:	; PushFloat 0.1
x39468:	fld qword [@10117$float8$0.1#]	; 4: 221 6 84 154

setjmp_test$12:	; Parameter 6 0.1 6
x39472:	fstp qword [bp + 12]	; 3: 221 94 12

setjmp_test$13:	; Call 6 test 0
x39475:	mov word [bp + 6], setjmp_test$14	; 5: 199 70 6 65 154
x39480:	mov [bp + 8], bp	; 3: 137 110 8
x39483:	add bp, 6	; 3: 131 197 6
x39486:	nop	; 1: 144
x39487:	jmp test	; 2: 235 27

setjmp_test$14:	; PostCall 6

setjmp_test$15:	; Return 0
x39489:	mov ax, [bp]	; 3: 139 70 0
x39492:	mov di, [bp + 4]	; 3: 139 126 4
x39495:	mov bp, [bp + 2]	; 3: 139 110 2
x39498:	jmp ax	; 2: 255 224

setjmp_test$16:	; FunctionEnd setjmp_test

@10110$float8$10#:
x39500:	dq 10.0	; 8: 0 0 0 0 0 0 36 64

@10117$float8$0.1#:
x39508:	dq 0.1	; 8: 154 153 153 153 153 153 185 63

test:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

test$1:	; Parameter 16 buffer 6
x39516:	mov word [bp + 22], buffer	; 5: 199 70 22 216 154

test$2:	; Call 16 setjmp 0
x39521:	mov word [bp + 16], test$3	; 5: 199 70 16 111 154
x39526:	mov [bp + 18], bp	; 3: 137 110 18
x39529:	add bp, 16	; 3: 131 197 16
x39532:	jmp setjmp	; 3: 233 130 0

test$3:	; PostCall 16

test$4:	; GetReturnValue £temporary4514

test$5:	; Assign message £temporary4514
x39535:	mov [bp + 14], bx	; 3: 137 94 14

test$6:	; NotEqual 21 message 0
x39538:	cmp word [bp + 14], 0	; 4: 131 126 14 0
x39542:	jne test$21	; 2: 117 55

test$7:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

test$8:	; Parameter 16 string_12E0202F2025f203D2025f0A# 6
x39544:	mov word [bp + 22], @10096$string_12E0202F2025f203D2025f0A#	; 5: 199 70 22 222 154

test$9:	; PushFloat x
x39549:	fld qword [bp + 6]	; 3: 221 70 6

test$10:	; Parameter 16 x 8
x39552:	fstp qword [bp + 24]	; 3: 221 94 24

test$11:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

test$12:	; PushFloat x
x39555:	fld qword [bp + 6]	; 3: 221 70 6

test$13:	; Parameter 16 x 22
x39558:	fstp qword [bp + 38]	; 3: 221 94 38

test$14:	; Call 16 inverse 16
x39561:	mov word [bp + 32], test$15	; 5: 199 70 32 151 154
x39566:	mov [bp + 34], bp	; 3: 137 110 34
x39569:	add bp, 32	; 3: 131 197 32
x39572:	jmp inverse	; 3: 233 141 0

test$15:	; PostCall 16

test$16:	; GetReturnValue £temporary4516

test$17:	; Parameter 16 £temporary4516 16
x39575:	fstp qword [bp + 32]	; 3: 221 94 32

test$18:	; Call 16 printf 0
x39578:	mov word [bp + 16], test$19	; 5: 199 70 16 173 154
x39583:	mov [bp + 18], bp	; 3: 137 110 18
x39586:	add bp, 16	; 3: 131 197 16
x39589:	mov di, bp	; 2: 137 239
x39591:	add di, 16	; 3: 131 199 16
x39594:	jmp printf	; 3: 233 87 114

test$19:	; PostCall 16

test$20:	; Goto 26
x39597:	jmp test$26	; 2: 235 30

test$21:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

test$22:	; Parameter 16 string_25s0A# 6
x39599:	mov word [bp + 22], @10099$string_25s0A#	; 5: 199 70 22 237 154

test$23:	; Parameter 16 message 8
x39604:	mov ax, [bp + 14]	; 3: 139 70 14
x39607:	mov [bp + 24], ax	; 3: 137 70 24

test$24:	; Call 16 printf 0
x39610:	mov word [bp + 16], test$25	; 5: 199 70 16 205 154
x39615:	mov [bp + 18], bp	; 3: 137 110 18
x39618:	add bp, 16	; 3: 131 197 16
x39621:	mov di, bp	; 2: 137 239
x39623:	add di, 2	; 3: 131 199 2
x39626:	jmp printf	; 3: 233 55 114

test$25:	; PostCall 16

test$26:	; Return 0
x39629:	mov ax, [bp]	; 3: 139 70 0
x39632:	mov di, [bp + 4]	; 3: 139 126 4
x39635:	mov bp, [bp + 2]	; 3: 139 110 2
x39638:	jmp ax	; 2: 255 224

test$27:	; FunctionEnd test

buffer:
x39640:	db 0, 0, 0, 0, 0, 0	; 6: 0 0 0 0 0 0

@10096$string_12E0202F2025f203D2025f0A#:
x39646:	db "1.0 / %f = %f", 10, 0	; 15: 49 46 48 32 47 32 37 102 32 61 32 37 102 10 0

@10099$string_25s0A#:
x39661:	db "%s", 10, 0	; 4: 37 115 10 0

setjmp:	; InspectRegister £temporary628 bp

setjmp$1:	; Assign bp_pointer £temporary628
x39665:	mov [bp + 8], bp	; 3: 137 110 8

setjmp$2:	; Deref £temporary629 -> buf buf 0
x39668:	mov si, [bp + 6]	; 3: 139 118 6

setjmp$3:	; Deref £temporary630 -> bp_pointer bp_pointer 0
x39671:	mov di, [bp + 8]	; 3: 139 126 8

setjmp$4:	; Assign £temporary629 -> buf £temporary630 -> bp_pointer
x39674:	mov ax, [di]	; 2: 139 5
x39676:	mov [si], ax	; 2: 137 4

setjmp$5:	; Deref £temporary631 -> buf buf 2
x39678:	mov si, [bp + 6]	; 3: 139 118 6

setjmp$6:	; Deref £temporary632 -> bp_pointer bp_pointer 2
x39681:	mov di, [bp + 8]	; 3: 139 126 8

setjmp$7:	; Assign £temporary631 -> buf £temporary632 -> bp_pointer
x39684:	mov ax, [di + 2]	; 3: 139 69 2
x39687:	mov [si + 2], ax	; 3: 137 68 2

setjmp$8:	; Deref £temporary633 -> buf buf 4
x39690:	mov si, [bp + 6]	; 3: 139 118 6

setjmp$9:	; Deref £temporary634 -> bp_pointer bp_pointer 4
x39693:	mov di, [bp + 8]	; 3: 139 126 8

setjmp$10:	; Assign £temporary633 -> buf £temporary634 -> bp_pointer
x39696:	mov ax, [di + 4]	; 3: 139 69 4
x39699:	mov [si + 4], ax	; 3: 137 68 4

setjmp$11:	; SetReturnValue 0
x39702:	mov bx, 0	; 3: 187 0 0

setjmp$12:	; Return 0
x39705:	mov ax, [bp]	; 3: 139 70 0
x39708:	mov di, [bp + 4]	; 3: 139 126 4
x39711:	mov bp, [bp + 2]	; 3: 139 110 2
x39714:	jmp ax	; 2: 255 224

setjmp$13:	; FunctionEnd setjmp

inverse:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

inverse$1:	; PushOne
x39716:	fld1	; 2: 217 232

inverse$2:	; Parameter 14 1 6
x39718:	fstp qword [bp + 20]	; 3: 221 94 20

inverse$3:	; PushFloat x
x39721:	fld qword [bp + 6]	; 3: 221 70 6

inverse$4:	; Parameter 14 x 14
x39724:	fstp qword [bp + 28]	; 3: 221 94 28

inverse$5:	; Call 14 divide 0
x39727:	mov word [bp + 14], inverse$6	; 5: 199 70 14 61 155
x39732:	mov [bp + 16], bp	; 3: 137 110 16
x39735:	add bp, 14	; 3: 131 197 14
x39738:	nop	; 1: 144
x39739:	jmp divide	; 2: 235 11

inverse$6:	; PostCall 14

inverse$7:	; GetReturnValue £temporary4506

inverse$8:	; SetReturnValue £temporary4506

inverse$9:	; Return £temporary4506
x39741:	mov ax, [bp]	; 3: 139 70 0
x39744:	mov di, [bp + 4]	; 3: 139 126 4
x39747:	mov bp, [bp + 2]	; 3: 139 110 2
x39750:	jmp ax	; 2: 255 224

inverse$10:	; FunctionEnd inverse

divide:	; PushFloat y
x39752:	fld qword [bp + 14]	; 3: 221 70 14

divide$1:	; PushZero
x39755:	fldz	; 2: 217 238

divide$2:	; Equal 8 y 0
x39757:	fcompp	; 2: 222 217
x39759:	fstsw ax	; 3: 155 223 224
x39762:	sahf	; 1: 158
x39763:	je divide$8	; 2: 116 19

divide$3:	; PushFloat x
x39765:	fld qword [bp + 6]	; 3: 221 70 6

divide$4:	; PushFloat y
x39768:	fld qword [bp + 14]	; 3: 221 70 14

divide$5:	; SignedDivide £temporary4510 x y
x39771:	fdiv	; 2: 222 249

divide$6:	; SetReturnValue £temporary4510

divide$7:	; Return £temporary4510
x39773:	mov ax, [bp]	; 3: 139 70 0
x39776:	mov di, [bp + 4]	; 3: 139 126 4
x39779:	mov bp, [bp + 2]	; 3: 139 110 2
x39782:	jmp ax	; 2: 255 224

divide$8:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

divide$9:	; Parameter 22 buffer 6
x39784:	mov word [bp + 28], buffer	; 5: 199 70 28 216 154

divide$10:	; Parameter 22 string_Division20by20Zero2E# 8
x39789:	mov word [bp + 30], @10084$string_Division20by20Zero2E#	; 5: 199 70 30 141 155

divide$11:	; Call 22 longjmp 0
x39794:	mov word [bp + 22], divide$12	; 5: 199 70 22 128 155
x39799:	mov [bp + 24], bp	; 3: 137 110 24
x39802:	add bp, 22	; 3: 131 197 22
x39805:	nop	; 1: 144
x39806:	jmp longjmp	; 2: 235 31

divide$12:	; PostCall 22

divide$13:	; PushZero
x39808:	fldz	; 2: 217 238

divide$14:	; SetReturnValue 0

divide$15:	; Return 0
x39810:	mov ax, [bp]	; 3: 139 70 0
x39813:	mov di, [bp + 4]	; 3: 139 126 4
x39816:	mov bp, [bp + 2]	; 3: 139 110 2
x39819:	jmp ax	; 2: 255 224

divide$16:	; FunctionEnd divide

@10084$string_Division20by20Zero2E#:
x39821:	db "Division by Zero.", 0	; 18: 68 105 118 105 115 105 111 110 32 98 121 32 90 101 114 111 46 0

longjmp:	; AssignRegister bx return_value
x39839:	mov bx, [bp + 8]	; 3: 139 94 8

longjmp$1:	; Deref £temporary637 -> buf buf 0
x39842:	mov si, [bp + 6]	; 3: 139 118 6

longjmp$2:	; AssignRegister cx £temporary637 -> buf
x39845:	mov cx, [si]	; 2: 139 12

longjmp$3:	; Deref £temporary639 -> buf buf 4
x39847:	mov si, [bp + 6]	; 3: 139 118 6

longjmp$4:	; AssignRegister di £temporary639 -> buf
x39850:	mov di, [si + 4]	; 3: 139 124 4

longjmp$5:	; Deref £temporary641 -> buf buf 2
x39853:	mov si, [bp + 6]	; 3: 139 118 6

longjmp$6:	; AssignRegister bp £temporary641 -> buf
x39856:	mov bp, [si + 2]	; 3: 139 108 2

longjmp$7:	; JumpRegister cx
x39859:	jmp cx	; 2: 255 225

longjmp$8:	; Return 0
x39861:	mov ax, [bp]	; 3: 139 70 0
x39864:	mov di, [bp + 4]	; 3: 139 126 4
x39867:	mov bp, [bp + 2]	; 3: 139 110 2
x39870:	jmp ax	; 2: 255 224

longjmp$9:	; FunctionEnd longjmp

stdio_test:	; Assign n 0
x39872:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

stdio_test$1:	; address £temporary5600 n
x39877:	mov si, bp	; 2: 137 238
x39879:	add si, 6	; 3: 131 198 6

stdio_test$2:	; Assign p £temporary5600
x39882:	mov [bp + 8], si	; 3: 137 118 8

stdio_test$3:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$4:	; Parameter 10 string_3C25i3E203C25i3E203C25li3E203C25li3E203C25u3E203C25lu3E0A0A# 6
x39885:	mov word [bp + 16], @12122$string_3C25i3E203C25i3E203C25li3E203C25li3E203C25u3E203C25lu3E0A0A#	; 5: 199 70 16 168 163

stdio_test$5:	; Parameter 10 123 8
x39890:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$6:	; Parameter 10 -123 10
x39895:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$7:	; Parameter 10 123 12
x39900:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$8:	; Parameter 10 -123 16
x39908:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$9:	; Parameter 10 123 20
x39916:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$10:	; Parameter 10 123 22
x39921:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$11:	; Call 10 printf 0
x39929:	mov word [bp + 10], stdio_test$12	; 5: 199 70 10 12 156
x39934:	mov [bp + 12], bp	; 3: 137 110 12
x39937:	add bp, 10	; 3: 131 197 10
x39940:	mov di, bp	; 2: 137 239
x39942:	add di, 18	; 3: 131 199 18
x39945:	jmp printf	; 3: 233 248 112

stdio_test$12:	; PostCall 10

stdio_test$13:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$14:	; Parameter 10 string_3C256i3E203C256i3E203C256li3E203C256li3E203C256u3E203C256lu3E0A# 6
x39948:	mov word [bp + 16], @12136$string_3C256i3E203C256i3E203C256li3E203C256li3E203C256u3E203C256lu3E0A#	; 5: 199 70 16 203 163

stdio_test$15:	; Parameter 10 123 8
x39953:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$16:	; Parameter 10 -123 10
x39958:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$17:	; Parameter 10 123 12
x39963:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$18:	; Parameter 10 -123 16
x39971:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$19:	; Parameter 10 123 20
x39979:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$20:	; Parameter 10 123 22
x39984:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$21:	; Call 10 printf 0
x39992:	mov word [bp + 10], stdio_test$22	; 5: 199 70 10 75 156
x39997:	mov [bp + 12], bp	; 3: 137 110 12
x40000:	add bp, 10	; 3: 131 197 10
x40003:	mov di, bp	; 2: 137 239
x40005:	add di, 18	; 3: 131 199 18
x40008:	jmp printf	; 3: 233 185 112

stdio_test$22:	; PostCall 10

stdio_test$23:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$24:	; Parameter 10 string_3C252B6i3E203C252B6i3E203C252B6li3E203C252B6li3E203C252B6u3E203C252B6lu3E0A# 6
x40011:	mov word [bp + 16], @12150$string_3C252B6i3E203C252B6i3E203C252B6li3E203C252B6li3E203C252B6u3E203C252B6lu3E0A#	; 5: 199 70 16 243 163

stdio_test$25:	; Parameter 10 123 8
x40016:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$26:	; Parameter 10 -123 10
x40021:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$27:	; Parameter 10 123 12
x40026:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$28:	; Parameter 10 -123 16
x40034:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$29:	; Parameter 10 123 20
x40042:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$30:	; Parameter 10 123 22
x40047:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$31:	; Call 10 printf 0
x40055:	mov word [bp + 10], stdio_test$32	; 5: 199 70 10 138 156
x40060:	mov [bp + 12], bp	; 3: 137 110 12
x40063:	add bp, 10	; 3: 131 197 10
x40066:	mov di, bp	; 2: 137 239
x40068:	add di, 18	; 3: 131 199 18
x40071:	jmp printf	; 3: 233 122 112

stdio_test$32:	; PostCall 10

stdio_test$33:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$34:	; Parameter 10 string_3C252D6i3E203C252D6i3E203C252D6li3E203C252D6li3E203C252D6u3E203C252D6lu3E0A# 6
x40074:	mov word [bp + 16], @12164$string_3C252D6i3E203C252D6i3E203C252D6li3E203C252D6li3E203C252D6u3E203C252D6lu3E0A#	; 5: 199 70 16 33 164

stdio_test$35:	; Parameter 10 123 8
x40079:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$36:	; Parameter 10 -123 10
x40084:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$37:	; Parameter 10 123 12
x40089:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$38:	; Parameter 10 -123 16
x40097:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$39:	; Parameter 10 123 20
x40105:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$40:	; Parameter 10 123 22
x40110:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$41:	; Call 10 printf 0
x40118:	mov word [bp + 10], stdio_test$42	; 5: 199 70 10 201 156
x40123:	mov [bp + 12], bp	; 3: 137 110 12
x40126:	add bp, 10	; 3: 131 197 10
x40129:	mov di, bp	; 2: 137 239
x40131:	add di, 18	; 3: 131 199 18
x40134:	jmp printf	; 3: 233 59 112

stdio_test$42:	; PostCall 10

stdio_test$43:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$44:	; Parameter 10 string_3C252B2D6i3E203C252B2D6i3E203C252B2D6li3E203C252B2D6li3E203C252B2D6u3E203C252B2D6lu3E0A0A# 6
x40137:	mov word [bp + 16], @12178$string_3C252B2D6i3E203C252B2D6i3E203C252B2D6li3E203C252B2D6li3E203C252B2D6u3E203C252B2D6lu3E0A0A#	; 5: 199 70 16 79 164

stdio_test$45:	; Parameter 10 123 8
x40142:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$46:	; Parameter 10 -123 10
x40147:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$47:	; Parameter 10 123 12
x40152:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$48:	; Parameter 10 -123 16
x40160:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$49:	; Parameter 10 123 20
x40168:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$50:	; Parameter 10 123 22
x40173:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$51:	; Call 10 printf 0
x40181:	mov word [bp + 10], stdio_test$52	; 5: 199 70 10 8 157
x40186:	mov [bp + 12], bp	; 3: 137 110 12
x40189:	add bp, 10	; 3: 131 197 10
x40192:	mov di, bp	; 2: 137 239
x40194:	add di, 18	; 3: 131 199 18
x40197:	jmp printf	; 3: 233 252 111

stdio_test$52:	; PostCall 10

stdio_test$53:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$54:	; Parameter 10 string_3C2506i3E203C2506i3E203C2506li3E203C2506li3E203C2506u3E203C2506lu3E0A# 6
x40200:	mov word [bp + 16], @12196$string_3C2506i3E203C2506i3E203C2506li3E203C2506li3E203C2506u3E203C2506lu3E0A#	; 5: 199 70 16 132 164

stdio_test$55:	; Parameter 10 123 8
x40205:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$56:	; Parameter 10 -123 10
x40210:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$57:	; Parameter 10 123 12
x40215:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$58:	; Parameter 10 -123 16
x40223:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$59:	; Parameter 10 123 20
x40231:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$60:	; Parameter 10 123 22
x40236:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$61:	; Call 10 printf 0
x40244:	mov word [bp + 10], stdio_test$62	; 5: 199 70 10 71 157
x40249:	mov [bp + 12], bp	; 3: 137 110 12
x40252:	add bp, 10	; 3: 131 197 10
x40255:	mov di, bp	; 2: 137 239
x40257:	add di, 18	; 3: 131 199 18
x40260:	jmp printf	; 3: 233 189 111

stdio_test$62:	; PostCall 10

stdio_test$63:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$64:	; Parameter 10 string_3C252B06i3E203C252B06i3E203C252B06li3E203C252B06li3E203C252B06u3E203C252B06lu3E0A# 6
x40263:	mov word [bp + 16], @12210$string_3C252B06i3E203C252B06i3E203C252B06li3E203C252B06li3E203C252B06u3E203C252B06lu3E0A#	; 5: 199 70 16 178 164

stdio_test$65:	; Parameter 10 123 8
x40268:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$66:	; Parameter 10 -123 10
x40273:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$67:	; Parameter 10 123 12
x40278:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$68:	; Parameter 10 -123 16
x40286:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$69:	; Parameter 10 123 20
x40294:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$70:	; Parameter 10 123 22
x40299:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$71:	; Call 10 printf 0
x40307:	mov word [bp + 10], stdio_test$72	; 5: 199 70 10 134 157
x40312:	mov [bp + 12], bp	; 3: 137 110 12
x40315:	add bp, 10	; 3: 131 197 10
x40318:	mov di, bp	; 2: 137 239
x40320:	add di, 18	; 3: 131 199 18
x40323:	jmp printf	; 3: 233 126 111

stdio_test$72:	; PostCall 10

stdio_test$73:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$74:	; Parameter 10 string_3C252D06i3E203C252D06i3E203C252D06li3E203C252D06li3E203C252D06u3E203C252D06lu3E0A# 6
x40326:	mov word [bp + 16], @12224$string_3C252D06i3E203C252D06i3E203C252D06li3E203C252D06li3E203C252D06u3E203C252D06lu3E0A#	; 5: 199 70 16 230 164

stdio_test$75:	; Parameter 10 123 8
x40331:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$76:	; Parameter 10 -123 10
x40336:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$77:	; Parameter 10 123 12
x40341:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$78:	; Parameter 10 -123 16
x40349:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$79:	; Parameter 10 123 20
x40357:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$80:	; Parameter 10 123 22
x40362:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$81:	; Call 10 printf 0
x40370:	mov word [bp + 10], stdio_test$82	; 5: 199 70 10 197 157
x40375:	mov [bp + 12], bp	; 3: 137 110 12
x40378:	add bp, 10	; 3: 131 197 10
x40381:	mov di, bp	; 2: 137 239
x40383:	add di, 18	; 3: 131 199 18
x40386:	jmp printf	; 3: 233 63 111

stdio_test$82:	; PostCall 10

stdio_test$83:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$84:	; Parameter 10 string_3C252B2D06i3E203C252B2D06i3E203C252B2D06li3E203C252B2D06li3E203C252B2D06u3E203C252B2D06lu3E0A0A# 6
x40389:	mov word [bp + 16], @12238$string_3C252B2D06i3E203C252B2D06i3E203C252B2D06li3E203C252B2D06li3E203C252B2D06u3E203C252B2D06lu3E0A0A#	; 5: 199 70 16 26 165

stdio_test$85:	; Parameter 10 123 8
x40394:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$86:	; Parameter 10 -123 10
x40399:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$87:	; Parameter 10 123 12
x40404:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$88:	; Parameter 10 -123 16
x40412:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$89:	; Parameter 10 123 20
x40420:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$90:	; Parameter 10 123 22
x40425:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$91:	; Call 10 printf 0
x40433:	mov word [bp + 10], stdio_test$92	; 5: 199 70 10 4 158
x40438:	mov [bp + 12], bp	; 3: 137 110 12
x40441:	add bp, 10	; 3: 131 197 10
x40444:	mov di, bp	; 2: 137 239
x40446:	add di, 18	; 3: 131 199 18
x40449:	jmp printf	; 3: 233 0 111

stdio_test$92:	; PostCall 10

stdio_test$93:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$94:	; Parameter 10 string_3C25206i3E203C25206i3E203C25206li3E203C25206li3E203C25206u3E203C25206lu3E0A# 6
x40452:	mov word [bp + 16], @12252$string_3C25206i3E203C25206i3E203C25206li3E203C25206li3E203C25206u3E203C25206lu3E0A#	; 5: 199 70 16 85 165

stdio_test$95:	; Parameter 10 123 8
x40457:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$96:	; Parameter 10 -123 10
x40462:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$97:	; Parameter 10 123 12
x40467:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$98:	; Parameter 10 -123 16
x40475:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$99:	; Parameter 10 123 20
x40483:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$100:	; Parameter 10 123 22
x40488:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$101:	; Call 10 printf 0
x40496:	mov word [bp + 10], stdio_test$102	; 5: 199 70 10 67 158
x40501:	mov [bp + 12], bp	; 3: 137 110 12
x40504:	add bp, 10	; 3: 131 197 10
x40507:	mov di, bp	; 2: 137 239
x40509:	add di, 18	; 3: 131 199 18
x40512:	jmp printf	; 3: 233 193 110

stdio_test$102:	; PostCall 10

stdio_test$103:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$104:	; Parameter 10 string_3C252B206i3E203C252B206i3E203C252B206li3E203C252B206li3E203C252B206u3E203C252B206lu3E0A# 6
x40515:	mov word [bp + 16], @12266$string_3C252B206i3E203C252B206i3E203C252B206li3E203C252B206li3E203C252B206u3E203C252B206lu3E0A#	; 5: 199 70 16 131 165

stdio_test$105:	; Parameter 10 123 8
x40520:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$106:	; Parameter 10 -123 10
x40525:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$107:	; Parameter 10 123 12
x40530:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$108:	; Parameter 10 -123 16
x40538:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$109:	; Parameter 10 123 20
x40546:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$110:	; Parameter 10 123 22
x40551:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$111:	; Call 10 printf 0
x40559:	mov word [bp + 10], stdio_test$112	; 5: 199 70 10 130 158
x40564:	mov [bp + 12], bp	; 3: 137 110 12
x40567:	add bp, 10	; 3: 131 197 10
x40570:	mov di, bp	; 2: 137 239
x40572:	add di, 18	; 3: 131 199 18
x40575:	jmp printf	; 3: 233 130 110

stdio_test$112:	; PostCall 10

stdio_test$113:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$114:	; Parameter 10 string_3C252D206i3E203C252D206i3E203C252D206li3E203C252D206li3E203C252D206u3E203C252D206lu3E0A# 6
x40578:	mov word [bp + 16], @12280$string_3C252D206i3E203C252D206i3E203C252D206li3E203C252D206li3E203C252D206u3E203C252D206lu3E0A#	; 5: 199 70 16 183 165

stdio_test$115:	; Parameter 10 123 8
x40583:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$116:	; Parameter 10 -123 10
x40588:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$117:	; Parameter 10 123 12
x40593:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$118:	; Parameter 10 -123 16
x40601:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$119:	; Parameter 10 123 20
x40609:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$120:	; Parameter 10 123 22
x40614:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$121:	; Call 10 printf 0
x40622:	mov word [bp + 10], stdio_test$122	; 5: 199 70 10 193 158
x40627:	mov [bp + 12], bp	; 3: 137 110 12
x40630:	add bp, 10	; 3: 131 197 10
x40633:	mov di, bp	; 2: 137 239
x40635:	add di, 18	; 3: 131 199 18
x40638:	jmp printf	; 3: 233 67 110

stdio_test$122:	; PostCall 10

stdio_test$123:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$124:	; Parameter 10 string_3C252B2D206i3E203C252B2D206i3E203C252B2D206li3E203C252B2D206li3E203C252B2D206u3E203C252B2D206lu3E0A0A# 6
x40641:	mov word [bp + 16], @12294$string_3C252B2D206i3E203C252B2D206i3E203C252B2D206li3E203C252B2D206li3E203C252B2D206u3E203C252B2D206lu3E0A0A#	; 5: 199 70 16 235 165

stdio_test$125:	; Parameter 10 123 8
x40646:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$126:	; Parameter 10 -123 10
x40651:	mov word [bp + 20], -123	; 5: 199 70 20 133 255

stdio_test$127:	; Parameter 10 123 12
x40656:	mov dword [bp + 22], 123	; 8: 102 199 70 22 123 0 0 0

stdio_test$128:	; Parameter 10 -123 16
x40664:	mov dword [bp + 26], -123	; 8: 102 199 70 26 133 255 255 255

stdio_test$129:	; Parameter 10 123 20
x40672:	mov word [bp + 30], 123	; 5: 199 70 30 123 0

stdio_test$130:	; Parameter 10 123 22
x40677:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$131:	; Call 10 printf 0
x40685:	mov word [bp + 10], stdio_test$132	; 5: 199 70 10 0 159
x40690:	mov [bp + 12], bp	; 3: 137 110 12
x40693:	add bp, 10	; 3: 131 197 10
x40696:	mov di, bp	; 2: 137 239
x40698:	add di, 18	; 3: 131 199 18
x40701:	jmp printf	; 3: 233 4 110

stdio_test$132:	; PostCall 10

stdio_test$133:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$134:	; Parameter 10 string_3C25x3E203C25X3E203C25o3E203C25lx3E203C25lX3E203C25lo3E0A# 6
x40704:	mov word [bp + 16], @12308$string_3C25x3E203C25X3E203C25o3E203C25lx3E203C25lX3E203C25lo3E0A#	; 5: 199 70 16 38 166

stdio_test$135:	; Parameter 10 123 8
x40709:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$136:	; Parameter 10 123 10
x40714:	mov word [bp + 20], 123	; 5: 199 70 20 123 0

stdio_test$137:	; Parameter 10 123 12
x40719:	mov word [bp + 22], 123	; 5: 199 70 22 123 0

stdio_test$138:	; Parameter 10 123 14
x40724:	mov dword [bp + 24], 123	; 8: 102 199 70 24 123 0 0 0

stdio_test$139:	; Parameter 10 123 18
x40732:	mov dword [bp + 28], 123	; 8: 102 199 70 28 123 0 0 0

stdio_test$140:	; Parameter 10 123 22
x40740:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$141:	; Call 10 printf 0
x40748:	mov word [bp + 10], stdio_test$142	; 5: 199 70 10 63 159
x40753:	mov [bp + 12], bp	; 3: 137 110 12
x40756:	add bp, 10	; 3: 131 197 10
x40759:	mov di, bp	; 2: 137 239
x40761:	add di, 18	; 3: 131 199 18
x40764:	jmp printf	; 3: 233 197 109

stdio_test$142:	; PostCall 10

stdio_test$143:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$144:	; Parameter 10 string_3C2523x3E203C2523X3E203C2523o3E203C2523lx3E203C2523lX3E203C2523lo3E0A# 6
x40767:	mov word [bp + 16], @12322$string_3C2523x3E203C2523X3E203C2523o3E203C2523lx3E203C2523lX3E203C2523lo3E0A#	; 5: 199 70 16 72 166

stdio_test$145:	; Parameter 10 123 8
x40772:	mov word [bp + 18], 123	; 5: 199 70 18 123 0

stdio_test$146:	; Parameter 10 123 10
x40777:	mov word [bp + 20], 123	; 5: 199 70 20 123 0

stdio_test$147:	; Parameter 10 123 12
x40782:	mov word [bp + 22], 123	; 5: 199 70 22 123 0

stdio_test$148:	; Parameter 10 123 14
x40787:	mov dword [bp + 24], 123	; 8: 102 199 70 24 123 0 0 0

stdio_test$149:	; Parameter 10 123 18
x40795:	mov dword [bp + 28], 123	; 8: 102 199 70 28 123 0 0 0

stdio_test$150:	; Parameter 10 123 22
x40803:	mov dword [bp + 32], 123	; 8: 102 199 70 32 123 0 0 0

stdio_test$151:	; Call 10 printf 0
x40811:	mov word [bp + 10], stdio_test$152	; 5: 199 70 10 126 159
x40816:	mov [bp + 12], bp	; 3: 137 110 12
x40819:	add bp, 10	; 3: 131 197 10
x40822:	mov di, bp	; 2: 137 239
x40824:	add di, 18	; 3: 131 199 18
x40827:	jmp printf	; 3: 233 134 109

stdio_test$152:	; PostCall 10

stdio_test$153:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$154:	; Parameter 10 string_3C25253E203C25s3E203C25c3E203C25p3E0A0A# 6
x40830:	mov word [bp + 16], @12336$string_3C25253E203C25s3E203C25c3E203C25p3E0A0A#	; 5: 199 70 16 112 166

stdio_test$155:	; Parameter 10 string_Hello2C20World21# 8
x40835:	mov word [bp + 18], @12337$string_Hello2C20World21#	; 5: 199 70 18 134 166

stdio_test$156:	; Parameter 10 88 10
x40840:	mov word [bp + 20], 88	; 5: 199 70 20 88 0

stdio_test$157:	; Parameter 10 p 12
x40845:	mov ax, [bp + 8]	; 3: 139 70 8
x40848:	mov [bp + 22], ax	; 3: 137 70 22

stdio_test$158:	; Call 10 printf 0
x40851:	mov word [bp + 10], stdio_test$159	; 5: 199 70 10 166 159
x40856:	mov [bp + 12], bp	; 3: 137 110 12
x40859:	add bp, 10	; 3: 131 197 10
x40862:	mov di, bp	; 2: 137 239
x40864:	add di, 6	; 3: 131 199 6
x40867:	jmp printf	; 3: 233 94 109

stdio_test$159:	; PostCall 10

stdio_test$160:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$161:	; Parameter 10 string_3C25f3E203C25e3E203C25E3E203C25g3E203C25G3E0A# 6
x40870:	mov word [bp + 16], @12342$string_3C25f3E203C25e3E203C25E3E203C25g3E203C25G3E0A#	; 5: 199 70 16 148 166

stdio_test$162:	; PushFloat 123.456
x40875:	fld qword [@12343$float8$123.456#]	; 4: 221 6 174 166

stdio_test$163:	; Parameter 10 123.456 8
x40879:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$164:	; PushFloat 123.456
x40882:	fld qword [@12344$float8$123.456#]	; 4: 221 6 182 166

stdio_test$165:	; Parameter 10 123.456 16
x40886:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$166:	; PushFloat 123.456
x40889:	fld qword [@12345$float8$123.456#]	; 4: 221 6 190 166

stdio_test$167:	; Parameter 10 123.456 24
x40893:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$168:	; PushFloat 123456.1
x40896:	fld qword [@12346$float8$123456.1#]	; 4: 221 6 198 166

stdio_test$169:	; Parameter 10 123456.1 32
x40900:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$170:	; PushFloat 123456.1
x40903:	fld qword [@12347$float8$123456.1#]	; 4: 221 6 206 166

stdio_test$171:	; Parameter 10 123456.1 40
x40907:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$172:	; Call 10 printf 0
x40910:	mov word [bp + 10], stdio_test$173	; 5: 199 70 10 225 159
x40915:	mov [bp + 12], bp	; 3: 137 110 12
x40918:	add bp, 10	; 3: 131 197 10
x40921:	mov di, bp	; 2: 137 239
x40923:	add di, 40	; 3: 131 199 40
x40926:	jmp printf	; 3: 233 35 109

stdio_test$173:	; PostCall 10

stdio_test$174:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$175:	; Parameter 10 string_3C25lf3E203C25le3E203C25lE3E203C25lg3E203C25lG3E0A# 6
x40929:	mov word [bp + 16], @12354$string_3C25lf3E203C25le3E203C25lE3E203C25lg3E203C25lG3E0A#	; 5: 199 70 16 214 166

stdio_test$176:	; PushFloat 123.456
x40934:	fld qword [@12355$float8$123.456#]	; 4: 221 6 245 166

stdio_test$177:	; Parameter 10 123.456 8
x40938:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$178:	; PushFloat 123.456
x40941:	fld qword [@12356$float8$123.456#]	; 4: 221 6 253 166

stdio_test$179:	; Parameter 10 123.456 16
x40945:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$180:	; PushFloat 123.456
x40948:	fld qword [@12357$float8$123.456#]	; 4: 221 6 5 167

stdio_test$181:	; Parameter 10 123.456 24
x40952:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$182:	; PushFloat 123456.1
x40955:	fld qword [@12358$float8$123456.1#]	; 4: 221 6 13 167

stdio_test$183:	; Parameter 10 123456.1 32
x40959:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$184:	; PushFloat 123456.1
x40962:	fld qword [@12359$float8$123456.1#]	; 4: 221 6 21 167

stdio_test$185:	; Parameter 10 123456.1 40
x40966:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$186:	; Call 10 printf 0
x40969:	mov word [bp + 10], stdio_test$187	; 5: 199 70 10 28 160
x40974:	mov [bp + 12], bp	; 3: 137 110 12
x40977:	add bp, 10	; 3: 131 197 10
x40980:	mov di, bp	; 2: 137 239
x40982:	add di, 40	; 3: 131 199 40
x40985:	jmp printf	; 3: 233 232 108

stdio_test$187:	; PostCall 10

stdio_test$188:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$189:	; Parameter 10 string_3C2523f3E203C2523e3E203C2523E3E203C2523g3E203C2523G3E0A# 6
x40988:	mov word [bp + 16], @12366$string_3C2523f3E203C2523e3E203C2523E3E203C2523g3E203C2523G3E0A#	; 5: 199 70 16 29 167

stdio_test$190:	; PushFloat 123.456
x40993:	fld qword [@12367$float8$123.456#]	; 4: 221 6 60 167

stdio_test$191:	; Parameter 10 123.456 8
x40997:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$192:	; PushFloat 123.456
x41000:	fld qword [@12368$float8$123.456#]	; 4: 221 6 68 167

stdio_test$193:	; Parameter 10 123.456 16
x41004:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$194:	; PushFloat 123.456
x41007:	fld qword [@12369$float8$123.456#]	; 4: 221 6 76 167

stdio_test$195:	; Parameter 10 123.456 24
x41011:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$196:	; PushFloat 123.456
x41014:	fld qword [@12370$float8$123.456#]	; 4: 221 6 84 167

stdio_test$197:	; Parameter 10 123.456 32
x41018:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$198:	; PushFloat 123.456
x41021:	fld qword [@12371$float8$123.456#]	; 4: 221 6 92 167

stdio_test$199:	; Parameter 10 123.456 40
x41025:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$200:	; Call 10 printf 0
x41028:	mov word [bp + 10], stdio_test$201	; 5: 199 70 10 87 160
x41033:	mov [bp + 12], bp	; 3: 137 110 12
x41036:	add bp, 10	; 3: 131 197 10
x41039:	mov di, bp	; 2: 137 239
x41041:	add di, 40	; 3: 131 199 40
x41044:	jmp printf	; 3: 233 173 108

stdio_test$201:	; PostCall 10

stdio_test$202:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$203:	; Parameter 10 string_3C2523lf3E203C2523le3E203C2523lE3E203C2523lg3E203C2523lG3E0A# 6
x41047:	mov word [bp + 16], @12378$string_3C2523lf3E203C2523le3E203C2523lE3E203C2523lg3E203C2523lG3E0A#	; 5: 199 70 16 100 167

stdio_test$204:	; PushFloat 123.456
x41052:	fld qword [@12379$float8$123.456#]	; 4: 221 6 136 167

stdio_test$205:	; Parameter 10 123.456 8
x41056:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$206:	; PushFloat 123.456
x41059:	fld qword [@12380$float8$123.456#]	; 4: 221 6 144 167

stdio_test$207:	; Parameter 10 123.456 16
x41063:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$208:	; PushFloat 123.456
x41066:	fld qword [@12381$float8$123.456#]	; 4: 221 6 152 167

stdio_test$209:	; Parameter 10 123.456 24
x41070:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$210:	; PushFloat 123.456
x41073:	fld qword [@12382$float8$123.456#]	; 4: 221 6 160 167

stdio_test$211:	; Parameter 10 123.456 32
x41077:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$212:	; PushFloat 123.456
x41080:	fld qword [@12383$float8$123.456#]	; 4: 221 6 168 167

stdio_test$213:	; Parameter 10 123.456 40
x41084:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$214:	; Call 10 printf 0
x41087:	mov word [bp + 10], stdio_test$215	; 5: 199 70 10 146 160
x41092:	mov [bp + 12], bp	; 3: 137 110 12
x41095:	add bp, 10	; 3: 131 197 10
x41098:	mov di, bp	; 2: 137 239
x41100:	add di, 40	; 3: 131 199 40
x41103:	jmp printf	; 3: 233 114 108

stdio_test$215:	; PostCall 10

stdio_test$216:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$217:	; Parameter 10 string_3C2562E3f3E203C2562E3e3E203C2562E3E3E203C2562E3g3E203C2562E3G3E0A# 6
x41106:	mov word [bp + 16], @12390$string_3C2562E3f3E203C2562E3e3E203C2562E3E3E203C2562E3g3E203C2562E3G3E0A#	; 5: 199 70 16 176 167

stdio_test$218:	; PushFloat 123.456
x41111:	fld qword [@12391$float8$123.456#]	; 4: 221 6 217 167

stdio_test$219:	; Parameter 10 123.456 8
x41115:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$220:	; PushFloat 123.456
x41118:	fld qword [@12392$float8$123.456#]	; 4: 221 6 225 167

stdio_test$221:	; Parameter 10 123.456 16
x41122:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$222:	; PushFloat 123.456
x41125:	fld qword [@12393$float8$123.456#]	; 4: 221 6 233 167

stdio_test$223:	; Parameter 10 123.456 24
x41129:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$224:	; PushFloat 123.456
x41132:	fld qword [@12394$float8$123.456#]	; 4: 221 6 241 167

stdio_test$225:	; Parameter 10 123.456 32
x41136:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$226:	; PushFloat 123.456
x41139:	fld qword [@12395$float8$123.456#]	; 4: 221 6 249 167

stdio_test$227:	; Parameter 10 123.456 40
x41143:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$228:	; Call 10 printf 0
x41146:	mov word [bp + 10], stdio_test$229	; 5: 199 70 10 205 160
x41151:	mov [bp + 12], bp	; 3: 137 110 12
x41154:	add bp, 10	; 3: 131 197 10
x41157:	mov di, bp	; 2: 137 239
x41159:	add di, 40	; 3: 131 199 40
x41162:	jmp printf	; 3: 233 55 108

stdio_test$229:	; PostCall 10

stdio_test$230:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$231:	; Parameter 10 string_3C2562E3lf3E203C2562E3le3E203C2562E3lE3E203C2562E3lg3E203C2562E3lG3E0A0A# 6
x41165:	mov word [bp + 16], @12402$string_3C2562E3lf3E203C2562E3le3E203C2562E3lE3E203C2562E3lg3E203C2562E3lG3E0A0A#	; 5: 199 70 16 1 168

stdio_test$232:	; PushFloat 123.456
x41170:	fld qword [@12403$float8$123.456#]	; 4: 221 6 48 168

stdio_test$233:	; Parameter 10 123.456 8
x41174:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$234:	; PushFloat 123.456
x41177:	fld qword [@12404$float8$123.456#]	; 4: 221 6 56 168

stdio_test$235:	; Parameter 10 123.456 16
x41181:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$236:	; PushFloat 123.456
x41184:	fld qword [@12405$float8$123.456#]	; 4: 221 6 64 168

stdio_test$237:	; Parameter 10 123.456 24
x41188:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$238:	; PushFloat 123.456
x41191:	fld qword [@12406$float8$123.456#]	; 4: 221 6 72 168

stdio_test$239:	; Parameter 10 123.456 32
x41195:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$240:	; PushFloat 123.456
x41198:	fld qword [@12407$float8$123.456#]	; 4: 221 6 80 168

stdio_test$241:	; Parameter 10 123.456 40
x41202:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$242:	; Call 10 printf 0
x41205:	mov word [bp + 10], stdio_test$243	; 5: 199 70 10 8 161
x41210:	mov [bp + 12], bp	; 3: 137 110 12
x41213:	add bp, 10	; 3: 131 197 10
x41216:	mov di, bp	; 2: 137 239
x41218:	add di, 40	; 3: 131 199 40
x41221:	jmp printf	; 3: 233 252 107

stdio_test$243:	; PostCall 10

stdio_test$244:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$245:	; Parameter 10 string_3C25f3E203C25e3E203C25E3E203C25g3E203C25G3E0A# 6
x41224:	mov word [bp + 16], @12414$string_3C25f3E203C25e3E203C25E3E203C25g3E203C25G3E0A#	; 5: 199 70 16 88 168

stdio_test$246:	; PushFloat -123.456
x41229:	fld qword [@12415$float8$minus123.456#]	; 4: 221 6 114 168

stdio_test$247:	; Parameter 10 -123.456 8
x41233:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$248:	; PushFloat -123.456
x41236:	fld qword [@12416$float8$minus123.456#]	; 4: 221 6 122 168

stdio_test$249:	; Parameter 10 -123.456 16
x41240:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$250:	; PushFloat -123.456
x41243:	fld qword [@12417$float8$minus123.456#]	; 4: 221 6 130 168

stdio_test$251:	; Parameter 10 -123.456 24
x41247:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$252:	; PushFloat -0.000000123456
x41250:	fld qword [@12418$float8$minus0.000000123456#]	; 4: 221 6 138 168

stdio_test$253:	; Parameter 10 -0.000000123456 32
x41254:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$254:	; PushFloat -0.000000123456
x41257:	fld qword [@12419$float8$minus0.000000123456#]	; 4: 221 6 146 168

stdio_test$255:	; Parameter 10 -0.000000123456 40
x41261:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$256:	; Call 10 printf 0
x41264:	mov word [bp + 10], stdio_test$257	; 5: 199 70 10 67 161
x41269:	mov [bp + 12], bp	; 3: 137 110 12
x41272:	add bp, 10	; 3: 131 197 10
x41275:	mov di, bp	; 2: 137 239
x41277:	add di, 40	; 3: 131 199 40
x41280:	jmp printf	; 3: 233 193 107

stdio_test$257:	; PostCall 10

stdio_test$258:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$259:	; Parameter 10 string_3C25lf3E203C25le3E203C25lE3E203C25lg3E203C25lG3E0A# 6
x41283:	mov word [bp + 16], @12426$string_3C25lf3E203C25le3E203C25lE3E203C25lg3E203C25lG3E0A#	; 5: 199 70 16 154 168

stdio_test$260:	; PushFloat -123.456
x41288:	fld qword [@12427$float8$minus123.456#]	; 4: 221 6 185 168

stdio_test$261:	; Parameter 10 -123.456 8
x41292:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$262:	; PushFloat -123.456
x41295:	fld qword [@12428$float8$minus123.456#]	; 4: 221 6 193 168

stdio_test$263:	; Parameter 10 -123.456 16
x41299:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$264:	; PushFloat -123.456
x41302:	fld qword [@12429$float8$minus123.456#]	; 4: 221 6 201 168

stdio_test$265:	; Parameter 10 -123.456 24
x41306:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$266:	; PushFloat -0.000000123456
x41309:	fld qword [@12430$float8$minus0.000000123456#]	; 4: 221 6 209 168

stdio_test$267:	; Parameter 10 -0.000000123456 32
x41313:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$268:	; PushFloat -0.000000123456
x41316:	fld qword [@12431$float8$minus0.000000123456#]	; 4: 221 6 217 168

stdio_test$269:	; Parameter 10 -0.000000123456 40
x41320:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$270:	; Call 10 printf 0
x41323:	mov word [bp + 10], stdio_test$271	; 5: 199 70 10 126 161
x41328:	mov [bp + 12], bp	; 3: 137 110 12
x41331:	add bp, 10	; 3: 131 197 10
x41334:	mov di, bp	; 2: 137 239
x41336:	add di, 40	; 3: 131 199 40
x41339:	jmp printf	; 3: 233 134 107

stdio_test$271:	; PostCall 10

stdio_test$272:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$273:	; Parameter 10 string_3C2523f3E203C2523e3E203C2523E3E203C2523g3E203C2523G3E0A# 6
x41342:	mov word [bp + 16], @12438$string_3C2523f3E203C2523e3E203C2523E3E203C2523g3E203C2523G3E0A#	; 5: 199 70 16 225 168

stdio_test$274:	; PushFloat -123.456
x41347:	fld qword [@12439$float8$minus123.456#]	; 4: 221 6 0 169

stdio_test$275:	; Parameter 10 -123.456 8
x41351:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$276:	; PushFloat -123.456
x41354:	fld qword [@12440$float8$minus123.456#]	; 4: 221 6 8 169

stdio_test$277:	; Parameter 10 -123.456 16
x41358:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$278:	; PushFloat -123.456
x41361:	fld qword [@12441$float8$minus123.456#]	; 4: 221 6 16 169

stdio_test$279:	; Parameter 10 -123.456 24
x41365:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$280:	; PushFloat -123.456
x41368:	fld qword [@12442$float8$minus123.456#]	; 4: 221 6 24 169

stdio_test$281:	; Parameter 10 -123.456 32
x41372:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$282:	; PushFloat -123.456
x41375:	fld qword [@12443$float8$minus123.456#]	; 4: 221 6 32 169

stdio_test$283:	; Parameter 10 -123.456 40
x41379:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$284:	; Call 10 printf 0
x41382:	mov word [bp + 10], stdio_test$285	; 5: 199 70 10 185 161
x41387:	mov [bp + 12], bp	; 3: 137 110 12
x41390:	add bp, 10	; 3: 131 197 10
x41393:	mov di, bp	; 2: 137 239
x41395:	add di, 40	; 3: 131 199 40
x41398:	jmp printf	; 3: 233 75 107

stdio_test$285:	; PostCall 10

stdio_test$286:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$287:	; Parameter 10 string_3C2523lf3E203C2523le3E203C2523lE3E203C2523lg3E203C2523lG3E0A# 6
x41401:	mov word [bp + 16], @12450$string_3C2523lf3E203C2523le3E203C2523lE3E203C2523lg3E203C2523lG3E0A#	; 5: 199 70 16 40 169

stdio_test$288:	; PushFloat -123.456
x41406:	fld qword [@12451$float8$minus123.456#]	; 4: 221 6 76 169

stdio_test$289:	; Parameter 10 -123.456 8
x41410:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$290:	; PushFloat -123.456
x41413:	fld qword [@12452$float8$minus123.456#]	; 4: 221 6 84 169

stdio_test$291:	; Parameter 10 -123.456 16
x41417:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$292:	; PushFloat -123.456
x41420:	fld qword [@12453$float8$minus123.456#]	; 4: 221 6 92 169

stdio_test$293:	; Parameter 10 -123.456 24
x41424:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$294:	; PushFloat -123.456
x41427:	fld qword [@12454$float8$minus123.456#]	; 4: 221 6 100 169

stdio_test$295:	; Parameter 10 -123.456 32
x41431:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$296:	; PushFloat -123.456
x41434:	fld qword [@12455$float8$minus123.456#]	; 4: 221 6 108 169

stdio_test$297:	; Parameter 10 -123.456 40
x41438:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$298:	; Call 10 printf 0
x41441:	mov word [bp + 10], stdio_test$299	; 5: 199 70 10 244 161
x41446:	mov [bp + 12], bp	; 3: 137 110 12
x41449:	add bp, 10	; 3: 131 197 10
x41452:	mov di, bp	; 2: 137 239
x41454:	add di, 40	; 3: 131 199 40
x41457:	jmp printf	; 3: 233 16 107

stdio_test$299:	; PostCall 10

stdio_test$300:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$301:	; Parameter 10 string_3C2562E3f3E203C2562E3e3E203C2562E3E3E203C2562E3g3E203C2562E3G3E0A# 6
x41460:	mov word [bp + 16], @12462$string_3C2562E3f3E203C2562E3e3E203C2562E3E3E203C2562E3g3E203C2562E3G3E0A#	; 5: 199 70 16 116 169

stdio_test$302:	; PushFloat -123.456
x41465:	fld qword [@12463$float8$minus123.456#]	; 4: 221 6 157 169

stdio_test$303:	; Parameter 10 -123.456 8
x41469:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$304:	; PushFloat -123.456
x41472:	fld qword [@12464$float8$minus123.456#]	; 4: 221 6 165 169

stdio_test$305:	; Parameter 10 -123.456 16
x41476:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$306:	; PushFloat -123.456
x41479:	fld qword [@12465$float8$minus123.456#]	; 4: 221 6 173 169

stdio_test$307:	; Parameter 10 -123.456 24
x41483:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$308:	; PushFloat -123.456
x41486:	fld qword [@12466$float8$minus123.456#]	; 4: 221 6 181 169

stdio_test$309:	; Parameter 10 -123.456 32
x41490:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$310:	; PushFloat -123.456
x41493:	fld qword [@12467$float8$minus123.456#]	; 4: 221 6 189 169

stdio_test$311:	; Parameter 10 -123.456 40
x41497:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$312:	; Call 10 printf 0
x41500:	mov word [bp + 10], stdio_test$313	; 5: 199 70 10 47 162
x41505:	mov [bp + 12], bp	; 3: 137 110 12
x41508:	add bp, 10	; 3: 131 197 10
x41511:	mov di, bp	; 2: 137 239
x41513:	add di, 40	; 3: 131 199 40
x41516:	jmp printf	; 3: 233 213 106

stdio_test$313:	; PostCall 10

stdio_test$314:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$315:	; Parameter 10 string_3C2562E3lf3E203C2562E3le3E203C2562E3lE3E203C2562E3lg3E203C2562E3lG3E0A0A# 6
x41519:	mov word [bp + 16], @12474$string_3C2562E3lf3E203C2562E3le3E203C2562E3lE3E203C2562E3lg3E203C2562E3lG3E0A0A#	; 5: 199 70 16 197 169

stdio_test$316:	; PushFloat -123.456
x41524:	fld qword [@12475$float8$minus123.456#]	; 4: 221 6 244 169

stdio_test$317:	; Parameter 10 -123.456 8
x41528:	fstp qword [bp + 18]	; 3: 221 94 18

stdio_test$318:	; PushFloat -123.456
x41531:	fld qword [@12476$float8$minus123.456#]	; 4: 221 6 252 169

stdio_test$319:	; Parameter 10 -123.456 16
x41535:	fstp qword [bp + 26]	; 3: 221 94 26

stdio_test$320:	; PushFloat -123.456
x41538:	fld qword [@12477$float8$minus123.456#]	; 4: 221 6 4 170

stdio_test$321:	; Parameter 10 -123.456 24
x41542:	fstp qword [bp + 34]	; 3: 221 94 34

stdio_test$322:	; PushFloat -123.456
x41545:	fld qword [@12478$float8$minus123.456#]	; 4: 221 6 12 170

stdio_test$323:	; Parameter 10 -123.456 32
x41549:	fstp qword [bp + 42]	; 3: 221 94 42

stdio_test$324:	; PushFloat -123.456
x41552:	fld qword [@12479$float8$minus123.456#]	; 4: 221 6 20 170

stdio_test$325:	; Parameter 10 -123.456 40
x41556:	fstp qword [bp + 50]	; 3: 221 94 50

stdio_test$326:	; Call 10 printf 0
x41559:	mov word [bp + 10], stdio_test$327	; 5: 199 70 10 106 162
x41564:	mov [bp + 12], bp	; 3: 137 110 12
x41567:	add bp, 10	; 3: 131 197 10
x41570:	mov di, bp	; 2: 137 239
x41572:	add di, 40	; 3: 131 199 40
x41575:	jmp printf	; 3: 233 154 106

stdio_test$327:	; PostCall 10

stdio_test$328:	; Assign a 0
x41578:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

stdio_test$329:	; Assign b 0
x41583:	mov word [bp + 8], 0	; 5: 199 70 8 0 0

stdio_test$330:	; Assign n 0
x41588:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

stdio_test$331:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$332:	; Parameter 12 string_Please20write20three20integers3A20# 6
x41593:	mov word [bp + 18], @12495$string_Please20write20three20integers3A20#	; 5: 199 70 18 28 170

stdio_test$333:	; Call 12 printf 0
x41598:	mov word [bp + 12], stdio_test$334	; 5: 199 70 12 142 162
x41603:	mov [bp + 14], bp	; 3: 137 110 14
x41606:	add bp, 12	; 3: 131 197 12
x41609:	mov di, bp	; 2: 137 239
x41611:	jmp printf	; 3: 233 118 106

stdio_test$334:	; PostCall 12

stdio_test$335:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$336:	; Parameter 12 string_1232045620789# 6
x41614:	mov word [bp + 18], @12497$string_1232045620789#	; 5: 199 70 18 58 170

stdio_test$337:	; Parameter 12 string_25i20252Ai2025i2025n# 8
x41619:	mov word [bp + 20], @12498$string_25i20252Ai2025i2025n#	; 5: 199 70 20 70 170

stdio_test$338:	; address £temporary5630 a
x41624:	mov si, bp	; 2: 137 238
x41626:	add si, 6	; 3: 131 198 6

stdio_test$339:	; Parameter 12 £temporary5630 10
x41629:	mov [bp + 22], si	; 3: 137 118 22

stdio_test$340:	; address £temporary5631 b
x41632:	mov si, bp	; 2: 137 238
x41634:	add si, 8	; 3: 131 198 8

stdio_test$341:	; Parameter 12 £temporary5631 12
x41637:	mov [bp + 24], si	; 3: 137 118 24

stdio_test$342:	; address £temporary5632 n
x41640:	mov si, bp	; 2: 137 238
x41642:	add si, 10	; 3: 131 198 10

stdio_test$343:	; Parameter 12 £temporary5632 14
x41645:	mov [bp + 26], si	; 3: 137 118 26

stdio_test$344:	; Call 12 sscanf 0
x41648:	mov word [bp + 12], stdio_test$345	; 5: 199 70 12 195 162
x41653:	mov [bp + 14], bp	; 3: 137 110 14
x41656:	add bp, 12	; 3: 131 197 12
x41659:	mov di, bp	; 2: 137 239
x41661:	add di, 6	; 3: 131 199 6
x41664:	jmp sscanf	; 3: 233 15 8

stdio_test$345:	; PostCall 12

stdio_test$346:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$347:	; Parameter 12 string_3C25i3E203C25i3E203C25i3E0A# 6
x41667:	mov word [bp + 18], @12503$string_3C25i3E203C25i3E203C25i3E0A#	; 5: 199 70 18 83 170

stdio_test$348:	; Parameter 12 a 8
x41672:	mov ax, [bp + 6]	; 3: 139 70 6
x41675:	mov [bp + 20], ax	; 3: 137 70 20

stdio_test$349:	; Parameter 12 b 10
x41678:	mov ax, [bp + 8]	; 3: 139 70 8
x41681:	mov [bp + 22], ax	; 3: 137 70 22

stdio_test$350:	; Parameter 12 n 12
x41684:	mov ax, [bp + 10]	; 3: 139 70 10
x41687:	mov [bp + 24], ax	; 3: 137 70 24

stdio_test$351:	; Call 12 printf 0
x41690:	mov word [bp + 12], stdio_test$352	; 5: 199 70 12 237 162
x41695:	mov [bp + 14], bp	; 3: 137 110 14
x41698:	add bp, 12	; 3: 131 197 12
x41701:	mov di, bp	; 2: 137 239
x41703:	add di, 6	; 3: 131 199 6
x41706:	jmp printf	; 3: 233 23 106

stdio_test$352:	; PostCall 12

stdio_test$353:	; CallHeader 106 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$354:	; Parameter 106 string_Please20write20the20patterns205Babc5D3A20# 6
x41709:	mov word [bp + 112], @12508$string_Please20write20the20patterns205Babc5D3A20#	; 5: 199 70 112 99 170

stdio_test$355:	; Call 106 printf 0
x41714:	mov word [bp + 106], stdio_test$356	; 5: 199 70 106 2 163
x41719:	mov [bp + 108], bp	; 3: 137 110 108
x41722:	add bp, 106	; 3: 131 197 106
x41725:	mov di, bp	; 2: 137 239
x41727:	jmp printf	; 3: 233 2 106

stdio_test$356:	; PostCall 106

stdio_test$357:	; CallHeader 106 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$358:	; Parameter 106 string_abcdef# 6
x41730:	mov word [bp + 112], @12510$string_abcdef#	; 5: 199 70 112 133 170

stdio_test$359:	; Parameter 106 string_255Babc5D# 8
x41735:	mov word [bp + 114], @12511$string_255Babc5D#	; 5: 199 70 114 140 170

stdio_test$360:	; Parameter 106 s 10
x41740:	mov [bp + 116], bp	; 3: 137 110 116
x41743:	add word [bp + 116], 6	; 4: 131 70 116 6

stdio_test$361:	; Call 106 sscanf 0
x41747:	mov word [bp + 106], stdio_test$362	; 5: 199 70 106 38 163
x41752:	mov [bp + 108], bp	; 3: 137 110 108
x41755:	add bp, 106	; 3: 131 197 106
x41758:	mov di, bp	; 2: 137 239
x41760:	add di, 2	; 3: 131 199 2
x41763:	jmp sscanf	; 3: 233 172 7

stdio_test$362:	; PostCall 106

stdio_test$363:	; CallHeader 106 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$364:	; Parameter 106 string_3C25s3E0A# 6
x41766:	mov word [bp + 112], @12513$string_3C25s3E0A#	; 5: 199 70 112 147 170

stdio_test$365:	; Parameter 106 s 8
x41771:	mov [bp + 114], bp	; 3: 137 110 114
x41774:	add word [bp + 114], 6	; 4: 131 70 114 6

stdio_test$366:	; Call 106 printf 0
x41778:	mov word [bp + 106], stdio_test$367	; 5: 199 70 106 69 163
x41783:	mov [bp + 108], bp	; 3: 137 110 108
x41786:	add bp, 106	; 3: 131 197 106
x41789:	mov di, bp	; 2: 137 239
x41791:	add di, 2	; 3: 131 199 2
x41794:	jmp printf	; 3: 233 191 105

stdio_test$367:	; PostCall 106

stdio_test$368:	; CallHeader 106 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$369:	; Parameter 106 string_Please20write20the20patterns205B5Eabc5D3A20# 6
x41797:	mov word [bp + 112], @12515$string_Please20write20the20patterns205B5Eabc5D3A20#	; 5: 199 70 112 153 170

stdio_test$370:	; Call 106 printf 0
x41802:	mov word [bp + 106], stdio_test$371	; 5: 199 70 106 90 163
x41807:	mov [bp + 108], bp	; 3: 137 110 108
x41810:	add bp, 106	; 3: 131 197 106
x41813:	mov di, bp	; 2: 137 239
x41815:	jmp printf	; 3: 233 170 105

stdio_test$371:	; PostCall 106

stdio_test$372:	; CallHeader 106 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$373:	; Parameter 106 string_defabc# 6
x41818:	mov word [bp + 112], @12517$string_defabc#	; 5: 199 70 112 188 170

stdio_test$374:	; Parameter 106 string_255B5Eabc5D# 8
x41823:	mov word [bp + 114], @12518$string_255B5Eabc5D#	; 5: 199 70 114 195 170

stdio_test$375:	; Parameter 106 s 10
x41828:	mov [bp + 116], bp	; 3: 137 110 116
x41831:	add word [bp + 116], 6	; 4: 131 70 116 6

stdio_test$376:	; Call 106 sscanf 0
x41835:	mov word [bp + 106], stdio_test$377	; 5: 199 70 106 126 163
x41840:	mov [bp + 108], bp	; 3: 137 110 108
x41843:	add bp, 106	; 3: 131 197 106
x41846:	mov di, bp	; 2: 137 239
x41848:	add di, 2	; 3: 131 199 2
x41851:	jmp sscanf	; 3: 233 84 7

stdio_test$377:	; PostCall 106

stdio_test$378:	; CallHeader 106 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdio_test$379:	; Parameter 106 string_3C25s3E0A0A# 6
x41854:	mov word [bp + 112], @12520$string_3C25s3E0A0A#	; 5: 199 70 112 203 170

stdio_test$380:	; Parameter 106 s 8
x41859:	mov [bp + 114], bp	; 3: 137 110 114
x41862:	add word [bp + 114], 6	; 4: 131 70 114 6

stdio_test$381:	; Call 106 printf 0
x41866:	mov word [bp + 106], stdio_test$382	; 5: 199 70 106 157 163
x41871:	mov [bp + 108], bp	; 3: 137 110 108
x41874:	add bp, 106	; 3: 131 197 106
x41877:	mov di, bp	; 2: 137 239
x41879:	add di, 2	; 3: 131 199 2
x41882:	jmp printf	; 3: 233 103 105

stdio_test$382:	; PostCall 106

stdio_test$383:	; Return 0
x41885:	mov ax, [bp]	; 3: 139 70 0
x41888:	mov di, [bp + 4]	; 3: 139 126 4
x41891:	mov bp, [bp + 2]	; 3: 139 110 2
x41894:	jmp ax	; 2: 255 224

stdio_test$384:	; FunctionEnd stdio_test

@12122$string_3C25i3E203C25i3E203C25li3E203C25li3E203C25u3E203C25lu3E0A0A#:
x41896:	db "<%i> <%i> <%li> <%li> <%u> <%lu>", 10, 10, 0	; 35: 60 37 105 62 32 60 37 105 62 32 60 37 108 105 62 32 60 37 108 105 62 32 60 37 117 62 32 60 37 108 117 62 10 10 0

@12136$string_3C256i3E203C256i3E203C256li3E203C256li3E203C256u3E203C256lu3E0A#:
x41931:	db "<%6i> <%6i> <%6li> <%6li> <%6u> <%6lu>", 10, 0	; 40: 60 37 54 105 62 32 60 37 54 105 62 32 60 37 54 108 105 62 32 60 37 54 108 105 62 32 60 37 54 117 62 32 60 37 54 108 117 62 10 0

@12150$string_3C252B6i3E203C252B6i3E203C252B6li3E203C252B6li3E203C252B6u3E203C252B6lu3E0A#:
x41971:	db "<%+6i> <%+6i> <%+6li> <%+6li> <%+6u> <%+6lu>", 10, 0	; 46: 60 37 43 54 105 62 32 60 37 43 54 105 62 32 60 37 43 54 108 105 62 32 60 37 43 54 108 105 62 32 60 37 43 54 117 62 32 60 37 43 54 108 117 62 10 0

@12164$string_3C252D6i3E203C252D6i3E203C252D6li3E203C252D6li3E203C252D6u3E203C252D6lu3E0A#:
x42017:	db "<%-6i> <%-6i> <%-6li> <%-6li> <%-6u> <%-6lu>", 10, 0	; 46: 60 37 45 54 105 62 32 60 37 45 54 105 62 32 60 37 45 54 108 105 62 32 60 37 45 54 108 105 62 32 60 37 45 54 117 62 32 60 37 45 54 108 117 62 10 0

@12178$string_3C252B2D6i3E203C252B2D6i3E203C252B2D6li3E203C252B2D6li3E203C252B2D6u3E203C252B2D6lu3E0A0A#:
x42063:	db "<%+-6i> <%+-6i> <%+-6li> <%+-6li> <%+-6u> <%+-6lu>", 10, 10, 0	; 53: 60 37 43 45 54 105 62 32 60 37 43 45 54 105 62 32 60 37 43 45 54 108 105 62 32 60 37 43 45 54 108 105 62 32 60 37 43 45 54 117 62 32 60 37 43 45 54 108 117 62 10 10 0

@12196$string_3C2506i3E203C2506i3E203C2506li3E203C2506li3E203C2506u3E203C2506lu3E0A#:
x42116:	db "<%06i> <%06i> <%06li> <%06li> <%06u> <%06lu>", 10, 0	; 46: 60 37 48 54 105 62 32 60 37 48 54 105 62 32 60 37 48 54 108 105 62 32 60 37 48 54 108 105 62 32 60 37 48 54 117 62 32 60 37 48 54 108 117 62 10 0

@12210$string_3C252B06i3E203C252B06i3E203C252B06li3E203C252B06li3E203C252B06u3E203C252B06lu3E0A#:
x42162:	db "<%+06i> <%+06i> <%+06li> <%+06li> <%+06u> <%+06lu>", 10, 0	; 52: 60 37 43 48 54 105 62 32 60 37 43 48 54 105 62 32 60 37 43 48 54 108 105 62 32 60 37 43 48 54 108 105 62 32 60 37 43 48 54 117 62 32 60 37 43 48 54 108 117 62 10 0

@12224$string_3C252D06i3E203C252D06i3E203C252D06li3E203C252D06li3E203C252D06u3E203C252D06lu3E0A#:
x42214:	db "<%-06i> <%-06i> <%-06li> <%-06li> <%-06u> <%-06lu>", 10, 0	; 52: 60 37 45 48 54 105 62 32 60 37 45 48 54 105 62 32 60 37 45 48 54 108 105 62 32 60 37 45 48 54 108 105 62 32 60 37 45 48 54 117 62 32 60 37 45 48 54 108 117 62 10 0

@12238$string_3C252B2D06i3E203C252B2D06i3E203C252B2D06li3E203C252B2D06li3E203C252B2D06u3E203C252B2D06lu3E0A0A#:
x42266:	db "<%+-06i> <%+-06i> <%+-06li> <%+-06li> <%+-06u> <%+-06lu>", 10, 10, 0	; 59: 60 37 43 45 48 54 105 62 32 60 37 43 45 48 54 105 62 32 60 37 43 45 48 54 108 105 62 32 60 37 43 45 48 54 108 105 62 32 60 37 43 45 48 54 117 62 32 60 37 43 45 48 54 108 117 62 10 10 0

@12252$string_3C25206i3E203C25206i3E203C25206li3E203C25206li3E203C25206u3E203C25206lu3E0A#:
x42325:	db "<% 6i> <% 6i> <% 6li> <% 6li> <% 6u> <% 6lu>", 10, 0	; 46: 60 37 32 54 105 62 32 60 37 32 54 105 62 32 60 37 32 54 108 105 62 32 60 37 32 54 108 105 62 32 60 37 32 54 117 62 32 60 37 32 54 108 117 62 10 0

@12266$string_3C252B206i3E203C252B206i3E203C252B206li3E203C252B206li3E203C252B206u3E203C252B206lu3E0A#:
x42371:	db "<%+ 6i> <%+ 6i> <%+ 6li> <%+ 6li> <%+ 6u> <%+ 6lu>", 10, 0	; 52: 60 37 43 32 54 105 62 32 60 37 43 32 54 105 62 32 60 37 43 32 54 108 105 62 32 60 37 43 32 54 108 105 62 32 60 37 43 32 54 117 62 32 60 37 43 32 54 108 117 62 10 0

@12280$string_3C252D206i3E203C252D206i3E203C252D206li3E203C252D206li3E203C252D206u3E203C252D206lu3E0A#:
x42423:	db "<%- 6i> <%- 6i> <%- 6li> <%- 6li> <%- 6u> <%- 6lu>", 10, 0	; 52: 60 37 45 32 54 105 62 32 60 37 45 32 54 105 62 32 60 37 45 32 54 108 105 62 32 60 37 45 32 54 108 105 62 32 60 37 45 32 54 117 62 32 60 37 45 32 54 108 117 62 10 0

@12294$string_3C252B2D206i3E203C252B2D206i3E203C252B2D206li3E203C252B2D206li3E203C252B2D206u3E203C252B2D206lu3E0A0A#:
x42475:	db "<%+- 6i> <%+- 6i> <%+- 6li> <%+- 6li> <%+- 6u> <%+- 6lu>", 10, 10, 0	; 59: 60 37 43 45 32 54 105 62 32 60 37 43 45 32 54 105 62 32 60 37 43 45 32 54 108 105 62 32 60 37 43 45 32 54 108 105 62 32 60 37 43 45 32 54 117 62 32 60 37 43 45 32 54 108 117 62 10 10 0

@12308$string_3C25x3E203C25X3E203C25o3E203C25lx3E203C25lX3E203C25lo3E0A#:
x42534:	db "<%x> <%X> <%o> <%lx> <%lX> <%lo>", 10, 0	; 34: 60 37 120 62 32 60 37 88 62 32 60 37 111 62 32 60 37 108 120 62 32 60 37 108 88 62 32 60 37 108 111 62 10 0

@12322$string_3C2523x3E203C2523X3E203C2523o3E203C2523lx3E203C2523lX3E203C2523lo3E0A#:
x42568:	db "<%#x> <%#X> <%#o> <%#lx> <%#lX> <%#lo>", 10, 0	; 40: 60 37 35 120 62 32 60 37 35 88 62 32 60 37 35 111 62 32 60 37 35 108 120 62 32 60 37 35 108 88 62 32 60 37 35 108 111 62 10 0

@12336$string_3C25253E203C25s3E203C25c3E203C25p3E0A0A#:
x42608:	db "<%%> <%s> <%c> <%p>", 10, 10, 0	; 22: 60 37 37 62 32 60 37 115 62 32 60 37 99 62 32 60 37 112 62 10 10 0

@12337$string_Hello2C20World21#:
x42630:	db "Hello, World!", 0	; 14: 72 101 108 108 111 44 32 87 111 114 108 100 33 0

@12342$string_3C25f3E203C25e3E203C25E3E203C25g3E203C25G3E0A#:
x42644:	db "<%f> <%e> <%E> <%g> <%G>", 10, 0	; 26: 60 37 102 62 32 60 37 101 62 32 60 37 69 62 32 60 37 103 62 32 60 37 71 62 10 0

@12343$float8$123.456#:
x42670:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12344$float8$123.456#:
x42678:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12345$float8$123.456#:
x42686:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12346$float8$123456.1#:
x42694:	dq 123456.1	; 8: 154 153 153 153 1 36 254 64

@12347$float8$123456.1#:
x42702:	dq 123456.1	; 8: 154 153 153 153 1 36 254 64

@12354$string_3C25lf3E203C25le3E203C25lE3E203C25lg3E203C25lG3E0A#:
x42710:	db "<%lf> <%le> <%lE> <%lg> <%lG>", 10, 0	; 31: 60 37 108 102 62 32 60 37 108 101 62 32 60 37 108 69 62 32 60 37 108 103 62 32 60 37 108 71 62 10 0

@12355$float8$123.456#:
x42741:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12356$float8$123.456#:
x42749:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12357$float8$123.456#:
x42757:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12358$float8$123456.1#:
x42765:	dq 123456.1	; 8: 154 153 153 153 1 36 254 64

@12359$float8$123456.1#:
x42773:	dq 123456.1	; 8: 154 153 153 153 1 36 254 64

@12366$string_3C2523f3E203C2523e3E203C2523E3E203C2523g3E203C2523G3E0A#:
x42781:	db "<%#f> <%#e> <%#E> <%#g> <%#G>", 10, 0	; 31: 60 37 35 102 62 32 60 37 35 101 62 32 60 37 35 69 62 32 60 37 35 103 62 32 60 37 35 71 62 10 0

@12367$float8$123.456#:
x42812:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12368$float8$123.456#:
x42820:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12369$float8$123.456#:
x42828:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12370$float8$123.456#:
x42836:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12371$float8$123.456#:
x42844:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12378$string_3C2523lf3E203C2523le3E203C2523lE3E203C2523lg3E203C2523lG3E0A#:
x42852:	db "<%#lf> <%#le> <%#lE> <%#lg> <%#lG>", 10, 0	; 36: 60 37 35 108 102 62 32 60 37 35 108 101 62 32 60 37 35 108 69 62 32 60 37 35 108 103 62 32 60 37 35 108 71 62 10 0

@12379$float8$123.456#:
x42888:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12380$float8$123.456#:
x42896:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12381$float8$123.456#:
x42904:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12382$float8$123.456#:
x42912:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12383$float8$123.456#:
x42920:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12390$string_3C2562E3f3E203C2562E3e3E203C2562E3E3E203C2562E3g3E203C2562E3G3E0A#:
x42928:	db "<%6.3f> <%6.3e> <%6.3E> <%6.3g> <%6.3G>", 10, 0	; 41: 60 37 54 46 51 102 62 32 60 37 54 46 51 101 62 32 60 37 54 46 51 69 62 32 60 37 54 46 51 103 62 32 60 37 54 46 51 71 62 10 0

@12391$float8$123.456#:
x42969:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12392$float8$123.456#:
x42977:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12393$float8$123.456#:
x42985:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12394$float8$123.456#:
x42993:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12395$float8$123.456#:
x43001:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12402$string_3C2562E3lf3E203C2562E3le3E203C2562E3lE3E203C2562E3lg3E203C2562E3lG3E0A0A#:
x43009:	db "<%6.3lf> <%6.3le> <%6.3lE> <%6.3lg> <%6.3lG>", 10, 10, 0	; 47: 60 37 54 46 51 108 102 62 32 60 37 54 46 51 108 101 62 32 60 37 54 46 51 108 69 62 32 60 37 54 46 51 108 103 62 32 60 37 54 46 51 108 71 62 10 10 0

@12403$float8$123.456#:
x43056:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12404$float8$123.456#:
x43064:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12405$float8$123.456#:
x43072:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12406$float8$123.456#:
x43080:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12407$float8$123.456#:
x43088:	dq 123.456	; 8: 119 190 159 26 47 221 94 64

@12414$string_3C25f3E203C25e3E203C25E3E203C25g3E203C25G3E0A#:
x43096:	db "<%f> <%e> <%E> <%g> <%G>", 10, 0	; 26: 60 37 102 62 32 60 37 101 62 32 60 37 69 62 32 60 37 103 62 32 60 37 71 62 10 0

@12415$float8$minus123.456#:
x43122:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12416$float8$minus123.456#:
x43130:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12417$float8$minus123.456#:
x43138:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12418$float8$minus0.000000123456#:
x43146:	dq -0.000000123456	; 8: 23 95 204 117 234 145 128 190

@12419$float8$minus0.000000123456#:
x43154:	dq -0.000000123456	; 8: 23 95 204 117 234 145 128 190

@12426$string_3C25lf3E203C25le3E203C25lE3E203C25lg3E203C25lG3E0A#:
x43162:	db "<%lf> <%le> <%lE> <%lg> <%lG>", 10, 0	; 31: 60 37 108 102 62 32 60 37 108 101 62 32 60 37 108 69 62 32 60 37 108 103 62 32 60 37 108 71 62 10 0

@12427$float8$minus123.456#:
x43193:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12428$float8$minus123.456#:
x43201:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12429$float8$minus123.456#:
x43209:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12430$float8$minus0.000000123456#:
x43217:	dq -0.000000123456	; 8: 23 95 204 117 234 145 128 190

@12431$float8$minus0.000000123456#:
x43225:	dq -0.000000123456	; 8: 23 95 204 117 234 145 128 190

@12438$string_3C2523f3E203C2523e3E203C2523E3E203C2523g3E203C2523G3E0A#:
x43233:	db "<%#f> <%#e> <%#E> <%#g> <%#G>", 10, 0	; 31: 60 37 35 102 62 32 60 37 35 101 62 32 60 37 35 69 62 32 60 37 35 103 62 32 60 37 35 71 62 10 0

@12439$float8$minus123.456#:
x43264:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12440$float8$minus123.456#:
x43272:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12441$float8$minus123.456#:
x43280:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12442$float8$minus123.456#:
x43288:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12443$float8$minus123.456#:
x43296:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12450$string_3C2523lf3E203C2523le3E203C2523lE3E203C2523lg3E203C2523lG3E0A#:
x43304:	db "<%#lf> <%#le> <%#lE> <%#lg> <%#lG>", 10, 0	; 36: 60 37 35 108 102 62 32 60 37 35 108 101 62 32 60 37 35 108 69 62 32 60 37 35 108 103 62 32 60 37 35 108 71 62 10 0

@12451$float8$minus123.456#:
x43340:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12452$float8$minus123.456#:
x43348:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12453$float8$minus123.456#:
x43356:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12454$float8$minus123.456#:
x43364:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12455$float8$minus123.456#:
x43372:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12462$string_3C2562E3f3E203C2562E3e3E203C2562E3E3E203C2562E3g3E203C2562E3G3E0A#:
x43380:	db "<%6.3f> <%6.3e> <%6.3E> <%6.3g> <%6.3G>", 10, 0	; 41: 60 37 54 46 51 102 62 32 60 37 54 46 51 101 62 32 60 37 54 46 51 69 62 32 60 37 54 46 51 103 62 32 60 37 54 46 51 71 62 10 0

@12463$float8$minus123.456#:
x43421:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12464$float8$minus123.456#:
x43429:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12465$float8$minus123.456#:
x43437:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12466$float8$minus123.456#:
x43445:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12467$float8$minus123.456#:
x43453:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12474$string_3C2562E3lf3E203C2562E3le3E203C2562E3lE3E203C2562E3lg3E203C2562E3lG3E0A0A#:
x43461:	db "<%6.3lf> <%6.3le> <%6.3lE> <%6.3lg> <%6.3lG>", 10, 10, 0	; 47: 60 37 54 46 51 108 102 62 32 60 37 54 46 51 108 101 62 32 60 37 54 46 51 108 69 62 32 60 37 54 46 51 108 103 62 32 60 37 54 46 51 108 71 62 10 10 0

@12475$float8$minus123.456#:
x43508:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12476$float8$minus123.456#:
x43516:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12477$float8$minus123.456#:
x43524:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12478$float8$minus123.456#:
x43532:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12479$float8$minus123.456#:
x43540:	dq -123.456	; 8: 119 190 159 26 47 221 94 192

@12495$string_Please20write20three20integers3A20#:
x43548:	db "Please write three integers: ", 0	; 30: 80 108 101 97 115 101 32 119 114 105 116 101 32 116 104 114 101 101 32 105 110 116 101 103 101 114 115 58 32 0

@12497$string_1232045620789#:
x43578:	db "123 456 789", 0	; 12: 49 50 51 32 52 53 54 32 55 56 57 0

@12498$string_25i20252Ai2025i2025n#:
x43590:	db "%i %*i %i %n", 0	; 13: 37 105 32 37 42 105 32 37 105 32 37 110 0

@12503$string_3C25i3E203C25i3E203C25i3E0A#:
x43603:	db "<%i> <%i> <%i>", 10, 0	; 16: 60 37 105 62 32 60 37 105 62 32 60 37 105 62 10 0

@12508$string_Please20write20the20patterns205Babc5D3A20#:
x43619:	db "Please write the patterns [abc]: ", 0	; 34: 80 108 101 97 115 101 32 119 114 105 116 101 32 116 104 101 32 112 97 116 116 101 114 110 115 32 91 97 98 99 93 58 32 0

@12510$string_abcdef#:
x43653:	db "abcdef", 0	; 7: 97 98 99 100 101 102 0

@12511$string_255Babc5D#:
x43660:	db "%[abc]", 0	; 7: 37 91 97 98 99 93 0

@12513$string_3C25s3E0A#:
x43667:	db "<%s>", 10, 0	; 6: 60 37 115 62 10 0

@12515$string_Please20write20the20patterns205B5Eabc5D3A20#:
x43673:	db "Please write the patterns [^abc]: ", 0	; 35: 80 108 101 97 115 101 32 119 114 105 116 101 32 116 104 101 32 112 97 116 116 101 114 110 115 32 91 94 97 98 99 93 58 32 0

@12517$string_defabc#:
x43708:	db "defabc", 0	; 7: 100 101 102 97 98 99 0

@12518$string_255B5Eabc5D#:
x43715:	db "%[^abc]", 0	; 8: 37 91 94 97 98 99 93 0

@12520$string_3C25s3E0A0A#:
x43723:	db "<%s>", 10, 10, 0	; 7: 60 37 115 62 10 10 0

sscanf:	; address £temporary1577 format
x43730:	mov si, bp	; 2: 137 238
x43732:	add si, 8	; 3: 131 198 8

sscanf$1:	; IntegralToIntegral £temporary1578 £temporary1577

sscanf$2:	; BinaryAdd arg_list £temporary1578 2
x43735:	add si, 2	; 3: 131 198 2
x43738:	mov [di + 10], si	; 3: 137 117 10

sscanf$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

sscanf$4:	; Parameter 12 inString 6
x43741:	mov ax, [bp + 6]	; 3: 139 70 6
x43744:	mov [di + 18], ax	; 3: 137 69 18

sscanf$5:	; Parameter 12 format 8
x43747:	mov ax, [bp + 8]	; 3: 139 70 8
x43750:	mov [di + 20], ax	; 3: 137 69 20

sscanf$6:	; Parameter 12 arg_list 10
x43753:	mov ax, [di + 10]	; 3: 139 69 10
x43756:	mov [di + 22], ax	; 3: 137 69 22

sscanf$7:	; Call 12 vsscanf 0
x43759:	mov word [di + 12], sscanf$8	; 5: 199 69 12 2 171
x43764:	mov [di + 14], bp	; 3: 137 109 14
x43767:	mov [di + 16], di	; 3: 137 125 16
x43770:	add di, 12	; 3: 131 199 12
x43773:	mov bp, di	; 2: 137 253
x43775:	nop	; 1: 144
x43776:	jmp vsscanf	; 2: 235 11

sscanf$8:	; PostCall 12

sscanf$9:	; GetReturnValue £temporary1580

sscanf$10:	; SetReturnValue £temporary1580

sscanf$11:	; Return £temporary1580
x43778:	mov ax, [bp]	; 3: 139 70 0
x43781:	mov di, [bp + 4]	; 3: 139 126 4
x43784:	mov bp, [bp + 2]	; 3: 139 110 2
x43787:	jmp ax	; 2: 255 224

sscanf$12:	; FunctionEnd sscanf

vsscanf:	; Assign g_inStatus 1
x43789:	mov word [g_inStatus], 1	; 6: 199 6 199 95 1 0

vsscanf$1:	; IntegralToIntegral £temporary1585 inString
x43795:	mov ax, [bp + 6]	; 3: 139 70 6

vsscanf$2:	; Assign g_inDevice £temporary1585
x43798:	mov [g_inDevice], ax	; 3: 163 201 95

vsscanf$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

vsscanf$4:	; Parameter 12 format 6
x43801:	mov ax, [bp + 8]	; 3: 139 70 8
x43804:	mov [bp + 18], ax	; 3: 137 70 18

vsscanf$5:	; Parameter 12 arg_list 8
x43807:	mov ax, [bp + 10]	; 3: 139 70 10
x43810:	mov [bp + 20], ax	; 3: 137 70 20

vsscanf$6:	; Call 12 scanFormat 0
x43813:	mov word [bp + 12], vsscanf$7	; 5: 199 70 12 51 171
x43818:	mov [bp + 14], bp	; 3: 137 110 14
x43821:	add bp, 12	; 3: 131 197 12
x43824:	jmp scanFormat	; 3: 233 152 180

vsscanf$7:	; PostCall 12

vsscanf$8:	; GetReturnValue £temporary1586

vsscanf$9:	; SetReturnValue £temporary1586

vsscanf$10:	; Return £temporary1586
x43827:	mov ax, [bp]	; 3: 139 70 0
x43830:	mov di, [bp + 4]	; 3: 139 126 4
x43833:	mov bp, [bp + 2]	; 3: 139 110 2
x43836:	jmp ax	; 2: 255 224

vsscanf$11:	; FunctionEnd vsscanf

string_test:	; Assign s string_Hello2C20World21#
x43838:	mov word [bp + 8], @9688$string_Hello2C20World21#	; 5: 199 70 8 197 177

string_test$1:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$2:	; Parameter 212 string_strlen282225s2229203D2025i0A# 6
x43843:	mov word [bp + 218], @9697$string_strlen282225s2229203D2025i0A#	; 6: 199 134 218 0 211 177

string_test$3:	; Parameter 212 s 8
x43849:	mov ax, [bp + 8]	; 3: 139 70 8
x43852:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$4:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$5:	; Parameter 212 s 16
x43856:	mov ax, [bp + 8]	; 3: 139 70 8
x43859:	mov [bp + 228], ax	; 4: 137 134 228 0

string_test$6:	; Call 212 strlen 10
x43863:	mov word [bp + 222], string_test$7	; 6: 199 134 222 0 104 171
x43869:	mov [bp + 224], bp	; 4: 137 174 224 0
x43873:	add bp, 222	; 4: 129 197 222 0
x43877:	jmp strlen	; 3: 233 147 225

string_test$7:	; PostCall 212

string_test$8:	; GetReturnValue £temporary4304

string_test$9:	; Parameter 212 £temporary4304 10
x43880:	mov [bp + 222], bx	; 4: 137 158 222 0

string_test$10:	; Call 212 printf 0
x43884:	mov word [bp + 212], string_test$11	; 6: 199 134 212 0 130 171
x43890:	mov [bp + 214], bp	; 4: 137 174 214 0
x43894:	add bp, 212	; 4: 129 197 212 0
x43898:	mov di, bp	; 2: 137 239
x43900:	add di, 4	; 3: 131 199 4
x43903:	jmp printf	; 3: 233 130 97

string_test$11:	; PostCall 212

string_test$12:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$13:	; Parameter 212 t 6
x43906:	mov [bp + 218], bp	; 4: 137 174 218 0
x43910:	add word [bp + 218], 10	; 5: 131 134 218 0 10

string_test$14:	; Parameter 212 s 8
x43915:	mov ax, [bp + 8]	; 3: 139 70 8
x43918:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$15:	; Call 212 strcpy 0
x43922:	mov word [bp + 212], string_test$16	; 6: 199 134 212 0 163 171
x43928:	mov [bp + 214], bp	; 4: 137 174 214 0
x43932:	add bp, 212	; 4: 129 197 212 0
x43936:	jmp strcpy	; 3: 233 155 178

string_test$16:	; PostCall 212

string_test$17:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$18:	; Parameter 212 u 6
x43939:	mov [bp + 218], bp	; 4: 137 174 218 0
x43943:	add word [bp + 218], 110	; 5: 131 134 218 0 110

string_test$19:	; Parameter 212 s 8
x43948:	mov ax, [bp + 8]	; 3: 139 70 8
x43951:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$20:	; Parameter 212 5 10
x43955:	mov word [bp + 222], 5	; 6: 199 134 222 0 5 0

string_test$21:	; Call 212 strncpy 0
x43961:	mov word [bp + 212], string_test$22	; 6: 199 134 212 0 202 171
x43967:	mov [bp + 214], bp	; 4: 137 174 214 0
x43971:	add bp, 212	; 4: 129 197 212 0
x43975:	jmp strncpy	; 3: 233 37 8

string_test$22:	; PostCall 212

string_test$23:	; Deref £temporary4308 -> u u 5
x43978:	mov si, bp	; 2: 137 238
x43980:	add si, 110	; 3: 131 198 110

string_test$24:	; Assign £temporary4308 -> u 0
x43983:	mov byte [si + 5], 0	; 4: 198 68 5 0

string_test$25:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$26:	; Parameter 212 string_t203D202225s222C20u203D202225s220A# 6
x43987:	mov word [bp + 218], @9709$string_t203D202225s222C20u203D202225s220A#	; 6: 199 134 218 0 230 177

string_test$27:	; Parameter 212 t 8
x43993:	mov [bp + 220], bp	; 4: 137 174 220 0
x43997:	add word [bp + 220], 10	; 5: 131 134 220 0 10

string_test$28:	; Parameter 212 u 10
x44002:	mov [bp + 222], bp	; 4: 137 174 222 0
x44006:	add word [bp + 222], 110	; 5: 131 134 222 0 110

string_test$29:	; Call 212 printf 0
x44011:	mov word [bp + 212], string_test$30	; 6: 199 134 212 0 1 172
x44017:	mov [bp + 214], bp	; 4: 137 174 214 0
x44021:	add bp, 212	; 4: 129 197 212 0
x44025:	mov di, bp	; 2: 137 239
x44027:	add di, 4	; 3: 131 199 4
x44030:	jmp printf	; 3: 233 3 97

string_test$30:	; PostCall 212

string_test$31:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$32:	; Parameter 212 t 6
x44033:	mov [bp + 218], bp	; 4: 137 174 218 0
x44037:	add word [bp + 218], 10	; 5: 131 134 218 0 10

string_test$33:	; Parameter 212 string_abc# 8
x44042:	mov word [bp + 220], @9711$string_abc#	; 6: 199 134 220 0 250 177

string_test$34:	; Call 212 strcat 0
x44048:	mov word [bp + 212], string_test$35	; 6: 199 134 212 0 33 172
x44054:	mov [bp + 214], bp	; 4: 137 174 214 0
x44058:	add bp, 212	; 4: 129 197 212 0
x44062:	jmp strcat	; 3: 233 253 224

string_test$35:	; PostCall 212

string_test$36:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$37:	; Parameter 212 u 6
x44065:	mov [bp + 218], bp	; 4: 137 174 218 0
x44069:	add word [bp + 218], 110	; 5: 131 134 218 0 110

string_test$38:	; Call 212 strlen 0
x44074:	mov word [bp + 212], string_test$39	; 6: 199 134 212 0 59 172
x44080:	mov [bp + 214], bp	; 4: 137 174 214 0
x44084:	add bp, 212	; 4: 129 197 212 0
x44088:	jmp strlen	; 3: 233 192 224

string_test$39:	; PostCall 212

string_test$40:	; GetReturnValue £temporary4311

string_test$41:	; Assign i £temporary4311
x44091:	mov [bp + 6], bx	; 3: 137 94 6

string_test$42:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$43:	; Parameter 212 u 6
x44094:	mov [bp + 218], bp	; 4: 137 174 218 0
x44098:	add word [bp + 218], 110	; 5: 131 134 218 0 110

string_test$44:	; Parameter 212 string_abc# 8
x44103:	mov word [bp + 220], @9714$string_abc#	; 6: 199 134 220 0 254 177

string_test$45:	; Parameter 212 2 10
x44109:	mov word [bp + 222], 2	; 6: 199 134 222 0 2 0

string_test$46:	; Call 212 strncat 0
x44115:	mov word [bp + 212], string_test$47	; 6: 199 134 212 0 100 172
x44121:	mov [bp + 214], bp	; 4: 137 174 214 0
x44125:	add bp, 212	; 4: 129 197 212 0
x44129:	jmp strncat	; 3: 233 220 7

string_test$47:	; PostCall 212

string_test$48:	; BinaryAdd £temporary4313 i 2
x44132:	mov ax, [bp + 6]	; 3: 139 70 6
x44135:	add ax, 2	; 3: 131 192 2

string_test$49:	; BinaryAdd £temporary4315 u £temporary4313
x44138:	mov si, bp	; 2: 137 238
x44140:	add si, 110	; 3: 131 198 110
x44143:	add si, ax	; 2: 1 198

string_test$50:	; Deref £temporary4314 -> £temporary4315 £temporary4315 0

string_test$51:	; Assign £temporary4314 -> £temporary4315 0
x44145:	mov byte [si], 0	; 3: 198 4 0

string_test$52:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$53:	; Parameter 212 string_t203D202225s222C20u203D202225s220A# 6
x44148:	mov word [bp + 218], @9726$string_t203D202225s222C20u203D202225s220A#	; 6: 199 134 218 0 2 178

string_test$54:	; Parameter 212 t 8
x44154:	mov [bp + 220], bp	; 4: 137 174 220 0
x44158:	add word [bp + 220], 10	; 5: 131 134 220 0 10

string_test$55:	; Parameter 212 u 10
x44163:	mov [bp + 222], bp	; 4: 137 174 222 0
x44167:	add word [bp + 222], 110	; 5: 131 134 222 0 110

string_test$56:	; Call 212 printf 0
x44172:	mov word [bp + 212], string_test$57	; 6: 199 134 212 0 162 172
x44178:	mov [bp + 214], bp	; 4: 137 174 214 0
x44182:	add bp, 212	; 4: 129 197 212 0
x44186:	mov di, bp	; 2: 137 239
x44188:	add di, 4	; 3: 131 199 4
x44191:	jmp printf	; 3: 233 98 96

string_test$57:	; PostCall 212

string_test$58:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$59:	; Parameter 212 string_strcmp28s2C20u29203D2025i0A# 6
x44194:	mov word [bp + 218], @9728$string_strcmp28s2C20u29203D2025i0A#	; 6: 199 134 218 0 22 178

string_test$60:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$61:	; Parameter 212 s 14
x44200:	mov ax, [bp + 8]	; 3: 139 70 8
x44203:	mov [bp + 226], ax	; 4: 137 134 226 0

string_test$62:	; Parameter 212 u 16
x44207:	mov [bp + 228], bp	; 4: 137 174 228 0
x44211:	add word [bp + 228], 110	; 5: 131 134 228 0 110

string_test$63:	; Call 212 strcmp 8
x44216:	mov word [bp + 220], string_test$64	; 6: 199 134 220 0 201 172
x44222:	mov [bp + 222], bp	; 4: 137 174 222 0
x44226:	add bp, 220	; 4: 129 197 220 0
x44230:	jmp strcmp	; 3: 233 64 176

string_test$64:	; PostCall 212

string_test$65:	; GetReturnValue £temporary4317

string_test$66:	; Parameter 212 £temporary4317 8
x44233:	mov [bp + 220], bx	; 4: 137 158 220 0

string_test$67:	; Call 212 printf 0
x44237:	mov word [bp + 212], string_test$68	; 6: 199 134 212 0 227 172
x44243:	mov [bp + 214], bp	; 4: 137 174 214 0
x44247:	add bp, 212	; 4: 129 197 212 0
x44251:	mov di, bp	; 2: 137 239
x44253:	add di, 2	; 3: 131 199 2
x44256:	jmp printf	; 3: 233 33 96

string_test$68:	; PostCall 212

string_test$69:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$70:	; Parameter 212 string_strncmp28s2C20u2C20229203D2025i0A# 6
x44259:	mov word [bp + 218], @9731$string_strncmp28s2C20u2C20229203D2025i0A#	; 6: 199 134 218 0 41 178

string_test$71:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$72:	; Parameter 212 s 14
x44265:	mov ax, [bp + 8]	; 3: 139 70 8
x44268:	mov [bp + 226], ax	; 4: 137 134 226 0

string_test$73:	; Parameter 212 u 16
x44272:	mov [bp + 228], bp	; 4: 137 174 228 0
x44276:	add word [bp + 228], 110	; 5: 131 134 228 0 110

string_test$74:	; Parameter 212 2 18
x44281:	mov word [bp + 230], 2	; 6: 199 134 230 0 2 0

string_test$75:	; Call 212 strncmp 8
x44287:	mov word [bp + 220], string_test$76	; 6: 199 134 220 0 16 173
x44293:	mov [bp + 222], bp	; 4: 137 174 222 0
x44297:	add bp, 220	; 4: 129 197 220 0
x44301:	jmp strncmp	; 3: 233 151 7

string_test$76:	; PostCall 212

string_test$77:	; GetReturnValue £temporary4319

string_test$78:	; Parameter 212 £temporary4319 8
x44304:	mov [bp + 220], bx	; 4: 137 158 220 0

string_test$79:	; Call 212 printf 0
x44308:	mov word [bp + 212], string_test$80	; 6: 199 134 212 0 42 173
x44314:	mov [bp + 214], bp	; 4: 137 174 214 0
x44318:	add bp, 212	; 4: 129 197 212 0
x44322:	mov di, bp	; 2: 137 239
x44324:	add di, 2	; 3: 131 199 2
x44327:	jmp printf	; 3: 233 218 95

string_test$80:	; PostCall 212

string_test$81:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$82:	; Parameter 212 s 6
x44330:	mov ax, [bp + 8]	; 3: 139 70 8
x44333:	mov [bp + 218], ax	; 4: 137 134 218 0

string_test$83:	; Parameter 212 108 8
x44337:	mov word [bp + 220], 108	; 6: 199 134 220 0 108 0

string_test$84:	; Call 212 strchr 0
x44343:	mov word [bp + 212], string_test$85	; 6: 199 134 212 0 72 173
x44349:	mov [bp + 214], bp	; 4: 137 174 214 0
x44353:	add bp, 212	; 4: 129 197 212 0
x44357:	jmp strchr	; 3: 233 115 116

string_test$85:	; PostCall 212

string_test$86:	; GetReturnValue £temporary4321

string_test$87:	; Assign p £temporary4321
x44360:	mov [bp + 210], bx	; 4: 137 158 210 0

string_test$88:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$89:	; Parameter 212 string_strchr28s2C2027l2729203D2025i0A# 6
x44364:	mov word [bp + 218], @9741$string_strchr28s2C2027l2729203D2025i0A#	; 6: 199 134 218 0 64 178

string_test$90:	; Equal 93 p 0
x44370:	cmp word [bp + 210], 0	; 5: 131 190 210 0 0
x44375:	je string_test$93	; 2: 116 9

string_test$91:	; BinarySubtract £temporary4327 p s
x44377:	mov ax, [bp + 210]	; 4: 139 134 210 0
x44381:	sub ax, [bp + 8]	; 3: 43 70 8

string_test$92:	; Goto 94
x44384:	jmp string_test$94	; 2: 235 3

string_test$93:	; Assign £temporary4327 -1
x44386:	mov ax, -1	; 3: 184 255 255

string_test$94:	; Parameter 212 £temporary4327 8
x44389:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$95:	; Call 212 printf 0
x44393:	mov word [bp + 212], string_test$96	; 6: 199 134 212 0 127 173
x44399:	mov [bp + 214], bp	; 4: 137 174 214 0
x44403:	add bp, 212	; 4: 129 197 212 0
x44407:	mov di, bp	; 2: 137 239
x44409:	add di, 2	; 3: 131 199 2
x44412:	jmp printf	; 3: 233 133 95

string_test$96:	; PostCall 212

string_test$97:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$98:	; Parameter 212 s 6
x44415:	mov ax, [bp + 8]	; 3: 139 70 8
x44418:	mov [bp + 218], ax	; 4: 137 134 218 0

string_test$99:	; Parameter 212 108 8
x44422:	mov word [bp + 220], 108	; 6: 199 134 220 0 108 0

string_test$100:	; Call 212 strrchr 0
x44428:	mov word [bp + 212], string_test$101	; 6: 199 134 212 0 157 173
x44434:	mov [bp + 214], bp	; 4: 137 174 214 0
x44438:	add bp, 212	; 4: 129 197 212 0
x44442:	jmp strrchr	; 3: 233 142 7

string_test$101:	; PostCall 212

string_test$102:	; GetReturnValue £temporary4329

string_test$103:	; Assign p £temporary4329
x44445:	mov [bp + 210], bx	; 4: 137 158 210 0

string_test$104:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$105:	; Parameter 212 string_strrchr28s2C2027l2729203D2025i0A# 6
x44449:	mov word [bp + 218], @9760$string_strrchr28s2C2027l2729203D2025i0A#	; 6: 199 134 218 0 85 178

string_test$106:	; Equal 109 p 0
x44455:	cmp word [bp + 210], 0	; 5: 131 190 210 0 0
x44460:	je string_test$109	; 2: 116 9

string_test$107:	; BinarySubtract £temporary4335 p s
x44462:	mov ax, [bp + 210]	; 4: 139 134 210 0
x44466:	sub ax, [bp + 8]	; 3: 43 70 8

string_test$108:	; Goto 110
x44469:	jmp string_test$110	; 2: 235 3

string_test$109:	; Assign £temporary4335 -1
x44471:	mov ax, -1	; 3: 184 255 255

string_test$110:	; Parameter 212 £temporary4335 8
x44474:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$111:	; Call 212 printf 0
x44478:	mov word [bp + 212], string_test$112	; 6: 199 134 212 0 212 173
x44484:	mov [bp + 214], bp	; 4: 137 174 214 0
x44488:	add bp, 212	; 4: 129 197 212 0
x44492:	mov di, bp	; 2: 137 239
x44494:	add di, 2	; 3: 131 199 2
x44497:	jmp printf	; 3: 233 48 95

string_test$112:	; PostCall 212

string_test$113:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$114:	; Parameter 212 s 6
x44500:	mov ax, [bp + 8]	; 3: 139 70 8
x44503:	mov [bp + 218], ax	; 4: 137 134 218 0

string_test$115:	; Parameter 212 120 8
x44507:	mov word [bp + 220], 120	; 6: 199 134 220 0 120 0

string_test$116:	; Call 212 strchr 0
x44513:	mov word [bp + 212], string_test$117	; 6: 199 134 212 0 242 173
x44519:	mov [bp + 214], bp	; 4: 137 174 214 0
x44523:	add bp, 212	; 4: 129 197 212 0
x44527:	jmp strchr	; 3: 233 201 115

string_test$117:	; PostCall 212

string_test$118:	; GetReturnValue £temporary4337

string_test$119:	; Assign p £temporary4337
x44530:	mov [bp + 210], bx	; 4: 137 158 210 0

string_test$120:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$121:	; Parameter 212 string_strchr28s2C2027x2729203D2025i0A# 6
x44534:	mov word [bp + 218], @9779$string_strchr28s2C2027x2729203D2025i0A#	; 6: 199 134 218 0 107 178

string_test$122:	; Equal 125 p 0
x44540:	cmp word [bp + 210], 0	; 5: 131 190 210 0 0
x44545:	je string_test$125	; 2: 116 9

string_test$123:	; BinarySubtract £temporary4343 p s
x44547:	mov ax, [bp + 210]	; 4: 139 134 210 0
x44551:	sub ax, [bp + 8]	; 3: 43 70 8

string_test$124:	; Goto 126
x44554:	jmp string_test$126	; 2: 235 3

string_test$125:	; Assign £temporary4343 -1
x44556:	mov ax, -1	; 3: 184 255 255

string_test$126:	; Parameter 212 £temporary4343 8
x44559:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$127:	; Call 212 printf 0
x44563:	mov word [bp + 212], string_test$128	; 6: 199 134 212 0 41 174
x44569:	mov [bp + 214], bp	; 4: 137 174 214 0
x44573:	add bp, 212	; 4: 129 197 212 0
x44577:	mov di, bp	; 2: 137 239
x44579:	add di, 2	; 3: 131 199 2
x44582:	jmp printf	; 3: 233 219 94

string_test$128:	; PostCall 212

string_test$129:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$130:	; Parameter 212 s 6
x44585:	mov ax, [bp + 8]	; 3: 139 70 8
x44588:	mov [bp + 218], ax	; 4: 137 134 218 0

string_test$131:	; Parameter 212 120 8
x44592:	mov word [bp + 220], 120	; 6: 199 134 220 0 120 0

string_test$132:	; Call 212 strrchr 0
x44598:	mov word [bp + 212], string_test$133	; 6: 199 134 212 0 71 174
x44604:	mov [bp + 214], bp	; 4: 137 174 214 0
x44608:	add bp, 212	; 4: 129 197 212 0
x44612:	jmp strrchr	; 3: 233 228 6

string_test$133:	; PostCall 212

string_test$134:	; GetReturnValue £temporary4345

string_test$135:	; Assign p £temporary4345
x44615:	mov [bp + 210], bx	; 4: 137 158 210 0

string_test$136:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$137:	; Parameter 212 string_strrchr28s2C2027x2729203D2025i0A# 6
x44619:	mov word [bp + 218], @9798$string_strrchr28s2C2027x2729203D2025i0A#	; 6: 199 134 218 0 128 178

string_test$138:	; Equal 141 p 0
x44625:	cmp word [bp + 210], 0	; 5: 131 190 210 0 0
x44630:	je string_test$141	; 2: 116 9

string_test$139:	; BinarySubtract £temporary4351 p s
x44632:	mov ax, [bp + 210]	; 4: 139 134 210 0
x44636:	sub ax, [bp + 8]	; 3: 43 70 8

string_test$140:	; Goto 142
x44639:	jmp string_test$142	; 2: 235 3

string_test$141:	; Assign £temporary4351 -1
x44641:	mov ax, -1	; 3: 184 255 255

string_test$142:	; Parameter 212 £temporary4351 8
x44644:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$143:	; Call 212 printf 0
x44648:	mov word [bp + 212], string_test$144	; 6: 199 134 212 0 126 174
x44654:	mov [bp + 214], bp	; 4: 137 174 214 0
x44658:	add bp, 212	; 4: 129 197 212 0
x44662:	mov di, bp	; 2: 137 239
x44664:	add di, 2	; 3: 131 199 2
x44667:	jmp printf	; 3: 233 134 94

string_test$144:	; PostCall 212

string_test$145:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$146:	; Parameter 212 s 6
x44670:	mov ax, [bp + 8]	; 3: 139 70 8
x44673:	mov [bp + 218], ax	; 4: 137 134 218 0

string_test$147:	; Parameter 212 string_Hello2C20World21# 8
x44677:	mov word [bp + 220], @9813$string_Hello2C20World21#	; 6: 199 134 220 0 150 178

string_test$148:	; Parameter 212 20 10
x44683:	mov word [bp + 222], 20	; 6: 199 134 222 0 20 0

string_test$149:	; Call 212 memcpy 0
x44689:	mov word [bp + 212], string_test$150	; 6: 199 134 212 0 162 174
x44695:	mov [bp + 214], bp	; 4: 137 174 214 0
x44699:	add bp, 212	; 4: 129 197 212 0
x44703:	jmp memcpy	; 3: 233 254 227

string_test$150:	; PostCall 212

string_test$151:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$152:	; Parameter 212 t 6
x44706:	mov [bp + 218], bp	; 4: 137 174 218 0
x44710:	add word [bp + 218], 10	; 5: 131 134 218 0 10

string_test$153:	; Parameter 212 string_Hello2C20World21# 8
x44715:	mov word [bp + 220], @9820$string_Hello2C20World21#	; 6: 199 134 220 0 164 178

string_test$154:	; Parameter 212 20 10
x44721:	mov word [bp + 222], 20	; 6: 199 134 222 0 20 0

string_test$155:	; Call 212 memmove 0
x44727:	mov word [bp + 212], string_test$156	; 6: 199 134 212 0 200 174
x44733:	mov [bp + 214], bp	; 4: 137 174 214 0
x44737:	add bp, 212	; 4: 129 197 212 0
x44741:	jmp memmove	; 3: 233 176 6

string_test$156:	; PostCall 212

string_test$157:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$158:	; Parameter 212 u 6
x44744:	mov [bp + 218], bp	; 4: 137 174 218 0
x44748:	add word [bp + 218], 110	; 5: 131 134 218 0 110

string_test$159:	; Parameter 212 88 8
x44753:	mov word [bp + 220], 88	; 6: 199 134 220 0 88 0

string_test$160:	; Parameter 212 20 10
x44759:	mov word [bp + 222], 20	; 6: 199 134 222 0 20 0

string_test$161:	; Call 212 memset 0
x44765:	mov word [bp + 212], string_test$162	; 6: 199 134 212 0 238 174
x44771:	mov [bp + 214], bp	; 4: 137 174 214 0
x44775:	add bp, 212	; 4: 129 197 212 0
x44779:	jmp memset	; 3: 233 240 6

string_test$162:	; PostCall 212

string_test$163:	; Deref £temporary4356 -> u u 19
x44782:	mov si, bp	; 2: 137 238
x44784:	add si, 110	; 3: 131 198 110

string_test$164:	; Assign £temporary4356 -> u 0
x44787:	mov byte [si + 19], 0	; 4: 198 68 19 0

string_test$165:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$166:	; Parameter 212 string_s203D202225s222C20t203D202225s222C20u203D202225s220A# 6
x44791:	mov word [bp + 218], @9842$string_s203D202225s222C20t203D202225s222C20u203D202225s220A#	; 6: 199 134 218 0 178 178

string_test$167:	; Parameter 212 s 8
x44797:	mov ax, [bp + 8]	; 3: 139 70 8
x44800:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$168:	; Parameter 212 t 10
x44804:	mov [bp + 222], bp	; 4: 137 174 222 0
x44808:	add word [bp + 222], 10	; 5: 131 134 222 0 10

string_test$169:	; Parameter 212 u 12
x44813:	mov [bp + 224], bp	; 4: 137 174 224 0
x44817:	add word [bp + 224], 110	; 5: 131 134 224 0 110

string_test$170:	; Call 212 printf 0
x44822:	mov word [bp + 212], string_test$171	; 6: 199 134 212 0 44 175
x44828:	mov [bp + 214], bp	; 4: 137 174 214 0
x44832:	add bp, 212	; 4: 129 197 212 0
x44836:	mov di, bp	; 2: 137 239
x44838:	add di, 6	; 3: 131 199 6
x44841:	jmp printf	; 3: 233 216 93

string_test$171:	; PostCall 212

string_test$172:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$173:	; Parameter 212 s 6
x44844:	mov ax, [bp + 8]	; 3: 139 70 8
x44847:	mov [bp + 218], ax	; 4: 137 134 218 0

string_test$174:	; Parameter 212 108 8
x44851:	mov word [bp + 220], 108	; 6: 199 134 220 0 108 0

string_test$175:	; Parameter 212 20 10
x44857:	mov word [bp + 222], 20	; 6: 199 134 222 0 20 0

string_test$176:	; Call 212 memchr 0
x44863:	mov word [bp + 212], string_test$177	; 6: 199 134 212 0 80 175
x44869:	mov [bp + 214], bp	; 4: 137 174 214 0
x44873:	add bp, 212	; 4: 129 197 212 0
x44877:	jmp memchr	; 3: 233 206 6

string_test$177:	; PostCall 212

string_test$178:	; GetReturnValue £temporary4358

string_test$179:	; Assign p £temporary4358
x44880:	mov [bp + 210], bx	; 4: 137 158 210 0

string_test$180:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$181:	; Parameter 212 string_memchr28s2C2027l272C20SIZE202A20sizeof28char2929203D2025i0A# 6
x44884:	mov word [bp + 218], @9853$string_memchr28s2C2027l272C20SIZE202A20sizeof28char2929203D2025i0A#	; 6: 199 134 218 0 208 178

string_test$182:	; Equal 185 p 0
x44890:	cmp word [bp + 210], 0	; 5: 131 190 210 0 0
x44895:	je string_test$185	; 2: 116 9

string_test$183:	; BinarySubtract £temporary4364 p s
x44897:	mov ax, [bp + 210]	; 4: 139 134 210 0
x44901:	sub ax, [bp + 8]	; 3: 43 70 8

string_test$184:	; Goto 186
x44904:	jmp string_test$186	; 2: 235 3

string_test$185:	; Assign £temporary4364 -1
x44906:	mov ax, -1	; 3: 184 255 255

string_test$186:	; Parameter 212 £temporary4364 8
x44909:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$187:	; Call 212 printf 0
x44913:	mov word [bp + 212], string_test$188	; 6: 199 134 212 0 135 175
x44919:	mov [bp + 214], bp	; 4: 137 174 214 0
x44923:	add bp, 212	; 4: 129 197 212 0
x44927:	mov di, bp	; 2: 137 239
x44929:	add di, 2	; 3: 131 199 2
x44932:	jmp printf	; 3: 233 125 93

string_test$188:	; PostCall 212

string_test$189:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$190:	; Parameter 212 s 6
x44935:	mov ax, [bp + 8]	; 3: 139 70 8
x44938:	mov [bp + 218], ax	; 4: 137 134 218 0

string_test$191:	; Parameter 212 120 8
x44942:	mov word [bp + 220], 120	; 6: 199 134 220 0 120 0

string_test$192:	; Parameter 212 20 10
x44948:	mov word [bp + 222], 20	; 6: 199 134 222 0 20 0

string_test$193:	; Call 212 memchr 0
x44954:	mov word [bp + 212], string_test$194	; 6: 199 134 212 0 171 175
x44960:	mov [bp + 214], bp	; 4: 137 174 214 0
x44964:	add bp, 212	; 4: 129 197 212 0
x44968:	jmp memchr	; 3: 233 115 6

string_test$194:	; PostCall 212

string_test$195:	; GetReturnValue £temporary4366

string_test$196:	; Assign p £temporary4366
x44971:	mov [bp + 210], bx	; 4: 137 158 210 0

string_test$197:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$198:	; Parameter 212 string_memchr28s2C2027x272C20SIZE202A20sizeof28char2929203D2025i0A# 6
x44975:	mov word [bp + 218], @9877$string_memchr28s2C2027x272C20SIZE202A20sizeof28char2929203D2025i0A#	; 6: 199 134 218 0 250 178

string_test$199:	; Equal 202 p 0
x44981:	cmp word [bp + 210], 0	; 5: 131 190 210 0 0
x44986:	je string_test$202	; 2: 116 9

string_test$200:	; BinarySubtract £temporary4372 p s
x44988:	mov ax, [bp + 210]	; 4: 139 134 210 0
x44992:	sub ax, [bp + 8]	; 3: 43 70 8

string_test$201:	; Goto 203
x44995:	jmp string_test$203	; 2: 235 3

string_test$202:	; Assign £temporary4372 -1
x44997:	mov ax, -1	; 3: 184 255 255

string_test$203:	; Parameter 212 £temporary4372 8
x45000:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$204:	; Call 212 printf 0
x45004:	mov word [bp + 212], string_test$205	; 6: 199 134 212 0 226 175
x45010:	mov [bp + 214], bp	; 4: 137 174 214 0
x45014:	add bp, 212	; 4: 129 197 212 0
x45018:	mov di, bp	; 2: 137 239
x45020:	add di, 2	; 3: 131 199 2
x45023:	jmp printf	; 3: 233 34 93

string_test$205:	; PostCall 212

string_test$206:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$207:	; Parameter 212 string_s3A202225s222C20t3A202225s220A# 6
x45026:	mov word [bp + 218], @9892$string_s3A202225s222C20t3A202225s220A#	; 6: 199 134 218 0 36 179

string_test$208:	; Parameter 212 s 8
x45032:	mov ax, [bp + 8]	; 3: 139 70 8
x45035:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$209:	; Parameter 212 t 10
x45039:	mov [bp + 222], bp	; 4: 137 174 222 0
x45043:	add word [bp + 222], 10	; 5: 131 134 222 0 10

string_test$210:	; Call 212 printf 0
x45048:	mov word [bp + 212], string_test$211	; 6: 199 134 212 0 14 176
x45054:	mov [bp + 214], bp	; 4: 137 174 214 0
x45058:	add bp, 212	; 4: 129 197 212 0
x45062:	mov di, bp	; 2: 137 239
x45064:	add di, 4	; 3: 131 199 4
x45067:	jmp printf	; 3: 233 246 92

string_test$211:	; PostCall 212

string_test$212:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$213:	; Parameter 212 string_strcmp28s2C20t29203D2025i0A# 6
x45070:	mov word [bp + 218], @9894$string_strcmp28s2C20t29203D2025i0A#	; 6: 199 134 218 0 54 179

string_test$214:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$215:	; Parameter 212 s 14
x45076:	mov ax, [bp + 8]	; 3: 139 70 8
x45079:	mov [bp + 226], ax	; 4: 137 134 226 0

string_test$216:	; Parameter 212 t 16
x45083:	mov [bp + 228], bp	; 4: 137 174 228 0
x45087:	add word [bp + 228], 10	; 5: 131 134 228 0 10

string_test$217:	; Call 212 strcmp 8
x45092:	mov word [bp + 220], string_test$218	; 6: 199 134 220 0 53 176
x45098:	mov [bp + 222], bp	; 4: 137 174 222 0
x45102:	add bp, 220	; 4: 129 197 220 0
x45106:	jmp strcmp	; 3: 233 212 172

string_test$218:	; PostCall 212

string_test$219:	; GetReturnValue £temporary4375

string_test$220:	; Parameter 212 £temporary4375 8
x45109:	mov [bp + 220], bx	; 4: 137 158 220 0

string_test$221:	; Call 212 printf 0
x45113:	mov word [bp + 212], string_test$222	; 6: 199 134 212 0 79 176
x45119:	mov [bp + 214], bp	; 4: 137 174 214 0
x45123:	add bp, 212	; 4: 129 197 212 0
x45127:	mov di, bp	; 2: 137 239
x45129:	add di, 2	; 3: 131 199 2
x45132:	jmp printf	; 3: 233 181 92

string_test$222:	; PostCall 212

string_test$223:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$224:	; Parameter 212 string_memcmp28s2C20t2C20SIZE202A20sizeof28char2929203D2025i0A# 6
x45135:	mov word [bp + 218], @9897$string_memcmp28s2C20t2C20SIZE202A20sizeof28char2929203D2025i0A#	; 6: 199 134 218 0 73 179

string_test$225:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$226:	; Parameter 212 s 14
x45141:	mov ax, [bp + 8]	; 3: 139 70 8
x45144:	mov [bp + 226], ax	; 4: 137 134 226 0

string_test$227:	; Parameter 212 t 16
x45148:	mov [bp + 228], bp	; 4: 137 174 228 0
x45152:	add word [bp + 228], 10	; 5: 131 134 228 0 10

string_test$228:	; Parameter 212 20 18
x45157:	mov word [bp + 230], 20	; 6: 199 134 230 0 20 0

string_test$229:	; Call 212 memcmp 8
x45163:	mov word [bp + 220], string_test$230	; 6: 199 134 220 0 124 176
x45169:	mov [bp + 222], bp	; 4: 137 174 222 0
x45173:	add bp, 220	; 4: 129 197 220 0
x45177:	jmp memcmp	; 3: 233 245 5

string_test$230:	; PostCall 212

string_test$231:	; GetReturnValue £temporary4377

string_test$232:	; Parameter 212 £temporary4377 8
x45180:	mov [bp + 220], bx	; 4: 137 158 220 0

string_test$233:	; Call 212 printf 0
x45184:	mov word [bp + 212], string_test$234	; 6: 199 134 212 0 150 176
x45190:	mov [bp + 214], bp	; 4: 137 174 214 0
x45194:	add bp, 212	; 4: 129 197 212 0
x45198:	mov di, bp	; 2: 137 239
x45200:	add di, 2	; 3: 131 199 2
x45203:	jmp printf	; 3: 233 110 92

string_test$234:	; PostCall 212

string_test$235:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$236:	; Parameter 212 string_strspn28s2C2022Hello2C20C2229203D2025i0A# 6
x45206:	mov word [bp + 218], @9905$string_strspn28s2C2022Hello2C20C2229203D2025i0A#	; 6: 199 134 218 0 113 179

string_test$237:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$238:	; Parameter 212 s 14
x45212:	mov ax, [bp + 8]	; 3: 139 70 8
x45215:	mov [bp + 226], ax	; 4: 137 134 226 0

string_test$239:	; Parameter 212 string_Hello2C20C# 16
x45219:	mov word [bp + 228], @9906$string_Hello2C20C#	; 6: 199 134 228 0 141 179

string_test$240:	; Call 212 strspn 8
x45225:	mov word [bp + 220], string_test$241	; 6: 199 134 220 0 186 176
x45231:	mov [bp + 222], bp	; 4: 137 174 222 0
x45235:	add bp, 220	; 4: 129 197 220 0
x45239:	jmp strspn	; 3: 233 35 6

string_test$241:	; PostCall 212

string_test$242:	; GetReturnValue £temporary4379

string_test$243:	; Parameter 212 £temporary4379 8
x45242:	mov [bp + 220], bx	; 4: 137 158 220 0

string_test$244:	; Call 212 printf 0
x45246:	mov word [bp + 212], string_test$245	; 6: 199 134 212 0 212 176
x45252:	mov [bp + 214], bp	; 4: 137 174 214 0
x45256:	add bp, 212	; 4: 129 197 212 0
x45260:	mov di, bp	; 2: 137 239
x45262:	add di, 2	; 3: 131 199 2
x45265:	jmp printf	; 3: 233 48 92

string_test$245:	; PostCall 212

string_test$246:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$247:	; Parameter 212 string_strcspn28s2C2022Hello2C20C2229203D2025i0A# 6
x45268:	mov word [bp + 218], @9909$string_strcspn28s2C2022Hello2C20C2229203D2025i0A#	; 6: 199 134 218 0 150 179

string_test$248:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$249:	; Parameter 212 s 14
x45274:	mov ax, [bp + 8]	; 3: 139 70 8
x45277:	mov [bp + 226], ax	; 4: 137 134 226 0

string_test$250:	; Parameter 212 string_Hello2C20C# 16
x45281:	mov word [bp + 228], @9910$string_Hello2C20C#	; 6: 199 134 228 0 179 179

string_test$251:	; Call 212 strcspn 8
x45287:	mov word [bp + 220], string_test$252	; 6: 199 134 220 0 248 176
x45293:	mov [bp + 222], bp	; 4: 137 174 222 0
x45297:	add bp, 220	; 4: 129 197 220 0
x45301:	jmp strcspn	; 3: 233 69 6

string_test$252:	; PostCall 212

string_test$253:	; GetReturnValue £temporary4381

string_test$254:	; Parameter 212 £temporary4381 8
x45304:	mov [bp + 220], bx	; 4: 137 158 220 0

string_test$255:	; Call 212 printf 0
x45308:	mov word [bp + 212], string_test$256	; 6: 199 134 212 0 18 177
x45314:	mov [bp + 214], bp	; 4: 137 174 214 0
x45318:	add bp, 212	; 4: 129 197 212 0
x45322:	mov di, bp	; 2: 137 239
x45324:	add di, 2	; 3: 131 199 2
x45327:	jmp printf	; 3: 233 242 91

string_test$256:	; PostCall 212

string_test$257:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$258:	; Parameter 212 string_strerror28errno29203D202225s220A# 6
x45330:	mov word [bp + 218], @9913$string_strerror28errno29203D202225s220A#	; 6: 199 134 218 0 188 179

string_test$259:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$260:	; Parameter 212 errno 14
x45336:	mov ax, [errno]	; 3: 161 230 10
x45339:	mov [bp + 226], ax	; 4: 137 134 226 0

string_test$261:	; Call 212 strerror 8
x45343:	mov word [bp + 220], string_test$262	; 6: 199 134 220 0 48 177
x45349:	mov [bp + 222], bp	; 4: 137 174 222 0
x45353:	add bp, 220	; 4: 129 197 220 0
x45357:	jmp strerror	; 3: 233 235 130

string_test$262:	; PostCall 212

string_test$263:	; GetReturnValue £temporary4383

string_test$264:	; Parameter 212 £temporary4383 8
x45360:	mov [bp + 220], bx	; 4: 137 158 220 0

string_test$265:	; Call 212 printf 0
x45364:	mov word [bp + 212], string_test$266	; 6: 199 134 212 0 74 177
x45370:	mov [bp + 214], bp	; 4: 137 174 214 0
x45374:	add bp, 212	; 4: 129 197 212 0
x45378:	mov di, bp	; 2: 137 239
x45380:	add di, 2	; 3: 131 199 2
x45383:	jmp printf	; 3: 233 186 91

string_test$266:	; PostCall 212

string_test$267:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$268:	; Parameter 212 s 6
x45386:	mov ax, [bp + 8]	; 3: 139 70 8
x45389:	mov [bp + 218], ax	; 4: 137 134 218 0

string_test$269:	; Parameter 212 string_2C# 8
x45393:	mov word [bp + 220], @9916$string_2C#	; 6: 199 134 220 0 212 179

string_test$270:	; Call 212 strtok 0
x45399:	mov word [bp + 212], string_test$271	; 6: 199 134 212 0 104 177
x45405:	mov [bp + 214], bp	; 4: 137 174 214 0
x45409:	add bp, 212	; 4: 129 197 212 0
x45413:	jmp strtok	; 3: 233 53 6

string_test$271:	; PostCall 212

string_test$272:	; GetReturnValue £temporary4385

string_test$273:	; Assign p £temporary4385
x45416:	mov [bp + 210], bx	; 4: 137 158 210 0

string_test$274:	; Equal 288 p 0
x45420:	cmp word [bp + 210], 0	; 5: 131 190 210 0 0
x45425:	je string_test$288	; 2: 116 71

string_test$275:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$276:	; Parameter 212 string_strtok28s2C20222C2229203D202225s220A# 6
x45427:	mov word [bp + 218], @9922$string_strtok28s2C20222C2229203D202225s220A#	; 6: 199 134 218 0 214 179

string_test$277:	; Parameter 212 p 8
x45433:	mov ax, [bp + 210]	; 4: 139 134 210 0
x45437:	mov [bp + 220], ax	; 4: 137 134 220 0

string_test$278:	; Call 212 printf 0
x45441:	mov word [bp + 212], string_test$279	; 6: 199 134 212 0 151 177
x45447:	mov [bp + 214], bp	; 4: 137 174 214 0
x45451:	add bp, 212	; 4: 129 197 212 0
x45455:	mov di, bp	; 2: 137 239
x45457:	add di, 2	; 3: 131 199 2
x45460:	jmp printf	; 3: 233 109 91

string_test$279:	; PostCall 212

string_test$280:	; CallHeader 212 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

string_test$281:	; Parameter 212 0 6
x45463:	mov word [bp + 218], 0	; 6: 199 134 218 0 0 0

string_test$282:	; Parameter 212 string_2C# 8
x45469:	mov word [bp + 220], @9927$string_2C#	; 6: 199 134 220 0 237 179

string_test$283:	; Call 212 strtok 0
x45475:	mov word [bp + 212], string_test$284	; 6: 199 134 212 0 180 177
x45481:	mov [bp + 214], bp	; 4: 137 174 214 0
x45485:	add bp, 212	; 4: 129 197 212 0
x45489:	jmp strtok	; 3: 233 233 5

string_test$284:	; PostCall 212

string_test$285:	; GetReturnValue £temporary4388

string_test$286:	; Assign p £temporary4388
x45492:	mov [bp + 210], bx	; 4: 137 158 210 0

string_test$287:	; Goto 274
x45496:	jmp string_test$274	; 2: 235 178

string_test$288:	; Return 0
x45498:	mov ax, [bp]	; 3: 139 70 0
x45501:	mov di, [bp + 4]	; 3: 139 126 4
x45504:	mov bp, [bp + 2]	; 3: 139 110 2
x45507:	jmp ax	; 2: 255 224

string_test$289:	; FunctionEnd string_test

@9688$string_Hello2C20World21#:
x45509:	db "Hello, World!", 0	; 14: 72 101 108 108 111 44 32 87 111 114 108 100 33 0

@9697$string_strlen282225s2229203D2025i0A#:
x45523:	db "strlen(", 34, "%s", 34, ") = %i", 10, 0	; 19: 115 116 114 108 101 110 40 34 37 115 34 41 32 61 32 37 105 10 0

@9709$string_t203D202225s222C20u203D202225s220A#:
x45542:	db "t = ", 34, "%s", 34, ", u = ", 34, "%s", 34, 10, 0	; 20: 116 32 61 32 34 37 115 34 44 32 117 32 61 32 34 37 115 34 10 0

@9711$string_abc#:
x45562:	db "abc", 0	; 4: 97 98 99 0

@9714$string_abc#:
x45566:	db "abc", 0	; 4: 97 98 99 0

@9726$string_t203D202225s222C20u203D202225s220A#:
x45570:	db "t = ", 34, "%s", 34, ", u = ", 34, "%s", 34, 10, 0	; 20: 116 32 61 32 34 37 115 34 44 32 117 32 61 32 34 37 115 34 10 0

@9728$string_strcmp28s2C20u29203D2025i0A#:
x45590:	db "strcmp(s, u) = %i", 10, 0	; 19: 115 116 114 99 109 112 40 115 44 32 117 41 32 61 32 37 105 10 0

@9731$string_strncmp28s2C20u2C20229203D2025i0A#:
x45609:	db "strncmp(s, u, 2) = %i", 10, 0	; 23: 115 116 114 110 99 109 112 40 115 44 32 117 44 32 50 41 32 61 32 37 105 10 0

@9741$string_strchr28s2C2027l2729203D2025i0A#:
x45632:	db "strchr(s, ", 39, "l", 39, ") = %i", 10, 0	; 21: 115 116 114 99 104 114 40 115 44 32 39 108 39 41 32 61 32 37 105 10 0

@9760$string_strrchr28s2C2027l2729203D2025i0A#:
x45653:	db "strrchr(s, ", 39, "l", 39, ") = %i", 10, 0	; 22: 115 116 114 114 99 104 114 40 115 44 32 39 108 39 41 32 61 32 37 105 10 0

@9779$string_strchr28s2C2027x2729203D2025i0A#:
x45675:	db "strchr(s, ", 39, "x", 39, ") = %i", 10, 0	; 21: 115 116 114 99 104 114 40 115 44 32 39 120 39 41 32 61 32 37 105 10 0

@9798$string_strrchr28s2C2027x2729203D2025i0A#:
x45696:	db "strrchr(s, ", 39, "x", 39, ") = %i", 10, 0	; 22: 115 116 114 114 99 104 114 40 115 44 32 39 120 39 41 32 61 32 37 105 10 0

@9813$string_Hello2C20World21#:
x45718:	db "Hello, World!", 0	; 14: 72 101 108 108 111 44 32 87 111 114 108 100 33 0

@9820$string_Hello2C20World21#:
x45732:	db "Hello, World!", 0	; 14: 72 101 108 108 111 44 32 87 111 114 108 100 33 0

@9842$string_s203D202225s222C20t203D202225s222C20u203D202225s220A#:
x45746:	db "s = ", 34, "%s", 34, ", t = ", 34, "%s", 34, ", u = ", 34, "%s", 34, 10, 0	; 30: 115 32 61 32 34 37 115 34 44 32 116 32 61 32 34 37 115 34 44 32 117 32 61 32 34 37 115 34 10 0

@9853$string_memchr28s2C2027l272C20SIZE202A20sizeof28char2929203D2025i0A#:
x45776:	db "memchr(s, ", 39, "l", 39, ", SIZE * sizeof(char)) = %i", 10, 0	; 42: 109 101 109 99 104 114 40 115 44 32 39 108 39 44 32 83 73 90 69 32 42 32 115 105 122 101 111 102 40 99 104 97 114 41 41 32 61 32 37 105 10 0

@9877$string_memchr28s2C2027x272C20SIZE202A20sizeof28char2929203D2025i0A#:
x45818:	db "memchr(s, ", 39, "x", 39, ", SIZE * sizeof(char)) = %i", 10, 0	; 42: 109 101 109 99 104 114 40 115 44 32 39 120 39 44 32 83 73 90 69 32 42 32 115 105 122 101 111 102 40 99 104 97 114 41 41 32 61 32 37 105 10 0

@9892$string_s3A202225s222C20t3A202225s220A#:
x45860:	db "s: ", 34, "%s", 34, ", t: ", 34, "%s", 34, 10, 0	; 18: 115 58 32 34 37 115 34 44 32 116 58 32 34 37 115 34 10 0

@9894$string_strcmp28s2C20t29203D2025i0A#:
x45878:	db "strcmp(s, t) = %i", 10, 0	; 19: 115 116 114 99 109 112 40 115 44 32 116 41 32 61 32 37 105 10 0

@9897$string_memcmp28s2C20t2C20SIZE202A20sizeof28char2929203D2025i0A#:
x45897:	db "memcmp(s, t, SIZE * sizeof(char)) = %i", 10, 0	; 40: 109 101 109 99 109 112 40 115 44 32 116 44 32 83 73 90 69 32 42 32 115 105 122 101 111 102 40 99 104 97 114 41 41 32 61 32 37 105 10 0

@9905$string_strspn28s2C2022Hello2C20C2229203D2025i0A#:
x45937:	db "strspn(s, ", 34, "Hello, C", 34, ") = %i", 10, 0	; 28: 115 116 114 115 112 110 40 115 44 32 34 72 101 108 108 111 44 32 67 34 41 32 61 32 37 105 10 0

@9906$string_Hello2C20C#:
x45965:	db "Hello, C", 0	; 9: 72 101 108 108 111 44 32 67 0

@9909$string_strcspn28s2C2022Hello2C20C2229203D2025i0A#:
x45974:	db "strcspn(s, ", 34, "Hello, C", 34, ") = %i", 10, 0	; 29: 115 116 114 99 115 112 110 40 115 44 32 34 72 101 108 108 111 44 32 67 34 41 32 61 32 37 105 10 0

@9910$string_Hello2C20C#:
x46003:	db "Hello, C", 0	; 9: 72 101 108 108 111 44 32 67 0

@9913$string_strerror28errno29203D202225s220A#:
x46012:	db "strerror(errno) = ", 34, "%s", 34, 10, 0	; 24: 115 116 114 101 114 114 111 114 40 101 114 114 110 111 41 32 61 32 34 37 115 34 10 0

@9916$string_2C#:
x46036:	db ",", 0	; 2: 44 0

@9922$string_strtok28s2C20222C2229203D202225s220A#:
x46038:	db "strtok(s, ", 34, ",", 34, ") = ", 34, "%s", 34, 10, 0	; 23: 115 116 114 116 111 107 40 115 44 32 34 44 34 41 32 61 32 34 37 115 34 10 0

@9927$string_2C#:
x46061:	db ",", 0	; 2: 44 0

strncpy:	; Assign index 0
x46063:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

strncpy$1:	; SignedGreaterThanEqual 12 index size
x46068:	mov ax, [bp + 10]	; 3: 139 70 10
x46071:	cmp [bp + 12], ax	; 3: 57 70 12
x46074:	jge strncpy$12	; 2: 125 32

strncpy$2:	; BinaryAdd £temporary3709 source index
x46076:	mov si, [bp + 8]	; 3: 139 118 8
x46079:	add si, [bp + 12]	; 3: 3 118 12

strncpy$3:	; Deref £temporary3708 -> £temporary3709 £temporary3709 0

strncpy$4:	; Equal 12 £temporary3708 -> £temporary3709 0
x46082:	cmp byte [si], 0	; 3: 128 60 0
x46085:	je strncpy$12	; 2: 116 21

strncpy$5:	; BinaryAdd £temporary3714 target index
x46087:	mov si, [bp + 6]	; 3: 139 118 6
x46090:	add si, [bp + 12]	; 3: 3 118 12

strncpy$6:	; Deref £temporary3713 -> £temporary3714 £temporary3714 0

strncpy$7:	; BinaryAdd £temporary3716 source index
x46093:	mov di, [bp + 8]	; 3: 139 126 8
x46096:	add di, [bp + 12]	; 3: 3 126 12

strncpy$8:	; Deref £temporary3715 -> £temporary3716 £temporary3716 0

strncpy$9:	; Assign £temporary3713 -> £temporary3714 £temporary3715 -> £temporary3716
x46099:	mov al, [di]	; 2: 138 5
x46101:	mov [si], al	; 2: 136 4

strncpy$10:	; Increment index
x46103:	inc word [bp + 12]	; 3: 255 70 12

strncpy$11:	; Goto 1
x46106:	jmp strncpy$1	; 2: 235 216

strncpy$12:	; SignedGreaterThanEqual 18 index size
x46108:	mov ax, [bp + 10]	; 3: 139 70 10
x46111:	cmp [bp + 12], ax	; 3: 57 70 12
x46114:	jge strncpy$18	; 2: 125 14

strncpy$13:	; BinaryAdd £temporary3720 target index
x46116:	mov si, [bp + 6]	; 3: 139 118 6
x46119:	add si, [bp + 12]	; 3: 3 118 12

strncpy$14:	; Deref £temporary3719 -> £temporary3720 £temporary3720 0

strncpy$15:	; Assign £temporary3719 -> £temporary3720 0
x46122:	mov byte [si], 0	; 3: 198 4 0

strncpy$16:	; Increment index
x46125:	inc word [bp + 12]	; 3: 255 70 12

strncpy$17:	; Goto 12
x46128:	jmp strncpy$12	; 2: 235 234

strncpy$18:	; SetReturnValue target
x46130:	mov bx, [bp + 6]	; 3: 139 94 6

strncpy$19:	; Return target
x46133:	mov ax, [bp]	; 3: 139 70 0
x46136:	mov di, [bp + 4]	; 3: 139 126 4
x46139:	mov bp, [bp + 2]	; 3: 139 110 2
x46142:	jmp ax	; 2: 255 224

strncpy$20:	; FunctionEnd strncpy

strncat:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strncat$1:	; Parameter 14 target 6
x46144:	mov ax, [bp + 6]	; 3: 139 70 6
x46147:	mov [bp + 20], ax	; 3: 137 70 20

strncat$2:	; Call 14 strlen 0
x46150:	mov word [bp + 14], strncat$3	; 5: 199 70 14 84 180
x46155:	mov [bp + 16], bp	; 3: 137 110 16
x46158:	add bp, 14	; 3: 131 197 14
x46161:	jmp strlen	; 3: 233 167 216

strncat$3:	; PostCall 14

strncat$4:	; GetReturnValue £temporary3735

strncat$5:	; Assign targetLength £temporary3735
x46164:	mov [bp + 14], bx	; 3: 137 94 14

strncat$6:	; Assign index 0
x46167:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

strncat$7:	; BinarySubtract £temporary3736 size 1
x46172:	mov ax, [bp + 10]	; 3: 139 70 10
x46175:	dec ax	; 1: 72

strncat$8:	; SignedGreaterThanEqual 20 index £temporary3736
x46176:	cmp [bp + 12], ax	; 3: 57 70 12
x46179:	jge strncat$20	; 2: 125 37

strncat$9:	; BinaryAdd £temporary3739 source index
x46181:	mov si, [bp + 8]	; 3: 139 118 8
x46184:	add si, [bp + 12]	; 3: 3 118 12

strncat$10:	; Deref £temporary3738 -> £temporary3739 £temporary3739 0

strncat$11:	; Equal 20 £temporary3738 -> £temporary3739 0
x46187:	cmp byte [si], 0	; 3: 128 60 0
x46190:	je strncat$20	; 2: 116 26

strncat$12:	; BinaryAdd £temporary3743 targetLength index
x46192:	mov ax, [bp + 14]	; 3: 139 70 14
x46195:	add ax, [bp + 12]	; 3: 3 70 12

strncat$13:	; BinaryAdd £temporary3745 target £temporary3743
x46198:	mov si, [bp + 6]	; 3: 139 118 6
x46201:	add si, ax	; 2: 1 198

strncat$14:	; Deref £temporary3744 -> £temporary3745 £temporary3745 0

strncat$15:	; BinaryAdd £temporary3747 source index
x46203:	mov di, [bp + 8]	; 3: 139 126 8
x46206:	add di, [bp + 12]	; 3: 3 126 12

strncat$16:	; Deref £temporary3746 -> £temporary3747 £temporary3747 0

strncat$17:	; Assign £temporary3744 -> £temporary3745 £temporary3746 -> £temporary3747
x46209:	mov al, [di]	; 2: 138 5
x46211:	mov [si], al	; 2: 136 4

strncat$18:	; Increment index
x46213:	inc word [bp + 12]	; 3: 255 70 12

strncat$19:	; Goto 7
x46216:	jmp strncat$7	; 2: 235 210

strncat$20:	; BinaryAdd £temporary3748 targetLength size
x46218:	mov ax, [bp + 14]	; 3: 139 70 14
x46221:	add ax, [bp + 10]	; 3: 3 70 10

strncat$21:	; BinarySubtract £temporary3749 £temporary3748 1
x46224:	dec ax	; 1: 72

strncat$22:	; BinaryAdd £temporary3751 target £temporary3749
x46225:	mov si, [bp + 6]	; 3: 139 118 6
x46228:	add si, ax	; 2: 1 198

strncat$23:	; Deref £temporary3750 -> £temporary3751 £temporary3751 0

strncat$24:	; Assign £temporary3750 -> £temporary3751 0
x46230:	mov byte [si], 0	; 3: 198 4 0

strncat$25:	; SetReturnValue target
x46233:	mov bx, [bp + 6]	; 3: 139 94 6

strncat$26:	; Return target
x46236:	mov ax, [bp]	; 3: 139 70 0
x46239:	mov di, [bp + 4]	; 3: 139 126 4
x46242:	mov bp, [bp + 2]	; 3: 139 110 2
x46245:	jmp ax	; 2: 255 224

strncat$27:	; FunctionEnd strncat

strncmp:	; Assign index 0
x46247:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

strncmp$1:	; SignedGreaterThanEqual 26 index size
x46252:	mov ax, [bp + 10]	; 3: 139 70 10
x46255:	cmp [bp + 12], ax	; 3: 57 70 12
x46258:	jge strncmp$26	; 2: 125 105

strncmp$2:	; BinaryAdd £temporary3775 left index
x46260:	mov si, [bp + 6]	; 3: 139 118 6
x46263:	add si, [bp + 12]	; 3: 3 118 12

strncmp$3:	; Deref £temporary3774 -> £temporary3775 £temporary3775 0

strncmp$4:	; NotEqual 10 £temporary3774 -> £temporary3775 0
x46266:	cmp byte [si], 0	; 3: 128 60 0
x46269:	jne strncmp$10	; 2: 117 25

strncmp$5:	; BinaryAdd £temporary3778 right index
x46271:	mov si, [bp + 8]	; 3: 139 118 8
x46274:	add si, [bp + 12]	; 3: 3 118 12

strncmp$6:	; Deref £temporary3777 -> £temporary3778 £temporary3778 0

strncmp$7:	; NotEqual 10 £temporary3777 -> £temporary3778 0
x46277:	cmp byte [si], 0	; 3: 128 60 0
x46280:	jne strncmp$10	; 2: 117 14

strncmp$8:	; SetReturnValue 0
x46282:	mov bx, 0	; 3: 187 0 0

strncmp$9:	; Return 0
x46285:	mov ax, [bp]	; 3: 139 70 0
x46288:	mov di, [bp + 4]	; 3: 139 126 4
x46291:	mov bp, [bp + 2]	; 3: 139 110 2
x46294:	jmp ax	; 2: 255 224

strncmp$10:	; BinaryAdd £temporary3782 left index
x46296:	mov si, [bp + 6]	; 3: 139 118 6
x46299:	add si, [bp + 12]	; 3: 3 118 12

strncmp$11:	; Deref £temporary3781 -> £temporary3782 £temporary3782 0

strncmp$12:	; BinaryAdd £temporary3784 right index
x46302:	mov di, [bp + 8]	; 3: 139 126 8
x46305:	add di, [bp + 12]	; 3: 3 126 12

strncmp$13:	; Deref £temporary3783 -> £temporary3784 £temporary3784 0

strncmp$14:	; SignedGreaterThanEqual 17 £temporary3781 -> £temporary3782 £temporary3783 -> £temporary3784
x46308:	mov al, [di]	; 2: 138 5
x46310:	cmp [si], al	; 2: 56 4
x46312:	jge strncmp$17	; 2: 125 14

strncmp$15:	; SetReturnValue -1
x46314:	mov bx, -1	; 3: 187 255 255

strncmp$16:	; Return -1
x46317:	mov ax, [bp]	; 3: 139 70 0
x46320:	mov di, [bp + 4]	; 3: 139 126 4
x46323:	mov bp, [bp + 2]	; 3: 139 110 2
x46326:	jmp ax	; 2: 255 224

strncmp$17:	; BinaryAdd £temporary3787 left index
x46328:	mov si, [bp + 6]	; 3: 139 118 6
x46331:	add si, [bp + 12]	; 3: 3 118 12

strncmp$18:	; Deref £temporary3786 -> £temporary3787 £temporary3787 0

strncmp$19:	; BinaryAdd £temporary3789 right index
x46334:	mov di, [bp + 8]	; 3: 139 126 8
x46337:	add di, [bp + 12]	; 3: 3 126 12

strncmp$20:	; Deref £temporary3788 -> £temporary3789 £temporary3789 0

strncmp$21:	; SignedLessThanEqual 24 £temporary3786 -> £temporary3787 £temporary3788 -> £temporary3789
x46340:	mov al, [di]	; 2: 138 5
x46342:	cmp [si], al	; 2: 56 4
x46344:	jle strncmp$24	; 2: 126 14

strncmp$22:	; SetReturnValue 1
x46346:	mov bx, 1	; 3: 187 1 0

strncmp$23:	; Return 1
x46349:	mov ax, [bp]	; 3: 139 70 0
x46352:	mov di, [bp + 4]	; 3: 139 126 4
x46355:	mov bp, [bp + 2]	; 3: 139 110 2
x46358:	jmp ax	; 2: 255 224

strncmp$24:	; Increment index
x46360:	inc word [bp + 12]	; 3: 255 70 12

strncmp$25:	; Goto 1
x46363:	jmp strncmp$1	; 2: 235 143

strncmp$26:	; SetReturnValue 0
x46365:	mov bx, 0	; 3: 187 0 0

strncmp$27:	; Return 0
x46368:	mov ax, [bp]	; 3: 139 70 0
x46371:	mov di, [bp + 4]	; 3: 139 126 4
x46374:	mov bp, [bp + 2]	; 3: 139 110 2
x46377:	jmp ax	; 2: 255 224

strncmp$28:	; FunctionEnd strncmp

strrchr:	; Assign result 0
x46379:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

strrchr$1:	; IntegralToIntegral £temporary3802 i
x46384:	mov ax, [bp + 8]	; 3: 139 70 8
x46387:	cmp ax, 0	; 3: 131 248 0
x46390:	jge strrchr$2	; 2: 125 4
x46392:	neg ax	; 2: 247 216
x46394:	neg al	; 2: 246 216

strrchr$2:	; Assign c £temporary3802
x46396:	mov [bp + 14], al	; 3: 136 70 14

strrchr$3:	; Assign index 0
x46399:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strrchr$4:	; BinaryAdd £temporary3804 text index
x46404:	mov si, [bp + 6]	; 3: 139 118 6
x46407:	add si, [bp + 10]	; 3: 3 118 10

strrchr$5:	; Deref £temporary3803 -> £temporary3804 £temporary3804 0

strrchr$6:	; Equal 16 £temporary3803 -> £temporary3804 0
x46410:	cmp byte [si], 0	; 3: 128 60 0
x46413:	je strrchr$16	; 2: 116 27

strrchr$7:	; BinaryAdd £temporary3808 text index
x46415:	mov si, [bp + 6]	; 3: 139 118 6
x46418:	add si, [bp + 10]	; 3: 3 118 10

strrchr$8:	; Deref £temporary3807 -> £temporary3808 £temporary3808 0

strrchr$9:	; NotEqual 14 £temporary3807 -> £temporary3808 c
x46421:	mov al, [bp + 14]	; 3: 138 70 14
x46424:	cmp [si], al	; 2: 56 4
x46426:	jne strrchr$14	; 2: 117 9

strrchr$10:	; BinaryAdd £temporary3811 text index
x46428:	mov si, [bp + 6]	; 3: 139 118 6
x46431:	add si, [bp + 10]	; 3: 3 118 10

strrchr$11:	; Deref £temporary3810 -> £temporary3811 £temporary3811 0

strrchr$12:	; address £temporary3812 £temporary3810 -> £temporary3811

strrchr$13:	; Assign result £temporary3812
x46434:	mov [bp + 12], si	; 3: 137 118 12

strrchr$14:	; Increment index
x46437:	inc word [bp + 10]	; 3: 255 70 10

strrchr$15:	; Goto 4
x46440:	jmp strrchr$4	; 2: 235 218

strrchr$16:	; SetReturnValue result
x46442:	mov bx, [bp + 12]	; 3: 139 94 12

strrchr$17:	; Return result
x46445:	mov ax, [bp]	; 3: 139 70 0
x46448:	mov di, [bp + 4]	; 3: 139 126 4
x46451:	mov bp, [bp + 2]	; 3: 139 110 2
x46454:	jmp ax	; 2: 255 224

strrchr$18:	; FunctionEnd strrchr

memmove:	; IntegralToIntegral £temporary3930 target
x46456:	mov ax, [bp + 6]	; 3: 139 70 6

memmove$1:	; Assign charTarget £temporary3930
x46459:	mov [bp + 12], ax	; 3: 137 70 12

memmove$2:	; IntegralToIntegral £temporary3931 source
x46462:	mov ax, [bp + 8]	; 3: 139 70 8

memmove$3:	; Assign charSource £temporary3931
x46465:	mov [bp + 14], ax	; 3: 137 70 14

memmove$4:	; SignedGreaterThanEqual 14 source target
x46468:	mov ax, [bp + 6]	; 3: 139 70 6
x46471:	cmp [bp + 8], ax	; 3: 57 70 8
x46474:	jge memmove$14	; 2: 125 34

memmove$5:	; BinarySubtract index size 1
x46476:	mov ax, [bp + 10]	; 3: 139 70 10
x46479:	dec ax	; 1: 72
x46480:	mov [bp + 16], ax	; 3: 137 70 16

memmove$6:	; SignedLessThan 23 index 0
x46483:	cmp word [bp + 16], 0	; 4: 131 126 16 0
x46487:	jl memmove$23	; 2: 124 55

memmove$7:	; BinaryAdd £temporary3937 charTarget index
x46489:	mov si, [bp + 12]	; 3: 139 118 12
x46492:	add si, [bp + 16]	; 3: 3 118 16

memmove$8:	; Deref £temporary3936 -> £temporary3937 £temporary3937 0

memmove$9:	; BinaryAdd £temporary3939 charSource index
x46495:	mov di, [bp + 14]	; 3: 139 126 14
x46498:	add di, [bp + 16]	; 3: 3 126 16

memmove$10:	; Deref £temporary3938 -> £temporary3939 £temporary3939 0

memmove$11:	; Assign £temporary3936 -> £temporary3937 £temporary3938 -> £temporary3939
x46501:	mov al, [di]	; 2: 138 5
x46503:	mov [si], al	; 2: 136 4

memmove$12:	; Decrement index
x46505:	dec word [bp + 16]	; 3: 255 78 16

memmove$13:	; Goto 6
x46508:	jmp memmove$6	; 2: 235 229

memmove$14:	; Assign index 0
x46510:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

memmove$15:	; SignedGreaterThanEqual 23 index size
x46515:	mov ax, [bp + 10]	; 3: 139 70 10
x46518:	cmp [bp + 16], ax	; 3: 57 70 16
x46521:	jge memmove$23	; 2: 125 21

memmove$16:	; BinaryAdd £temporary3943 charTarget index
x46523:	mov si, [bp + 12]	; 3: 139 118 12
x46526:	add si, [bp + 16]	; 3: 3 118 16

memmove$17:	; Deref £temporary3942 -> £temporary3943 £temporary3943 0

memmove$18:	; BinaryAdd £temporary3945 charSource index
x46529:	mov di, [bp + 14]	; 3: 139 126 14
x46532:	add di, [bp + 16]	; 3: 3 126 16

memmove$19:	; Deref £temporary3944 -> £temporary3945 £temporary3945 0

memmove$20:	; Assign £temporary3942 -> £temporary3943 £temporary3944 -> £temporary3945
x46535:	mov al, [di]	; 2: 138 5
x46537:	mov [si], al	; 2: 136 4

memmove$21:	; Increment index
x46539:	inc word [bp + 16]	; 3: 255 70 16

memmove$22:	; Goto 15
x46542:	jmp memmove$15	; 2: 235 227

memmove$23:	; IntegralToIntegral £temporary3946 target
x46544:	mov bx, [bp + 6]	; 3: 139 94 6

memmove$24:	; SetReturnValue £temporary3946

memmove$25:	; Return £temporary3946
x46547:	mov ax, [bp]	; 3: 139 70 0
x46550:	mov di, [bp + 4]	; 3: 139 126 4
x46553:	mov bp, [bp + 2]	; 3: 139 110 2
x46556:	jmp ax	; 2: 255 224

memmove$26:	; FunctionEnd memmove

memset:	; IntegralToIntegral £temporary3972 block
x46558:	mov ax, [bp + 6]	; 3: 139 70 6

memset$1:	; Assign charBlock £temporary3972
x46561:	mov [bp + 12], ax	; 3: 137 70 12

memset$2:	; IntegralToIntegral £temporary3973 i
x46564:	mov ax, [bp + 8]	; 3: 139 70 8
x46567:	cmp ax, 0	; 3: 131 248 0
x46570:	jge memset$3	; 2: 125 4
x46572:	neg ax	; 2: 247 216
x46574:	neg al	; 2: 246 216

memset$3:	; Assign c £temporary3973
x46576:	mov [bp + 14], al	; 3: 136 70 14

memset$4:	; Assign index 0
x46579:	mov word [bp + 15], 0	; 5: 199 70 15 0 0

memset$5:	; SignedGreaterThanEqual 11 index size
x46584:	mov ax, [bp + 10]	; 3: 139 70 10
x46587:	cmp [bp + 15], ax	; 3: 57 70 15
x46590:	jge memset$11	; 2: 125 16

memset$6:	; BinaryAdd £temporary3977 charBlock index
x46592:	mov si, [bp + 12]	; 3: 139 118 12
x46595:	add si, [bp + 15]	; 3: 3 118 15

memset$7:	; Deref £temporary3976 -> £temporary3977 £temporary3977 0

memset$8:	; Assign £temporary3976 -> £temporary3977 c
x46598:	mov al, [bp + 14]	; 3: 138 70 14
x46601:	mov [si], al	; 2: 136 4

memset$9:	; Increment index
x46603:	inc word [bp + 15]	; 3: 255 70 15

memset$10:	; Goto 5
x46606:	jmp memset$5	; 2: 235 232

memset$11:	; SetReturnValue block
x46608:	mov bx, [bp + 6]	; 3: 139 94 6

memset$12:	; Return block
x46611:	mov ax, [bp]	; 3: 139 70 0
x46614:	mov di, [bp + 4]	; 3: 139 126 4
x46617:	mov bp, [bp + 2]	; 3: 139 110 2
x46620:	jmp ax	; 2: 255 224

memset$13:	; FunctionEnd memset

memchr:	; IntegralToIntegral £temporary3961 block
x46622:	mov ax, [bp + 6]	; 3: 139 70 6

memchr$1:	; Assign charBlock £temporary3961
x46625:	mov [bp + 14], ax	; 3: 137 70 14

memchr$2:	; IntegralToIntegral £temporary3962 i
x46628:	mov ax, [bp + 8]	; 3: 139 70 8
x46631:	cmp ax, 0	; 3: 131 248 0
x46634:	jge memchr$3	; 2: 125 4
x46636:	neg ax	; 2: 247 216
x46638:	neg al	; 2: 246 216

memchr$3:	; Assign c £temporary3962
x46640:	mov [bp + 16], al	; 3: 136 70 16

memchr$4:	; Assign index 0
x46643:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

memchr$5:	; SignedGreaterThanEqual 17 index size
x46648:	mov ax, [bp + 10]	; 3: 139 70 10
x46651:	cmp [bp + 12], ax	; 3: 57 70 12
x46654:	jge memchr$17	; 2: 125 35

memchr$6:	; BinaryAdd £temporary3966 charBlock index
x46656:	mov si, [bp + 14]	; 3: 139 118 14
x46659:	add si, [bp + 12]	; 3: 3 118 12

memchr$7:	; Deref £temporary3965 -> £temporary3966 £temporary3966 0

memchr$8:	; NotEqual 15 £temporary3965 -> £temporary3966 c
x46662:	mov al, [bp + 16]	; 3: 138 70 16
x46665:	cmp [si], al	; 2: 56 4
x46667:	jne memchr$15	; 2: 117 17

memchr$9:	; BinaryAdd £temporary3969 charBlock index
x46669:	mov bx, [bp + 14]	; 3: 139 94 14
x46672:	add bx, [bp + 12]	; 3: 3 94 12

memchr$10:	; Deref £temporary3968 -> £temporary3969 £temporary3969 0

memchr$11:	; address £temporary3970 £temporary3968 -> £temporary3969

memchr$12:	; IntegralToIntegral £temporary3971 £temporary3970

memchr$13:	; SetReturnValue £temporary3971

memchr$14:	; Return £temporary3971
x46675:	mov ax, [bp]	; 3: 139 70 0
x46678:	mov di, [bp + 4]	; 3: 139 126 4
x46681:	mov bp, [bp + 2]	; 3: 139 110 2
x46684:	jmp ax	; 2: 255 224

memchr$15:	; Increment index
x46686:	inc word [bp + 12]	; 3: 255 70 12

memchr$16:	; Goto 5
x46689:	jmp memchr$5	; 2: 235 213

memchr$17:	; SetReturnValue 0
x46691:	mov bx, 0	; 3: 187 0 0

memchr$18:	; Return 0
x46694:	mov ax, [bp]	; 3: 139 70 0
x46697:	mov di, [bp + 4]	; 3: 139 126 4
x46700:	mov bp, [bp + 2]	; 3: 139 110 2
x46703:	jmp ax	; 2: 255 224

memchr$19:	; FunctionEnd memchr

memcmp:	; IntegralToIntegral £temporary3947 left
x46705:	mov ax, [bp + 6]	; 3: 139 70 6

memcmp$1:	; Assign charLeft £temporary3947
x46708:	mov [bp + 12], ax	; 3: 137 70 12

memcmp$2:	; IntegralToIntegral £temporary3948 right
x46711:	mov ax, [bp + 8]	; 3: 139 70 8

memcmp$3:	; Assign charRight £temporary3948
x46714:	mov [bp + 14], ax	; 3: 137 70 14

memcmp$4:	; Assign index 0
x46717:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

memcmp$5:	; SignedGreaterThanEqual 22 index size
x46722:	mov ax, [bp + 10]	; 3: 139 70 10
x46725:	cmp [bp + 16], ax	; 3: 57 70 16
x46728:	jge memcmp$22	; 2: 125 69

memcmp$6:	; BinaryAdd £temporary3952 charLeft index
x46730:	mov si, [bp + 12]	; 3: 139 118 12
x46733:	add si, [bp + 16]	; 3: 3 118 16

memcmp$7:	; Deref £temporary3951 -> £temporary3952 £temporary3952 0

memcmp$8:	; BinaryAdd £temporary3954 charRight index
x46736:	mov di, [bp + 14]	; 3: 139 126 14
x46739:	add di, [bp + 16]	; 3: 3 126 16

memcmp$9:	; Deref £temporary3953 -> £temporary3954 £temporary3954 0

memcmp$10:	; SignedGreaterThanEqual 13 £temporary3951 -> £temporary3952 £temporary3953 -> £temporary3954
x46742:	mov al, [di]	; 2: 138 5
x46744:	cmp [si], al	; 2: 56 4
x46746:	jge memcmp$13	; 2: 125 14

memcmp$11:	; SetReturnValue -1
x46748:	mov bx, -1	; 3: 187 255 255

memcmp$12:	; Return -1
x46751:	mov ax, [bp]	; 3: 139 70 0
x46754:	mov di, [bp + 4]	; 3: 139 126 4
x46757:	mov bp, [bp + 2]	; 3: 139 110 2
x46760:	jmp ax	; 2: 255 224

memcmp$13:	; BinaryAdd £temporary3957 charLeft index
x46762:	mov si, [bp + 12]	; 3: 139 118 12
x46765:	add si, [bp + 16]	; 3: 3 118 16

memcmp$14:	; Deref £temporary3956 -> £temporary3957 £temporary3957 0

memcmp$15:	; BinaryAdd £temporary3959 charRight index
x46768:	mov di, [bp + 14]	; 3: 139 126 14
x46771:	add di, [bp + 16]	; 3: 3 126 16

memcmp$16:	; Deref £temporary3958 -> £temporary3959 £temporary3959 0

memcmp$17:	; SignedLessThanEqual 20 £temporary3956 -> £temporary3957 £temporary3958 -> £temporary3959
x46774:	mov al, [di]	; 2: 138 5
x46776:	cmp [si], al	; 2: 56 4
x46778:	jle memcmp$20	; 2: 126 14

memcmp$18:	; SetReturnValue 1
x46780:	mov bx, 1	; 3: 187 1 0

memcmp$19:	; Return 1
x46783:	mov ax, [bp]	; 3: 139 70 0
x46786:	mov di, [bp + 4]	; 3: 139 126 4
x46789:	mov bp, [bp + 2]	; 3: 139 110 2
x46792:	jmp ax	; 2: 255 224

memcmp$20:	; Increment index
x46794:	inc word [bp + 16]	; 3: 255 70 16

memcmp$21:	; Goto 5
x46797:	jmp memcmp$5	; 2: 235 179

memcmp$22:	; SetReturnValue 0
x46799:	mov bx, 0	; 3: 187 0 0

memcmp$23:	; Return 0
x46802:	mov ax, [bp]	; 3: 139 70 0
x46805:	mov di, [bp + 4]	; 3: 139 126 4
x46808:	mov bp, [bp + 2]	; 3: 139 110 2
x46811:	jmp ax	; 2: 255 224

memcmp$24:	; FunctionEnd memcmp

strspn:	; Assign index 0
x46813:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strspn$1:	; BinaryAdd £temporary3814 mainString index
x46818:	mov si, [bp + 6]	; 3: 139 118 6
x46821:	add si, [bp + 10]	; 3: 3 118 10

strspn$2:	; Deref £temporary3813 -> £temporary3814 £temporary3814 0

strspn$3:	; Equal 18 £temporary3813 -> £temporary3814 0
x46824:	cmp byte [si], 0	; 3: 128 60 0
x46827:	je strspn$18	; 2: 116 66

strspn$4:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strspn$5:	; Parameter 12 charSet 6
x46829:	mov ax, [bp + 8]	; 3: 139 70 8
x46832:	mov [bp + 18], ax	; 3: 137 70 18

strspn$6:	; BinaryAdd £temporary3818 mainString index
x46835:	mov si, [bp + 6]	; 3: 139 118 6
x46838:	add si, [bp + 10]	; 3: 3 118 10

strspn$7:	; Deref £temporary3817 -> £temporary3818 £temporary3818 0

strspn$8:	; IntegralToIntegral £temporary3819 £temporary3817 -> £temporary3818
x46841:	mov al, [si]	; 2: 138 4
x46843:	and ax, 255	; 3: 37 255 0
x46846:	cmp al, 0	; 2: 60 0
x46848:	jge strspn$9	; 2: 125 4
x46850:	neg al	; 2: 246 216
x46852:	neg ax	; 2: 247 216

strspn$9:	; Parameter 12 £temporary3819 8
x46854:	mov [bp + 20], ax	; 3: 137 70 20

strspn$10:	; Call 12 strchr 0
x46857:	mov word [bp + 12], strspn$11	; 5: 199 70 12 23 183
x46862:	mov [bp + 14], bp	; 3: 137 110 14
x46865:	add bp, 12	; 3: 131 197 12
x46868:	jmp strchr	; 3: 233 164 106

strspn$11:	; PostCall 12

strspn$12:	; GetReturnValue £temporary3820

strspn$13:	; NotEqual 16 £temporary3820 0
x46871:	cmp bx, 0	; 3: 131 251 0
x46874:	jne strspn$16	; 2: 117 14

strspn$14:	; SetReturnValue index
x46876:	mov bx, [bp + 10]	; 3: 139 94 10

strspn$15:	; Return index
x46879:	mov ax, [bp]	; 3: 139 70 0
x46882:	mov di, [bp + 4]	; 3: 139 126 4
x46885:	mov bp, [bp + 2]	; 3: 139 110 2
x46888:	jmp ax	; 2: 255 224

strspn$16:	; Increment index
x46890:	inc word [bp + 10]	; 3: 255 70 10

strspn$17:	; Goto 1
x46893:	jmp strspn$1	; 2: 235 179

strspn$18:	; SetReturnValue -1
x46895:	mov bx, -1	; 3: 187 255 255

strspn$19:	; Return -1
x46898:	mov ax, [bp]	; 3: 139 70 0
x46901:	mov di, [bp + 4]	; 3: 139 126 4
x46904:	mov bp, [bp + 2]	; 3: 139 110 2
x46907:	jmp ax	; 2: 255 224

strspn$20:	; FunctionEnd strspn

strcspn:	; Assign index 0
x46909:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strcspn$1:	; BinaryAdd £temporary3825 mainString index
x46914:	mov si, [bp + 6]	; 3: 139 118 6
x46917:	add si, [bp + 10]	; 3: 3 118 10

strcspn$2:	; Deref £temporary3824 -> £temporary3825 £temporary3825 0

strcspn$3:	; Equal 18 £temporary3824 -> £temporary3825 0
x46920:	cmp byte [si], 0	; 3: 128 60 0
x46923:	je strcspn$18	; 2: 116 66

strcspn$4:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strcspn$5:	; Parameter 12 charSet 6
x46925:	mov ax, [bp + 8]	; 3: 139 70 8
x46928:	mov [bp + 18], ax	; 3: 137 70 18

strcspn$6:	; BinaryAdd £temporary3829 mainString index
x46931:	mov si, [bp + 6]	; 3: 139 118 6
x46934:	add si, [bp + 10]	; 3: 3 118 10

strcspn$7:	; Deref £temporary3828 -> £temporary3829 £temporary3829 0

strcspn$8:	; IntegralToIntegral £temporary3830 £temporary3828 -> £temporary3829
x46937:	mov al, [si]	; 2: 138 4
x46939:	and ax, 255	; 3: 37 255 0
x46942:	cmp al, 0	; 2: 60 0
x46944:	jge strcspn$9	; 2: 125 4
x46946:	neg al	; 2: 246 216
x46948:	neg ax	; 2: 247 216

strcspn$9:	; Parameter 12 £temporary3830 8
x46950:	mov [bp + 20], ax	; 3: 137 70 20

strcspn$10:	; Call 12 strchr 0
x46953:	mov word [bp + 12], strcspn$11	; 5: 199 70 12 119 183
x46958:	mov [bp + 14], bp	; 3: 137 110 14
x46961:	add bp, 12	; 3: 131 197 12
x46964:	jmp strchr	; 3: 233 68 106

strcspn$11:	; PostCall 12

strcspn$12:	; GetReturnValue £temporary3831

strcspn$13:	; Equal 16 £temporary3831 0
x46967:	cmp bx, 0	; 3: 131 251 0
x46970:	je strcspn$16	; 2: 116 14

strcspn$14:	; SetReturnValue index
x46972:	mov bx, [bp + 10]	; 3: 139 94 10

strcspn$15:	; Return index
x46975:	mov ax, [bp]	; 3: 139 70 0
x46978:	mov di, [bp + 4]	; 3: 139 126 4
x46981:	mov bp, [bp + 2]	; 3: 139 110 2
x46984:	jmp ax	; 2: 255 224

strcspn$16:	; Increment index
x46986:	inc word [bp + 10]	; 3: 255 70 10

strcspn$17:	; Goto 1
x46989:	jmp strcspn$1	; 2: 235 179

strcspn$18:	; SetReturnValue -1
x46991:	mov bx, -1	; 3: 187 255 255

strcspn$19:	; Return -1
x46994:	mov ax, [bp]	; 3: 139 70 0
x46997:	mov di, [bp + 4]	; 3: 139 126 4
x47000:	mov bp, [bp + 2]	; 3: 139 110 2
x47003:	jmp ax	; 2: 255 224

strcspn$20:	; FunctionEnd strcspn

strtok:	; Equal 37 string 0
x47005:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x47009:	je strtok$37	; 4: 15 132 150 0

strtok$1:	; Deref £temporary3876 -> string string 0
x47013:	mov si, [bp + 6]	; 3: 139 118 6

strtok$2:	; NotEqual 5 £temporary3876 -> string 0
x47016:	cmp byte [si], 0	; 3: 128 60 0
x47019:	jne strtok$5	; 2: 117 14

strtok$3:	; SetReturnValue 0
x47021:	mov bx, 0	; 3: 187 0 0

strtok$4:	; Return 0
x47024:	mov ax, [bp]	; 3: 139 70 0
x47027:	mov di, [bp + 4]	; 3: 139 126 4
x47030:	mov bp, [bp + 2]	; 3: 139 110 2
x47033:	jmp ax	; 2: 255 224

strtok$5:	; Assign index 0
x47035:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strtok$6:	; BinaryAdd £temporary3879 string index
x47040:	mov si, [bp + 6]	; 3: 139 118 6
x47043:	add si, [bp + 10]	; 3: 3 118 10

strtok$7:	; Deref £temporary3878 -> £temporary3879 £temporary3879 0

strtok$8:	; Equal 31 £temporary3878 -> £temporary3879 0
x47046:	cmp byte [si], 0	; 3: 128 60 0
x47049:	je strtok$31	; 2: 116 88

strtok$9:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtok$10:	; Parameter 14 charSet 6
x47051:	mov ax, [bp + 8]	; 3: 139 70 8
x47054:	mov [bp + 20], ax	; 3: 137 70 20

strtok$11:	; BinaryAdd £temporary3883 string index
x47057:	mov si, [bp + 6]	; 3: 139 118 6
x47060:	add si, [bp + 10]	; 3: 3 118 10

strtok$12:	; Deref £temporary3882 -> £temporary3883 £temporary3883 0

strtok$13:	; IntegralToIntegral £temporary3884 £temporary3882 -> £temporary3883
x47063:	mov al, [si]	; 2: 138 4
x47065:	and ax, 255	; 3: 37 255 0
x47068:	cmp al, 0	; 2: 60 0
x47070:	jge strtok$14	; 2: 125 4
x47072:	neg al	; 2: 246 216
x47074:	neg ax	; 2: 247 216

strtok$14:	; Parameter 14 £temporary3884 8
x47076:	mov [bp + 22], ax	; 3: 137 70 22

strtok$15:	; Call 14 strchr 0
x47079:	mov word [bp + 14], strtok$16	; 5: 199 70 14 245 183
x47084:	mov [bp + 16], bp	; 3: 137 110 16
x47087:	add bp, 14	; 3: 131 197 14
x47090:	jmp strchr	; 3: 233 198 105

strtok$16:	; PostCall 14

strtok$17:	; GetReturnValue £temporary3885

strtok$18:	; Equal 29 £temporary3885 0
x47093:	cmp bx, 0	; 3: 131 251 0
x47096:	je strtok$29	; 2: 116 36

strtok$19:	; BinaryAdd £temporary3888 string index
x47098:	mov si, [bp + 6]	; 3: 139 118 6
x47101:	add si, [bp + 10]	; 3: 3 118 10

strtok$20:	; Deref £temporary3887 -> £temporary3888 £temporary3888 0

strtok$21:	; Assign £temporary3887 -> £temporary3888 0
x47104:	mov byte [si], 0	; 3: 198 4 0

strtok$22:	; BinaryAdd £temporary3889 index 1
x47107:	mov ax, [bp + 10]	; 3: 139 70 10
x47110:	inc ax	; 1: 64

strtok$23:	; BinaryAdd £temporary3891 string £temporary3889
x47111:	mov si, [bp + 6]	; 3: 139 118 6
x47114:	add si, ax	; 2: 1 198

strtok$24:	; Deref £temporary3890 -> £temporary3891 £temporary3891 0

strtok$25:	; address £temporary3892 £temporary3890 -> £temporary3891

strtok$26:	; Assign token £temporary3892
x47116:	mov [@8781$token], si	; 4: 137 54 248 184

strtok$27:	; SetReturnValue string
x47120:	mov bx, [bp + 6]	; 3: 139 94 6

strtok$28:	; Return string
x47123:	mov ax, [bp]	; 3: 139 70 0
x47126:	mov di, [bp + 4]	; 3: 139 126 4
x47129:	mov bp, [bp + 2]	; 3: 139 110 2
x47132:	jmp ax	; 2: 255 224

strtok$29:	; Increment index
x47134:	inc word [bp + 10]	; 3: 255 70 10

strtok$30:	; Goto 6
x47137:	jmp strtok$6	; 2: 235 157

strtok$31:	; BinaryAdd £temporary3894 string index
x47139:	mov si, [bp + 6]	; 3: 139 118 6
x47142:	add si, [bp + 10]	; 3: 3 118 10

strtok$32:	; Deref £temporary3893 -> £temporary3894 £temporary3894 0

strtok$33:	; address £temporary3895 £temporary3893 -> £temporary3894

strtok$34:	; Assign token £temporary3895
x47145:	mov [@8781$token], si	; 4: 137 54 248 184

strtok$35:	; SetReturnValue string
x47149:	mov bx, [bp + 6]	; 3: 139 94 6

strtok$36:	; Return string
x47152:	mov ax, [bp]	; 3: 139 70 0
x47155:	mov di, [bp + 4]	; 3: 139 126 4
x47158:	mov bp, [bp + 2]	; 3: 139 110 2
x47161:	jmp ax	; 2: 255 224

strtok$37:	; NotEqual 40 token 0
x47163:	cmp word [@8781$token], 0	; 5: 131 62 248 184 0
x47168:	jne strtok$40	; 2: 117 14

strtok$38:	; SetReturnValue 0
x47170:	mov bx, 0	; 3: 187 0 0

strtok$39:	; Return 0
x47173:	mov ax, [bp]	; 3: 139 70 0
x47176:	mov di, [bp + 4]	; 3: 139 126 4
x47179:	mov bp, [bp + 2]	; 3: 139 110 2
x47182:	jmp ax	; 2: 255 224

strtok$40:	; NotEqual 43 (@8781$token,0) 0
x47184:	mov si, [@8781$token]	; 4: 139 54 248 184
x47188:	cmp byte [si], 0	; 3: 128 60 0
x47191:	jne strtok$43	; 2: 117 14

strtok$41:	; SetReturnValue 0
x47193:	mov bx, 0	; 3: 187 0 0

strtok$42:	; Return 0
x47196:	mov ax, [bp]	; 3: 139 70 0
x47199:	mov di, [bp + 4]	; 3: 139 126 4
x47202:	mov bp, [bp + 2]	; 3: 139 110 2
x47205:	jmp ax	; 2: 255 224

strtok$43:	; Assign index 0
x47207:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strtok$44:	; BinaryAdd £temporary3900 token index
x47212:	mov si, [@8781$token]	; 4: 139 54 248 184
x47216:	add si, [bp + 10]	; 3: 3 118 10

strtok$45:	; Deref £temporary3899 -> £temporary3900 £temporary3900 0

strtok$46:	; Equal 70 £temporary3899 -> £temporary3900 0
x47219:	cmp byte [si], 0	; 3: 128 60 0
x47222:	je strtok$70	; 2: 116 97

strtok$47:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtok$48:	; Parameter 14 charSet 6
x47224:	mov ax, [bp + 8]	; 3: 139 70 8
x47227:	mov [bp + 20], ax	; 3: 137 70 20

strtok$49:	; BinaryAdd £temporary3904 token index
x47230:	mov si, [@8781$token]	; 4: 139 54 248 184
x47234:	add si, [bp + 10]	; 3: 3 118 10

strtok$50:	; Deref £temporary3903 -> £temporary3904 £temporary3904 0

strtok$51:	; IntegralToIntegral £temporary3905 £temporary3903 -> £temporary3904
x47237:	mov al, [si]	; 2: 138 4
x47239:	and ax, 255	; 3: 37 255 0
x47242:	cmp al, 0	; 2: 60 0
x47244:	jge strtok$52	; 2: 125 4
x47246:	neg al	; 2: 246 216
x47248:	neg ax	; 2: 247 216

strtok$52:	; Parameter 14 £temporary3905 8
x47250:	mov [bp + 22], ax	; 3: 137 70 22

strtok$53:	; Call 14 strchr 0
x47253:	mov word [bp + 14], strtok$54	; 5: 199 70 14 163 184
x47258:	mov [bp + 16], bp	; 3: 137 110 16
x47261:	add bp, 14	; 3: 131 197 14
x47264:	jmp strchr	; 3: 233 24 105

strtok$54:	; PostCall 14

strtok$55:	; GetReturnValue £temporary3906

strtok$56:	; Equal 68 £temporary3906 0
x47267:	cmp bx, 0	; 3: 131 251 0
x47270:	je strtok$68	; 2: 116 44

strtok$57:	; Assign tokenStart2 token
x47272:	mov ax, [@8781$token]	; 3: 161 248 184
x47275:	mov [bp + 14], ax	; 3: 137 70 14

strtok$58:	; BinaryAdd £temporary3909 token index
x47278:	mov si, [@8781$token]	; 4: 139 54 248 184
x47282:	add si, [bp + 10]	; 3: 3 118 10

strtok$59:	; Deref £temporary3908 -> £temporary3909 £temporary3909 0

strtok$60:	; Assign £temporary3908 -> £temporary3909 0
x47285:	mov byte [si], 0	; 3: 198 4 0

strtok$61:	; BinaryAdd £temporary3910 index 1
x47288:	mov ax, [bp + 10]	; 3: 139 70 10
x47291:	inc ax	; 1: 64

strtok$62:	; BinaryAdd £temporary3912 token £temporary3910
x47292:	mov si, [@8781$token]	; 4: 139 54 248 184
x47296:	add si, ax	; 2: 1 198

strtok$63:	; Deref £temporary3911 -> £temporary3912 £temporary3912 0

strtok$64:	; address £temporary3913 £temporary3911 -> £temporary3912

strtok$65:	; Assign token £temporary3913
x47298:	mov [@8781$token], si	; 4: 137 54 248 184

strtok$66:	; SetReturnValue tokenStart2
x47302:	mov bx, [bp + 14]	; 3: 139 94 14

strtok$67:	; Return tokenStart2
x47305:	mov ax, [bp]	; 3: 139 70 0
x47308:	mov di, [bp + 4]	; 3: 139 126 4
x47311:	mov bp, [bp + 2]	; 3: 139 110 2
x47314:	jmp ax	; 2: 255 224

strtok$68:	; Increment index
x47316:	inc word [bp + 10]	; 3: 255 70 10

strtok$69:	; Goto 44
x47319:	jmp strtok$44	; 2: 235 147

strtok$70:	; Assign tokenStart token
x47321:	mov ax, [@8781$token]	; 3: 161 248 184
x47324:	mov [bp + 12], ax	; 3: 137 70 12

strtok$71:	; BinaryAdd £temporary3915 token index
x47327:	mov si, [@8781$token]	; 4: 139 54 248 184
x47331:	add si, [bp + 10]	; 3: 3 118 10

strtok$72:	; Deref £temporary3914 -> £temporary3915 £temporary3915 0

strtok$73:	; address £temporary3916 £temporary3914 -> £temporary3915

strtok$74:	; Assign token £temporary3916
x47334:	mov [@8781$token], si	; 4: 137 54 248 184

strtok$75:	; SetReturnValue tokenStart
x47338:	mov bx, [bp + 12]	; 3: 139 94 12

strtok$76:	; Return tokenStart
x47341:	mov ax, [bp]	; 3: 139 70 0
x47344:	mov di, [bp + 4]	; 3: 139 126 4
x47347:	mov bp, [bp + 2]	; 3: 139 110 2
x47350:	jmp ax	; 2: 255 224

strtok$77:	; FunctionEnd strtok

@8781$token:
x47352:	dw 0	; 2: 0 0

stdlib_test:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$1:	; Parameter 8 string_atof28221232E4562229203D2025f0A# 6
x47354:	mov word [bp + 14], @13228$string_atof28221232E4562229203D2025f0A#	; 5: 199 70 14 61 190

stdlib_test$2:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$3:	; Parameter 8 string_1232E456# 14
x47359:	mov word [bp + 22], @13229$string_1232E456#	; 5: 199 70 22 83 190

stdlib_test$4:	; Call 8 atof 8
x47364:	mov word [bp + 16], stdlib_test$5	; 5: 199 70 16 18 185
x47369:	mov [bp + 18], bp	; 3: 137 110 18
x47372:	add bp, 16	; 3: 131 197 16
x47375:	jmp atof	; 3: 233 42 7

stdlib_test$5:	; PostCall 8

stdlib_test$6:	; GetReturnValue £temporary6056

stdlib_test$7:	; Parameter 8 £temporary6056 8
x47378:	fstp qword [bp + 16]	; 3: 221 94 16

stdlib_test$8:	; Call 8 printf 0
x47381:	mov word [bp + 8], stdlib_test$9	; 5: 199 70 8 40 185
x47386:	mov [bp + 10], bp	; 3: 137 110 10
x47389:	add bp, 8	; 3: 131 197 8
x47392:	mov di, bp	; 2: 137 239
x47394:	add di, 8	; 3: 131 199 8
x47397:	jmp printf	; 3: 233 220 83

stdlib_test$9:	; PostCall 8

stdlib_test$10:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$11:	; Parameter 8 string_strtod28221232E456789abc222C2026p29203D202825f2C2025s290A# 6
x47400:	mov word [bp + 14], @13232$string_strtod28221232E456789abc222C2026p29203D202825f2C2025s290A#	; 5: 199 70 14 91 190

stdlib_test$12:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$13:	; Parameter 8 string_1232E456789abc# 14
x47405:	mov word [bp + 22], @13233$string_1232E456789abc#	; 5: 199 70 22 131 190

stdlib_test$14:	; address £temporary6058 p
x47410:	mov si, bp	; 2: 137 238
x47412:	add si, 6	; 3: 131 198 6

stdlib_test$15:	; Parameter 8 £temporary6058 16
x47415:	mov [bp + 24], si	; 3: 137 118 24

stdlib_test$16:	; Call 8 strtod 8
x47418:	mov word [bp + 16], stdlib_test$17	; 5: 199 70 16 72 185
x47423:	mov [bp + 18], bp	; 3: 137 110 18
x47426:	add bp, 16	; 3: 131 197 16
x47429:	jmp strtod	; 3: 233 24 7

stdlib_test$17:	; PostCall 8

stdlib_test$18:	; GetReturnValue £temporary6059

stdlib_test$19:	; Parameter 8 £temporary6059 8
x47432:	fstp qword [bp + 16]	; 3: 221 94 16

stdlib_test$20:	; Parameter 8 p 16
x47435:	mov ax, [bp + 6]	; 3: 139 70 6
x47438:	mov [bp + 24], ax	; 3: 137 70 24

stdlib_test$21:	; Call 8 printf 0
x47441:	mov word [bp + 8], stdlib_test$22	; 5: 199 70 8 100 185
x47446:	mov [bp + 10], bp	; 3: 137 110 10
x47449:	add bp, 8	; 3: 131 197 8
x47452:	mov di, bp	; 2: 137 239
x47454:	add di, 10	; 3: 131 199 10
x47457:	jmp printf	; 3: 233 160 83

stdlib_test$22:	; PostCall 8

stdlib_test$23:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$24:	; Parameter 6 string_0Agetenv2822path2229203D2025s0A# 6
x47460:	mov word [bp + 12], @13237$string_0Agetenv2822path2229203D2025s0A#	; 5: 199 70 12 145 190

stdlib_test$25:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$26:	; Parameter 6 string_path# 14
x47465:	mov word [bp + 20], @13238$string_path#	; 5: 199 70 20 167 190

stdlib_test$27:	; Call 6 getenv 8
x47470:	mov word [bp + 14], stdlib_test$28	; 5: 199 70 14 124 185
x47475:	mov [bp + 16], bp	; 3: 137 110 16
x47478:	add bp, 14	; 3: 131 197 14
x47481:	jmp getenv	; 3: 233 65 7

stdlib_test$28:	; PostCall 6

stdlib_test$29:	; GetReturnValue £temporary6061

stdlib_test$30:	; Parameter 6 £temporary6061 8
x47484:	mov [bp + 14], bx	; 3: 137 94 14

stdlib_test$31:	; Call 6 printf 0
x47487:	mov word [bp + 6], stdlib_test$32	; 5: 199 70 6 146 185
x47492:	mov [bp + 8], bp	; 3: 137 110 8
x47495:	add bp, 6	; 3: 131 197 6
x47498:	mov di, bp	; 2: 137 239
x47500:	add di, 2	; 3: 131 199 2
x47503:	jmp printf	; 3: 233 114 83

stdlib_test$32:	; PostCall 6

stdlib_test$33:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$34:	; Parameter 6 string_system2822dir22290A# 6
x47506:	mov word [bp + 12], @13241$string_system2822dir22290A#	; 5: 199 70 12 172 190

stdlib_test$35:	; Call 6 printf 0
x47511:	mov word [bp + 6], stdlib_test$36	; 5: 199 70 6 167 185
x47516:	mov [bp + 8], bp	; 3: 137 110 8
x47519:	add bp, 6	; 3: 131 197 6
x47522:	mov di, bp	; 2: 137 239
x47524:	jmp printf	; 3: 233 93 83

stdlib_test$36:	; PostCall 6

stdlib_test$37:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$38:	; Parameter 6 string_dir# 6
x47527:	mov word [bp + 12], @13243$string_dir#	; 5: 199 70 12 187 190

stdlib_test$39:	; Call 6 system 0
x47532:	mov word [bp + 6], stdlib_test$40	; 5: 199 70 6 186 185
x47537:	mov [bp + 8], bp	; 3: 137 110 8
x47540:	add bp, 6	; 3: 131 197 6
x47543:	jmp system	; 3: 233 17 7

stdlib_test$40:	; PostCall 6

stdlib_test$41:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$42:	; Parameter 6 string_0Aabs282D329203D2025i2C20abs28329203D2025i0A# 6
x47546:	mov word [bp + 12], @13245$string_0Aabs282D329203D2025i2C20abs28329203D2025i0A#	; 5: 199 70 12 191 190

stdlib_test$43:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$44:	; Parameter 6 -3 14
x47551:	mov word [bp + 20], -3	; 5: 199 70 20 253 255

stdlib_test$45:	; Call 6 _abs 8
x47556:	mov word [bp + 14], stdlib_test$46	; 5: 199 70 14 210 185
x47561:	mov [bp + 16], bp	; 3: 137 110 16
x47564:	add bp, 14	; 3: 131 197 14
x47567:	jmp _abs	; 3: 233 7 7

stdlib_test$46:	; PostCall 6

stdlib_test$47:	; GetReturnValue £temporary6065

stdlib_test$48:	; Parameter 6 £temporary6065 8
x47570:	mov [bp + 14], bx	; 3: 137 94 14

stdlib_test$49:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$50:	; Parameter 6 3 16
x47573:	mov word [bp + 22], 3	; 5: 199 70 22 3 0

stdlib_test$51:	; Call 6 _abs 10
x47578:	mov word [bp + 16], stdlib_test$52	; 5: 199 70 16 232 185
x47583:	mov [bp + 18], bp	; 3: 137 110 18
x47586:	add bp, 16	; 3: 131 197 16
x47589:	jmp _abs	; 3: 233 241 6

stdlib_test$52:	; PostCall 6

stdlib_test$53:	; GetReturnValue £temporary6066

stdlib_test$54:	; Parameter 6 £temporary6066 10
x47592:	mov [bp + 16], bx	; 3: 137 94 16

stdlib_test$55:	; Call 6 printf 0
x47595:	mov word [bp + 6], stdlib_test$56	; 5: 199 70 6 254 185
x47600:	mov [bp + 8], bp	; 3: 137 110 8
x47603:	add bp, 6	; 3: 131 197 6
x47606:	mov di, bp	; 2: 137 239
x47608:	add di, 4	; 3: 131 199 4
x47611:	jmp printf	; 3: 233 6 83

stdlib_test$56:	; PostCall 6

stdlib_test$57:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$58:	; Parameter 6 string_labs282D3l29203D2025li2C20labs283l29203D2025li0A0A# 6
x47614:	mov word [bp + 12], @13255$string_labs282D3l29203D2025li2C20labs283l29203D2025li0A0A#	; 5: 199 70 12 219 190

stdlib_test$59:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$60:	; Parameter 6 -3 14
x47619:	mov dword [bp + 20], -3	; 8: 102 199 70 20 253 255 255 255

stdlib_test$61:	; Call 6 labs 8
x47627:	mov word [bp + 14], stdlib_test$62	; 5: 199 70 14 25 186
x47632:	mov [bp + 16], bp	; 3: 137 110 16
x47635:	add bp, 14	; 3: 131 197 14
x47638:	jmp labs	; 3: 233 54 97

stdlib_test$62:	; PostCall 6

stdlib_test$63:	; GetReturnValue £temporary6068

stdlib_test$64:	; Parameter 6 £temporary6068 8
x47641:	mov [bp + 14], ebx	; 4: 102 137 94 14

stdlib_test$65:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$66:	; Parameter 6 3 18
x47645:	mov dword [bp + 24], 3	; 8: 102 199 70 24 3 0 0 0

stdlib_test$67:	; Call 6 labs 12
x47653:	mov word [bp + 18], stdlib_test$68	; 5: 199 70 18 51 186
x47658:	mov [bp + 20], bp	; 3: 137 110 20
x47661:	add bp, 18	; 3: 131 197 18
x47664:	jmp labs	; 3: 233 28 97

stdlib_test$68:	; PostCall 6

stdlib_test$69:	; GetReturnValue £temporary6069

stdlib_test$70:	; Parameter 6 £temporary6069 12
x47667:	mov [bp + 18], ebx	; 4: 102 137 94 18

stdlib_test$71:	; Call 6 printf 0
x47671:	mov word [bp + 6], stdlib_test$72	; 5: 199 70 6 74 186
x47676:	mov [bp + 8], bp	; 3: 137 110 8
x47679:	add bp, 6	; 3: 131 197 6
x47682:	mov di, bp	; 2: 137 239
x47684:	add di, 8	; 3: 131 199 8
x47687:	jmp printf	; 3: 233 186 82

stdlib_test$72:	; PostCall 6

stdlib_test$73:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$74:	; Parameter 6 10 6
x47690:	mov word [bp + 12], 10	; 5: 199 70 12 10 0

stdlib_test$75:	; Parameter 6 3 8
x47695:	mov word [bp + 14], 3	; 5: 199 70 14 3 0

stdlib_test$76:	; Call 6 div 0
x47700:	mov word [bp + 6], stdlib_test$77	; 5: 199 70 6 98 186
x47705:	mov [bp + 8], bp	; 3: 137 110 8
x47708:	add bp, 6	; 3: 131 197 6
x47711:	jmp div	; 3: 233 146 6

stdlib_test$77:	; PostCall 6

stdlib_test$78:	; GetReturnValue £temporary6071 -> £temporary6072

stdlib_test$79:	; Assign i £temporary6071 -> £temporary6072
x47714:	mov si, bp	; 2: 137 238
x47716:	add si, 6	; 3: 131 198 6
x47719:	mov al, 4	; 2: 176 4

stdlib_test$79$Loop:
x47721:	mov ah, [bx]	; 2: 138 39
x47723:	mov [si], ah	; 2: 136 36
x47725:	inc bx	; 1: 67
x47726:	inc si	; 1: 70
x47727:	dec al	; 2: 254 200
x47729:	cmp al, 0	; 2: 60 0
x47731:	jne stdlib_test$79$Loop	; 2: 117 244

stdlib_test$80:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$81:	; Parameter 10 string_div_t28102C20329203D202825i2C2025i290A# 6
x47733:	mov word [bp + 16], @13274$string_div_t28102C20329203D202825i2C2025i290A#	; 5: 199 70 16 253 190

stdlib_test$82:	; Parameter 10 i$quot 8
x47738:	mov ax, [bp + 6]	; 3: 139 70 6
x47741:	mov [bp + 18], ax	; 3: 137 70 18

stdlib_test$83:	; Parameter 10 i$rem 10
x47744:	mov ax, [bp + 8]	; 3: 139 70 8
x47747:	mov [bp + 20], ax	; 3: 137 70 20

stdlib_test$84:	; Call 10 printf 0
x47750:	mov word [bp + 10], stdlib_test$85	; 5: 199 70 10 153 186
x47755:	mov [bp + 12], bp	; 3: 137 110 12
x47758:	add bp, 10	; 3: 131 197 10
x47761:	mov di, bp	; 2: 137 239
x47763:	add di, 4	; 3: 131 199 4
x47766:	jmp printf	; 3: 233 107 82

stdlib_test$85:	; PostCall 10

stdlib_test$86:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$87:	; ParameterInitSize

stdlib_test$88:	; Parameter 10 i 6
x47769:	mov si, bp	; 2: 137 238
x47771:	add si, 6	; 3: 131 198 6
x47774:	mov di, bp	; 2: 137 239
x47776:	add di, 16	; 3: 131 199 16
x47779:	mov al, 4	; 2: 176 4

stdlib_test$88$Loop:
x47781:	mov ah, [si]	; 2: 138 36
x47783:	mov [di], ah	; 2: 136 37
x47785:	inc si	; 1: 70
x47786:	inc di	; 1: 71
x47787:	dec al	; 2: 254 200
x47789:	cmp al, 0	; 2: 60 0
x47791:	jne stdlib_test$88$Loop	; 2: 117 244

stdlib_test$89:	; Call 10 print_div 0
x47793:	mov word [bp + 10], stdlib_test$90	; 5: 199 70 10 191 186
x47798:	mov [bp + 12], bp	; 3: 137 110 12
x47801:	add bp, 10	; 3: 131 197 10
x47804:	jmp print_div	; 3: 233 129 6

stdlib_test$90:	; PostCall 10

stdlib_test$91:	; GetReturnValue £temporary6076 -> £temporary6077

stdlib_test$92:	; Assign j £temporary6076 -> £temporary6077
x47807:	mov si, bp	; 2: 137 238
x47809:	add si, 10	; 3: 131 198 10
x47812:	mov al, 4	; 2: 176 4

stdlib_test$92$Loop:
x47814:	mov ah, [bx]	; 2: 138 39
x47816:	mov [si], ah	; 2: 136 36
x47818:	inc bx	; 1: 67
x47819:	inc si	; 1: 70
x47820:	dec al	; 2: 254 200
x47822:	cmp al, 0	; 2: 60 0
x47824:	jne stdlib_test$92$Loop	; 2: 117 244

stdlib_test$93:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$94:	; Parameter 14 string_div_t28102C20329203D202825i2C2025i290A0A# 6
x47826:	mov word [bp + 20], @13281$string_div_t28102C20329203D202825i2C2025i290A0A#	; 5: 199 70 20 22 191

stdlib_test$95:	; Parameter 14 j$quot 8
x47831:	mov ax, [bp + 10]	; 3: 139 70 10
x47834:	mov [bp + 22], ax	; 3: 137 70 22

stdlib_test$96:	; Parameter 14 j$rem 10
x47837:	mov ax, [bp + 12]	; 3: 139 70 12
x47840:	mov [bp + 24], ax	; 3: 137 70 24

stdlib_test$97:	; Call 14 printf 0
x47843:	mov word [bp + 14], stdlib_test$98	; 5: 199 70 14 246 186
x47848:	mov [bp + 16], bp	; 3: 137 110 16
x47851:	add bp, 14	; 3: 131 197 14
x47854:	mov di, bp	; 2: 137 239
x47856:	add di, 4	; 3: 131 199 4
x47859:	jmp printf	; 3: 233 14 82

stdlib_test$98:	; PostCall 14

stdlib_test$99:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$100:	; Parameter 6 10 6
x47862:	mov dword [bp + 12], 10	; 8: 102 199 70 12 10 0 0 0

stdlib_test$101:	; Parameter 6 3 10
x47870:	mov dword [bp + 16], 3	; 8: 102 199 70 16 3 0 0 0

stdlib_test$102:	; Call 6 ldiv 0
x47878:	mov word [bp + 6], stdlib_test$103	; 5: 199 70 6 20 187
x47883:	mov [bp + 8], bp	; 3: 137 110 8
x47886:	add bp, 6	; 3: 131 197 6
x47889:	jmp ldiv	; 3: 233 124 6

stdlib_test$103:	; PostCall 6

stdlib_test$104:	; GetReturnValue £temporary6081 -> £temporary6082

stdlib_test$105:	; Assign li £temporary6081 -> £temporary6082
x47892:	mov si, bp	; 2: 137 238
x47894:	add si, 6	; 3: 131 198 6
x47897:	mov al, 8	; 2: 176 8

stdlib_test$105$Loop:
x47899:	mov ah, [bx]	; 2: 138 39
x47901:	mov [si], ah	; 2: 136 36
x47903:	inc bx	; 1: 67
x47904:	inc si	; 1: 70
x47905:	dec al	; 2: 254 200
x47907:	cmp al, 0	; 2: 60 0
x47909:	jne stdlib_test$105$Loop	; 2: 117 244

stdlib_test$106:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$107:	; Parameter 14 string_ldiv_t28102C20329203D202825li2C2025li290A# 6
x47911:	mov word [bp + 20], @13294$string_ldiv_t28102C20329203D202825li2C2025li290A#	; 5: 199 70 20 48 191

stdlib_test$108:	; Parameter 14 li$quot 8
x47916:	mov eax, [bp + 6]	; 4: 102 139 70 6
x47920:	mov [bp + 22], eax	; 4: 102 137 70 22

stdlib_test$109:	; Parameter 14 li$rem 12
x47924:	mov eax, [bp + 10]	; 4: 102 139 70 10
x47928:	mov [bp + 26], eax	; 4: 102 137 70 26

stdlib_test$110:	; Call 14 printf 0
x47932:	mov word [bp + 14], stdlib_test$111	; 5: 199 70 14 79 187
x47937:	mov [bp + 16], bp	; 3: 137 110 16
x47940:	add bp, 14	; 3: 131 197 14
x47943:	mov di, bp	; 2: 137 239
x47945:	add di, 8	; 3: 131 199 8
x47948:	jmp printf	; 3: 233 181 81

stdlib_test$111:	; PostCall 14

stdlib_test$112:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$113:	; ParameterInitSize

stdlib_test$114:	; Parameter 14 li 6
x47951:	mov si, bp	; 2: 137 238
x47953:	add si, 6	; 3: 131 198 6
x47956:	mov di, bp	; 2: 137 239
x47958:	add di, 20	; 3: 131 199 20
x47961:	mov al, 8	; 2: 176 8

stdlib_test$114$Loop:
x47963:	mov ah, [si]	; 2: 138 36
x47965:	mov [di], ah	; 2: 136 37
x47967:	inc si	; 1: 70
x47968:	inc di	; 1: 71
x47969:	dec al	; 2: 254 200
x47971:	cmp al, 0	; 2: 60 0
x47973:	jne stdlib_test$114$Loop	; 2: 117 244

stdlib_test$115:	; Call 14 print_ldiv 0
x47975:	mov word [bp + 14], stdlib_test$116	; 5: 199 70 14 117 187
x47980:	mov [bp + 16], bp	; 3: 137 110 16
x47983:	add bp, 14	; 3: 131 197 14
x47986:	jmp print_ldiv	; 3: 233 118 6

stdlib_test$116:	; PostCall 14

stdlib_test$117:	; GetReturnValue £temporary6086 -> £temporary6087

stdlib_test$118:	; Assign lj £temporary6086 -> £temporary6087
x47989:	mov si, bp	; 2: 137 238
x47991:	add si, 14	; 3: 131 198 14
x47994:	mov al, 8	; 2: 176 8

stdlib_test$118$Loop:
x47996:	mov ah, [bx]	; 2: 138 39
x47998:	mov [si], ah	; 2: 136 36
x48000:	inc bx	; 1: 67
x48001:	inc si	; 1: 70
x48002:	dec al	; 2: 254 200
x48004:	cmp al, 0	; 2: 60 0
x48006:	jne stdlib_test$118$Loop	; 2: 117 244

stdlib_test$119:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$120:	; Parameter 22 string_ldiv_t28102C20329203D202825li2C2025li290A0A# 6
x48008:	mov word [bp + 28], @13301$string_ldiv_t28102C20329203D202825li2C2025li290A0A#	; 5: 199 70 28 76 191

stdlib_test$121:	; Parameter 22 lj$quot 8
x48013:	mov eax, [bp + 14]	; 4: 102 139 70 14
x48017:	mov [bp + 30], eax	; 4: 102 137 70 30

stdlib_test$122:	; Parameter 22 lj$rem 12
x48021:	mov eax, [bp + 18]	; 4: 102 139 70 18
x48025:	mov [bp + 34], eax	; 4: 102 137 70 34

stdlib_test$123:	; Call 22 printf 0
x48029:	mov word [bp + 22], stdlib_test$124	; 5: 199 70 22 176 187
x48034:	mov [bp + 24], bp	; 3: 137 110 24
x48037:	add bp, 22	; 3: 131 197 22
x48040:	mov di, bp	; 2: 137 239
x48042:	add di, 8	; 3: 131 199 8
x48045:	jmp printf	; 3: 233 84 81

stdlib_test$124:	; PostCall 22

stdlib_test$125:	; Assign list[0] 3
x48048:	mov word [bp + 6], 3	; 5: 199 70 6 3 0

stdlib_test$126:	; Assign list[1] 4
x48053:	mov word [bp + 8], 4	; 5: 199 70 8 4 0

stdlib_test$127:	; Assign list[2] 2
x48058:	mov word [bp + 10], 2	; 5: 199 70 10 2 0

stdlib_test$128:	; Assign list[3] 1
x48063:	mov word [bp + 12], 1	; 5: 199 70 12 1 0

stdlib_test$129:	; Assign size 4
x48068:	mov word [bp + 14], 4	; 5: 199 70 14 4 0

stdlib_test$130:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$131:	; Parameter 18 string_0AA20List2013A20# 6
x48073:	mov word [bp + 24], @13326$string_0AA20List2013A20#	; 5: 199 70 24 105 191

stdlib_test$132:	; Call 18 printf 0
x48078:	mov word [bp + 18], stdlib_test$133	; 5: 199 70 18 222 187
x48083:	mov [bp + 20], bp	; 3: 137 110 20
x48086:	add bp, 18	; 3: 131 197 18
x48089:	mov di, bp	; 2: 137 239
x48091:	jmp printf	; 3: 233 38 81

stdlib_test$133:	; PostCall 18

stdlib_test$134:	; Assign index 0
x48094:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

stdlib_test$135:	; SignedGreaterThanEqual 146 index size
x48099:	mov ax, [bp + 14]	; 3: 139 70 14
x48102:	cmp [bp + 16], ax	; 3: 57 70 16
x48105:	jge stdlib_test$146	; 2: 125 50

stdlib_test$136:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$137:	; Parameter 18 string_25i20# 6
x48107:	mov word [bp + 24], @13334$string_25i20#	; 5: 199 70 24 117 191

stdlib_test$138:	; SignedMultiply £temporary6099 index 2
x48112:	mov ax, [bp + 16]	; 3: 139 70 16
x48115:	xor dx, dx	; 2: 49 210
x48117:	imul word [@13336$int2$2#]	; 4: 247 46 121 191

stdlib_test$139:	; BinaryAdd £temporary6100 list £temporary6099
x48121:	mov si, bp	; 2: 137 238
x48123:	add si, 6	; 3: 131 198 6
x48126:	add si, ax	; 2: 1 198

stdlib_test$140:	; Deref £temporary6101 -> £temporary6100 £temporary6100 0

stdlib_test$141:	; Parameter 18 £temporary6101 -> £temporary6100 8
x48128:	mov ax, [si]	; 2: 139 4
x48130:	mov [bp + 26], ax	; 3: 137 70 26

stdlib_test$142:	; Call 18 printf 0
x48133:	mov word [bp + 18], stdlib_test$143	; 5: 199 70 18 24 188
x48138:	mov [bp + 20], bp	; 3: 137 110 20
x48141:	add bp, 18	; 3: 131 197 18
x48144:	mov di, bp	; 2: 137 239
x48146:	add di, 2	; 3: 131 199 2
x48149:	jmp printf	; 3: 233 236 80

stdlib_test$143:	; PostCall 18

stdlib_test$144:	; Increment index
x48152:	inc word [bp + 16]	; 3: 255 70 16

stdlib_test$145:	; Goto 135
x48155:	jmp stdlib_test$135	; 2: 235 198

stdlib_test$146:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$147:	; Parameter 18 string_0AB20List2023A20# 6
x48157:	mov word [bp + 24], @13341$string_0AB20List2023A20#	; 5: 199 70 24 123 191

stdlib_test$148:	; Call 18 printf 0
x48162:	mov word [bp + 18], stdlib_test$149	; 5: 199 70 18 50 188
x48167:	mov [bp + 20], bp	; 3: 137 110 20
x48170:	add bp, 18	; 3: 131 197 18
x48173:	mov di, bp	; 2: 137 239
x48175:	jmp printf	; 3: 233 210 80

stdlib_test$149:	; PostCall 18

stdlib_test$150:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$151:	; Parameter 18 list 6
x48178:	mov [bp + 24], bp	; 3: 137 110 24
x48181:	add word [bp + 24], 6	; 4: 131 70 24 6

stdlib_test$152:	; Parameter 18 size 8
x48185:	mov ax, [bp + 14]	; 3: 139 70 14
x48188:	mov [bp + 26], ax	; 3: 137 70 26

stdlib_test$153:	; Parameter 18 2 10
x48191:	mov word [bp + 28], 2	; 5: 199 70 28 2 0

stdlib_test$154:	; Parameter 18 compare 12
x48196:	mov word [bp + 30], compare	; 5: 199 70 30 135 191

stdlib_test$155:	; Call 18 qsort 0
x48201:	mov word [bp + 18], stdlib_test$156	; 5: 199 70 18 87 188
x48206:	mov [bp + 20], bp	; 3: 137 110 20
x48209:	add bp, 18	; 3: 131 197 18
x48212:	jmp qsort	; 3: 233 237 5

stdlib_test$156:	; PostCall 18

stdlib_test$157:	; Assign index 0
x48215:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

stdlib_test$158:	; SignedGreaterThanEqual 169 index size
x48220:	mov ax, [bp + 14]	; 3: 139 70 14
x48223:	cmp [bp + 16], ax	; 3: 57 70 16
x48226:	jge stdlib_test$169	; 2: 125 50

stdlib_test$159:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$160:	; Parameter 18 string_25i20# 6
x48228:	mov word [bp + 24], @13355$string_25i20#	; 5: 199 70 24 191 191

stdlib_test$161:	; SignedMultiply £temporary6108 index 2
x48233:	mov ax, [bp + 16]	; 3: 139 70 16
x48236:	xor dx, dx	; 2: 49 210
x48238:	imul word [@13357$int2$2#]	; 4: 247 46 195 191

stdlib_test$162:	; BinaryAdd £temporary6109 list £temporary6108
x48242:	mov si, bp	; 2: 137 238
x48244:	add si, 6	; 3: 131 198 6
x48247:	add si, ax	; 2: 1 198

stdlib_test$163:	; Deref £temporary6110 -> £temporary6109 £temporary6109 0

stdlib_test$164:	; Parameter 18 £temporary6110 -> £temporary6109 8
x48249:	mov ax, [si]	; 2: 139 4
x48251:	mov [bp + 26], ax	; 3: 137 70 26

stdlib_test$165:	; Call 18 printf 0
x48254:	mov word [bp + 18], stdlib_test$166	; 5: 199 70 18 145 188
x48259:	mov [bp + 20], bp	; 3: 137 110 20
x48262:	add bp, 18	; 3: 131 197 18
x48265:	mov di, bp	; 2: 137 239
x48267:	add di, 2	; 3: 131 199 2
x48270:	jmp printf	; 3: 233 115 80

stdlib_test$166:	; PostCall 18

stdlib_test$167:	; Increment index
x48273:	inc word [bp + 16]	; 3: 255 70 16

stdlib_test$168:	; Goto 158
x48276:	jmp stdlib_test$158	; 2: 235 198

stdlib_test$169:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$170:	; Parameter 18 string_0AC20List2033A20# 6
x48278:	mov word [bp + 24], @13362$string_0AC20List2033A20#	; 5: 199 70 24 197 191

stdlib_test$171:	; Call 18 printf 0
x48283:	mov word [bp + 18], stdlib_test$172	; 5: 199 70 18 171 188
x48288:	mov [bp + 20], bp	; 3: 137 110 20
x48291:	add bp, 18	; 3: 131 197 18
x48294:	mov di, bp	; 2: 137 239
x48296:	jmp printf	; 3: 233 89 80

stdlib_test$172:	; PostCall 18

stdlib_test$173:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$174:	; Parameter 18 list 6
x48299:	mov [bp + 24], bp	; 3: 137 110 24
x48302:	add word [bp + 24], 6	; 4: 131 70 24 6

stdlib_test$175:	; Parameter 18 size 8
x48306:	mov ax, [bp + 14]	; 3: 139 70 14
x48309:	mov [bp + 26], ax	; 3: 137 70 26

stdlib_test$176:	; Parameter 18 2 10
x48312:	mov word [bp + 28], 2	; 5: 199 70 28 2 0

stdlib_test$177:	; Parameter 18 reverse_compare 12
x48317:	mov word [bp + 30], reverse_compare	; 5: 199 70 30 209 191

stdlib_test$178:	; Call 18 qsort 0
x48322:	mov word [bp + 18], stdlib_test$179	; 5: 199 70 18 208 188
x48327:	mov [bp + 20], bp	; 3: 137 110 20
x48330:	add bp, 18	; 3: 131 197 18
x48333:	jmp qsort	; 3: 233 116 5

stdlib_test$179:	; PostCall 18

stdlib_test$180:	; Assign index 0
x48336:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

stdlib_test$181:	; SignedGreaterThanEqual 192 index size
x48341:	mov ax, [bp + 14]	; 3: 139 70 14
x48344:	cmp [bp + 16], ax	; 3: 57 70 16
x48347:	jge stdlib_test$192	; 2: 125 50

stdlib_test$182:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$183:	; Parameter 18 string_25i20# 6
x48349:	mov word [bp + 24], @13376$string_25i20#	; 5: 199 70 24 9 192

stdlib_test$184:	; SignedMultiply £temporary6117 index 2
x48354:	mov ax, [bp + 16]	; 3: 139 70 16
x48357:	xor dx, dx	; 2: 49 210
x48359:	imul word [@13378$int2$2#]	; 4: 247 46 13 192

stdlib_test$185:	; BinaryAdd £temporary6118 list £temporary6117
x48363:	mov si, bp	; 2: 137 238
x48365:	add si, 6	; 3: 131 198 6
x48368:	add si, ax	; 2: 1 198

stdlib_test$186:	; Deref £temporary6119 -> £temporary6118 £temporary6118 0

stdlib_test$187:	; Parameter 18 £temporary6119 -> £temporary6118 8
x48370:	mov ax, [si]	; 2: 139 4
x48372:	mov [bp + 26], ax	; 3: 137 70 26

stdlib_test$188:	; Call 18 printf 0
x48375:	mov word [bp + 18], stdlib_test$189	; 5: 199 70 18 10 189
x48380:	mov [bp + 20], bp	; 3: 137 110 20
x48383:	add bp, 18	; 3: 131 197 18
x48386:	mov di, bp	; 2: 137 239
x48388:	add di, 2	; 3: 131 199 2
x48391:	jmp printf	; 3: 233 250 79

stdlib_test$189:	; PostCall 18

stdlib_test$190:	; Increment index
x48394:	inc word [bp + 16]	; 3: 255 70 16

stdlib_test$191:	; Goto 181
x48397:	jmp stdlib_test$181	; 2: 235 198

stdlib_test$192:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$193:	; Parameter 18 string_0AB20List2043A20# 6
x48399:	mov word [bp + 24], @13383$string_0AB20List2043A20#	; 5: 199 70 24 15 192

stdlib_test$194:	; Call 18 printf 0
x48404:	mov word [bp + 18], stdlib_test$195	; 5: 199 70 18 36 189
x48409:	mov [bp + 20], bp	; 3: 137 110 20
x48412:	add bp, 18	; 3: 131 197 18
x48415:	mov di, bp	; 2: 137 239
x48417:	jmp printf	; 3: 233 224 79

stdlib_test$195:	; PostCall 18

stdlib_test$196:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$197:	; Parameter 18 list 6
x48420:	mov [bp + 24], bp	; 3: 137 110 24
x48423:	add word [bp + 24], 6	; 4: 131 70 24 6

stdlib_test$198:	; Parameter 18 size 8
x48427:	mov ax, [bp + 14]	; 3: 139 70 14
x48430:	mov [bp + 26], ax	; 3: 137 70 26

stdlib_test$199:	; Parameter 18 2 10
x48433:	mov word [bp + 28], 2	; 5: 199 70 28 2 0

stdlib_test$200:	; Parameter 18 compare 12
x48438:	mov word [bp + 30], compare	; 5: 199 70 30 135 191

stdlib_test$201:	; Call 18 qsort 0
x48443:	mov word [bp + 18], stdlib_test$202	; 5: 199 70 18 73 189
x48448:	mov [bp + 20], bp	; 3: 137 110 20
x48451:	add bp, 18	; 3: 131 197 18
x48454:	jmp qsort	; 3: 233 251 4

stdlib_test$202:	; PostCall 18

stdlib_test$203:	; Assign index 0
x48457:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

stdlib_test$204:	; SignedGreaterThanEqual 215 index size
x48462:	mov ax, [bp + 14]	; 3: 139 70 14
x48465:	cmp [bp + 16], ax	; 3: 57 70 16
x48468:	jge stdlib_test$215	; 2: 125 50

stdlib_test$205:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$206:	; Parameter 18 string_25i20# 6
x48470:	mov word [bp + 24], @13397$string_25i20#	; 5: 199 70 24 27 192

stdlib_test$207:	; SignedMultiply £temporary6126 index 2
x48475:	mov ax, [bp + 16]	; 3: 139 70 16
x48478:	xor dx, dx	; 2: 49 210
x48480:	imul word [@13399$int2$2#]	; 4: 247 46 31 192

stdlib_test$208:	; BinaryAdd £temporary6127 list £temporary6126
x48484:	mov si, bp	; 2: 137 238
x48486:	add si, 6	; 3: 131 198 6
x48489:	add si, ax	; 2: 1 198

stdlib_test$209:	; Deref £temporary6128 -> £temporary6127 £temporary6127 0

stdlib_test$210:	; Parameter 18 £temporary6128 -> £temporary6127 8
x48491:	mov ax, [si]	; 2: 139 4
x48493:	mov [bp + 26], ax	; 3: 137 70 26

stdlib_test$211:	; Call 18 printf 0
x48496:	mov word [bp + 18], stdlib_test$212	; 5: 199 70 18 131 189
x48501:	mov [bp + 20], bp	; 3: 137 110 20
x48504:	add bp, 18	; 3: 131 197 18
x48507:	mov di, bp	; 2: 137 239
x48509:	add di, 2	; 3: 131 199 2
x48512:	jmp printf	; 3: 233 129 79

stdlib_test$212:	; PostCall 18

stdlib_test$213:	; Increment index
x48515:	inc word [bp + 16]	; 3: 255 70 16

stdlib_test$214:	; Goto 204
x48518:	jmp stdlib_test$204	; 2: 235 198

stdlib_test$215:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$216:	; Parameter 18 string_0A0ASearch3A0A# 6
x48520:	mov word [bp + 24], @13404$string_0A0ASearch3A0A#	; 5: 199 70 24 33 192

stdlib_test$217:	; Call 18 printf 0
x48525:	mov word [bp + 18], stdlib_test$218	; 5: 199 70 18 157 189
x48530:	mov [bp + 20], bp	; 3: 137 110 20
x48533:	add bp, 18	; 3: 131 197 18
x48536:	mov di, bp	; 2: 137 239
x48538:	jmp printf	; 3: 233 103 79

stdlib_test$218:	; PostCall 18

stdlib_test$219:	; Assign key 0
x48541:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

stdlib_test$220:	; SignedGreaterThanEqual 247 key 6
x48546:	cmp word [bp + 16], 6	; 4: 131 126 16 6
x48550:	jge stdlib_test$247	; 2: 125 117

stdlib_test$221:	; CallHeader 18 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$222:	; address £temporary6133 key
x48552:	mov si, bp	; 2: 137 238
x48554:	add si, 16	; 3: 131 198 16

stdlib_test$223:	; Parameter 18 £temporary6133 6
x48557:	mov [bp + 24], si	; 3: 137 118 24

stdlib_test$224:	; Parameter 18 list 8
x48560:	mov [bp + 26], bp	; 3: 137 110 26
x48563:	add word [bp + 26], 6	; 4: 131 70 26 6

stdlib_test$225:	; Parameter 18 size 10
x48567:	mov ax, [bp + 14]	; 3: 139 70 14
x48570:	mov [bp + 28], ax	; 3: 137 70 28

stdlib_test$226:	; Parameter 18 2 12
x48573:	mov word [bp + 30], 2	; 5: 199 70 30 2 0

stdlib_test$227:	; Parameter 18 compare 14
x48578:	mov word [bp + 32], compare	; 5: 199 70 32 135 191

stdlib_test$228:	; Call 18 bsearch 0
x48583:	mov word [bp + 18], stdlib_test$229	; 5: 199 70 18 213 189
x48588:	mov [bp + 20], bp	; 3: 137 110 20
x48591:	add bp, 18	; 3: 131 197 18
x48594:	jmp bsearch	; 3: 233 92 5

stdlib_test$229:	; PostCall 18

stdlib_test$230:	; GetReturnValue £temporary6135

stdlib_test$231:	; IntegralToIntegral £temporary6136 £temporary6135

stdlib_test$232:	; Assign p £temporary6136
x48597:	mov [bp + 18], bx	; 3: 137 94 18

stdlib_test$233:	; Equal 237 p 0
x48600:	cmp word [bp + 18], 0	; 4: 131 126 18 0
x48604:	je stdlib_test$237	; 2: 116 16

stdlib_test$234:	; BinarySubtract £temporary6138 p list
x48606:	mov ax, [bp + 18]	; 3: 139 70 18
x48609:	sub ax, bp	; 2: 41 232
x48611:	sub ax, 6	; 3: 131 232 6

stdlib_test$235:	; SignedDivide £temporary6143 £temporary6138 2
x48614:	xor dx, dx	; 2: 49 210
x48616:	idiv word [@13428$int2$2#]	; 4: 247 62 44 192

stdlib_test$236:	; Goto 238
x48620:	jmp stdlib_test$238	; 2: 235 3

stdlib_test$237:	; Assign £temporary6143 -1
x48622:	mov ax, -1	; 3: 184 255 255

stdlib_test$238:	; Assign index £temporary6143
x48625:	mov [bp + 20], ax	; 3: 137 70 20

stdlib_test$239:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$240:	; Parameter 22 string_20202825i2C2025i290A# 6
x48628:	mov word [bp + 28], @13439$string_20202825i2C2025i290A#	; 5: 199 70 28 46 192

stdlib_test$241:	; Parameter 22 key 8
x48633:	mov ax, [bp + 16]	; 3: 139 70 16
x48636:	mov [bp + 30], ax	; 3: 137 70 30

stdlib_test$242:	; Parameter 22 index 10
x48639:	mov ax, [bp + 20]	; 3: 139 70 20
x48642:	mov [bp + 32], ax	; 3: 137 70 32

stdlib_test$243:	; Call 22 printf 0
x48645:	mov word [bp + 22], stdlib_test$244	; 5: 199 70 22 24 190
x48650:	mov [bp + 24], bp	; 3: 137 110 24
x48653:	add bp, 22	; 3: 131 197 22
x48656:	mov di, bp	; 2: 137 239
x48658:	add di, 4	; 3: 131 199 4
x48661:	jmp printf	; 3: 233 236 78

stdlib_test$244:	; PostCall 22

stdlib_test$245:	; Increment key
x48664:	inc word [bp + 16]	; 3: 255 70 16

stdlib_test$246:	; Goto 220
x48667:	jmp stdlib_test$220	; 2: 235 133

stdlib_test$247:	; CallHeader 16 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

stdlib_test$248:	; Parameter 16 string_0A# 6
x48669:	mov word [bp + 22], @13441$string_0A#	; 5: 199 70 22 58 192

stdlib_test$249:	; Call 16 printf 0
x48674:	mov word [bp + 16], stdlib_test$250	; 5: 199 70 16 50 190
x48679:	mov [bp + 18], bp	; 3: 137 110 18
x48682:	add bp, 16	; 3: 131 197 16
x48685:	mov di, bp	; 2: 137 239
x48687:	jmp printf	; 3: 233 210 78

stdlib_test$250:	; PostCall 16

stdlib_test$251:	; Return 0
x48690:	mov ax, [bp]	; 3: 139 70 0
x48693:	mov di, [bp + 4]	; 3: 139 126 4
x48696:	mov bp, [bp + 2]	; 3: 139 110 2
x48699:	jmp ax	; 2: 255 224

stdlib_test$252:	; FunctionEnd stdlib_test

@13228$string_atof28221232E4562229203D2025f0A#:
x48701:	db "atof(", 34, "123.456", 34, ") = %f", 10, 0	; 22: 97 116 111 102 40 34 49 50 51 46 52 53 54 34 41 32 61 32 37 102 10 0

@13229$string_1232E456#:
x48723:	db "123.456", 0	; 8: 49 50 51 46 52 53 54 0

@13232$string_strtod28221232E456789abc222C2026p29203D202825f2C2025s290A#:
x48731:	db "strtod(", 34, "123.456789abc", 34, ", &p) = (%f, %s)", 10, 0	; 40: 115 116 114 116 111 100 40 34 49 50 51 46 52 53 54 55 56 57 97 98 99 34 44 32 38 112 41 32 61 32 40 37 102 44 32 37 115 41 10 0

@13233$string_1232E456789abc#:
x48771:	db "123.456789abc", 0	; 14: 49 50 51 46 52 53 54 55 56 57 97 98 99 0

@13237$string_0Agetenv2822path2229203D2025s0A#:
x48785:	db 10, "getenv(", 34, "path", 34, ") = %s", 10, 0	; 22: 10 103 101 116 101 110 118 40 34 112 97 116 104 34 41 32 61 32 37 115 10 0

@13238$string_path#:
x48807:	db "path", 0	; 5: 112 97 116 104 0

@13241$string_system2822dir22290A#:
x48812:	db "system(", 34, "dir", 34, ")", 10, 0	; 15: 115 121 115 116 101 109 40 34 100 105 114 34 41 10 0

@13243$string_dir#:
x48827:	db "dir", 0	; 4: 100 105 114 0

@13245$string_0Aabs282D329203D2025i2C20abs28329203D2025i0A#:
x48831:	db 10, "abs(-3) = %i, abs(3) = %i", 10, 0	; 28: 10 97 98 115 40 45 51 41 32 61 32 37 105 44 32 97 98 115 40 51 41 32 61 32 37 105 10 0

@13255$string_labs282D3l29203D2025li2C20labs283l29203D2025li0A0A#:
x48859:	db "labs(-3l) = %li, labs(3l) = %li", 10, 10, 0	; 34: 108 97 98 115 40 45 51 108 41 32 61 32 37 108 105 44 32 108 97 98 115 40 51 108 41 32 61 32 37 108 105 10 10 0

@13274$string_div_t28102C20329203D202825i2C2025i290A#:
x48893:	db "div_t(10, 3) = (%i, %i)", 10, 0	; 25: 100 105 118 95 116 40 49 48 44 32 51 41 32 61 32 40 37 105 44 32 37 105 41 10 0

@13281$string_div_t28102C20329203D202825i2C2025i290A0A#:
x48918:	db "div_t(10, 3) = (%i, %i)", 10, 10, 0	; 26: 100 105 118 95 116 40 49 48 44 32 51 41 32 61 32 40 37 105 44 32 37 105 41 10 10 0

@13294$string_ldiv_t28102C20329203D202825li2C2025li290A#:
x48944:	db "ldiv_t(10, 3) = (%li, %li)", 10, 0	; 28: 108 100 105 118 95 116 40 49 48 44 32 51 41 32 61 32 40 37 108 105 44 32 37 108 105 41 10 0

@13301$string_ldiv_t28102C20329203D202825li2C2025li290A0A#:
x48972:	db "ldiv_t(10, 3) = (%li, %li)", 10, 10, 0	; 29: 108 100 105 118 95 116 40 49 48 44 32 51 41 32 61 32 40 37 108 105 44 32 37 108 105 41 10 10 0

@13326$string_0AA20List2013A20#:
x49001:	db 10, "A List 1: ", 0	; 12: 10 65 32 76 105 115 116 32 49 58 32 0

@13334$string_25i20#:
x49013:	db "%i ", 0	; 4: 37 105 32 0

@13336$int2$2#:
x49017:	dw 2	; 2: 2 0

@13341$string_0AB20List2023A20#:
x49019:	db 10, "B List 2: ", 0	; 12: 10 66 32 76 105 115 116 32 50 58 32 0

compare:	; IntegralToIntegral £temporary5983 valuePtr1
x49031:	mov si, [bp + 6]	; 3: 139 118 6

compare$1:	; Deref £temporary5984 -> £temporary5983 £temporary5983 0

compare$2:	; Assign intValue1 £temporary5984 -> £temporary5983
x49034:	mov ax, [si]	; 2: 139 4
x49036:	mov [bp + 10], ax	; 3: 137 70 10

compare$3:	; IntegralToIntegral £temporary5985 valuePtr2
x49039:	mov si, [bp + 8]	; 3: 139 118 8

compare$4:	; Deref £temporary5986 -> £temporary5985 £temporary5985 0

compare$5:	; Assign intValue2 £temporary5986 -> £temporary5985
x49042:	mov ax, [si]	; 2: 139 4
x49044:	mov [bp + 12], ax	; 3: 137 70 12

compare$6:	; SignedGreaterThanEqual 9 intValue1 intValue2
x49047:	mov ax, [bp + 12]	; 3: 139 70 12
x49050:	cmp [bp + 10], ax	; 3: 57 70 10
x49053:	jge compare$9	; 2: 125 5

compare$7:	; Assign £temporary5996 -1
x49055:	mov bx, -1	; 3: 187 255 255

compare$8:	; Goto 14
x49058:	jmp compare$14	; 2: 235 16

compare$9:	; NotEqual 12 intValue1 intValue2
x49060:	mov ax, [bp + 12]	; 3: 139 70 12
x49063:	cmp [bp + 10], ax	; 3: 57 70 10
x49066:	jne compare$12	; 2: 117 5

compare$10:	; Assign £temporary5992 0
x49068:	mov bx, 0	; 3: 187 0 0

compare$11:	; Goto 13
x49071:	jmp compare$13	; 2: 235 3

compare$12:	; Assign £temporary5992 1
x49073:	mov bx, 1	; 3: 187 1 0

compare$13:	; Assign £temporary5996 £temporary5992

compare$14:	; SetReturnValue £temporary5996

compare$15:	; Return £temporary5996
x49076:	mov ax, [bp]	; 3: 139 70 0
x49079:	mov di, [bp + 4]	; 3: 139 126 4
x49082:	mov bp, [bp + 2]	; 3: 139 110 2
x49085:	jmp ax	; 2: 255 224

compare$16:	; FunctionEnd compare

@13355$string_25i20#:
x49087:	db "%i ", 0	; 4: 37 105 32 0

@13357$int2$2#:
x49091:	dw 2	; 2: 2 0

@13362$string_0AC20List2033A20#:
x49093:	db 10, "C List 3: ", 0	; 12: 10 67 32 76 105 115 116 32 51 58 32 0

reverse_compare:	; IntegralToIntegral £temporary5997 valuePtr1
x49105:	mov si, [bp + 6]	; 3: 139 118 6

reverse_compare$1:	; Deref £temporary5998 -> £temporary5997 £temporary5997 0

reverse_compare$2:	; Assign intValue1 £temporary5998 -> £temporary5997
x49108:	mov ax, [si]	; 2: 139 4
x49110:	mov [bp + 10], ax	; 3: 137 70 10

reverse_compare$3:	; IntegralToIntegral £temporary5999 valuePtr2
x49113:	mov si, [bp + 8]	; 3: 139 118 8

reverse_compare$4:	; Deref £temporary6000 -> £temporary5999 £temporary5999 0

reverse_compare$5:	; Assign intValue2 £temporary6000 -> £temporary5999
x49116:	mov ax, [si]	; 2: 139 4
x49118:	mov [bp + 12], ax	; 3: 137 70 12

reverse_compare$6:	; SignedGreaterThanEqual 9 intValue1 intValue2
x49121:	mov ax, [bp + 12]	; 3: 139 70 12
x49124:	cmp [bp + 10], ax	; 3: 57 70 10
x49127:	jge reverse_compare$9	; 2: 125 5

reverse_compare$7:	; Assign £temporary6010 1
x49129:	mov bx, 1	; 3: 187 1 0

reverse_compare$8:	; Goto 14
x49132:	jmp reverse_compare$14	; 2: 235 16

reverse_compare$9:	; NotEqual 12 intValue1 intValue2
x49134:	mov ax, [bp + 12]	; 3: 139 70 12
x49137:	cmp [bp + 10], ax	; 3: 57 70 10
x49140:	jne reverse_compare$12	; 2: 117 5

reverse_compare$10:	; Assign £temporary6006 0
x49142:	mov bx, 0	; 3: 187 0 0

reverse_compare$11:	; Goto 13
x49145:	jmp reverse_compare$13	; 2: 235 3

reverse_compare$12:	; Assign £temporary6006 -1
x49147:	mov bx, -1	; 3: 187 255 255

reverse_compare$13:	; Assign £temporary6010 £temporary6006

reverse_compare$14:	; SetReturnValue £temporary6010

reverse_compare$15:	; Return £temporary6010
x49150:	mov ax, [bp]	; 3: 139 70 0
x49153:	mov di, [bp + 4]	; 3: 139 126 4
x49156:	mov bp, [bp + 2]	; 3: 139 110 2
x49159:	jmp ax	; 2: 255 224

reverse_compare$16:	; FunctionEnd reverse_compare

@13376$string_25i20#:
x49161:	db "%i ", 0	; 4: 37 105 32 0

@13378$int2$2#:
x49165:	dw 2	; 2: 2 0

@13383$string_0AB20List2043A20#:
x49167:	db 10, "B List 4: ", 0	; 12: 10 66 32 76 105 115 116 32 52 58 32 0

@13397$string_25i20#:
x49179:	db "%i ", 0	; 4: 37 105 32 0

@13399$int2$2#:
x49183:	dw 2	; 2: 2 0

@13404$string_0A0ASearch3A0A#:
x49185:	db 10, 10, "Search:", 10, 0	; 11: 10 10 83 101 97 114 99 104 58 10 0

@13428$int2$2#:
x49196:	dw 2	; 2: 2 0

@13439$string_20202825i2C2025i290A#:
x49198:	db "  (%i, %i)", 10, 0	; 12: 32 32 40 37 105 44 32 37 105 41 10 0

@13441$string_0A#:
x49210:	db 10, 0	; 2: 10 0

atof:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

atof$1:	; Parameter 8 s 6
x49212:	mov ax, [bp + 6]	; 3: 139 70 6
x49215:	mov [bp + 14], ax	; 3: 137 70 14

atof$2:	; Parameter 8 0 8
x49218:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

atof$3:	; Call 8 strtod 0
x49223:	mov word [bp + 8], atof$4	; 5: 199 70 8 85 192
x49228:	mov [bp + 10], bp	; 3: 137 110 10
x49231:	add bp, 8	; 3: 131 197 8
x49234:	nop	; 1: 144
x49235:	jmp strtod	; 2: 235 11

atof$4:	; PostCall 8

atof$5:	; GetReturnValue £temporary2256

atof$6:	; SetReturnValue £temporary2256

atof$7:	; Return £temporary2256
x49237:	mov ax, [bp]	; 3: 139 70 0
x49240:	mov di, [bp + 4]	; 3: 139 126 4
x49243:	mov bp, [bp + 2]	; 3: 139 110 2
x49246:	jmp ax	; 2: 255 224

atof$8:	; FunctionEnd atof

strtod:	; Assign chars 0
x49248:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

strtod$1:	; PushZero
x49253:	fldz	; 2: 217 238

strtod$2:	; PopFloat value
x49255:	fstp qword [bp + 12]	; 3: 221 94 12

strtod$3:	; CallHeader 20 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtod$4:	; Parameter 20 s 6
x49258:	mov ax, [bp + 6]	; 3: 139 70 6
x49261:	mov [bp + 26], ax	; 3: 137 70 26

strtod$5:	; Parameter 20 string_25lf25n# 8
x49264:	mov word [bp + 28], @5142$string_25lf25n#	; 5: 199 70 28 183 192

strtod$6:	; address £temporary2259 value
x49269:	mov si, bp	; 2: 137 238
x49271:	add si, 12	; 3: 131 198 12

strtod$7:	; Parameter 20 £temporary2259 10
x49274:	mov [bp + 30], si	; 3: 137 118 30

strtod$8:	; address £temporary2260 chars
x49277:	mov si, bp	; 2: 137 238
x49279:	add si, 10	; 3: 131 198 10

strtod$9:	; Parameter 20 £temporary2260 12
x49282:	mov [bp + 32], si	; 3: 137 118 32

strtod$10:	; Call 20 sscanf 0
x49285:	mov word [bp + 20], strtod$11	; 5: 199 70 20 152 192
x49290:	mov [bp + 22], bp	; 3: 137 110 22
x49293:	add bp, 20	; 3: 131 197 20
x49296:	mov di, bp	; 2: 137 239
x49298:	add di, 4	; 3: 131 199 4
x49301:	jmp sscanf	; 3: 233 58 234

strtod$11:	; PostCall 20

strtod$12:	; Equal 15 endp 0
x49304:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x49308:	je strtod$15	; 2: 116 11

strtod$13:	; Deref £temporary2263 -> endp endp 0
x49310:	mov si, [bp + 8]	; 3: 139 118 8

strtod$14:	; BinaryAdd £temporary2263 -> endp s chars
x49313:	mov ax, [bp + 6]	; 3: 139 70 6
x49316:	add ax, [bp + 10]	; 3: 3 70 10
x49319:	mov [si], ax	; 2: 137 4

strtod$15:	; PushFloat value
x49321:	fld qword [bp + 12]	; 3: 221 70 12

strtod$16:	; SetReturnValue value

strtod$17:	; Return value
x49324:	mov ax, [bp]	; 3: 139 70 0
x49327:	mov di, [bp + 4]	; 3: 139 126 4
x49330:	mov bp, [bp + 2]	; 3: 139 110 2
x49333:	jmp ax	; 2: 255 224

strtod$18:	; FunctionEnd strtod

@5142$string_25lf25n#:
x49335:	db "%lf%n", 0	; 6: 37 108 102 37 110 0

getenv:	; SetReturnValue 0
x49341:	mov bx, 0	; 3: 187 0 0

getenv$1:	; Return 0
x49344:	mov ax, [bp]	; 3: 139 70 0
x49347:	mov di, [bp + 4]	; 3: 139 126 4
x49350:	mov bp, [bp + 2]	; 3: 139 110 2
x49353:	jmp ax	; 2: 255 224

getenv$2:	; FunctionEnd getenv

system:	; SetReturnValue -1
x49355:	mov bx, -1	; 3: 187 255 255

system$1:	; Return -1
x49358:	mov ax, [bp]	; 3: 139 70 0
x49361:	mov di, [bp + 4]	; 3: 139 126 4
x49364:	mov bp, [bp + 2]	; 3: 139 110 2
x49367:	jmp ax	; 2: 255 224

system$2:	; FunctionEnd system

_abs:	; SignedGreaterThanEqual 4 value 0
x49369:	cmp word [bp + 6], 0	; 4: 131 126 6 0
x49373:	jge _abs$4	; 2: 125 7

_abs$1:	; UnarySubtract £temporary3209 value
x49375:	mov bx, [bp + 6]	; 3: 139 94 6
x49378:	neg bx	; 2: 247 219

_abs$2:	; Assign £temporary3213 £temporary3209

_abs$3:	; Goto 5
x49380:	jmp _abs$5	; 2: 235 3

_abs$4:	; Assign £temporary3213 value
x49382:	mov bx, [bp + 6]	; 3: 139 94 6

_abs$5:	; SetReturnValue £temporary3213

_abs$6:	; Return £temporary3213
x49385:	mov ax, [bp]	; 3: 139 70 0
x49388:	mov di, [bp + 4]	; 3: 139 126 4
x49391:	mov bp, [bp + 2]	; 3: 139 110 2
x49394:	jmp ax	; 2: 255 224

_abs$7:	; FunctionEnd _abs

div:	; Assign result$quot 0
x49396:	mov word [bp + 10], 0	; 5: 199 70 10 0 0

div$1:	; Assign result$rem 0
x49401:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

div$2:	; NotEqual 6 denum 0
x49406:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x49410:	jne div$6	; 2: 117 22

div$3:	; Assign errno 6
x49412:	mov word [errno], 6	; 6: 199 6 230 10 6 0

div$4:	; SetReturnValue result
x49418:	mov bx, bp	; 2: 137 235
x49420:	add bx, 10	; 3: 131 195 10

div$5:	; Return result
x49423:	mov ax, [bp]	; 3: 139 70 0
x49426:	mov di, [bp + 4]	; 3: 139 126 4
x49429:	mov bp, [bp + 2]	; 3: 139 110 2
x49432:	jmp ax	; 2: 255 224

div$6:	; SignedDivide result$quot num denum
x49434:	mov ax, [bp + 6]	; 3: 139 70 6
x49437:	xor dx, dx	; 2: 49 210
x49439:	idiv word [bp + 8]	; 3: 247 126 8
x49442:	mov [bp + 10], ax	; 3: 137 70 10

div$7:	; SignedModulo result$rem num denum
x49445:	mov ax, [bp + 6]	; 3: 139 70 6
x49448:	xor dx, dx	; 2: 49 210
x49450:	idiv word [bp + 8]	; 3: 247 126 8
x49453:	mov [bp + 12], dx	; 3: 137 86 12

div$8:	; SetReturnValue result
x49456:	mov bx, bp	; 2: 137 235
x49458:	add bx, 10	; 3: 131 195 10

div$9:	; Return result
x49461:	mov ax, [bp]	; 3: 139 70 0
x49464:	mov di, [bp + 4]	; 3: 139 126 4
x49467:	mov bp, [bp + 2]	; 3: 139 110 2
x49470:	jmp ax	; 2: 255 224

div$10:	; FunctionEnd div

print_div:	; CallHeader 10 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_div$1:	; Parameter 10 string_div_t20quot2025i20rem2025i0A# 6
x49472:	mov word [bp + 16], @13157$string_div_t20quot2025i20rem2025i0A#	; 5: 199 70 16 122 193

print_div$2:	; Parameter 10 d$quot 8
x49477:	mov ax, [bp + 6]	; 3: 139 70 6
x49480:	mov [bp + 18], ax	; 3: 137 70 18

print_div$3:	; Parameter 10 d$rem 10
x49483:	mov ax, [bp + 8]	; 3: 139 70 8
x49486:	mov [bp + 20], ax	; 3: 137 70 20

print_div$4:	; Call 10 printf 0
x49489:	mov word [bp + 10], print_div$5	; 5: 199 70 10 100 193
x49494:	mov [bp + 12], bp	; 3: 137 110 12
x49497:	add bp, 10	; 3: 131 197 10
x49500:	mov di, bp	; 2: 137 239
x49502:	add di, 4	; 3: 131 199 4
x49505:	jmp printf	; 3: 233 160 75

print_div$5:	; PostCall 10

print_div$6:	; Increment d$quot
x49508:	inc word [bp + 6]	; 3: 255 70 6

print_div$7:	; Increment d$rem
x49511:	inc word [bp + 8]	; 3: 255 70 8

print_div$8:	; SetReturnValue d
x49514:	mov bx, bp	; 2: 137 235
x49516:	add bx, 6	; 3: 131 195 6

print_div$9:	; Return d
x49519:	mov ax, [bp]	; 3: 139 70 0
x49522:	mov di, [bp + 4]	; 3: 139 126 4
x49525:	mov bp, [bp + 2]	; 3: 139 110 2
x49528:	jmp ax	; 2: 255 224

print_div$10:	; FunctionEnd print_div

@13157$string_div_t20quot2025i20rem2025i0A#:
x49530:	db "div_t quot %i rem %i", 10, 0	; 22: 100 105 118 95 116 32 113 117 111 116 32 37 105 32 114 101 109 32 37 105 10 0

ldiv:	; Assign result$quot 0
x49552:	mov dword [bp + 14], 0	; 8: 102 199 70 14 0 0 0 0

ldiv$1:	; Assign result$rem 0
x49560:	mov dword [bp + 18], 0	; 8: 102 199 70 18 0 0 0 0

ldiv$2:	; NotEqual 6 denum 0
x49568:	cmp dword [bp + 10], 0	; 5: 102 131 126 10 0
x49573:	jne ldiv$6	; 2: 117 22

ldiv$3:	; Assign errno 6
x49575:	mov word [errno], 6	; 6: 199 6 230 10 6 0

ldiv$4:	; SetReturnValue result
x49581:	mov bx, bp	; 2: 137 235
x49583:	add bx, 14	; 3: 131 195 14

ldiv$5:	; Return result
x49586:	mov ax, [bp]	; 3: 139 70 0
x49589:	mov di, [bp + 4]	; 3: 139 126 4
x49592:	mov bp, [bp + 2]	; 3: 139 110 2
x49595:	jmp ax	; 2: 255 224

ldiv$6:	; SignedDivide result$quot num denum
x49597:	mov eax, [bp + 6]	; 4: 102 139 70 6
x49601:	xor edx, edx	; 3: 102 49 210
x49604:	idiv dword [bp + 10]	; 4: 102 247 126 10
x49608:	mov [bp + 14], eax	; 4: 102 137 70 14

ldiv$7:	; SignedModulo result$rem num denum
x49612:	mov eax, [bp + 6]	; 4: 102 139 70 6
x49616:	xor edx, edx	; 3: 102 49 210
x49619:	idiv dword [bp + 10]	; 4: 102 247 126 10
x49623:	mov [bp + 18], edx	; 4: 102 137 86 18

ldiv$8:	; SetReturnValue result
x49627:	mov bx, bp	; 2: 137 235
x49629:	add bx, 14	; 3: 131 195 14

ldiv$9:	; Return result
x49632:	mov ax, [bp]	; 3: 139 70 0
x49635:	mov di, [bp + 4]	; 3: 139 126 4
x49638:	mov bp, [bp + 2]	; 3: 139 110 2
x49641:	jmp ax	; 2: 255 224

ldiv$10:	; FunctionEnd ldiv

print_ldiv:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

print_ldiv$1:	; Parameter 14 string_ldiv_t20quot2025li20rem2025li0A# 6
x49643:	mov word [bp + 20], @13175$string_ldiv_t20quot2025li20rem2025li0A#	; 5: 199 70 20 43 194

print_ldiv$2:	; Parameter 14 ld$quot 8
x49648:	mov eax, [bp + 6]	; 4: 102 139 70 6
x49652:	mov [bp + 22], eax	; 4: 102 137 70 22

print_ldiv$3:	; Parameter 14 ld$rem 12
x49656:	mov eax, [bp + 10]	; 4: 102 139 70 10
x49660:	mov [bp + 26], eax	; 4: 102 137 70 26

print_ldiv$4:	; Call 14 printf 0
x49664:	mov word [bp + 14], print_ldiv$5	; 5: 199 70 14 19 194
x49669:	mov [bp + 16], bp	; 3: 137 110 16
x49672:	add bp, 14	; 3: 131 197 14
x49675:	mov di, bp	; 2: 137 239
x49677:	add di, 8	; 3: 131 199 8
x49680:	jmp printf	; 3: 233 241 74

print_ldiv$5:	; PostCall 14

print_ldiv$6:	; Decrement ld$quot
x49683:	dec dword [bp + 6]	; 4: 102 255 78 6

print_ldiv$7:	; Decrement ld$rem
x49687:	dec dword [bp + 10]	; 4: 102 255 78 10

print_ldiv$8:	; SetReturnValue ld
x49691:	mov bx, bp	; 2: 137 235
x49693:	add bx, 6	; 3: 131 195 6

print_ldiv$9:	; Return ld
x49696:	mov ax, [bp]	; 3: 139 70 0
x49699:	mov di, [bp + 4]	; 3: 139 126 4
x49702:	mov bp, [bp + 2]	; 3: 139 110 2
x49705:	jmp ax	; 2: 255 224

print_ldiv$10:	; FunctionEnd print_ldiv

@13175$string_ldiv_t20quot2025li20rem2025li0A#:
x49707:	db "ldiv_t quot %li rem %li", 10, 0	; 25: 108 100 105 118 95 116 32 113 117 111 116 32 37 108 105 32 114 101 109 32 37 108 105 10 0

qsort:	; IntegralToIntegral £temporary3187 valueList
x49732:	mov ax, [bp + 6]	; 3: 139 70 6

qsort$1:	; Assign charList £temporary3187
x49735:	mov [bp + 14], ax	; 3: 137 70 14

qsort$2:	; BinarySubtract size listSize 1
x49738:	mov ax, [bp + 8]	; 3: 139 70 8
x49741:	dec ax	; 1: 72
x49742:	mov [bp + 16], ax	; 3: 137 70 16

qsort$3:	; SignedLessThanEqual 31 size 0
x49745:	cmp word [bp + 16], 0	; 4: 131 126 16 0
x49749:	jle qsort$31	; 4: 15 142 138 0

qsort$4:	; Assign update 0
x49753:	mov word [bp + 20], 0	; 5: 199 70 20 0 0

qsort$5:	; Assign index 0
x49758:	mov word [bp + 18], 0	; 5: 199 70 18 0 0

qsort$6:	; SignedGreaterThanEqual 28 index size
x49763:	mov ax, [bp + 16]	; 3: 139 70 16
x49766:	cmp [bp + 18], ax	; 3: 57 70 18
x49769:	jge qsort$28	; 2: 125 108

qsort$7:	; SignedMultiply £temporary3193 index valueSize
x49771:	mov ax, [bp + 18]	; 3: 139 70 18
x49774:	xor dx, dx	; 2: 49 210
x49776:	imul word [bp + 10]	; 3: 247 110 10

qsort$8:	; BinaryAdd valuePtr1 charList £temporary3193
x49779:	mov bx, [bp + 14]	; 3: 139 94 14
x49782:	add bx, ax	; 2: 1 195
x49784:	mov [bp + 22], bx	; 3: 137 94 22

qsort$9:	; BinaryAdd £temporary3195 index 1
x49787:	mov ax, [bp + 18]	; 3: 139 70 18
x49790:	inc ax	; 1: 64

qsort$10:	; SignedMultiply £temporary3196 £temporary3195 valueSize
x49791:	xor dx, dx	; 2: 49 210
x49793:	imul word [bp + 10]	; 3: 247 110 10

qsort$11:	; BinaryAdd valuePtr2 charList £temporary3196
x49796:	mov bx, [bp + 14]	; 3: 139 94 14
x49799:	add bx, ax	; 2: 1 195
x49801:	mov [bp + 24], bx	; 3: 137 94 24

qsort$12:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

qsort$13:	; Parameter 26 valuePtr1 6
x49804:	mov ax, [bp + 22]	; 3: 139 70 22
x49807:	mov [bp + 32], ax	; 3: 137 70 32

qsort$14:	; Parameter 26 valuePtr2 8
x49810:	mov ax, [bp + 24]	; 3: 139 70 24
x49813:	mov [bp + 34], ax	; 3: 137 70 34

qsort$15:	; Call 26 compare 0
x49816:	mov word [bp + 26], qsort$16	; 5: 199 70 26 168 194
x49821:	mov [bp + 28], bp	; 3: 137 110 28
x49824:	mov ax, [bp + 12]	; 3: 139 70 12
x49827:	add bp, 26	; 3: 131 197 26
x49830:	jmp ax	; 2: 255 224

qsort$16:	; PostCall 26

qsort$17:	; GetReturnValue £temporary3198

qsort$18:	; SignedLessThanEqual 26 £temporary3198 0
x49832:	cmp bx, 0	; 3: 131 251 0
x49835:	jle qsort$26	; 2: 126 37

qsort$19:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

qsort$20:	; Parameter 26 valuePtr1 6
x49837:	mov ax, [bp + 22]	; 3: 139 70 22
x49840:	mov [bp + 32], ax	; 3: 137 70 32

qsort$21:	; Parameter 26 valuePtr2 8
x49843:	mov ax, [bp + 24]	; 3: 139 70 24
x49846:	mov [bp + 34], ax	; 3: 137 70 34

qsort$22:	; Parameter 26 valueSize 10
x49849:	mov ax, [bp + 10]	; 3: 139 70 10
x49852:	mov [bp + 36], ax	; 3: 137 70 36

qsort$23:	; Call 26 memswap 0
x49855:	mov word [bp + 26], qsort$24	; 5: 199 70 26 205 194
x49860:	mov [bp + 28], bp	; 3: 137 110 28
x49863:	add bp, 26	; 3: 131 197 26
x49866:	nop	; 1: 144
x49867:	jmp @7290$memswap	; 2: 235 33

qsort$24:	; PostCall 26

qsort$25:	; Assign update 1
x49869:	mov word [bp + 20], 1	; 5: 199 70 20 1 0

qsort$26:	; Increment index
x49874:	inc word [bp + 18]	; 3: 255 70 18

qsort$27:	; Goto 6
x49877:	jmp qsort$6	; 2: 235 140

qsort$28:	; Equal 31 update 0
x49879:	cmp word [bp + 20], 0	; 4: 131 126 20 0
x49883:	je qsort$31	; 2: 116 6

qsort$29:	; Decrement size
x49885:	dec word [bp + 16]	; 3: 255 78 16

qsort$30:	; Goto 3
x49888:	jmp qsort$3	; 3: 233 110 255

qsort$31:	; Return 0
x49891:	mov ax, [bp]	; 3: 139 70 0
x49894:	mov di, [bp + 4]	; 3: 139 126 4
x49897:	mov bp, [bp + 2]	; 3: 139 110 2
x49900:	jmp ax	; 2: 255 224

qsort$32:	; FunctionEnd qsort

@7290$memswap:	; Assign index 0
x49902:	mov word [bp + 12], 0	; 5: 199 70 12 0 0

@7290$memswap$1:	; SignedGreaterThanEqual 15 index valueSize
x49907:	mov ax, [bp + 10]	; 3: 139 70 10
x49910:	cmp [bp + 12], ax	; 3: 57 70 12
x49913:	jge @7290$memswap$15	; 2: 125 43

@7290$memswap$2:	; BinaryAdd £temporary3180 value1 index
x49915:	mov si, [bp + 6]	; 3: 139 118 6
x49918:	add si, [bp + 12]	; 3: 3 118 12

@7290$memswap$3:	; Deref £temporary3179 -> £temporary3180 £temporary3180 0

@7290$memswap$4:	; Assign tempValue £temporary3179 -> £temporary3180
x49921:	mov al, [si]	; 2: 138 4
x49923:	mov [bp + 14], al	; 3: 136 70 14

@7290$memswap$5:	; BinaryAdd £temporary3182 value1 index
x49926:	mov si, [bp + 6]	; 3: 139 118 6
x49929:	add si, [bp + 12]	; 3: 3 118 12

@7290$memswap$6:	; Deref £temporary3181 -> £temporary3182 £temporary3182 0

@7290$memswap$7:	; BinaryAdd £temporary3184 value2 index
x49932:	mov di, [bp + 8]	; 3: 139 126 8
x49935:	add di, [bp + 12]	; 3: 3 126 12

@7290$memswap$8:	; Deref £temporary3183 -> £temporary3184 £temporary3184 0

@7290$memswap$9:	; Assign £temporary3181 -> £temporary3182 £temporary3183 -> £temporary3184
x49938:	mov al, [di]	; 2: 138 5
x49940:	mov [si], al	; 2: 136 4

@7290$memswap$10:	; BinaryAdd £temporary3186 value2 index
x49942:	mov si, [bp + 8]	; 3: 139 118 8
x49945:	add si, [bp + 12]	; 3: 3 118 12

@7290$memswap$11:	; Deref £temporary3185 -> £temporary3186 £temporary3186 0

@7290$memswap$12:	; Assign £temporary3185 -> £temporary3186 tempValue
x49948:	mov al, [bp + 14]	; 3: 138 70 14
x49951:	mov [si], al	; 2: 136 4

@7290$memswap$13:	; Increment index
x49953:	inc word [bp + 12]	; 3: 255 70 12

@7290$memswap$14:	; Goto 1
x49956:	jmp @7290$memswap$1	; 2: 235 205

@7290$memswap$15:	; Return 0
x49958:	mov ax, [bp]	; 3: 139 70 0
x49961:	mov di, [bp + 4]	; 3: 139 126 4
x49964:	mov bp, [bp + 2]	; 3: 139 110 2
x49967:	jmp ax	; 2: 255 224

@7290$memswap$16:	; FunctionEnd memswap

bsearch:	; Assign firstIndex 0
x49969:	mov word [bp + 16], 0	; 5: 199 70 16 0 0

bsearch$1:	; BinarySubtract lastIndex listSize 1
x49974:	mov ax, [bp + 10]	; 3: 139 70 10
x49977:	dec ax	; 1: 72
x49978:	mov [bp + 18], ax	; 3: 137 70 18

bsearch$2:	; NotEqual 5 listSize 0
x49981:	cmp word [bp + 10], 0	; 4: 131 126 10 0
x49985:	jne bsearch$5	; 2: 117 14

bsearch$3:	; SetReturnValue 0
x49987:	mov bx, 0	; 3: 187 0 0

bsearch$4:	; Return 0
x49990:	mov ax, [bp]	; 3: 139 70 0
x49993:	mov di, [bp + 4]	; 3: 139 126 4
x49996:	mov bp, [bp + 2]	; 3: 139 110 2
x49999:	jmp ax	; 2: 255 224

bsearch$5:	; IntegralToIntegral £temporary3123 valueList
x50001:	mov bx, [bp + 8]	; 3: 139 94 8

bsearch$6:	; SignedMultiply £temporary3124 firstIndex valueSize
x50004:	mov ax, [bp + 16]	; 3: 139 70 16
x50007:	xor dx, dx	; 2: 49 210
x50009:	imul word [bp + 12]	; 3: 247 110 12

bsearch$7:	; BinaryAdd firstValuePtr £temporary3123 £temporary3124
x50012:	add bx, ax	; 2: 1 195
x50014:	mov [bp + 20], bx	; 3: 137 94 20

bsearch$8:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

bsearch$9:	; Parameter 22 keyPtr 6
x50017:	mov ax, [bp + 6]	; 3: 139 70 6
x50020:	mov [bp + 28], ax	; 3: 137 70 28

bsearch$10:	; Parameter 22 firstValuePtr 8
x50023:	mov ax, [bp + 20]	; 3: 139 70 20
x50026:	mov [bp + 30], ax	; 3: 137 70 30

bsearch$11:	; Call 22 compare 0
x50029:	mov word [bp + 22], bsearch$12	; 5: 199 70 22 125 195
x50034:	mov [bp + 24], bp	; 3: 137 110 24
x50037:	mov ax, [bp + 14]	; 3: 139 70 14
x50040:	add bp, 22	; 3: 131 197 22
x50043:	jmp ax	; 2: 255 224

bsearch$12:	; PostCall 22

bsearch$13:	; GetReturnValue £temporary3126

bsearch$14:	; Assign firstCompare £temporary3126
x50045:	mov [bp + 22], bx	; 3: 137 94 22

bsearch$15:	; SignedGreaterThanEqual 18 firstCompare 0
x50048:	cmp word [bp + 22], 0	; 4: 131 126 22 0
x50052:	jge bsearch$18	; 2: 125 14

bsearch$16:	; SetReturnValue 0
x50054:	mov bx, 0	; 3: 187 0 0

bsearch$17:	; Return 0
x50057:	mov ax, [bp]	; 3: 139 70 0
x50060:	mov di, [bp + 4]	; 3: 139 126 4
x50063:	mov bp, [bp + 2]	; 3: 139 110 2
x50066:	jmp ax	; 2: 255 224

bsearch$18:	; NotEqual 21 firstCompare 0
x50068:	cmp word [bp + 22], 0	; 4: 131 126 22 0
x50072:	jne bsearch$21	; 2: 117 14

bsearch$19:	; SetReturnValue firstValuePtr
x50074:	mov bx, [bp + 20]	; 3: 139 94 20

bsearch$20:	; Return firstValuePtr
x50077:	mov ax, [bp]	; 3: 139 70 0
x50080:	mov di, [bp + 4]	; 3: 139 126 4
x50083:	mov bp, [bp + 2]	; 3: 139 110 2
x50086:	jmp ax	; 2: 255 224

bsearch$21:	; IntegralToIntegral £temporary3129 valueList
x50088:	mov bx, [bp + 8]	; 3: 139 94 8

bsearch$22:	; SignedMultiply £temporary3130 lastIndex valueSize
x50091:	mov ax, [bp + 18]	; 3: 139 70 18
x50094:	xor dx, dx	; 2: 49 210
x50096:	imul word [bp + 12]	; 3: 247 110 12

bsearch$23:	; BinaryAdd lastValuePtr £temporary3129 £temporary3130
x50099:	add bx, ax	; 2: 1 195
x50101:	mov [bp + 20], bx	; 3: 137 94 20

bsearch$24:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

bsearch$25:	; Parameter 22 keyPtr 6
x50104:	mov ax, [bp + 6]	; 3: 139 70 6
x50107:	mov [bp + 28], ax	; 3: 137 70 28

bsearch$26:	; Parameter 22 lastValuePtr 8
x50110:	mov ax, [bp + 20]	; 3: 139 70 20
x50113:	mov [bp + 30], ax	; 3: 137 70 30

bsearch$27:	; Call 22 compare 0
x50116:	mov word [bp + 22], bsearch$28	; 5: 199 70 22 212 195
x50121:	mov [bp + 24], bp	; 3: 137 110 24
x50124:	mov ax, [bp + 14]	; 3: 139 70 14
x50127:	add bp, 22	; 3: 131 197 22
x50130:	jmp ax	; 2: 255 224

bsearch$28:	; PostCall 22

bsearch$29:	; GetReturnValue £temporary3132

bsearch$30:	; Assign lastCompare £temporary3132
x50132:	mov [bp + 22], bx	; 3: 137 94 22

bsearch$31:	; SignedLessThanEqual 34 lastCompare 0
x50135:	cmp word [bp + 22], 0	; 4: 131 126 22 0
x50139:	jle bsearch$34	; 2: 126 14

bsearch$32:	; SetReturnValue 0
x50141:	mov bx, 0	; 3: 187 0 0

bsearch$33:	; Return 0
x50144:	mov ax, [bp]	; 3: 139 70 0
x50147:	mov di, [bp + 4]	; 3: 139 126 4
x50150:	mov bp, [bp + 2]	; 3: 139 110 2
x50153:	jmp ax	; 2: 255 224

bsearch$34:	; NotEqual 37 lastCompare 0
x50155:	cmp word [bp + 22], 0	; 4: 131 126 22 0
x50159:	jne bsearch$37	; 2: 117 14

bsearch$35:	; SetReturnValue lastValuePtr
x50161:	mov bx, [bp + 20]	; 3: 139 94 20

bsearch$36:	; Return lastValuePtr
x50164:	mov ax, [bp]	; 3: 139 70 0
x50167:	mov di, [bp + 4]	; 3: 139 126 4
x50170:	mov bp, [bp + 2]	; 3: 139 110 2
x50173:	jmp ax	; 2: 255 224

bsearch$37:	; BinaryAdd £temporary3135 firstIndex lastIndex
x50175:	mov ax, [bp + 16]	; 3: 139 70 16
x50178:	add ax, [bp + 18]	; 3: 3 70 18

bsearch$38:	; SignedDivide middleIndex £temporary3135 2
x50181:	xor dx, dx	; 2: 49 210
x50183:	idiv word [@7190$int2$2#]	; 4: 247 62 105 196
x50187:	mov [bp + 20], ax	; 3: 137 70 20

bsearch$39:	; IntegralToIntegral £temporary3137 valueList
x50190:	mov bx, [bp + 8]	; 3: 139 94 8

bsearch$40:	; SignedMultiply £temporary3138 middleIndex valueSize
x50193:	mov ax, [bp + 20]	; 3: 139 70 20
x50196:	xor dx, dx	; 2: 49 210
x50198:	imul word [bp + 12]	; 3: 247 110 12

bsearch$41:	; BinaryAdd middleValuePtr £temporary3137 £temporary3138
x50201:	add bx, ax	; 2: 1 195
x50203:	mov [bp + 22], bx	; 3: 137 94 22

bsearch$42:	; CallHeader 24 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

bsearch$43:	; Parameter 24 keyPtr 6
x50206:	mov ax, [bp + 6]	; 3: 139 70 6
x50209:	mov [bp + 30], ax	; 3: 137 70 30

bsearch$44:	; Parameter 24 middleValuePtr 8
x50212:	mov ax, [bp + 22]	; 3: 139 70 22
x50215:	mov [bp + 32], ax	; 3: 137 70 32

bsearch$45:	; Call 24 compare 0
x50218:	mov word [bp + 24], bsearch$46	; 5: 199 70 24 58 196
x50223:	mov [bp + 26], bp	; 3: 137 110 26
x50226:	mov ax, [bp + 14]	; 3: 139 70 14
x50229:	add bp, 24	; 3: 131 197 24
x50232:	jmp ax	; 2: 255 224

bsearch$46:	; PostCall 24

bsearch$47:	; GetReturnValue £temporary3140

bsearch$48:	; Assign middleCompare £temporary3140
x50234:	mov [bp + 24], bx	; 3: 137 94 24

bsearch$49:	; SignedGreaterThanEqual 52 middleCompare 0
x50237:	cmp word [bp + 24], 0	; 4: 131 126 24 0
x50241:	jge bsearch$52	; 2: 125 9

bsearch$50:	; Assign lastIndex middleIndex
x50243:	mov ax, [bp + 20]	; 3: 139 70 20
x50246:	mov [bp + 18], ax	; 3: 137 70 18

bsearch$51:	; Goto 5
x50249:	jmp bsearch$5	; 3: 233 5 255

bsearch$52:	; SignedLessThanEqual 55 middleCompare 0
x50252:	cmp word [bp + 24], 0	; 4: 131 126 24 0
x50256:	jle bsearch$55	; 2: 126 9

bsearch$53:	; Assign firstIndex middleIndex
x50258:	mov ax, [bp + 20]	; 3: 139 70 20
x50261:	mov [bp + 16], ax	; 3: 137 70 16

bsearch$54:	; Goto 5
x50264:	jmp bsearch$5	; 3: 233 246 254

bsearch$55:	; SetReturnValue middleValuePtr
x50267:	mov bx, [bp + 22]	; 3: 139 94 22

bsearch$56:	; Return middleValuePtr
x50270:	mov ax, [bp]	; 3: 139 70 0
x50273:	mov di, [bp + 4]	; 3: 139 126 4
x50276:	mov bp, [bp + 2]	; 3: 139 110 2
x50279:	jmp ax	; 2: 255 224

bsearch$57:	; FunctionEnd bsearch

@7190$int2$2#:
x50281:	dw 2	; 2: 2 0

strtol_test:	; Assign base 0
x50283:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtol_test$1:	; Assign text[0] 32
x50288:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$2:	; Assign text[1] 32
x50292:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$3:	; Assign text[2] 32
x50296:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$4:	; Assign text[3] 43
x50300:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtol_test$5:	; Assign text[4] 49
x50304:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$6:	; Assign text[5] 50
x50308:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$7:	; Assign text[6] 51
x50312:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$8:	; Assign text[7] 97
x50316:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$9:	; Assign text[8] 98
x50320:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$10:	; Assign text[9] 99
x50324:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$11:	; Assign text[10] 0
x50328:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$12:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$13:	; Parameter 21 text 6
x50332:	mov [bp + 27], bp	; 3: 137 110 27
x50335:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$14:	; address £temporary2282 pointer
x50339:	mov si, bp	; 2: 137 238
x50341:	add si, 19	; 3: 131 198 19

strtol_test$15:	; Parameter 21 £temporary2282 8
x50344:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$16:	; Parameter 21 base 10
x50347:	mov ax, [bp + 6]	; 3: 139 70 6
x50350:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$17:	; Call 21 strtol 0
x50353:	mov word [bp + 21], strtol_test$18	; 5: 199 70 21 191 196
x50358:	mov [bp + 23], bp	; 3: 137 110 23
x50361:	add bp, 21	; 3: 131 197 21
x50364:	jmp strtol	; 3: 233 49 11

strtol_test$18:	; PostCall 21

strtol_test$19:	; GetReturnValue £temporary2283

strtol_test$20:	; Assign value £temporary2283
x50367:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$21:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$22:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x50371:	mov word [bp + 31], @5201$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 100 206

strtol_test$23:	; Parameter 25 text 8
x50376:	mov [bp + 33], bp	; 3: 137 110 33
x50379:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$24:	; Parameter 25 value 10
x50383:	mov eax, [bp + 21]	; 4: 102 139 70 21
x50387:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$25:	; Parameter 25 pointer 14
x50391:	mov ax, [bp + 19]	; 3: 139 70 19
x50394:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$26:	; Parameter 25 base 16
x50397:	mov ax, [bp + 6]	; 3: 139 70 6
x50400:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$27:	; Call 25 printf 0
x50403:	mov word [bp + 25], strtol_test$28	; 5: 199 70 25 246 196
x50408:	mov [bp + 27], bp	; 3: 137 110 27
x50411:	add bp, 25	; 3: 131 197 25
x50414:	mov di, bp	; 2: 137 239
x50416:	add di, 10	; 3: 131 199 10
x50419:	jmp printf	; 3: 233 14 72

strtol_test$28:	; PostCall 25

strtol_test$29:	; Assign base 0
x50422:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtol_test$30:	; Assign text[0] 32
x50427:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$31:	; Assign text[1] 32
x50431:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$32:	; Assign text[2] 32
x50435:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$33:	; Assign text[3] 43
x50439:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtol_test$34:	; Assign text[4] 48
x50443:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtol_test$35:	; Assign text[5] 49
x50447:	mov byte [bp + 13], 49	; 4: 198 70 13 49

strtol_test$36:	; Assign text[6] 50
x50451:	mov byte [bp + 14], 50	; 4: 198 70 14 50

strtol_test$37:	; Assign text[7] 51
x50455:	mov byte [bp + 15], 51	; 4: 198 70 15 51

strtol_test$38:	; Assign text[8] 97
x50459:	mov byte [bp + 16], 97	; 4: 198 70 16 97

strtol_test$39:	; Assign text[9] 98
x50463:	mov byte [bp + 17], 98	; 4: 198 70 17 98

strtol_test$40:	; Assign text[10] 99
x50467:	mov byte [bp + 18], 99	; 4: 198 70 18 99

strtol_test$41:	; Assign text[11] 0
x50471:	mov byte [bp + 19], 0	; 4: 198 70 19 0

strtol_test$42:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$43:	; Parameter 22 text 6
x50475:	mov [bp + 28], bp	; 3: 137 110 28
x50478:	add word [bp + 28], 8	; 4: 131 70 28 8

strtol_test$44:	; address £temporary2297 pointer
x50482:	mov si, bp	; 2: 137 238
x50484:	add si, 20	; 3: 131 198 20

strtol_test$45:	; Parameter 22 £temporary2297 8
x50487:	mov [bp + 30], si	; 3: 137 118 30

strtol_test$46:	; Parameter 22 base 10
x50490:	mov ax, [bp + 6]	; 3: 139 70 6
x50493:	mov [bp + 32], ax	; 3: 137 70 32

strtol_test$47:	; Call 22 strtol 0
x50496:	mov word [bp + 22], strtol_test$48	; 5: 199 70 22 78 197
x50501:	mov [bp + 24], bp	; 3: 137 110 24
x50504:	add bp, 22	; 3: 131 197 22
x50507:	jmp strtol	; 3: 233 162 10

strtol_test$48:	; PostCall 22

strtol_test$49:	; GetReturnValue £temporary2298

strtol_test$50:	; Assign value £temporary2298
x50510:	mov [bp + 22], ebx	; 4: 102 137 94 22

strtol_test$51:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$52:	; Parameter 26 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x50514:	mov word [bp + 32], @5248$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 32 122 206

strtol_test$53:	; Parameter 26 text 8
x50519:	mov [bp + 34], bp	; 3: 137 110 34
x50522:	add word [bp + 34], 8	; 4: 131 70 34 8

strtol_test$54:	; Parameter 26 value 10
x50526:	mov eax, [bp + 22]	; 4: 102 139 70 22
x50530:	mov [bp + 36], eax	; 4: 102 137 70 36

strtol_test$55:	; Parameter 26 pointer 14
x50534:	mov ax, [bp + 20]	; 3: 139 70 20
x50537:	mov [bp + 40], ax	; 3: 137 70 40

strtol_test$56:	; Parameter 26 base 16
x50540:	mov ax, [bp + 6]	; 3: 139 70 6
x50543:	mov [bp + 42], ax	; 3: 137 70 42

strtol_test$57:	; Call 26 printf 0
x50546:	mov word [bp + 26], strtol_test$58	; 5: 199 70 26 133 197
x50551:	mov [bp + 28], bp	; 3: 137 110 28
x50554:	add bp, 26	; 3: 131 197 26
x50557:	mov di, bp	; 2: 137 239
x50559:	add di, 10	; 3: 131 199 10
x50562:	jmp printf	; 3: 233 127 71

strtol_test$58:	; PostCall 26

strtol_test$59:	; Assign base 0
x50565:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtol_test$60:	; Assign text[0] 32
x50570:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$61:	; Assign text[1] 32
x50574:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$62:	; Assign text[2] 32
x50578:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$63:	; Assign text[3] 43
x50582:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtol_test$64:	; Assign text[4] 48
x50586:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtol_test$65:	; Assign text[5] 120
x50590:	mov byte [bp + 13], 120	; 4: 198 70 13 120

strtol_test$66:	; Assign text[6] 49
x50594:	mov byte [bp + 14], 49	; 4: 198 70 14 49

strtol_test$67:	; Assign text[7] 50
x50598:	mov byte [bp + 15], 50	; 4: 198 70 15 50

strtol_test$68:	; Assign text[8] 51
x50602:	mov byte [bp + 16], 51	; 4: 198 70 16 51

strtol_test$69:	; Assign text[9] 65
x50606:	mov byte [bp + 17], 65	; 4: 198 70 17 65

strtol_test$70:	; Assign text[10] 66
x50610:	mov byte [bp + 18], 66	; 4: 198 70 18 66

strtol_test$71:	; Assign text[11] 67
x50614:	mov byte [bp + 19], 67	; 4: 198 70 19 67

strtol_test$72:	; Assign text[12] 0
x50618:	mov byte [bp + 20], 0	; 4: 198 70 20 0

strtol_test$73:	; CallHeader 23 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$74:	; Parameter 23 text 6
x50622:	mov [bp + 29], bp	; 3: 137 110 29
x50625:	add word [bp + 29], 8	; 4: 131 70 29 8

strtol_test$75:	; address £temporary2313 pointer
x50629:	mov si, bp	; 2: 137 238
x50631:	add si, 21	; 3: 131 198 21

strtol_test$76:	; Parameter 23 £temporary2313 8
x50634:	mov [bp + 31], si	; 3: 137 118 31

strtol_test$77:	; Parameter 23 base 10
x50637:	mov ax, [bp + 6]	; 3: 139 70 6
x50640:	mov [bp + 33], ax	; 3: 137 70 33

strtol_test$78:	; Call 23 strtol 0
x50643:	mov word [bp + 23], strtol_test$79	; 5: 199 70 23 225 197
x50648:	mov [bp + 25], bp	; 3: 137 110 25
x50651:	add bp, 23	; 3: 131 197 23
x50654:	jmp strtol	; 3: 233 15 10

strtol_test$79:	; PostCall 23

strtol_test$80:	; GetReturnValue £temporary2314

strtol_test$81:	; Assign value £temporary2314
x50657:	mov [bp + 23], ebx	; 4: 102 137 94 23

strtol_test$82:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$83:	; Parameter 27 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x50661:	mov word [bp + 33], @5298$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 33 144 206

strtol_test$84:	; Parameter 27 text 8
x50666:	mov [bp + 35], bp	; 3: 137 110 35
x50669:	add word [bp + 35], 8	; 4: 131 70 35 8

strtol_test$85:	; Parameter 27 value 10
x50673:	mov eax, [bp + 23]	; 4: 102 139 70 23
x50677:	mov [bp + 37], eax	; 4: 102 137 70 37

strtol_test$86:	; Parameter 27 pointer 14
x50681:	mov ax, [bp + 21]	; 3: 139 70 21
x50684:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$87:	; Parameter 27 base 16
x50687:	mov ax, [bp + 6]	; 3: 139 70 6
x50690:	mov [bp + 43], ax	; 3: 137 70 43

strtol_test$88:	; Call 27 printf 0
x50693:	mov word [bp + 27], strtol_test$89	; 5: 199 70 27 24 198
x50698:	mov [bp + 29], bp	; 3: 137 110 29
x50701:	add bp, 27	; 3: 131 197 27
x50704:	mov di, bp	; 2: 137 239
x50706:	add di, 10	; 3: 131 199 10
x50709:	jmp printf	; 3: 233 236 70

strtol_test$89:	; PostCall 27

strtol_test$90:	; Assign base 0
x50712:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtol_test$91:	; Assign text[0] 32
x50717:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$92:	; Assign text[1] 32
x50721:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$93:	; Assign text[2] 32
x50725:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$94:	; Assign text[3] 43
x50729:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtol_test$95:	; Assign text[4] 48
x50733:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtol_test$96:	; Assign text[5] 88
x50737:	mov byte [bp + 13], 88	; 4: 198 70 13 88

strtol_test$97:	; Assign text[6] 49
x50741:	mov byte [bp + 14], 49	; 4: 198 70 14 49

strtol_test$98:	; Assign text[7] 50
x50745:	mov byte [bp + 15], 50	; 4: 198 70 15 50

strtol_test$99:	; Assign text[8] 51
x50749:	mov byte [bp + 16], 51	; 4: 198 70 16 51

strtol_test$100:	; Assign text[9] 97
x50753:	mov byte [bp + 17], 97	; 4: 198 70 17 97

strtol_test$101:	; Assign text[10] 98
x50757:	mov byte [bp + 18], 98	; 4: 198 70 18 98

strtol_test$102:	; Assign text[11] 99
x50761:	mov byte [bp + 19], 99	; 4: 198 70 19 99

strtol_test$103:	; Assign text[12] 0
x50765:	mov byte [bp + 20], 0	; 4: 198 70 20 0

strtol_test$104:	; CallHeader 23 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$105:	; Parameter 23 text 6
x50769:	mov [bp + 29], bp	; 3: 137 110 29
x50772:	add word [bp + 29], 8	; 4: 131 70 29 8

strtol_test$106:	; address £temporary2329 pointer
x50776:	mov si, bp	; 2: 137 238
x50778:	add si, 21	; 3: 131 198 21

strtol_test$107:	; Parameter 23 £temporary2329 8
x50781:	mov [bp + 31], si	; 3: 137 118 31

strtol_test$108:	; Parameter 23 base 10
x50784:	mov ax, [bp + 6]	; 3: 139 70 6
x50787:	mov [bp + 33], ax	; 3: 137 70 33

strtol_test$109:	; Call 23 strtol 0
x50790:	mov word [bp + 23], strtol_test$110	; 5: 199 70 23 116 198
x50795:	mov [bp + 25], bp	; 3: 137 110 25
x50798:	add bp, 23	; 3: 131 197 23
x50801:	jmp strtol	; 3: 233 124 9

strtol_test$110:	; PostCall 23

strtol_test$111:	; GetReturnValue £temporary2330

strtol_test$112:	; Assign value £temporary2330
x50804:	mov [bp + 23], ebx	; 4: 102 137 94 23

strtol_test$113:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$114:	; Parameter 27 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x50808:	mov word [bp + 33], @5348$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 33 166 206

strtol_test$115:	; Parameter 27 text 8
x50813:	mov [bp + 35], bp	; 3: 137 110 35
x50816:	add word [bp + 35], 8	; 4: 131 70 35 8

strtol_test$116:	; Parameter 27 value 10
x50820:	mov eax, [bp + 23]	; 4: 102 139 70 23
x50824:	mov [bp + 37], eax	; 4: 102 137 70 37

strtol_test$117:	; Parameter 27 pointer 14
x50828:	mov ax, [bp + 21]	; 3: 139 70 21
x50831:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$118:	; Parameter 27 base 16
x50834:	mov ax, [bp + 6]	; 3: 139 70 6
x50837:	mov [bp + 43], ax	; 3: 137 70 43

strtol_test$119:	; Call 27 printf 0
x50840:	mov word [bp + 27], strtol_test$120	; 5: 199 70 27 171 198
x50845:	mov [bp + 29], bp	; 3: 137 110 29
x50848:	add bp, 27	; 3: 131 197 27
x50851:	mov di, bp	; 2: 137 239
x50853:	add di, 10	; 3: 131 199 10
x50856:	jmp printf	; 3: 233 89 70

strtol_test$120:	; PostCall 27

strtol_test$121:	; Assign base 0
x50859:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtol_test$122:	; Assign text[0] 32
x50864:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$123:	; Assign text[1] 32
x50868:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$124:	; Assign text[2] 32
x50872:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$125:	; Assign text[3] 45
x50876:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtol_test$126:	; Assign text[4] 49
x50880:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$127:	; Assign text[5] 50
x50884:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$128:	; Assign text[6] 51
x50888:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$129:	; Assign text[7] 97
x50892:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$130:	; Assign text[8] 98
x50896:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$131:	; Assign text[9] 99
x50900:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$132:	; Assign text[10] 0
x50904:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$133:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$134:	; Parameter 21 text 6
x50908:	mov [bp + 27], bp	; 3: 137 110 27
x50911:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$135:	; address £temporary2343 pointer
x50915:	mov si, bp	; 2: 137 238
x50917:	add si, 19	; 3: 131 198 19

strtol_test$136:	; Parameter 21 £temporary2343 8
x50920:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$137:	; Parameter 21 base 10
x50923:	mov ax, [bp + 6]	; 3: 139 70 6
x50926:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$138:	; Call 21 strtol 0
x50929:	mov word [bp + 21], strtol_test$139	; 5: 199 70 21 255 198
x50934:	mov [bp + 23], bp	; 3: 137 110 23
x50937:	add bp, 21	; 3: 131 197 21
x50940:	jmp strtol	; 3: 233 241 8

strtol_test$139:	; PostCall 21

strtol_test$140:	; GetReturnValue £temporary2344

strtol_test$141:	; Assign value £temporary2344
x50943:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$142:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$143:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x50947:	mov word [bp + 31], @5392$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 188 206

strtol_test$144:	; Parameter 25 text 8
x50952:	mov [bp + 33], bp	; 3: 137 110 33
x50955:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$145:	; Parameter 25 value 10
x50959:	mov eax, [bp + 21]	; 4: 102 139 70 21
x50963:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$146:	; Parameter 25 pointer 14
x50967:	mov ax, [bp + 19]	; 3: 139 70 19
x50970:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$147:	; Parameter 25 base 16
x50973:	mov ax, [bp + 6]	; 3: 139 70 6
x50976:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$148:	; Call 25 printf 0
x50979:	mov word [bp + 25], strtol_test$149	; 5: 199 70 25 54 199
x50984:	mov [bp + 27], bp	; 3: 137 110 27
x50987:	add bp, 25	; 3: 131 197 25
x50990:	mov di, bp	; 2: 137 239
x50992:	add di, 10	; 3: 131 199 10
x50995:	jmp printf	; 3: 233 206 69

strtol_test$149:	; PostCall 25

strtol_test$150:	; Assign base 0
x50998:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtol_test$151:	; Assign text[0] 32
x51003:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$152:	; Assign text[1] 32
x51007:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$153:	; Assign text[2] 32
x51011:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$154:	; Assign text[3] 45
x51015:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtol_test$155:	; Assign text[4] 48
x51019:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtol_test$156:	; Assign text[5] 49
x51023:	mov byte [bp + 13], 49	; 4: 198 70 13 49

strtol_test$157:	; Assign text[6] 50
x51027:	mov byte [bp + 14], 50	; 4: 198 70 14 50

strtol_test$158:	; Assign text[7] 51
x51031:	mov byte [bp + 15], 51	; 4: 198 70 15 51

strtol_test$159:	; Assign text[8] 97
x51035:	mov byte [bp + 16], 97	; 4: 198 70 16 97

strtol_test$160:	; Assign text[9] 98
x51039:	mov byte [bp + 17], 98	; 4: 198 70 17 98

strtol_test$161:	; Assign text[10] 99
x51043:	mov byte [bp + 18], 99	; 4: 198 70 18 99

strtol_test$162:	; Assign text[11] 0
x51047:	mov byte [bp + 19], 0	; 4: 198 70 19 0

strtol_test$163:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$164:	; Parameter 22 text 6
x51051:	mov [bp + 28], bp	; 3: 137 110 28
x51054:	add word [bp + 28], 8	; 4: 131 70 28 8

strtol_test$165:	; address £temporary2358 pointer
x51058:	mov si, bp	; 2: 137 238
x51060:	add si, 20	; 3: 131 198 20

strtol_test$166:	; Parameter 22 £temporary2358 8
x51063:	mov [bp + 30], si	; 3: 137 118 30

strtol_test$167:	; Parameter 22 base 10
x51066:	mov ax, [bp + 6]	; 3: 139 70 6
x51069:	mov [bp + 32], ax	; 3: 137 70 32

strtol_test$168:	; Call 22 strtol 0
x51072:	mov word [bp + 22], strtol_test$169	; 5: 199 70 22 142 199
x51077:	mov [bp + 24], bp	; 3: 137 110 24
x51080:	add bp, 22	; 3: 131 197 22
x51083:	jmp strtol	; 3: 233 98 8

strtol_test$169:	; PostCall 22

strtol_test$170:	; GetReturnValue £temporary2359

strtol_test$171:	; Assign value £temporary2359
x51086:	mov [bp + 22], ebx	; 4: 102 137 94 22

strtol_test$172:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$173:	; Parameter 26 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x51090:	mov word [bp + 32], @5439$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 32 210 206

strtol_test$174:	; Parameter 26 text 8
x51095:	mov [bp + 34], bp	; 3: 137 110 34
x51098:	add word [bp + 34], 8	; 4: 131 70 34 8

strtol_test$175:	; Parameter 26 value 10
x51102:	mov eax, [bp + 22]	; 4: 102 139 70 22
x51106:	mov [bp + 36], eax	; 4: 102 137 70 36

strtol_test$176:	; Parameter 26 pointer 14
x51110:	mov ax, [bp + 20]	; 3: 139 70 20
x51113:	mov [bp + 40], ax	; 3: 137 70 40

strtol_test$177:	; Parameter 26 base 16
x51116:	mov ax, [bp + 6]	; 3: 139 70 6
x51119:	mov [bp + 42], ax	; 3: 137 70 42

strtol_test$178:	; Call 26 printf 0
x51122:	mov word [bp + 26], strtol_test$179	; 5: 199 70 26 197 199
x51127:	mov [bp + 28], bp	; 3: 137 110 28
x51130:	add bp, 26	; 3: 131 197 26
x51133:	mov di, bp	; 2: 137 239
x51135:	add di, 10	; 3: 131 199 10
x51138:	jmp printf	; 3: 233 63 69

strtol_test$179:	; PostCall 26

strtol_test$180:	; Assign base 0
x51141:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtol_test$181:	; Assign text[0] 32
x51146:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$182:	; Assign text[1] 32
x51150:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$183:	; Assign text[2] 32
x51154:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$184:	; Assign text[3] 45
x51158:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtol_test$185:	; Assign text[4] 48
x51162:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtol_test$186:	; Assign text[5] 120
x51166:	mov byte [bp + 13], 120	; 4: 198 70 13 120

strtol_test$187:	; Assign text[6] 49
x51170:	mov byte [bp + 14], 49	; 4: 198 70 14 49

strtol_test$188:	; Assign text[7] 50
x51174:	mov byte [bp + 15], 50	; 4: 198 70 15 50

strtol_test$189:	; Assign text[8] 51
x51178:	mov byte [bp + 16], 51	; 4: 198 70 16 51

strtol_test$190:	; Assign text[9] 65
x51182:	mov byte [bp + 17], 65	; 4: 198 70 17 65

strtol_test$191:	; Assign text[10] 66
x51186:	mov byte [bp + 18], 66	; 4: 198 70 18 66

strtol_test$192:	; Assign text[11] 67
x51190:	mov byte [bp + 19], 67	; 4: 198 70 19 67

strtol_test$193:	; Assign text[12] 0
x51194:	mov byte [bp + 20], 0	; 4: 198 70 20 0

strtol_test$194:	; CallHeader 23 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$195:	; Parameter 23 text 6
x51198:	mov [bp + 29], bp	; 3: 137 110 29
x51201:	add word [bp + 29], 8	; 4: 131 70 29 8

strtol_test$196:	; address £temporary2374 pointer
x51205:	mov si, bp	; 2: 137 238
x51207:	add si, 21	; 3: 131 198 21

strtol_test$197:	; Parameter 23 £temporary2374 8
x51210:	mov [bp + 31], si	; 3: 137 118 31

strtol_test$198:	; Parameter 23 base 10
x51213:	mov ax, [bp + 6]	; 3: 139 70 6
x51216:	mov [bp + 33], ax	; 3: 137 70 33

strtol_test$199:	; Call 23 strtol 0
x51219:	mov word [bp + 23], strtol_test$200	; 5: 199 70 23 33 200
x51224:	mov [bp + 25], bp	; 3: 137 110 25
x51227:	add bp, 23	; 3: 131 197 23
x51230:	jmp strtol	; 3: 233 207 7

strtol_test$200:	; PostCall 23

strtol_test$201:	; GetReturnValue £temporary2375

strtol_test$202:	; Assign value £temporary2375
x51233:	mov [bp + 23], ebx	; 4: 102 137 94 23

strtol_test$203:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$204:	; Parameter 27 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x51237:	mov word [bp + 33], @5489$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 33 232 206

strtol_test$205:	; Parameter 27 text 8
x51242:	mov [bp + 35], bp	; 3: 137 110 35
x51245:	add word [bp + 35], 8	; 4: 131 70 35 8

strtol_test$206:	; Parameter 27 value 10
x51249:	mov eax, [bp + 23]	; 4: 102 139 70 23
x51253:	mov [bp + 37], eax	; 4: 102 137 70 37

strtol_test$207:	; Parameter 27 pointer 14
x51257:	mov ax, [bp + 21]	; 3: 139 70 21
x51260:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$208:	; Parameter 27 base 16
x51263:	mov ax, [bp + 6]	; 3: 139 70 6
x51266:	mov [bp + 43], ax	; 3: 137 70 43

strtol_test$209:	; Call 27 printf 0
x51269:	mov word [bp + 27], strtol_test$210	; 5: 199 70 27 88 200
x51274:	mov [bp + 29], bp	; 3: 137 110 29
x51277:	add bp, 27	; 3: 131 197 27
x51280:	mov di, bp	; 2: 137 239
x51282:	add di, 10	; 3: 131 199 10
x51285:	jmp printf	; 3: 233 172 68

strtol_test$210:	; PostCall 27

strtol_test$211:	; Assign base 0
x51288:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtol_test$212:	; Assign text[0] 32
x51293:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$213:	; Assign text[1] 32
x51297:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$214:	; Assign text[2] 32
x51301:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$215:	; Assign text[3] 45
x51305:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtol_test$216:	; Assign text[4] 48
x51309:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtol_test$217:	; Assign text[5] 88
x51313:	mov byte [bp + 13], 88	; 4: 198 70 13 88

strtol_test$218:	; Assign text[6] 49
x51317:	mov byte [bp + 14], 49	; 4: 198 70 14 49

strtol_test$219:	; Assign text[7] 50
x51321:	mov byte [bp + 15], 50	; 4: 198 70 15 50

strtol_test$220:	; Assign text[8] 51
x51325:	mov byte [bp + 16], 51	; 4: 198 70 16 51

strtol_test$221:	; Assign text[9] 97
x51329:	mov byte [bp + 17], 97	; 4: 198 70 17 97

strtol_test$222:	; Assign text[10] 98
x51333:	mov byte [bp + 18], 98	; 4: 198 70 18 98

strtol_test$223:	; Assign text[11] 99
x51337:	mov byte [bp + 19], 99	; 4: 198 70 19 99

strtol_test$224:	; Assign text[12] 0
x51341:	mov byte [bp + 20], 0	; 4: 198 70 20 0

strtol_test$225:	; CallHeader 23 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$226:	; Parameter 23 text 6
x51345:	mov [bp + 29], bp	; 3: 137 110 29
x51348:	add word [bp + 29], 8	; 4: 131 70 29 8

strtol_test$227:	; address £temporary2390 pointer
x51352:	mov si, bp	; 2: 137 238
x51354:	add si, 21	; 3: 131 198 21

strtol_test$228:	; Parameter 23 £temporary2390 8
x51357:	mov [bp + 31], si	; 3: 137 118 31

strtol_test$229:	; Parameter 23 base 10
x51360:	mov ax, [bp + 6]	; 3: 139 70 6
x51363:	mov [bp + 33], ax	; 3: 137 70 33

strtol_test$230:	; Call 23 strtol 0
x51366:	mov word [bp + 23], strtol_test$231	; 5: 199 70 23 180 200
x51371:	mov [bp + 25], bp	; 3: 137 110 25
x51374:	add bp, 23	; 3: 131 197 23
x51377:	jmp strtol	; 3: 233 60 7

strtol_test$231:	; PostCall 23

strtol_test$232:	; GetReturnValue £temporary2391

strtol_test$233:	; Assign value £temporary2391
x51380:	mov [bp + 23], ebx	; 4: 102 137 94 23

strtol_test$234:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$235:	; Parameter 27 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x51384:	mov word [bp + 33], @5539$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 33 254 206

strtol_test$236:	; Parameter 27 text 8
x51389:	mov [bp + 35], bp	; 3: 137 110 35
x51392:	add word [bp + 35], 8	; 4: 131 70 35 8

strtol_test$237:	; Parameter 27 value 10
x51396:	mov eax, [bp + 23]	; 4: 102 139 70 23
x51400:	mov [bp + 37], eax	; 4: 102 137 70 37

strtol_test$238:	; Parameter 27 pointer 14
x51404:	mov ax, [bp + 21]	; 3: 139 70 21
x51407:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$239:	; Parameter 27 base 16
x51410:	mov ax, [bp + 6]	; 3: 139 70 6
x51413:	mov [bp + 43], ax	; 3: 137 70 43

strtol_test$240:	; Call 27 printf 0
x51416:	mov word [bp + 27], strtol_test$241	; 5: 199 70 27 235 200
x51421:	mov [bp + 29], bp	; 3: 137 110 29
x51424:	add bp, 27	; 3: 131 197 27
x51427:	mov di, bp	; 2: 137 239
x51429:	add di, 10	; 3: 131 199 10
x51432:	jmp printf	; 3: 233 25 68

strtol_test$241:	; PostCall 27

strtol_test$242:	; Assign base 9
x51435:	mov word [bp + 6], 9	; 5: 199 70 6 9 0

strtol_test$243:	; Assign text[0] 32
x51440:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$244:	; Assign text[1] 32
x51444:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$245:	; Assign text[2] 32
x51448:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$246:	; Assign text[3] 43
x51452:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtol_test$247:	; Assign text[4] 49
x51456:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$248:	; Assign text[5] 50
x51460:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$249:	; Assign text[6] 51
x51464:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$250:	; Assign text[7] 97
x51468:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$251:	; Assign text[8] 98
x51472:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$252:	; Assign text[9] 99
x51476:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$253:	; Assign text[10] 0
x51480:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$254:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$255:	; Parameter 21 text 6
x51484:	mov [bp + 27], bp	; 3: 137 110 27
x51487:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$256:	; address £temporary2404 pointer
x51491:	mov si, bp	; 2: 137 238
x51493:	add si, 19	; 3: 131 198 19

strtol_test$257:	; Parameter 21 £temporary2404 8
x51496:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$258:	; Parameter 21 base 10
x51499:	mov ax, [bp + 6]	; 3: 139 70 6
x51502:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$259:	; Call 21 strtol 0
x51505:	mov word [bp + 21], strtol_test$260	; 5: 199 70 21 63 201
x51510:	mov [bp + 23], bp	; 3: 137 110 23
x51513:	add bp, 21	; 3: 131 197 21
x51516:	jmp strtol	; 3: 233 177 6

strtol_test$260:	; PostCall 21

strtol_test$261:	; GetReturnValue £temporary2405

strtol_test$262:	; Assign value £temporary2405
x51519:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$263:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$264:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x51523:	mov word [bp + 31], @5583$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 20 207

strtol_test$265:	; Parameter 25 text 8
x51528:	mov [bp + 33], bp	; 3: 137 110 33
x51531:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$266:	; Parameter 25 value 10
x51535:	mov eax, [bp + 21]	; 4: 102 139 70 21
x51539:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$267:	; Parameter 25 pointer 14
x51543:	mov ax, [bp + 19]	; 3: 139 70 19
x51546:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$268:	; Parameter 25 base 16
x51549:	mov ax, [bp + 6]	; 3: 139 70 6
x51552:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$269:	; Call 25 printf 0
x51555:	mov word [bp + 25], strtol_test$270	; 5: 199 70 25 118 201
x51560:	mov [bp + 27], bp	; 3: 137 110 27
x51563:	add bp, 25	; 3: 131 197 25
x51566:	mov di, bp	; 2: 137 239
x51568:	add di, 10	; 3: 131 199 10
x51571:	jmp printf	; 3: 233 142 67

strtol_test$270:	; PostCall 25

strtol_test$271:	; Assign base 10
x51574:	mov word [bp + 6], 10	; 5: 199 70 6 10 0

strtol_test$272:	; Assign text[0] 32
x51579:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$273:	; Assign text[1] 32
x51583:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$274:	; Assign text[2] 32
x51587:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$275:	; Assign text[3] 43
x51591:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtol_test$276:	; Assign text[4] 49
x51595:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$277:	; Assign text[5] 50
x51599:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$278:	; Assign text[6] 51
x51603:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$279:	; Assign text[7] 97
x51607:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$280:	; Assign text[8] 98
x51611:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$281:	; Assign text[9] 99
x51615:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$282:	; Assign text[10] 0
x51619:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$283:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$284:	; Parameter 21 text 6
x51623:	mov [bp + 27], bp	; 3: 137 110 27
x51626:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$285:	; address £temporary2418 pointer
x51630:	mov si, bp	; 2: 137 238
x51632:	add si, 19	; 3: 131 198 19

strtol_test$286:	; Parameter 21 £temporary2418 8
x51635:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$287:	; Parameter 21 base 10
x51638:	mov ax, [bp + 6]	; 3: 139 70 6
x51641:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$288:	; Call 21 strtol 0
x51644:	mov word [bp + 21], strtol_test$289	; 5: 199 70 21 202 201
x51649:	mov [bp + 23], bp	; 3: 137 110 23
x51652:	add bp, 21	; 3: 131 197 21
x51655:	jmp strtol	; 3: 233 38 6

strtol_test$289:	; PostCall 21

strtol_test$290:	; GetReturnValue £temporary2419

strtol_test$291:	; Assign value £temporary2419
x51658:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$292:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$293:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x51662:	mov word [bp + 31], @5627$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 42 207

strtol_test$294:	; Parameter 25 text 8
x51667:	mov [bp + 33], bp	; 3: 137 110 33
x51670:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$295:	; Parameter 25 value 10
x51674:	mov eax, [bp + 21]	; 4: 102 139 70 21
x51678:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$296:	; Parameter 25 pointer 14
x51682:	mov ax, [bp + 19]	; 3: 139 70 19
x51685:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$297:	; Parameter 25 base 16
x51688:	mov ax, [bp + 6]	; 3: 139 70 6
x51691:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$298:	; Call 25 printf 0
x51694:	mov word [bp + 25], strtol_test$299	; 5: 199 70 25 1 202
x51699:	mov [bp + 27], bp	; 3: 137 110 27
x51702:	add bp, 25	; 3: 131 197 25
x51705:	mov di, bp	; 2: 137 239
x51707:	add di, 10	; 3: 131 199 10
x51710:	jmp printf	; 3: 233 3 67

strtol_test$299:	; PostCall 25

strtol_test$300:	; Assign base 11
x51713:	mov word [bp + 6], 11	; 5: 199 70 6 11 0

strtol_test$301:	; Assign text[0] 32
x51718:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$302:	; Assign text[1] 32
x51722:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$303:	; Assign text[2] 32
x51726:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$304:	; Assign text[3] 43
x51730:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtol_test$305:	; Assign text[4] 49
x51734:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$306:	; Assign text[5] 50
x51738:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$307:	; Assign text[6] 51
x51742:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$308:	; Assign text[7] 97
x51746:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$309:	; Assign text[8] 98
x51750:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$310:	; Assign text[9] 99
x51754:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$311:	; Assign text[10] 0
x51758:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$312:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$313:	; Parameter 21 text 6
x51762:	mov [bp + 27], bp	; 3: 137 110 27
x51765:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$314:	; address £temporary2432 pointer
x51769:	mov si, bp	; 2: 137 238
x51771:	add si, 19	; 3: 131 198 19

strtol_test$315:	; Parameter 21 £temporary2432 8
x51774:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$316:	; Parameter 21 base 10
x51777:	mov ax, [bp + 6]	; 3: 139 70 6
x51780:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$317:	; Call 21 strtol 0
x51783:	mov word [bp + 21], strtol_test$318	; 5: 199 70 21 85 202
x51788:	mov [bp + 23], bp	; 3: 137 110 23
x51791:	add bp, 21	; 3: 131 197 21
x51794:	jmp strtol	; 3: 233 155 5

strtol_test$318:	; PostCall 21

strtol_test$319:	; GetReturnValue £temporary2433

strtol_test$320:	; Assign value £temporary2433
x51797:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$321:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$322:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x51801:	mov word [bp + 31], @5671$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 64 207

strtol_test$323:	; Parameter 25 text 8
x51806:	mov [bp + 33], bp	; 3: 137 110 33
x51809:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$324:	; Parameter 25 value 10
x51813:	mov eax, [bp + 21]	; 4: 102 139 70 21
x51817:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$325:	; Parameter 25 pointer 14
x51821:	mov ax, [bp + 19]	; 3: 139 70 19
x51824:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$326:	; Parameter 25 base 16
x51827:	mov ax, [bp + 6]	; 3: 139 70 6
x51830:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$327:	; Call 25 printf 0
x51833:	mov word [bp + 25], strtol_test$328	; 5: 199 70 25 140 202
x51838:	mov [bp + 27], bp	; 3: 137 110 27
x51841:	add bp, 25	; 3: 131 197 25
x51844:	mov di, bp	; 2: 137 239
x51846:	add di, 10	; 3: 131 199 10
x51849:	jmp printf	; 3: 233 120 66

strtol_test$328:	; PostCall 25

strtol_test$329:	; Assign base 12
x51852:	mov word [bp + 6], 12	; 5: 199 70 6 12 0

strtol_test$330:	; Assign text[0] 32
x51857:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$331:	; Assign text[1] 32
x51861:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$332:	; Assign text[2] 32
x51865:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$333:	; Assign text[3] 43
x51869:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtol_test$334:	; Assign text[4] 49
x51873:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$335:	; Assign text[5] 50
x51877:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$336:	; Assign text[6] 51
x51881:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$337:	; Assign text[7] 65
x51885:	mov byte [bp + 15], 65	; 4: 198 70 15 65

strtol_test$338:	; Assign text[8] 66
x51889:	mov byte [bp + 16], 66	; 4: 198 70 16 66

strtol_test$339:	; Assign text[9] 67
x51893:	mov byte [bp + 17], 67	; 4: 198 70 17 67

strtol_test$340:	; Assign text[10] 0
x51897:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$341:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$342:	; Parameter 21 text 6
x51901:	mov [bp + 27], bp	; 3: 137 110 27
x51904:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$343:	; address £temporary2446 pointer
x51908:	mov si, bp	; 2: 137 238
x51910:	add si, 19	; 3: 131 198 19

strtol_test$344:	; Parameter 21 £temporary2446 8
x51913:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$345:	; Parameter 21 base 10
x51916:	mov ax, [bp + 6]	; 3: 139 70 6
x51919:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$346:	; Call 21 strtol 0
x51922:	mov word [bp + 21], strtol_test$347	; 5: 199 70 21 224 202
x51927:	mov [bp + 23], bp	; 3: 137 110 23
x51930:	add bp, 21	; 3: 131 197 21
x51933:	jmp strtol	; 3: 233 16 5

strtol_test$347:	; PostCall 21

strtol_test$348:	; GetReturnValue £temporary2447

strtol_test$349:	; Assign value £temporary2447
x51936:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$350:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$351:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x51940:	mov word [bp + 31], @5715$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 86 207

strtol_test$352:	; Parameter 25 text 8
x51945:	mov [bp + 33], bp	; 3: 137 110 33
x51948:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$353:	; Parameter 25 value 10
x51952:	mov eax, [bp + 21]	; 4: 102 139 70 21
x51956:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$354:	; Parameter 25 pointer 14
x51960:	mov ax, [bp + 19]	; 3: 139 70 19
x51963:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$355:	; Parameter 25 base 16
x51966:	mov ax, [bp + 6]	; 3: 139 70 6
x51969:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$356:	; Call 25 printf 0
x51972:	mov word [bp + 25], strtol_test$357	; 5: 199 70 25 23 203
x51977:	mov [bp + 27], bp	; 3: 137 110 27
x51980:	add bp, 25	; 3: 131 197 25
x51983:	mov di, bp	; 2: 137 239
x51985:	add di, 10	; 3: 131 199 10
x51988:	jmp printf	; 3: 233 237 65

strtol_test$357:	; PostCall 25

strtol_test$358:	; Assign base 13
x51991:	mov word [bp + 6], 13	; 5: 199 70 6 13 0

strtol_test$359:	; Assign text[0] 32
x51996:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$360:	; Assign text[1] 32
x52000:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$361:	; Assign text[2] 32
x52004:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$362:	; Assign text[3] 43
x52008:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtol_test$363:	; Assign text[4] 49
x52012:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$364:	; Assign text[5] 50
x52016:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$365:	; Assign text[6] 51
x52020:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$366:	; Assign text[7] 97
x52024:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$367:	; Assign text[8] 98
x52028:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$368:	; Assign text[9] 99
x52032:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$369:	; Assign text[10] 0
x52036:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$370:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$371:	; Parameter 21 text 6
x52040:	mov [bp + 27], bp	; 3: 137 110 27
x52043:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$372:	; address £temporary2460 pointer
x52047:	mov si, bp	; 2: 137 238
x52049:	add si, 19	; 3: 131 198 19

strtol_test$373:	; Parameter 21 £temporary2460 8
x52052:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$374:	; Parameter 21 base 10
x52055:	mov ax, [bp + 6]	; 3: 139 70 6
x52058:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$375:	; Call 21 strtol 0
x52061:	mov word [bp + 21], strtol_test$376	; 5: 199 70 21 107 203
x52066:	mov [bp + 23], bp	; 3: 137 110 23
x52069:	add bp, 21	; 3: 131 197 21
x52072:	jmp strtol	; 3: 233 133 4

strtol_test$376:	; PostCall 21

strtol_test$377:	; GetReturnValue £temporary2461

strtol_test$378:	; Assign value £temporary2461
x52075:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$379:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$380:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x52079:	mov word [bp + 31], @5759$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 108 207

strtol_test$381:	; Parameter 25 text 8
x52084:	mov [bp + 33], bp	; 3: 137 110 33
x52087:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$382:	; Parameter 25 value 10
x52091:	mov eax, [bp + 21]	; 4: 102 139 70 21
x52095:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$383:	; Parameter 25 pointer 14
x52099:	mov ax, [bp + 19]	; 3: 139 70 19
x52102:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$384:	; Parameter 25 base 16
x52105:	mov ax, [bp + 6]	; 3: 139 70 6
x52108:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$385:	; Call 25 printf 0
x52111:	mov word [bp + 25], strtol_test$386	; 5: 199 70 25 162 203
x52116:	mov [bp + 27], bp	; 3: 137 110 27
x52119:	add bp, 25	; 3: 131 197 25
x52122:	mov di, bp	; 2: 137 239
x52124:	add di, 10	; 3: 131 199 10
x52127:	jmp printf	; 3: 233 98 65

strtol_test$386:	; PostCall 25

strtol_test$387:	; Assign base 9
x52130:	mov word [bp + 6], 9	; 5: 199 70 6 9 0

strtol_test$388:	; Assign text[0] 32
x52135:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$389:	; Assign text[1] 32
x52139:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$390:	; Assign text[2] 32
x52143:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$391:	; Assign text[3] 45
x52147:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtol_test$392:	; Assign text[4] 49
x52151:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$393:	; Assign text[5] 50
x52155:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$394:	; Assign text[6] 51
x52159:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$395:	; Assign text[7] 97
x52163:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$396:	; Assign text[8] 98
x52167:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$397:	; Assign text[9] 99
x52171:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$398:	; Assign text[10] 0
x52175:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$399:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$400:	; Parameter 21 text 6
x52179:	mov [bp + 27], bp	; 3: 137 110 27
x52182:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$401:	; address £temporary2474 pointer
x52186:	mov si, bp	; 2: 137 238
x52188:	add si, 19	; 3: 131 198 19

strtol_test$402:	; Parameter 21 £temporary2474 8
x52191:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$403:	; Parameter 21 base 10
x52194:	mov ax, [bp + 6]	; 3: 139 70 6
x52197:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$404:	; Call 21 strtol 0
x52200:	mov word [bp + 21], strtol_test$405	; 5: 199 70 21 246 203
x52205:	mov [bp + 23], bp	; 3: 137 110 23
x52208:	add bp, 21	; 3: 131 197 21
x52211:	jmp strtol	; 3: 233 250 3

strtol_test$405:	; PostCall 21

strtol_test$406:	; GetReturnValue £temporary2475

strtol_test$407:	; Assign value £temporary2475
x52214:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$408:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$409:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x52218:	mov word [bp + 31], @5803$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 130 207

strtol_test$410:	; Parameter 25 text 8
x52223:	mov [bp + 33], bp	; 3: 137 110 33
x52226:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$411:	; Parameter 25 value 10
x52230:	mov eax, [bp + 21]	; 4: 102 139 70 21
x52234:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$412:	; Parameter 25 pointer 14
x52238:	mov ax, [bp + 19]	; 3: 139 70 19
x52241:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$413:	; Parameter 25 base 16
x52244:	mov ax, [bp + 6]	; 3: 139 70 6
x52247:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$414:	; Call 25 printf 0
x52250:	mov word [bp + 25], strtol_test$415	; 5: 199 70 25 45 204
x52255:	mov [bp + 27], bp	; 3: 137 110 27
x52258:	add bp, 25	; 3: 131 197 25
x52261:	mov di, bp	; 2: 137 239
x52263:	add di, 10	; 3: 131 199 10
x52266:	jmp printf	; 3: 233 215 64

strtol_test$415:	; PostCall 25

strtol_test$416:	; Assign base 10
x52269:	mov word [bp + 6], 10	; 5: 199 70 6 10 0

strtol_test$417:	; Assign text[0] 32
x52274:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$418:	; Assign text[1] 32
x52278:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$419:	; Assign text[2] 32
x52282:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$420:	; Assign text[3] 45
x52286:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtol_test$421:	; Assign text[4] 49
x52290:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$422:	; Assign text[5] 50
x52294:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$423:	; Assign text[6] 51
x52298:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$424:	; Assign text[7] 97
x52302:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$425:	; Assign text[8] 98
x52306:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$426:	; Assign text[9] 99
x52310:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$427:	; Assign text[10] 0
x52314:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$428:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$429:	; Parameter 21 text 6
x52318:	mov [bp + 27], bp	; 3: 137 110 27
x52321:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$430:	; address £temporary2488 pointer
x52325:	mov si, bp	; 2: 137 238
x52327:	add si, 19	; 3: 131 198 19

strtol_test$431:	; Parameter 21 £temporary2488 8
x52330:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$432:	; Parameter 21 base 10
x52333:	mov ax, [bp + 6]	; 3: 139 70 6
x52336:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$433:	; Call 21 strtol 0
x52339:	mov word [bp + 21], strtol_test$434	; 5: 199 70 21 129 204
x52344:	mov [bp + 23], bp	; 3: 137 110 23
x52347:	add bp, 21	; 3: 131 197 21
x52350:	jmp strtol	; 3: 233 111 3

strtol_test$434:	; PostCall 21

strtol_test$435:	; GetReturnValue £temporary2489

strtol_test$436:	; Assign value £temporary2489
x52353:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$437:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$438:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x52357:	mov word [bp + 31], @5847$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 152 207

strtol_test$439:	; Parameter 25 text 8
x52362:	mov [bp + 33], bp	; 3: 137 110 33
x52365:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$440:	; Parameter 25 value 10
x52369:	mov eax, [bp + 21]	; 4: 102 139 70 21
x52373:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$441:	; Parameter 25 pointer 14
x52377:	mov ax, [bp + 19]	; 3: 139 70 19
x52380:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$442:	; Parameter 25 base 16
x52383:	mov ax, [bp + 6]	; 3: 139 70 6
x52386:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$443:	; Call 25 printf 0
x52389:	mov word [bp + 25], strtol_test$444	; 5: 199 70 25 184 204
x52394:	mov [bp + 27], bp	; 3: 137 110 27
x52397:	add bp, 25	; 3: 131 197 25
x52400:	mov di, bp	; 2: 137 239
x52402:	add di, 10	; 3: 131 199 10
x52405:	jmp printf	; 3: 233 76 64

strtol_test$444:	; PostCall 25

strtol_test$445:	; Assign base 11
x52408:	mov word [bp + 6], 11	; 5: 199 70 6 11 0

strtol_test$446:	; Assign text[0] 32
x52413:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$447:	; Assign text[1] 32
x52417:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$448:	; Assign text[2] 32
x52421:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$449:	; Assign text[3] 45
x52425:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtol_test$450:	; Assign text[4] 49
x52429:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$451:	; Assign text[5] 50
x52433:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$452:	; Assign text[6] 51
x52437:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$453:	; Assign text[7] 97
x52441:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$454:	; Assign text[8] 98
x52445:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$455:	; Assign text[9] 99
x52449:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$456:	; Assign text[10] 0
x52453:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$457:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$458:	; Parameter 21 text 6
x52457:	mov [bp + 27], bp	; 3: 137 110 27
x52460:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$459:	; address £temporary2502 pointer
x52464:	mov si, bp	; 2: 137 238
x52466:	add si, 19	; 3: 131 198 19

strtol_test$460:	; Parameter 21 £temporary2502 8
x52469:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$461:	; Parameter 21 base 10
x52472:	mov ax, [bp + 6]	; 3: 139 70 6
x52475:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$462:	; Call 21 strtol 0
x52478:	mov word [bp + 21], strtol_test$463	; 5: 199 70 21 12 205
x52483:	mov [bp + 23], bp	; 3: 137 110 23
x52486:	add bp, 21	; 3: 131 197 21
x52489:	jmp strtol	; 3: 233 228 2

strtol_test$463:	; PostCall 21

strtol_test$464:	; GetReturnValue £temporary2503

strtol_test$465:	; Assign value £temporary2503
x52492:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$466:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$467:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x52496:	mov word [bp + 31], @5891$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 174 207

strtol_test$468:	; Parameter 25 text 8
x52501:	mov [bp + 33], bp	; 3: 137 110 33
x52504:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$469:	; Parameter 25 value 10
x52508:	mov eax, [bp + 21]	; 4: 102 139 70 21
x52512:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$470:	; Parameter 25 pointer 14
x52516:	mov ax, [bp + 19]	; 3: 139 70 19
x52519:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$471:	; Parameter 25 base 16
x52522:	mov ax, [bp + 6]	; 3: 139 70 6
x52525:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$472:	; Call 25 printf 0
x52528:	mov word [bp + 25], strtol_test$473	; 5: 199 70 25 67 205
x52533:	mov [bp + 27], bp	; 3: 137 110 27
x52536:	add bp, 25	; 3: 131 197 25
x52539:	mov di, bp	; 2: 137 239
x52541:	add di, 10	; 3: 131 199 10
x52544:	jmp printf	; 3: 233 193 63

strtol_test$473:	; PostCall 25

strtol_test$474:	; Assign base 12
x52547:	mov word [bp + 6], 12	; 5: 199 70 6 12 0

strtol_test$475:	; Assign text[0] 32
x52552:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$476:	; Assign text[1] 32
x52556:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$477:	; Assign text[2] 32
x52560:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$478:	; Assign text[3] 45
x52564:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtol_test$479:	; Assign text[4] 49
x52568:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$480:	; Assign text[5] 50
x52572:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$481:	; Assign text[6] 51
x52576:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$482:	; Assign text[7] 65
x52580:	mov byte [bp + 15], 65	; 4: 198 70 15 65

strtol_test$483:	; Assign text[8] 66
x52584:	mov byte [bp + 16], 66	; 4: 198 70 16 66

strtol_test$484:	; Assign text[9] 67
x52588:	mov byte [bp + 17], 67	; 4: 198 70 17 67

strtol_test$485:	; Assign text[10] 0
x52592:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$486:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$487:	; Parameter 21 text 6
x52596:	mov [bp + 27], bp	; 3: 137 110 27
x52599:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$488:	; address £temporary2516 pointer
x52603:	mov si, bp	; 2: 137 238
x52605:	add si, 19	; 3: 131 198 19

strtol_test$489:	; Parameter 21 £temporary2516 8
x52608:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$490:	; Parameter 21 base 10
x52611:	mov ax, [bp + 6]	; 3: 139 70 6
x52614:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$491:	; Call 21 strtol 0
x52617:	mov word [bp + 21], strtol_test$492	; 5: 199 70 21 151 205
x52622:	mov [bp + 23], bp	; 3: 137 110 23
x52625:	add bp, 21	; 3: 131 197 21
x52628:	jmp strtol	; 3: 233 89 2

strtol_test$492:	; PostCall 21

strtol_test$493:	; GetReturnValue £temporary2517

strtol_test$494:	; Assign value £temporary2517
x52631:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$495:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$496:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x52635:	mov word [bp + 31], @5935$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 196 207

strtol_test$497:	; Parameter 25 text 8
x52640:	mov [bp + 33], bp	; 3: 137 110 33
x52643:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$498:	; Parameter 25 value 10
x52647:	mov eax, [bp + 21]	; 4: 102 139 70 21
x52651:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$499:	; Parameter 25 pointer 14
x52655:	mov ax, [bp + 19]	; 3: 139 70 19
x52658:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$500:	; Parameter 25 base 16
x52661:	mov ax, [bp + 6]	; 3: 139 70 6
x52664:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$501:	; Call 25 printf 0
x52667:	mov word [bp + 25], strtol_test$502	; 5: 199 70 25 206 205
x52672:	mov [bp + 27], bp	; 3: 137 110 27
x52675:	add bp, 25	; 3: 131 197 25
x52678:	mov di, bp	; 2: 137 239
x52680:	add di, 10	; 3: 131 199 10
x52683:	jmp printf	; 3: 233 54 63

strtol_test$502:	; PostCall 25

strtol_test$503:	; Assign base 13
x52686:	mov word [bp + 6], 13	; 5: 199 70 6 13 0

strtol_test$504:	; Assign text[0] 32
x52691:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtol_test$505:	; Assign text[1] 32
x52695:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtol_test$506:	; Assign text[2] 32
x52699:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtol_test$507:	; Assign text[3] 45
x52703:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtol_test$508:	; Assign text[4] 49
x52707:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtol_test$509:	; Assign text[5] 50
x52711:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtol_test$510:	; Assign text[6] 51
x52715:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtol_test$511:	; Assign text[7] 97
x52719:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtol_test$512:	; Assign text[8] 98
x52723:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtol_test$513:	; Assign text[9] 99
x52727:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtol_test$514:	; Assign text[10] 0
x52731:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtol_test$515:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$516:	; Parameter 21 text 6
x52735:	mov [bp + 27], bp	; 3: 137 110 27
x52738:	add word [bp + 27], 8	; 4: 131 70 27 8

strtol_test$517:	; address £temporary2530 pointer
x52742:	mov si, bp	; 2: 137 238
x52744:	add si, 19	; 3: 131 198 19

strtol_test$518:	; Parameter 21 £temporary2530 8
x52747:	mov [bp + 29], si	; 3: 137 118 29

strtol_test$519:	; Parameter 21 base 10
x52750:	mov ax, [bp + 6]	; 3: 139 70 6
x52753:	mov [bp + 31], ax	; 3: 137 70 31

strtol_test$520:	; Call 21 strtol 0
x52756:	mov word [bp + 21], strtol_test$521	; 5: 199 70 21 34 206
x52761:	mov [bp + 23], bp	; 3: 137 110 23
x52764:	add bp, 21	; 3: 131 197 21
x52767:	jmp strtol	; 3: 233 206 1

strtol_test$521:	; PostCall 21

strtol_test$522:	; GetReturnValue £temporary2531

strtol_test$523:	; Assign value £temporary2531
x52770:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtol_test$524:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol_test$525:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x52774:	mov word [bp + 31], @5979$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 218 207

strtol_test$526:	; Parameter 25 text 8
x52779:	mov [bp + 33], bp	; 3: 137 110 33
x52782:	add word [bp + 33], 8	; 4: 131 70 33 8

strtol_test$527:	; Parameter 25 value 10
x52786:	mov eax, [bp + 21]	; 4: 102 139 70 21
x52790:	mov [bp + 35], eax	; 4: 102 137 70 35

strtol_test$528:	; Parameter 25 pointer 14
x52794:	mov ax, [bp + 19]	; 3: 139 70 19
x52797:	mov [bp + 39], ax	; 3: 137 70 39

strtol_test$529:	; Parameter 25 base 16
x52800:	mov ax, [bp + 6]	; 3: 139 70 6
x52803:	mov [bp + 41], ax	; 3: 137 70 41

strtol_test$530:	; Call 25 printf 0
x52806:	mov word [bp + 25], strtol_test$531	; 5: 199 70 25 89 206
x52811:	mov [bp + 27], bp	; 3: 137 110 27
x52814:	add bp, 25	; 3: 131 197 25
x52817:	mov di, bp	; 2: 137 239
x52819:	add di, 10	; 3: 131 199 10
x52822:	jmp printf	; 3: 233 171 62

strtol_test$531:	; PostCall 25

strtol_test$532:	; Return 0
x52825:	mov ax, [bp]	; 3: 139 70 0
x52828:	mov di, [bp + 4]	; 3: 139 126 4
x52831:	mov bp, [bp + 2]	; 3: 139 110 2
x52834:	jmp ax	; 2: 255 224

strtol_test$533:	; FunctionEnd strtol_test

@5201$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x52836:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5248$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x52858:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5298$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x52880:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5348$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x52902:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5392$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x52924:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5439$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x52946:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5489$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x52968:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5539$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x52990:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5583$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x53012:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5627$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x53034:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5671$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x53056:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5715$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x53078:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5759$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x53100:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5803$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x53122:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5847$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x53144:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5891$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x53166:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5935$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x53188:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@5979$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x53210:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

strtol:	; Assign g_inStatus 1
x53232:	mov word [g_inStatus], 1	; 6: 199 6 199 95 1 0

strtol$1:	; Assign g_inDevice s
x53238:	mov ax, [bp + 6]	; 3: 139 70 6
x53241:	mov [g_inDevice], ax	; 3: 163 201 95

strtol$2:	; Assign g_inChars 0
x53244:	mov word [g_inChars], 0	; 6: 199 6 236 100 0 0

strtol$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtol$4:	; Parameter 12 base 6
x53250:	mov ax, [bp + 10]	; 3: 139 70 10
x53253:	mov [bp + 18], ax	; 3: 137 70 18

strtol$5:	; Call 12 scanLongInt 0
x53256:	mov word [bp + 12], strtol$6	; 5: 199 70 12 22 208
x53261:	mov [bp + 14], bp	; 3: 137 110 14
x53264:	add bp, 12	; 3: 131 197 12
x53267:	jmp scanLongInt	; 3: 233 203 151

strtol$6:	; PostCall 12

strtol$7:	; GetReturnValue £temporary2246

strtol$8:	; Assign value £temporary2246
x53270:	mov [bp + 12], ebx	; 4: 102 137 94 12

strtol$9:	; Equal 12 endp 0
x53274:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x53278:	je strtol$12	; 2: 116 12

strtol$10:	; Deref £temporary2248 -> endp endp 0
x53280:	mov si, [bp + 8]	; 3: 139 118 8

strtol$11:	; BinaryAdd £temporary2248 -> endp s g_inChars
x53283:	mov ax, [bp + 6]	; 3: 139 70 6
x53286:	add ax, [g_inChars]	; 4: 3 6 236 100
x53290:	mov [si], ax	; 2: 137 4

strtol$12:	; SetReturnValue value
x53292:	mov ebx, [bp + 12]	; 4: 102 139 94 12

strtol$13:	; Return value
x53296:	mov ax, [bp]	; 3: 139 70 0
x53299:	mov di, [bp + 4]	; 3: 139 126 4
x53302:	mov bp, [bp + 2]	; 3: 139 110 2
x53305:	jmp ax	; 2: 255 224

strtol$14:	; FunctionEnd strtol

strtoul_test:	; Assign base 0
x53307:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtoul_test$1:	; Assign text[0] 32
x53312:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$2:	; Assign text[1] 32
x53316:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$3:	; Assign text[2] 32
x53320:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$4:	; Assign text[3] 43
x53324:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtoul_test$5:	; Assign text[4] 49
x53328:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$6:	; Assign text[5] 50
x53332:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$7:	; Assign text[6] 51
x53336:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$8:	; Assign text[7] 97
x53340:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$9:	; Assign text[8] 98
x53344:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$10:	; Assign text[9] 99
x53348:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$11:	; Assign text[10] 0
x53352:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$12:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$13:	; Parameter 21 text 6
x53356:	mov [bp + 27], bp	; 3: 137 110 27
x53359:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$14:	; address £temporary2706 pointer
x53363:	mov si, bp	; 2: 137 238
x53365:	add si, 19	; 3: 131 198 19

strtoul_test$15:	; Parameter 21 £temporary2706 8
x53368:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$16:	; Parameter 21 base 10
x53371:	mov ax, [bp + 6]	; 3: 139 70 6
x53374:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$17:	; Call 21 strtoul 0
x53377:	mov word [bp + 21], strtoul_test$18	; 5: 199 70 21 143 208
x53382:	mov [bp + 23], bp	; 3: 137 110 23
x53385:	add bp, 21	; 3: 131 197 21
x53388:	jmp strtoul	; 3: 233 49 11

strtoul_test$18:	; PostCall 21

strtoul_test$19:	; GetReturnValue £temporary2707

strtoul_test$20:	; Assign value £temporary2707
x53391:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$21:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$22:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x53395:	mov word [bp + 31], @6186$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 52 218

strtoul_test$23:	; Parameter 25 text 8
x53400:	mov [bp + 33], bp	; 3: 137 110 33
x53403:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$24:	; Parameter 25 value 10
x53407:	mov eax, [bp + 21]	; 4: 102 139 70 21
x53411:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$25:	; Parameter 25 pointer 14
x53415:	mov ax, [bp + 19]	; 3: 139 70 19
x53418:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$26:	; Parameter 25 base 16
x53421:	mov ax, [bp + 6]	; 3: 139 70 6
x53424:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$27:	; Call 25 printf 0
x53427:	mov word [bp + 25], strtoul_test$28	; 5: 199 70 25 198 208
x53432:	mov [bp + 27], bp	; 3: 137 110 27
x53435:	add bp, 25	; 3: 131 197 25
x53438:	mov di, bp	; 2: 137 239
x53440:	add di, 10	; 3: 131 199 10
x53443:	jmp printf	; 3: 233 62 60

strtoul_test$28:	; PostCall 25

strtoul_test$29:	; Assign base 0
x53446:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtoul_test$30:	; Assign text[0] 32
x53451:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$31:	; Assign text[1] 32
x53455:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$32:	; Assign text[2] 32
x53459:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$33:	; Assign text[3] 43
x53463:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtoul_test$34:	; Assign text[4] 48
x53467:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtoul_test$35:	; Assign text[5] 49
x53471:	mov byte [bp + 13], 49	; 4: 198 70 13 49

strtoul_test$36:	; Assign text[6] 50
x53475:	mov byte [bp + 14], 50	; 4: 198 70 14 50

strtoul_test$37:	; Assign text[7] 51
x53479:	mov byte [bp + 15], 51	; 4: 198 70 15 51

strtoul_test$38:	; Assign text[8] 97
x53483:	mov byte [bp + 16], 97	; 4: 198 70 16 97

strtoul_test$39:	; Assign text[9] 98
x53487:	mov byte [bp + 17], 98	; 4: 198 70 17 98

strtoul_test$40:	; Assign text[10] 99
x53491:	mov byte [bp + 18], 99	; 4: 198 70 18 99

strtoul_test$41:	; Assign text[11] 0
x53495:	mov byte [bp + 19], 0	; 4: 198 70 19 0

strtoul_test$42:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$43:	; Parameter 22 text 6
x53499:	mov [bp + 28], bp	; 3: 137 110 28
x53502:	add word [bp + 28], 8	; 4: 131 70 28 8

strtoul_test$44:	; address £temporary2721 pointer
x53506:	mov si, bp	; 2: 137 238
x53508:	add si, 20	; 3: 131 198 20

strtoul_test$45:	; Parameter 22 £temporary2721 8
x53511:	mov [bp + 30], si	; 3: 137 118 30

strtoul_test$46:	; Parameter 22 base 10
x53514:	mov ax, [bp + 6]	; 3: 139 70 6
x53517:	mov [bp + 32], ax	; 3: 137 70 32

strtoul_test$47:	; Call 22 strtoul 0
x53520:	mov word [bp + 22], strtoul_test$48	; 5: 199 70 22 30 209
x53525:	mov [bp + 24], bp	; 3: 137 110 24
x53528:	add bp, 22	; 3: 131 197 22
x53531:	jmp strtoul	; 3: 233 162 10

strtoul_test$48:	; PostCall 22

strtoul_test$49:	; GetReturnValue £temporary2722

strtoul_test$50:	; Assign value £temporary2722
x53534:	mov [bp + 22], ebx	; 4: 102 137 94 22

strtoul_test$51:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$52:	; Parameter 26 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x53538:	mov word [bp + 32], @6233$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 32 74 218

strtoul_test$53:	; Parameter 26 text 8
x53543:	mov [bp + 34], bp	; 3: 137 110 34
x53546:	add word [bp + 34], 8	; 4: 131 70 34 8

strtoul_test$54:	; Parameter 26 value 10
x53550:	mov eax, [bp + 22]	; 4: 102 139 70 22
x53554:	mov [bp + 36], eax	; 4: 102 137 70 36

strtoul_test$55:	; Parameter 26 pointer 14
x53558:	mov ax, [bp + 20]	; 3: 139 70 20
x53561:	mov [bp + 40], ax	; 3: 137 70 40

strtoul_test$56:	; Parameter 26 base 16
x53564:	mov ax, [bp + 6]	; 3: 139 70 6
x53567:	mov [bp + 42], ax	; 3: 137 70 42

strtoul_test$57:	; Call 26 printf 0
x53570:	mov word [bp + 26], strtoul_test$58	; 5: 199 70 26 85 209
x53575:	mov [bp + 28], bp	; 3: 137 110 28
x53578:	add bp, 26	; 3: 131 197 26
x53581:	mov di, bp	; 2: 137 239
x53583:	add di, 10	; 3: 131 199 10
x53586:	jmp printf	; 3: 233 175 59

strtoul_test$58:	; PostCall 26

strtoul_test$59:	; Assign base 0
x53589:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtoul_test$60:	; Assign text[0] 32
x53594:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$61:	; Assign text[1] 32
x53598:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$62:	; Assign text[2] 32
x53602:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$63:	; Assign text[3] 43
x53606:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtoul_test$64:	; Assign text[4] 48
x53610:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtoul_test$65:	; Assign text[5] 120
x53614:	mov byte [bp + 13], 120	; 4: 198 70 13 120

strtoul_test$66:	; Assign text[6] 49
x53618:	mov byte [bp + 14], 49	; 4: 198 70 14 49

strtoul_test$67:	; Assign text[7] 50
x53622:	mov byte [bp + 15], 50	; 4: 198 70 15 50

strtoul_test$68:	; Assign text[8] 51
x53626:	mov byte [bp + 16], 51	; 4: 198 70 16 51

strtoul_test$69:	; Assign text[9] 65
x53630:	mov byte [bp + 17], 65	; 4: 198 70 17 65

strtoul_test$70:	; Assign text[10] 66
x53634:	mov byte [bp + 18], 66	; 4: 198 70 18 66

strtoul_test$71:	; Assign text[11] 67
x53638:	mov byte [bp + 19], 67	; 4: 198 70 19 67

strtoul_test$72:	; Assign text[12] 0
x53642:	mov byte [bp + 20], 0	; 4: 198 70 20 0

strtoul_test$73:	; CallHeader 23 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$74:	; Parameter 23 text 6
x53646:	mov [bp + 29], bp	; 3: 137 110 29
x53649:	add word [bp + 29], 8	; 4: 131 70 29 8

strtoul_test$75:	; address £temporary2737 pointer
x53653:	mov si, bp	; 2: 137 238
x53655:	add si, 21	; 3: 131 198 21

strtoul_test$76:	; Parameter 23 £temporary2737 8
x53658:	mov [bp + 31], si	; 3: 137 118 31

strtoul_test$77:	; Parameter 23 base 10
x53661:	mov ax, [bp + 6]	; 3: 139 70 6
x53664:	mov [bp + 33], ax	; 3: 137 70 33

strtoul_test$78:	; Call 23 strtoul 0
x53667:	mov word [bp + 23], strtoul_test$79	; 5: 199 70 23 177 209
x53672:	mov [bp + 25], bp	; 3: 137 110 25
x53675:	add bp, 23	; 3: 131 197 23
x53678:	jmp strtoul	; 3: 233 15 10

strtoul_test$79:	; PostCall 23

strtoul_test$80:	; GetReturnValue £temporary2738

strtoul_test$81:	; Assign value £temporary2738
x53681:	mov [bp + 23], ebx	; 4: 102 137 94 23

strtoul_test$82:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$83:	; Parameter 27 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x53685:	mov word [bp + 33], @6283$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 33 96 218

strtoul_test$84:	; Parameter 27 text 8
x53690:	mov [bp + 35], bp	; 3: 137 110 35
x53693:	add word [bp + 35], 8	; 4: 131 70 35 8

strtoul_test$85:	; Parameter 27 value 10
x53697:	mov eax, [bp + 23]	; 4: 102 139 70 23
x53701:	mov [bp + 37], eax	; 4: 102 137 70 37

strtoul_test$86:	; Parameter 27 pointer 14
x53705:	mov ax, [bp + 21]	; 3: 139 70 21
x53708:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$87:	; Parameter 27 base 16
x53711:	mov ax, [bp + 6]	; 3: 139 70 6
x53714:	mov [bp + 43], ax	; 3: 137 70 43

strtoul_test$88:	; Call 27 printf 0
x53717:	mov word [bp + 27], strtoul_test$89	; 5: 199 70 27 232 209
x53722:	mov [bp + 29], bp	; 3: 137 110 29
x53725:	add bp, 27	; 3: 131 197 27
x53728:	mov di, bp	; 2: 137 239
x53730:	add di, 10	; 3: 131 199 10
x53733:	jmp printf	; 3: 233 28 59

strtoul_test$89:	; PostCall 27

strtoul_test$90:	; Assign base 0
x53736:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtoul_test$91:	; Assign text[0] 32
x53741:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$92:	; Assign text[1] 32
x53745:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$93:	; Assign text[2] 32
x53749:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$94:	; Assign text[3] 43
x53753:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtoul_test$95:	; Assign text[4] 48
x53757:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtoul_test$96:	; Assign text[5] 88
x53761:	mov byte [bp + 13], 88	; 4: 198 70 13 88

strtoul_test$97:	; Assign text[6] 49
x53765:	mov byte [bp + 14], 49	; 4: 198 70 14 49

strtoul_test$98:	; Assign text[7] 50
x53769:	mov byte [bp + 15], 50	; 4: 198 70 15 50

strtoul_test$99:	; Assign text[8] 51
x53773:	mov byte [bp + 16], 51	; 4: 198 70 16 51

strtoul_test$100:	; Assign text[9] 97
x53777:	mov byte [bp + 17], 97	; 4: 198 70 17 97

strtoul_test$101:	; Assign text[10] 98
x53781:	mov byte [bp + 18], 98	; 4: 198 70 18 98

strtoul_test$102:	; Assign text[11] 99
x53785:	mov byte [bp + 19], 99	; 4: 198 70 19 99

strtoul_test$103:	; Assign text[12] 0
x53789:	mov byte [bp + 20], 0	; 4: 198 70 20 0

strtoul_test$104:	; CallHeader 23 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$105:	; Parameter 23 text 6
x53793:	mov [bp + 29], bp	; 3: 137 110 29
x53796:	add word [bp + 29], 8	; 4: 131 70 29 8

strtoul_test$106:	; address £temporary2753 pointer
x53800:	mov si, bp	; 2: 137 238
x53802:	add si, 21	; 3: 131 198 21

strtoul_test$107:	; Parameter 23 £temporary2753 8
x53805:	mov [bp + 31], si	; 3: 137 118 31

strtoul_test$108:	; Parameter 23 base 10
x53808:	mov ax, [bp + 6]	; 3: 139 70 6
x53811:	mov [bp + 33], ax	; 3: 137 70 33

strtoul_test$109:	; Call 23 strtoul 0
x53814:	mov word [bp + 23], strtoul_test$110	; 5: 199 70 23 68 210
x53819:	mov [bp + 25], bp	; 3: 137 110 25
x53822:	add bp, 23	; 3: 131 197 23
x53825:	jmp strtoul	; 3: 233 124 9

strtoul_test$110:	; PostCall 23

strtoul_test$111:	; GetReturnValue £temporary2754

strtoul_test$112:	; Assign value £temporary2754
x53828:	mov [bp + 23], ebx	; 4: 102 137 94 23

strtoul_test$113:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$114:	; Parameter 27 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x53832:	mov word [bp + 33], @6333$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 33 118 218

strtoul_test$115:	; Parameter 27 text 8
x53837:	mov [bp + 35], bp	; 3: 137 110 35
x53840:	add word [bp + 35], 8	; 4: 131 70 35 8

strtoul_test$116:	; Parameter 27 value 10
x53844:	mov eax, [bp + 23]	; 4: 102 139 70 23
x53848:	mov [bp + 37], eax	; 4: 102 137 70 37

strtoul_test$117:	; Parameter 27 pointer 14
x53852:	mov ax, [bp + 21]	; 3: 139 70 21
x53855:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$118:	; Parameter 27 base 16
x53858:	mov ax, [bp + 6]	; 3: 139 70 6
x53861:	mov [bp + 43], ax	; 3: 137 70 43

strtoul_test$119:	; Call 27 printf 0
x53864:	mov word [bp + 27], strtoul_test$120	; 5: 199 70 27 123 210
x53869:	mov [bp + 29], bp	; 3: 137 110 29
x53872:	add bp, 27	; 3: 131 197 27
x53875:	mov di, bp	; 2: 137 239
x53877:	add di, 10	; 3: 131 199 10
x53880:	jmp printf	; 3: 233 137 58

strtoul_test$120:	; PostCall 27

strtoul_test$121:	; Assign base 0
x53883:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtoul_test$122:	; Assign text[0] 32
x53888:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$123:	; Assign text[1] 32
x53892:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$124:	; Assign text[2] 32
x53896:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$125:	; Assign text[3] 45
x53900:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtoul_test$126:	; Assign text[4] 49
x53904:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$127:	; Assign text[5] 50
x53908:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$128:	; Assign text[6] 51
x53912:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$129:	; Assign text[7] 97
x53916:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$130:	; Assign text[8] 98
x53920:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$131:	; Assign text[9] 99
x53924:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$132:	; Assign text[10] 0
x53928:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$133:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$134:	; Parameter 21 text 6
x53932:	mov [bp + 27], bp	; 3: 137 110 27
x53935:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$135:	; address £temporary2767 pointer
x53939:	mov si, bp	; 2: 137 238
x53941:	add si, 19	; 3: 131 198 19

strtoul_test$136:	; Parameter 21 £temporary2767 8
x53944:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$137:	; Parameter 21 base 10
x53947:	mov ax, [bp + 6]	; 3: 139 70 6
x53950:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$138:	; Call 21 strtoul 0
x53953:	mov word [bp + 21], strtoul_test$139	; 5: 199 70 21 207 210
x53958:	mov [bp + 23], bp	; 3: 137 110 23
x53961:	add bp, 21	; 3: 131 197 21
x53964:	jmp strtoul	; 3: 233 241 8

strtoul_test$139:	; PostCall 21

strtoul_test$140:	; GetReturnValue £temporary2768

strtoul_test$141:	; Assign value £temporary2768
x53967:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$142:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$143:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x53971:	mov word [bp + 31], @6377$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 140 218

strtoul_test$144:	; Parameter 25 text 8
x53976:	mov [bp + 33], bp	; 3: 137 110 33
x53979:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$145:	; Parameter 25 value 10
x53983:	mov eax, [bp + 21]	; 4: 102 139 70 21
x53987:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$146:	; Parameter 25 pointer 14
x53991:	mov ax, [bp + 19]	; 3: 139 70 19
x53994:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$147:	; Parameter 25 base 16
x53997:	mov ax, [bp + 6]	; 3: 139 70 6
x54000:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$148:	; Call 25 printf 0
x54003:	mov word [bp + 25], strtoul_test$149	; 5: 199 70 25 6 211
x54008:	mov [bp + 27], bp	; 3: 137 110 27
x54011:	add bp, 25	; 3: 131 197 25
x54014:	mov di, bp	; 2: 137 239
x54016:	add di, 10	; 3: 131 199 10
x54019:	jmp printf	; 3: 233 254 57

strtoul_test$149:	; PostCall 25

strtoul_test$150:	; Assign base 0
x54022:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtoul_test$151:	; Assign text[0] 32
x54027:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$152:	; Assign text[1] 32
x54031:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$153:	; Assign text[2] 32
x54035:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$154:	; Assign text[3] 45
x54039:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtoul_test$155:	; Assign text[4] 48
x54043:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtoul_test$156:	; Assign text[5] 49
x54047:	mov byte [bp + 13], 49	; 4: 198 70 13 49

strtoul_test$157:	; Assign text[6] 50
x54051:	mov byte [bp + 14], 50	; 4: 198 70 14 50

strtoul_test$158:	; Assign text[7] 51
x54055:	mov byte [bp + 15], 51	; 4: 198 70 15 51

strtoul_test$159:	; Assign text[8] 97
x54059:	mov byte [bp + 16], 97	; 4: 198 70 16 97

strtoul_test$160:	; Assign text[9] 98
x54063:	mov byte [bp + 17], 98	; 4: 198 70 17 98

strtoul_test$161:	; Assign text[10] 99
x54067:	mov byte [bp + 18], 99	; 4: 198 70 18 99

strtoul_test$162:	; Assign text[11] 0
x54071:	mov byte [bp + 19], 0	; 4: 198 70 19 0

strtoul_test$163:	; CallHeader 22 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$164:	; Parameter 22 text 6
x54075:	mov [bp + 28], bp	; 3: 137 110 28
x54078:	add word [bp + 28], 8	; 4: 131 70 28 8

strtoul_test$165:	; address £temporary2782 pointer
x54082:	mov si, bp	; 2: 137 238
x54084:	add si, 20	; 3: 131 198 20

strtoul_test$166:	; Parameter 22 £temporary2782 8
x54087:	mov [bp + 30], si	; 3: 137 118 30

strtoul_test$167:	; Parameter 22 base 10
x54090:	mov ax, [bp + 6]	; 3: 139 70 6
x54093:	mov [bp + 32], ax	; 3: 137 70 32

strtoul_test$168:	; Call 22 strtoul 0
x54096:	mov word [bp + 22], strtoul_test$169	; 5: 199 70 22 94 211
x54101:	mov [bp + 24], bp	; 3: 137 110 24
x54104:	add bp, 22	; 3: 131 197 22
x54107:	jmp strtoul	; 3: 233 98 8

strtoul_test$169:	; PostCall 22

strtoul_test$170:	; GetReturnValue £temporary2783

strtoul_test$171:	; Assign value £temporary2783
x54110:	mov [bp + 22], ebx	; 4: 102 137 94 22

strtoul_test$172:	; CallHeader 26 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$173:	; Parameter 26 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x54114:	mov word [bp + 32], @6424$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 32 162 218

strtoul_test$174:	; Parameter 26 text 8
x54119:	mov [bp + 34], bp	; 3: 137 110 34
x54122:	add word [bp + 34], 8	; 4: 131 70 34 8

strtoul_test$175:	; Parameter 26 value 10
x54126:	mov eax, [bp + 22]	; 4: 102 139 70 22
x54130:	mov [bp + 36], eax	; 4: 102 137 70 36

strtoul_test$176:	; Parameter 26 pointer 14
x54134:	mov ax, [bp + 20]	; 3: 139 70 20
x54137:	mov [bp + 40], ax	; 3: 137 70 40

strtoul_test$177:	; Parameter 26 base 16
x54140:	mov ax, [bp + 6]	; 3: 139 70 6
x54143:	mov [bp + 42], ax	; 3: 137 70 42

strtoul_test$178:	; Call 26 printf 0
x54146:	mov word [bp + 26], strtoul_test$179	; 5: 199 70 26 149 211
x54151:	mov [bp + 28], bp	; 3: 137 110 28
x54154:	add bp, 26	; 3: 131 197 26
x54157:	mov di, bp	; 2: 137 239
x54159:	add di, 10	; 3: 131 199 10
x54162:	jmp printf	; 3: 233 111 57

strtoul_test$179:	; PostCall 26

strtoul_test$180:	; Assign base 0
x54165:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtoul_test$181:	; Assign text[0] 32
x54170:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$182:	; Assign text[1] 32
x54174:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$183:	; Assign text[2] 32
x54178:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$184:	; Assign text[3] 45
x54182:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtoul_test$185:	; Assign text[4] 48
x54186:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtoul_test$186:	; Assign text[5] 120
x54190:	mov byte [bp + 13], 120	; 4: 198 70 13 120

strtoul_test$187:	; Assign text[6] 49
x54194:	mov byte [bp + 14], 49	; 4: 198 70 14 49

strtoul_test$188:	; Assign text[7] 50
x54198:	mov byte [bp + 15], 50	; 4: 198 70 15 50

strtoul_test$189:	; Assign text[8] 51
x54202:	mov byte [bp + 16], 51	; 4: 198 70 16 51

strtoul_test$190:	; Assign text[9] 65
x54206:	mov byte [bp + 17], 65	; 4: 198 70 17 65

strtoul_test$191:	; Assign text[10] 66
x54210:	mov byte [bp + 18], 66	; 4: 198 70 18 66

strtoul_test$192:	; Assign text[11] 67
x54214:	mov byte [bp + 19], 67	; 4: 198 70 19 67

strtoul_test$193:	; Assign text[12] 0
x54218:	mov byte [bp + 20], 0	; 4: 198 70 20 0

strtoul_test$194:	; CallHeader 23 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$195:	; Parameter 23 text 6
x54222:	mov [bp + 29], bp	; 3: 137 110 29
x54225:	add word [bp + 29], 8	; 4: 131 70 29 8

strtoul_test$196:	; address £temporary2798 pointer
x54229:	mov si, bp	; 2: 137 238
x54231:	add si, 21	; 3: 131 198 21

strtoul_test$197:	; Parameter 23 £temporary2798 8
x54234:	mov [bp + 31], si	; 3: 137 118 31

strtoul_test$198:	; Parameter 23 base 10
x54237:	mov ax, [bp + 6]	; 3: 139 70 6
x54240:	mov [bp + 33], ax	; 3: 137 70 33

strtoul_test$199:	; Call 23 strtoul 0
x54243:	mov word [bp + 23], strtoul_test$200	; 5: 199 70 23 241 211
x54248:	mov [bp + 25], bp	; 3: 137 110 25
x54251:	add bp, 23	; 3: 131 197 23
x54254:	jmp strtoul	; 3: 233 207 7

strtoul_test$200:	; PostCall 23

strtoul_test$201:	; GetReturnValue £temporary2799

strtoul_test$202:	; Assign value £temporary2799
x54257:	mov [bp + 23], ebx	; 4: 102 137 94 23

strtoul_test$203:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$204:	; Parameter 27 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x54261:	mov word [bp + 33], @6474$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 33 184 218

strtoul_test$205:	; Parameter 27 text 8
x54266:	mov [bp + 35], bp	; 3: 137 110 35
x54269:	add word [bp + 35], 8	; 4: 131 70 35 8

strtoul_test$206:	; Parameter 27 value 10
x54273:	mov eax, [bp + 23]	; 4: 102 139 70 23
x54277:	mov [bp + 37], eax	; 4: 102 137 70 37

strtoul_test$207:	; Parameter 27 pointer 14
x54281:	mov ax, [bp + 21]	; 3: 139 70 21
x54284:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$208:	; Parameter 27 base 16
x54287:	mov ax, [bp + 6]	; 3: 139 70 6
x54290:	mov [bp + 43], ax	; 3: 137 70 43

strtoul_test$209:	; Call 27 printf 0
x54293:	mov word [bp + 27], strtoul_test$210	; 5: 199 70 27 40 212
x54298:	mov [bp + 29], bp	; 3: 137 110 29
x54301:	add bp, 27	; 3: 131 197 27
x54304:	mov di, bp	; 2: 137 239
x54306:	add di, 10	; 3: 131 199 10
x54309:	jmp printf	; 3: 233 220 56

strtoul_test$210:	; PostCall 27

strtoul_test$211:	; Assign base 0
x54312:	mov word [bp + 6], 0	; 5: 199 70 6 0 0

strtoul_test$212:	; Assign text[0] 32
x54317:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$213:	; Assign text[1] 32
x54321:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$214:	; Assign text[2] 32
x54325:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$215:	; Assign text[3] 45
x54329:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtoul_test$216:	; Assign text[4] 48
x54333:	mov byte [bp + 12], 48	; 4: 198 70 12 48

strtoul_test$217:	; Assign text[5] 88
x54337:	mov byte [bp + 13], 88	; 4: 198 70 13 88

strtoul_test$218:	; Assign text[6] 49
x54341:	mov byte [bp + 14], 49	; 4: 198 70 14 49

strtoul_test$219:	; Assign text[7] 50
x54345:	mov byte [bp + 15], 50	; 4: 198 70 15 50

strtoul_test$220:	; Assign text[8] 51
x54349:	mov byte [bp + 16], 51	; 4: 198 70 16 51

strtoul_test$221:	; Assign text[9] 97
x54353:	mov byte [bp + 17], 97	; 4: 198 70 17 97

strtoul_test$222:	; Assign text[10] 98
x54357:	mov byte [bp + 18], 98	; 4: 198 70 18 98

strtoul_test$223:	; Assign text[11] 99
x54361:	mov byte [bp + 19], 99	; 4: 198 70 19 99

strtoul_test$224:	; Assign text[12] 0
x54365:	mov byte [bp + 20], 0	; 4: 198 70 20 0

strtoul_test$225:	; CallHeader 23 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$226:	; Parameter 23 text 6
x54369:	mov [bp + 29], bp	; 3: 137 110 29
x54372:	add word [bp + 29], 8	; 4: 131 70 29 8

strtoul_test$227:	; address £temporary2814 pointer
x54376:	mov si, bp	; 2: 137 238
x54378:	add si, 21	; 3: 131 198 21

strtoul_test$228:	; Parameter 23 £temporary2814 8
x54381:	mov [bp + 31], si	; 3: 137 118 31

strtoul_test$229:	; Parameter 23 base 10
x54384:	mov ax, [bp + 6]	; 3: 139 70 6
x54387:	mov [bp + 33], ax	; 3: 137 70 33

strtoul_test$230:	; Call 23 strtoul 0
x54390:	mov word [bp + 23], strtoul_test$231	; 5: 199 70 23 132 212
x54395:	mov [bp + 25], bp	; 3: 137 110 25
x54398:	add bp, 23	; 3: 131 197 23
x54401:	jmp strtoul	; 3: 233 60 7

strtoul_test$231:	; PostCall 23

strtoul_test$232:	; GetReturnValue £temporary2815

strtoul_test$233:	; Assign value £temporary2815
x54404:	mov [bp + 23], ebx	; 4: 102 137 94 23

strtoul_test$234:	; CallHeader 27 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$235:	; Parameter 27 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x54408:	mov word [bp + 33], @6524$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 33 206 218

strtoul_test$236:	; Parameter 27 text 8
x54413:	mov [bp + 35], bp	; 3: 137 110 35
x54416:	add word [bp + 35], 8	; 4: 131 70 35 8

strtoul_test$237:	; Parameter 27 value 10
x54420:	mov eax, [bp + 23]	; 4: 102 139 70 23
x54424:	mov [bp + 37], eax	; 4: 102 137 70 37

strtoul_test$238:	; Parameter 27 pointer 14
x54428:	mov ax, [bp + 21]	; 3: 139 70 21
x54431:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$239:	; Parameter 27 base 16
x54434:	mov ax, [bp + 6]	; 3: 139 70 6
x54437:	mov [bp + 43], ax	; 3: 137 70 43

strtoul_test$240:	; Call 27 printf 0
x54440:	mov word [bp + 27], strtoul_test$241	; 5: 199 70 27 187 212
x54445:	mov [bp + 29], bp	; 3: 137 110 29
x54448:	add bp, 27	; 3: 131 197 27
x54451:	mov di, bp	; 2: 137 239
x54453:	add di, 10	; 3: 131 199 10
x54456:	jmp printf	; 3: 233 73 56

strtoul_test$241:	; PostCall 27

strtoul_test$242:	; Assign base 9
x54459:	mov word [bp + 6], 9	; 5: 199 70 6 9 0

strtoul_test$243:	; Assign text[0] 32
x54464:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$244:	; Assign text[1] 32
x54468:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$245:	; Assign text[2] 32
x54472:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$246:	; Assign text[3] 43
x54476:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtoul_test$247:	; Assign text[4] 49
x54480:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$248:	; Assign text[5] 50
x54484:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$249:	; Assign text[6] 51
x54488:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$250:	; Assign text[7] 97
x54492:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$251:	; Assign text[8] 98
x54496:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$252:	; Assign text[9] 99
x54500:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$253:	; Assign text[10] 0
x54504:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$254:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$255:	; Parameter 21 text 6
x54508:	mov [bp + 27], bp	; 3: 137 110 27
x54511:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$256:	; address £temporary2828 pointer
x54515:	mov si, bp	; 2: 137 238
x54517:	add si, 19	; 3: 131 198 19

strtoul_test$257:	; Parameter 21 £temporary2828 8
x54520:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$258:	; Parameter 21 base 10
x54523:	mov ax, [bp + 6]	; 3: 139 70 6
x54526:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$259:	; Call 21 strtoul 0
x54529:	mov word [bp + 21], strtoul_test$260	; 5: 199 70 21 15 213
x54534:	mov [bp + 23], bp	; 3: 137 110 23
x54537:	add bp, 21	; 3: 131 197 21
x54540:	jmp strtoul	; 3: 233 177 6

strtoul_test$260:	; PostCall 21

strtoul_test$261:	; GetReturnValue £temporary2829

strtoul_test$262:	; Assign value £temporary2829
x54543:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$263:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$264:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x54547:	mov word [bp + 31], @6568$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 228 218

strtoul_test$265:	; Parameter 25 text 8
x54552:	mov [bp + 33], bp	; 3: 137 110 33
x54555:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$266:	; Parameter 25 value 10
x54559:	mov eax, [bp + 21]	; 4: 102 139 70 21
x54563:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$267:	; Parameter 25 pointer 14
x54567:	mov ax, [bp + 19]	; 3: 139 70 19
x54570:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$268:	; Parameter 25 base 16
x54573:	mov ax, [bp + 6]	; 3: 139 70 6
x54576:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$269:	; Call 25 printf 0
x54579:	mov word [bp + 25], strtoul_test$270	; 5: 199 70 25 70 213
x54584:	mov [bp + 27], bp	; 3: 137 110 27
x54587:	add bp, 25	; 3: 131 197 25
x54590:	mov di, bp	; 2: 137 239
x54592:	add di, 10	; 3: 131 199 10
x54595:	jmp printf	; 3: 233 190 55

strtoul_test$270:	; PostCall 25

strtoul_test$271:	; Assign base 10
x54598:	mov word [bp + 6], 10	; 5: 199 70 6 10 0

strtoul_test$272:	; Assign text[0] 32
x54603:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$273:	; Assign text[1] 32
x54607:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$274:	; Assign text[2] 32
x54611:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$275:	; Assign text[3] 43
x54615:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtoul_test$276:	; Assign text[4] 49
x54619:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$277:	; Assign text[5] 50
x54623:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$278:	; Assign text[6] 51
x54627:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$279:	; Assign text[7] 97
x54631:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$280:	; Assign text[8] 98
x54635:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$281:	; Assign text[9] 99
x54639:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$282:	; Assign text[10] 0
x54643:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$283:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$284:	; Parameter 21 text 6
x54647:	mov [bp + 27], bp	; 3: 137 110 27
x54650:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$285:	; address £temporary2842 pointer
x54654:	mov si, bp	; 2: 137 238
x54656:	add si, 19	; 3: 131 198 19

strtoul_test$286:	; Parameter 21 £temporary2842 8
x54659:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$287:	; Parameter 21 base 10
x54662:	mov ax, [bp + 6]	; 3: 139 70 6
x54665:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$288:	; Call 21 strtoul 0
x54668:	mov word [bp + 21], strtoul_test$289	; 5: 199 70 21 154 213
x54673:	mov [bp + 23], bp	; 3: 137 110 23
x54676:	add bp, 21	; 3: 131 197 21
x54679:	jmp strtoul	; 3: 233 38 6

strtoul_test$289:	; PostCall 21

strtoul_test$290:	; GetReturnValue £temporary2843

strtoul_test$291:	; Assign value £temporary2843
x54682:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$292:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$293:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x54686:	mov word [bp + 31], @6612$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 250 218

strtoul_test$294:	; Parameter 25 text 8
x54691:	mov [bp + 33], bp	; 3: 137 110 33
x54694:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$295:	; Parameter 25 value 10
x54698:	mov eax, [bp + 21]	; 4: 102 139 70 21
x54702:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$296:	; Parameter 25 pointer 14
x54706:	mov ax, [bp + 19]	; 3: 139 70 19
x54709:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$297:	; Parameter 25 base 16
x54712:	mov ax, [bp + 6]	; 3: 139 70 6
x54715:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$298:	; Call 25 printf 0
x54718:	mov word [bp + 25], strtoul_test$299	; 5: 199 70 25 209 213
x54723:	mov [bp + 27], bp	; 3: 137 110 27
x54726:	add bp, 25	; 3: 131 197 25
x54729:	mov di, bp	; 2: 137 239
x54731:	add di, 10	; 3: 131 199 10
x54734:	jmp printf	; 3: 233 51 55

strtoul_test$299:	; PostCall 25

strtoul_test$300:	; Assign base 11
x54737:	mov word [bp + 6], 11	; 5: 199 70 6 11 0

strtoul_test$301:	; Assign text[0] 32
x54742:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$302:	; Assign text[1] 32
x54746:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$303:	; Assign text[2] 32
x54750:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$304:	; Assign text[3] 43
x54754:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtoul_test$305:	; Assign text[4] 49
x54758:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$306:	; Assign text[5] 50
x54762:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$307:	; Assign text[6] 51
x54766:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$308:	; Assign text[7] 97
x54770:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$309:	; Assign text[8] 98
x54774:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$310:	; Assign text[9] 99
x54778:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$311:	; Assign text[10] 0
x54782:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$312:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$313:	; Parameter 21 text 6
x54786:	mov [bp + 27], bp	; 3: 137 110 27
x54789:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$314:	; address £temporary2856 pointer
x54793:	mov si, bp	; 2: 137 238
x54795:	add si, 19	; 3: 131 198 19

strtoul_test$315:	; Parameter 21 £temporary2856 8
x54798:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$316:	; Parameter 21 base 10
x54801:	mov ax, [bp + 6]	; 3: 139 70 6
x54804:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$317:	; Call 21 strtoul 0
x54807:	mov word [bp + 21], strtoul_test$318	; 5: 199 70 21 37 214
x54812:	mov [bp + 23], bp	; 3: 137 110 23
x54815:	add bp, 21	; 3: 131 197 21
x54818:	jmp strtoul	; 3: 233 155 5

strtoul_test$318:	; PostCall 21

strtoul_test$319:	; GetReturnValue £temporary2857

strtoul_test$320:	; Assign value £temporary2857
x54821:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$321:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$322:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x54825:	mov word [bp + 31], @6656$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 16 219

strtoul_test$323:	; Parameter 25 text 8
x54830:	mov [bp + 33], bp	; 3: 137 110 33
x54833:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$324:	; Parameter 25 value 10
x54837:	mov eax, [bp + 21]	; 4: 102 139 70 21
x54841:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$325:	; Parameter 25 pointer 14
x54845:	mov ax, [bp + 19]	; 3: 139 70 19
x54848:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$326:	; Parameter 25 base 16
x54851:	mov ax, [bp + 6]	; 3: 139 70 6
x54854:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$327:	; Call 25 printf 0
x54857:	mov word [bp + 25], strtoul_test$328	; 5: 199 70 25 92 214
x54862:	mov [bp + 27], bp	; 3: 137 110 27
x54865:	add bp, 25	; 3: 131 197 25
x54868:	mov di, bp	; 2: 137 239
x54870:	add di, 10	; 3: 131 199 10
x54873:	jmp printf	; 3: 233 168 54

strtoul_test$328:	; PostCall 25

strtoul_test$329:	; Assign base 12
x54876:	mov word [bp + 6], 12	; 5: 199 70 6 12 0

strtoul_test$330:	; Assign text[0] 32
x54881:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$331:	; Assign text[1] 32
x54885:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$332:	; Assign text[2] 32
x54889:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$333:	; Assign text[3] 43
x54893:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtoul_test$334:	; Assign text[4] 49
x54897:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$335:	; Assign text[5] 50
x54901:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$336:	; Assign text[6] 51
x54905:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$337:	; Assign text[7] 65
x54909:	mov byte [bp + 15], 65	; 4: 198 70 15 65

strtoul_test$338:	; Assign text[8] 66
x54913:	mov byte [bp + 16], 66	; 4: 198 70 16 66

strtoul_test$339:	; Assign text[9] 67
x54917:	mov byte [bp + 17], 67	; 4: 198 70 17 67

strtoul_test$340:	; Assign text[10] 0
x54921:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$341:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$342:	; Parameter 21 text 6
x54925:	mov [bp + 27], bp	; 3: 137 110 27
x54928:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$343:	; address £temporary2870 pointer
x54932:	mov si, bp	; 2: 137 238
x54934:	add si, 19	; 3: 131 198 19

strtoul_test$344:	; Parameter 21 £temporary2870 8
x54937:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$345:	; Parameter 21 base 10
x54940:	mov ax, [bp + 6]	; 3: 139 70 6
x54943:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$346:	; Call 21 strtoul 0
x54946:	mov word [bp + 21], strtoul_test$347	; 5: 199 70 21 176 214
x54951:	mov [bp + 23], bp	; 3: 137 110 23
x54954:	add bp, 21	; 3: 131 197 21
x54957:	jmp strtoul	; 3: 233 16 5

strtoul_test$347:	; PostCall 21

strtoul_test$348:	; GetReturnValue £temporary2871

strtoul_test$349:	; Assign value £temporary2871
x54960:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$350:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$351:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x54964:	mov word [bp + 31], @6700$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 38 219

strtoul_test$352:	; Parameter 25 text 8
x54969:	mov [bp + 33], bp	; 3: 137 110 33
x54972:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$353:	; Parameter 25 value 10
x54976:	mov eax, [bp + 21]	; 4: 102 139 70 21
x54980:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$354:	; Parameter 25 pointer 14
x54984:	mov ax, [bp + 19]	; 3: 139 70 19
x54987:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$355:	; Parameter 25 base 16
x54990:	mov ax, [bp + 6]	; 3: 139 70 6
x54993:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$356:	; Call 25 printf 0
x54996:	mov word [bp + 25], strtoul_test$357	; 5: 199 70 25 231 214
x55001:	mov [bp + 27], bp	; 3: 137 110 27
x55004:	add bp, 25	; 3: 131 197 25
x55007:	mov di, bp	; 2: 137 239
x55009:	add di, 10	; 3: 131 199 10
x55012:	jmp printf	; 3: 233 29 54

strtoul_test$357:	; PostCall 25

strtoul_test$358:	; Assign base 13
x55015:	mov word [bp + 6], 13	; 5: 199 70 6 13 0

strtoul_test$359:	; Assign text[0] 32
x55020:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$360:	; Assign text[1] 32
x55024:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$361:	; Assign text[2] 32
x55028:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$362:	; Assign text[3] 43
x55032:	mov byte [bp + 11], 43	; 4: 198 70 11 43

strtoul_test$363:	; Assign text[4] 49
x55036:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$364:	; Assign text[5] 50
x55040:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$365:	; Assign text[6] 51
x55044:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$366:	; Assign text[7] 97
x55048:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$367:	; Assign text[8] 98
x55052:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$368:	; Assign text[9] 99
x55056:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$369:	; Assign text[10] 0
x55060:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$370:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$371:	; Parameter 21 text 6
x55064:	mov [bp + 27], bp	; 3: 137 110 27
x55067:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$372:	; address £temporary2884 pointer
x55071:	mov si, bp	; 2: 137 238
x55073:	add si, 19	; 3: 131 198 19

strtoul_test$373:	; Parameter 21 £temporary2884 8
x55076:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$374:	; Parameter 21 base 10
x55079:	mov ax, [bp + 6]	; 3: 139 70 6
x55082:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$375:	; Call 21 strtoul 0
x55085:	mov word [bp + 21], strtoul_test$376	; 5: 199 70 21 59 215
x55090:	mov [bp + 23], bp	; 3: 137 110 23
x55093:	add bp, 21	; 3: 131 197 21
x55096:	jmp strtoul	; 3: 233 133 4

strtoul_test$376:	; PostCall 21

strtoul_test$377:	; GetReturnValue £temporary2885

strtoul_test$378:	; Assign value £temporary2885
x55099:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$379:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$380:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x55103:	mov word [bp + 31], @6744$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 60 219

strtoul_test$381:	; Parameter 25 text 8
x55108:	mov [bp + 33], bp	; 3: 137 110 33
x55111:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$382:	; Parameter 25 value 10
x55115:	mov eax, [bp + 21]	; 4: 102 139 70 21
x55119:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$383:	; Parameter 25 pointer 14
x55123:	mov ax, [bp + 19]	; 3: 139 70 19
x55126:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$384:	; Parameter 25 base 16
x55129:	mov ax, [bp + 6]	; 3: 139 70 6
x55132:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$385:	; Call 25 printf 0
x55135:	mov word [bp + 25], strtoul_test$386	; 5: 199 70 25 114 215
x55140:	mov [bp + 27], bp	; 3: 137 110 27
x55143:	add bp, 25	; 3: 131 197 25
x55146:	mov di, bp	; 2: 137 239
x55148:	add di, 10	; 3: 131 199 10
x55151:	jmp printf	; 3: 233 146 53

strtoul_test$386:	; PostCall 25

strtoul_test$387:	; Assign base 9
x55154:	mov word [bp + 6], 9	; 5: 199 70 6 9 0

strtoul_test$388:	; Assign text[0] 32
x55159:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$389:	; Assign text[1] 32
x55163:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$390:	; Assign text[2] 32
x55167:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$391:	; Assign text[3] 45
x55171:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtoul_test$392:	; Assign text[4] 49
x55175:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$393:	; Assign text[5] 50
x55179:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$394:	; Assign text[6] 51
x55183:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$395:	; Assign text[7] 97
x55187:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$396:	; Assign text[8] 98
x55191:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$397:	; Assign text[9] 99
x55195:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$398:	; Assign text[10] 0
x55199:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$399:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$400:	; Parameter 21 text 6
x55203:	mov [bp + 27], bp	; 3: 137 110 27
x55206:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$401:	; address £temporary2898 pointer
x55210:	mov si, bp	; 2: 137 238
x55212:	add si, 19	; 3: 131 198 19

strtoul_test$402:	; Parameter 21 £temporary2898 8
x55215:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$403:	; Parameter 21 base 10
x55218:	mov ax, [bp + 6]	; 3: 139 70 6
x55221:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$404:	; Call 21 strtoul 0
x55224:	mov word [bp + 21], strtoul_test$405	; 5: 199 70 21 198 215
x55229:	mov [bp + 23], bp	; 3: 137 110 23
x55232:	add bp, 21	; 3: 131 197 21
x55235:	jmp strtoul	; 3: 233 250 3

strtoul_test$405:	; PostCall 21

strtoul_test$406:	; GetReturnValue £temporary2899

strtoul_test$407:	; Assign value £temporary2899
x55238:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$408:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$409:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x55242:	mov word [bp + 31], @6788$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 82 219

strtoul_test$410:	; Parameter 25 text 8
x55247:	mov [bp + 33], bp	; 3: 137 110 33
x55250:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$411:	; Parameter 25 value 10
x55254:	mov eax, [bp + 21]	; 4: 102 139 70 21
x55258:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$412:	; Parameter 25 pointer 14
x55262:	mov ax, [bp + 19]	; 3: 139 70 19
x55265:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$413:	; Parameter 25 base 16
x55268:	mov ax, [bp + 6]	; 3: 139 70 6
x55271:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$414:	; Call 25 printf 0
x55274:	mov word [bp + 25], strtoul_test$415	; 5: 199 70 25 253 215
x55279:	mov [bp + 27], bp	; 3: 137 110 27
x55282:	add bp, 25	; 3: 131 197 25
x55285:	mov di, bp	; 2: 137 239
x55287:	add di, 10	; 3: 131 199 10
x55290:	jmp printf	; 3: 233 7 53

strtoul_test$415:	; PostCall 25

strtoul_test$416:	; Assign base 10
x55293:	mov word [bp + 6], 10	; 5: 199 70 6 10 0

strtoul_test$417:	; Assign text[0] 32
x55298:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$418:	; Assign text[1] 32
x55302:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$419:	; Assign text[2] 32
x55306:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$420:	; Assign text[3] 45
x55310:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtoul_test$421:	; Assign text[4] 49
x55314:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$422:	; Assign text[5] 50
x55318:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$423:	; Assign text[6] 51
x55322:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$424:	; Assign text[7] 97
x55326:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$425:	; Assign text[8] 98
x55330:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$426:	; Assign text[9] 99
x55334:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$427:	; Assign text[10] 0
x55338:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$428:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$429:	; Parameter 21 text 6
x55342:	mov [bp + 27], bp	; 3: 137 110 27
x55345:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$430:	; address £temporary2912 pointer
x55349:	mov si, bp	; 2: 137 238
x55351:	add si, 19	; 3: 131 198 19

strtoul_test$431:	; Parameter 21 £temporary2912 8
x55354:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$432:	; Parameter 21 base 10
x55357:	mov ax, [bp + 6]	; 3: 139 70 6
x55360:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$433:	; Call 21 strtoul 0
x55363:	mov word [bp + 21], strtoul_test$434	; 5: 199 70 21 81 216
x55368:	mov [bp + 23], bp	; 3: 137 110 23
x55371:	add bp, 21	; 3: 131 197 21
x55374:	jmp strtoul	; 3: 233 111 3

strtoul_test$434:	; PostCall 21

strtoul_test$435:	; GetReturnValue £temporary2913

strtoul_test$436:	; Assign value £temporary2913
x55377:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$437:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$438:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x55381:	mov word [bp + 31], @6832$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 104 219

strtoul_test$439:	; Parameter 25 text 8
x55386:	mov [bp + 33], bp	; 3: 137 110 33
x55389:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$440:	; Parameter 25 value 10
x55393:	mov eax, [bp + 21]	; 4: 102 139 70 21
x55397:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$441:	; Parameter 25 pointer 14
x55401:	mov ax, [bp + 19]	; 3: 139 70 19
x55404:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$442:	; Parameter 25 base 16
x55407:	mov ax, [bp + 6]	; 3: 139 70 6
x55410:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$443:	; Call 25 printf 0
x55413:	mov word [bp + 25], strtoul_test$444	; 5: 199 70 25 136 216
x55418:	mov [bp + 27], bp	; 3: 137 110 27
x55421:	add bp, 25	; 3: 131 197 25
x55424:	mov di, bp	; 2: 137 239
x55426:	add di, 10	; 3: 131 199 10
x55429:	jmp printf	; 3: 233 124 52

strtoul_test$444:	; PostCall 25

strtoul_test$445:	; Assign base 11
x55432:	mov word [bp + 6], 11	; 5: 199 70 6 11 0

strtoul_test$446:	; Assign text[0] 32
x55437:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$447:	; Assign text[1] 32
x55441:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$448:	; Assign text[2] 32
x55445:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$449:	; Assign text[3] 45
x55449:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtoul_test$450:	; Assign text[4] 49
x55453:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$451:	; Assign text[5] 50
x55457:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$452:	; Assign text[6] 51
x55461:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$453:	; Assign text[7] 97
x55465:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$454:	; Assign text[8] 98
x55469:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$455:	; Assign text[9] 99
x55473:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$456:	; Assign text[10] 0
x55477:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$457:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$458:	; Parameter 21 text 6
x55481:	mov [bp + 27], bp	; 3: 137 110 27
x55484:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$459:	; address £temporary2926 pointer
x55488:	mov si, bp	; 2: 137 238
x55490:	add si, 19	; 3: 131 198 19

strtoul_test$460:	; Parameter 21 £temporary2926 8
x55493:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$461:	; Parameter 21 base 10
x55496:	mov ax, [bp + 6]	; 3: 139 70 6
x55499:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$462:	; Call 21 strtoul 0
x55502:	mov word [bp + 21], strtoul_test$463	; 5: 199 70 21 220 216
x55507:	mov [bp + 23], bp	; 3: 137 110 23
x55510:	add bp, 21	; 3: 131 197 21
x55513:	jmp strtoul	; 3: 233 228 2

strtoul_test$463:	; PostCall 21

strtoul_test$464:	; GetReturnValue £temporary2927

strtoul_test$465:	; Assign value £temporary2927
x55516:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$466:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$467:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x55520:	mov word [bp + 31], @6876$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 126 219

strtoul_test$468:	; Parameter 25 text 8
x55525:	mov [bp + 33], bp	; 3: 137 110 33
x55528:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$469:	; Parameter 25 value 10
x55532:	mov eax, [bp + 21]	; 4: 102 139 70 21
x55536:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$470:	; Parameter 25 pointer 14
x55540:	mov ax, [bp + 19]	; 3: 139 70 19
x55543:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$471:	; Parameter 25 base 16
x55546:	mov ax, [bp + 6]	; 3: 139 70 6
x55549:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$472:	; Call 25 printf 0
x55552:	mov word [bp + 25], strtoul_test$473	; 5: 199 70 25 19 217
x55557:	mov [bp + 27], bp	; 3: 137 110 27
x55560:	add bp, 25	; 3: 131 197 25
x55563:	mov di, bp	; 2: 137 239
x55565:	add di, 10	; 3: 131 199 10
x55568:	jmp printf	; 3: 233 241 51

strtoul_test$473:	; PostCall 25

strtoul_test$474:	; Assign base 12
x55571:	mov word [bp + 6], 12	; 5: 199 70 6 12 0

strtoul_test$475:	; Assign text[0] 32
x55576:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$476:	; Assign text[1] 32
x55580:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$477:	; Assign text[2] 32
x55584:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$478:	; Assign text[3] 45
x55588:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtoul_test$479:	; Assign text[4] 49
x55592:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$480:	; Assign text[5] 50
x55596:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$481:	; Assign text[6] 51
x55600:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$482:	; Assign text[7] 65
x55604:	mov byte [bp + 15], 65	; 4: 198 70 15 65

strtoul_test$483:	; Assign text[8] 66
x55608:	mov byte [bp + 16], 66	; 4: 198 70 16 66

strtoul_test$484:	; Assign text[9] 67
x55612:	mov byte [bp + 17], 67	; 4: 198 70 17 67

strtoul_test$485:	; Assign text[10] 0
x55616:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$486:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$487:	; Parameter 21 text 6
x55620:	mov [bp + 27], bp	; 3: 137 110 27
x55623:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$488:	; address £temporary2940 pointer
x55627:	mov si, bp	; 2: 137 238
x55629:	add si, 19	; 3: 131 198 19

strtoul_test$489:	; Parameter 21 £temporary2940 8
x55632:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$490:	; Parameter 21 base 10
x55635:	mov ax, [bp + 6]	; 3: 139 70 6
x55638:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$491:	; Call 21 strtoul 0
x55641:	mov word [bp + 21], strtoul_test$492	; 5: 199 70 21 103 217
x55646:	mov [bp + 23], bp	; 3: 137 110 23
x55649:	add bp, 21	; 3: 131 197 21
x55652:	jmp strtoul	; 3: 233 89 2

strtoul_test$492:	; PostCall 21

strtoul_test$493:	; GetReturnValue £temporary2941

strtoul_test$494:	; Assign value £temporary2941
x55655:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$495:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$496:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x55659:	mov word [bp + 31], @6920$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 148 219

strtoul_test$497:	; Parameter 25 text 8
x55664:	mov [bp + 33], bp	; 3: 137 110 33
x55667:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$498:	; Parameter 25 value 10
x55671:	mov eax, [bp + 21]	; 4: 102 139 70 21
x55675:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$499:	; Parameter 25 pointer 14
x55679:	mov ax, [bp + 19]	; 3: 139 70 19
x55682:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$500:	; Parameter 25 base 16
x55685:	mov ax, [bp + 6]	; 3: 139 70 6
x55688:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$501:	; Call 25 printf 0
x55691:	mov word [bp + 25], strtoul_test$502	; 5: 199 70 25 158 217
x55696:	mov [bp + 27], bp	; 3: 137 110 27
x55699:	add bp, 25	; 3: 131 197 25
x55702:	mov di, bp	; 2: 137 239
x55704:	add di, 10	; 3: 131 199 10
x55707:	jmp printf	; 3: 233 102 51

strtoul_test$502:	; PostCall 25

strtoul_test$503:	; Assign base 13
x55710:	mov word [bp + 6], 13	; 5: 199 70 6 13 0

strtoul_test$504:	; Assign text[0] 32
x55715:	mov byte [bp + 8], 32	; 4: 198 70 8 32

strtoul_test$505:	; Assign text[1] 32
x55719:	mov byte [bp + 9], 32	; 4: 198 70 9 32

strtoul_test$506:	; Assign text[2] 32
x55723:	mov byte [bp + 10], 32	; 4: 198 70 10 32

strtoul_test$507:	; Assign text[3] 45
x55727:	mov byte [bp + 11], 45	; 4: 198 70 11 45

strtoul_test$508:	; Assign text[4] 49
x55731:	mov byte [bp + 12], 49	; 4: 198 70 12 49

strtoul_test$509:	; Assign text[5] 50
x55735:	mov byte [bp + 13], 50	; 4: 198 70 13 50

strtoul_test$510:	; Assign text[6] 51
x55739:	mov byte [bp + 14], 51	; 4: 198 70 14 51

strtoul_test$511:	; Assign text[7] 97
x55743:	mov byte [bp + 15], 97	; 4: 198 70 15 97

strtoul_test$512:	; Assign text[8] 98
x55747:	mov byte [bp + 16], 98	; 4: 198 70 16 98

strtoul_test$513:	; Assign text[9] 99
x55751:	mov byte [bp + 17], 99	; 4: 198 70 17 99

strtoul_test$514:	; Assign text[10] 0
x55755:	mov byte [bp + 18], 0	; 4: 198 70 18 0

strtoul_test$515:	; CallHeader 21 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$516:	; Parameter 21 text 6
x55759:	mov [bp + 27], bp	; 3: 137 110 27
x55762:	add word [bp + 27], 8	; 4: 131 70 27 8

strtoul_test$517:	; address £temporary2954 pointer
x55766:	mov si, bp	; 2: 137 238
x55768:	add si, 19	; 3: 131 198 19

strtoul_test$518:	; Parameter 21 £temporary2954 8
x55771:	mov [bp + 29], si	; 3: 137 118 29

strtoul_test$519:	; Parameter 21 base 10
x55774:	mov ax, [bp + 6]	; 3: 139 70 6
x55777:	mov [bp + 31], ax	; 3: 137 70 31

strtoul_test$520:	; Call 21 strtoul 0
x55780:	mov word [bp + 21], strtoul_test$521	; 5: 199 70 21 242 217
x55785:	mov [bp + 23], bp	; 3: 137 110 23
x55788:	add bp, 21	; 3: 131 197 21
x55791:	jmp strtoul	; 3: 233 206 1

strtoul_test$521:	; PostCall 21

strtoul_test$522:	; GetReturnValue £temporary2955

strtoul_test$523:	; Assign value £temporary2955
x55794:	mov [bp + 21], ebx	; 4: 102 137 94 21

strtoul_test$524:	; CallHeader 25 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul_test$525:	; Parameter 25 string_3C25s3E203C25li3E203C25s3E203C25i3E0A# 6
x55798:	mov word [bp + 31], @6964$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#	; 5: 199 70 31 170 219

strtoul_test$526:	; Parameter 25 text 8
x55803:	mov [bp + 33], bp	; 3: 137 110 33
x55806:	add word [bp + 33], 8	; 4: 131 70 33 8

strtoul_test$527:	; Parameter 25 value 10
x55810:	mov eax, [bp + 21]	; 4: 102 139 70 21
x55814:	mov [bp + 35], eax	; 4: 102 137 70 35

strtoul_test$528:	; Parameter 25 pointer 14
x55818:	mov ax, [bp + 19]	; 3: 139 70 19
x55821:	mov [bp + 39], ax	; 3: 137 70 39

strtoul_test$529:	; Parameter 25 base 16
x55824:	mov ax, [bp + 6]	; 3: 139 70 6
x55827:	mov [bp + 41], ax	; 3: 137 70 41

strtoul_test$530:	; Call 25 printf 0
x55830:	mov word [bp + 25], strtoul_test$531	; 5: 199 70 25 41 218
x55835:	mov [bp + 27], bp	; 3: 137 110 27
x55838:	add bp, 25	; 3: 131 197 25
x55841:	mov di, bp	; 2: 137 239
x55843:	add di, 10	; 3: 131 199 10
x55846:	jmp printf	; 3: 233 219 50

strtoul_test$531:	; PostCall 25

strtoul_test$532:	; Return 0
x55849:	mov ax, [bp]	; 3: 139 70 0
x55852:	mov di, [bp + 4]	; 3: 139 126 4
x55855:	mov bp, [bp + 2]	; 3: 139 110 2
x55858:	jmp ax	; 2: 255 224

strtoul_test$533:	; FunctionEnd strtoul_test

@6186$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x55860:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6233$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x55882:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6283$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x55904:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6333$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x55926:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6377$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x55948:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6424$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x55970:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6474$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x55992:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6524$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x56014:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6568$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x56036:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6612$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x56058:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6656$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x56080:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6700$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x56102:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6744$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x56124:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6788$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x56146:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6832$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x56168:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6876$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x56190:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6920$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x56212:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

@6964$string_3C25s3E203C25li3E203C25s3E203C25i3E0A#:
x56234:	db "<%s> <%li> <%s> <%i>", 10, 0	; 22: 60 37 115 62 32 60 37 108 105 62 32 60 37 115 62 32 60 37 105 62 10 0

strtoul:	; Assign g_inStatus 1
x56256:	mov word [g_inStatus], 1	; 6: 199 6 199 95 1 0

strtoul$1:	; Assign g_inDevice s
x56262:	mov ax, [bp + 6]	; 3: 139 70 6
x56265:	mov [g_inDevice], ax	; 3: 163 201 95

strtoul$2:	; Assign g_inChars 0
x56268:	mov word [g_inChars], 0	; 6: 199 6 236 100 0 0

strtoul$3:	; CallHeader 12 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

strtoul$4:	; Parameter 12 base 6
x56274:	mov ax, [bp + 10]	; 3: 139 70 10
x56277:	mov [bp + 18], ax	; 3: 137 70 18

strtoul$5:	; Call 12 scanUnsignedLongInt 0
x56280:	mov word [bp + 12], strtoul$6	; 5: 199 70 12 230 219
x56285:	mov [bp + 14], bp	; 3: 137 110 14
x56288:	add bp, 12	; 3: 131 197 12
x56291:	jmp scanUnsignedLongInt	; 3: 233 53 144

strtoul$6:	; PostCall 12

strtoul$7:	; GetReturnValue £temporary2251

strtoul$8:	; Assign unsignedLongValue £temporary2251
x56294:	mov [bp + 12], ebx	; 4: 102 137 94 12

strtoul$9:	; Equal 12 endp 0
x56298:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x56302:	je strtoul$12	; 2: 116 12

strtoul$10:	; Deref £temporary2253 -> endp endp 0
x56304:	mov si, [bp + 8]	; 3: 139 118 8

strtoul$11:	; BinaryAdd £temporary2253 -> endp s g_inChars
x56307:	mov ax, [bp + 6]	; 3: 139 70 6
x56310:	add ax, [g_inChars]	; 4: 3 6 236 100
x56314:	mov [si], ax	; 2: 137 4

strtoul$12:	; SetReturnValue unsignedLongValue
x56316:	mov ebx, [bp + 12]	; 4: 102 139 94 12

strtoul$13:	; Return unsignedLongValue
x56320:	mov ax, [bp]	; 3: 139 70 0
x56323:	mov di, [bp + 4]	; 3: 139 126 4
x56326:	mov bp, [bp + 2]	; 3: 139 110 2
x56329:	jmp ax	; 2: 255 224

strtoul$14:	; FunctionEnd strtoul

character_test:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_test$1:	; Parameter 6 97 6
x56331:	mov byte [bp + 12], 97	; 4: 198 70 12 97

character_test$2:	; Call 6 character_testX 0
x56335:	mov word [bp + 6], character_test$3	; 5: 199 70 6 29 220
x56340:	mov [bp + 8], bp	; 3: 137 110 8
x56343:	add bp, 6	; 3: 131 197 6
x56346:	nop	; 1: 144
x56347:	jmp character_testX	; 2: 235 119

character_test$3:	; PostCall 6

character_test$4:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_test$5:	; Parameter 6 66 6
x56349:	mov byte [bp + 12], 66	; 4: 198 70 12 66

character_test$6:	; Call 6 character_testX 0
x56353:	mov word [bp + 6], character_test$7	; 5: 199 70 6 47 220
x56358:	mov [bp + 8], bp	; 3: 137 110 8
x56361:	add bp, 6	; 3: 131 197 6
x56364:	nop	; 1: 144
x56365:	jmp character_testX	; 2: 235 101

character_test$7:	; PostCall 6

character_test$8:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_test$9:	; Parameter 6 49 6
x56367:	mov byte [bp + 12], 49	; 4: 198 70 12 49

character_test$10:	; Call 6 character_testX 0
x56371:	mov word [bp + 6], character_test$11	; 5: 199 70 6 65 220
x56376:	mov [bp + 8], bp	; 3: 137 110 8
x56379:	add bp, 6	; 3: 131 197 6
x56382:	nop	; 1: 144
x56383:	jmp character_testX	; 2: 235 83

character_test$11:	; PostCall 6

character_test$12:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_test$13:	; Parameter 6 46 6
x56385:	mov byte [bp + 12], 46	; 4: 198 70 12 46

character_test$14:	; Call 6 character_testX 0
x56389:	mov word [bp + 6], character_test$15	; 5: 199 70 6 83 220
x56394:	mov [bp + 8], bp	; 3: 137 110 8
x56397:	add bp, 6	; 3: 131 197 6
x56400:	nop	; 1: 144
x56401:	jmp character_testX	; 2: 235 65

character_test$15:	; PostCall 6

character_test$16:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_test$17:	; Parameter 6 10 6
x56403:	mov byte [bp + 12], 10	; 4: 198 70 12 10

character_test$18:	; Call 6 character_testX 0
x56407:	mov word [bp + 6], character_test$19	; 5: 199 70 6 101 220
x56412:	mov [bp + 8], bp	; 3: 137 110 8
x56415:	add bp, 6	; 3: 131 197 6
x56418:	nop	; 1: 144
x56419:	jmp character_testX	; 2: 235 47

character_test$19:	; PostCall 6

character_test$20:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_test$21:	; Parameter 6 102 6
x56421:	mov byte [bp + 12], 102	; 4: 198 70 12 102

character_test$22:	; Call 6 character_testX 0
x56425:	mov word [bp + 6], character_test$23	; 5: 199 70 6 119 220
x56430:	mov [bp + 8], bp	; 3: 137 110 8
x56433:	add bp, 6	; 3: 131 197 6
x56436:	nop	; 1: 144
x56437:	jmp character_testX	; 2: 235 29

character_test$23:	; PostCall 6

character_test$24:	; CallHeader 6 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_test$25:	; Parameter 6 103 6
x56439:	mov byte [bp + 12], 103	; 4: 198 70 12 103

character_test$26:	; Call 6 character_testX 0
x56443:	mov word [bp + 6], character_test$27	; 5: 199 70 6 137 220
x56448:	mov [bp + 8], bp	; 3: 137 110 8
x56451:	add bp, 6	; 3: 131 197 6
x56454:	nop	; 1: 144
x56455:	jmp character_testX	; 2: 235 11

character_test$27:	; PostCall 6

character_test$28:	; Return 0
x56457:	mov ax, [bp]	; 3: 139 70 0
x56460:	mov di, [bp + 4]	; 3: 139 126 4
x56463:	mov bp, [bp + 2]	; 3: 139 110 2
x56466:	jmp ax	; 2: 255 224

character_test$29:	; FunctionEnd character_test

character_testX:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$1:	; Parameter 7 string_ascii2025i0A# 6
x56468:	mov word [bp + 13], @9185$string_ascii2025i0A#	; 5: 199 70 13 82 225

character_testX$2:	; IntegralToIntegral £temporary4042 c
x56473:	mov al, [bp + 6]	; 3: 138 70 6
x56476:	and ax, 255	; 3: 37 255 0
x56479:	cmp al, 0	; 2: 60 0
x56481:	jge character_testX$3	; 2: 125 4
x56483:	neg al	; 2: 246 216
x56485:	neg ax	; 2: 247 216

character_testX$3:	; Parameter 7 £temporary4042 8
x56487:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$4:	; Call 7 printf 0
x56490:	mov word [bp + 7], character_testX$5	; 5: 199 70 7 189 220
x56495:	mov [bp + 9], bp	; 3: 137 110 9
x56498:	add bp, 7	; 3: 131 197 7
x56501:	mov di, bp	; 2: 137 239
x56503:	add di, 2	; 3: 131 199 2
x56506:	jmp printf	; 3: 233 71 48

character_testX$5:	; PostCall 7

character_testX$6:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$7:	; Parameter 7 string_islower282725c2729203D2025s0A# 6
x56509:	mov word [bp + 13], @9188$string_islower282725c2729203D2025s0A#	; 5: 199 70 13 92 225

character_testX$8:	; IntegralToIntegral £temporary4044 c
x56514:	mov al, [bp + 6]	; 3: 138 70 6
x56517:	and ax, 255	; 3: 37 255 0
x56520:	cmp al, 0	; 2: 60 0
x56522:	jge character_testX$9	; 2: 125 4
x56524:	neg al	; 2: 246 216
x56526:	neg ax	; 2: 247 216

character_testX$9:	; Parameter 7 £temporary4044 8
x56528:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$10:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$11:	; IntegralToIntegral £temporary4045 c
x56531:	mov al, [bp + 6]	; 3: 138 70 6
x56534:	and ax, 255	; 3: 37 255 0
x56537:	cmp al, 0	; 2: 60 0
x56539:	jge character_testX$12	; 2: 125 4
x56541:	neg al	; 2: 246 216
x56543:	neg ax	; 2: 247 216

character_testX$12:	; Parameter 7 £temporary4045 16
x56545:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$13:	; Call 7 islower 10
x56548:	mov word [bp + 17], character_testX$14	; 5: 199 70 17 242 220
x56553:	mov [bp + 19], bp	; 3: 137 110 19
x56556:	add bp, 17	; 3: 131 197 17
x56559:	jmp islower	; 3: 233 192 141

character_testX$14:	; PostCall 7

character_testX$15:	; GetReturnValue £temporary4046

character_testX$16:	; Equal 19 £temporary4046 0
x56562:	cmp bx, 0	; 3: 131 251 0
x56565:	je character_testX$19	; 2: 116 5

character_testX$17:	; Assign £temporary4051 string_Yes#
x56567:	mov ax, @9195$string_Yes#	; 3: 184 112 225

character_testX$18:	; Goto 20
x56570:	jmp character_testX$20	; 2: 235 3

character_testX$19:	; Assign £temporary4051 string_No#
x56572:	mov ax, @9196$string_No#	; 3: 184 116 225

character_testX$20:	; Parameter 7 £temporary4051 10
x56575:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$21:	; Call 7 printf 0
x56578:	mov word [bp + 7], character_testX$22	; 5: 199 70 7 21 221
x56583:	mov [bp + 9], bp	; 3: 137 110 9
x56586:	add bp, 7	; 3: 131 197 7
x56589:	mov di, bp	; 2: 137 239
x56591:	add di, 4	; 3: 131 199 4
x56594:	jmp printf	; 3: 233 239 47

character_testX$22:	; PostCall 7

character_testX$23:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$24:	; Parameter 7 string_isupper282725c2729203D2025s0A# 6
x56597:	mov word [bp + 13], @9204$string_isupper282725c2729203D2025s0A#	; 5: 199 70 13 119 225

character_testX$25:	; IntegralToIntegral £temporary4053 c
x56602:	mov al, [bp + 6]	; 3: 138 70 6
x56605:	and ax, 255	; 3: 37 255 0
x56608:	cmp al, 0	; 2: 60 0
x56610:	jge character_testX$26	; 2: 125 4
x56612:	neg al	; 2: 246 216
x56614:	neg ax	; 2: 247 216

character_testX$26:	; Parameter 7 £temporary4053 8
x56616:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$27:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$28:	; IntegralToIntegral £temporary4054 c
x56619:	mov al, [bp + 6]	; 3: 138 70 6
x56622:	and ax, 255	; 3: 37 255 0
x56625:	cmp al, 0	; 2: 60 0
x56627:	jge character_testX$29	; 2: 125 4
x56629:	neg al	; 2: 246 216
x56631:	neg ax	; 2: 247 216

character_testX$29:	; Parameter 7 £temporary4054 16
x56633:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$30:	; Call 7 isupper 10
x56636:	mov word [bp + 17], character_testX$31	; 5: 199 70 17 74 221
x56641:	mov [bp + 19], bp	; 3: 137 110 19
x56644:	add bp, 17	; 3: 131 197 17
x56647:	jmp isupper	; 3: 233 192 64

character_testX$31:	; PostCall 7

character_testX$32:	; GetReturnValue £temporary4055

character_testX$33:	; Equal 36 £temporary4055 0
x56650:	cmp bx, 0	; 3: 131 251 0
x56653:	je character_testX$36	; 2: 116 5

character_testX$34:	; Assign £temporary4060 string_Yes#
x56655:	mov ax, @9211$string_Yes#	; 3: 184 139 225

character_testX$35:	; Goto 37
x56658:	jmp character_testX$37	; 2: 235 3

character_testX$36:	; Assign £temporary4060 string_No#
x56660:	mov ax, @9212$string_No#	; 3: 184 143 225

character_testX$37:	; Parameter 7 £temporary4060 10
x56663:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$38:	; Call 7 printf 0
x56666:	mov word [bp + 7], character_testX$39	; 5: 199 70 7 109 221
x56671:	mov [bp + 9], bp	; 3: 137 110 9
x56674:	add bp, 7	; 3: 131 197 7
x56677:	mov di, bp	; 2: 137 239
x56679:	add di, 4	; 3: 131 199 4
x56682:	jmp printf	; 3: 233 151 47

character_testX$39:	; PostCall 7

character_testX$40:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$41:	; Parameter 7 string_isalpha282725c2729203D2025s0A# 6
x56685:	mov word [bp + 13], @9220$string_isalpha282725c2729203D2025s0A#	; 5: 199 70 13 146 225

character_testX$42:	; IntegralToIntegral £temporary4062 c
x56690:	mov al, [bp + 6]	; 3: 138 70 6
x56693:	and ax, 255	; 3: 37 255 0
x56696:	cmp al, 0	; 2: 60 0
x56698:	jge character_testX$43	; 2: 125 4
x56700:	neg al	; 2: 246 216
x56702:	neg ax	; 2: 247 216

character_testX$43:	; Parameter 7 £temporary4062 8
x56704:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$44:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$45:	; IntegralToIntegral £temporary4063 c
x56707:	mov al, [bp + 6]	; 3: 138 70 6
x56710:	and ax, 255	; 3: 37 255 0
x56713:	cmp al, 0	; 2: 60 0
x56715:	jge character_testX$46	; 2: 125 4
x56717:	neg al	; 2: 246 216
x56719:	neg ax	; 2: 247 216

character_testX$46:	; Parameter 7 £temporary4063 16
x56721:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$47:	; Call 7 isalpha 10
x56724:	mov word [bp + 17], character_testX$48	; 5: 199 70 17 162 221
x56729:	mov [bp + 19], bp	; 3: 137 110 19
x56732:	add bp, 17	; 3: 131 197 17
x56735:	jmp isalpha	; 3: 233 17 5

character_testX$48:	; PostCall 7

character_testX$49:	; GetReturnValue £temporary4064

character_testX$50:	; Equal 53 £temporary4064 0
x56738:	cmp bx, 0	; 3: 131 251 0
x56741:	je character_testX$53	; 2: 116 5

character_testX$51:	; Assign £temporary4069 string_Yes#
x56743:	mov ax, @9227$string_Yes#	; 3: 184 166 225

character_testX$52:	; Goto 54
x56746:	jmp character_testX$54	; 2: 235 3

character_testX$53:	; Assign £temporary4069 string_No#
x56748:	mov ax, @9228$string_No#	; 3: 184 170 225

character_testX$54:	; Parameter 7 £temporary4069 10
x56751:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$55:	; Call 7 printf 0
x56754:	mov word [bp + 7], character_testX$56	; 5: 199 70 7 197 221
x56759:	mov [bp + 9], bp	; 3: 137 110 9
x56762:	add bp, 7	; 3: 131 197 7
x56765:	mov di, bp	; 2: 137 239
x56767:	add di, 4	; 3: 131 199 4
x56770:	jmp printf	; 3: 233 63 47

character_testX$56:	; PostCall 7

character_testX$57:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$58:	; Parameter 7 string_isdigit282725c2729203D2025s0A# 6
x56773:	mov word [bp + 13], @9236$string_isdigit282725c2729203D2025s0A#	; 5: 199 70 13 173 225

character_testX$59:	; IntegralToIntegral £temporary4071 c
x56778:	mov al, [bp + 6]	; 3: 138 70 6
x56781:	and ax, 255	; 3: 37 255 0
x56784:	cmp al, 0	; 2: 60 0
x56786:	jge character_testX$60	; 2: 125 4
x56788:	neg al	; 2: 246 216
x56790:	neg ax	; 2: 247 216

character_testX$60:	; Parameter 7 £temporary4071 8
x56792:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$61:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$62:	; IntegralToIntegral £temporary4072 c
x56795:	mov al, [bp + 6]	; 3: 138 70 6
x56798:	and ax, 255	; 3: 37 255 0
x56801:	cmp al, 0	; 2: 60 0
x56803:	jge character_testX$63	; 2: 125 4
x56805:	neg al	; 2: 246 216
x56807:	neg ax	; 2: 247 216

character_testX$63:	; Parameter 7 £temporary4072 16
x56809:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$64:	; Call 7 isdigit 10
x56812:	mov word [bp + 17], character_testX$65	; 5: 199 70 17 250 221
x56817:	mov [bp + 19], bp	; 3: 137 110 19
x56820:	add bp, 17	; 3: 131 197 17
x56823:	jmp isdigit	; 3: 233 111 77

character_testX$65:	; PostCall 7

character_testX$66:	; GetReturnValue £temporary4073

character_testX$67:	; Equal 70 £temporary4073 0
x56826:	cmp bx, 0	; 3: 131 251 0
x56829:	je character_testX$70	; 2: 116 5

character_testX$68:	; Assign £temporary4078 string_Yes#
x56831:	mov ax, @9243$string_Yes#	; 3: 184 193 225

character_testX$69:	; Goto 71
x56834:	jmp character_testX$71	; 2: 235 3

character_testX$70:	; Assign £temporary4078 string_No#
x56836:	mov ax, @9244$string_No#	; 3: 184 197 225

character_testX$71:	; Parameter 7 £temporary4078 10
x56839:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$72:	; Call 7 printf 0
x56842:	mov word [bp + 7], character_testX$73	; 5: 199 70 7 29 222
x56847:	mov [bp + 9], bp	; 3: 137 110 9
x56850:	add bp, 7	; 3: 131 197 7
x56853:	mov di, bp	; 2: 137 239
x56855:	add di, 4	; 3: 131 199 4
x56858:	jmp printf	; 3: 233 231 46

character_testX$73:	; PostCall 7

character_testX$74:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$75:	; Parameter 7 string_isalnum282725c2729203D2025s0A# 6
x56861:	mov word [bp + 13], @9252$string_isalnum282725c2729203D2025s0A#	; 5: 199 70 13 200 225

character_testX$76:	; IntegralToIntegral £temporary4080 c
x56866:	mov al, [bp + 6]	; 3: 138 70 6
x56869:	and ax, 255	; 3: 37 255 0
x56872:	cmp al, 0	; 2: 60 0
x56874:	jge character_testX$77	; 2: 125 4
x56876:	neg al	; 2: 246 216
x56878:	neg ax	; 2: 247 216

character_testX$77:	; Parameter 7 £temporary4080 8
x56880:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$78:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$79:	; IntegralToIntegral £temporary4081 c
x56883:	mov al, [bp + 6]	; 3: 138 70 6
x56886:	and ax, 255	; 3: 37 255 0
x56889:	cmp al, 0	; 2: 60 0
x56891:	jge character_testX$80	; 2: 125 4
x56893:	neg al	; 2: 246 216
x56895:	neg ax	; 2: 247 216

character_testX$80:	; Parameter 7 £temporary4081 16
x56897:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$81:	; Call 7 isalnum 10
x56900:	mov word [bp + 17], character_testX$82	; 5: 199 70 17 82 222
x56905:	mov [bp + 19], bp	; 3: 137 110 19
x56908:	add bp, 17	; 3: 131 197 17
x56911:	jmp isalnum	; 3: 233 166 4

character_testX$82:	; PostCall 7

character_testX$83:	; GetReturnValue £temporary4082

character_testX$84:	; Equal 87 £temporary4082 0
x56914:	cmp bx, 0	; 3: 131 251 0
x56917:	je character_testX$87	; 2: 116 5

character_testX$85:	; Assign £temporary4087 string_Yes#
x56919:	mov ax, @9259$string_Yes#	; 3: 184 220 225

character_testX$86:	; Goto 88
x56922:	jmp character_testX$88	; 2: 235 3

character_testX$87:	; Assign £temporary4087 string_No#
x56924:	mov ax, @9260$string_No#	; 3: 184 224 225

character_testX$88:	; Parameter 7 £temporary4087 10
x56927:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$89:	; Call 7 printf 0
x56930:	mov word [bp + 7], character_testX$90	; 5: 199 70 7 117 222
x56935:	mov [bp + 9], bp	; 3: 137 110 9
x56938:	add bp, 7	; 3: 131 197 7
x56941:	mov di, bp	; 2: 137 239
x56943:	add di, 4	; 3: 131 199 4
x56946:	jmp printf	; 3: 233 143 46

character_testX$90:	; PostCall 7

character_testX$91:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$92:	; Parameter 7 string_isxdigit282725c2729203D2025s0A# 6
x56949:	mov word [bp + 13], @9268$string_isxdigit282725c2729203D2025s0A#	; 5: 199 70 13 227 225

character_testX$93:	; IntegralToIntegral £temporary4089 c
x56954:	mov al, [bp + 6]	; 3: 138 70 6
x56957:	and ax, 255	; 3: 37 255 0
x56960:	cmp al, 0	; 2: 60 0
x56962:	jge character_testX$94	; 2: 125 4
x56964:	neg al	; 2: 246 216
x56966:	neg ax	; 2: 247 216

character_testX$94:	; Parameter 7 £temporary4089 8
x56968:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$95:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$96:	; IntegralToIntegral £temporary4090 c
x56971:	mov al, [bp + 6]	; 3: 138 70 6
x56974:	and ax, 255	; 3: 37 255 0
x56977:	cmp al, 0	; 2: 60 0
x56979:	jge character_testX$97	; 2: 125 4
x56981:	neg al	; 2: 246 216
x56983:	neg ax	; 2: 247 216

character_testX$97:	; Parameter 7 £temporary4090 16
x56985:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$98:	; Call 7 isxdigit 10
x56988:	mov word [bp + 17], character_testX$99	; 5: 199 70 17 170 222
x56993:	mov [bp + 19], bp	; 3: 137 110 19
x56996:	add bp, 17	; 3: 131 197 17
x56999:	jmp isxdigit	; 3: 233 147 4

character_testX$99:	; PostCall 7

character_testX$100:	; GetReturnValue £temporary4091

character_testX$101:	; Equal 104 £temporary4091 0
x57002:	cmp bx, 0	; 3: 131 251 0
x57005:	je character_testX$104	; 2: 116 5

character_testX$102:	; Assign £temporary4096 string_Yes#
x57007:	mov ax, @9275$string_Yes#	; 3: 184 248 225

character_testX$103:	; Goto 105
x57010:	jmp character_testX$105	; 2: 235 3

character_testX$104:	; Assign £temporary4096 string_No#
x57012:	mov ax, @9276$string_No#	; 3: 184 252 225

character_testX$105:	; Parameter 7 £temporary4096 10
x57015:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$106:	; Call 7 printf 0
x57018:	mov word [bp + 7], character_testX$107	; 5: 199 70 7 205 222
x57023:	mov [bp + 9], bp	; 3: 137 110 9
x57026:	add bp, 7	; 3: 131 197 7
x57029:	mov di, bp	; 2: 137 239
x57031:	add di, 4	; 3: 131 199 4
x57034:	jmp printf	; 3: 233 55 46

character_testX$107:	; PostCall 7

character_testX$108:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$109:	; Parameter 7 string_isgraph282725c2729203D2025s0A# 6
x57037:	mov word [bp + 13], @9284$string_isgraph282725c2729203D2025s0A#	; 5: 199 70 13 255 225

character_testX$110:	; IntegralToIntegral £temporary4098 c
x57042:	mov al, [bp + 6]	; 3: 138 70 6
x57045:	and ax, 255	; 3: 37 255 0
x57048:	cmp al, 0	; 2: 60 0
x57050:	jge character_testX$111	; 2: 125 4
x57052:	neg al	; 2: 246 216
x57054:	neg ax	; 2: 247 216

character_testX$111:	; Parameter 7 £temporary4098 8
x57056:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$112:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$113:	; IntegralToIntegral £temporary4099 c
x57059:	mov al, [bp + 6]	; 3: 138 70 6
x57062:	and ax, 255	; 3: 37 255 0
x57065:	cmp al, 0	; 2: 60 0
x57067:	jge character_testX$114	; 2: 125 4
x57069:	neg al	; 2: 246 216
x57071:	neg ax	; 2: 247 216

character_testX$114:	; Parameter 7 £temporary4099 16
x57073:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$115:	; Call 7 isgraph 10
x57076:	mov word [bp + 17], character_testX$116	; 5: 199 70 17 2 223
x57081:	mov [bp + 19], bp	; 3: 137 110 19
x57084:	add bp, 17	; 3: 131 197 17
x57087:	jmp isgraph	; 3: 233 127 4

character_testX$116:	; PostCall 7

character_testX$117:	; GetReturnValue £temporary4100

character_testX$118:	; Equal 121 £temporary4100 0
x57090:	cmp bx, 0	; 3: 131 251 0
x57093:	je character_testX$121	; 2: 116 5

character_testX$119:	; Assign £temporary4105 string_Yes#
x57095:	mov ax, @9291$string_Yes#	; 3: 184 19 226

character_testX$120:	; Goto 122
x57098:	jmp character_testX$122	; 2: 235 3

character_testX$121:	; Assign £temporary4105 string_No#
x57100:	mov ax, @9292$string_No#	; 3: 184 23 226

character_testX$122:	; Parameter 7 £temporary4105 10
x57103:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$123:	; Call 7 printf 0
x57106:	mov word [bp + 7], character_testX$124	; 5: 199 70 7 37 223
x57111:	mov [bp + 9], bp	; 3: 137 110 9
x57114:	add bp, 7	; 3: 131 197 7
x57117:	mov di, bp	; 2: 137 239
x57119:	add di, 4	; 3: 131 199 4
x57122:	jmp printf	; 3: 233 223 45

character_testX$124:	; PostCall 7

character_testX$125:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$126:	; Parameter 7 string_isprint282725c2729203D2025s0A# 6
x57125:	mov word [bp + 13], @9300$string_isprint282725c2729203D2025s0A#	; 5: 199 70 13 26 226

character_testX$127:	; IntegralToIntegral £temporary4107 c
x57130:	mov al, [bp + 6]	; 3: 138 70 6
x57133:	and ax, 255	; 3: 37 255 0
x57136:	cmp al, 0	; 2: 60 0
x57138:	jge character_testX$128	; 2: 125 4
x57140:	neg al	; 2: 246 216
x57142:	neg ax	; 2: 247 216

character_testX$128:	; Parameter 7 £temporary4107 8
x57144:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$129:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$130:	; IntegralToIntegral £temporary4108 c
x57147:	mov al, [bp + 6]	; 3: 138 70 6
x57150:	and ax, 255	; 3: 37 255 0
x57153:	cmp al, 0	; 2: 60 0
x57155:	jge character_testX$131	; 2: 125 4
x57157:	neg al	; 2: 246 216
x57159:	neg ax	; 2: 247 216

character_testX$131:	; Parameter 7 £temporary4108 16
x57161:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$132:	; Call 7 isprint 10
x57164:	mov word [bp + 17], character_testX$133	; 5: 199 70 17 90 223
x57169:	mov [bp + 19], bp	; 3: 137 110 19
x57172:	add bp, 17	; 3: 131 197 17
x57175:	jmp isprint	; 3: 233 70 4

character_testX$133:	; PostCall 7

character_testX$134:	; GetReturnValue £temporary4109

character_testX$135:	; Equal 138 £temporary4109 0
x57178:	cmp bx, 0	; 3: 131 251 0
x57181:	je character_testX$138	; 2: 116 5

character_testX$136:	; Assign £temporary4114 string_Yes#
x57183:	mov ax, @9307$string_Yes#	; 3: 184 46 226

character_testX$137:	; Goto 139
x57186:	jmp character_testX$139	; 2: 235 3

character_testX$138:	; Assign £temporary4114 string_No#
x57188:	mov ax, @9308$string_No#	; 3: 184 50 226

character_testX$139:	; Parameter 7 £temporary4114 10
x57191:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$140:	; Call 7 printf 0
x57194:	mov word [bp + 7], character_testX$141	; 5: 199 70 7 125 223
x57199:	mov [bp + 9], bp	; 3: 137 110 9
x57202:	add bp, 7	; 3: 131 197 7
x57205:	mov di, bp	; 2: 137 239
x57207:	add di, 4	; 3: 131 199 4
x57210:	jmp printf	; 3: 233 135 45

character_testX$141:	; PostCall 7

character_testX$142:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$143:	; Parameter 7 string_ispunct282725c2729203D2025s0A# 6
x57213:	mov word [bp + 13], @9316$string_ispunct282725c2729203D2025s0A#	; 5: 199 70 13 53 226

character_testX$144:	; IntegralToIntegral £temporary4116 c
x57218:	mov al, [bp + 6]	; 3: 138 70 6
x57221:	and ax, 255	; 3: 37 255 0
x57224:	cmp al, 0	; 2: 60 0
x57226:	jge character_testX$145	; 2: 125 4
x57228:	neg al	; 2: 246 216
x57230:	neg ax	; 2: 247 216

character_testX$145:	; Parameter 7 £temporary4116 8
x57232:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$146:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$147:	; IntegralToIntegral £temporary4117 c
x57235:	mov al, [bp + 6]	; 3: 138 70 6
x57238:	and ax, 255	; 3: 37 255 0
x57241:	cmp al, 0	; 2: 60 0
x57243:	jge character_testX$148	; 2: 125 4
x57245:	neg al	; 2: 246 216
x57247:	neg ax	; 2: 247 216

character_testX$148:	; Parameter 7 £temporary4117 16
x57249:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$149:	; Call 7 ispunct 10
x57252:	mov word [bp + 17], character_testX$150	; 5: 199 70 17 178 223
x57257:	mov [bp + 19], bp	; 3: 137 110 19
x57260:	add bp, 17	; 3: 131 197 17
x57263:	jmp ispunct	; 3: 233 32 4

character_testX$150:	; PostCall 7

character_testX$151:	; GetReturnValue £temporary4118

character_testX$152:	; Equal 155 £temporary4118 0
x57266:	cmp bx, 0	; 3: 131 251 0
x57269:	je character_testX$155	; 2: 116 5

character_testX$153:	; Assign £temporary4123 string_Yes#
x57271:	mov ax, @9323$string_Yes#	; 3: 184 73 226

character_testX$154:	; Goto 156
x57274:	jmp character_testX$156	; 2: 235 3

character_testX$155:	; Assign £temporary4123 string_No#
x57276:	mov ax, @9324$string_No#	; 3: 184 77 226

character_testX$156:	; Parameter 7 £temporary4123 10
x57279:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$157:	; Call 7 printf 0
x57282:	mov word [bp + 7], character_testX$158	; 5: 199 70 7 213 223
x57287:	mov [bp + 9], bp	; 3: 137 110 9
x57290:	add bp, 7	; 3: 131 197 7
x57293:	mov di, bp	; 2: 137 239
x57295:	add di, 4	; 3: 131 199 4
x57298:	jmp printf	; 3: 233 47 45

character_testX$158:	; PostCall 7

character_testX$159:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$160:	; Parameter 7 string_iscntrl282725c2729203D2025s0A# 6
x57301:	mov word [bp + 13], @9332$string_iscntrl282725c2729203D2025s0A#	; 5: 199 70 13 80 226

character_testX$161:	; IntegralToIntegral £temporary4125 c
x57306:	mov al, [bp + 6]	; 3: 138 70 6
x57309:	and ax, 255	; 3: 37 255 0
x57312:	cmp al, 0	; 2: 60 0
x57314:	jge character_testX$162	; 2: 125 4
x57316:	neg al	; 2: 246 216
x57318:	neg ax	; 2: 247 216

character_testX$162:	; Parameter 7 £temporary4125 8
x57320:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$163:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$164:	; IntegralToIntegral £temporary4126 c
x57323:	mov al, [bp + 6]	; 3: 138 70 6
x57326:	and ax, 255	; 3: 37 255 0
x57329:	cmp al, 0	; 2: 60 0
x57331:	jge character_testX$165	; 2: 125 4
x57333:	neg al	; 2: 246 216
x57335:	neg ax	; 2: 247 216

character_testX$165:	; Parameter 7 £temporary4126 16
x57337:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$166:	; Call 7 iscntrl 10
x57340:	mov word [bp + 17], character_testX$167	; 5: 199 70 17 10 224
x57345:	mov [bp + 19], bp	; 3: 137 110 19
x57348:	add bp, 17	; 3: 131 197 17
x57351:	jmp iscntrl	; 3: 233 13 4

character_testX$167:	; PostCall 7

character_testX$168:	; GetReturnValue £temporary4127

character_testX$169:	; Equal 172 £temporary4127 0
x57354:	cmp bx, 0	; 3: 131 251 0
x57357:	je character_testX$172	; 2: 116 5

character_testX$170:	; Assign £temporary4132 string_Yes#
x57359:	mov ax, @9339$string_Yes#	; 3: 184 100 226

character_testX$171:	; Goto 173
x57362:	jmp character_testX$173	; 2: 235 3

character_testX$172:	; Assign £temporary4132 string_No#
x57364:	mov ax, @9340$string_No#	; 3: 184 104 226

character_testX$173:	; Parameter 7 £temporary4132 10
x57367:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$174:	; Call 7 printf 0
x57370:	mov word [bp + 7], character_testX$175	; 5: 199 70 7 45 224
x57375:	mov [bp + 9], bp	; 3: 137 110 9
x57378:	add bp, 7	; 3: 131 197 7
x57381:	mov di, bp	; 2: 137 239
x57383:	add di, 4	; 3: 131 199 4
x57386:	jmp printf	; 3: 233 215 44

character_testX$175:	; PostCall 7

character_testX$176:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$177:	; Parameter 7 string_isspace282725c2729203D2025s0A# 6
x57389:	mov word [bp + 13], @9348$string_isspace282725c2729203D2025s0A#	; 5: 199 70 13 107 226

character_testX$178:	; IntegralToIntegral £temporary4134 c
x57394:	mov al, [bp + 6]	; 3: 138 70 6
x57397:	and ax, 255	; 3: 37 255 0
x57400:	cmp al, 0	; 2: 60 0
x57402:	jge character_testX$179	; 2: 125 4
x57404:	neg al	; 2: 246 216
x57406:	neg ax	; 2: 247 216

character_testX$179:	; Parameter 7 £temporary4134 8
x57408:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$180:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$181:	; IntegralToIntegral £temporary4135 c
x57411:	mov al, [bp + 6]	; 3: 138 70 6
x57414:	and ax, 255	; 3: 37 255 0
x57417:	cmp al, 0	; 2: 60 0
x57419:	jge character_testX$182	; 2: 125 4
x57421:	neg al	; 2: 246 216
x57423:	neg ax	; 2: 247 216

character_testX$182:	; Parameter 7 £temporary4135 16
x57425:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$183:	; Call 7 isspace 10
x57428:	mov word [bp + 17], character_testX$184	; 5: 199 70 17 98 224
x57433:	mov [bp + 19], bp	; 3: 137 110 19
x57436:	add bp, 17	; 3: 131 197 17
x57439:	jmp isspace	; 3: 233 72 135

character_testX$184:	; PostCall 7

character_testX$185:	; GetReturnValue £temporary4136

character_testX$186:	; Equal 189 £temporary4136 0
x57442:	cmp bx, 0	; 3: 131 251 0
x57445:	je character_testX$189	; 2: 116 5

character_testX$187:	; Assign £temporary4141 string_Yes#
x57447:	mov ax, @9355$string_Yes#	; 3: 184 127 226

character_testX$188:	; Goto 190
x57450:	jmp character_testX$190	; 2: 235 3

character_testX$189:	; Assign £temporary4141 string_No#
x57452:	mov ax, @9356$string_No#	; 3: 184 131 226

character_testX$190:	; Parameter 7 £temporary4141 10
x57455:	mov [bp + 17], ax	; 3: 137 70 17

character_testX$191:	; Call 7 printf 0
x57458:	mov word [bp + 7], character_testX$192	; 5: 199 70 7 133 224
x57463:	mov [bp + 9], bp	; 3: 137 110 9
x57466:	add bp, 7	; 3: 131 197 7
x57469:	mov di, bp	; 2: 137 239
x57471:	add di, 4	; 3: 131 199 4
x57474:	jmp printf	; 3: 233 127 44

character_testX$192:	; PostCall 7

character_testX$193:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$194:	; Parameter 7 string_tolower282725c2729203D202725c270A# 6
x57477:	mov word [bp + 13], @9364$string_tolower282725c2729203D202725c270A#	; 5: 199 70 13 134 226

character_testX$195:	; IntegralToIntegral £temporary4143 c
x57482:	mov al, [bp + 6]	; 3: 138 70 6
x57485:	and ax, 255	; 3: 37 255 0
x57488:	cmp al, 0	; 2: 60 0
x57490:	jge character_testX$196	; 2: 125 4
x57492:	neg al	; 2: 246 216
x57494:	neg ax	; 2: 247 216

character_testX$196:	; Parameter 7 £temporary4143 8
x57496:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$197:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$198:	; IntegralToIntegral £temporary4144 c
x57499:	mov al, [bp + 6]	; 3: 138 70 6
x57502:	and ax, 255	; 3: 37 255 0
x57505:	cmp al, 0	; 2: 60 0
x57507:	jge character_testX$199	; 2: 125 4
x57509:	neg al	; 2: 246 216
x57511:	neg ax	; 2: 247 216

character_testX$199:	; Parameter 7 £temporary4144 16
x57513:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$200:	; Call 7 tolower 10
x57516:	mov word [bp + 17], character_testX$201	; 5: 199 70 17 186 224
x57521:	mov [bp + 19], bp	; 3: 137 110 19
x57524:	add bp, 17	; 3: 131 197 17
x57527:	jmp tolower	; 3: 233 98 68

character_testX$201:	; PostCall 7

character_testX$202:	; GetReturnValue £temporary4145

character_testX$203:	; IntegralToIntegral £temporary4146 £temporary4145
x57530:	cmp bx, 0	; 3: 131 251 0
x57533:	jge character_testX$204	; 2: 125 4
x57535:	neg bx	; 2: 247 219
x57537:	neg bl	; 2: 246 219

character_testX$204:	; IntegralToIntegral £temporary4147 £temporary4146
x57539:	and bx, 255	; 4: 129 227 255 0
x57543:	cmp bl, 0	; 3: 128 251 0
x57546:	jge character_testX$205	; 2: 125 4
x57548:	neg bl	; 2: 246 219
x57550:	neg bx	; 2: 247 219

character_testX$205:	; Parameter 7 £temporary4147 10
x57552:	mov [bp + 17], bx	; 3: 137 94 17

character_testX$206:	; Call 7 printf 0
x57555:	mov word [bp + 7], character_testX$207	; 5: 199 70 7 230 224
x57560:	mov [bp + 9], bp	; 3: 137 110 9
x57563:	add bp, 7	; 3: 131 197 7
x57566:	mov di, bp	; 2: 137 239
x57568:	add di, 4	; 3: 131 199 4
x57571:	jmp printf	; 3: 233 30 44

character_testX$207:	; PostCall 7

character_testX$208:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$209:	; Parameter 7 string_toupper282725c2729203D202725c270A0A# 6
x57574:	mov word [bp + 13], @9371$string_toupper282725c2729203D202725c270A0A#	; 5: 199 70 13 156 226

character_testX$210:	; IntegralToIntegral £temporary4149 c
x57579:	mov al, [bp + 6]	; 3: 138 70 6
x57582:	and ax, 255	; 3: 37 255 0
x57585:	cmp al, 0	; 2: 60 0
x57587:	jge character_testX$211	; 2: 125 4
x57589:	neg al	; 2: 246 216
x57591:	neg ax	; 2: 247 216

character_testX$211:	; Parameter 7 £temporary4149 8
x57593:	mov [bp + 15], ax	; 3: 137 70 15

character_testX$212:	; CallHeader 7 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

character_testX$213:	; IntegralToIntegral £temporary4150 c
x57596:	mov al, [bp + 6]	; 3: 138 70 6
x57599:	and ax, 255	; 3: 37 255 0
x57602:	cmp al, 0	; 2: 60 0
x57604:	jge character_testX$214	; 2: 125 4
x57606:	neg al	; 2: 246 216
x57608:	neg ax	; 2: 247 216

character_testX$214:	; Parameter 7 £temporary4150 16
x57610:	mov [bp + 23], ax	; 3: 137 70 23

character_testX$215:	; Call 7 toupper 10
x57613:	mov word [bp + 17], character_testX$216	; 5: 199 70 17 27 225
x57618:	mov [bp + 19], bp	; 3: 137 110 19
x57621:	add bp, 17	; 3: 131 197 17
x57624:	jmp toupper	; 3: 233 40 3

character_testX$216:	; PostCall 7

character_testX$217:	; GetReturnValue £temporary4151

character_testX$218:	; IntegralToIntegral £temporary4152 £temporary4151
x57627:	cmp bx, 0	; 3: 131 251 0
x57630:	jge character_testX$219	; 2: 125 4
x57632:	neg bx	; 2: 247 219
x57634:	neg bl	; 2: 246 219

character_testX$219:	; IntegralToIntegral £temporary4153 £temporary4152
x57636:	and bx, 255	; 4: 129 227 255 0
x57640:	cmp bl, 0	; 3: 128 251 0
x57643:	jge character_testX$220	; 2: 125 4
x57645:	neg bl	; 2: 246 219
x57647:	neg bx	; 2: 247 219

character_testX$220:	; Parameter 7 £temporary4153 10
x57649:	mov [bp + 17], bx	; 3: 137 94 17

character_testX$221:	; Call 7 printf 0
x57652:	mov word [bp + 7], character_testX$222	; 5: 199 70 7 71 225
x57657:	mov [bp + 9], bp	; 3: 137 110 9
x57660:	add bp, 7	; 3: 131 197 7
x57663:	mov di, bp	; 2: 137 239
x57665:	add di, 4	; 3: 131 199 4
x57668:	jmp printf	; 3: 233 189 43

character_testX$222:	; PostCall 7

character_testX$223:	; Return 0
x57671:	mov ax, [bp]	; 3: 139 70 0
x57674:	mov di, [bp + 4]	; 3: 139 126 4
x57677:	mov bp, [bp + 2]	; 3: 139 110 2
x57680:	jmp ax	; 2: 255 224

character_testX$224:	; FunctionEnd character_testX

@9185$string_ascii2025i0A#:
x57682:	db "ascii %i", 10, 0	; 10: 97 115 99 105 105 32 37 105 10 0

@9188$string_islower282725c2729203D2025s0A#:
x57692:	db "islower(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 108 111 119 101 114 40 39 37 99 39 41 32 61 32 37 115 10 0

@9195$string_Yes#:
x57712:	db "Yes", 0	; 4: 89 101 115 0

@9196$string_No#:
x57716:	db "No", 0	; 3: 78 111 0

@9204$string_isupper282725c2729203D2025s0A#:
x57719:	db "isupper(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 117 112 112 101 114 40 39 37 99 39 41 32 61 32 37 115 10 0

@9211$string_Yes#:
x57739:	db "Yes", 0	; 4: 89 101 115 0

@9212$string_No#:
x57743:	db "No", 0	; 3: 78 111 0

@9220$string_isalpha282725c2729203D2025s0A#:
x57746:	db "isalpha(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 97 108 112 104 97 40 39 37 99 39 41 32 61 32 37 115 10 0

@9227$string_Yes#:
x57766:	db "Yes", 0	; 4: 89 101 115 0

@9228$string_No#:
x57770:	db "No", 0	; 3: 78 111 0

@9236$string_isdigit282725c2729203D2025s0A#:
x57773:	db "isdigit(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 100 105 103 105 116 40 39 37 99 39 41 32 61 32 37 115 10 0

@9243$string_Yes#:
x57793:	db "Yes", 0	; 4: 89 101 115 0

@9244$string_No#:
x57797:	db "No", 0	; 3: 78 111 0

@9252$string_isalnum282725c2729203D2025s0A#:
x57800:	db "isalnum(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 97 108 110 117 109 40 39 37 99 39 41 32 61 32 37 115 10 0

@9259$string_Yes#:
x57820:	db "Yes", 0	; 4: 89 101 115 0

@9260$string_No#:
x57824:	db "No", 0	; 3: 78 111 0

@9268$string_isxdigit282725c2729203D2025s0A#:
x57827:	db "isxdigit(", 39, "%c", 39, ") = %s", 10, 0	; 21: 105 115 120 100 105 103 105 116 40 39 37 99 39 41 32 61 32 37 115 10 0

@9275$string_Yes#:
x57848:	db "Yes", 0	; 4: 89 101 115 0

@9276$string_No#:
x57852:	db "No", 0	; 3: 78 111 0

@9284$string_isgraph282725c2729203D2025s0A#:
x57855:	db "isgraph(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 103 114 97 112 104 40 39 37 99 39 41 32 61 32 37 115 10 0

@9291$string_Yes#:
x57875:	db "Yes", 0	; 4: 89 101 115 0

@9292$string_No#:
x57879:	db "No", 0	; 3: 78 111 0

@9300$string_isprint282725c2729203D2025s0A#:
x57882:	db "isprint(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 112 114 105 110 116 40 39 37 99 39 41 32 61 32 37 115 10 0

@9307$string_Yes#:
x57902:	db "Yes", 0	; 4: 89 101 115 0

@9308$string_No#:
x57906:	db "No", 0	; 3: 78 111 0

@9316$string_ispunct282725c2729203D2025s0A#:
x57909:	db "ispunct(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 112 117 110 99 116 40 39 37 99 39 41 32 61 32 37 115 10 0

@9323$string_Yes#:
x57929:	db "Yes", 0	; 4: 89 101 115 0

@9324$string_No#:
x57933:	db "No", 0	; 3: 78 111 0

@9332$string_iscntrl282725c2729203D2025s0A#:
x57936:	db "iscntrl(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 99 110 116 114 108 40 39 37 99 39 41 32 61 32 37 115 10 0

@9339$string_Yes#:
x57956:	db "Yes", 0	; 4: 89 101 115 0

@9340$string_No#:
x57960:	db "No", 0	; 3: 78 111 0

@9348$string_isspace282725c2729203D2025s0A#:
x57963:	db "isspace(", 39, "%c", 39, ") = %s", 10, 0	; 20: 105 115 115 112 97 99 101 40 39 37 99 39 41 32 61 32 37 115 10 0

@9355$string_Yes#:
x57983:	db "Yes", 0	; 4: 89 101 115 0

@9356$string_No#:
x57987:	db "No", 0	; 3: 78 111 0

@9364$string_tolower282725c2729203D202725c270A#:
x57990:	db "tolower(", 39, "%c", 39, ") = ", 39, "%c", 39, 10, 0	; 22: 116 111 108 111 119 101 114 40 39 37 99 39 41 32 61 32 39 37 99 39 10 0

@9371$string_toupper282725c2729203D202725c270A0A#:
x58012:	db "toupper(", 39, "%c", 39, ") = ", 39, "%c", 39, 10, 10, 0	; 23: 116 111 117 112 112 101 114 40 39 37 99 39 41 32 61 32 39 37 99 39 10 10 0

isalpha:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

isalpha$1:	; Parameter 8 c 6
x58035:	mov ax, [bp + 6]	; 3: 139 70 6
x58038:	mov [bp + 14], ax	; 3: 137 70 14

isalpha$2:	; Call 8 islower 0
x58041:	mov word [bp + 8], isalpha$3	; 5: 199 70 8 199 226
x58046:	mov [bp + 10], bp	; 3: 137 110 10
x58049:	add bp, 8	; 3: 131 197 8
x58052:	jmp islower	; 3: 233 235 135

isalpha$3:	; PostCall 8

isalpha$4:	; GetReturnValue £temporary184

isalpha$5:	; NotEqual 12 £temporary184 0
x58055:	cmp bx, 0	; 3: 131 251 0
x58058:	jne isalpha$12	; 2: 117 25

isalpha$6:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

isalpha$7:	; Parameter 8 c 6
x58060:	mov ax, [bp + 6]	; 3: 139 70 6
x58063:	mov [bp + 14], ax	; 3: 137 70 14

isalpha$8:	; Call 8 isupper 0
x58066:	mov word [bp + 8], isalpha$9	; 5: 199 70 8 224 226
x58071:	mov [bp + 10], bp	; 3: 137 110 10
x58074:	add bp, 8	; 3: 131 197 8
x58077:	jmp isupper	; 3: 233 42 59

isalpha$9:	; PostCall 8

isalpha$10:	; GetReturnValue £temporary185

isalpha$11:	; Equal 14 £temporary185 0
x58080:	cmp bx, 0	; 3: 131 251 0
x58083:	je isalpha$14	; 2: 116 5

isalpha$12:	; Assign £temporary189 1
x58085:	mov bx, 1	; 3: 187 1 0

isalpha$13:	; Goto 15
x58088:	jmp isalpha$15	; 2: 235 3

isalpha$14:	; Assign £temporary189 0
x58090:	mov bx, 0	; 3: 187 0 0

isalpha$15:	; SetReturnValue £temporary189

isalpha$16:	; Return £temporary189
x58093:	mov ax, [bp]	; 3: 139 70 0
x58096:	mov di, [bp + 4]	; 3: 139 126 4
x58099:	mov bp, [bp + 2]	; 3: 139 110 2
x58102:	jmp ax	; 2: 255 224

isalpha$17:	; FunctionEnd isalpha

isalnum:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

isalnum$1:	; Parameter 8 c 6
x58104:	mov ax, [bp + 6]	; 3: 139 70 6
x58107:	mov [bp + 14], ax	; 3: 137 70 14

isalnum$2:	; Call 8 isalpha 0
x58110:	mov word [bp + 8], isalnum$3	; 5: 199 70 8 12 227
x58115:	mov [bp + 10], bp	; 3: 137 110 10
x58118:	add bp, 8	; 3: 131 197 8
x58121:	nop	; 1: 144
x58122:	jmp isalpha	; 2: 235 167

isalnum$3:	; PostCall 8

isalnum$4:	; GetReturnValue £temporary196

isalnum$5:	; NotEqual 12 £temporary196 0
x58124:	cmp bx, 0	; 3: 131 251 0
x58127:	jne isalnum$12	; 2: 117 25

isalnum$6:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

isalnum$7:	; Parameter 8 c 6
x58129:	mov ax, [bp + 6]	; 3: 139 70 6
x58132:	mov [bp + 14], ax	; 3: 137 70 14

isalnum$8:	; Call 8 isdigit 0
x58135:	mov word [bp + 8], isalnum$9	; 5: 199 70 8 37 227
x58140:	mov [bp + 10], bp	; 3: 137 110 10
x58143:	add bp, 8	; 3: 131 197 8
x58146:	jmp isdigit	; 3: 233 68 72

isalnum$9:	; PostCall 8

isalnum$10:	; GetReturnValue £temporary197

isalnum$11:	; Equal 14 £temporary197 0
x58149:	cmp bx, 0	; 3: 131 251 0
x58152:	je isalnum$14	; 2: 116 5

isalnum$12:	; Assign £temporary201 1
x58154:	mov bx, 1	; 3: 187 1 0

isalnum$13:	; Goto 15
x58157:	jmp isalnum$15	; 2: 235 3

isalnum$14:	; Assign £temporary201 0
x58159:	mov bx, 0	; 3: 187 0 0

isalnum$15:	; SetReturnValue £temporary201

isalnum$16:	; Return £temporary201
x58162:	mov ax, [bp]	; 3: 139 70 0
x58165:	mov di, [bp + 4]	; 3: 139 126 4
x58168:	mov bp, [bp + 2]	; 3: 139 110 2
x58171:	jmp ax	; 2: 255 224

isalnum$17:	; FunctionEnd isalnum

isxdigit:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

isxdigit$1:	; Parameter 8 c 6
x58173:	mov ax, [bp + 6]	; 3: 139 70 6
x58176:	mov [bp + 14], ax	; 3: 137 70 14

isxdigit$2:	; Call 8 isdigit 0
x58179:	mov word [bp + 8], isxdigit$3	; 5: 199 70 8 81 227
x58184:	mov [bp + 10], bp	; 3: 137 110 10
x58187:	add bp, 8	; 3: 131 197 8
x58190:	jmp isdigit	; 3: 233 24 72

isxdigit$3:	; PostCall 8

isxdigit$4:	; GetReturnValue £temporary204

isxdigit$5:	; NotEqual 10 £temporary204 0
x58193:	cmp bx, 0	; 3: 131 251 0
x58196:	jne isxdigit$10	; 2: 117 24

isxdigit$6:	; SignedLessThan 8 c 97
x58198:	cmp word [bp + 6], 97	; 4: 131 126 6 97
x58202:	jl isxdigit$8	; 2: 124 6

isxdigit$7:	; SignedLessThanEqual 10 c 102
x58204:	cmp word [bp + 6], 102	; 4: 131 126 6 102
x58208:	jle isxdigit$10	; 2: 126 12

isxdigit$8:	; SignedLessThan 12 c 65
x58210:	cmp word [bp + 6], 65	; 4: 131 126 6 65
x58214:	jl isxdigit$12	; 2: 124 11

isxdigit$9:	; SignedGreaterThan 12 c 70
x58216:	cmp word [bp + 6], 70	; 4: 131 126 6 70
x58220:	jg isxdigit$12	; 2: 127 5

isxdigit$10:	; Assign £temporary214 1
x58222:	mov bx, 1	; 3: 187 1 0

isxdigit$11:	; Goto 13
x58225:	jmp isxdigit$13	; 2: 235 3

isxdigit$12:	; Assign £temporary214 0
x58227:	mov bx, 0	; 3: 187 0 0

isxdigit$13:	; SetReturnValue £temporary214

isxdigit$14:	; Return £temporary214
x58230:	mov ax, [bp]	; 3: 139 70 0
x58233:	mov di, [bp + 4]	; 3: 139 126 4
x58236:	mov bp, [bp + 2]	; 3: 139 110 2
x58239:	jmp ax	; 2: 255 224

isxdigit$15:	; FunctionEnd isxdigit

isgraph:	; SignedLessThan 4 c 32
x58241:	cmp word [bp + 6], 32	; 4: 131 126 6 32
x58245:	jl isgraph$4	; 2: 124 11

isgraph$1:	; SignedGreaterThan 4 c 126
x58247:	cmp word [bp + 6], 126	; 4: 131 126 6 126
x58251:	jg isgraph$4	; 2: 127 5

isgraph$2:	; Assign £temporary219 1
x58253:	mov bx, 1	; 3: 187 1 0

isgraph$3:	; Goto 5
x58256:	jmp isgraph$5	; 2: 235 3

isgraph$4:	; Assign £temporary219 0
x58258:	mov bx, 0	; 3: 187 0 0

isgraph$5:	; SetReturnValue £temporary219

isgraph$6:	; Return £temporary219
x58261:	mov ax, [bp]	; 3: 139 70 0
x58264:	mov di, [bp + 4]	; 3: 139 126 4
x58267:	mov bp, [bp + 2]	; 3: 139 110 2
x58270:	jmp ax	; 2: 255 224

isgraph$7:	; FunctionEnd isgraph

isprint:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

isprint$1:	; Parameter 8 c 6
x58272:	mov ax, [bp + 6]	; 3: 139 70 6
x58275:	mov [bp + 14], ax	; 3: 137 70 14

isprint$2:	; Call 8 isgraph 0
x58278:	mov word [bp + 8], isprint$3	; 5: 199 70 8 180 227
x58283:	mov [bp + 10], bp	; 3: 137 110 10
x58286:	add bp, 8	; 3: 131 197 8
x58289:	nop	; 1: 144
x58290:	jmp isgraph	; 2: 235 205

isprint$3:	; PostCall 8

isprint$4:	; GetReturnValue £temporary220

isprint$5:	; Equal 9 £temporary220 0
x58292:	cmp bx, 0	; 3: 131 251 0
x58295:	je isprint$9	; 2: 116 11

isprint$6:	; Equal 9 c 32
x58297:	cmp word [bp + 6], 32	; 4: 131 126 6 32
x58301:	je isprint$9	; 2: 116 5

isprint$7:	; Assign £temporary224 1
x58303:	mov bx, 1	; 3: 187 1 0

isprint$8:	; Goto 10
x58306:	jmp isprint$10	; 2: 235 3

isprint$9:	; Assign £temporary224 0
x58308:	mov bx, 0	; 3: 187 0 0

isprint$10:	; SetReturnValue £temporary224

isprint$11:	; Return £temporary224
x58311:	mov ax, [bp]	; 3: 139 70 0
x58314:	mov di, [bp + 4]	; 3: 139 126 4
x58317:	mov bp, [bp + 2]	; 3: 139 110 2
x58320:	jmp ax	; 2: 255 224

isprint$12:	; FunctionEnd isprint

ispunct:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

ispunct$1:	; Parameter 8 c 6
x58322:	mov ax, [bp + 6]	; 3: 139 70 6
x58325:	mov [bp + 14], ax	; 3: 137 70 14

ispunct$2:	; Call 8 isgraph 0
x58328:	mov word [bp + 8], ispunct$3	; 5: 199 70 8 230 227
x58333:	mov [bp + 10], bp	; 3: 137 110 10
x58336:	add bp, 8	; 3: 131 197 8
x58339:	nop	; 1: 144
x58340:	jmp isgraph	; 2: 235 155

ispunct$3:	; PostCall 8

ispunct$4:	; GetReturnValue £temporary226

ispunct$5:	; Equal 14 £temporary226 0
x58342:	cmp bx, 0	; 3: 131 251 0
x58345:	je ispunct$14	; 2: 116 30

ispunct$6:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

ispunct$7:	; Parameter 8 c 6
x58347:	mov ax, [bp + 6]	; 3: 139 70 6
x58350:	mov [bp + 14], ax	; 3: 137 70 14

ispunct$8:	; Call 8 isalnum 0
x58353:	mov word [bp + 8], ispunct$9	; 5: 199 70 8 255 227
x58358:	mov [bp + 10], bp	; 3: 137 110 10
x58361:	add bp, 8	; 3: 131 197 8
x58364:	jmp isalnum	; 3: 233 249 254

ispunct$9:	; PostCall 8

ispunct$10:	; GetReturnValue £temporary227

ispunct$11:	; NotEqual 14 £temporary227 0
x58367:	cmp bx, 0	; 3: 131 251 0
x58370:	jne ispunct$14	; 2: 117 5

ispunct$12:	; Assign £temporary232 1
x58372:	mov bx, 1	; 3: 187 1 0

ispunct$13:	; Goto 15
x58375:	jmp ispunct$15	; 2: 235 3

ispunct$14:	; Assign £temporary232 0
x58377:	mov bx, 0	; 3: 187 0 0

ispunct$15:	; SetReturnValue £temporary232

ispunct$16:	; Return £temporary232
x58380:	mov ax, [bp]	; 3: 139 70 0
x58383:	mov di, [bp + 4]	; 3: 139 126 4
x58386:	mov bp, [bp + 2]	; 3: 139 110 2
x58389:	jmp ax	; 2: 255 224

ispunct$17:	; FunctionEnd ispunct

iscntrl:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

iscntrl$1:	; Parameter 8 c 6
x58391:	mov ax, [bp + 6]	; 3: 139 70 6
x58394:	mov [bp + 14], ax	; 3: 137 70 14

iscntrl$2:	; Call 8 isprint 0
x58397:	mov word [bp + 8], iscntrl$3	; 5: 199 70 8 43 228
x58402:	mov [bp + 10], bp	; 3: 137 110 10
x58405:	add bp, 8	; 3: 131 197 8
x58408:	jmp isprint	; 3: 233 117 255

iscntrl$3:	; PostCall 8

iscntrl$4:	; GetReturnValue £temporary235

iscntrl$5:	; NotEqual 8 £temporary235 0
x58411:	cmp bx, 0	; 3: 131 251 0
x58414:	jne iscntrl$8	; 2: 117 5

iscntrl$6:	; Assign £temporary238 1
x58416:	mov bx, 1	; 3: 187 1 0

iscntrl$7:	; Goto 9
x58419:	jmp iscntrl$9	; 2: 235 3

iscntrl$8:	; Assign £temporary238 0
x58421:	mov bx, 0	; 3: 187 0 0

iscntrl$9:	; SetReturnValue £temporary238

iscntrl$10:	; Return £temporary238
x58424:	mov ax, [bp]	; 3: 139 70 0
x58427:	mov di, [bp + 4]	; 3: 139 126 4
x58430:	mov bp, [bp + 2]	; 3: 139 110 2
x58433:	jmp ax	; 2: 255 224

iscntrl$11:	; FunctionEnd iscntrl

toupper:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

toupper$1:	; Parameter 8 c 6
x58435:	mov ax, [bp + 6]	; 3: 139 70 6
x58438:	mov [bp + 14], ax	; 3: 137 70 14

toupper$2:	; Call 8 islower 0
x58441:	mov word [bp + 8], toupper$3	; 5: 199 70 8 87 228
x58446:	mov [bp + 10], bp	; 3: 137 110 10
x58449:	add bp, 8	; 3: 131 197 8
x58452:	jmp islower	; 3: 233 91 134

toupper$3:	; PostCall 8

toupper$4:	; GetReturnValue £temporary267

toupper$5:	; Equal 31 £temporary267 0
x58455:	cmp bx, 0	; 3: 131 251 0
x58458:	je toupper$31	; 2: 116 122

toupper$6:	; CallHeader 8 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

toupper$7:	; Call 8 localeconv 0
x58460:	mov word [bp + 8], toupper$8	; 5: 199 70 8 106 228
x58465:	mov [bp + 10], bp	; 3: 137 110 10
x58468:	add bp, 8	; 3: 131 197 8
x58471:	jmp localeconv	; 3: 233 11 58

toupper$8:	; PostCall 8

toupper$9:	; GetReturnValue £temporary268

toupper$10:	; Assign localeConvPtr £temporary268
x58474:	mov [bp + 8], bx	; 3: 137 94 8

toupper$11:	; Equal 28 localeConvPtr 0
x58477:	cmp word [bp + 8], 0	; 4: 131 126 8 0
x58481:	je toupper$28	; 2: 116 82

toupper$12:	; Deref £temporary270 -> localeConvPtr localeConvPtr 12
x58483:	mov si, [bp + 8]	; 3: 139 118 8

toupper$13:	; Assign lowerCase £temporary270 -> localeConvPtr
x58486:	mov ax, [si + 12]	; 3: 139 68 12
x58489:	mov [bp + 10], ax	; 3: 137 70 10

toupper$14:	; Deref £temporary271 -> localeConvPtr localeConvPtr 14
x58492:	mov si, [bp + 8]	; 3: 139 118 8

toupper$15:	; Assign upperCase £temporary271 -> localeConvPtr
x58495:	mov ax, [si + 14]	; 3: 139 68 14
x58498:	mov [bp + 12], ax	; 3: 137 70 12

toupper$16:	; CallHeader 14 System.Collections.Generic.HashSet`1[CCompiler.Symbol] 0

toupper$17:	; Parameter 14 lowerCase 6
x58501:	mov ax, [bp + 10]	; 3: 139 70 10
x58504:	mov [bp + 20], ax	; 3: 137 70 20

toupper$18:	; Parameter 14 c 8
x58507:	mov ax, [bp + 6]	; 3: 139 70 6
x58510:	mov [bp + 22], ax	; 3: 137 70 22

toupper$19:	; Call 14 strchr 0
x58513:	mov word [bp + 14], toupper$20	; 5: 199 70 14 159 228
x58518:	mov [bp + 16], bp	; 3: 137 110 16
x58521:	add bp, 14	; 3: 131 197 14
x58524:	jmp strchr	; 3: 233 28 61

toupper$20:	; PostCall 14

toupper$21:	; GetReturnValue £temporary272

toupper$22:	; BinarySubtract index £temporary272 lowerCase
x58527:	sub bx, [bp + 10]	; 3: 43 94 10
x58530:	mov [bp + 14], bx	; 3: 137 94 14

toupper$23:	; BinaryAdd £temporary275 upperCase index
x58533:	mov si, [bp + 12]	; 3: 139 118 12
x58536:	add si, [bp + 14]	; 3: 3 118 14

toupper$24:	; Deref £temporary274 -> £temporary275 £temporary275 0

toupper$25:	; IntegralToIntegral £temporary276 £temporary274 -> £temporary275
x58539:	mov bl, [si]	; 2: 138 28
x58541:	and bx, 255	; 4: 129 227 255 0
x58545:	cmp bl, 0	; 3: 128 251 0
x58548:	jge toupper$26	; 2: 125 4
x58550:	neg bl	; 2: 246 219
x58552:	neg bx	; 2: 247 219

toupper$26:	; SetReturnValue £temporary276

toupper$27:	; Return £temporary276
x58554:	mov ax, [bp]	; 3: 139 70 0
x58557:	mov di, [bp + 4]	; 3: 139 126 4
x58560:	mov bp, [bp + 2]	; 3: 139 110 2
x58563:	jmp ax	; 2: 255 224

toupper$28:	; BinarySubtract £temporary277 c 32
x58565:	mov bx, [bp + 6]	; 3: 139 94 6
x58568:	sub bx, 32	; 3: 131 235 32

toupper$29:	; SetReturnValue £temporary277

toupper$30:	; Return £temporary277
x58571:	mov ax, [bp]	; 3: 139 70 0
x58574:	mov di, [bp + 4]	; 3: 139 126 4
x58577:	mov bp, [bp + 2]	; 3: 139 110 2
x58580:	jmp ax	; 2: 255 224

toupper$31:	; SetReturnValue c
x58582:	mov bx, [bp + 6]	; 3: 139 94 6

toupper$32:	; Return c
x58585:	mov ax, [bp]	; 3: 139 70 0
x58588:	mov di, [bp + 4]	; 3: 139 126 4
x58591:	mov bp, [bp + 2]	; 3: 139 110 2
x58594:	jmp ax	; 2: 255 224

toupper$33:	; FunctionEnd toupper

locale_test:	; Empty

locale_test$1:	; Return 0
x58596:	mov ax, [bp]	; 3: 139 70 0
x58599:	mov di, [bp + 4]	; 3: 139 126 4
x58602:	mov bp, [bp + 2]	; 3: 139 110 2
x58605:	jmp ax	; 2: 255 224

locale_test$2:	; FunctionEnd locale_test

$StackTop:
x58607:
